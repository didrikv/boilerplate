/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.l = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };

/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};

/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};

/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 265);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

if (process.env.NODE_ENV !== 'production') {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var emptyFunction = __webpack_require__(9);

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  (function () {
    var printWarning = function printWarning(format) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    };

    warning = function warning(condition, format) {
      if (format === undefined) {
        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
      }

      if (format.indexOf('Failed Composite propType: ') === 0) {
        return; // Ignore CompositeComponent proptype check.
      }

      if (!condition) {
        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args[_key2 - 2] = arguments[_key2];
        }

        printWarning.apply(undefined, [format].concat(args));
      }
    };
  })();
}

module.exports = warning;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */


/**
 * WARNING: DO NOT manually require this module.
 * This is a replacement for `invariant(...)` used by the error code system
 * and will _only_ be required by the corresponding babel pass.
 * It always throws.
 */

function reactProdInvariant(code) {
  var argCount = arguments.length - 1;

  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

  for (var argIdx = 0; argIdx < argCount; argIdx++) {
    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
  }

  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

  var error = new Error(message);
  error.name = 'Invariant Violation';
  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

  throw error;
}

module.exports = reactProdInvariant;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var DOMProperty = __webpack_require__(13);
var ReactDOMComponentFlags = __webpack_require__(71);

var invariant = __webpack_require__(1);

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var Flags = ReactDOMComponentFlags;

var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);

/**
 * Check if a given node should be cached.
 */
function shouldPrecacheNode(node, nodeID) {
  return node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID) || node.nodeType === 8 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ';
}

/**
 * Drill down (through composites and empty components) until we get a host or
 * host text component.
 *
 * This is pretty polymorphic but unavoidable with the current structure we have
 * for `_renderedChildren`.
 */
function getRenderedHostOrTextFromComponent(component) {
  var rendered;
  while (rendered = component._renderedComponent) {
    component = rendered;
  }
  return component;
}

/**
 * Populate `_hostNode` on the rendered host/text component with the given
 * DOM node. The passed `inst` can be a composite.
 */
function precacheNode(inst, node) {
  var hostInst = getRenderedHostOrTextFromComponent(inst);
  hostInst._hostNode = node;
  node[internalInstanceKey] = hostInst;
}

function uncacheNode(inst) {
  var node = inst._hostNode;
  if (node) {
    delete node[internalInstanceKey];
    inst._hostNode = null;
  }
}

/**
 * Populate `_hostNode` on each child of `inst`, assuming that the children
 * match up with the DOM (element) children of `node`.
 *
 * We cache entire levels at once to avoid an n^2 problem where we access the
 * children of a node sequentially and have to walk from the start to our target
 * node every time.
 *
 * Since we update `_renderedChildren` and the actual DOM at (slightly)
 * different times, we could race here and see a newer `_renderedChildren` than
 * the DOM nodes we see. To avoid this, ReactMultiChild calls
 * `prepareToManageChildren` before we change `_renderedChildren`, at which
 * time the container's child nodes are always cached (until it unmounts).
 */
function precacheChildNodes(inst, node) {
  if (inst._flags & Flags.hasCachedChildNodes) {
    return;
  }
  var children = inst._renderedChildren;
  var childNode = node.firstChild;
  outer: for (var name in children) {
    if (!children.hasOwnProperty(name)) {
      continue;
    }
    var childInst = children[name];
    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
    if (childID === 0) {
      // We're currently unmounting this child in ReactMultiChild; skip it.
      continue;
    }
    // We assume the child nodes are in the same order as the child instances.
    for (; childNode !== null; childNode = childNode.nextSibling) {
      if (shouldPrecacheNode(childNode, childID)) {
        precacheNode(childInst, childNode);
        continue outer;
      }
    }
    // We reached the end of the DOM children without finding an ID match.
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
  }
  inst._flags |= Flags.hasCachedChildNodes;
}

/**
 * Given a DOM node, return the closest ReactDOMComponent or
 * ReactDOMTextComponent instance ancestor.
 */
function getClosestInstanceFromNode(node) {
  if (node[internalInstanceKey]) {
    return node[internalInstanceKey];
  }

  // Walk up the tree until we find an ancestor whose instance we have cached.
  var parents = [];
  while (!node[internalInstanceKey]) {
    parents.push(node);
    if (node.parentNode) {
      node = node.parentNode;
    } else {
      // Top of the tree. This node must not be part of a React tree (or is
      // unmounted, potentially).
      return null;
    }
  }

  var closest;
  var inst;
  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
    closest = inst;
    if (parents.length) {
      precacheChildNodes(inst, node);
    }
  }

  return closest;
}

/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */
function getInstanceFromNode(node) {
  var inst = getClosestInstanceFromNode(node);
  if (inst != null && inst._hostNode === node) {
    return inst;
  } else {
    return null;
  }
}

/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */
function getNodeFromInstance(inst) {
  // Without this first invariant, passing a non-DOM-component triggers the next
  // invariant for a missing parent, which is super confusing.
  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

  if (inst._hostNode) {
    return inst._hostNode;
  }

  // Walk up the tree until we find an ancestor whose DOM node we have cached.
  var parents = [];
  while (!inst._hostNode) {
    parents.push(inst);
    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
    inst = inst._hostParent;
  }

  // Now parents contains each ancestor that does *not* have a cached native
  // node, and `inst` is the deepest ancestor that does.
  for (; parents.length; inst = parents.pop()) {
    precacheChildNodes(inst, inst._hostNode);
  }

  return inst._hostNode;
}

var ReactDOMComponentTree = {
  getClosestInstanceFromNode: getClosestInstanceFromNode,
  getInstanceFromNode: getInstanceFromNode,
  getNodeFromInstance: getNodeFromInstance,
  precacheChildNodes: precacheChildNodes,
  precacheNode: precacheNode,
  uncacheNode: uncacheNode
};

module.exports = ReactDOMComponentTree;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(16);

var ReactCurrentOwner = __webpack_require__(11);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

function isNative(fn) {
  // Based on isNative() from Lodash
  var funcToString = Function.prototype.toString;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var reIsNative = RegExp('^' + funcToString
  // Take an example native function source for comparison
  .call(hasOwnProperty)
  // Strip regex characters so we can use it for regex
  .replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
  // Remove hasOwnProperty from the template to make it generic
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  try {
    var source = funcToString.call(fn);
    return reIsNative.test(source);
  } catch (err) {
    return false;
  }
}

var canUseCollections =
// Array.from
typeof Array.from === 'function' &&
// Map
typeof Map === 'function' && isNative(Map) &&
// Map.prototype.keys
Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
// Set
typeof Set === 'function' && isNative(Set) &&
// Set.prototype.keys
Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

var setItem;
var getItem;
var removeItem;
var getItemIDs;
var addRoot;
var removeRoot;
var getRootIDs;

if (canUseCollections) {
  var itemMap = new Map();
  var rootIDSet = new Set();

  setItem = function (id, item) {
    itemMap.set(id, item);
  };
  getItem = function (id) {
    return itemMap.get(id);
  };
  removeItem = function (id) {
    itemMap['delete'](id);
  };
  getItemIDs = function () {
    return Array.from(itemMap.keys());
  };

  addRoot = function (id) {
    rootIDSet.add(id);
  };
  removeRoot = function (id) {
    rootIDSet['delete'](id);
  };
  getRootIDs = function () {
    return Array.from(rootIDSet.keys());
  };
} else {
  var itemByKey = {};
  var rootByKey = {};

  // Use non-numeric keys to prevent V8 performance issues:
  // https://github.com/facebook/react/pull/7232
  var getKeyFromID = function (id) {
    return '.' + id;
  };
  var getIDFromKey = function (key) {
    return parseInt(key.substr(1), 10);
  };

  setItem = function (id, item) {
    var key = getKeyFromID(id);
    itemByKey[key] = item;
  };
  getItem = function (id) {
    var key = getKeyFromID(id);
    return itemByKey[key];
  };
  removeItem = function (id) {
    var key = getKeyFromID(id);
    delete itemByKey[key];
  };
  getItemIDs = function () {
    return Object.keys(itemByKey).map(getIDFromKey);
  };

  addRoot = function (id) {
    var key = getKeyFromID(id);
    rootByKey[key] = true;
  };
  removeRoot = function (id) {
    var key = getKeyFromID(id);
    delete rootByKey[key];
  };
  getRootIDs = function () {
    return Object.keys(rootByKey).map(getIDFromKey);
  };
}

var unmountedIDs = [];

function purgeDeep(id) {
  var item = getItem(id);
  if (item) {
    var childIDs = item.childIDs;

    removeItem(id);
    childIDs.forEach(purgeDeep);
  }
}

function describeComponentFrame(name, source, ownerName) {
  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
}

function getDisplayName(element) {
  if (element == null) {
    return '#empty';
  } else if (typeof element === 'string' || typeof element === 'number') {
    return '#text';
  } else if (typeof element.type === 'string') {
    return element.type;
  } else {
    return element.type.displayName || element.type.name || 'Unknown';
  }
}

function describeID(id) {
  var name = ReactComponentTreeHook.getDisplayName(id);
  var element = ReactComponentTreeHook.getElement(id);
  var ownerID = ReactComponentTreeHook.getOwnerID(id);
  var ownerName;
  if (ownerID) {
    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
  }
  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
  return describeComponentFrame(name, element && element._source, ownerName);
}

var ReactComponentTreeHook = {
  onSetChildren: function (id, nextChildIDs) {
    var item = getItem(id);
    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.childIDs = nextChildIDs;

    for (var i = 0; i < nextChildIDs.length; i++) {
      var nextChildID = nextChildIDs[i];
      var nextChild = getItem(nextChildID);
      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
      if (nextChild.parentID == null) {
        nextChild.parentID = id;
        // TODO: This shouldn't be necessary but mounting a new root during in
        // componentWillMount currently causes not-yet-mounted components to
        // be purged from our tree data so their parent id is missing.
      }
      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
    }
  },
  onBeforeMountComponent: function (id, element, parentID) {
    var item = {
      element: element,
      parentID: parentID,
      text: null,
      childIDs: [],
      isMounted: false,
      updateCount: 0
    };
    setItem(id, item);
  },
  onBeforeUpdateComponent: function (id, element) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.element = element;
  },
  onMountComponent: function (id) {
    var item = getItem(id);
    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.isMounted = true;
    var isRoot = item.parentID === 0;
    if (isRoot) {
      addRoot(id);
    }
  },
  onUpdateComponent: function (id) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.updateCount++;
  },
  onUnmountComponent: function (id) {
    var item = getItem(id);
    if (item) {
      // We need to check if it exists.
      // `item` might not exist if it is inside an error boundary, and a sibling
      // error boundary child threw while mounting. Then this instance never
      // got a chance to mount, but it still gets an unmounting event during
      // the error boundary cleanup.
      item.isMounted = false;
      var isRoot = item.parentID === 0;
      if (isRoot) {
        removeRoot(id);
      }
    }
    unmountedIDs.push(id);
  },
  purgeUnmountedComponents: function () {
    if (ReactComponentTreeHook._preventPurging) {
      // Should only be used for testing.
      return;
    }

    for (var i = 0; i < unmountedIDs.length; i++) {
      var id = unmountedIDs[i];
      purgeDeep(id);
    }
    unmountedIDs.length = 0;
  },
  isMounted: function (id) {
    var item = getItem(id);
    return item ? item.isMounted : false;
  },
  getCurrentStackAddendum: function (topElement) {
    var info = '';
    if (topElement) {
      var name = getDisplayName(topElement);
      var owner = topElement._owner;
      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
    }

    var currentOwner = ReactCurrentOwner.current;
    var id = currentOwner && currentOwner._debugID;

    info += ReactComponentTreeHook.getStackAddendumByID(id);
    return info;
  },
  getStackAddendumByID: function (id) {
    var info = '';
    while (id) {
      info += describeID(id);
      id = ReactComponentTreeHook.getParentID(id);
    }
    return info;
  },
  getChildIDs: function (id) {
    var item = getItem(id);
    return item ? item.childIDs : [];
  },
  getDisplayName: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element) {
      return null;
    }
    return getDisplayName(element);
  },
  getElement: function (id) {
    var item = getItem(id);
    return item ? item.element : null;
  },
  getOwnerID: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element || !element._owner) {
      return null;
    }
    return element._owner._debugID;
  },
  getParentID: function (id) {
    var item = getItem(id);
    return item ? item.parentID : null;
  },
  getSource: function (id) {
    var item = getItem(id);
    var element = item ? item.element : null;
    var source = element != null ? element._source : null;
    return source;
  },
  getText: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (typeof element === 'string') {
      return element;
    } else if (typeof element === 'number') {
      return '' + element;
    } else {
      return null;
    }
  },
  getUpdateCount: function (id) {
    var item = getItem(id);
    return item ? item.updateCount : 0;
  },


  getRootIDs: getRootIDs,
  getRegisteredIDs: getItemIDs
};

module.exports = ReactComponentTreeHook;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



// Trust the developer to only use ReactInstrumentation with a __DEV__ check

var debugTool = null;

if (process.env.NODE_ENV !== 'production') {
  var ReactDebugTool = __webpack_require__(186);
  debugTool = ReactDebugTool;
}

module.exports = { debugTool: debugTool };
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var CallbackQueue = __webpack_require__(69);
var PooledClass = __webpack_require__(14);
var ReactFeatureFlags = __webpack_require__(74);
var ReactReconciler = __webpack_require__(20);
var Transaction = __webpack_require__(30);

var invariant = __webpack_require__(1);

var dirtyComponents = [];
var updateBatchNumber = 0;
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
}

var NESTED_UPDATES = {
  initialize: function () {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function () {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function () {
    this.callbackQueue.reset();
  },
  close: function () {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* useCreateElement */true);
}

_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function () {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function (method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b, c, d, e) {
  ensureInjected();
  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
}

/**
 * Array comparator for ReactComponents by mount ordering.
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountOrderComparator(c1, c2) {
  return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountOrderComparator);

  // Any updates enqueued while reconciling must be performed after this entire
  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
  // C, B could update twice in a single batch if C's render enqueues an update
  // to B (since B would have already updated, we should skip it, and the only
  // way we can know to do so is by checking the batch counter).
  updateBatchNumber++;

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, it will still
    // be here, but we assume that it has cleared its _pendingCallbacks and
    // that performUpdateIfNecessary is a noop.
    var component = dirtyComponents[i];

    // If performUpdateIfNecessary happens to enqueue any new updates, we
    // shouldn't execute the callbacks until the next render happens, so
    // stash the callbacks first
    var callbacks = component._pendingCallbacks;
    component._pendingCallbacks = null;

    var markerName;
    if (ReactFeatureFlags.logTopLevelRenders) {
      var namedComponent = component;
      // Duck type TopLevelWrapper. This is probably always true.
      if (component._currentElement.type.isReactTopLevelWrapper) {
        namedComponent = component._renderedComponent;
      }
      markerName = 'React update: ' + namedComponent.getName();
      console.time(markerName);
    }

    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);

    if (markerName) {
      console.timeEnd(markerName);
    }

    if (callbacks) {
      for (var j = 0; j < callbacks.length; j++) {
        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
      }
    }
  }
}

var flushBatchedUpdates = function () {
  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
  // array and perform any updates enqueued by mount-ready handlers (i.e.,
  // componentDidUpdate) but we need to check here too in order to catch
  // updates enqueued by setState callbacks and asap calls.
  while (dirtyComponents.length || asapEnqueued) {
    if (dirtyComponents.length) {
      var transaction = ReactUpdatesFlushTransaction.getPooled();
      transaction.perform(runBatchedUpdates, null, transaction);
      ReactUpdatesFlushTransaction.release(transaction);
    }

    if (asapEnqueued) {
      asapEnqueued = false;
      var queue = asapCallbackQueue;
      asapCallbackQueue = CallbackQueue.getPooled();
      queue.notifyAll();
      CallbackQueue.release(queue);
    }
  }
};

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component) {
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component);
    return;
  }

  dirtyComponents.push(component);
  if (component._updateBatchNumber == null) {
    component._updateBatchNumber = updateBatchNumber + 1;
  }
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function (ReconcileTransaction) {
    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function (_batchingStrategy) {
    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var PooledClass = __webpack_require__(14);

var emptyFunction = __webpack_require__(9);
var warning = __webpack_require__(2);

var didWarnForAddedNewProperty = false;
var isProxySupported = typeof Proxy === 'function';

var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */
function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
  if (process.env.NODE_ENV !== 'production') {
    // these have a getter/setter for warnings
    delete this.nativeEvent;
    delete this.preventDefault;
    delete this.stopPropagation;
  }

  this.dispatchConfig = dispatchConfig;
  this._targetInst = targetInst;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    if (process.env.NODE_ENV !== 'production') {
      delete this[propName]; // this has a getter/setter for warnings
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      if (propName === 'target') {
        this.target = nativeEventTarget;
      } else {
        this[propName] = nativeEvent[propName];
      }
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
  return this;
}

_assign(SyntheticEvent.prototype, {

  preventDefault: function () {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
    } else if (typeof event.returnValue !== 'unknown') {
      // eslint-disable-line valid-typeof
      event.returnValue = false;
    }
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function () {
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
    } else if (typeof event.cancelBubble !== 'unknown') {
      // eslint-disable-line valid-typeof
      // The ChangeEventPlugin registers a "propertychange" event for
      // IE. This event does not support bubbling or cancelling, and
      // any references to cancelBubble throw "Member not found".  A
      // typeof check of "unknown" circumvents this issue (and is also
      // IE specific).
      event.cancelBubble = true;
    }

    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function () {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function () {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      if (process.env.NODE_ENV !== 'production') {
        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
      } else {
        this[propName] = null;
      }
    }
    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
      this[shouldBeReleasedProperties[i]] = null;
    }
    if (process.env.NODE_ENV !== 'production') {
      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
    }
  }

});

SyntheticEvent.Interface = EventInterface;

if (process.env.NODE_ENV !== 'production') {
  if (isProxySupported) {
    /*eslint-disable no-func-assign */
    SyntheticEvent = new Proxy(SyntheticEvent, {
      construct: function (target, args) {
        return this.apply(target, Object.create(target.prototype), args);
      },
      apply: function (constructor, that, args) {
        return new Proxy(constructor.apply(that, args), {
          set: function (target, prop, value) {
            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
              process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re adding a new property in the synthetic event object. ' + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
              didWarnForAddedNewProperty = true;
            }
            target[prop] = value;
            return true;
          }
        });
      }
    });
    /*eslint-enable no-func-assign */
  }
}
/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function (Class, Interface) {
  var Super = this;

  var E = function () {};
  E.prototype = Super.prototype;
  var prototype = new E();

  _assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = _assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

module.exports = SyntheticEvent;

/**
  * Helper to nullify syntheticEvent instance properties when destructing
  *
  * @param {object} SyntheticEvent
  * @param {String} propName
  * @return {object} defineProperty object
  */
function getPooledWarningPropertyDefinition(propName, getVal) {
  var isFunction = typeof getVal === 'function';
  return {
    configurable: true,
    set: set,
    get: get
  };

  function set(val) {
    var action = isFunction ? 'setting the method' : 'setting the property';
    warn(action, 'This is effectively a no-op');
    return val;
  }

  function get() {
    var action = isFunction ? 'accessing the method' : 'accessing the property';
    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
    warn(action, result);
    return getVal;
  }

  function warn(action, result) {
    var warningCondition = false;
    process.env.NODE_ENV !== 'production' ? warning(warningCondition, 'This synthetic event is reused for performance reasons. If you\'re seeing this, ' + 'you\'re %s `%s` on a released/nullified synthetic event. %s. ' + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
  }
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_PROPERTY: 0x1,
  HAS_BOOLEAN_VALUE: 0x4,
  HAS_NUMERIC_VALUE: 0x8,
  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
   * attribute namespace URL. (Attribute names not specified use no namespace.)
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function (domPropertyConfig) {
    var Injection = DOMPropertyInjection;
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
    }

    for (var propName in Properties) {
      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;

      var lowerCased = propName.toLowerCase();
      var propConfig = Properties[propName];

      var propertyInfo = {
        attributeName: lowerCased,
        attributeNamespace: null,
        propertyName: propName,
        mutationMethod: null,

        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
      };
      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;

      if (process.env.NODE_ENV !== 'production') {
        DOMProperty.getPossibleStandardName[lowerCased] = propName;
      }

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        propertyInfo.attributeName = attributeName;
        if (process.env.NODE_ENV !== 'production') {
          DOMProperty.getPossibleStandardName[attributeName] = propName;
        }
      }

      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
      }

      if (DOMPropertyNames.hasOwnProperty(propName)) {
        propertyInfo.propertyName = DOMPropertyNames[propName];
      }

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        propertyInfo.mutationMethod = DOMMutationMethods[propName];
      }

      DOMProperty.properties[propName] = propertyInfo;
    }
  }
};

/* eslint-disable max-len */
var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
/* eslint-enable max-len */

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',
  ROOT_ATTRIBUTE_NAME: 'data-reactroot',

  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',

  /**
   * Map from property "standard name" to an object with info about how to set
   * the property in the DOM. Each object contains:
   *
   * attributeName:
   *   Used when rendering markup or with `*Attribute()`.
   * attributeNamespace
   * propertyName:
   *   Used on DOM node instances. (This includes properties that mutate due to
   *   external factors.)
   * mutationMethod:
   *   If non-null, used instead of the property or `setAttribute()` after
   *   initial render.
   * mustUseProperty:
   *   Whether the property must be accessed and mutated as an object property.
   * hasBooleanValue:
   *   Whether the property should be removed when set to a falsey value.
   * hasNumericValue:
   *   Whether the property must be numeric or parse as a numeric and should be
   *   removed when set to a falsey value.
   * hasPositiveNumericValue:
   *   Whether the property must be positive numeric or parse as a positive
   *   numeric and should be removed when set to a falsey value.
   * hasOverloadedBooleanValue:
   *   Whether the property can be used as a flag as well as with a value.
   *   Removed when strictly equal to false; present without a value when
   *   strictly equal to true; present with a value otherwise.
   */
  properties: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties. Available only in __DEV__.
   *
   * autofocus is predefined, because adding it to the property whitelist
   * causes unintended side effects.
   *
   * @type {Object}
   */
  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? { autofocus: 'autoFocus' } : null,

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function (attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function (copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function (a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function (a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function (a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function (instance) {
  var Klass = this;
  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances.
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function (CopyConstructor, pooler) {
  // Casting as any so that flow ignores the actual implementation and trusts
  // it to match the type we declared
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler
};

module.exports = PooledClass;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var ReactCurrentOwner = __webpack_require__(11);

var warning = __webpack_require__(2);
var canDefineProperty = __webpack_require__(56);
var hasOwnProperty = Object.prototype.hasOwnProperty;

var REACT_ELEMENT_TYPE = __webpack_require__(93);

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};

var specialPropKeyWarningShown, specialPropRefWarningShown;

function hasValidRef(config) {
  if (process.env.NODE_ENV !== 'production') {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.ref !== undefined;
}

function hasValidKey(config) {
  if (process.env.NODE_ENV !== 'production') {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function () {
    if (!specialPropKeyWarningShown) {
      specialPropKeyWarningShown = true;
      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function () {
    if (!specialPropRefWarningShown) {
      specialPropRefWarningShown = true;
      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, no instanceof check
 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} key
 * @param {string|object} ref
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @param {*} owner
 * @param {*} props
 * @internal
 */
var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allow us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,

    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,

    // Record the component responsible for creating this element.
    _owner: owner
  };

  if (process.env.NODE_ENV !== 'production') {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    if (canDefineProperty) {
      Object.defineProperty(element._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      });
      // self and source are DEV only properties.
      Object.defineProperty(element, '_self', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: self
      });
      // Two elements created in two different places should be considered
      // equal for testing purposes and therefore we hide it from enumeration.
      Object.defineProperty(element, '_source', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: source
      });
    } else {
      element._store.validated = false;
      element._self = self;
      element._source = source;
    }
    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};

/**
 * Create and return a new ReactElement of the given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
 */
ReactElement.createElement = function (type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    if (process.env.NODE_ENV !== 'production') {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }
  if (process.env.NODE_ENV !== 'production') {
    if (key || ref) {
      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
        if (key) {
          defineKeyPropWarningGetter(props, displayName);
        }
        if (ref) {
          defineRefPropWarningGetter(props, displayName);
        }
      }
    }
  }
  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
};

/**
 * Return a function that produces ReactElements of a given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
 */
ReactElement.createFactory = function (type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  // Legacy hook TODO: Warn if this is accessed
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

  return newElement;
};

/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
 */
ReactElement.cloneElement = function (element, config, children) {
  var propName;

  // Original props are copied
  var props = _assign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;
  // Self is preserved since the owner is preserved.
  var self = element._self;
  // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.
  var source = element._source;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    // Remaining properties override existing props
    var defaultProps;
    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
};

/**
 * Verifies the object is a ReactElement.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function (object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
};

module.exports = ReactElement;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */


/**
 * WARNING: DO NOT manually require this module.
 * This is a replacement for `invariant(...)` used by the error code system
 * and will _only_ be required by the corresponding babel pass.
 * It always throws.
 */

function reactProdInvariant(code) {
  var argCount = arguments.length - 1;

  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

  for (var argIdx = 0; argIdx < argCount; argIdx++) {
    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
  }

  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

  var error = new Error(message);
  error.name = 'Invariant Violation';
  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

  throw error;
}

module.exports = reactProdInvariant;

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(21);


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isPrefixedValue;

var regex = /-webkit-|-moz-|-ms-/;

function isPrefixedValue(value) {
  return typeof value === 'string' && regex.test(value);
}
module.exports = exports['default'];

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMNamespaces = __webpack_require__(38);
var setInnerHTML = __webpack_require__(32);

var createMicrosoftUnsafeLocalFunction = __webpack_require__(45);
var setTextContent = __webpack_require__(87);

var ELEMENT_NODE_TYPE = 1;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

/**
 * In IE (8-11) and Edge, appending nodes with no children is dramatically
 * faster than appending a full subtree, so we essentially queue up the
 * .appendChild calls here and apply them so each node is added to its parent
 * before any children are added.
 *
 * In other browsers, doing so is slower or neutral compared to the other order
 * (in Firefox, twice as slow) so we only do this inversion in IE.
 *
 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
 */
var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);

function insertTreeChildren(tree) {
  if (!enableLazy) {
    return;
  }
  var node = tree.node;
  var children = tree.children;
  if (children.length) {
    for (var i = 0; i < children.length; i++) {
      insertTreeBefore(node, children[i], null);
    }
  } else if (tree.html != null) {
    setInnerHTML(node, tree.html);
  } else if (tree.text != null) {
    setTextContent(node, tree.text);
  }
}

var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
  // DocumentFragments aren't actually part of the DOM after insertion so
  // appending children won't update the DOM. We need to ensure the fragment
  // is properly populated first, breaking out of our lazy approach for just
  // this level. Also, some <object> plugins (like Flash Player) will read
  // <param> nodes immediately upon insertion into the DOM, so <object>
  // must also be populated prior to insertion into the DOM.
  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
    insertTreeChildren(tree);
    parentNode.insertBefore(tree.node, referenceNode);
  } else {
    parentNode.insertBefore(tree.node, referenceNode);
    insertTreeChildren(tree);
  }
});

function replaceChildWithTree(oldNode, newTree) {
  oldNode.parentNode.replaceChild(newTree.node, oldNode);
  insertTreeChildren(newTree);
}

function queueChild(parentTree, childTree) {
  if (enableLazy) {
    parentTree.children.push(childTree);
  } else {
    parentTree.node.appendChild(childTree.node);
  }
}

function queueHTML(tree, html) {
  if (enableLazy) {
    tree.html = html;
  } else {
    setInnerHTML(tree.node, html);
  }
}

function queueText(tree, text) {
  if (enableLazy) {
    tree.text = text;
  } else {
    setTextContent(tree.node, text);
  }
}

function toString() {
  return this.node.nodeName;
}

function DOMLazyTree(node) {
  return {
    node: node,
    children: [],
    html: null,
    text: null,
    toString: toString
  };
}

DOMLazyTree.insertTreeBefore = insertTreeBefore;
DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
DOMLazyTree.queueChild = queueChild;
DOMLazyTree.queueHTML = queueHTML;
DOMLazyTree.queueText = queueText;

module.exports = DOMLazyTree;

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactRef = __webpack_require__(200);
var ReactInstrumentation = __webpack_require__(8);

var warning = __webpack_require__(2);

/**
 * Helper to call ReactRef.attachRefs with this composite component, split out
 * to avoid allocations in the transaction mount-ready queue.
 */
function attachRefs() {
  ReactRef.attachRefs(this, this._currentElement);
}

var ReactReconciler = {

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?object} the containing host component instance
   * @param {?object} info about the host container
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID // 0 in production and for roots
  ) {
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
      }
    }
    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
      }
    }
    return markup;
  },

  /**
   * Returns a value that can be passed to
   * ReactComponentEnvironment.replaceNodeWithMarkup.
   */
  getHostNode: function (internalInstance) {
    return internalInstance.getHostNode();
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (internalInstance, safely) {
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
      }
    }
    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
    internalInstance.unmountComponent(safely);
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
      }
    }
  },

  /**
   * Update a component using a new element.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @internal
   */
  receiveComponent: function (internalInstance, nextElement, transaction, context) {
    var prevElement = internalInstance._currentElement;

    if (nextElement === prevElement && context === internalInstance._context) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for an element created outside a composite to be
      // deeply mutated and reused.

      // TODO: Bailing out early is just a perf optimization right?
      // TODO: Removing the return statement should affect correctness?
      return;
    }

    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
      }
    }

    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

    if (refsChanged) {
      ReactRef.detachRefs(internalInstance, prevElement);
    }

    internalInstance.receiveComponent(nextElement, transaction, context);

    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }

    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
      }
    }
  },

  /**
   * Flush any dirty changes in a component.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {
    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
      // The component's enqueued batch number should always be the current
      // batch or the following one.
      process.env.NODE_ENV !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
      return;
    }
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
      }
    }
    internalInstance.performUpdateIfNecessary(transaction);
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
      }
    }
  }

};

module.exports = ReactReconciler;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var ReactChildren = __webpack_require__(240);
var ReactComponent = __webpack_require__(53);
var ReactPureComponent = __webpack_require__(244);
var ReactClass = __webpack_require__(241);
var ReactDOMFactories = __webpack_require__(242);
var ReactElement = __webpack_require__(15);
var ReactPropTypes = __webpack_require__(243);
var ReactVersion = __webpack_require__(245);

var onlyChild = __webpack_require__(247);
var warning = __webpack_require__(2);

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;
var cloneElement = ReactElement.cloneElement;

if (process.env.NODE_ENV !== 'production') {
  var ReactElementValidator = __webpack_require__(94);
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var __spread = _assign;

if (process.env.NODE_ENV !== 'production') {
  var warned = false;
  __spread = function () {
    process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
    warned = true;
    return _assign.apply(null, arguments);
  };
}

var React = {

  // Modern

  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    toArray: ReactChildren.toArray,
    only: onlyChild
  },

  Component: ReactComponent,
  PureComponent: ReactPureComponent,

  createElement: createElement,
  cloneElement: cloneElement,
  isValidElement: ReactElement.isValidElement,

  // Classic

  PropTypes: ReactPropTypes,
  createClass: ReactClass.createClass,
  createFactory: createFactory,
  createMixin: function (mixin) {
    // Currently a noop. Will be used to validate and trace mixins.
    return mixin;
  },

  // This looks DOM specific but these are actually isomorphic helpers
  // since they are just generating DOM strings.
  DOM: ReactDOMFactories,

  version: ReactVersion,

  // Deprecated hook for JSX spread, don't use this for anything.
  __spread: __spread
};

module.exports = React;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var emptyObject = {};

if (process.env.NODE_ENV !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var EventPluginRegistry = __webpack_require__(27);
var EventPluginUtils = __webpack_require__(39);
var ReactErrorUtils = __webpack_require__(43);

var accumulateInto = __webpack_require__(81);
var forEachAccumulated = __webpack_require__(82);
var invariant = __webpack_require__(1);

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @private
 */
var executeDispatchesAndRelease = function (event, simulated) {
  if (event) {
    EventPluginUtils.executeDispatchesInOrder(event, simulated);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};
var executeDispatchesAndReleaseSimulated = function (e) {
  return executeDispatchesAndRelease(e, true);
};
var executeDispatchesAndReleaseTopLevel = function (e) {
  return executeDispatchesAndRelease(e, false);
};

var getDictionaryKey = function (inst) {
  // Prevents V8 performance issue:
  // https://github.com/facebook/react/pull/7232
  return '.' + inst._rootNodeID;
};

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

function shouldPreventMouseEvent(name, type, props) {
  switch (name) {
    case 'onClick':
    case 'onClickCapture':
    case 'onDoubleClick':
    case 'onDoubleClickCapture':
    case 'onMouseDown':
    case 'onMouseDownCapture':
    case 'onMouseMove':
    case 'onMouseMoveCapture':
    case 'onMouseUp':
    case 'onMouseUpCapture':
      return !!(props.disabled && isInteractive(type));
    default:
      return false;
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  /**
   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
   *
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {function} listener The callback to store.
   */
  putListener: function (inst, registrationName, listener) {
    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;

    var key = getDictionaryKey(inst);
    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[key] = listener;

    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.didPutListener) {
      PluginModule.didPutListener(inst, registrationName, listener);
    }
  },

  /**
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function (inst, registrationName) {
    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
    // live here; needs to be moved to a better place soon
    var bankForRegistrationName = listenerBank[registrationName];
    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {
      return null;
    }
    var key = getDictionaryKey(inst);
    return bankForRegistrationName && bankForRegistrationName[key];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function (inst, registrationName) {
    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.willDeleteListener) {
      PluginModule.willDeleteListener(inst, registrationName);
    }

    var bankForRegistrationName = listenerBank[registrationName];
    // TODO: This should never be null -- when is it?
    if (bankForRegistrationName) {
      var key = getDictionaryKey(inst);
      delete bankForRegistrationName[key];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {object} inst The instance, which is the source of events.
   */
  deleteAllListeners: function (inst) {
    var key = getDictionaryKey(inst);
    for (var registrationName in listenerBank) {
      if (!listenerBank.hasOwnProperty(registrationName)) {
        continue;
      }

      if (!listenerBank[registrationName][key]) {
        continue;
      }

      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
      if (PluginModule && PluginModule.willDeleteListener) {
        PluginModule.willDeleteListener(inst, registrationName);
      }

      delete listenerBank[registrationName][key];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0; i < plugins.length; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function (events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function (simulated) {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    if (simulated) {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
    } else {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
    }
    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
    // This would be a good time to rethrow if any of the event handlers threw.
    ReactErrorUtils.rethrowCaughtError();
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function () {
    listenerBank = {};
  },

  __getListenerBank: function () {
    return listenerBank;
  }

};

module.exports = EventPluginHub;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPluginHub = __webpack_require__(23);
var EventPluginUtils = __webpack_require__(39);

var accumulateInto = __webpack_require__(81);
var forEachAccumulated = __webpack_require__(82);
var warning = __webpack_require__(2);

var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(inst, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(inst, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(inst, phase, event) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;
  }
  var listener = listenerAtPhase(inst, event, phase);
  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
 */
function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    var targetInst = event._targetInst;
    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(inst, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(inst, registrationName);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event._targetInst, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, from, to) {
  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 */

// TODO: Replace this with ES6: var ReactInstanceMap = new Map();

var ReactInstanceMap = {

  /**
   * This API should be called `delete` but we'd have to make sure to always
   * transform these to strings for IE support. When this transform is fully
   * supported we can rename it.
   */
  remove: function (key) {
    key._reactInternalInstance = undefined;
  },

  get: function (key) {
    return key._reactInternalInstance;
  },

  has: function (key) {
    return key._reactInternalInstance !== undefined;
  },

  set: function (key, value) {
    key._reactInternalInstance = value;
  }

};

module.exports = ReactInstanceMap;

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(12);

var getEventTarget = __webpack_require__(48);

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function (event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function (event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

/**
 * Injectable ordering of event plugins.
 */
var eventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!eventPluginOrder) {
    // Wait until an `eventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var pluginModule = namesToPlugins[pluginName];
    var pluginIndex = eventPluginOrder.indexOf(pluginName);
    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    !pluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
    var publishedEvents = pluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, pluginModule, eventName) {
  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

  if (process.env.NODE_ENV !== 'production') {
    var lowerCasedName = registrationName.toLowerCase();
    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;

    if (registrationName === 'onDoubleClick') {
      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
    }
  }
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Mapping from lowercase registration names to the properly cased version,
   * used to warn in the case of missing event handlers. Available
   * only in __DEV__.
   * @type {Object}
   */
  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,
  // Trust the developer to only use possibleRegistrationNames in __DEV__

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function (injectedEventPluginOrder) {
    !!eventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
    // Clone the ordering so it cannot be dynamically mutated.
    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function (injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var pluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
        namesToPlugins[pluginName] = pluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function (event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
    }
    if (dispatchConfig.phasedRegistrationNames !== undefined) {
      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
      // that it is not undefined.
      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

      for (var phase in phasedRegistrationNames) {
        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
          continue;
        }
        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
        if (pluginModule) {
          return pluginModule;
        }
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function () {
    eventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
      for (var lowerCasedName in possibleRegistrationNames) {
        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
          delete possibleRegistrationNames[lowerCasedName];
        }
      }
    }
  }

};

module.exports = EventPluginRegistry;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var EventPluginRegistry = __webpack_require__(27);
var ReactEventEmitterMixin = __webpack_require__(190);
var ViewportMetrics = __webpack_require__(80);

var getVendorPrefixedEventName = __webpack_require__(226);
var isEventSupported = __webpack_require__(49);

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var hasEventPageXY;
var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topAbort: 'abort',
  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
  topBlur: 'blur',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topScroll: 'scroll',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topSelectionChange: 'selectionchange',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTextInput: 'textInput',
  topTimeUpdate: 'timeupdate',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function (ReactEventListener) {
      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function (enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function () {
    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function (registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

    for (var i = 0; i < dependencies.length; i++) {
      var dependency = dependencies[i];
      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
        if (dependency === 'topWheel') {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
          }
        } else if (dependency === 'topScroll') {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
          }
        } else if (dependency === 'topFocus' || dependency === 'topBlur') {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);
          }

          // to make sure blur and focus event listeners are only attached once
          isListening.topBlur = true;
          isListening.topFocus = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
  },

  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
  },

  /**
   * Protect against document.createEvent() returning null
   * Some popup blocker extensions appear to do this:
   * https://github.com/facebook/react/issues/6887
   */
  supportsEventPageXY: function () {
    if (!document.createEvent) {
      return false;
    }
    var ev = document.createEvent('MouseEvent');
    return ev != null && 'pageX' in ev;
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
   * pageX/pageY isn't supported (legacy browsers).
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function () {
    if (hasEventPageXY === undefined) {
      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
    }
    if (!hasEventPageXY && !isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  }

});

module.exports = ReactBrowserEventEmitter;

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(26);
var ViewportMetrics = __webpack_require__(80);

var getEventModifierState = __webpack_require__(47);

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function (event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function (event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  },
  // "Proprietary" Interface.
  pageX: function (event) {
    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function (event) {
    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

var OBSERVED_ERROR = {};

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM updates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var TransactionImpl = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function () {
    this.transactionWrappers = this.getTransactionWrappers();
    if (this.wrapperInitData) {
      this.wrapperInitData.length = 0;
    } else {
      this.wrapperInitData = [];
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function () {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked. The optional arguments helps prevent the need
   * to bind in many cases.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} a Argument to pass to the method.
   * @param {Object?=} b Argument to pass to the method.
   * @param {Object?=} c Argument to pass to the method.
   * @param {Object?=} d Argument to pass to the method.
   * @param {Object?=} e Argument to pass to the method.
   * @param {Object?=} f Argument to pass to the method.
   *
   * @return {*} Return value from `method`.
   */
  perform: function (method, scope, a, b, c, d, e, f) {
    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {}
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function (startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
      } finally {
        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {}
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function (startIndex) {
    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== OBSERVED_ERROR && wrapper.close) {
          wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {}
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

module.exports = TransactionImpl;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * Based on the escape-html library, which is used under the MIT License below:
 *
 * Copyright (c) 2012-2013 TJ Holowaychuk
 * Copyright (c) 2015 Andreas Lubbe
 * Copyright (c) 2015 Tiancheng "Timothy" Gu
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * 'Software'), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */



// code copied and modified from escape-html
/**
 * Module variables.
 * @private
 */

var matchHtmlRegExp = /["'&<>]/;

/**
 * Escape special characters in the given string of html.
 *
 * @param  {string} string The string to escape for inserting into HTML
 * @return {string}
 * @public
 */

function escapeHtml(string) {
  var str = '' + string;
  var match = matchHtmlRegExp.exec(str);

  if (!match) {
    return str;
  }

  var escape;
  var html = '';
  var index = 0;
  var lastIndex = 0;

  for (index = match.index; index < str.length; index++) {
    switch (str.charCodeAt(index)) {
      case 34:
        // "
        escape = '&quot;';
        break;
      case 38:
        // &
        escape = '&amp;';
        break;
      case 39:
        // '
        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
        break;
      case 60:
        // <
        escape = '&lt;';
        break;
      case 62:
        // >
        escape = '&gt;';
        break;
      default:
        continue;
    }

    if (lastIndex !== index) {
      html += str.substring(lastIndex, index);
    }

    lastIndex = index + 1;
    html += escape;
  }

  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
}
// end code copied and modified from escape-html


/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextContentForBrowser(text) {
  if (typeof text === 'boolean' || typeof text === 'number') {
    // this shortcircuit helps perf for types that we know will never have
    // special characters, especially given that this function is used often
    // for numeric dom ids.
    return '' + text;
  }
  return escapeHtml(text);
}

module.exports = escapeTextContentForBrowser;

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);
var DOMNamespaces = __webpack_require__(38);

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

var createMicrosoftUnsafeLocalFunction = __webpack_require__(45);

// SVG temp container for IE lacking innerHTML
var reusableSVGContainer;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
  // IE does not have innerHTML for SVG nodes, so instead we inject the
  // new markup in a temp node and then move the child nodes across into
  // the target node
  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
    var svgNode = reusableSVGContainer.firstChild;
    while (svgNode.firstChild) {
      node.appendChild(svgNode.firstChild);
    }
  } else {
    node.innerHTML = html;
  }
});

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function (node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
        // in hopes that this is preserved even if "\uFEFF" is transformed to
        // the actual Unicode character (by Babel, for example).
        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
        node.innerHTML = String.fromCharCode(0xFEFF) + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
  testElement = null;
}

module.exports = setInnerHTML;

/***/ }),
/* 33 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, '__esModule', {
    value: true
});

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _stringHash = __webpack_require__(257);

var _stringHash2 = _interopRequireDefault(_stringHash);

var _orderedElements = __webpack_require__(61);

var _orderedElements2 = _interopRequireDefault(_orderedElements);

/* ::
type Pair = [ string, any ];
type Pairs = Pair[];
type PairsMapper = (pair: Pair) => Pair;
type ObjectMap = { [id:string]: any };
*/

// {K1: V1, K2: V2, ...} -> [[K1, V1], [K2, V2]]
var objectToPairs = function objectToPairs(obj /* : ObjectMap */) {
    return (/* : Pairs */Object.keys(obj).map(function (key) {
            return [key, obj[key]];
        })
    );
};

exports.objectToPairs = objectToPairs;
var mapObj = function mapObj(obj, /* : ObjectMap */
fn /* : PairsMapper */
) /* : ObjectMap */{
    var keys = Object.keys(obj);
    var mappedObj = {};
    for (var i = 0; i < keys.length; i += 1) {
        var _fn = fn([keys[i], obj[keys[i]]]);

        var _fn2 = _slicedToArray(_fn, 2);

        var newKey = _fn2[0];
        var newValue = _fn2[1];

        mappedObj[newKey] = newValue;
    }
    return mappedObj;
};

exports.mapObj = mapObj;
// Flattens an array one level
// [[A], [B, C, [D]]] -> [A, B, C, [D]]
var flatten = function flatten(list /* : any[] */) {
    return (/* : any[] */list.reduce(function (memo, x) {
            return memo.concat(x);
        }, [])
    );
};

exports.flatten = flatten;
var flattenDeep = function flattenDeep(list /* : any[] */) {
    return (/* : any[] */list.reduce(function (memo, x) {
            return memo.concat(Array.isArray(x) ? flattenDeep(x) : x);
        }, [])
    );
};

exports.flattenDeep = flattenDeep;
var UPPERCASE_RE = /([A-Z])/g;
var UPPERCASE_RE_TO_KEBAB = function UPPERCASE_RE_TO_KEBAB(match /* : string */) {
    return (/* : string */'-' + match.toLowerCase()
    );
};

var kebabifyStyleName = function kebabifyStyleName(string /* : string */) /* : string */{
    var result = string.replace(UPPERCASE_RE, UPPERCASE_RE_TO_KEBAB);
    if (result[0] === 'm' && result[1] === 's' && result[2] === '-') {
        return '-' + result;
    }
    return result;
};

exports.kebabifyStyleName = kebabifyStyleName;
var isPlainObject = function isPlainObject(x /* : ObjectMap | any */
) {
    return (/* : boolean */typeof x === 'object' && !Array.isArray(x) && x !== null
    );
};

var recursiveMerge = function recursiveMerge(a, /* : OrderedElements | ObjectMap | Map<string,any> | any */
b /* : ObjectMap | Map<string,any> */
) /* : OrderedElements | any */{
    // TODO(jlfwong): Handle malformed input where a and b are not the same
    // type.

    if (!isPlainObject(a) || !isPlainObject(b)) {
        if (isPlainObject(b)) {
            return _orderedElements2['default'].from(b);
        } else {
            return b;
        }
    }

    var ret = _orderedElements2['default'].from(a);
    var right = _orderedElements2['default'].from(b);

    right.forEach(function (key, val) {
        if (ret.has(key)) {
            ret.set(key, recursiveMerge(ret.get(key), val));
        } else {
            ret.set(key, val);
        }
    });

    return ret;
};

exports.recursiveMerge = recursiveMerge;
/**
 * CSS properties which accept numbers but are not in units of "px".
 * Taken from React's CSSProperty.js
 */
var isUnitlessNumber = {
    animationIterationCount: true,
    borderImageOutset: true,
    borderImageSlice: true,
    borderImageWidth: true,
    boxFlex: true,
    boxFlexGroup: true,
    boxOrdinalGroup: true,
    columnCount: true,
    flex: true,
    flexGrow: true,
    flexPositive: true,
    flexShrink: true,
    flexNegative: true,
    flexOrder: true,
    gridRow: true,
    gridColumn: true,
    fontWeight: true,
    lineClamp: true,
    lineHeight: true,
    opacity: true,
    order: true,
    orphans: true,
    tabSize: true,
    widows: true,
    zIndex: true,
    zoom: true,

    // SVG-related properties
    fillOpacity: true,
    floodOpacity: true,
    stopOpacity: true,
    strokeDasharray: true,
    strokeDashoffset: true,
    strokeMiterlimit: true,
    strokeOpacity: true,
    strokeWidth: true
};

/**
 * Taken from React's CSSProperty.js
 *
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
    return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 * Taken from React's CSSProperty.js
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
// Taken from React's CSSProperty.js
Object.keys(isUnitlessNumber).forEach(function (prop) {
    prefixes.forEach(function (prefix) {
        isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
    });
});

var stringifyValue = function stringifyValue(key, /* : string */
prop /* : any */
) /* : string */{
    if (typeof prop === "number") {
        if (isUnitlessNumber[key]) {
            return "" + prop;
        } else {
            return prop + "px";
        }
    } else {
        return '' + prop;
    }
};

exports.stringifyValue = stringifyValue;
// Hash a javascript object using JSON.stringify. This is very fast, about 3
// microseconds on my computer for a sample object:
// http://jsperf.com/test-hashfnv32a-hash/5
//
// Note that this uses JSON.stringify to stringify the objects so in order for
// this to produce consistent hashes browsers need to have a consistent
// ordering of objects. Ben Alpert says that Facebook depends on this, so we
// can probably depend on this too.
var hashObject = function hashObject(object /* : ObjectMap */) {
    return (/* : string */(0, _stringHash2['default'])(JSON.stringify(object)).toString(36)
    );
};

exports.hashObject = hashObject;
// Given a single style value string like the "b" from "a: b;", adds !important
// to generate "b !important".
var importantify = function importantify(string /* : string */) {
    return (/* : string */
        // Bracket string character access is very fast, and in the default case we
        // normally don't expect there to be "!important" at the end of the string
        // so we can use this simple check to take an optimized path. If there
        // happens to be a "!" in this position, we follow up with a more thorough
        // check.
        string[string.length - 10] === '!' && string.slice(-11) === ' !important' ? string : string + ' !important'
    );
};
exports.importantify = importantify;

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 * 
 */

/*eslint-disable no-self-compare */



var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  // SameValue algorithm
  if (x === y) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    // Added the nonzero y check to make Flow happy, but it is redundant
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    // Step 6.a: NaN == NaN
    return x !== x && y !== y;
  }
}

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (is(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;

/***/ }),
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__baseGetTag_js__ = __webpack_require__(150);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__getPrototype_js__ = __webpack_require__(152);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__isObjectLike_js__ = __webpack_require__(157);




/** `Object#toString` result references. */
var objectTag = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__isObjectLike_js__["a" /* default */])(value) || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__baseGetTag_js__["a" /* default */])(value) != objectTag) {
    return false;
  }
  var proto = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__getPrototype_js__["a" /* default */])(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    funcToString.call(Ctor) == objectCtorString;
}

/* harmony default export */ __webpack_exports__["a"] = isPlainObject;


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMLazyTree = __webpack_require__(19);
var Danger = __webpack_require__(163);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactInstrumentation = __webpack_require__(8);

var createMicrosoftUnsafeLocalFunction = __webpack_require__(45);
var setInnerHTML = __webpack_require__(32);
var setTextContent = __webpack_require__(87);

function getNodeAfter(parentNode, node) {
  // Special case for text components, which return [open, close] comments
  // from getHostNode.
  if (Array.isArray(node)) {
    node = node[1];
  }
  return node ? node.nextSibling : parentNode.firstChild;
}

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
  // We rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
  // we are careful to use `null`.)
  parentNode.insertBefore(childNode, referenceNode);
});

function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
}

function moveChild(parentNode, childNode, referenceNode) {
  if (Array.isArray(childNode)) {
    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
  } else {
    insertChildAt(parentNode, childNode, referenceNode);
  }
}

function removeChild(parentNode, childNode) {
  if (Array.isArray(childNode)) {
    var closingComment = childNode[1];
    childNode = childNode[0];
    removeDelimitedText(parentNode, childNode, closingComment);
    parentNode.removeChild(closingComment);
  }
  parentNode.removeChild(childNode);
}

function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
  var node = openingComment;
  while (true) {
    var nextNode = node.nextSibling;
    insertChildAt(parentNode, node, referenceNode);
    if (node === closingComment) {
      break;
    }
    node = nextNode;
  }
}

function removeDelimitedText(parentNode, startNode, closingComment) {
  while (true) {
    var node = startNode.nextSibling;
    if (node === closingComment) {
      // The closing comment is removed by ReactMultiChild.
      break;
    } else {
      parentNode.removeChild(node);
    }
  }
}

function replaceDelimitedText(openingComment, closingComment, stringText) {
  var parentNode = openingComment.parentNode;
  var nodeAfterComment = openingComment.nextSibling;
  if (nodeAfterComment === closingComment) {
    // There are no text nodes between the opening and closing comments; insert
    // a new one if stringText isn't empty.
    if (stringText) {
      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
    }
  } else {
    if (stringText) {
      // Set the text content of the first node after the opening comment, and
      // remove all following nodes up until the closing comment.
      setTextContent(nodeAfterComment, stringText);
      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
    } else {
      removeDelimitedText(parentNode, openingComment, closingComment);
    }
  }

  if (process.env.NODE_ENV !== 'production') {
    ReactInstrumentation.debugTool.onHostOperation({
      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,
      type: 'replace text',
      payload: stringText
    });
  }
}

var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
if (process.env.NODE_ENV !== 'production') {
  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {
    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
    if (prevInstance._debugID !== 0) {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: prevInstance._debugID,
        type: 'replace with',
        payload: markup.toString()
      });
    } else {
      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
      if (nextInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onHostOperation({
          instanceID: nextInstance._debugID,
          type: 'mount',
          payload: markup.toString()
        });
      }
    }
  };
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,

  replaceDelimitedText: replaceDelimitedText,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @internal
   */
  processUpdates: function (parentNode, updates) {
    if (process.env.NODE_ENV !== 'production') {
      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
    }

    for (var k = 0; k < updates.length; k++) {
      var update = updates[k];
      switch (update.type) {
        case 'INSERT_MARKUP':
          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'insert child',
              payload: { toIndex: update.toIndex, content: update.content.toString() }
            });
          }
          break;
        case 'MOVE_EXISTING':
          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'move child',
              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }
            });
          }
          break;
        case 'SET_MARKUP':
          setInnerHTML(parentNode, update.content);
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'replace children',
              payload: update.content.toString()
            });
          }
          break;
        case 'TEXT_CONTENT':
          setTextContent(parentNode, update.content);
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'replace text',
              payload: update.content.toString()
            });
          }
          break;
        case 'REMOVE_NODE':
          removeChild(parentNode, update.fromNode);
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'remove child',
              payload: { fromIndex: update.fromIndex }
            });
          }
          break;
      }
    }
  }

};

module.exports = DOMChildrenOperations;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMNamespaces = {
  html: 'http://www.w3.org/1999/xhtml',
  mathml: 'http://www.w3.org/1998/Math/MathML',
  svg: 'http://www.w3.org/2000/svg'
};

module.exports = DOMNamespaces;

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactErrorUtils = __webpack_require__(43);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

/**
 * Injected dependencies:
 */

/**
 * - `ComponentTree`: [required] Module that can convert between React instances
 *   and actual node references.
 */
var ComponentTree;
var TreeTraversal;
var injection = {
  injectComponentTree: function (Injected) {
    ComponentTree = Injected;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
    }
  },
  injectTreeTraversal: function (Injected) {
    TreeTraversal = Injected;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
    }
  }
};

function isEndish(topLevelType) {
  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
}

function isMoveish(topLevelType) {
  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
}
function isStartish(topLevelType) {
  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
}

var validateEventDispatches;
if (process.env.NODE_ENV !== 'production') {
  validateEventDispatches = function (event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

    var instancesIsArr = Array.isArray(dispatchInstances);
    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
  };
}

/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */
function executeDispatch(event, simulated, listener, inst) {
  var type = event.type || 'unknown-event';
  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
  if (simulated) {
    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
  } else {
    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
  }
  event.currentTarget = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, simulated) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
  }
  event._dispatchListeners = null;
  event._dispatchInstances = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return {?string} id of the first dispatch execution who's listener returns
 * true, or null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchInstances[i])) {
        return dispatchInstances[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchInstances)) {
      return dispatchInstances;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchInstances = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchInstance = event._dispatchInstances;
  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
  var res = dispatchListener ? dispatchListener(event) : null;
  event.currentTarget = null;
  event._dispatchListeners = null;
  event._dispatchInstances = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,

  getInstanceFromNode: function (node) {
    return ComponentTree.getInstanceFromNode(node);
  },
  getNodeFromInstance: function (node) {
    return ComponentTree.getNodeFromInstance(node);
  },
  isAncestor: function (a, b) {
    return TreeTraversal.isAncestor(a, b);
  },
  getLowestCommonAncestor: function (a, b) {
    return TreeTraversal.getLowestCommonAncestor(a, b);
  },
  getParentInstance: function (inst) {
    return TreeTraversal.getParentInstance(inst);
  },
  traverseTwoPhase: function (target, fn, arg) {
    return TreeTraversal.traverseTwoPhase(target, fn, arg);
  },
  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
  },

  injection: injection
};

module.exports = EventPluginUtils;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

/**
 * Unescape and unwrap key for human-readable display
 *
 * @param {string} key to unescape.
 * @return {string} the unescaped key.
 */
function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = {
    '=0': '=',
    '=2': ':'
  };
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(unescapeRegex, function (match) {
    return unescaperLookup[match];
  });
}

var KeyEscapeUtils = {
  escape: escape,
  unescape: unescape
};

module.exports = KeyEscapeUtils;

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var React = __webpack_require__(21);
var ReactPropTypesSecret = __webpack_require__(79);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(inputProps) {
  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
}
function _assertValueLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
}

function _assertCheckedLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
}

var propTypes = {
  value: function (props, propName, componentName) {
    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  checked: function (props, propName, componentName) {
    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  onChange: React.PropTypes.func
};

var loggedTypeFailures = {};
function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  checkPropTypes: function (tagName, props, owner) {
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error = propTypes[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum(owner);
        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
      }
    }
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function (inputProps) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.value;
    }
    return inputProps.value;
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function (inputProps) {
    if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.value;
    }
    return inputProps.checked;
  },

  /**
   * @param {object} inputProps Props for form component
   * @param {SyntheticEvent} event change event to handle
   */
  executeOnChange: function (inputProps, event) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.requestChange(event.target.value);
    } else if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.requestChange(event.target.checked);
    } else if (inputProps.onChange) {
      return inputProps.onChange.call(undefined, event);
    }
  }
};

module.exports = LinkedValueUtils;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

var injected = false;

var ReactComponentEnvironment = {

  /**
   * Optionally injectable hook for swapping out mount images in the middle of
   * the tree.
   */
  replaceNodeWithMarkup: null,

  /**
   * Optionally injectable hook for processing a queue of child updates. Will
   * later move into MultiChildComponents.
   */
  processChildrenUpdates: null,

  injection: {
    injectEnvironment: function (environment) {
      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
      injected = true;
    }
  }

};

module.exports = ReactComponentEnvironment;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var caughtError = null;

/**
 * Call a function while guarding against errors that happens within it.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} a First argument
 * @param {*} b Second argument
 */
function invokeGuardedCallback(name, func, a) {
  try {
    func(a);
  } catch (x) {
    if (caughtError === null) {
      caughtError = x;
    }
  }
}

var ReactErrorUtils = {
  invokeGuardedCallback: invokeGuardedCallback,

  /**
   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
   * handler are sure to be rethrown by rethrowCaughtError.
   */
  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

  /**
   * During execution of guarded functions we will capture the first error which
   * we will rethrow to be handled by the top level error handler.
   */
  rethrowCaughtError: function () {
    if (caughtError) {
      var error = caughtError;
      caughtError = null;
      throw error;
    }
  }
};

if (process.env.NODE_ENV !== 'production') {
  /**
   * To help development we can get better devtools integration by simulating a
   * real browser event.
   */
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');
    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
      var boundFunc = func.bind(null, a);
      var evtType = 'react-' + name;
      fakeNode.addEventListener(evtType, boundFunc, false);
      var evt = document.createEvent('Event');
      // $FlowFixMe https://github.com/facebook/flow/issues/2336
      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);
      fakeNode.removeEventListener(evtType, boundFunc, false);
    };
  }
}

module.exports = ReactErrorUtils;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactCurrentOwner = __webpack_require__(11);
var ReactInstanceMap = __webpack_require__(25);
var ReactInstrumentation = __webpack_require__(8);
var ReactUpdates = __webpack_require__(10);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

function enqueueUpdate(internalInstance) {
  ReactUpdates.enqueueUpdate(internalInstance);
}

function formatUnexpectedArgument(arg) {
  var type = typeof arg;
  if (type !== 'object') {
    return type;
  }
  var displayName = arg.constructor && arg.constructor.name || type;
  var keys = Object.keys(arg);
  if (keys.length > 0 && keys.length < 20) {
    return displayName + ' (keys: ' + keys.join(', ') + ')';
  }
  return displayName;
}

function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
  var internalInstance = ReactInstanceMap.get(publicInstance);
  if (!internalInstance) {
    if (process.env.NODE_ENV !== 'production') {
      var ctor = publicInstance.constructor;
      // Only warn when we have a callerName. Otherwise we should be silent.
      // We're probably calling from enqueueCallback. We don't want to warn
      // there because we already warned for the corresponding lifecycle method.
      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
    }
    return null;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + 'within `render` or another component\'s constructor). Render methods ' + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
  }

  return internalInstance;
}

/**
 * ReactUpdateQueue allows for state updates to be scheduled into a later
 * reconciliation step.
 */
var ReactUpdateQueue = {

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    if (process.env.NODE_ENV !== 'production') {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
        owner._warnedAboutRefsInRender = true;
      }
    }
    var internalInstance = ReactInstanceMap.get(publicInstance);
    if (internalInstance) {
      // During componentWillMount and render this will still be null but after
      // that will always render to something. At least for now. So we can use
      // this hack.
      return !!internalInstance._renderedComponent;
    } else {
      return false;
    }
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @param {string} callerName Name of the calling function in the public API.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback, callerName) {
    ReactUpdateQueue.validateCallback(callback, callerName);
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

    // Previously we would throw an error if we didn't have an internal
    // instance. Since we want to make it a no-op instead, we mirror the same
    // behavior we have in other enqueue* methods.
    // We also need to ignore callbacks in componentWillMount. See
    // enqueueUpdates.
    if (!internalInstance) {
      return null;
    }

    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    // TODO: The callback here is ignored when setState is called from
    // componentWillMount. Either fix it or disallow doing so completely in
    // favor of getInitialState. Alternatively, we can disallow
    // componentWillMount during server-side rendering.
    enqueueUpdate(internalInstance);
  },

  enqueueCallbackInternal: function (internalInstance, callback) {
    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    enqueueUpdate(internalInstance);
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingForceUpdate = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingStateQueue = [completeState];
    internalInstance._pendingReplaceState = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onSetState();
      process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
    }

    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

    if (!internalInstance) {
      return;
    }

    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
    queue.push(partialState);

    enqueueUpdate(internalInstance);
  },

  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {
    internalInstance._pendingElement = nextElement;
    // TODO: introduce _pendingContext instead of setting it directly.
    internalInstance._context = nextContext;
    enqueueUpdate(internalInstance);
  },

  validateCallback: function (callback, callerName) {
    !(!callback || typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
  }

};

module.exports = ReactUpdateQueue;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* globals MSApp */



/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */

var createMicrosoftUnsafeLocalFunction = function (func) {
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    return function (arg0, arg1, arg2, arg3) {
      MSApp.execUnsafeLocalFunction(function () {
        return func(arg0, arg1, arg2, arg3);
      });
    };
  } else {
    return func;
  }
};

module.exports = createMicrosoftUnsafeLocalFunction;

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */

function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */

function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;

  // Normalize SVG <use> element events #4963
  if (target.correspondingUseElement) {
    target = target.correspondingUseElement;
  }

  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature = document.implementation && document.implementation.hasFeature &&
  // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */

function shouldUpdateReactComponent(prevElement, nextElement) {
  var prevEmpty = prevElement === null || prevElement === false;
  var nextEmpty = nextElement === null || nextElement === false;
  if (prevEmpty || nextEmpty) {
    return prevEmpty === nextEmpty;
  }

  var prevType = typeof prevElement;
  var nextType = typeof nextElement;
  if (prevType === 'string' || prevType === 'number') {
    return nextType === 'string' || nextType === 'number';
  } else {
    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
  }
}

module.exports = shouldUpdateReactComponent;

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var emptyFunction = __webpack_require__(9);
var warning = __webpack_require__(2);

var validateDOMNesting = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.

  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
  var buttonScopeTags = inScopeTags.concat(['button']);

  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

  var emptyAncestorInfo = {
    current: null,

    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,

    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  var updatedAncestorInfo = function (oldInfo, tag, instance) {
    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
    var info = { tag: tag, instance: instance };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }
    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    }

    // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.current = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }
    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }
    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }
    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }
    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }
    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }
    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };

  /**
   * Returns whether
   */
  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';
      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but
      case 'option':
        return tag === '#text';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
      case 'colgroup':
        return tag === 'col' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
      case 'html':
        return tag === 'head' || tag === 'body';
      case '#document':
        return tag === 'html';
    }

    // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'body':
      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frame':
      case 'head':
      case 'html':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };

  /**
   * Returns whether
   */
  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':

      case 'pre':
      case 'listing':

      case 'table':

      case 'hr':

      case 'xmp':

      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  /**
   * Given a ReactCompositeComponent instance, return a list of its recursive
   * owners, starting at the root and ending with the instance itself.
   */
  var findOwnerStack = function (instance) {
    if (!instance) {
      return [];
    }

    var stack = [];
    do {
      stack.push(instance);
    } while (instance = instance._currentElement._owner);
    stack.reverse();
    return stack;
  };

  var didWarn = {};

  validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;

    if (childText != null) {
      process.env.NODE_ENV !== 'production' ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
      childTag = '#text';
    }

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var problematic = invalidParent || invalidAncestor;

    if (problematic) {
      var ancestorTag = problematic.tag;
      var ancestorInstance = problematic.instance;

      var childOwner = childInstance && childInstance._currentElement._owner;
      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

      var childOwners = findOwnerStack(childOwner);
      var ancestorOwners = findOwnerStack(ancestorOwner);

      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
      var i;

      var deepestCommon = -1;
      for (i = 0; i < minStackLen; i++) {
        if (childOwners[i] === ancestorOwners[i]) {
          deepestCommon = i;
        } else {
          break;
        }
      }

      var UNKNOWN = '(unknown)';
      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ownerInfo = [].concat(
      // If the parent and child instances have a common owner ancestor, start
      // with that -- otherwise we just start with the parent's owners.
      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
      // If we're warning about an invalid (non-parent) ancestry, add '...'
      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
      if (didWarn[warnKey]) {
        return;
      }
      didWarn[warnKey] = true;

      var tagDisplayName = childTag;
      var whitespaceInfo = '';
      if (childTag === '#text') {
        if (/\S/.test(childText)) {
          tagDisplayName = 'Text nodes';
        } else {
          tagDisplayName = 'Whitespace text nodes';
          whitespaceInfo = ' Make sure you don\'t have any extra whitespace between tags on ' + 'each line of your source code.';
        }
      } else {
        tagDisplayName = '<' + childTag + '>';
      }

      if (invalidParent) {
        var info = '';
        if (ancestorTag === 'table' && childTag === 'tr') {
          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
        }
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
      } else {
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
      }
    }
  };

  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

  // For testing
  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;
    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
  };
}

module.exports = validateDOMNesting;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 52 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = warning;
/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */
function warning(message) {
  /* eslint-disable no-console */
  if (typeof console !== 'undefined' && typeof console.error === 'function') {
    console.error(message);
  }
  /* eslint-enable no-console */
  try {
    // This error was thrown as a convenience so that if you enable
    // "break on all exceptions" in your console,
    // it would pause the execution at this line.
    throw new Error(message);
    /* eslint-disable no-empty */
  } catch (e) {}
  /* eslint-enable no-empty */
}

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(16);

var ReactNoopUpdateQueue = __webpack_require__(54);

var canDefineProperty = __webpack_require__(56);
var emptyObject = __webpack_require__(22);
var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

/**
 * Base class helpers for the updating state of a component.
 */
function ReactComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

ReactComponent.prototype.isReactComponent = {};

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
ReactComponent.prototype.setState = function (partialState, callback) {
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
  this.updater.enqueueSetState(this, partialState);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'setState');
  }
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
ReactComponent.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'forceUpdate');
  }
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
if (process.env.NODE_ENV !== 'production') {
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };
  var defineDeprecationWarning = function (methodName, info) {
    if (canDefineProperty) {
      Object.defineProperty(ReactComponent.prototype, methodName, {
        get: function () {
          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
          return undefined;
        }
      });
    }
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

module.exports = ReactComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var warning = __webpack_require__(2);

function warnNoop(publicInstance, callerName) {
  if (process.env.NODE_ENV !== 'production') {
    var constructor = publicInstance.constructor;
    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }
}

/**
 * This is the abstract API for an update queue.
 */
var ReactNoopUpdateQueue = {

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback) {},

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    warnNoop(publicInstance, 'setState');
  }
};

module.exports = ReactNoopUpdateQueue;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypeLocationNames = {};

if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var canDefineProperty = false;
if (process.env.NODE_ENV !== 'production') {
  try {
    // $FlowFixMe https://github.com/facebook/flow/issues/285
    Object.defineProperty({}, 'x', { get: function () {} });
    canDefineProperty = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

module.exports = canDefineProperty;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/* global Symbol */

var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.selectArea = selectArea;
function selectArea(Nr) {
	return {
		type: "SELECT_AREA",
		payload: Nr
	};
}

/***/ }),
/* 59 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Provider__ = __webpack_require__(229);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_connectAdvanced__ = __webpack_require__(89);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__connect_connect__ = __webpack_require__(230);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Provider", function() { return __WEBPACK_IMPORTED_MODULE_0__components_Provider__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "connectAdvanced", function() { return __WEBPACK_IMPORTED_MODULE_1__components_connectAdvanced__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "connect", function() { return __WEBPACK_IMPORTED_MODULE_2__connect_connect__["a"]; });






/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, '__esModule', {
    value: true
});

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _inlineStylePrefixerStaticCreatePrefixer = __webpack_require__(132);

var _inlineStylePrefixerStaticCreatePrefixer2 = _interopRequireDefault(_inlineStylePrefixerStaticCreatePrefixer);

var _libStaticPrefixData = __webpack_require__(108);

var _libStaticPrefixData2 = _interopRequireDefault(_libStaticPrefixData);

var _orderedElements = __webpack_require__(61);

var _orderedElements2 = _interopRequireDefault(_orderedElements);

var _util = __webpack_require__(34);

var prefixAll = (0, _inlineStylePrefixerStaticCreatePrefixer2['default'])(_libStaticPrefixData2['default']);

/* ::
import type { SheetDefinition } from './index.js';
type StringHandlers = { [id:string]: Function };
type SelectorCallback = (selector: string) => any;
export type SelectorHandler = (
    selector: string,
    baseSelector: string,
    callback: SelectorCallback
) => string | null;
*/

/**
 * `selectorHandlers` are functions which handle special selectors which act
 * differently than normal style definitions. These functions look at the
 * current selector and can generate CSS for the styles in their subtree by
 * calling the callback with a new selector.
 *
 * For example, when generating styles with a base selector of '.foo' and the
 * following styles object:
 *
 *   {
 *     ':nth-child(2n)': {
 *       ':hover': {
 *         color: 'red'
 *       }
 *     }
 *   }
 *
 * when we reach the ':hover' style, we would call our selector handlers like
 *
 *   handler(':hover', '.foo:nth-child(2n)', callback)
 *
 * Since our `pseudoSelectors` handles ':hover' styles, that handler would call
 * the callback like
 *
 *   callback('.foo:nth-child(2n):hover')
 *
 * to generate its subtree `{ color: 'red' }` styles with a
 * '.foo:nth-child(2n):hover' selector. The callback would return CSS like
 *
 *   '.foo:nth-child(2n):hover{color:red !important;}'
 *
 * and the handler would then return that resulting CSS.
 *
 * `defaultSelectorHandlers` is the list of default handlers used in a call to
 * `generateCSS`.
 *
 * @name SelectorHandler
 * @function
 * @param {string} selector: The currently inspected selector. ':hover' in the
 *     example above.
 * @param {string} baseSelector: The selector of the parent styles.
 *     '.foo:nth-child(2n)' in the example above.
 * @param {function} generateSubtreeStyles: A function which can be called to
 *     generate CSS for the subtree of styles corresponding to the selector.
 *     Accepts a new baseSelector to use for generating those styles.
 * @returns {?string} The generated CSS for this selector, or null if we don't
 *     handle this selector.
 */
var defaultSelectorHandlers = [
// Handle pseudo-selectors, like :hover and :nth-child(3n)
function pseudoSelectors(selector, /* : string */
baseSelector, /* : string */
generateSubtreeStyles /* : Function */
) /* */{
    if (selector[0] !== ":") {
        return null;
    }
    return generateSubtreeStyles(baseSelector + selector);
},

// Handle media queries (or font-faces)
function mediaQueries(selector, /* : string */
baseSelector, /* : string */
generateSubtreeStyles /* : Function */
) /* */{
    if (selector[0] !== "@") {
        return null;
    }
    // Generate the styles normally, and then wrap them in the media query.
    var generated = generateSubtreeStyles(baseSelector);
    return selector + '{' + generated + '}';
}];

exports.defaultSelectorHandlers = defaultSelectorHandlers;
/**
 * Generate CSS for a selector and some styles.
 *
 * This function handles the media queries and pseudo selectors that can be used
 * in aphrodite styles.
 *
 * @param {string} selector: A base CSS selector for the styles to be generated
 *     with.
 * @param {Object} styleTypes: A list of properties of the return type of
 *     StyleSheet.create, e.g. [styles.red, styles.blue].
 * @param {Array.<SelectorHandler>} selectorHandlers: A list of selector
 *     handlers to use for handling special selectors. See
 *     `defaultSelectorHandlers`.
 * @param stringHandlers: See `generateCSSRuleset`
 * @param useImportant: See `generateCSSRuleset`
 *
 * To actually generate the CSS special-construct-less styles are passed to
 * `generateCSSRuleset`.
 *
 * For instance, a call to
 *
 *     generateCSS(".foo", [{
 *       color: "red",
 *       "@media screen": {
 *         height: 20,
 *         ":hover": {
 *           backgroundColor: "black"
 *         }
 *       },
 *       ":active": {
 *         fontWeight: "bold"
 *       }
 *     }], defaultSelectorHandlers);
 *
 * with the default `selectorHandlers` will make 5 calls to
 * `generateCSSRuleset`:
 *
 *     generateCSSRuleset(".foo", { color: "red" }, ...)
 *     generateCSSRuleset(".foo:active", { fontWeight: "bold" }, ...)
 *     // These 2 will be wrapped in @media screen {}
 *     generateCSSRuleset(".foo", { height: 20 }, ...)
 *     generateCSSRuleset(".foo:hover", { backgroundColor: "black" }, ...)
 */
var generateCSS = function generateCSS(selector, /* : string */
styleTypes, /* : SheetDefinition[] */
selectorHandlers, /* : SelectorHandler[] */
stringHandlers, /* : StringHandlers */
useImportant /* : boolean */
) /* : string */{
    var merged /* : OrderedElements */ = styleTypes.reduce(_util.recursiveMerge, new _orderedElements2['default']());

    var plainDeclarations = new _orderedElements2['default']();
    var generatedStyles = "";

    // TODO(emily): benchmark this to see if a plain for loop would be faster.
    merged.forEach(function (key, val) {
        // For each key, see if one of the selector handlers will handle these
        // styles.
        var foundHandler = selectorHandlers.some(function (handler) {
            var result = handler(key, selector, function (newSelector) {
                return generateCSS(newSelector, [val], selectorHandlers, stringHandlers, useImportant);
            });
            if (result != null) {
                // If the handler returned something, add it to the generated
                // CSS and stop looking for another handler.
                generatedStyles += result;
                return true;
            }
        });
        // If none of the handlers handled it, add it to the list of plain
        // style declarations.
        if (!foundHandler) {
            plainDeclarations.set(key, val);
        }
    });

    return generateCSSRuleset(selector, plainDeclarations, stringHandlers, useImportant, selectorHandlers) + generatedStyles;
};

exports.generateCSS = generateCSS;
/**
 * Helper method of generateCSSRuleset to facilitate custom handling of certain
 * CSS properties. Used for e.g. font families.
 *
 * See generateCSSRuleset for usage and documentation of paramater types.
 */
var runStringHandlers = function runStringHandlers(declarations, /* : OrderedElements */
stringHandlers, /* : StringHandlers */
selectorHandlers /* : SelectorHandler[] */
) /* */{
    var hasStringHandlers = !!stringHandlers;
    return declarations.map(function (key, val) {
        // If a handler exists for this particular key, let it interpret
        // that value first before continuing
        if (hasStringHandlers && stringHandlers.hasOwnProperty(key)) {
            // TODO(emily): Pass in a callback which generates CSS, similar to
            // how our selector handlers work, instead of passing in
            // `selectorHandlers` and have them make calls to `generateCSS`
            // themselves. Right now, this is impractical because our string
            // handlers are very specialized and do complex things.
            return stringHandlers[key](val, selectorHandlers);
        } else {
            return val;
        }
    });
};

/**
 * Generate a CSS ruleset with the selector and containing the declarations.
 *
 * This function assumes that the given declarations don't contain any special
 * children (such as media queries, pseudo-selectors, or descendant styles).
 *
 * Note that this method does not deal with nesting used for e.g.
 * psuedo-selectors or media queries. That responsibility is left to  the
 * `generateCSS` function.
 *
 * @param {string} selector: the selector associated with the ruleset
 * @param {Object} declarations: a map from camelCased CSS property name to CSS
 *     property value.
 * @param {Object.<string, function>} stringHandlers: a map from camelCased CSS
 *     property name to a function which will map the given value to the value
 *     that is output.
 * @param {bool} useImportant: A boolean saying whether to append "!important"
 *     to each of the CSS declarations.
 * @returns {string} A string of raw CSS.
 *
 * Examples:
 *
 *    generateCSSRuleset(".blah", { color: "red" })
 *    -> ".blah{color: red !important;}"
 *    generateCSSRuleset(".blah", { color: "red" }, {}, false)
 *    -> ".blah{color: red}"
 *    generateCSSRuleset(".blah", { color: "red" }, {color: c => c.toUpperCase})
 *    -> ".blah{color: RED}"
 *    generateCSSRuleset(".blah:hover", { color: "red" })
 *    -> ".blah:hover{color: red}"
 */
var generateCSSRuleset = function generateCSSRuleset(selector, /* : string */
declarations, /* : OrderedElements */
stringHandlers, /* : StringHandlers */
useImportant, /* : boolean */
selectorHandlers /* : SelectorHandler[] */
) /* : string */{
    var handledDeclarations /* : OrderedElements */ = runStringHandlers(declarations, stringHandlers, selectorHandlers);

    var originalElements = _extends({}, handledDeclarations.elements);

    // NOTE(emily): This mutates handledDeclarations.elements.
    var prefixedDeclarations = prefixAll(handledDeclarations.elements);

    var prefixedRules = (0, _util.flatten)((0, _util.objectToPairs)(prefixedDeclarations).map(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2);

        var key = _ref2[0];
        var value = _ref2[1];

        if (Array.isArray(value)) {
            // inline-style-prefixer returns an array when there should be
            // multiple rules for the same key. Here we flatten to multiple
            // pairs with the same key.
            return value.map(function (v) {
                return [key, v];
            });
        }
        return [[key, value]];
    }));

    // Calculate the order that we want to each element in `prefixedRules` to
    // be in, based on its index in the original key ordering.
    var sortOrder = {};
    for (var i = 0; i < handledDeclarations.keyOrder.length; i++) {
        var key = handledDeclarations.keyOrder[i];
        sortOrder[key] = i;

        // In order to keep most prefixed versions of keys in about the same
        // order that the original keys were in but placed before the
        // unprefixed version, we generate the prefixed forms of the keys and
        // set their order to the same as the original key minus a little bit.
        var capitalizedKey = '' + key[0].toUpperCase() + key.slice(1);
        var prefixedKeys = ['Webkit' + capitalizedKey, 'Moz' + capitalizedKey, 'ms' + capitalizedKey];
        for (var j = 0; j < prefixedKeys.length; ++j) {
            if (!originalElements.hasOwnProperty(prefixedKeys[j])) {
                sortOrder[prefixedKeys[j]] = i - 0.5;
                originalElements[prefixedKeys[j]] = originalElements[key];
            }
        }
    }

    // Calculate the sort order of a given property.
    function sortOrderForProperty(_ref3) {
        var _ref32 = _slicedToArray(_ref3, 2);

        var key = _ref32[0];
        var value = _ref32[1];

        if (sortOrder.hasOwnProperty(key)) {
            if (originalElements.hasOwnProperty(key) && originalElements[key] !== value) {
                // The value is prefixed. Sort this just before the key with
                // the unprefixed value.
                return sortOrder[key] - 0.25;
            } else {
                // Either the key and value are unprefixed here, or this is a
                // prefixed key. Either way, this is handled by the sortOrder
                // calculation above.
                return sortOrder[key];
            }
        } else {
            // If the property isn't in the sort order, it wasn't in the
            // original set of unprefixed keys, so it must be a prefixed key.
            // Sort at order -1 to put it at the top of the set of styles.
            return -1;
        }
    }

    // Actually sort the rules according to the sort order.
    prefixedRules.sort(function (a, b) {
        return sortOrderForProperty(a) - sortOrderForProperty(b);
    });

    var transformValue = useImportant === false ? _util.stringifyValue : function (key, value) {
        return (0, _util.importantify)((0, _util.stringifyValue)(key, value));
    };

    var rules = prefixedRules.map(function (_ref4) {
        var _ref42 = _slicedToArray(_ref4, 2);

        var key = _ref42[0];
        var value = _ref42[1];
        return (0, _util.kebabifyStyleName)(key) + ':' + transformValue(key, value) + ';';
    }).join("");

    if (rules) {
        return selector + '{' + rules + '}';
    } else {
        return "";
    }
};
exports.generateCSSRuleset = generateCSSRuleset;

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* global Map */



Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var OrderedElements = (function () {
    /* ::
    elements: {[string]: any};
    keyOrder: string[];
     static fromObject: ({[string]: any}) => OrderedElements;
    static fromMap: (Map<string,any>) => OrderedElements;
    static from: (Map<string,any> | {[string]: any} | OrderedElements) =>
        OrderedElements;
    */

    function OrderedElements() {
        var elements /* : {[string]: any} */ = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
        var keyOrder /* : string[] */ = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

        _classCallCheck(this, OrderedElements);

        this.elements = elements;
        this.keyOrder = keyOrder;
    }

    _createClass(OrderedElements, [{
        key: "forEach",
        value: function forEach(callback /* : (string, any) => void */) {
            for (var i = 0; i < this.keyOrder.length; i++) {
                callback(this.keyOrder[i], this.elements[this.keyOrder[i]]);
            }
        }
    }, {
        key: "map",
        value: function map(callback /* : (string, any) => any */) /* : OrderedElements */{
            var results = new OrderedElements();
            for (var i = 0; i < this.keyOrder.length; i++) {
                results.set(this.keyOrder[i], callback(this.keyOrder[i], this.elements[this.keyOrder[i]]));
            }
            return results;
        }
    }, {
        key: "set",
        value: function set(key, /* : string */value /* : any */) {
            if (!this.elements.hasOwnProperty(key)) {
                this.keyOrder.push(key);
            }
            this.elements[key] = value;
        }
    }, {
        key: "get",
        value: function get(key /* : string */) /* : any */{
            return this.elements[key];
        }
    }, {
        key: "has",
        value: function has(key /* : string */) /* : boolean */{
            return this.elements.hasOwnProperty(key);
        }
    }]);

    return OrderedElements;
})();

exports["default"] = OrderedElements;

OrderedElements.fromObject = function (obj) {
    return new OrderedElements(obj, Object.keys(obj));
};

OrderedElements.fromMap = function (map) {
    var ret = new OrderedElements();
    map.forEach(function (val, key) {
        ret.set(key, val);
    });
    return ret;
};

OrderedElements.from = function (obj) {
    if (obj instanceof OrderedElements) {
        // NOTE(emily): This makes a shallow copy of the previous elements, so
        // if the elements are deeply modified it will affect all copies.
        return new OrderedElements(_extends({}, obj.elements), obj.keyOrder.slice());
    } else if (
    // For some reason, flow complains about a plain
    // `typeof Map !== "undefined"` check. Casting `Map` to `any` solves
    // the problem.
    typeof /*::(*/Map /*: any)*/ !== "undefined" && obj instanceof Map) {
        return OrderedElements.fromMap(obj);
    } else {
        return OrderedElements.fromObject(obj);
    }
};
module.exports = exports["default"];

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

// https://d3js.org Version 4.7.1. Copyright 2017 Mike Bostock.
(function (global, factory) {
	 true ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.d3 = global.d3 || {})));
}(this, (function (exports) { 'use strict';

var version = "4.7.1";

var ascending = function(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
};

var bisector = function(compare) {
  if (compare.length === 1) compare = ascendingComparator(compare);
  return {
    left: function(a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) < 0) lo = mid + 1;
        else hi = mid;
      }
      return lo;
    },
    right: function(a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) > 0) hi = mid;
        else lo = mid + 1;
      }
      return lo;
    }
  };
};

function ascendingComparator(f) {
  return function(d, x) {
    return ascending(f(d), x);
  };
}

var ascendingBisect = bisector(ascending);
var bisectRight = ascendingBisect.right;
var bisectLeft = ascendingBisect.left;

var pairs = function(array, f) {
  if (f == null) f = pair;
  var i = 0, n = array.length - 1, p = array[0], pairs = new Array(n < 0 ? 0 : n);
  while (i < n) pairs[i] = f(p, p = array[++i]);
  return pairs;
};

function pair(a, b) {
  return [a, b];
}

var cross = function(a, b, f) {
  var na = a.length, nb = b.length, c = new Array(na * nb), ia, ib, ic, va;
  if (f == null) f = pair;
  for (ia = ic = 0; ia < na; ++ia) for (va = a[ia], ib = 0; ib < nb; ++ib, ++ic) c[ic] = f(va, b[ib]);
  return c;
};

var descending = function(a, b) {
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
};

var number = function(x) {
  return x === null ? NaN : +x;
};

var variance = function(array, f) {
  var n = array.length,
      m = 0,
      a,
      d,
      s = 0,
      i = -1,
      j = 0;

  if (f == null) {
    while (++i < n) {
      if (!isNaN(a = number(array[i]))) {
        d = a - m;
        m += d / ++j;
        s += d * (a - m);
      }
    }
  }

  else {
    while (++i < n) {
      if (!isNaN(a = number(f(array[i], i, array)))) {
        d = a - m;
        m += d / ++j;
        s += d * (a - m);
      }
    }
  }

  if (j > 1) return s / (j - 1);
};

var deviation = function(array, f) {
  var v = variance(array, f);
  return v ? Math.sqrt(v) : v;
};

var extent = function(array, f) {
  var i = -1,
      n = array.length,
      a,
      b,
      c;

  if (f == null) {
    while (++i < n) if ((b = array[i]) != null && b >= b) { a = c = b; break; }
    while (++i < n) if ((b = array[i]) != null) {
      if (a > b) a = b;
      if (c < b) c = b;
    }
  }

  else {
    while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) { a = c = b; break; }
    while (++i < n) if ((b = f(array[i], i, array)) != null) {
      if (a > b) a = b;
      if (c < b) c = b;
    }
  }

  return [a, c];
};

var array = Array.prototype;

var slice = array.slice;
var map = array.map;

var constant = function(x) {
  return function() {
    return x;
  };
};

var identity = function(x) {
  return x;
};

var sequence = function(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;

  var i = -1,
      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
      range = new Array(n);

  while (++i < n) {
    range[i] = start + i * step;
  }

  return range;
};

var e10 = Math.sqrt(50);
var e5 = Math.sqrt(10);
var e2 = Math.sqrt(2);

var ticks = function(start, stop, count) {
  var step = tickStep(start, stop, count);
  return sequence(
    Math.ceil(start / step) * step,
    Math.floor(stop / step) * step + step / 2, // inclusive
    step
  );
};

function tickStep(start, stop, count) {
  var step0 = Math.abs(stop - start) / Math.max(0, count),
      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
      error = step0 / step1;
  if (error >= e10) step1 *= 10;
  else if (error >= e5) step1 *= 5;
  else if (error >= e2) step1 *= 2;
  return stop < start ? -step1 : step1;
}

var sturges = function(values) {
  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
};

var histogram = function() {
  var value = identity,
      domain = extent,
      threshold = sturges;

  function histogram(data) {
    var i,
        n = data.length,
        x,
        values = new Array(n);

    for (i = 0; i < n; ++i) {
      values[i] = value(data[i], i, data);
    }

    var xz = domain(values),
        x0 = xz[0],
        x1 = xz[1],
        tz = threshold(values, x0, x1);

    // Convert number of thresholds into uniform thresholds.
    if (!Array.isArray(tz)) tz = ticks(x0, x1, tz);

    // Remove any thresholds outside the domain.
    var m = tz.length;
    while (tz[0] <= x0) tz.shift(), --m;
    while (tz[m - 1] >= x1) tz.pop(), --m;

    var bins = new Array(m + 1),
        bin;

    // Initialize bins.
    for (i = 0; i <= m; ++i) {
      bin = bins[i] = [];
      bin.x0 = i > 0 ? tz[i - 1] : x0;
      bin.x1 = i < m ? tz[i] : x1;
    }

    // Assign data to bins by value, ignoring any outside the domain.
    for (i = 0; i < n; ++i) {
      x = values[i];
      if (x0 <= x && x <= x1) {
        bins[bisectRight(tz, x, 0, m)].push(data[i]);
      }
    }

    return bins;
  }

  histogram.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant(_), histogram) : value;
  };

  histogram.domain = function(_) {
    return arguments.length ? (domain = typeof _ === "function" ? _ : constant([_[0], _[1]]), histogram) : domain;
  };

  histogram.thresholds = function(_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;
  };

  return histogram;
};

var threshold = function(array, p, f) {
  if (f == null) f = number;
  if (!(n = array.length)) return;
  if ((p = +p) <= 0 || n < 2) return +f(array[0], 0, array);
  if (p >= 1) return +f(array[n - 1], n - 1, array);
  var n,
      h = (n - 1) * p,
      i = Math.floor(h),
      a = +f(array[i], i, array),
      b = +f(array[i + 1], i + 1, array);
  return a + (b - a) * (h - i);
};

var freedmanDiaconis = function(values, min, max) {
  values = map.call(values, number).sort(ascending);
  return Math.ceil((max - min) / (2 * (threshold(values, 0.75) - threshold(values, 0.25)) * Math.pow(values.length, -1 / 3)));
};

var scott = function(values, min, max) {
  return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(values.length, -1 / 3)));
};

var max = function(array, f) {
  var i = -1,
      n = array.length,
      a,
      b;

  if (f == null) {
    while (++i < n) if ((b = array[i]) != null && b >= b) { a = b; break; }
    while (++i < n) if ((b = array[i]) != null && b > a) a = b;
  }

  else {
    while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) { a = b; break; }
    while (++i < n) if ((b = f(array[i], i, array)) != null && b > a) a = b;
  }

  return a;
};

var mean = function(array, f) {
  var s = 0,
      n = array.length,
      a,
      i = -1,
      j = n;

  if (f == null) {
    while (++i < n) if (!isNaN(a = number(array[i]))) s += a; else --j;
  }

  else {
    while (++i < n) if (!isNaN(a = number(f(array[i], i, array)))) s += a; else --j;
  }

  if (j) return s / j;
};

var median = function(array, f) {
  var numbers = [],
      n = array.length,
      a,
      i = -1;

  if (f == null) {
    while (++i < n) if (!isNaN(a = number(array[i]))) numbers.push(a);
  }

  else {
    while (++i < n) if (!isNaN(a = number(f(array[i], i, array)))) numbers.push(a);
  }

  return threshold(numbers.sort(ascending), 0.5);
};

var merge = function(arrays) {
  var n = arrays.length,
      m,
      i = -1,
      j = 0,
      merged,
      array;

  while (++i < n) j += arrays[i].length;
  merged = new Array(j);

  while (--n >= 0) {
    array = arrays[n];
    m = array.length;
    while (--m >= 0) {
      merged[--j] = array[m];
    }
  }

  return merged;
};

var min = function(array, f) {
  var i = -1,
      n = array.length,
      a,
      b;

  if (f == null) {
    while (++i < n) if ((b = array[i]) != null && b >= b) { a = b; break; }
    while (++i < n) if ((b = array[i]) != null && a > b) a = b;
  }

  else {
    while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) { a = b; break; }
    while (++i < n) if ((b = f(array[i], i, array)) != null && a > b) a = b;
  }

  return a;
};

var permute = function(array, indexes) {
  var i = indexes.length, permutes = new Array(i);
  while (i--) permutes[i] = array[indexes[i]];
  return permutes;
};

var scan = function(array, compare) {
  if (!(n = array.length)) return;
  var i = 0,
      n,
      j = 0,
      xi,
      xj = array[j];

  if (!compare) compare = ascending;

  while (++i < n) if (compare(xi = array[i], xj) < 0 || compare(xj, xj) !== 0) xj = xi, j = i;

  if (compare(xj, xj) === 0) return j;
};

var shuffle = function(array, i0, i1) {
  var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),
      t,
      i;

  while (m) {
    i = Math.random() * m-- | 0;
    t = array[m + i0];
    array[m + i0] = array[i + i0];
    array[i + i0] = t;
  }

  return array;
};

var sum = function(array, f) {
  var s = 0,
      n = array.length,
      a,
      i = -1;

  if (f == null) {
    while (++i < n) if (a = +array[i]) s += a; // Note: zero and null are equivalent.
  }

  else {
    while (++i < n) if (a = +f(array[i], i, array)) s += a;
  }

  return s;
};

var transpose = function(matrix) {
  if (!(n = matrix.length)) return [];
  for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {
    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
      row[j] = matrix[j][i];
    }
  }
  return transpose;
};

function length(d) {
  return d.length;
}

var zip = function() {
  return transpose(arguments);
};

var slice$1 = Array.prototype.slice;

var identity$1 = function(x) {
  return x;
};

var top = 1;
var right = 2;
var bottom = 3;
var left = 4;
var epsilon = 1e-6;

function translateX(x) {
  return "translate(" + x + ",0)";
}

function translateY(y) {
  return "translate(0," + y + ")";
}

function center(scale) {
  var offset = scale.bandwidth() / 2;
  if (scale.round()) offset = Math.round(offset);
  return function(d) {
    return scale(d) + offset;
  };
}

function entering() {
  return !this.__axis;
}

function axis(orient, scale) {
  var tickArguments = [],
      tickValues = null,
      tickFormat = null,
      tickSizeInner = 6,
      tickSizeOuter = 6,
      tickPadding = 3,
      k = orient === top || orient === left ? -1 : 1,
      x, y = orient === left || orient === right ? (x = "x", "y") : (x = "y", "x"),
      transform = orient === top || orient === bottom ? translateX : translateY;

  function axis(context) {
    var values = tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,
        format = tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity$1) : tickFormat,
        spacing = Math.max(tickSizeInner, 0) + tickPadding,
        range = scale.range(),
        range0 = range[0] + 0.5,
        range1 = range[range.length - 1] + 0.5,
        position = (scale.bandwidth ? center : identity$1)(scale.copy()),
        selection = context.selection ? context.selection() : context,
        path = selection.selectAll(".domain").data([null]),
        tick = selection.selectAll(".tick").data(values, scale).order(),
        tickExit = tick.exit(),
        tickEnter = tick.enter().append("g").attr("class", "tick"),
        line = tick.select("line"),
        text = tick.select("text");

    path = path.merge(path.enter().insert("path", ".tick")
        .attr("class", "domain")
        .attr("stroke", "#000"));

    tick = tick.merge(tickEnter);

    line = line.merge(tickEnter.append("line")
        .attr("stroke", "#000")
        .attr(x + "2", k * tickSizeInner)
        .attr(y + "1", 0.5)
        .attr(y + "2", 0.5));

    text = text.merge(tickEnter.append("text")
        .attr("fill", "#000")
        .attr(x, k * spacing)
        .attr(y, 0.5)
        .attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));

    if (context !== selection) {
      path = path.transition(context);
      tick = tick.transition(context);
      line = line.transition(context);
      text = text.transition(context);

      tickExit = tickExit.transition(context)
          .attr("opacity", epsilon)
          .attr("transform", function(d) { return isFinite(d = position(d)) ? transform(d) : this.getAttribute("transform"); });

      tickEnter
          .attr("opacity", epsilon)
          .attr("transform", function(d) { var p = this.parentNode.__axis; return transform(p && isFinite(p = p(d)) ? p : position(d)); });
    }

    tickExit.remove();

    path
        .attr("d", orient === left || orient == right
            ? "M" + k * tickSizeOuter + "," + range0 + "H0.5V" + range1 + "H" + k * tickSizeOuter
            : "M" + range0 + "," + k * tickSizeOuter + "V0.5H" + range1 + "V" + k * tickSizeOuter);

    tick
        .attr("opacity", 1)
        .attr("transform", function(d) { return transform(position(d)); });

    line
        .attr(x + "2", k * tickSizeInner);

    text
        .attr(x, k * spacing)
        .text(format);

    selection.filter(entering)
        .attr("fill", "none")
        .attr("font-size", 10)
        .attr("font-family", "sans-serif")
        .attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");

    selection
        .each(function() { this.__axis = position; });
  }

  axis.scale = function(_) {
    return arguments.length ? (scale = _, axis) : scale;
  };

  axis.ticks = function() {
    return tickArguments = slice$1.call(arguments), axis;
  };

  axis.tickArguments = function(_) {
    return arguments.length ? (tickArguments = _ == null ? [] : slice$1.call(_), axis) : tickArguments.slice();
  };

  axis.tickValues = function(_) {
    return arguments.length ? (tickValues = _ == null ? null : slice$1.call(_), axis) : tickValues && tickValues.slice();
  };

  axis.tickFormat = function(_) {
    return arguments.length ? (tickFormat = _, axis) : tickFormat;
  };

  axis.tickSize = function(_) {
    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;
  };

  axis.tickSizeInner = function(_) {
    return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;
  };

  axis.tickSizeOuter = function(_) {
    return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;
  };

  axis.tickPadding = function(_) {
    return arguments.length ? (tickPadding = +_, axis) : tickPadding;
  };

  return axis;
}

function axisTop(scale) {
  return axis(top, scale);
}

function axisRight(scale) {
  return axis(right, scale);
}

function axisBottom(scale) {
  return axis(bottom, scale);
}

function axisLeft(scale) {
  return axis(left, scale);
}

var noop = {value: function() {}};

function dispatch() {
  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
    if (!(t = arguments[i] + "") || (t in _)) throw new Error("illegal type: " + t);
    _[t] = [];
  }
  return new Dispatch(_);
}

function Dispatch(_) {
  this._ = _;
}

function parseTypenames(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
    return {type: t, name: name};
  });
}

Dispatch.prototype = dispatch.prototype = {
  constructor: Dispatch,
  on: function(typename, callback) {
    var _ = this._,
        T = parseTypenames(typename + "", _),
        t,
        i = -1,
        n = T.length;

    // If no callback was specified, return the callback of the given type and name.
    if (arguments.length < 2) {
      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;
      return;
    }

    // If a type was specified, set the callback for the given type and name.
    // Otherwise, if a null callback was specified, remove callbacks of the given name.
    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
    while (++i < n) {
      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);
      else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);
    }

    return this;
  },
  copy: function() {
    var copy = {}, _ = this._;
    for (var t in _) copy[t] = _[t].slice();
    return new Dispatch(copy);
  },
  call: function(type, that) {
    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  },
  apply: function(type, that, args) {
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  }
};

function get(type, name) {
  for (var i = 0, n = type.length, c; i < n; ++i) {
    if ((c = type[i]).name === name) {
      return c.value;
    }
  }
}

function set(type, name, callback) {
  for (var i = 0, n = type.length; i < n; ++i) {
    if (type[i].name === name) {
      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
      break;
    }
  }
  if (callback != null) type.push({name: name, value: callback});
  return type;
}

var xhtml = "http://www.w3.org/1999/xhtml";

var namespaces = {
  svg: "http://www.w3.org/2000/svg",
  xhtml: xhtml,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};

var namespace = function(name) {
  var prefix = name += "", i = prefix.indexOf(":");
  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
  return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name;
};

function creatorInherit(name) {
  return function() {
    var document = this.ownerDocument,
        uri = this.namespaceURI;
    return uri === xhtml && document.documentElement.namespaceURI === xhtml
        ? document.createElement(name)
        : document.createElementNS(uri, name);
  };
}

function creatorFixed(fullname) {
  return function() {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}

var creator = function(name) {
  var fullname = namespace(name);
  return (fullname.local
      ? creatorFixed
      : creatorInherit)(fullname);
};

var nextId = 0;

function local$1() {
  return new Local;
}

function Local() {
  this._ = "@" + (++nextId).toString(36);
}

Local.prototype = local$1.prototype = {
  constructor: Local,
  get: function(node) {
    var id = this._;
    while (!(id in node)) if (!(node = node.parentNode)) return;
    return node[id];
  },
  set: function(node, value) {
    return node[this._] = value;
  },
  remove: function(node) {
    return this._ in node && delete node[this._];
  },
  toString: function() {
    return this._;
  }
};

var matcher = function(selector) {
  return function() {
    return this.matches(selector);
  };
};

if (typeof document !== "undefined") {
  var element = document.documentElement;
  if (!element.matches) {
    var vendorMatches = element.webkitMatchesSelector
        || element.msMatchesSelector
        || element.mozMatchesSelector
        || element.oMatchesSelector;
    matcher = function(selector) {
      return function() {
        return vendorMatches.call(this, selector);
      };
    };
  }
}

var matcher$1 = matcher;

var filterEvents = {};

exports.event = null;

if (typeof document !== "undefined") {
  var element$1 = document.documentElement;
  if (!("onmouseenter" in element$1)) {
    filterEvents = {mouseenter: "mouseover", mouseleave: "mouseout"};
  }
}

function filterContextListener(listener, index, group) {
  listener = contextListener(listener, index, group);
  return function(event) {
    var related = event.relatedTarget;
    if (!related || (related !== this && !(related.compareDocumentPosition(this) & 8))) {
      listener.call(this, event);
    }
  };
}

function contextListener(listener, index, group) {
  return function(event1) {
    var event0 = exports.event; // Events can be reentrant (e.g., focus).
    exports.event = event1;
    try {
      listener.call(this, this.__data__, index, group);
    } finally {
      exports.event = event0;
    }
  };
}

function parseTypenames$1(typenames) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    return {type: t, name: name};
  });
}

function onRemove(typename) {
  return function() {
    var on = this.__on;
    if (!on) return;
    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
      } else {
        on[++i] = o;
      }
    }
    if (++i) on.length = i;
    else delete this.__on;
  };
}

function onAdd(typename, value, capture) {
  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
  return function(d, i, group) {
    var on = this.__on, o, listener = wrap(value, i, group);
    if (on) for (var j = 0, m = on.length; j < m; ++j) {
      if ((o = on[j]).type === typename.type && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
        this.addEventListener(o.type, o.listener = listener, o.capture = capture);
        o.value = value;
        return;
      }
    }
    this.addEventListener(typename.type, listener, capture);
    o = {type: typename.type, name: typename.name, value: value, listener: listener, capture: capture};
    if (!on) this.__on = [o];
    else on.push(o);
  };
}

var selection_on = function(typename, value, capture) {
  var typenames = parseTypenames$1(typename + ""), i, n = typenames.length, t;

  if (arguments.length < 2) {
    var on = this.node().__on;
    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
      for (i = 0, o = on[j]; i < n; ++i) {
        if ((t = typenames[i]).type === o.type && t.name === o.name) {
          return o.value;
        }
      }
    }
    return;
  }

  on = value ? onAdd : onRemove;
  if (capture == null) capture = false;
  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));
  return this;
};

function customEvent(event1, listener, that, args) {
  var event0 = exports.event;
  event1.sourceEvent = exports.event;
  exports.event = event1;
  try {
    return listener.apply(that, args);
  } finally {
    exports.event = event0;
  }
}

var sourceEvent = function() {
  var current = exports.event, source;
  while (source = current.sourceEvent) current = source;
  return current;
};

var point = function(node, event) {
  var svg = node.ownerSVGElement || node;

  if (svg.createSVGPoint) {
    var point = svg.createSVGPoint();
    point.x = event.clientX, point.y = event.clientY;
    point = point.matrixTransform(node.getScreenCTM().inverse());
    return [point.x, point.y];
  }

  var rect = node.getBoundingClientRect();
  return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
};

var mouse = function(node) {
  var event = sourceEvent();
  if (event.changedTouches) event = event.changedTouches[0];
  return point(node, event);
};

function none() {}

var selector = function(selector) {
  return selector == null ? none : function() {
    return this.querySelector(selector);
  };
};

var selection_select = function(select) {
  if (typeof select !== "function") select = selector(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }

  return new Selection(subgroups, this._parents);
};

function empty$1() {
  return [];
}

var selectorAll = function(selector) {
  return selector == null ? empty$1 : function() {
    return this.querySelectorAll(selector);
  };
};

var selection_selectAll = function(select) {
  if (typeof select !== "function") select = selectorAll(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        subgroups.push(select.call(node, node.__data__, i, group));
        parents.push(node);
      }
    }
  }

  return new Selection(subgroups, parents);
};

var selection_filter = function(match) {
  if (typeof match !== "function") match = matcher$1(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new Selection(subgroups, this._parents);
};

var sparse = function(update) {
  return new Array(update.length);
};

var selection_enter = function() {
  return new Selection(this._enter || this._groups.map(sparse), this._parents);
};

function EnterNode(parent, datum) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum;
}

EnterNode.prototype = {
  constructor: EnterNode,
  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },
  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },
  querySelector: function(selector) { return this._parent.querySelector(selector); },
  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }
};

var constant$1 = function(x) {
  return function() {
    return x;
  };
};

var keyPrefix = "$"; // Protect against keys like “__proto__”.

function bindIndex(parent, group, enter, update, exit, data) {
  var i = 0,
      node,
      groupLength = group.length,
      dataLength = data.length;

  // Put any non-null nodes that fit into update.
  // Put any null nodes into enter.
  // Put any remaining data into enter.
  for (; i < dataLength; ++i) {
    if (node = group[i]) {
      node.__data__ = data[i];
      update[i] = node;
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }

  // Put any non-null nodes that don’t fit into exit.
  for (; i < groupLength; ++i) {
    if (node = group[i]) {
      exit[i] = node;
    }
  }
}

function bindKey(parent, group, enter, update, exit, data, key) {
  var i,
      node,
      nodeByKeyValue = {},
      groupLength = group.length,
      dataLength = data.length,
      keyValues = new Array(groupLength),
      keyValue;

  // Compute the key for each node.
  // If multiple nodes have the same key, the duplicates are added to exit.
  for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);
      if (keyValue in nodeByKeyValue) {
        exit[i] = node;
      } else {
        nodeByKeyValue[keyValue] = node;
      }
    }
  }

  // Compute the key for each datum.
  // If there a node associated with this key, join and add it to update.
  // If there is not (or the key is a duplicate), add it to enter.
  for (i = 0; i < dataLength; ++i) {
    keyValue = keyPrefix + key.call(parent, data[i], i, data);
    if (node = nodeByKeyValue[keyValue]) {
      update[i] = node;
      node.__data__ = data[i];
      nodeByKeyValue[keyValue] = null;
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }

  // Add any remaining nodes that were not bound to data to exit.
  for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && (nodeByKeyValue[keyValues[i]] === node)) {
      exit[i] = node;
    }
  }
}

var selection_data = function(value, key) {
  if (!value) {
    data = new Array(this.size()), j = -1;
    this.each(function(d) { data[++j] = d; });
    return data;
  }

  var bind = key ? bindKey : bindIndex,
      parents = this._parents,
      groups = this._groups;

  if (typeof value !== "function") value = constant$1(value);

  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
    var parent = parents[j],
        group = groups[j],
        groupLength = group.length,
        data = value.call(parent, parent && parent.__data__, j, parents),
        dataLength = data.length,
        enterGroup = enter[j] = new Array(dataLength),
        updateGroup = update[j] = new Array(dataLength),
        exitGroup = exit[j] = new Array(groupLength);

    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);

    // Now connect the enter nodes to their following update node, such that
    // appendChild can insert the materialized enter node before this node,
    // rather than at the end of the parent node.
    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1) i1 = i0 + 1;
        while (!(next = updateGroup[i1]) && ++i1 < dataLength);
        previous._next = next || null;
      }
    }
  }

  update = new Selection(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
};

var selection_exit = function() {
  return new Selection(this._exit || this._groups.map(sparse), this._parents);
};

var selection_merge = function(selection) {

  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new Selection(merges, this._parents);
};

var selection_order = function() {

  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
      if (node = group[i]) {
        if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }

  return this;
};

var selection_sort = function(compare) {
  if (!compare) compare = ascending$1;

  function compareNode(a, b) {
    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
  }

  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        sortgroup[i] = node;
      }
    }
    sortgroup.sort(compareNode);
  }

  return new Selection(sortgroups, this._parents).order();
};

function ascending$1(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

var selection_call = function() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
};

var selection_nodes = function() {
  var nodes = new Array(this.size()), i = -1;
  this.each(function() { nodes[++i] = this; });
  return nodes;
};

var selection_node = function() {

  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
      var node = group[i];
      if (node) return node;
    }
  }

  return null;
};

var selection_size = function() {
  var size = 0;
  this.each(function() { ++size; });
  return size;
};

var selection_empty = function() {
  return !this.node();
};

var selection_each = function(callback) {

  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i]) callback.call(node, node.__data__, i, group);
    }
  }

  return this;
};

function attrRemove(name) {
  return function() {
    this.removeAttribute(name);
  };
}

function attrRemoveNS(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant(name, value) {
  return function() {
    this.setAttribute(name, value);
  };
}

function attrConstantNS(fullname, value) {
  return function() {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}

function attrFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttribute(name);
    else this.setAttribute(name, v);
  };
}

function attrFunctionNS(fullname, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
    else this.setAttributeNS(fullname.space, fullname.local, v);
  };
}

var selection_attr = function(name, value) {
  var fullname = namespace(name);

  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local
        ? node.getAttributeNS(fullname.space, fullname.local)
        : node.getAttribute(fullname);
  }

  return this.each((value == null
      ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === "function"
      ? (fullname.local ? attrFunctionNS : attrFunction)
      : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));
};

var window = function(node) {
  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node
      || (node.document && node) // node is a Window
      || node.defaultView; // node is a Document
};

function styleRemove(name) {
  return function() {
    this.style.removeProperty(name);
  };
}

function styleConstant(name, value, priority) {
  return function() {
    this.style.setProperty(name, value, priority);
  };
}

function styleFunction(name, value, priority) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.style.removeProperty(name);
    else this.style.setProperty(name, v, priority);
  };
}

var selection_style = function(name, value, priority) {
  var node;
  return arguments.length > 1
      ? this.each((value == null
            ? styleRemove : typeof value === "function"
            ? styleFunction
            : styleConstant)(name, value, priority == null ? "" : priority))
      : window(node = this.node())
          .getComputedStyle(node, null)
          .getPropertyValue(name);
};

function propertyRemove(name) {
  return function() {
    delete this[name];
  };
}

function propertyConstant(name, value) {
  return function() {
    this[name] = value;
  };
}

function propertyFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) delete this[name];
    else this[name] = v;
  };
}

var selection_property = function(name, value) {
  return arguments.length > 1
      ? this.each((value == null
          ? propertyRemove : typeof value === "function"
          ? propertyFunction
          : propertyConstant)(name, value))
      : this.node()[name];
};

function classArray(string) {
  return string.trim().split(/^|\s+/);
}

function classList(node) {
  return node.classList || new ClassList(node);
}

function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}

ClassList.prototype = {
  add: function(name) {
    var i = this._names.indexOf(name);
    if (i < 0) {
      this._names.push(name);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function(name) {
    var i = this._names.indexOf(name);
    if (i >= 0) {
      this._names.splice(i, 1);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function(name) {
    return this._names.indexOf(name) >= 0;
  }
};

function classedAdd(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n) list.add(names[i]);
}

function classedRemove(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n) list.remove(names[i]);
}

function classedTrue(names) {
  return function() {
    classedAdd(this, names);
  };
}

function classedFalse(names) {
  return function() {
    classedRemove(this, names);
  };
}

function classedFunction(names, value) {
  return function() {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}

var selection_classed = function(name, value) {
  var names = classArray(name + "");

  if (arguments.length < 2) {
    var list = classList(this.node()), i = -1, n = names.length;
    while (++i < n) if (!list.contains(names[i])) return false;
    return true;
  }

  return this.each((typeof value === "function"
      ? classedFunction : value
      ? classedTrue
      : classedFalse)(names, value));
};

function textRemove() {
  this.textContent = "";
}

function textConstant(value) {
  return function() {
    this.textContent = value;
  };
}

function textFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}

var selection_text = function(value) {
  return arguments.length
      ? this.each(value == null
          ? textRemove : (typeof value === "function"
          ? textFunction
          : textConstant)(value))
      : this.node().textContent;
};

function htmlRemove() {
  this.innerHTML = "";
}

function htmlConstant(value) {
  return function() {
    this.innerHTML = value;
  };
}

function htmlFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}

var selection_html = function(value) {
  return arguments.length
      ? this.each(value == null
          ? htmlRemove : (typeof value === "function"
          ? htmlFunction
          : htmlConstant)(value))
      : this.node().innerHTML;
};

function raise() {
  if (this.nextSibling) this.parentNode.appendChild(this);
}

var selection_raise = function() {
  return this.each(raise);
};

function lower() {
  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
}

var selection_lower = function() {
  return this.each(lower);
};

var selection_append = function(name) {
  var create = typeof name === "function" ? name : creator(name);
  return this.select(function() {
    return this.appendChild(create.apply(this, arguments));
  });
};

function constantNull() {
  return null;
}

var selection_insert = function(name, before) {
  var create = typeof name === "function" ? name : creator(name),
      select = before == null ? constantNull : typeof before === "function" ? before : selector(before);
  return this.select(function() {
    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
  });
};

function remove() {
  var parent = this.parentNode;
  if (parent) parent.removeChild(this);
}

var selection_remove = function() {
  return this.each(remove);
};

var selection_datum = function(value) {
  return arguments.length
      ? this.property("__data__", value)
      : this.node().__data__;
};

function dispatchEvent(node, type, params) {
  var window$$1 = window(node),
      event = window$$1.CustomEvent;

  if (event) {
    event = new event(type, params);
  } else {
    event = window$$1.document.createEvent("Event");
    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
    else event.initEvent(type, false, false);
  }

  node.dispatchEvent(event);
}

function dispatchConstant(type, params) {
  return function() {
    return dispatchEvent(this, type, params);
  };
}

function dispatchFunction(type, params) {
  return function() {
    return dispatchEvent(this, type, params.apply(this, arguments));
  };
}

var selection_dispatch = function(type, params) {
  return this.each((typeof params === "function"
      ? dispatchFunction
      : dispatchConstant)(type, params));
};

var root = [null];

function Selection(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}

function selection() {
  return new Selection([[document.documentElement]], root);
}

Selection.prototype = selection.prototype = {
  constructor: Selection,
  select: selection_select,
  selectAll: selection_selectAll,
  filter: selection_filter,
  data: selection_data,
  enter: selection_enter,
  exit: selection_exit,
  merge: selection_merge,
  order: selection_order,
  sort: selection_sort,
  call: selection_call,
  nodes: selection_nodes,
  node: selection_node,
  size: selection_size,
  empty: selection_empty,
  each: selection_each,
  attr: selection_attr,
  style: selection_style,
  property: selection_property,
  classed: selection_classed,
  text: selection_text,
  html: selection_html,
  raise: selection_raise,
  lower: selection_lower,
  append: selection_append,
  insert: selection_insert,
  remove: selection_remove,
  datum: selection_datum,
  on: selection_on,
  dispatch: selection_dispatch
};

var select = function(selector) {
  return typeof selector === "string"
      ? new Selection([[document.querySelector(selector)]], [document.documentElement])
      : new Selection([[selector]], root);
};

var selectAll = function(selector) {
  return typeof selector === "string"
      ? new Selection([document.querySelectorAll(selector)], [document.documentElement])
      : new Selection([selector == null ? [] : selector], root);
};

var touch = function(node, touches, identifier) {
  if (arguments.length < 3) identifier = touches, touches = sourceEvent().changedTouches;

  for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
    if ((touch = touches[i]).identifier === identifier) {
      return point(node, touch);
    }
  }

  return null;
};

var touches = function(node, touches) {
  if (touches == null) touches = sourceEvent().touches;

  for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {
    points[i] = point(node, touches[i]);
  }

  return points;
};

function nopropagation() {
  exports.event.stopImmediatePropagation();
}

var noevent = function() {
  exports.event.preventDefault();
  exports.event.stopImmediatePropagation();
};

var dragDisable = function(view) {
  var root = view.document.documentElement,
      selection$$1 = select(view).on("dragstart.drag", noevent, true);
  if ("onselectstart" in root) {
    selection$$1.on("selectstart.drag", noevent, true);
  } else {
    root.__noselect = root.style.MozUserSelect;
    root.style.MozUserSelect = "none";
  }
};

function yesdrag(view, noclick) {
  var root = view.document.documentElement,
      selection$$1 = select(view).on("dragstart.drag", null);
  if (noclick) {
    selection$$1.on("click.drag", noevent, true);
    setTimeout(function() { selection$$1.on("click.drag", null); }, 0);
  }
  if ("onselectstart" in root) {
    selection$$1.on("selectstart.drag", null);
  } else {
    root.style.MozUserSelect = root.__noselect;
    delete root.__noselect;
  }
}

var constant$2 = function(x) {
  return function() {
    return x;
  };
};

function DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch) {
  this.target = target;
  this.type = type;
  this.subject = subject;
  this.identifier = id;
  this.active = active;
  this.x = x;
  this.y = y;
  this.dx = dx;
  this.dy = dy;
  this._ = dispatch;
}

DragEvent.prototype.on = function() {
  var value = this._.on.apply(this._, arguments);
  return value === this._ ? this : value;
};

// Ignore right-click, since that should open the context menu.
function defaultFilter$1() {
  return !exports.event.button;
}

function defaultContainer() {
  return this.parentNode;
}

function defaultSubject(d) {
  return d == null ? {x: exports.event.x, y: exports.event.y} : d;
}

var drag = function() {
  var filter = defaultFilter$1,
      container = defaultContainer,
      subject = defaultSubject,
      gestures = {},
      listeners = dispatch("start", "drag", "end"),
      active = 0,
      mousemoving,
      touchending;

  function drag(selection$$1) {
    selection$$1
        .on("mousedown.drag", mousedowned)
        .on("touchstart.drag", touchstarted)
        .on("touchmove.drag", touchmoved)
        .on("touchend.drag touchcancel.drag", touchended)
        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }

  function mousedowned() {
    if (touchending || !filter.apply(this, arguments)) return;
    var gesture = beforestart("mouse", container.apply(this, arguments), mouse, this, arguments);
    if (!gesture) return;
    select(exports.event.view).on("mousemove.drag", mousemoved, true).on("mouseup.drag", mouseupped, true);
    dragDisable(exports.event.view);
    nopropagation();
    mousemoving = false;
    gesture("start");
  }

  function mousemoved() {
    noevent();
    mousemoving = true;
    gestures.mouse("drag");
  }

  function mouseupped() {
    select(exports.event.view).on("mousemove.drag mouseup.drag", null);
    yesdrag(exports.event.view, mousemoving);
    noevent();
    gestures.mouse("end");
  }

  function touchstarted() {
    if (!filter.apply(this, arguments)) return;
    var touches$$1 = exports.event.changedTouches,
        c = container.apply(this, arguments),
        n = touches$$1.length, i, gesture;

    for (i = 0; i < n; ++i) {
      if (gesture = beforestart(touches$$1[i].identifier, c, touch, this, arguments)) {
        nopropagation();
        gesture("start");
      }
    }
  }

  function touchmoved() {
    var touches$$1 = exports.event.changedTouches,
        n = touches$$1.length, i, gesture;

    for (i = 0; i < n; ++i) {
      if (gesture = gestures[touches$$1[i].identifier]) {
        noevent();
        gesture("drag");
      }
    }
  }

  function touchended() {
    var touches$$1 = exports.event.changedTouches,
        n = touches$$1.length, i, gesture;

    if (touchending) clearTimeout(touchending);
    touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!
    for (i = 0; i < n; ++i) {
      if (gesture = gestures[touches$$1[i].identifier]) {
        nopropagation();
        gesture("end");
      }
    }
  }

  function beforestart(id, container, point, that, args) {
    var p = point(container, id), s, dx, dy,
        sublisteners = listeners.copy();

    if (!customEvent(new DragEvent(drag, "beforestart", s, id, active, p[0], p[1], 0, 0, sublisteners), function() {
      if ((exports.event.subject = s = subject.apply(that, args)) == null) return false;
      dx = s.x - p[0] || 0;
      dy = s.y - p[1] || 0;
      return true;
    })) return;

    return function gesture(type) {
      var p0 = p, n;
      switch (type) {
        case "start": gestures[id] = gesture, n = active++; break;
        case "end": delete gestures[id], --active; // nobreak
        case "drag": p = point(container, id), n = active; break;
      }
      customEvent(new DragEvent(drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [type, that, args]);
    };
  }

  drag.filter = function(_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : constant$2(!!_), drag) : filter;
  };

  drag.container = function(_) {
    return arguments.length ? (container = typeof _ === "function" ? _ : constant$2(_), drag) : container;
  };

  drag.subject = function(_) {
    return arguments.length ? (subject = typeof _ === "function" ? _ : constant$2(_), drag) : subject;
  };

  drag.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? drag : value;
  };

  return drag;
};

var define = function(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
};

function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition) prototype[key] = definition[key];
  return prototype;
}

function Color() {}

var darker = 0.7;
var brighter = 1 / darker;

var reI = "\\s*([+-]?\\d+)\\s*";
var reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*";
var reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
var reHex3 = /^#([0-9a-f]{3})$/;
var reHex6 = /^#([0-9a-f]{6})$/;
var reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$");
var reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$");
var reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$");
var reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$");
var reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$");
var reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");

var named = {
  aliceblue: 0xf0f8ff,
  antiquewhite: 0xfaebd7,
  aqua: 0x00ffff,
  aquamarine: 0x7fffd4,
  azure: 0xf0ffff,
  beige: 0xf5f5dc,
  bisque: 0xffe4c4,
  black: 0x000000,
  blanchedalmond: 0xffebcd,
  blue: 0x0000ff,
  blueviolet: 0x8a2be2,
  brown: 0xa52a2a,
  burlywood: 0xdeb887,
  cadetblue: 0x5f9ea0,
  chartreuse: 0x7fff00,
  chocolate: 0xd2691e,
  coral: 0xff7f50,
  cornflowerblue: 0x6495ed,
  cornsilk: 0xfff8dc,
  crimson: 0xdc143c,
  cyan: 0x00ffff,
  darkblue: 0x00008b,
  darkcyan: 0x008b8b,
  darkgoldenrod: 0xb8860b,
  darkgray: 0xa9a9a9,
  darkgreen: 0x006400,
  darkgrey: 0xa9a9a9,
  darkkhaki: 0xbdb76b,
  darkmagenta: 0x8b008b,
  darkolivegreen: 0x556b2f,
  darkorange: 0xff8c00,
  darkorchid: 0x9932cc,
  darkred: 0x8b0000,
  darksalmon: 0xe9967a,
  darkseagreen: 0x8fbc8f,
  darkslateblue: 0x483d8b,
  darkslategray: 0x2f4f4f,
  darkslategrey: 0x2f4f4f,
  darkturquoise: 0x00ced1,
  darkviolet: 0x9400d3,
  deeppink: 0xff1493,
  deepskyblue: 0x00bfff,
  dimgray: 0x696969,
  dimgrey: 0x696969,
  dodgerblue: 0x1e90ff,
  firebrick: 0xb22222,
  floralwhite: 0xfffaf0,
  forestgreen: 0x228b22,
  fuchsia: 0xff00ff,
  gainsboro: 0xdcdcdc,
  ghostwhite: 0xf8f8ff,
  gold: 0xffd700,
  goldenrod: 0xdaa520,
  gray: 0x808080,
  green: 0x008000,
  greenyellow: 0xadff2f,
  grey: 0x808080,
  honeydew: 0xf0fff0,
  hotpink: 0xff69b4,
  indianred: 0xcd5c5c,
  indigo: 0x4b0082,
  ivory: 0xfffff0,
  khaki: 0xf0e68c,
  lavender: 0xe6e6fa,
  lavenderblush: 0xfff0f5,
  lawngreen: 0x7cfc00,
  lemonchiffon: 0xfffacd,
  lightblue: 0xadd8e6,
  lightcoral: 0xf08080,
  lightcyan: 0xe0ffff,
  lightgoldenrodyellow: 0xfafad2,
  lightgray: 0xd3d3d3,
  lightgreen: 0x90ee90,
  lightgrey: 0xd3d3d3,
  lightpink: 0xffb6c1,
  lightsalmon: 0xffa07a,
  lightseagreen: 0x20b2aa,
  lightskyblue: 0x87cefa,
  lightslategray: 0x778899,
  lightslategrey: 0x778899,
  lightsteelblue: 0xb0c4de,
  lightyellow: 0xffffe0,
  lime: 0x00ff00,
  limegreen: 0x32cd32,
  linen: 0xfaf0e6,
  magenta: 0xff00ff,
  maroon: 0x800000,
  mediumaquamarine: 0x66cdaa,
  mediumblue: 0x0000cd,
  mediumorchid: 0xba55d3,
  mediumpurple: 0x9370db,
  mediumseagreen: 0x3cb371,
  mediumslateblue: 0x7b68ee,
  mediumspringgreen: 0x00fa9a,
  mediumturquoise: 0x48d1cc,
  mediumvioletred: 0xc71585,
  midnightblue: 0x191970,
  mintcream: 0xf5fffa,
  mistyrose: 0xffe4e1,
  moccasin: 0xffe4b5,
  navajowhite: 0xffdead,
  navy: 0x000080,
  oldlace: 0xfdf5e6,
  olive: 0x808000,
  olivedrab: 0x6b8e23,
  orange: 0xffa500,
  orangered: 0xff4500,
  orchid: 0xda70d6,
  palegoldenrod: 0xeee8aa,
  palegreen: 0x98fb98,
  paleturquoise: 0xafeeee,
  palevioletred: 0xdb7093,
  papayawhip: 0xffefd5,
  peachpuff: 0xffdab9,
  peru: 0xcd853f,
  pink: 0xffc0cb,
  plum: 0xdda0dd,
  powderblue: 0xb0e0e6,
  purple: 0x800080,
  rebeccapurple: 0x663399,
  red: 0xff0000,
  rosybrown: 0xbc8f8f,
  royalblue: 0x4169e1,
  saddlebrown: 0x8b4513,
  salmon: 0xfa8072,
  sandybrown: 0xf4a460,
  seagreen: 0x2e8b57,
  seashell: 0xfff5ee,
  sienna: 0xa0522d,
  silver: 0xc0c0c0,
  skyblue: 0x87ceeb,
  slateblue: 0x6a5acd,
  slategray: 0x708090,
  slategrey: 0x708090,
  snow: 0xfffafa,
  springgreen: 0x00ff7f,
  steelblue: 0x4682b4,
  tan: 0xd2b48c,
  teal: 0x008080,
  thistle: 0xd8bfd8,
  tomato: 0xff6347,
  turquoise: 0x40e0d0,
  violet: 0xee82ee,
  wheat: 0xf5deb3,
  white: 0xffffff,
  whitesmoke: 0xf5f5f5,
  yellow: 0xffff00,
  yellowgreen: 0x9acd32
};

define(Color, color, {
  displayable: function() {
    return this.rgb().displayable();
  },
  toString: function() {
    return this.rgb() + "";
  }
});

function color(format) {
  var m;
  format = (format + "").trim().toLowerCase();
  return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb((m >> 8 & 0xf) | (m >> 4 & 0x0f0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1)) // #f00
      : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000
      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
      : named.hasOwnProperty(format) ? rgbn(named[format])
      : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
      : null;
}

function rgbn(n) {
  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
}

function rgba(r, g, b, a) {
  if (a <= 0) r = g = b = NaN;
  return new Rgb(r, g, b, a);
}

function rgbConvert(o) {
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Rgb;
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}

function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}

function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}

define(Rgb, rgb, extend(Color, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb: function() {
    return this;
  },
  displayable: function() {
    return (0 <= this.r && this.r <= 255)
        && (0 <= this.g && this.g <= 255)
        && (0 <= this.b && this.b <= 255)
        && (0 <= this.opacity && this.opacity <= 1);
  },
  toString: function() {
    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
    return (a === 1 ? "rgb(" : "rgba(")
        + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
        + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
        + Math.max(0, Math.min(255, Math.round(this.b) || 0))
        + (a === 1 ? ")" : ", " + a + ")");
  }
}));

function hsla(h, s, l, a) {
  if (a <= 0) h = s = l = NaN;
  else if (l <= 0 || l >= 1) h = s = NaN;
  else if (s <= 0) h = NaN;
  return new Hsl(h, s, l, a);
}

function hslConvert(o) {
  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Hsl;
  if (o instanceof Hsl) return o;
  o = o.rgb();
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      h = NaN,
      s = max - min,
      l = (max + min) / 2;
  if (s) {
    if (r === max) h = (g - b) / s + (g < b) * 6;
    else if (g === max) h = (b - r) / s + 2;
    else h = (r - g) / s + 4;
    s /= l < 0.5 ? max + min : 2 - max - min;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl(h, s, l, o.opacity);
}

function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}

function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

define(Hsl, hsl, extend(Color, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function() {
    var h = this.h % 360 + (this.h < 0) * 360,
        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
        l = this.l,
        m2 = l + (l < 0.5 ? l : 1 - l) * s,
        m1 = 2 * l - m2;
    return new Rgb(
      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
      hsl2rgb(h, m1, m2),
      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
      this.opacity
    );
  },
  displayable: function() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s))
        && (0 <= this.l && this.l <= 1)
        && (0 <= this.opacity && this.opacity <= 1);
  }
}));

/* From FvD 13.37, CSS Color Module Level 3 */
function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60
      : h < 180 ? m2
      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
      : m1) * 255;
}

var deg2rad = Math.PI / 180;
var rad2deg = 180 / Math.PI;

var Kn = 18;
var Xn = 0.950470;
var Yn = 1;
var Zn = 1.088830;
var t0 = 4 / 29;
var t1 = 6 / 29;
var t2 = 3 * t1 * t1;
var t3 = t1 * t1 * t1;

function labConvert(o) {
  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
  if (o instanceof Hcl) {
    var h = o.h * deg2rad;
    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
  }
  if (!(o instanceof Rgb)) o = rgbConvert(o);
  var b = rgb2xyz(o.r),
      a = rgb2xyz(o.g),
      l = rgb2xyz(o.b),
      x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn),
      y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.0721750 * l) / Yn),
      z = xyz2lab((0.0193339 * b + 0.1191920 * a + 0.9503041 * l) / Zn);
  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
}

function lab(l, a, b, opacity) {
  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
}

function Lab(l, a, b, opacity) {
  this.l = +l;
  this.a = +a;
  this.b = +b;
  this.opacity = +opacity;
}

define(Lab, lab, extend(Color, {
  brighter: function(k) {
    return new Lab(this.l + Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  darker: function(k) {
    return new Lab(this.l - Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  rgb: function() {
    var y = (this.l + 16) / 116,
        x = isNaN(this.a) ? y : y + this.a / 500,
        z = isNaN(this.b) ? y : y - this.b / 200;
    y = Yn * lab2xyz(y);
    x = Xn * lab2xyz(x);
    z = Zn * lab2xyz(z);
    return new Rgb(
      xyz2rgb( 3.2404542 * x - 1.5371385 * y - 0.4985314 * z), // D65 -> sRGB
      xyz2rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z),
      xyz2rgb( 0.0556434 * x - 0.2040259 * y + 1.0572252 * z),
      this.opacity
    );
  }
}));

function xyz2lab(t) {
  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
}

function lab2xyz(t) {
  return t > t1 ? t * t * t : t2 * (t - t0);
}

function xyz2rgb(x) {
  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
}

function rgb2xyz(x) {
  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
}

function hclConvert(o) {
  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
  if (!(o instanceof Lab)) o = labConvert(o);
  var h = Math.atan2(o.b, o.a) * rad2deg;
  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
}

function hcl(h, c, l, opacity) {
  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}

function Hcl(h, c, l, opacity) {
  this.h = +h;
  this.c = +c;
  this.l = +l;
  this.opacity = +opacity;
}

define(Hcl, hcl, extend(Color, {
  brighter: function(k) {
    return new Hcl(this.h, this.c, this.l + Kn * (k == null ? 1 : k), this.opacity);
  },
  darker: function(k) {
    return new Hcl(this.h, this.c, this.l - Kn * (k == null ? 1 : k), this.opacity);
  },
  rgb: function() {
    return labConvert(this).rgb();
  }
}));

var A = -0.14861;
var B = +1.78277;
var C = -0.29227;
var D = -0.90649;
var E = +1.97294;
var ED = E * D;
var EB = E * B;
var BC_DA = B * C - D * A;

function cubehelixConvert(o) {
  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Rgb)) o = rgbConvert(o);
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
      bl = b - l,
      k = (E * (g - l) - C * bl) / D,
      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1
      h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;
  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
}

function cubehelix(h, s, l, opacity) {
  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
}

function Cubehelix(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

define(Cubehelix, cubehelix, extend(Color, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function() {
    var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,
        l = +this.l,
        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
        cosh = Math.cos(h),
        sinh = Math.sin(h);
    return new Rgb(
      255 * (l + a * (A * cosh + B * sinh)),
      255 * (l + a * (C * cosh + D * sinh)),
      255 * (l + a * (E * cosh)),
      this.opacity
    );
  }
}));

function basis(t1, v0, v1, v2, v3) {
  var t2 = t1 * t1, t3 = t2 * t1;
  return ((1 - 3 * t1 + 3 * t2 - t3) * v0
      + (4 - 6 * t2 + 3 * t3) * v1
      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2
      + t3 * v3) / 6;
}

var basis$1 = function(values) {
  var n = values.length - 1;
  return function(t) {
    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
        v1 = values[i],
        v2 = values[i + 1],
        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
};

var basisClosed = function(values) {
  var n = values.length;
  return function(t) {
    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
        v0 = values[(i + n - 1) % n],
        v1 = values[i % n],
        v2 = values[(i + 1) % n],
        v3 = values[(i + 2) % n];
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
};

var constant$3 = function(x) {
  return function() {
    return x;
  };
};

function linear(a, d) {
  return function(t) {
    return a + t * d;
  };
}

function exponential(a, b, y) {
  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
    return Math.pow(a + t * b, y);
  };
}

function hue(a, b) {
  var d = b - a;
  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$3(isNaN(a) ? b : a);
}

function gamma(y) {
  return (y = +y) === 1 ? nogamma : function(a, b) {
    return b - a ? exponential(a, b, y) : constant$3(isNaN(a) ? b : a);
  };
}

function nogamma(a, b) {
  var d = b - a;
  return d ? linear(a, d) : constant$3(isNaN(a) ? b : a);
}

var interpolateRgb = ((function rgbGamma(y) {
  var color$$1 = gamma(y);

  function rgb$$1(start, end) {
    var r = color$$1((start = rgb(start)).r, (end = rgb(end)).r),
        g = color$$1(start.g, end.g),
        b = color$$1(start.b, end.b),
        opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.r = r(t);
      start.g = g(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }

  rgb$$1.gamma = rgbGamma;

  return rgb$$1;
}))(1);

function rgbSpline(spline) {
  return function(colors) {
    var n = colors.length,
        r = new Array(n),
        g = new Array(n),
        b = new Array(n),
        i, color$$1;
    for (i = 0; i < n; ++i) {
      color$$1 = rgb(colors[i]);
      r[i] = color$$1.r || 0;
      g[i] = color$$1.g || 0;
      b[i] = color$$1.b || 0;
    }
    r = spline(r);
    g = spline(g);
    b = spline(b);
    color$$1.opacity = 1;
    return function(t) {
      color$$1.r = r(t);
      color$$1.g = g(t);
      color$$1.b = b(t);
      return color$$1 + "";
    };
  };
}

var rgbBasis = rgbSpline(basis$1);
var rgbBasisClosed = rgbSpline(basisClosed);

var array$1 = function(a, b) {
  var nb = b ? b.length : 0,
      na = a ? Math.min(nb, a.length) : 0,
      x = new Array(nb),
      c = new Array(nb),
      i;

  for (i = 0; i < na; ++i) x[i] = interpolateValue(a[i], b[i]);
  for (; i < nb; ++i) c[i] = b[i];

  return function(t) {
    for (i = 0; i < na; ++i) c[i] = x[i](t);
    return c;
  };
};

var date = function(a, b) {
  var d = new Date;
  return a = +a, b -= a, function(t) {
    return d.setTime(a + b * t), d;
  };
};

var reinterpolate = function(a, b) {
  return a = +a, b -= a, function(t) {
    return a + b * t;
  };
};

var object = function(a, b) {
  var i = {},
      c = {},
      k;

  if (a === null || typeof a !== "object") a = {};
  if (b === null || typeof b !== "object") b = {};

  for (k in b) {
    if (k in a) {
      i[k] = interpolateValue(a[k], b[k]);
    } else {
      c[k] = b[k];
    }
  }

  return function(t) {
    for (k in i) c[k] = i[k](t);
    return c;
  };
};

var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
var reB = new RegExp(reA.source, "g");

function zero(b) {
  return function() {
    return b;
  };
}

function one(b) {
  return function(t) {
    return b(t) + "";
  };
}

var interpolateString = function(a, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
      am, // current match in a
      bm, // current match in b
      bs, // string preceding current number in b, if any
      i = -1, // index in s
      s = [], // string constants and placeholders
      q = []; // number interpolators

  // Coerce inputs to strings.
  a = a + "", b = b + "";

  // Interpolate pairs of numbers in a & b.
  while ((am = reA.exec(a))
      && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) { // a string precedes the next number in b
      bs = b.slice(bi, bs);
      if (s[i]) s[i] += bs; // coalesce with previous string
      else s[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
      if (s[i]) s[i] += bm; // coalesce with previous string
      else s[++i] = bm;
    } else { // interpolate non-matching numbers
      s[++i] = null;
      q.push({i: i, x: reinterpolate(am, bm)});
    }
    bi = reB.lastIndex;
  }

  // Add remains of b.
  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i]) s[i] += bs; // coalesce with previous string
    else s[++i] = bs;
  }

  // Special optimization for only a single match.
  // Otherwise, interpolate each of the numbers and rejoin the string.
  return s.length < 2 ? (q[0]
      ? one(q[0].x)
      : zero(b))
      : (b = q.length, function(t) {
          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
          return s.join("");
        });
};

var interpolateValue = function(a, b) {
  var t = typeof b, c;
  return b == null || t === "boolean" ? constant$3(b)
      : (t === "number" ? reinterpolate
      : t === "string" ? ((c = color(b)) ? (b = c, interpolateRgb) : interpolateString)
      : b instanceof color ? interpolateRgb
      : b instanceof Date ? date
      : Array.isArray(b) ? array$1
      : isNaN(b) ? object
      : reinterpolate)(a, b);
};

var interpolateRound = function(a, b) {
  return a = +a, b -= a, function(t) {
    return Math.round(a + b * t);
  };
};

var degrees = 180 / Math.PI;

var identity$2 = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};

var decompose = function(a, b, c, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a) * degrees,
    skewX: Math.atan(skewX) * degrees,
    scaleX: scaleX,
    scaleY: scaleY
  };
};

var cssNode;
var cssRoot;
var cssView;
var svgNode;

function parseCss(value) {
  if (value === "none") return identity$2;
  if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
  cssNode.style.transform = value;
  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
  cssRoot.removeChild(cssNode);
  value = value.slice(7, -1).split(",");
  return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
}

function parseSvg(value) {
  if (value == null) return identity$2;
  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate())) return identity$2;
  value = value.matrix;
  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
}

function interpolateTransform(parse, pxComma, pxParen, degParen) {

  function pop(s) {
    return s.length ? s.pop() + " " : "";
  }

  function translate(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push("translate(", null, pxComma, null, pxParen);
      q.push({i: i - 4, x: reinterpolate(xa, xb)}, {i: i - 2, x: reinterpolate(ya, yb)});
    } else if (xb || yb) {
      s.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }

  function rotate(a, b, s, q) {
    if (a !== b) {
      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path
      q.push({i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: reinterpolate(a, b)});
    } else if (b) {
      s.push(pop(s) + "rotate(" + b + degParen);
    }
  }

  function skewX(a, b, s, q) {
    if (a !== b) {
      q.push({i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: reinterpolate(a, b)});
    } else if (b) {
      s.push(pop(s) + "skewX(" + b + degParen);
    }
  }

  function scale(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
      q.push({i: i - 4, x: reinterpolate(xa, xb)}, {i: i - 2, x: reinterpolate(ya, yb)});
    } else if (xb !== 1 || yb !== 1) {
      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
  }

  return function(a, b) {
    var s = [], // string constants and placeholders
        q = []; // number interpolators
    a = parse(a), b = parse(b);
    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
    rotate(a.rotate, b.rotate, s, q);
    skewX(a.skewX, b.skewX, s, q);
    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
    a = b = null; // gc
    return function(t) {
      var i = -1, n = q.length, o;
      while (++i < n) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  };
}

var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

var rho = Math.SQRT2;
var rho2 = 2;
var rho4 = 4;
var epsilon2 = 1e-12;

function cosh(x) {
  return ((x = Math.exp(x)) + 1 / x) / 2;
}

function sinh(x) {
  return ((x = Math.exp(x)) - 1 / x) / 2;
}

function tanh(x) {
  return ((x = Math.exp(2 * x)) - 1) / (x + 1);
}

// p0 = [ux0, uy0, w0]
// p1 = [ux1, uy1, w1]
var interpolateZoom = function(p0, p1) {
  var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],
      ux1 = p1[0], uy1 = p1[1], w1 = p1[2],
      dx = ux1 - ux0,
      dy = uy1 - uy0,
      d2 = dx * dx + dy * dy,
      i,
      S;

  // Special case for u0 ≅ u1.
  if (d2 < epsilon2) {
    S = Math.log(w1 / w0) / rho;
    i = function(t) {
      return [
        ux0 + t * dx,
        uy0 + t * dy,
        w0 * Math.exp(rho * t * S)
      ];
    };
  }

  // General case.
  else {
    var d1 = Math.sqrt(d2),
        b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
        b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
        r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
        r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
    S = (r1 - r0) / rho;
    i = function(t) {
      var s = t * S,
          coshr0 = cosh(r0),
          u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
      return [
        ux0 + u * dx,
        uy0 + u * dy,
        w0 * coshr0 / cosh(rho * s + r0)
      ];
    };
  }

  i.duration = S * 1000;

  return i;
};

function hsl$1(hue$$1) {
  return function(start, end) {
    var h = hue$$1((start = hsl(start)).h, (end = hsl(end)).h),
        s = nogamma(start.s, end.s),
        l = nogamma(start.l, end.l),
        opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.h = h(t);
      start.s = s(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }
}

var hsl$2 = hsl$1(hue);
var hslLong = hsl$1(nogamma);

function lab$1(start, end) {
  var l = nogamma((start = lab(start)).l, (end = lab(end)).l),
      a = nogamma(start.a, end.a),
      b = nogamma(start.b, end.b),
      opacity = nogamma(start.opacity, end.opacity);
  return function(t) {
    start.l = l(t);
    start.a = a(t);
    start.b = b(t);
    start.opacity = opacity(t);
    return start + "";
  };
}

function hcl$1(hue$$1) {
  return function(start, end) {
    var h = hue$$1((start = hcl(start)).h, (end = hcl(end)).h),
        c = nogamma(start.c, end.c),
        l = nogamma(start.l, end.l),
        opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.h = h(t);
      start.c = c(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }
}

var hcl$2 = hcl$1(hue);
var hclLong = hcl$1(nogamma);

function cubehelix$1(hue$$1) {
  return (function cubehelixGamma(y) {
    y = +y;

    function cubehelix$$1(start, end) {
      var h = hue$$1((start = cubehelix(start)).h, (end = cubehelix(end)).h),
          s = nogamma(start.s, end.s),
          l = nogamma(start.l, end.l),
          opacity = nogamma(start.opacity, end.opacity);
      return function(t) {
        start.h = h(t);
        start.s = s(t);
        start.l = l(Math.pow(t, y));
        start.opacity = opacity(t);
        return start + "";
      };
    }

    cubehelix$$1.gamma = cubehelixGamma;

    return cubehelix$$1;
  })(1);
}

var cubehelix$2 = cubehelix$1(hue);
var cubehelixLong = cubehelix$1(nogamma);

var quantize = function(interpolator, n) {
  var samples = new Array(n);
  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));
  return samples;
};

var frame = 0;
var timeout = 0;
var interval = 0;
var pokeDelay = 1000;
var taskHead;
var taskTail;
var clockLast = 0;
var clockNow = 0;
var clockSkew = 0;
var clock = typeof performance === "object" && performance.now ? performance : Date;
var setFrame = typeof requestAnimationFrame === "function" ? requestAnimationFrame : function(f) { setTimeout(f, 17); };

function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}

function clearNow() {
  clockNow = 0;
}

function Timer() {
  this._call =
  this._time =
  this._next = null;
}

Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function(callback, delay, time) {
    if (typeof callback !== "function") throw new TypeError("callback is not a function");
    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
    if (!this._next && taskTail !== this) {
      if (taskTail) taskTail._next = this;
      else taskHead = this;
      taskTail = this;
    }
    this._call = callback;
    this._time = time;
    sleep();
  },
  stop: function() {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};

function timer(callback, delay, time) {
  var t = new Timer;
  t.restart(callback, delay, time);
  return t;
}

function timerFlush() {
  now(); // Get the current time, if not already set.
  ++frame; // Pretend we’ve set an alarm, if we haven’t already.
  var t = taskHead, e;
  while (t) {
    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
    t = t._next;
  }
  --frame;
}

function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout = 0;
  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}

function poke() {
  var now = clock.now(), delay = now - clockLast;
  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
}

function nap() {
  var t0, t1 = taskHead, t2, time = Infinity;
  while (t1) {
    if (t1._call) {
      if (time > t1._time) time = t1._time;
      t0 = t1, t1 = t1._next;
    } else {
      t2 = t1._next, t1._next = null;
      t1 = t0 ? t0._next = t2 : taskHead = t2;
    }
  }
  taskTail = t0;
  sleep(time);
}

function sleep(time) {
  if (frame) return; // Soonest alarm already set, or will be.
  if (timeout) timeout = clearTimeout(timeout);
  var delay = time - clockNow;
  if (delay > 24) {
    if (time < Infinity) timeout = setTimeout(wake, delay);
    if (interval) interval = clearInterval(interval);
  } else {
    if (!interval) clockLast = clockNow, interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}

var timeout$1 = function(callback, delay, time) {
  var t = new Timer;
  delay = delay == null ? 0 : +delay;
  t.restart(function(elapsed) {
    t.stop();
    callback(elapsed + delay);
  }, delay, time);
  return t;
};

var interval$1 = function(callback, delay, time) {
  var t = new Timer, total = delay;
  if (delay == null) return t.restart(callback, delay, time), t;
  delay = +delay, time = time == null ? now() : +time;
  t.restart(function tick(elapsed) {
    elapsed += total;
    t.restart(tick, total += delay, time);
    callback(elapsed);
  }, delay, time);
  return t;
};

var emptyOn = dispatch("start", "end", "interrupt");
var emptyTween = [];

var CREATED = 0;
var SCHEDULED = 1;
var STARTING = 2;
var STARTED = 3;
var RUNNING = 4;
var ENDING = 5;
var ENDED = 6;

var schedule = function(node, name, id, index, group, timing) {
  var schedules = node.__transition;
  if (!schedules) node.__transition = {};
  else if (id in schedules) return;
  create(node, id, {
    name: name,
    index: index, // For context during callback.
    group: group, // For context during callback.
    on: emptyOn,
    tween: emptyTween,
    time: timing.time,
    delay: timing.delay,
    duration: timing.duration,
    ease: timing.ease,
    timer: null,
    state: CREATED
  });
};

function init(node, id) {
  var schedule = node.__transition;
  if (!schedule || !(schedule = schedule[id]) || schedule.state > CREATED) throw new Error("too late");
  return schedule;
}

function set$1(node, id) {
  var schedule = node.__transition;
  if (!schedule || !(schedule = schedule[id]) || schedule.state > STARTING) throw new Error("too late");
  return schedule;
}

function get$1(node, id) {
  var schedule = node.__transition;
  if (!schedule || !(schedule = schedule[id])) throw new Error("too late");
  return schedule;
}

function create(node, id, self) {
  var schedules = node.__transition,
      tween;

  // Initialize the self timer when the transition is created.
  // Note the actual delay is not known until the first callback!
  schedules[id] = self;
  self.timer = timer(schedule, 0, self.time);

  function schedule(elapsed) {
    self.state = SCHEDULED;
    self.timer.restart(start, self.delay, self.time);

    // If the elapsed delay is less than our first sleep, start immediately.
    if (self.delay <= elapsed) start(elapsed - self.delay);
  }

  function start(elapsed) {
    var i, j, n, o;

    // If the state is not SCHEDULED, then we previously errored on start.
    if (self.state !== SCHEDULED) return stop();

    for (i in schedules) {
      o = schedules[i];
      if (o.name !== self.name) continue;

      // While this element already has a starting transition during this frame,
      // defer starting an interrupting transition until that transition has a
      // chance to tick (and possibly end); see d3/d3-transition#54!
      if (o.state === STARTED) return timeout$1(start);

      // Interrupt the active transition, if any.
      // Dispatch the interrupt event.
      if (o.state === RUNNING) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("interrupt", node, node.__data__, o.index, o.group);
        delete schedules[i];
      }

      // Cancel any pre-empted transitions. No interrupt event is dispatched
      // because the cancelled transitions never started. Note that this also
      // removes this transition from the pending list!
      else if (+i < id) {
        o.state = ENDED;
        o.timer.stop();
        delete schedules[i];
      }
    }

    // Defer the first tick to end of the current frame; see d3/d3#1576.
    // Note the transition may be canceled after start and before the first tick!
    // Note this must be scheduled before the start event; see d3/d3-transition#16!
    // Assuming this is successful, subsequent callbacks go straight to tick.
    timeout$1(function() {
      if (self.state === STARTED) {
        self.state = RUNNING;
        self.timer.restart(tick, self.delay, self.time);
        tick(elapsed);
      }
    });

    // Dispatch the start event.
    // Note this must be done before the tween are initialized.
    self.state = STARTING;
    self.on.call("start", node, node.__data__, self.index, self.group);
    if (self.state !== STARTING) return; // interrupted
    self.state = STARTED;

    // Initialize the tween, deleting null tween.
    tween = new Array(n = self.tween.length);
    for (i = 0, j = -1; i < n; ++i) {
      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
        tween[++j] = o;
      }
    }
    tween.length = j + 1;
  }

  function tick(elapsed) {
    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
        i = -1,
        n = tween.length;

    while (++i < n) {
      tween[i].call(null, t);
    }

    // Dispatch the end event.
    if (self.state === ENDING) {
      self.on.call("end", node, node.__data__, self.index, self.group);
      stop();
    }
  }

  function stop() {
    self.state = ENDED;
    self.timer.stop();
    delete schedules[id];
    for (var i in schedules) return; // eslint-disable-line no-unused-vars
    delete node.__transition;
  }
}

var interrupt = function(node, name) {
  var schedules = node.__transition,
      schedule,
      active,
      empty = true,
      i;

  if (!schedules) return;

  name = name == null ? null : name + "";

  for (i in schedules) {
    if ((schedule = schedules[i]).name !== name) { empty = false; continue; }
    active = schedule.state > STARTING && schedule.state < ENDING;
    schedule.state = ENDED;
    schedule.timer.stop();
    if (active) schedule.on.call("interrupt", node, node.__data__, schedule.index, schedule.group);
    delete schedules[i];
  }

  if (empty) delete node.__transition;
};

var selection_interrupt = function(name) {
  return this.each(function() {
    interrupt(this, name);
  });
};

function tweenRemove(id, name) {
  var tween0, tween1;
  return function() {
    var schedule = set$1(this, id),
        tween = schedule.tween;

    // If this node shared tween with the previous node,
    // just assign the updated shared tween and we’re done!
    // Otherwise, copy-on-write.
    if (tween !== tween0) {
      tween1 = tween0 = tween;
      for (var i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1 = tween1.slice();
          tween1.splice(i, 1);
          break;
        }
      }
    }

    schedule.tween = tween1;
  };
}

function tweenFunction(id, name, value) {
  var tween0, tween1;
  if (typeof value !== "function") throw new Error;
  return function() {
    var schedule = set$1(this, id),
        tween = schedule.tween;

    // If this node shared tween with the previous node,
    // just assign the updated shared tween and we’re done!
    // Otherwise, copy-on-write.
    if (tween !== tween0) {
      tween1 = (tween0 = tween).slice();
      for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1[i] = t;
          break;
        }
      }
      if (i === n) tween1.push(t);
    }

    schedule.tween = tween1;
  };
}

var transition_tween = function(name, value) {
  var id = this._id;

  name += "";

  if (arguments.length < 2) {
    var tween = get$1(this.node(), id).tween;
    for (var i = 0, n = tween.length, t; i < n; ++i) {
      if ((t = tween[i]).name === name) {
        return t.value;
      }
    }
    return null;
  }

  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
};

function tweenValue(transition, name, value) {
  var id = transition._id;

  transition.each(function() {
    var schedule = set$1(this, id);
    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
  });

  return function(node) {
    return get$1(node, id).value[name];
  };
}

var interpolate$$1 = function(a, b) {
  var c;
  return (typeof b === "number" ? reinterpolate
      : b instanceof color ? interpolateRgb
      : (c = color(b)) ? (b = c, interpolateRgb)
      : interpolateString)(a, b);
};

function attrRemove$1(name) {
  return function() {
    this.removeAttribute(name);
  };
}

function attrRemoveNS$1(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant$1(name, interpolate$$1, value1) {
  var value00,
      interpolate0;
  return function() {
    var value0 = this.getAttribute(name);
    return value0 === value1 ? null
        : value0 === value00 ? interpolate0
        : interpolate0 = interpolate$$1(value00 = value0, value1);
  };
}

function attrConstantNS$1(fullname, interpolate$$1, value1) {
  var value00,
      interpolate0;
  return function() {
    var value0 = this.getAttributeNS(fullname.space, fullname.local);
    return value0 === value1 ? null
        : value0 === value00 ? interpolate0
        : interpolate0 = interpolate$$1(value00 = value0, value1);
  };
}

function attrFunction$1(name, interpolate$$1, value) {
  var value00,
      value10,
      interpolate0;
  return function() {
    var value0, value1 = value(this);
    if (value1 == null) return void this.removeAttribute(name);
    value0 = this.getAttribute(name);
    return value0 === value1 ? null
        : value0 === value00 && value1 === value10 ? interpolate0
        : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);
  };
}

function attrFunctionNS$1(fullname, interpolate$$1, value) {
  var value00,
      value10,
      interpolate0;
  return function() {
    var value0, value1 = value(this);
    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
    value0 = this.getAttributeNS(fullname.space, fullname.local);
    return value0 === value1 ? null
        : value0 === value00 && value1 === value10 ? interpolate0
        : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);
  };
}

var transition_attr = function(name, value) {
  var fullname = namespace(name), i = fullname === "transform" ? interpolateTransformSvg : interpolate$$1;
  return this.attrTween(name, typeof value === "function"
      ? (fullname.local ? attrFunctionNS$1 : attrFunction$1)(fullname, i, tweenValue(this, "attr." + name, value))
      : value == null ? (fullname.local ? attrRemoveNS$1 : attrRemove$1)(fullname)
      : (fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, i, value));
};

function attrTweenNS(fullname, value) {
  function tween() {
    var node = this, i = value.apply(node, arguments);
    return i && function(t) {
      node.setAttributeNS(fullname.space, fullname.local, i(t));
    };
  }
  tween._value = value;
  return tween;
}

function attrTween(name, value) {
  function tween() {
    var node = this, i = value.apply(node, arguments);
    return i && function(t) {
      node.setAttribute(name, i(t));
    };
  }
  tween._value = value;
  return tween;
}

var transition_attrTween = function(name, value) {
  var key = "attr." + name;
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error;
  var fullname = namespace(name);
  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
};

function delayFunction(id, value) {
  return function() {
    init(this, id).delay = +value.apply(this, arguments);
  };
}

function delayConstant(id, value) {
  return value = +value, function() {
    init(this, id).delay = value;
  };
}

var transition_delay = function(value) {
  var id = this._id;

  return arguments.length
      ? this.each((typeof value === "function"
          ? delayFunction
          : delayConstant)(id, value))
      : get$1(this.node(), id).delay;
};

function durationFunction(id, value) {
  return function() {
    set$1(this, id).duration = +value.apply(this, arguments);
  };
}

function durationConstant(id, value) {
  return value = +value, function() {
    set$1(this, id).duration = value;
  };
}

var transition_duration = function(value) {
  var id = this._id;

  return arguments.length
      ? this.each((typeof value === "function"
          ? durationFunction
          : durationConstant)(id, value))
      : get$1(this.node(), id).duration;
};

function easeConstant(id, value) {
  if (typeof value !== "function") throw new Error;
  return function() {
    set$1(this, id).ease = value;
  };
}

var transition_ease = function(value) {
  var id = this._id;

  return arguments.length
      ? this.each(easeConstant(id, value))
      : get$1(this.node(), id).ease;
};

var transition_filter = function(match) {
  if (typeof match !== "function") match = matcher$1(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new Transition(subgroups, this._parents, this._name, this._id);
};

var transition_merge = function(transition) {
  if (transition._id !== this._id) throw new Error;

  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new Transition(merges, this._parents, this._name, this._id);
};

function start(name) {
  return (name + "").trim().split(/^|\s+/).every(function(t) {
    var i = t.indexOf(".");
    if (i >= 0) t = t.slice(0, i);
    return !t || t === "start";
  });
}

function onFunction(id, name, listener) {
  var on0, on1, sit = start(name) ? init : set$1;
  return function() {
    var schedule = sit(this, id),
        on = schedule.on;

    // If this node shared a dispatch with the previous node,
    // just assign the updated shared dispatch and we’re done!
    // Otherwise, copy-on-write.
    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);

    schedule.on = on1;
  };
}

var transition_on = function(name, listener) {
  var id = this._id;

  return arguments.length < 2
      ? get$1(this.node(), id).on.on(name)
      : this.each(onFunction(id, name, listener));
};

function removeFunction(id) {
  return function() {
    var parent = this.parentNode;
    for (var i in this.__transition) if (+i !== id) return;
    if (parent) parent.removeChild(this);
  };
}

var transition_remove = function() {
  return this.on("end.remove", removeFunction(this._id));
};

var transition_select = function(select$$1) {
  var name = this._name,
      id = this._id;

  if (typeof select$$1 !== "function") select$$1 = selector(select$$1);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select$$1.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
        schedule(subgroup[i], name, id, i, subgroup, get$1(node, id));
      }
    }
  }

  return new Transition(subgroups, this._parents, name, id);
};

var transition_selectAll = function(select$$1) {
  var name = this._name,
      id = this._id;

  if (typeof select$$1 !== "function") select$$1 = selectorAll(select$$1);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        for (var children = select$$1.call(node, node.__data__, i, group), child, inherit = get$1(node, id), k = 0, l = children.length; k < l; ++k) {
          if (child = children[k]) {
            schedule(child, name, id, k, children, inherit);
          }
        }
        subgroups.push(children);
        parents.push(node);
      }
    }
  }

  return new Transition(subgroups, parents, name, id);
};

var Selection$1 = selection.prototype.constructor;

var transition_selection = function() {
  return new Selection$1(this._groups, this._parents);
};

function styleRemove$1(name, interpolate$$2) {
  var value00,
      value10,
      interpolate0;
  return function() {
    var style = window(this).getComputedStyle(this, null),
        value0 = style.getPropertyValue(name),
        value1 = (this.style.removeProperty(name), style.getPropertyValue(name));
    return value0 === value1 ? null
        : value0 === value00 && value1 === value10 ? interpolate0
        : interpolate0 = interpolate$$2(value00 = value0, value10 = value1);
  };
}

function styleRemoveEnd(name) {
  return function() {
    this.style.removeProperty(name);
  };
}

function styleConstant$1(name, interpolate$$2, value1) {
  var value00,
      interpolate0;
  return function() {
    var value0 = window(this).getComputedStyle(this, null).getPropertyValue(name);
    return value0 === value1 ? null
        : value0 === value00 ? interpolate0
        : interpolate0 = interpolate$$2(value00 = value0, value1);
  };
}

function styleFunction$1(name, interpolate$$2, value) {
  var value00,
      value10,
      interpolate0;
  return function() {
    var style = window(this).getComputedStyle(this, null),
        value0 = style.getPropertyValue(name),
        value1 = value(this);
    if (value1 == null) value1 = (this.style.removeProperty(name), style.getPropertyValue(name));
    return value0 === value1 ? null
        : value0 === value00 && value1 === value10 ? interpolate0
        : interpolate0 = interpolate$$2(value00 = value0, value10 = value1);
  };
}

var transition_style = function(name, value, priority) {
  var i = (name += "") === "transform" ? interpolateTransformCss : interpolate$$1;
  return value == null ? this
          .styleTween(name, styleRemove$1(name, i))
          .on("end.style." + name, styleRemoveEnd(name))
      : this.styleTween(name, typeof value === "function"
          ? styleFunction$1(name, i, tweenValue(this, "style." + name, value))
          : styleConstant$1(name, i, value), priority);
};

function styleTween(name, value, priority) {
  function tween() {
    var node = this, i = value.apply(node, arguments);
    return i && function(t) {
      node.style.setProperty(name, i(t), priority);
    };
  }
  tween._value = value;
  return tween;
}

var transition_styleTween = function(name, value, priority) {
  var key = "style." + (name += "");
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error;
  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
};

function textConstant$1(value) {
  return function() {
    this.textContent = value;
  };
}

function textFunction$1(value) {
  return function() {
    var value1 = value(this);
    this.textContent = value1 == null ? "" : value1;
  };
}

var transition_text = function(value) {
  return this.tween("text", typeof value === "function"
      ? textFunction$1(tweenValue(this, "text", value))
      : textConstant$1(value == null ? "" : value + ""));
};

var transition_transition = function() {
  var name = this._name,
      id0 = this._id,
      id1 = newId();

  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        var inherit = get$1(node, id0);
        schedule(node, name, id1, i, group, {
          time: inherit.time + inherit.delay + inherit.duration,
          delay: 0,
          duration: inherit.duration,
          ease: inherit.ease
        });
      }
    }
  }

  return new Transition(groups, this._parents, name, id1);
};

var id = 0;

function Transition(groups, parents, name, id) {
  this._groups = groups;
  this._parents = parents;
  this._name = name;
  this._id = id;
}

function transition(name) {
  return selection().transition(name);
}

function newId() {
  return ++id;
}

var selection_prototype = selection.prototype;

Transition.prototype = transition.prototype = {
  constructor: Transition,
  select: transition_select,
  selectAll: transition_selectAll,
  filter: transition_filter,
  merge: transition_merge,
  selection: transition_selection,
  transition: transition_transition,
  call: selection_prototype.call,
  nodes: selection_prototype.nodes,
  node: selection_prototype.node,
  size: selection_prototype.size,
  empty: selection_prototype.empty,
  each: selection_prototype.each,
  on: transition_on,
  attr: transition_attr,
  attrTween: transition_attrTween,
  style: transition_style,
  styleTween: transition_styleTween,
  text: transition_text,
  remove: transition_remove,
  tween: transition_tween,
  delay: transition_delay,
  duration: transition_duration,
  ease: transition_ease
};

function linear$1(t) {
  return +t;
}

function quadIn(t) {
  return t * t;
}

function quadOut(t) {
  return t * (2 - t);
}

function quadInOut(t) {
  return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
}

function cubicIn(t) {
  return t * t * t;
}

function cubicOut(t) {
  return --t * t * t + 1;
}

function cubicInOut(t) {
  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
}

var exponent = 3;

var polyIn = (function custom(e) {
  e = +e;

  function polyIn(t) {
    return Math.pow(t, e);
  }

  polyIn.exponent = custom;

  return polyIn;
})(exponent);

var polyOut = (function custom(e) {
  e = +e;

  function polyOut(t) {
    return 1 - Math.pow(1 - t, e);
  }

  polyOut.exponent = custom;

  return polyOut;
})(exponent);

var polyInOut = (function custom(e) {
  e = +e;

  function polyInOut(t) {
    return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
  }

  polyInOut.exponent = custom;

  return polyInOut;
})(exponent);

var pi = Math.PI;
var halfPi = pi / 2;

function sinIn(t) {
  return 1 - Math.cos(t * halfPi);
}

function sinOut(t) {
  return Math.sin(t * halfPi);
}

function sinInOut(t) {
  return (1 - Math.cos(pi * t)) / 2;
}

function expIn(t) {
  return Math.pow(2, 10 * t - 10);
}

function expOut(t) {
  return 1 - Math.pow(2, -10 * t);
}

function expInOut(t) {
  return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;
}

function circleIn(t) {
  return 1 - Math.sqrt(1 - t * t);
}

function circleOut(t) {
  return Math.sqrt(1 - --t * t);
}

function circleInOut(t) {
  return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
}

var b1 = 4 / 11;
var b2 = 6 / 11;
var b3 = 8 / 11;
var b4 = 3 / 4;
var b5 = 9 / 11;
var b6 = 10 / 11;
var b7 = 15 / 16;
var b8 = 21 / 22;
var b9 = 63 / 64;
var b0 = 1 / b1 / b1;

function bounceIn(t) {
  return 1 - bounceOut(1 - t);
}

function bounceOut(t) {
  return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
}

function bounceInOut(t) {
  return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
}

var overshoot = 1.70158;

var backIn = (function custom(s) {
  s = +s;

  function backIn(t) {
    return t * t * ((s + 1) * t - s);
  }

  backIn.overshoot = custom;

  return backIn;
})(overshoot);

var backOut = (function custom(s) {
  s = +s;

  function backOut(t) {
    return --t * t * ((s + 1) * t + s) + 1;
  }

  backOut.overshoot = custom;

  return backOut;
})(overshoot);

var backInOut = (function custom(s) {
  s = +s;

  function backInOut(t) {
    return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
  }

  backInOut.overshoot = custom;

  return backInOut;
})(overshoot);

var tau = 2 * Math.PI;
var amplitude = 1;
var period = 0.3;

var elasticIn = (function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticIn(t) {
    return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);
  }

  elasticIn.amplitude = function(a) { return custom(a, p * tau); };
  elasticIn.period = function(p) { return custom(a, p); };

  return elasticIn;
})(amplitude, period);

var elasticOut = (function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticOut(t) {
    return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);
  }

  elasticOut.amplitude = function(a) { return custom(a, p * tau); };
  elasticOut.period = function(p) { return custom(a, p); };

  return elasticOut;
})(amplitude, period);

var elasticInOut = (function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticInOut(t) {
    return ((t = t * 2 - 1) < 0
        ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p)
        : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;
  }

  elasticInOut.amplitude = function(a) { return custom(a, p * tau); };
  elasticInOut.period = function(p) { return custom(a, p); };

  return elasticInOut;
})(amplitude, period);

var defaultTiming = {
  time: null, // Set on use.
  delay: 0,
  duration: 250,
  ease: cubicInOut
};

function inherit(node, id) {
  var timing;
  while (!(timing = node.__transition) || !(timing = timing[id])) {
    if (!(node = node.parentNode)) {
      return defaultTiming.time = now(), defaultTiming;
    }
  }
  return timing;
}

var selection_transition = function(name) {
  var id,
      timing;

  if (name instanceof Transition) {
    id = name._id, name = name._name;
  } else {
    id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
  }

  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        schedule(node, name, id, i, group, timing || inherit(node, id));
      }
    }
  }

  return new Transition(groups, this._parents, name, id);
};

selection.prototype.interrupt = selection_interrupt;
selection.prototype.transition = selection_transition;

var root$1 = [null];

var active = function(node, name) {
  var schedules = node.__transition,
      schedule,
      i;

  if (schedules) {
    name = name == null ? null : name + "";
    for (i in schedules) {
      if ((schedule = schedules[i]).state > SCHEDULED && schedule.name === name) {
        return new Transition([[node]], root$1, name, +i);
      }
    }
  }

  return null;
};

var constant$4 = function(x) {
  return function() {
    return x;
  };
};

var BrushEvent = function(target, type, selection) {
  this.target = target;
  this.type = type;
  this.selection = selection;
};

function nopropagation$1() {
  exports.event.stopImmediatePropagation();
}

var noevent$1 = function() {
  exports.event.preventDefault();
  exports.event.stopImmediatePropagation();
};

var MODE_DRAG = {name: "drag"};
var MODE_SPACE = {name: "space"};
var MODE_HANDLE = {name: "handle"};
var MODE_CENTER = {name: "center"};

var X = {
  name: "x",
  handles: ["e", "w"].map(type),
  input: function(x, e) { return x && [[x[0], e[0][1]], [x[1], e[1][1]]]; },
  output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }
};

var Y = {
  name: "y",
  handles: ["n", "s"].map(type),
  input: function(y, e) { return y && [[e[0][0], y[0]], [e[1][0], y[1]]]; },
  output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }
};

var XY = {
  name: "xy",
  handles: ["n", "e", "s", "w", "nw", "ne", "se", "sw"].map(type),
  input: function(xy) { return xy; },
  output: function(xy) { return xy; }
};

var cursors = {
  overlay: "crosshair",
  selection: "move",
  n: "ns-resize",
  e: "ew-resize",
  s: "ns-resize",
  w: "ew-resize",
  nw: "nwse-resize",
  ne: "nesw-resize",
  se: "nwse-resize",
  sw: "nesw-resize"
};

var flipX = {
  e: "w",
  w: "e",
  nw: "ne",
  ne: "nw",
  se: "sw",
  sw: "se"
};

var flipY = {
  n: "s",
  s: "n",
  nw: "sw",
  ne: "se",
  se: "ne",
  sw: "nw"
};

var signsX = {
  overlay: +1,
  selection: +1,
  n: null,
  e: +1,
  s: null,
  w: -1,
  nw: -1,
  ne: +1,
  se: +1,
  sw: -1
};

var signsY = {
  overlay: +1,
  selection: +1,
  n: -1,
  e: null,
  s: +1,
  w: null,
  nw: -1,
  ne: -1,
  se: +1,
  sw: +1
};

function type(t) {
  return {type: t};
}

// Ignore right-click, since that should open the context menu.
function defaultFilter() {
  return !exports.event.button;
}

function defaultExtent() {
  var svg = this.ownerSVGElement || this;
  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];
}

// Like d3.local, but with the name “__brush” rather than auto-generated.
function local$$1(node) {
  while (!node.__brush) if (!(node = node.parentNode)) return;
  return node.__brush;
}

function empty(extent) {
  return extent[0][0] === extent[1][0]
      || extent[0][1] === extent[1][1];
}

function brushSelection(node) {
  var state = node.__brush;
  return state ? state.dim.output(state.selection) : null;
}

function brushX() {
  return brush$1(X);
}

function brushY() {
  return brush$1(Y);
}

var brush = function() {
  return brush$1(XY);
};

function brush$1(dim) {
  var extent = defaultExtent,
      filter = defaultFilter,
      listeners = dispatch(brush, "start", "brush", "end"),
      handleSize = 6,
      touchending;

  function brush(group) {
    var overlay = group
        .property("__brush", initialize)
      .selectAll(".overlay")
      .data([type("overlay")]);

    overlay.enter().append("rect")
        .attr("class", "overlay")
        .attr("pointer-events", "all")
        .attr("cursor", cursors.overlay)
      .merge(overlay)
        .each(function() {
          var extent = local$$1(this).extent;
          select(this)
              .attr("x", extent[0][0])
              .attr("y", extent[0][1])
              .attr("width", extent[1][0] - extent[0][0])
              .attr("height", extent[1][1] - extent[0][1]);
        });

    group.selectAll(".selection")
      .data([type("selection")])
      .enter().append("rect")
        .attr("class", "selection")
        .attr("cursor", cursors.selection)
        .attr("fill", "#777")
        .attr("fill-opacity", 0.3)
        .attr("stroke", "#fff")
        .attr("shape-rendering", "crispEdges");

    var handle = group.selectAll(".handle")
      .data(dim.handles, function(d) { return d.type; });

    handle.exit().remove();

    handle.enter().append("rect")
        .attr("class", function(d) { return "handle handle--" + d.type; })
        .attr("cursor", function(d) { return cursors[d.type]; });

    group
        .each(redraw)
        .attr("fill", "none")
        .attr("pointer-events", "all")
        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)")
        .on("mousedown.brush touchstart.brush", started);
  }

  brush.move = function(group, selection$$1) {
    if (group.selection) {
      group
          .on("start.brush", function() { emitter(this, arguments).beforestart().start(); })
          .on("interrupt.brush end.brush", function() { emitter(this, arguments).end(); })
          .tween("brush", function() {
            var that = this,
                state = that.__brush,
                emit = emitter(that, arguments),
                selection0 = state.selection,
                selection1 = dim.input(typeof selection$$1 === "function" ? selection$$1.apply(this, arguments) : selection$$1, state.extent),
                i = interpolateValue(selection0, selection1);

            function tween(t) {
              state.selection = t === 1 && empty(selection1) ? null : i(t);
              redraw.call(that);
              emit.brush();
            }

            return selection0 && selection1 ? tween : tween(1);
          });
    } else {
      group
          .each(function() {
            var that = this,
                args = arguments,
                state = that.__brush,
                selection1 = dim.input(typeof selection$$1 === "function" ? selection$$1.apply(that, args) : selection$$1, state.extent),
                emit = emitter(that, args).beforestart();

            interrupt(that);
            state.selection = selection1 == null || empty(selection1) ? null : selection1;
            redraw.call(that);
            emit.start().brush().end();
          });
    }
  };

  function redraw() {
    var group = select(this),
        selection$$1 = local$$1(this).selection;

    if (selection$$1) {
      group.selectAll(".selection")
          .style("display", null)
          .attr("x", selection$$1[0][0])
          .attr("y", selection$$1[0][1])
          .attr("width", selection$$1[1][0] - selection$$1[0][0])
          .attr("height", selection$$1[1][1] - selection$$1[0][1]);

      group.selectAll(".handle")
          .style("display", null)
          .attr("x", function(d) { return d.type[d.type.length - 1] === "e" ? selection$$1[1][0] - handleSize / 2 : selection$$1[0][0] - handleSize / 2; })
          .attr("y", function(d) { return d.type[0] === "s" ? selection$$1[1][1] - handleSize / 2 : selection$$1[0][1] - handleSize / 2; })
          .attr("width", function(d) { return d.type === "n" || d.type === "s" ? selection$$1[1][0] - selection$$1[0][0] + handleSize : handleSize; })
          .attr("height", function(d) { return d.type === "e" || d.type === "w" ? selection$$1[1][1] - selection$$1[0][1] + handleSize : handleSize; });
    }

    else {
      group.selectAll(".selection,.handle")
          .style("display", "none")
          .attr("x", null)
          .attr("y", null)
          .attr("width", null)
          .attr("height", null);
    }
  }

  function emitter(that, args) {
    return that.__brush.emitter || new Emitter(that, args);
  }

  function Emitter(that, args) {
    this.that = that;
    this.args = args;
    this.state = that.__brush;
    this.active = 0;
  }

  Emitter.prototype = {
    beforestart: function() {
      if (++this.active === 1) this.state.emitter = this, this.starting = true;
      return this;
    },
    start: function() {
      if (this.starting) this.starting = false, this.emit("start");
      return this;
    },
    brush: function() {
      this.emit("brush");
      return this;
    },
    end: function() {
      if (--this.active === 0) delete this.state.emitter, this.emit("end");
      return this;
    },
    emit: function(type) {
      customEvent(new BrushEvent(brush, type, dim.output(this.state.selection)), listeners.apply, listeners, [type, this.that, this.args]);
    }
  };

  function started() {
    if (exports.event.touches) { if (exports.event.changedTouches.length < exports.event.touches.length) return noevent$1(); }
    else if (touchending) return;
    if (!filter.apply(this, arguments)) return;

    var that = this,
        type = exports.event.target.__data__.type,
        mode = (exports.event.metaKey ? type = "overlay" : type) === "selection" ? MODE_DRAG : (exports.event.altKey ? MODE_CENTER : MODE_HANDLE),
        signX = dim === Y ? null : signsX[type],
        signY = dim === X ? null : signsY[type],
        state = local$$1(that),
        extent = state.extent,
        selection$$1 = state.selection,
        W = extent[0][0], w0, w1,
        N = extent[0][1], n0, n1,
        E = extent[1][0], e0, e1,
        S = extent[1][1], s0, s1,
        dx,
        dy,
        moving,
        shifting = signX && signY && exports.event.shiftKey,
        lockX,
        lockY,
        point0 = mouse(that),
        point = point0,
        emit = emitter(that, arguments).beforestart();

    if (type === "overlay") {
      state.selection = selection$$1 = [
        [w0 = dim === Y ? W : point0[0], n0 = dim === X ? N : point0[1]],
        [e0 = dim === Y ? E : w0, s0 = dim === X ? S : n0]
      ];
    } else {
      w0 = selection$$1[0][0];
      n0 = selection$$1[0][1];
      e0 = selection$$1[1][0];
      s0 = selection$$1[1][1];
    }

    w1 = w0;
    n1 = n0;
    e1 = e0;
    s1 = s0;

    var group = select(that)
        .attr("pointer-events", "none");

    var overlay = group.selectAll(".overlay")
        .attr("cursor", cursors[type]);

    if (exports.event.touches) {
      group
          .on("touchmove.brush", moved, true)
          .on("touchend.brush touchcancel.brush", ended, true);
    } else {
      var view = select(exports.event.view)
          .on("keydown.brush", keydowned, true)
          .on("keyup.brush", keyupped, true)
          .on("mousemove.brush", moved, true)
          .on("mouseup.brush", ended, true);

      dragDisable(exports.event.view);
    }

    nopropagation$1();
    interrupt(that);
    redraw.call(that);
    emit.start();

    function moved() {
      var point1 = mouse(that);
      if (shifting && !lockX && !lockY) {
        if (Math.abs(point1[0] - point[0]) > Math.abs(point1[1] - point[1])) lockY = true;
        else lockX = true;
      }
      point = point1;
      moving = true;
      noevent$1();
      move();
    }

    function move() {
      var t;

      dx = point[0] - point0[0];
      dy = point[1] - point0[1];

      switch (mode) {
        case MODE_SPACE:
        case MODE_DRAG: {
          if (signX) dx = Math.max(W - w0, Math.min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;
          if (signY) dy = Math.max(N - n0, Math.min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;
          break;
        }
        case MODE_HANDLE: {
          if (signX < 0) dx = Math.max(W - w0, Math.min(E - w0, dx)), w1 = w0 + dx, e1 = e0;
          else if (signX > 0) dx = Math.max(W - e0, Math.min(E - e0, dx)), w1 = w0, e1 = e0 + dx;
          if (signY < 0) dy = Math.max(N - n0, Math.min(S - n0, dy)), n1 = n0 + dy, s1 = s0;
          else if (signY > 0) dy = Math.max(N - s0, Math.min(S - s0, dy)), n1 = n0, s1 = s0 + dy;
          break;
        }
        case MODE_CENTER: {
          if (signX) w1 = Math.max(W, Math.min(E, w0 - dx * signX)), e1 = Math.max(W, Math.min(E, e0 + dx * signX));
          if (signY) n1 = Math.max(N, Math.min(S, n0 - dy * signY)), s1 = Math.max(N, Math.min(S, s0 + dy * signY));
          break;
        }
      }

      if (e1 < w1) {
        signX *= -1;
        t = w0, w0 = e0, e0 = t;
        t = w1, w1 = e1, e1 = t;
        if (type in flipX) overlay.attr("cursor", cursors[type = flipX[type]]);
      }

      if (s1 < n1) {
        signY *= -1;
        t = n0, n0 = s0, s0 = t;
        t = n1, n1 = s1, s1 = t;
        if (type in flipY) overlay.attr("cursor", cursors[type = flipY[type]]);
      }

      if (state.selection) selection$$1 = state.selection; // May be set by brush.move!
      if (lockX) w1 = selection$$1[0][0], e1 = selection$$1[1][0];
      if (lockY) n1 = selection$$1[0][1], s1 = selection$$1[1][1];

      if (selection$$1[0][0] !== w1
          || selection$$1[0][1] !== n1
          || selection$$1[1][0] !== e1
          || selection$$1[1][1] !== s1) {
        state.selection = [[w1, n1], [e1, s1]];
        redraw.call(that);
        emit.brush();
      }
    }

    function ended() {
      nopropagation$1();
      if (exports.event.touches) {
        if (exports.event.touches.length) return;
        if (touchending) clearTimeout(touchending);
        touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!
        group.on("touchmove.brush touchend.brush touchcancel.brush", null);
      } else {
        yesdrag(exports.event.view, moving);
        view.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);
      }
      group.attr("pointer-events", "all");
      overlay.attr("cursor", cursors.overlay);
      if (state.selection) selection$$1 = state.selection; // May be set by brush.move (on start)!
      if (empty(selection$$1)) state.selection = null, redraw.call(that);
      emit.end();
    }

    function keydowned() {
      switch (exports.event.keyCode) {
        case 16: { // SHIFT
          shifting = signX && signY;
          break;
        }
        case 18: { // ALT
          if (mode === MODE_HANDLE) {
            if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
            if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
            mode = MODE_CENTER;
            move();
          }
          break;
        }
        case 32: { // SPACE; takes priority over ALT
          if (mode === MODE_HANDLE || mode === MODE_CENTER) {
            if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;
            if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;
            mode = MODE_SPACE;
            overlay.attr("cursor", cursors.selection);
            move();
          }
          break;
        }
        default: return;
      }
      noevent$1();
    }

    function keyupped() {
      switch (exports.event.keyCode) {
        case 16: { // SHIFT
          if (shifting) {
            lockX = lockY = shifting = false;
            move();
          }
          break;
        }
        case 18: { // ALT
          if (mode === MODE_CENTER) {
            if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;
            if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;
            mode = MODE_HANDLE;
            move();
          }
          break;
        }
        case 32: { // SPACE
          if (mode === MODE_SPACE) {
            if (exports.event.altKey) {
              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
              mode = MODE_CENTER;
            } else {
              if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;
              if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;
              mode = MODE_HANDLE;
            }
            overlay.attr("cursor", cursors[type]);
            move();
          }
          break;
        }
        default: return;
      }
      noevent$1();
    }
  }

  function initialize() {
    var state = this.__brush || {selection: null};
    state.extent = extent.apply(this, arguments);
    state.dim = dim;
    return state;
  }

  brush.extent = function(_) {
    return arguments.length ? (extent = typeof _ === "function" ? _ : constant$4([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), brush) : extent;
  };

  brush.filter = function(_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : constant$4(!!_), brush) : filter;
  };

  brush.handleSize = function(_) {
    return arguments.length ? (handleSize = +_, brush) : handleSize;
  };

  brush.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? brush : value;
  };

  return brush;
}

var cos = Math.cos;
var sin = Math.sin;
var pi$1 = Math.PI;
var halfPi$1 = pi$1 / 2;
var tau$1 = pi$1 * 2;
var max$1 = Math.max;

function compareValue(compare) {
  return function(a, b) {
    return compare(
      a.source.value + a.target.value,
      b.source.value + b.target.value
    );
  };
}

var chord = function() {
  var padAngle = 0,
      sortGroups = null,
      sortSubgroups = null,
      sortChords = null;

  function chord(matrix) {
    var n = matrix.length,
        groupSums = [],
        groupIndex = sequence(n),
        subgroupIndex = [],
        chords = [],
        groups = chords.groups = new Array(n),
        subgroups = new Array(n * n),
        k,
        x,
        x0,
        dx,
        i,
        j;

    // Compute the sum.
    k = 0, i = -1; while (++i < n) {
      x = 0, j = -1; while (++j < n) {
        x += matrix[i][j];
      }
      groupSums.push(x);
      subgroupIndex.push(sequence(n));
      k += x;
    }

    // Sort groups…
    if (sortGroups) groupIndex.sort(function(a, b) {
      return sortGroups(groupSums[a], groupSums[b]);
    });

    // Sort subgroups…
    if (sortSubgroups) subgroupIndex.forEach(function(d, i) {
      d.sort(function(a, b) {
        return sortSubgroups(matrix[i][a], matrix[i][b]);
      });
    });

    // Convert the sum to scaling factor for [0, 2pi].
    // TODO Allow start and end angle to be specified?
    // TODO Allow padding to be specified as percentage?
    k = max$1(0, tau$1 - padAngle * n) / k;
    dx = k ? padAngle : tau$1 / n;

    // Compute the start and end angle for each group and subgroup.
    // Note: Opera has a bug reordering object literal properties!
    x = 0, i = -1; while (++i < n) {
      x0 = x, j = -1; while (++j < n) {
        var di = groupIndex[i],
            dj = subgroupIndex[di][j],
            v = matrix[di][dj],
            a0 = x,
            a1 = x += v * k;
        subgroups[dj * n + di] = {
          index: di,
          subindex: dj,
          startAngle: a0,
          endAngle: a1,
          value: v
        };
      }
      groups[di] = {
        index: di,
        startAngle: x0,
        endAngle: x,
        value: groupSums[di]
      };
      x += dx;
    }

    // Generate chords for each (non-empty) subgroup-subgroup link.
    i = -1; while (++i < n) {
      j = i - 1; while (++j < n) {
        var source = subgroups[j * n + i],
            target = subgroups[i * n + j];
        if (source.value || target.value) {
          chords.push(source.value < target.value
              ? {source: target, target: source}
              : {source: source, target: target});
        }
      }
    }

    return sortChords ? chords.sort(sortChords) : chords;
  }

  chord.padAngle = function(_) {
    return arguments.length ? (padAngle = max$1(0, _), chord) : padAngle;
  };

  chord.sortGroups = function(_) {
    return arguments.length ? (sortGroups = _, chord) : sortGroups;
  };

  chord.sortSubgroups = function(_) {
    return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;
  };

  chord.sortChords = function(_) {
    return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;
  };

  return chord;
};

var slice$2 = Array.prototype.slice;

var constant$5 = function(x) {
  return function() {
    return x;
  };
};

var pi$2 = Math.PI;
var tau$2 = 2 * pi$2;
var epsilon$1 = 1e-6;
var tauEpsilon = tau$2 - epsilon$1;

function Path() {
  this._x0 = this._y0 = // start of current subpath
  this._x1 = this._y1 = null; // end of current subpath
  this._ = "";
}

function path() {
  return new Path;
}

Path.prototype = path.prototype = {
  constructor: Path,
  moveTo: function(x, y) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
  },
  closePath: function() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  },
  lineTo: function(x, y) {
    this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  quadraticCurveTo: function(x1, y1, x, y) {
    this._ += "Q" + (+x1) + "," + (+y1) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  bezierCurveTo: function(x1, y1, x2, y2, x, y) {
    this._ += "C" + (+x1) + "," + (+y1) + "," + (+x2) + "," + (+y2) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  arcTo: function(x1, y1, x2, y2, r) {
    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
    var x0 = this._x1,
        y0 = this._y1,
        x21 = x2 - x1,
        y21 = y2 - y1,
        x01 = x0 - x1,
        y01 = y0 - y1,
        l01_2 = x01 * x01 + y01 * y01;

    // Is the radius negative? Error.
    if (r < 0) throw new Error("negative radius: " + r);

    // Is this path empty? Move to (x1,y1).
    if (this._x1 === null) {
      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
    }

    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
    else if (!(l01_2 > epsilon$1)) {}

    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
    // Equivalently, is (x1,y1) coincident with (x2,y2)?
    // Or, is the radius zero? Line to (x1,y1).
    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon$1) || !r) {
      this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
    }

    // Otherwise, draw an arc!
    else {
      var x20 = x2 - x0,
          y20 = y2 - y0,
          l21_2 = x21 * x21 + y21 * y21,
          l20_2 = x20 * x20 + y20 * y20,
          l21 = Math.sqrt(l21_2),
          l01 = Math.sqrt(l01_2),
          l = r * Math.tan((pi$2 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
          t01 = l / l01,
          t21 = l / l21;

      // If the start tangent is not coincident with (x0,y0), line to.
      if (Math.abs(t01 - 1) > epsilon$1) {
        this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
      }

      this._ += "A" + r + "," + r + ",0,0," + (+(y01 * x20 > x01 * y20)) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
    }
  },
  arc: function(x, y, r, a0, a1, ccw) {
    x = +x, y = +y, r = +r;
    var dx = r * Math.cos(a0),
        dy = r * Math.sin(a0),
        x0 = x + dx,
        y0 = y + dy,
        cw = 1 ^ ccw,
        da = ccw ? a0 - a1 : a1 - a0;

    // Is the radius negative? Error.
    if (r < 0) throw new Error("negative radius: " + r);

    // Is this path empty? Move to (x0,y0).
    if (this._x1 === null) {
      this._ += "M" + x0 + "," + y0;
    }

    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
    else if (Math.abs(this._x1 - x0) > epsilon$1 || Math.abs(this._y1 - y0) > epsilon$1) {
      this._ += "L" + x0 + "," + y0;
    }

    // Is this arc empty? We’re done.
    if (!r) return;

    // Does the angle go the wrong way? Flip the direction.
    if (da < 0) da = da % tau$2 + tau$2;

    // Is this a complete circle? Draw two arcs to complete the circle.
    if (da > tauEpsilon) {
      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
    }

    // Is this arc non-empty? Draw an arc!
    else if (da > epsilon$1) {
      this._ += "A" + r + "," + r + ",0," + (+(da >= pi$2)) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
    }
  },
  rect: function(x, y, w, h) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + (+w) + "v" + (+h) + "h" + (-w) + "Z";
  },
  toString: function() {
    return this._;
  }
};

function defaultSource(d) {
  return d.source;
}

function defaultTarget(d) {
  return d.target;
}

function defaultRadius(d) {
  return d.radius;
}

function defaultStartAngle(d) {
  return d.startAngle;
}

function defaultEndAngle(d) {
  return d.endAngle;
}

var ribbon = function() {
  var source = defaultSource,
      target = defaultTarget,
      radius = defaultRadius,
      startAngle = defaultStartAngle,
      endAngle = defaultEndAngle,
      context = null;

  function ribbon() {
    var buffer,
        argv = slice$2.call(arguments),
        s = source.apply(this, argv),
        t = target.apply(this, argv),
        sr = +radius.apply(this, (argv[0] = s, argv)),
        sa0 = startAngle.apply(this, argv) - halfPi$1,
        sa1 = endAngle.apply(this, argv) - halfPi$1,
        sx0 = sr * cos(sa0),
        sy0 = sr * sin(sa0),
        tr = +radius.apply(this, (argv[0] = t, argv)),
        ta0 = startAngle.apply(this, argv) - halfPi$1,
        ta1 = endAngle.apply(this, argv) - halfPi$1;

    if (!context) context = buffer = path();

    context.moveTo(sx0, sy0);
    context.arc(0, 0, sr, sa0, sa1);
    if (sa0 !== ta0 || sa1 !== ta1) { // TODO sr !== tr?
      context.quadraticCurveTo(0, 0, tr * cos(ta0), tr * sin(ta0));
      context.arc(0, 0, tr, ta0, ta1);
    }
    context.quadraticCurveTo(0, 0, sx0, sy0);
    context.closePath();

    if (buffer) return context = null, buffer + "" || null;
  }

  ribbon.radius = function(_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : constant$5(+_), ribbon) : radius;
  };

  ribbon.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$5(+_), ribbon) : startAngle;
  };

  ribbon.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$5(+_), ribbon) : endAngle;
  };

  ribbon.source = function(_) {
    return arguments.length ? (source = _, ribbon) : source;
  };

  ribbon.target = function(_) {
    return arguments.length ? (target = _, ribbon) : target;
  };

  ribbon.context = function(_) {
    return arguments.length ? ((context = _ == null ? null : _), ribbon) : context;
  };

  return ribbon;
};

var prefix = "$";

function Map() {}

Map.prototype = map$1.prototype = {
  constructor: Map,
  has: function(key) {
    return (prefix + key) in this;
  },
  get: function(key) {
    return this[prefix + key];
  },
  set: function(key, value) {
    this[prefix + key] = value;
    return this;
  },
  remove: function(key) {
    var property = prefix + key;
    return property in this && delete this[property];
  },
  clear: function() {
    for (var property in this) if (property[0] === prefix) delete this[property];
  },
  keys: function() {
    var keys = [];
    for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));
    return keys;
  },
  values: function() {
    var values = [];
    for (var property in this) if (property[0] === prefix) values.push(this[property]);
    return values;
  },
  entries: function() {
    var entries = [];
    for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});
    return entries;
  },
  size: function() {
    var size = 0;
    for (var property in this) if (property[0] === prefix) ++size;
    return size;
  },
  empty: function() {
    for (var property in this) if (property[0] === prefix) return false;
    return true;
  },
  each: function(f) {
    for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);
  }
};

function map$1(object, f) {
  var map = new Map;

  // Copy constructor.
  if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });

  // Index array by numeric index or specified key function.
  else if (Array.isArray(object)) {
    var i = -1,
        n = object.length,
        o;

    if (f == null) while (++i < n) map.set(i, object[i]);
    else while (++i < n) map.set(f(o = object[i], i, object), o);
  }

  // Convert object to map.
  else if (object) for (var key in object) map.set(key, object[key]);

  return map;
}

var nest = function() {
  var keys = [],
      sortKeys = [],
      sortValues,
      rollup,
      nest;

  function apply(array, depth, createResult, setResult) {
    if (depth >= keys.length) return rollup != null
        ? rollup(array) : (sortValues != null
        ? array.sort(sortValues)
        : array);

    var i = -1,
        n = array.length,
        key = keys[depth++],
        keyValue,
        value,
        valuesByKey = map$1(),
        values,
        result = createResult();

    while (++i < n) {
      if (values = valuesByKey.get(keyValue = key(value = array[i]) + "")) {
        values.push(value);
      } else {
        valuesByKey.set(keyValue, [value]);
      }
    }

    valuesByKey.each(function(values, key) {
      setResult(result, key, apply(values, depth, createResult, setResult));
    });

    return result;
  }

  function entries(map, depth) {
    if (++depth > keys.length) return map;
    var array, sortKey = sortKeys[depth - 1];
    if (rollup != null && depth >= keys.length) array = map.entries();
    else array = [], map.each(function(v, k) { array.push({key: k, values: entries(v, depth)}); });
    return sortKey != null ? array.sort(function(a, b) { return sortKey(a.key, b.key); }) : array;
  }

  return nest = {
    object: function(array) { return apply(array, 0, createObject, setObject); },
    map: function(array) { return apply(array, 0, createMap, setMap); },
    entries: function(array) { return entries(apply(array, 0, createMap, setMap), 0); },
    key: function(d) { keys.push(d); return nest; },
    sortKeys: function(order) { sortKeys[keys.length - 1] = order; return nest; },
    sortValues: function(order) { sortValues = order; return nest; },
    rollup: function(f) { rollup = f; return nest; }
  };
};

function createObject() {
  return {};
}

function setObject(object, key, value) {
  object[key] = value;
}

function createMap() {
  return map$1();
}

function setMap(map, key, value) {
  map.set(key, value);
}

function Set() {}

var proto = map$1.prototype;

Set.prototype = set$2.prototype = {
  constructor: Set,
  has: proto.has,
  add: function(value) {
    value += "";
    this[prefix + value] = value;
    return this;
  },
  remove: proto.remove,
  clear: proto.clear,
  values: proto.keys,
  size: proto.size,
  empty: proto.empty,
  each: proto.each
};

function set$2(object, f) {
  var set = new Set;

  // Copy constructor.
  if (object instanceof Set) object.each(function(value) { set.add(value); });

  // Otherwise, assume it’s an array.
  else if (object) {
    var i = -1, n = object.length;
    if (f == null) while (++i < n) set.add(object[i]);
    else while (++i < n) set.add(f(object[i], i, object));
  }

  return set;
}

var keys = function(map) {
  var keys = [];
  for (var key in map) keys.push(key);
  return keys;
};

var values = function(map) {
  var values = [];
  for (var key in map) values.push(map[key]);
  return values;
};

var entries = function(map) {
  var entries = [];
  for (var key in map) entries.push({key: key, value: map[key]});
  return entries;
};

function objectConverter(columns) {
  return new Function("d", "return {" + columns.map(function(name, i) {
    return JSON.stringify(name) + ": d[" + i + "]";
  }).join(",") + "}");
}

function customConverter(columns, f) {
  var object = objectConverter(columns);
  return function(row, i) {
    return f(object(row), i, columns);
  };
}

// Compute unique columns in order of discovery.
function inferColumns(rows) {
  var columnSet = Object.create(null),
      columns = [];

  rows.forEach(function(row) {
    for (var column in row) {
      if (!(column in columnSet)) {
        columns.push(columnSet[column] = column);
      }
    }
  });

  return columns;
}

var dsv = function(delimiter) {
  var reFormat = new RegExp("[\"" + delimiter + "\n\r]"),
      delimiterCode = delimiter.charCodeAt(0);

  function parse(text, f) {
    var convert, columns, rows = parseRows(text, function(row, i) {
      if (convert) return convert(row, i - 1);
      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
    });
    rows.columns = columns;
    return rows;
  }

  function parseRows(text, f) {
    var EOL = {}, // sentinel value for end-of-line
        EOF = {}, // sentinel value for end-of-file
        rows = [], // output rows
        N = text.length,
        I = 0, // current character index
        n = 0, // the current line number
        t, // the current token
        eol; // is the current token followed by EOL?

    function token() {
      if (I >= N) return EOF; // special case: end of file
      if (eol) return eol = false, EOL; // special case: end of line

      // special case: quotes
      var j = I, c;
      if (text.charCodeAt(j) === 34) {
        var i = j;
        while (i++ < N) {
          if (text.charCodeAt(i) === 34) {
            if (text.charCodeAt(i + 1) !== 34) break;
            ++i;
          }
        }
        I = i + 2;
        c = text.charCodeAt(i + 1);
        if (c === 13) {
          eol = true;
          if (text.charCodeAt(i + 2) === 10) ++I;
        } else if (c === 10) {
          eol = true;
        }
        return text.slice(j + 1, i).replace(/""/g, "\"");
      }

      // common case: find next delimiter or newline
      while (I < N) {
        var k = 1;
        c = text.charCodeAt(I++);
        if (c === 10) eol = true; // \n
        else if (c === 13) { eol = true; if (text.charCodeAt(I) === 10) ++I, ++k; } // \r|\r\n
        else if (c !== delimiterCode) continue;
        return text.slice(j, I - k);
      }

      // special case: last token before EOF
      return text.slice(j);
    }

    while ((t = token()) !== EOF) {
      var a = [];
      while (t !== EOL && t !== EOF) {
        a.push(t);
        t = token();
      }
      if (f && (a = f(a, n++)) == null) continue;
      rows.push(a);
    }

    return rows;
  }

  function format(rows, columns) {
    if (columns == null) columns = inferColumns(rows);
    return [columns.map(formatValue).join(delimiter)].concat(rows.map(function(row) {
      return columns.map(function(column) {
        return formatValue(row[column]);
      }).join(delimiter);
    })).join("\n");
  }

  function formatRows(rows) {
    return rows.map(formatRow).join("\n");
  }

  function formatRow(row) {
    return row.map(formatValue).join(delimiter);
  }

  function formatValue(text) {
    return text == null ? ""
        : reFormat.test(text += "") ? "\"" + text.replace(/\"/g, "\"\"") + "\""
        : text;
  }

  return {
    parse: parse,
    parseRows: parseRows,
    format: format,
    formatRows: formatRows
  };
};

var csv = dsv(",");

var csvParse = csv.parse;
var csvParseRows = csv.parseRows;
var csvFormat = csv.format;
var csvFormatRows = csv.formatRows;

var tsv = dsv("\t");

var tsvParse = tsv.parse;
var tsvParseRows = tsv.parseRows;
var tsvFormat = tsv.format;
var tsvFormatRows = tsv.formatRows;

var center$1 = function(x, y) {
  var nodes;

  if (x == null) x = 0;
  if (y == null) y = 0;

  function force() {
    var i,
        n = nodes.length,
        node,
        sx = 0,
        sy = 0;

    for (i = 0; i < n; ++i) {
      node = nodes[i], sx += node.x, sy += node.y;
    }

    for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {
      node = nodes[i], node.x -= sx, node.y -= sy;
    }
  }

  force.initialize = function(_) {
    nodes = _;
  };

  force.x = function(_) {
    return arguments.length ? (x = +_, force) : x;
  };

  force.y = function(_) {
    return arguments.length ? (y = +_, force) : y;
  };

  return force;
};

var constant$6 = function(x) {
  return function() {
    return x;
  };
};

var jiggle = function() {
  return (Math.random() - 0.5) * 1e-6;
};

var tree_add = function(d) {
  var x = +this._x.call(null, d),
      y = +this._y.call(null, d);
  return add(this.cover(x, y), x, y, d);
};

function add(tree, x, y, d) {
  if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points

  var parent,
      node = tree._root,
      leaf = {data: d},
      x0 = tree._x0,
      y0 = tree._y0,
      x1 = tree._x1,
      y1 = tree._y1,
      xm,
      ym,
      xp,
      yp,
      right,
      bottom,
      i,
      j;

  // If the tree is empty, initialize the root as a leaf.
  if (!node) return tree._root = leaf, tree;

  // Find the existing leaf for the new point, or add it.
  while (node.length) {
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
    if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;
  }

  // Is the new point is exactly coincident with the existing point?
  xp = +tree._x.call(null, node.data);
  yp = +tree._y.call(null, node.data);
  if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;

  // Otherwise, split the leaf node until the old and new point are separated.
  do {
    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));
  return parent[j] = node, parent[i] = leaf, tree;
}

function addAll(data) {
  var d, i, n = data.length,
      x,
      y,
      xz = new Array(n),
      yz = new Array(n),
      x0 = Infinity,
      y0 = Infinity,
      x1 = -Infinity,
      y1 = -Infinity;

  // Compute the points and their extent.
  for (i = 0; i < n; ++i) {
    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;
    xz[i] = x;
    yz[i] = y;
    if (x < x0) x0 = x;
    if (x > x1) x1 = x;
    if (y < y0) y0 = y;
    if (y > y1) y1 = y;
  }

  // If there were no (valid) points, inherit the existing extent.
  if (x1 < x0) x0 = this._x0, x1 = this._x1;
  if (y1 < y0) y0 = this._y0, y1 = this._y1;

  // Expand the tree to cover the new points.
  this.cover(x0, y0).cover(x1, y1);

  // Add the new points.
  for (i = 0; i < n; ++i) {
    add(this, xz[i], yz[i], data[i]);
  }

  return this;
}

var tree_cover = function(x, y) {
  if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points

  var x0 = this._x0,
      y0 = this._y0,
      x1 = this._x1,
      y1 = this._y1;

  // If the quadtree has no extent, initialize them.
  // Integer extent are necessary so that if we later double the extent,
  // the existing quadrant boundaries don’t change due to floating point error!
  if (isNaN(x0)) {
    x1 = (x0 = Math.floor(x)) + 1;
    y1 = (y0 = Math.floor(y)) + 1;
  }

  // Otherwise, double repeatedly to cover.
  else if (x0 > x || x > x1 || y0 > y || y > y1) {
    var z = x1 - x0,
        node = this._root,
        parent,
        i;

    switch (i = (y < (y0 + y1) / 2) << 1 | (x < (x0 + x1) / 2)) {
      case 0: {
        do parent = new Array(4), parent[i] = node, node = parent;
        while (z *= 2, x1 = x0 + z, y1 = y0 + z, x > x1 || y > y1);
        break;
      }
      case 1: {
        do parent = new Array(4), parent[i] = node, node = parent;
        while (z *= 2, x0 = x1 - z, y1 = y0 + z, x0 > x || y > y1);
        break;
      }
      case 2: {
        do parent = new Array(4), parent[i] = node, node = parent;
        while (z *= 2, x1 = x0 + z, y0 = y1 - z, x > x1 || y0 > y);
        break;
      }
      case 3: {
        do parent = new Array(4), parent[i] = node, node = parent;
        while (z *= 2, x0 = x1 - z, y0 = y1 - z, x0 > x || y0 > y);
        break;
      }
    }

    if (this._root && this._root.length) this._root = node;
  }

  // If the quadtree covers the point already, just return.
  else return this;

  this._x0 = x0;
  this._y0 = y0;
  this._x1 = x1;
  this._y1 = y1;
  return this;
};

var tree_data = function() {
  var data = [];
  this.visit(function(node) {
    if (!node.length) do data.push(node.data); while (node = node.next)
  });
  return data;
};

var tree_extent = function(_) {
  return arguments.length
      ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])
      : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];
};

var Quad = function(node, x0, y0, x1, y1) {
  this.node = node;
  this.x0 = x0;
  this.y0 = y0;
  this.x1 = x1;
  this.y1 = y1;
};

var tree_find = function(x, y, radius) {
  var data,
      x0 = this._x0,
      y0 = this._y0,
      x1,
      y1,
      x2,
      y2,
      x3 = this._x1,
      y3 = this._y1,
      quads = [],
      node = this._root,
      q,
      i;

  if (node) quads.push(new Quad(node, x0, y0, x3, y3));
  if (radius == null) radius = Infinity;
  else {
    x0 = x - radius, y0 = y - radius;
    x3 = x + radius, y3 = y + radius;
    radius *= radius;
  }

  while (q = quads.pop()) {

    // Stop searching if this quadrant can’t contain a closer node.
    if (!(node = q.node)
        || (x1 = q.x0) > x3
        || (y1 = q.y0) > y3
        || (x2 = q.x1) < x0
        || (y2 = q.y1) < y0) continue;

    // Bisect the current quadrant.
    if (node.length) {
      var xm = (x1 + x2) / 2,
          ym = (y1 + y2) / 2;

      quads.push(
        new Quad(node[3], xm, ym, x2, y2),
        new Quad(node[2], x1, ym, xm, y2),
        new Quad(node[1], xm, y1, x2, ym),
        new Quad(node[0], x1, y1, xm, ym)
      );

      // Visit the closest quadrant first.
      if (i = (y >= ym) << 1 | (x >= xm)) {
        q = quads[quads.length - 1];
        quads[quads.length - 1] = quads[quads.length - 1 - i];
        quads[quads.length - 1 - i] = q;
      }
    }

    // Visit this point. (Visiting coincident points isn’t necessary!)
    else {
      var dx = x - +this._x.call(null, node.data),
          dy = y - +this._y.call(null, node.data),
          d2 = dx * dx + dy * dy;
      if (d2 < radius) {
        var d = Math.sqrt(radius = d2);
        x0 = x - d, y0 = y - d;
        x3 = x + d, y3 = y + d;
        data = node.data;
      }
    }
  }

  return data;
};

var tree_remove = function(d) {
  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points

  var parent,
      node = this._root,
      retainer,
      previous,
      next,
      x0 = this._x0,
      y0 = this._y0,
      x1 = this._x1,
      y1 = this._y1,
      x,
      y,
      xm,
      ym,
      right,
      bottom,
      i,
      j;

  // If the tree is empty, initialize the root as a leaf.
  if (!node) return this;

  // Find the leaf node for the point.
  // While descending, also retain the deepest parent with a non-removed sibling.
  if (node.length) while (true) {
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
    if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
    if (!node.length) break;
    if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;
  }

  // Find the point to remove.
  while (node.data !== d) if (!(previous = node, node = node.next)) return this;
  if (next = node.next) delete node.next;

  // If there are multiple coincident points, remove just the point.
  if (previous) return (next ? previous.next = next : delete previous.next), this;

  // If this is the root point, remove it.
  if (!parent) return this._root = next, this;

  // Remove this leaf.
  next ? parent[i] = next : delete parent[i];

  // If the parent now contains exactly one leaf, collapse superfluous parents.
  if ((node = parent[0] || parent[1] || parent[2] || parent[3])
      && node === (parent[3] || parent[2] || parent[1] || parent[0])
      && !node.length) {
    if (retainer) retainer[j] = node;
    else this._root = node;
  }

  return this;
};

function removeAll(data) {
  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);
  return this;
}

var tree_root = function() {
  return this._root;
};

var tree_size = function() {
  var size = 0;
  this.visit(function(node) {
    if (!node.length) do ++size; while (node = node.next)
  });
  return size;
};

var tree_visit = function(callback) {
  var quads = [], q, node = this._root, child, x0, y0, x1, y1;
  if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));
  while (q = quads.pop()) {
    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
      var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
    }
  }
  return this;
};

var tree_visitAfter = function(callback) {
  var quads = [], next = [], q;
  if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));
  while (q = quads.pop()) {
    var node = q.node;
    if (node.length) {
      var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
    }
    next.push(q);
  }
  while (q = next.pop()) {
    callback(q.node, q.x0, q.y0, q.x1, q.y1);
  }
  return this;
};

function defaultX(d) {
  return d[0];
}

var tree_x = function(_) {
  return arguments.length ? (this._x = _, this) : this._x;
};

function defaultY(d) {
  return d[1];
}

var tree_y = function(_) {
  return arguments.length ? (this._y = _, this) : this._y;
};

function quadtree(nodes, x, y) {
  var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);
  return nodes == null ? tree : tree.addAll(nodes);
}

function Quadtree(x, y, x0, y0, x1, y1) {
  this._x = x;
  this._y = y;
  this._x0 = x0;
  this._y0 = y0;
  this._x1 = x1;
  this._y1 = y1;
  this._root = undefined;
}

function leaf_copy(leaf) {
  var copy = {data: leaf.data}, next = copy;
  while (leaf = leaf.next) next = next.next = {data: leaf.data};
  return copy;
}

var treeProto = quadtree.prototype = Quadtree.prototype;

treeProto.copy = function() {
  var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),
      node = this._root,
      nodes,
      child;

  if (!node) return copy;

  if (!node.length) return copy._root = leaf_copy(node), copy;

  nodes = [{source: node, target: copy._root = new Array(4)}];
  while (node = nodes.pop()) {
    for (var i = 0; i < 4; ++i) {
      if (child = node.source[i]) {
        if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});
        else node.target[i] = leaf_copy(child);
      }
    }
  }

  return copy;
};

treeProto.add = tree_add;
treeProto.addAll = addAll;
treeProto.cover = tree_cover;
treeProto.data = tree_data;
treeProto.extent = tree_extent;
treeProto.find = tree_find;
treeProto.remove = tree_remove;
treeProto.removeAll = removeAll;
treeProto.root = tree_root;
treeProto.size = tree_size;
treeProto.visit = tree_visit;
treeProto.visitAfter = tree_visitAfter;
treeProto.x = tree_x;
treeProto.y = tree_y;

function x(d) {
  return d.x + d.vx;
}

function y(d) {
  return d.y + d.vy;
}

var collide = function(radius) {
  var nodes,
      radii,
      strength = 1,
      iterations = 1;

  if (typeof radius !== "function") radius = constant$6(radius == null ? 1 : +radius);

  function force() {
    var i, n = nodes.length,
        tree,
        node,
        xi,
        yi,
        ri,
        ri2;

    for (var k = 0; k < iterations; ++k) {
      tree = quadtree(nodes, x, y).visitAfter(prepare);
      for (i = 0; i < n; ++i) {
        node = nodes[i];
        ri = radii[node.index], ri2 = ri * ri;
        xi = node.x + node.vx;
        yi = node.y + node.vy;
        tree.visit(apply);
      }
    }

    function apply(quad, x0, y0, x1, y1) {
      var data = quad.data, rj = quad.r, r = ri + rj;
      if (data) {
        if (data.index > node.index) {
          var x = xi - data.x - data.vx,
              y = yi - data.y - data.vy,
              l = x * x + y * y;
          if (l < r * r) {
            if (x === 0) x = jiggle(), l += x * x;
            if (y === 0) y = jiggle(), l += y * y;
            l = (r - (l = Math.sqrt(l))) / l * strength;
            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));
            node.vy += (y *= l) * r;
            data.vx -= x * (r = 1 - r);
            data.vy -= y * r;
          }
        }
        return;
      }
      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
    }
  }

  function prepare(quad) {
    if (quad.data) return quad.r = radii[quad.data.index];
    for (var i = quad.r = 0; i < 4; ++i) {
      if (quad[i] && quad[i].r > quad.r) {
        quad.r = quad[i].r;
      }
    }
  }

  function initialize() {
    if (!nodes) return;
    var i, n = nodes.length, node;
    radii = new Array(n);
    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);
  }

  force.initialize = function(_) {
    nodes = _;
    initialize();
  };

  force.iterations = function(_) {
    return arguments.length ? (iterations = +_, force) : iterations;
  };

  force.strength = function(_) {
    return arguments.length ? (strength = +_, force) : strength;
  };

  force.radius = function(_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : radius;
  };

  return force;
};

function index(d) {
  return d.index;
}

function find(nodeById, nodeId) {
  var node = nodeById.get(nodeId);
  if (!node) throw new Error("missing: " + nodeId);
  return node;
}

var link = function(links) {
  var id = index,
      strength = defaultStrength,
      strengths,
      distance = constant$6(30),
      distances,
      nodes,
      count,
      bias,
      iterations = 1;

  if (links == null) links = [];

  function defaultStrength(link) {
    return 1 / Math.min(count[link.source.index], count[link.target.index]);
  }

  function force(alpha) {
    for (var k = 0, n = links.length; k < iterations; ++k) {
      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {
        link = links[i], source = link.source, target = link.target;
        x = target.x + target.vx - source.x - source.vx || jiggle();
        y = target.y + target.vy - source.y - source.vy || jiggle();
        l = Math.sqrt(x * x + y * y);
        l = (l - distances[i]) / l * alpha * strengths[i];
        x *= l, y *= l;
        target.vx -= x * (b = bias[i]);
        target.vy -= y * b;
        source.vx += x * (b = 1 - b);
        source.vy += y * b;
      }
    }
  }

  function initialize() {
    if (!nodes) return;

    var i,
        n = nodes.length,
        m = links.length,
        nodeById = map$1(nodes, id),
        link;

    for (i = 0, count = new Array(n); i < m; ++i) {
      link = links[i], link.index = i;
      if (typeof link.source !== "object") link.source = find(nodeById, link.source);
      if (typeof link.target !== "object") link.target = find(nodeById, link.target);
      count[link.source.index] = (count[link.source.index] || 0) + 1;
      count[link.target.index] = (count[link.target.index] || 0) + 1;
    }

    for (i = 0, bias = new Array(m); i < m; ++i) {
      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
    }

    strengths = new Array(m), initializeStrength();
    distances = new Array(m), initializeDistance();
  }

  function initializeStrength() {
    if (!nodes) return;

    for (var i = 0, n = links.length; i < n; ++i) {
      strengths[i] = +strength(links[i], i, links);
    }
  }

  function initializeDistance() {
    if (!nodes) return;

    for (var i = 0, n = links.length; i < n; ++i) {
      distances[i] = +distance(links[i], i, links);
    }
  }

  force.initialize = function(_) {
    nodes = _;
    initialize();
  };

  force.links = function(_) {
    return arguments.length ? (links = _, initialize(), force) : links;
  };

  force.id = function(_) {
    return arguments.length ? (id = _, force) : id;
  };

  force.iterations = function(_) {
    return arguments.length ? (iterations = +_, force) : iterations;
  };

  force.strength = function(_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initializeStrength(), force) : strength;
  };

  force.distance = function(_) {
    return arguments.length ? (distance = typeof _ === "function" ? _ : constant$6(+_), initializeDistance(), force) : distance;
  };

  return force;
};

function x$1(d) {
  return d.x;
}

function y$1(d) {
  return d.y;
}

var initialRadius = 10;
var initialAngle = Math.PI * (3 - Math.sqrt(5));

var simulation = function(nodes) {
  var simulation,
      alpha = 1,
      alphaMin = 0.001,
      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),
      alphaTarget = 0,
      velocityDecay = 0.6,
      forces = map$1(),
      stepper = timer(step),
      event = dispatch("tick", "end");

  if (nodes == null) nodes = [];

  function step() {
    tick();
    event.call("tick", simulation);
    if (alpha < alphaMin) {
      stepper.stop();
      event.call("end", simulation);
    }
  }

  function tick() {
    var i, n = nodes.length, node;

    alpha += (alphaTarget - alpha) * alphaDecay;

    forces.each(function(force) {
      force(alpha);
    });

    for (i = 0; i < n; ++i) {
      node = nodes[i];
      if (node.fx == null) node.x += node.vx *= velocityDecay;
      else node.x = node.fx, node.vx = 0;
      if (node.fy == null) node.y += node.vy *= velocityDecay;
      else node.y = node.fy, node.vy = 0;
    }
  }

  function initializeNodes() {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.index = i;
      if (isNaN(node.x) || isNaN(node.y)) {
        var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;
        node.x = radius * Math.cos(angle);
        node.y = radius * Math.sin(angle);
      }
      if (isNaN(node.vx) || isNaN(node.vy)) {
        node.vx = node.vy = 0;
      }
    }
  }

  function initializeForce(force) {
    if (force.initialize) force.initialize(nodes);
    return force;
  }

  initializeNodes();

  return simulation = {
    tick: tick,

    restart: function() {
      return stepper.restart(step), simulation;
    },

    stop: function() {
      return stepper.stop(), simulation;
    },

    nodes: function(_) {
      return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;
    },

    alpha: function(_) {
      return arguments.length ? (alpha = +_, simulation) : alpha;
    },

    alphaMin: function(_) {
      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
    },

    alphaDecay: function(_) {
      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
    },

    alphaTarget: function(_) {
      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
    },

    velocityDecay: function(_) {
      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
    },

    force: function(name, _) {
      return arguments.length > 1 ? ((_ == null ? forces.remove(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);
    },

    find: function(x, y, radius) {
      var i = 0,
          n = nodes.length,
          dx,
          dy,
          d2,
          node,
          closest;

      if (radius == null) radius = Infinity;
      else radius *= radius;

      for (i = 0; i < n; ++i) {
        node = nodes[i];
        dx = x - node.x;
        dy = y - node.y;
        d2 = dx * dx + dy * dy;
        if (d2 < radius) closest = node, radius = d2;
      }

      return closest;
    },

    on: function(name, _) {
      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
    }
  };
};

var manyBody = function() {
  var nodes,
      node,
      alpha,
      strength = constant$6(-30),
      strengths,
      distanceMin2 = 1,
      distanceMax2 = Infinity,
      theta2 = 0.81;

  function force(_) {
    var i, n = nodes.length, tree = quadtree(nodes, x$1, y$1).visitAfter(accumulate);
    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);
  }

  function initialize() {
    if (!nodes) return;
    var i, n = nodes.length, node;
    strengths = new Array(n);
    for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);
  }

  function accumulate(quad) {
    var strength = 0, q, c, x$$1, y$$1, i;

    // For internal nodes, accumulate forces from child quadrants.
    if (quad.length) {
      for (x$$1 = y$$1 = i = 0; i < 4; ++i) {
        if ((q = quad[i]) && (c = q.value)) {
          strength += c, x$$1 += c * q.x, y$$1 += c * q.y;
        }
      }
      quad.x = x$$1 / strength;
      quad.y = y$$1 / strength;
    }

    // For leaf nodes, accumulate forces from coincident quadrants.
    else {
      q = quad;
      q.x = q.data.x;
      q.y = q.data.y;
      do strength += strengths[q.data.index];
      while (q = q.next);
    }

    quad.value = strength;
  }

  function apply(quad, x1, _, x2) {
    if (!quad.value) return true;

    var x$$1 = quad.x - node.x,
        y$$1 = quad.y - node.y,
        w = x2 - x1,
        l = x$$1 * x$$1 + y$$1 * y$$1;

    // Apply the Barnes-Hut approximation if possible.
    // Limit forces for very close nodes; randomize direction if coincident.
    if (w * w / theta2 < l) {
      if (l < distanceMax2) {
        if (x$$1 === 0) x$$1 = jiggle(), l += x$$1 * x$$1;
        if (y$$1 === 0) y$$1 = jiggle(), l += y$$1 * y$$1;
        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
        node.vx += x$$1 * quad.value * alpha / l;
        node.vy += y$$1 * quad.value * alpha / l;
      }
      return true;
    }

    // Otherwise, process points directly.
    else if (quad.length || l >= distanceMax2) return;

    // Limit forces for very close nodes; randomize direction if coincident.
    if (quad.data !== node || quad.next) {
      if (x$$1 === 0) x$$1 = jiggle(), l += x$$1 * x$$1;
      if (y$$1 === 0) y$$1 = jiggle(), l += y$$1 * y$$1;
      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
    }

    do if (quad.data !== node) {
      w = strengths[quad.data.index] * alpha / l;
      node.vx += x$$1 * w;
      node.vy += y$$1 * w;
    } while (quad = quad.next);
  }

  force.initialize = function(_) {
    nodes = _;
    initialize();
  };

  force.strength = function(_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : strength;
  };

  force.distanceMin = function(_) {
    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
  };

  force.distanceMax = function(_) {
    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
  };

  force.theta = function(_) {
    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
  };

  return force;
};

var x$2 = function(x) {
  var strength = constant$6(0.1),
      nodes,
      strengths,
      xz;

  if (typeof x !== "function") x = constant$6(x == null ? 0 : +x);

  function force(alpha) {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
    }
  }

  function initialize() {
    if (!nodes) return;
    var i, n = nodes.length;
    strengths = new Array(n);
    xz = new Array(n);
    for (i = 0; i < n; ++i) {
      strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
  }

  force.initialize = function(_) {
    nodes = _;
    initialize();
  };

  force.strength = function(_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : strength;
  };

  force.x = function(_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : x;
  };

  return force;
};

var y$2 = function(y) {
  var strength = constant$6(0.1),
      nodes,
      strengths,
      yz;

  if (typeof y !== "function") y = constant$6(y == null ? 0 : +y);

  function force(alpha) {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
    }
  }

  function initialize() {
    if (!nodes) return;
    var i, n = nodes.length;
    strengths = new Array(n);
    yz = new Array(n);
    for (i = 0; i < n; ++i) {
      strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
  }

  force.initialize = function(_) {
    nodes = _;
    initialize();
  };

  force.strength = function(_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : strength;
  };

  force.y = function(_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : y;
  };

  return force;
};

// Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimal(1.23) returns ["123", 0].
var formatDecimal = function(x, p) {
  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
  var i, coefficient = x.slice(0, i);

  // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x.slice(i + 1)
  ];
};

var exponent$1 = function(x) {
  return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;
};

var formatGroup = function(grouping, thousands) {
  return function(value, width) {
    var i = value.length,
        t = [],
        j = 0,
        g = grouping[0],
        length = 0;

    while (i > 0 && g > 0) {
      if (length + g + 1 > width) g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width) break;
      g = grouping[j = (j + 1) % grouping.length];
    }

    return t.reverse().join(thousands);
  };
};

var formatNumerals = function(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i) {
      return numerals[+i];
    });
  };
};

var formatDefault = function(x, p) {
  x = x.toPrecision(p);

  out: for (var n = x.length, i = 1, i0 = -1, i1; i < n; ++i) {
    switch (x[i]) {
      case ".": i0 = i1 = i; break;
      case "0": if (i0 === 0) i0 = i; i1 = i; break;
      case "e": break out;
      default: if (i0 > 0) i0 = 0; break;
    }
  }

  return i0 > 0 ? x.slice(0, i0) + x.slice(i1 + 1) : x;
};

var prefixExponent;

var formatPrefixAuto = function(x, p) {
  var d = formatDecimal(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1],
      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
      n = coefficient.length;
  return i === n ? coefficient
      : i > n ? coefficient + new Array(i - n + 1).join("0")
      : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
      : "0." + new Array(1 - i).join("0") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!
};

var formatRounded = function(x, p) {
  var d = formatDecimal(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
      : coefficient + new Array(exponent - coefficient.length + 2).join("0");
};

var formatTypes = {
  "": formatDefault,
  "%": function(x, p) { return (x * 100).toFixed(p); },
  "b": function(x) { return Math.round(x).toString(2); },
  "c": function(x) { return x + ""; },
  "d": function(x) { return Math.round(x).toString(10); },
  "e": function(x, p) { return x.toExponential(p); },
  "f": function(x, p) { return x.toFixed(p); },
  "g": function(x, p) { return x.toPrecision(p); },
  "o": function(x) { return Math.round(x).toString(8); },
  "p": function(x, p) { return formatRounded(x * 100, p); },
  "r": formatRounded,
  "s": formatPrefixAuto,
  "X": function(x) { return Math.round(x).toString(16).toUpperCase(); },
  "x": function(x) { return Math.round(x).toString(16); }
};

// [[fill]align][sign][symbol][0][width][,][.precision][type]
var re = /^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;

function formatSpecifier(specifier) {
  return new FormatSpecifier(specifier);
}

formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

function FormatSpecifier(specifier) {
  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);

  var match,
      fill = match[1] || " ",
      align = match[2] || ">",
      sign = match[3] || "-",
      symbol = match[4] || "",
      zero = !!match[5],
      width = match[6] && +match[6],
      comma = !!match[7],
      precision = match[8] && +match[8].slice(1),
      type = match[9] || "";

  // The "n" type is an alias for ",g".
  if (type === "n") comma = true, type = "g";

  // Map invalid types to the default format.
  else if (!formatTypes[type]) type = "";

  // If zero fill is specified, padding goes after sign and before digits.
  if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";

  this.fill = fill;
  this.align = align;
  this.sign = sign;
  this.symbol = symbol;
  this.zero = zero;
  this.width = width;
  this.comma = comma;
  this.precision = precision;
  this.type = type;
}

FormatSpecifier.prototype.toString = function() {
  return this.fill
      + this.align
      + this.sign
      + this.symbol
      + (this.zero ? "0" : "")
      + (this.width == null ? "" : Math.max(1, this.width | 0))
      + (this.comma ? "," : "")
      + (this.precision == null ? "" : "." + Math.max(0, this.precision | 0))
      + this.type;
};

var identity$3 = function(x) {
  return x;
};

var prefixes = ["y","z","a","f","p","n","\xB5","m","","k","M","G","T","P","E","Z","Y"];

var formatLocale = function(locale) {
  var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity$3,
      currency = locale.currency,
      decimal = locale.decimal,
      numerals = locale.numerals ? formatNumerals(locale.numerals) : identity$3;

  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);

    var fill = specifier.fill,
        align = specifier.align,
        sign = specifier.sign,
        symbol = specifier.symbol,
        zero = specifier.zero,
        width = specifier.width,
        comma = specifier.comma,
        precision = specifier.precision,
        type = specifier.type;

    // Compute the prefix and suffix.
    // For SI-prefix, the suffix is lazily computed.
    var prefix = symbol === "$" ? currency[0] : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
        suffix = symbol === "$" ? currency[1] : /[%p]/.test(type) ? "%" : "";

    // What format function should we use?
    // Is this an integer type?
    // Can this type generate exponential notation?
    var formatType = formatTypes[type],
        maybeSuffix = !type || /[defgprs%]/.test(type);

    // Set the default precision if not specified,
    // or clamp the specified precision to the supported range.
    // For significant precision, it must be in [1, 21].
    // For fixed precision, it must be in [0, 20].
    precision = precision == null ? (type ? 6 : 12)
        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
        : Math.max(0, Math.min(20, precision));

    function format(value) {
      var valuePrefix = prefix,
          valueSuffix = suffix,
          i, n, c;

      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;

        // Perform the initial formatting.
        var valueNegative = value < 0;
        value = formatType(Math.abs(value), precision);

        // If a negative value rounds to zero during formatting, treat as positive.
        if (valueNegative && +value === 0) valueNegative = false;

        // Compute the prefix and suffix.
        valuePrefix = (valueNegative ? (sign === "(" ? sign : "-") : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = valueSuffix + (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + (valueNegative && sign === "(" ? ")" : "");

        // Break the formatted value into the integer “value” part that can be
        // grouped, and fractional or exponential “suffix” part that is not.
        if (maybeSuffix) {
          i = -1, n = value.length;
          while (++i < n) {
            if (c = value.charCodeAt(i), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      }

      // If the fill character is not "0", grouping is applied before padding.
      if (comma && !zero) value = group(value, Infinity);

      // Compute the padding.
      var length = valuePrefix.length + value.length + valueSuffix.length,
          padding = length < width ? new Array(width - length + 1).join(fill) : "";

      // If the fill character is "0", grouping is applied after padding.
      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

      // Reconstruct the final output based on the desired alignment.
      switch (align) {
        case "<": value = valuePrefix + value + valueSuffix + padding; break;
        case "=": value = valuePrefix + padding + value + valueSuffix; break;
        case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
        default: value = padding + valuePrefix + value + valueSuffix; break;
      }

      return numerals(value);
    }

    format.toString = function() {
      return specifier + "";
    };

    return format;
  }

  function formatPrefix(specifier, value) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
        e = Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3,
        k = Math.pow(10, -e),
        prefix = prefixes[8 + e / 3];
    return function(value) {
      return f(k * value) + prefix;
    };
  }

  return {
    format: newFormat,
    formatPrefix: formatPrefix
  };
};

var locale$1;



defaultLocale({
  decimal: ".",
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});

function defaultLocale(definition) {
  locale$1 = formatLocale(definition);
  exports.format = locale$1.format;
  exports.formatPrefix = locale$1.formatPrefix;
  return locale$1;
}

var precisionFixed = function(step) {
  return Math.max(0, -exponent$1(Math.abs(step)));
};

var precisionPrefix = function(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3 - exponent$1(Math.abs(step)));
};

var precisionRound = function(step, max) {
  step = Math.abs(step), max = Math.abs(max) - step;
  return Math.max(0, exponent$1(max) - exponent$1(step)) + 1;
};

// Adds floating point numbers with twice the normal precision.
// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
// 305–363 (1997).
// Code adapted from GeographicLib by Charles F. F. Karney,
// http://geographiclib.sourceforge.net/

var adder = function() {
  return new Adder;
};

function Adder() {
  this.reset();
}

Adder.prototype = {
  constructor: Adder,
  reset: function() {
    this.s = // rounded value
    this.t = 0; // exact error
  },
  add: function(y) {
    add$1(temp, y, this.t);
    add$1(this, temp.s, this.s);
    if (this.s) this.t += temp.t;
    else this.s = temp.t;
  },
  valueOf: function() {
    return this.s;
  }
};

var temp = new Adder;

function add$1(adder, a, b) {
  var x = adder.s = a + b,
      bv = x - a,
      av = x - bv;
  adder.t = (a - av) + (b - bv);
}

var epsilon$2 = 1e-6;
var epsilon2$1 = 1e-12;
var pi$3 = Math.PI;
var halfPi$2 = pi$3 / 2;
var quarterPi = pi$3 / 4;
var tau$3 = pi$3 * 2;

var degrees$1 = 180 / pi$3;
var radians = pi$3 / 180;

var abs = Math.abs;
var atan = Math.atan;
var atan2 = Math.atan2;
var cos$1 = Math.cos;
var ceil = Math.ceil;
var exp = Math.exp;

var log = Math.log;
var pow = Math.pow;
var sin$1 = Math.sin;
var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };
var sqrt = Math.sqrt;
var tan = Math.tan;

function acos(x) {
  return x > 1 ? 0 : x < -1 ? pi$3 : Math.acos(x);
}

function asin(x) {
  return x > 1 ? halfPi$2 : x < -1 ? -halfPi$2 : Math.asin(x);
}

function haversin(x) {
  return (x = sin$1(x / 2)) * x;
}

function noop$1() {}

function streamGeometry(geometry, stream) {
  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
    streamGeometryType[geometry.type](geometry, stream);
  }
}

var streamObjectType = {
  Feature: function(object, stream) {
    streamGeometry(object.geometry, stream);
  },
  FeatureCollection: function(object, stream) {
    var features = object.features, i = -1, n = features.length;
    while (++i < n) streamGeometry(features[i].geometry, stream);
  }
};

var streamGeometryType = {
  Sphere: function(object, stream) {
    stream.sphere();
  },
  Point: function(object, stream) {
    object = object.coordinates;
    stream.point(object[0], object[1], object[2]);
  },
  MultiPoint: function(object, stream) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
  },
  LineString: function(object, stream) {
    streamLine(object.coordinates, stream, 0);
  },
  MultiLineString: function(object, stream) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) streamLine(coordinates[i], stream, 0);
  },
  Polygon: function(object, stream) {
    streamPolygon(object.coordinates, stream);
  },
  MultiPolygon: function(object, stream) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) streamPolygon(coordinates[i], stream);
  },
  GeometryCollection: function(object, stream) {
    var geometries = object.geometries, i = -1, n = geometries.length;
    while (++i < n) streamGeometry(geometries[i], stream);
  }
};

function streamLine(coordinates, stream, closed) {
  var i = -1, n = coordinates.length - closed, coordinate;
  stream.lineStart();
  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
  stream.lineEnd();
}

function streamPolygon(coordinates, stream) {
  var i = -1, n = coordinates.length;
  stream.polygonStart();
  while (++i < n) streamLine(coordinates[i], stream, 1);
  stream.polygonEnd();
}

var geoStream = function(object, stream) {
  if (object && streamObjectType.hasOwnProperty(object.type)) {
    streamObjectType[object.type](object, stream);
  } else {
    streamGeometry(object, stream);
  }
};

var areaRingSum = adder();

var areaSum = adder();
var lambda00;
var phi00;
var lambda0;
var cosPhi0;
var sinPhi0;

var areaStream = {
  point: noop$1,
  lineStart: noop$1,
  lineEnd: noop$1,
  polygonStart: function() {
    areaRingSum.reset();
    areaStream.lineStart = areaRingStart;
    areaStream.lineEnd = areaRingEnd;
  },
  polygonEnd: function() {
    var areaRing = +areaRingSum;
    areaSum.add(areaRing < 0 ? tau$3 + areaRing : areaRing);
    this.lineStart = this.lineEnd = this.point = noop$1;
  },
  sphere: function() {
    areaSum.add(tau$3);
  }
};

function areaRingStart() {
  areaStream.point = areaPointFirst;
}

function areaRingEnd() {
  areaPoint(lambda00, phi00);
}

function areaPointFirst(lambda, phi) {
  areaStream.point = areaPoint;
  lambda00 = lambda, phi00 = phi;
  lambda *= radians, phi *= radians;
  lambda0 = lambda, cosPhi0 = cos$1(phi = phi / 2 + quarterPi), sinPhi0 = sin$1(phi);
}

function areaPoint(lambda, phi) {
  lambda *= radians, phi *= radians;
  phi = phi / 2 + quarterPi; // half the angular distance from south pole

  // Spherical excess E for a spherical triangle with vertices: south pole,
  // previous point, current point.  Uses a formula derived from Cagnoli’s
  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).
  var dLambda = lambda - lambda0,
      sdLambda = dLambda >= 0 ? 1 : -1,
      adLambda = sdLambda * dLambda,
      cosPhi = cos$1(phi),
      sinPhi = sin$1(phi),
      k = sinPhi0 * sinPhi,
      u = cosPhi0 * cosPhi + k * cos$1(adLambda),
      v = k * sdLambda * sin$1(adLambda);
  areaRingSum.add(atan2(v, u));

  // Advance the previous points.
  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
}

var area = function(object) {
  areaSum.reset();
  geoStream(object, areaStream);
  return areaSum * 2;
};

function spherical(cartesian) {
  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];
}

function cartesian(spherical) {
  var lambda = spherical[0], phi = spherical[1], cosPhi = cos$1(phi);
  return [cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi)];
}

function cartesianDot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}

function cartesianCross(a, b) {
  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
}

// TODO return a
function cartesianAddInPlace(a, b) {
  a[0] += b[0], a[1] += b[1], a[2] += b[2];
}

function cartesianScale(vector, k) {
  return [vector[0] * k, vector[1] * k, vector[2] * k];
}

// TODO return d
function cartesianNormalizeInPlace(d) {
  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
  d[0] /= l, d[1] /= l, d[2] /= l;
}

var lambda0$1;
var phi0;
var lambda1;
var phi1;
var lambda2;
var lambda00$1;
var phi00$1;
var p0;
var deltaSum = adder();
var ranges;
var range;

var boundsStream = {
  point: boundsPoint,
  lineStart: boundsLineStart,
  lineEnd: boundsLineEnd,
  polygonStart: function() {
    boundsStream.point = boundsRingPoint;
    boundsStream.lineStart = boundsRingStart;
    boundsStream.lineEnd = boundsRingEnd;
    deltaSum.reset();
    areaStream.polygonStart();
  },
  polygonEnd: function() {
    areaStream.polygonEnd();
    boundsStream.point = boundsPoint;
    boundsStream.lineStart = boundsLineStart;
    boundsStream.lineEnd = boundsLineEnd;
    if (areaRingSum < 0) lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);
    else if (deltaSum > epsilon$2) phi1 = 90;
    else if (deltaSum < -epsilon$2) phi0 = -90;
    range[0] = lambda0$1, range[1] = lambda1;
  }
};

function boundsPoint(lambda, phi) {
  ranges.push(range = [lambda0$1 = lambda, lambda1 = lambda]);
  if (phi < phi0) phi0 = phi;
  if (phi > phi1) phi1 = phi;
}

function linePoint(lambda, phi) {
  var p = cartesian([lambda * radians, phi * radians]);
  if (p0) {
    var normal = cartesianCross(p0, p),
        equatorial = [normal[1], -normal[0], 0],
        inflection = cartesianCross(equatorial, normal);
    cartesianNormalizeInPlace(inflection);
    inflection = spherical(inflection);
    var delta = lambda - lambda2,
        sign$$1 = delta > 0 ? 1 : -1,
        lambdai = inflection[0] * degrees$1 * sign$$1,
        phii,
        antimeridian = abs(delta) > 180;
    if (antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {
      phii = inflection[1] * degrees$1;
      if (phii > phi1) phi1 = phii;
    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {
      phii = -inflection[1] * degrees$1;
      if (phii < phi0) phi0 = phii;
    } else {
      if (phi < phi0) phi0 = phi;
      if (phi > phi1) phi1 = phi;
    }
    if (antimeridian) {
      if (lambda < lambda2) {
        if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
      } else {
        if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
      }
    } else {
      if (lambda1 >= lambda0$1) {
        if (lambda < lambda0$1) lambda0$1 = lambda;
        if (lambda > lambda1) lambda1 = lambda;
      } else {
        if (lambda > lambda2) {
          if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
        } else {
          if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
        }
      }
    }
  } else {
    ranges.push(range = [lambda0$1 = lambda, lambda1 = lambda]);
  }
  if (phi < phi0) phi0 = phi;
  if (phi > phi1) phi1 = phi;
  p0 = p, lambda2 = lambda;
}

function boundsLineStart() {
  boundsStream.point = linePoint;
}

function boundsLineEnd() {
  range[0] = lambda0$1, range[1] = lambda1;
  boundsStream.point = boundsPoint;
  p0 = null;
}

function boundsRingPoint(lambda, phi) {
  if (p0) {
    var delta = lambda - lambda2;
    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
  } else {
    lambda00$1 = lambda, phi00$1 = phi;
  }
  areaStream.point(lambda, phi);
  linePoint(lambda, phi);
}

function boundsRingStart() {
  areaStream.lineStart();
}

function boundsRingEnd() {
  boundsRingPoint(lambda00$1, phi00$1);
  areaStream.lineEnd();
  if (abs(deltaSum) > epsilon$2) lambda0$1 = -(lambda1 = 180);
  range[0] = lambda0$1, range[1] = lambda1;
  p0 = null;
}

// Finds the left-right distance between two longitudes.
// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
// the distance between ±180° to be 360°.
function angle(lambda0, lambda1) {
  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
}

function rangeCompare(a, b) {
  return a[0] - b[0];
}

function rangeContains(range, x) {
  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
}

var bounds = function(feature) {
  var i, n, a, b, merged, deltaMax, delta;

  phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);
  ranges = [];
  geoStream(feature, boundsStream);

  // First, sort ranges by their minimum longitudes.
  if (n = ranges.length) {
    ranges.sort(rangeCompare);

    // Then, merge any ranges that overlap.
    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
      b = ranges[i];
      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
      } else {
        merged.push(a = b);
      }
    }

    // Finally, find the largest gap between the merged ranges.
    // The final bounding box will be the inverse of this gap.
    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
      b = merged[i];
      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];
    }
  }

  ranges = range = null;

  return lambda0$1 === Infinity || phi0 === Infinity
      ? [[NaN, NaN], [NaN, NaN]]
      : [[lambda0$1, phi0], [lambda1, phi1]];
};

var W0;
var W1;
var X0;
var Y0;
var Z0;
var X1;
var Y1;
var Z1;
var X2;
var Y2;
var Z2;
var lambda00$2;
var phi00$2;
var x0;
var y0;
var z0; // previous point

var centroidStream = {
  sphere: noop$1,
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function() {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function() {
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  }
};

// Arithmetic mean of Cartesian vectors.
function centroidPoint(lambda, phi) {
  lambda *= radians, phi *= radians;
  var cosPhi = cos$1(phi);
  centroidPointCartesian(cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi));
}

function centroidPointCartesian(x, y, z) {
  ++W0;
  X0 += (x - X0) / W0;
  Y0 += (y - Y0) / W0;
  Z0 += (z - Z0) / W0;
}

function centroidLineStart() {
  centroidStream.point = centroidLinePointFirst;
}

function centroidLinePointFirst(lambda, phi) {
  lambda *= radians, phi *= radians;
  var cosPhi = cos$1(phi);
  x0 = cosPhi * cos$1(lambda);
  y0 = cosPhi * sin$1(lambda);
  z0 = sin$1(phi);
  centroidStream.point = centroidLinePoint;
  centroidPointCartesian(x0, y0, z0);
}

function centroidLinePoint(lambda, phi) {
  lambda *= radians, phi *= radians;
  var cosPhi = cos$1(phi),
      x = cosPhi * cos$1(lambda),
      y = cosPhi * sin$1(lambda),
      z = sin$1(phi),
      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
  W1 += w;
  X1 += w * (x0 + (x0 = x));
  Y1 += w * (y0 + (y0 = y));
  Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(x0, y0, z0);
}

function centroidLineEnd() {
  centroidStream.point = centroidPoint;
}

// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
// J. Applied Mechanics 42, 239 (1975).
function centroidRingStart() {
  centroidStream.point = centroidRingPointFirst;
}

function centroidRingEnd() {
  centroidRingPoint(lambda00$2, phi00$2);
  centroidStream.point = centroidPoint;
}

function centroidRingPointFirst(lambda, phi) {
  lambda00$2 = lambda, phi00$2 = phi;
  lambda *= radians, phi *= radians;
  centroidStream.point = centroidRingPoint;
  var cosPhi = cos$1(phi);
  x0 = cosPhi * cos$1(lambda);
  y0 = cosPhi * sin$1(lambda);
  z0 = sin$1(phi);
  centroidPointCartesian(x0, y0, z0);
}

function centroidRingPoint(lambda, phi) {
  lambda *= radians, phi *= radians;
  var cosPhi = cos$1(phi),
      x = cosPhi * cos$1(lambda),
      y = cosPhi * sin$1(lambda),
      z = sin$1(phi),
      cx = y0 * z - z0 * y,
      cy = z0 * x - x0 * z,
      cz = x0 * y - y0 * x,
      m = sqrt(cx * cx + cy * cy + cz * cz),
      w = asin(m), // line weight = angle
      v = m && -w / m; // area weight multiplier
  X2 += v * cx;
  Y2 += v * cy;
  Z2 += v * cz;
  W1 += w;
  X1 += w * (x0 + (x0 = x));
  Y1 += w * (y0 + (y0 = y));
  Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(x0, y0, z0);
}

var centroid = function(object) {
  W0 = W1 =
  X0 = Y0 = Z0 =
  X1 = Y1 = Z1 =
  X2 = Y2 = Z2 = 0;
  geoStream(object, centroidStream);

  var x = X2,
      y = Y2,
      z = Z2,
      m = x * x + y * y + z * z;

  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.
  if (m < epsilon2$1) {
    x = X1, y = Y1, z = Z1;
    // If the feature has zero length, fall back to arithmetic mean of point vectors.
    if (W1 < epsilon$2) x = X0, y = Y0, z = Z0;
    m = x * x + y * y + z * z;
    // If the feature still has an undefined ccentroid, then return.
    if (m < epsilon2$1) return [NaN, NaN];
  }

  return [atan2(y, x) * degrees$1, asin(z / sqrt(m)) * degrees$1];
};

var constant$7 = function(x) {
  return function() {
    return x;
  };
};

var compose = function(a, b) {

  function compose(x, y) {
    return x = a(x, y), b(x[0], x[1]);
  }

  if (a.invert && b.invert) compose.invert = function(x, y) {
    return x = b.invert(x, y), x && a.invert(x[0], x[1]);
  };

  return compose;
};

function rotationIdentity(lambda, phi) {
  return [lambda > pi$3 ? lambda - tau$3 : lambda < -pi$3 ? lambda + tau$3 : lambda, phi];
}

rotationIdentity.invert = rotationIdentity;

function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
  return (deltaLambda %= tau$3) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))
    : rotationLambda(deltaLambda))
    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)
    : rotationIdentity);
}

function forwardRotationLambda(deltaLambda) {
  return function(lambda, phi) {
    return lambda += deltaLambda, [lambda > pi$3 ? lambda - tau$3 : lambda < -pi$3 ? lambda + tau$3 : lambda, phi];
  };
}

function rotationLambda(deltaLambda) {
  var rotation = forwardRotationLambda(deltaLambda);
  rotation.invert = forwardRotationLambda(-deltaLambda);
  return rotation;
}

function rotationPhiGamma(deltaPhi, deltaGamma) {
  var cosDeltaPhi = cos$1(deltaPhi),
      sinDeltaPhi = sin$1(deltaPhi),
      cosDeltaGamma = cos$1(deltaGamma),
      sinDeltaGamma = sin$1(deltaGamma);

  function rotation(lambda, phi) {
    var cosPhi = cos$1(phi),
        x = cos$1(lambda) * cosPhi,
        y = sin$1(lambda) * cosPhi,
        z = sin$1(phi),
        k = z * cosDeltaPhi + x * sinDeltaPhi;
    return [
      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),
      asin(k * cosDeltaGamma + y * sinDeltaGamma)
    ];
  }

  rotation.invert = function(lambda, phi) {
    var cosPhi = cos$1(phi),
        x = cos$1(lambda) * cosPhi,
        y = sin$1(lambda) * cosPhi,
        z = sin$1(phi),
        k = z * cosDeltaGamma - y * sinDeltaGamma;
    return [
      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),
      asin(k * cosDeltaPhi - x * sinDeltaPhi)
    ];
  };

  return rotation;
}

var rotation = function(rotate) {
  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);

  function forward(coordinates) {
    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);
    return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;
  }

  forward.invert = function(coordinates) {
    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);
    return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;
  };

  return forward;
};

// Generates a circle centered at [0°, 0°], with a given radius and precision.
function circleStream(stream, radius, delta, direction, t0, t1) {
  if (!delta) return;
  var cosRadius = cos$1(radius),
      sinRadius = sin$1(radius),
      step = direction * delta;
  if (t0 == null) {
    t0 = radius + direction * tau$3;
    t1 = radius - step / 2;
  } else {
    t0 = circleRadius(cosRadius, t0);
    t1 = circleRadius(cosRadius, t1);
    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau$3;
  }
  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
    point = spherical([cosRadius, -sinRadius * cos$1(t), -sinRadius * sin$1(t)]);
    stream.point(point[0], point[1]);
  }
}

// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].
function circleRadius(cosRadius, point) {
  point = cartesian(point), point[0] -= cosRadius;
  cartesianNormalizeInPlace(point);
  var radius = acos(-point[1]);
  return ((-point[2] < 0 ? -radius : radius) + tau$3 - epsilon$2) % tau$3;
}

var circle = function() {
  var center = constant$7([0, 0]),
      radius = constant$7(90),
      precision = constant$7(6),
      ring,
      rotate,
      stream = {point: point};

  function point(x, y) {
    ring.push(x = rotate(x, y));
    x[0] *= degrees$1, x[1] *= degrees$1;
  }

  function circle() {
    var c = center.apply(this, arguments),
        r = radius.apply(this, arguments) * radians,
        p = precision.apply(this, arguments) * radians;
    ring = [];
    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;
    circleStream(stream, r, p, 1);
    c = {type: "Polygon", coordinates: [ring]};
    ring = rotate = null;
    return c;
  }

  circle.center = function(_) {
    return arguments.length ? (center = typeof _ === "function" ? _ : constant$7([+_[0], +_[1]]), circle) : center;
  };

  circle.radius = function(_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : constant$7(+_), circle) : radius;
  };

  circle.precision = function(_) {
    return arguments.length ? (precision = typeof _ === "function" ? _ : constant$7(+_), circle) : precision;
  };

  return circle;
};

var clipBuffer = function() {
  var lines = [],
      line;
  return {
    point: function(x, y) {
      line.push([x, y]);
    },
    lineStart: function() {
      lines.push(line = []);
    },
    lineEnd: noop$1,
    rejoin: function() {
      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
    },
    result: function() {
      var result = lines;
      lines = [];
      line = null;
      return result;
    }
  };
};

var clipLine = function(a, b, x0, y0, x1, y1) {
  var ax = a[0],
      ay = a[1],
      bx = b[0],
      by = b[1],
      t0 = 0,
      t1 = 1,
      dx = bx - ax,
      dy = by - ay,
      r;

  r = x0 - ax;
  if (!dx && r > 0) return;
  r /= dx;
  if (dx < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dx > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = x1 - ax;
  if (!dx && r < 0) return;
  r /= dx;
  if (dx < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dx > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  r = y0 - ay;
  if (!dy && r > 0) return;
  r /= dy;
  if (dy < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dy > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = y1 - ay;
  if (!dy && r < 0) return;
  r /= dy;
  if (dy < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dy > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
  return true;
};

var pointEqual = function(a, b) {
  return abs(a[0] - b[0]) < epsilon$2 && abs(a[1] - b[1]) < epsilon$2;
};

function Intersection(point, points, other, entry) {
  this.x = point;
  this.z = points;
  this.o = other; // another intersection
  this.e = entry; // is an entry?
  this.v = false; // visited
  this.n = this.p = null; // next & previous
}

// A generalized polygon clipping algorithm: given a polygon that has been cut
// into its visible line segments, and rejoins the segments by interpolating
// along the clip edge.
var clipPolygon = function(segments, compareIntersection, startInside, interpolate, stream) {
  var subject = [],
      clip = [],
      i,
      n;

  segments.forEach(function(segment) {
    if ((n = segment.length - 1) <= 0) return;
    var n, p0 = segment[0], p1 = segment[n], x;

    // If the first and last points of a segment are coincident, then treat as a
    // closed ring. TODO if all rings are closed, then the winding order of the
    // exterior ring should be checked.
    if (pointEqual(p0, p1)) {
      stream.lineStart();
      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);
      stream.lineEnd();
      return;
    }

    subject.push(x = new Intersection(p0, segment, null, true));
    clip.push(x.o = new Intersection(p0, null, x, false));
    subject.push(x = new Intersection(p1, segment, null, false));
    clip.push(x.o = new Intersection(p1, null, x, true));
  });

  if (!subject.length) return;

  clip.sort(compareIntersection);
  link$1(subject);
  link$1(clip);

  for (i = 0, n = clip.length; i < n; ++i) {
    clip[i].e = startInside = !startInside;
  }

  var start = subject[0],
      points,
      point;

  while (1) {
    // Find first unvisited intersection.
    var current = start,
        isSubject = true;
    while (current.v) if ((current = current.n) === start) return;
    points = current.z;
    stream.lineStart();
    do {
      current.v = current.o.v = true;
      if (current.e) {
        if (isSubject) {
          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);
        } else {
          interpolate(current.x, current.n.x, 1, stream);
        }
        current = current.n;
      } else {
        if (isSubject) {
          points = current.p.z;
          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);
        } else {
          interpolate(current.x, current.p.x, -1, stream);
        }
        current = current.p;
      }
      current = current.o;
      points = current.z;
      isSubject = !isSubject;
    } while (!current.v);
    stream.lineEnd();
  }
};

function link$1(array) {
  if (!(n = array.length)) return;
  var n,
      i = 0,
      a = array[0],
      b;
  while (++i < n) {
    a.n = b = array[i];
    b.p = a;
    a = b;
  }
  a.n = b = array[0];
  b.p = a;
}

var clipMax = 1e9;
var clipMin = -clipMax;

// TODO Use d3-polygon’s polygonContains here for the ring check?
// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

function clipExtent(x0, y0, x1, y1) {

  function visible(x, y) {
    return x0 <= x && x <= x1 && y0 <= y && y <= y1;
  }

  function interpolate(from, to, direction, stream) {
    var a = 0, a1 = 0;
    if (from == null
        || (a = corner(from, direction)) !== (a1 = corner(to, direction))
        || comparePoint(from, to) < 0 ^ direction > 0) {
      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
      while ((a = (a + direction + 4) % 4) !== a1);
    } else {
      stream.point(to[0], to[1]);
    }
  }

  function corner(p, direction) {
    return abs(p[0] - x0) < epsilon$2 ? direction > 0 ? 0 : 3
        : abs(p[0] - x1) < epsilon$2 ? direction > 0 ? 2 : 1
        : abs(p[1] - y0) < epsilon$2 ? direction > 0 ? 1 : 0
        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
  }

  function compareIntersection(a, b) {
    return comparePoint(a.x, b.x);
  }

  function comparePoint(a, b) {
    var ca = corner(a, 1),
        cb = corner(b, 1);
    return ca !== cb ? ca - cb
        : ca === 0 ? b[1] - a[1]
        : ca === 1 ? a[0] - b[0]
        : ca === 2 ? a[1] - b[1]
        : b[0] - a[0];
  }

  return function(stream) {
    var activeStream = stream,
        bufferStream = clipBuffer(),
        segments,
        polygon,
        ring,
        x__, y__, v__, // first point
        x_, y_, v_, // previous point
        first,
        clean;

    var clipStream = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: polygonStart,
      polygonEnd: polygonEnd
    };

    function point(x, y) {
      if (visible(x, y)) activeStream.point(x, y);
    }

    function polygonInside() {
      var winding = 0;

      for (var i = 0, n = polygon.length; i < n; ++i) {
        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];
          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }
          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }
        }
      }

      return winding;
    }

    // Buffer geometry within a polygon and then clip it en masse.
    function polygonStart() {
      activeStream = bufferStream, segments = [], polygon = [], clean = true;
    }

    function polygonEnd() {
      var startInside = polygonInside(),
          cleanInside = clean && startInside,
          visible = (segments = merge(segments)).length;
      if (cleanInside || visible) {
        stream.polygonStart();
        if (cleanInside) {
          stream.lineStart();
          interpolate(null, null, 1, stream);
          stream.lineEnd();
        }
        if (visible) {
          clipPolygon(segments, compareIntersection, startInside, interpolate, stream);
        }
        stream.polygonEnd();
      }
      activeStream = stream, segments = polygon = ring = null;
    }

    function lineStart() {
      clipStream.point = linePoint;
      if (polygon) polygon.push(ring = []);
      first = true;
      v_ = false;
      x_ = y_ = NaN;
    }

    // TODO rather than special-case polygons, simply handle them separately.
    // Ideally, coincident intersection points should be jittered to avoid
    // clipping issues.
    function lineEnd() {
      if (segments) {
        linePoint(x__, y__);
        if (v__ && v_) bufferStream.rejoin();
        segments.push(bufferStream.result());
      }
      clipStream.point = point;
      if (v_) activeStream.lineEnd();
    }

    function linePoint(x, y) {
      var v = visible(x, y);
      if (polygon) ring.push([x, y]);
      if (first) {
        x__ = x, y__ = y, v__ = v;
        first = false;
        if (v) {
          activeStream.lineStart();
          activeStream.point(x, y);
        }
      } else {
        if (v && v_) activeStream.point(x, y);
        else {
          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];
          if (clipLine(a, b, x0, y0, x1, y1)) {
            if (!v_) {
              activeStream.lineStart();
              activeStream.point(a[0], a[1]);
            }
            activeStream.point(b[0], b[1]);
            if (!v) activeStream.lineEnd();
            clean = false;
          } else if (v) {
            activeStream.lineStart();
            activeStream.point(x, y);
            clean = false;
          }
        }
      }
      x_ = x, y_ = y, v_ = v;
    }

    return clipStream;
  };
}

var extent$1 = function() {
  var x0 = 0,
      y0 = 0,
      x1 = 960,
      y1 = 500,
      cache,
      cacheStream,
      clip;

  return clip = {
    stream: function(stream) {
      return cache && cacheStream === stream ? cache : cache = clipExtent(x0, y0, x1, y1)(cacheStream = stream);
    },
    extent: function(_) {
      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];
    }
  };
};

var sum$1 = adder();

var polygonContains = function(polygon, point) {
  var lambda = point[0],
      phi = point[1],
      normal = [sin$1(lambda), -cos$1(lambda), 0],
      angle = 0,
      winding = 0;

  sum$1.reset();

  for (var i = 0, n = polygon.length; i < n; ++i) {
    if (!(m = (ring = polygon[i]).length)) continue;
    var ring,
        m,
        point0 = ring[m - 1],
        lambda0 = point0[0],
        phi0 = point0[1] / 2 + quarterPi,
        sinPhi0 = sin$1(phi0),
        cosPhi0 = cos$1(phi0);

    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
      var point1 = ring[j],
          lambda1 = point1[0],
          phi1 = point1[1] / 2 + quarterPi,
          sinPhi1 = sin$1(phi1),
          cosPhi1 = cos$1(phi1),
          delta = lambda1 - lambda0,
          sign$$1 = delta >= 0 ? 1 : -1,
          absDelta = sign$$1 * delta,
          antimeridian = absDelta > pi$3,
          k = sinPhi0 * sinPhi1;

      sum$1.add(atan2(k * sign$$1 * sin$1(absDelta), cosPhi0 * cosPhi1 + k * cos$1(absDelta)));
      angle += antimeridian ? delta + sign$$1 * tau$3 : delta;

      // Are the longitudes either side of the point’s meridian (lambda),
      // and are the latitudes smaller than the parallel (phi)?
      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
        var arc = cartesianCross(cartesian(point0), cartesian(point1));
        cartesianNormalizeInPlace(arc);
        var intersection = cartesianCross(normal, arc);
        cartesianNormalizeInPlace(intersection);
        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);
        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
          winding += antimeridian ^ delta >= 0 ? 1 : -1;
        }
      }
    }
  }

  // First, determine whether the South pole is inside or outside:
  //
  // It is inside if:
  // * the polygon winds around it in a clockwise direction.
  // * the polygon does not (cumulatively) wind around it, but has a negative
  //   (counter-clockwise) area.
  //
  // Second, count the (signed) number of times a segment crosses a lambda
  // from the point to the South pole.  If it is zero, then the point is the
  // same side as the South pole.

  return (angle < -epsilon$2 || angle < epsilon$2 && sum$1 < -epsilon$2) ^ (winding & 1);
};

var lengthSum = adder();
var lambda0$2;
var sinPhi0$1;
var cosPhi0$1;

var lengthStream = {
  sphere: noop$1,
  point: noop$1,
  lineStart: lengthLineStart,
  lineEnd: noop$1,
  polygonStart: noop$1,
  polygonEnd: noop$1
};

function lengthLineStart() {
  lengthStream.point = lengthPointFirst;
  lengthStream.lineEnd = lengthLineEnd;
}

function lengthLineEnd() {
  lengthStream.point = lengthStream.lineEnd = noop$1;
}

function lengthPointFirst(lambda, phi) {
  lambda *= radians, phi *= radians;
  lambda0$2 = lambda, sinPhi0$1 = sin$1(phi), cosPhi0$1 = cos$1(phi);
  lengthStream.point = lengthPoint;
}

function lengthPoint(lambda, phi) {
  lambda *= radians, phi *= radians;
  var sinPhi = sin$1(phi),
      cosPhi = cos$1(phi),
      delta = abs(lambda - lambda0$2),
      cosDelta = cos$1(delta),
      sinDelta = sin$1(delta),
      x = cosPhi * sinDelta,
      y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta,
      z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;
  lengthSum.add(atan2(sqrt(x * x + y * y), z));
  lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi;
}

var length$1 = function(object) {
  lengthSum.reset();
  geoStream(object, lengthStream);
  return +lengthSum;
};

var coordinates = [null, null];
var object$1 = {type: "LineString", coordinates: coordinates};

var distance = function(a, b) {
  coordinates[0] = a;
  coordinates[1] = b;
  return length$1(object$1);
};

var containsObjectType = {
  Feature: function(object, point) {
    return containsGeometry(object.geometry, point);
  },
  FeatureCollection: function(object, point) {
    var features = object.features, i = -1, n = features.length;
    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;
    return false;
  }
};

var containsGeometryType = {
  Sphere: function() {
    return true;
  },
  Point: function(object, point) {
    return containsPoint(object.coordinates, point);
  },
  MultiPoint: function(object, point) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) if (containsPoint(coordinates[i], point)) return true;
    return false;
  },
  LineString: function(object, point) {
    return containsLine(object.coordinates, point);
  },
  MultiLineString: function(object, point) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) if (containsLine(coordinates[i], point)) return true;
    return false;
  },
  Polygon: function(object, point) {
    return containsPolygon(object.coordinates, point);
  },
  MultiPolygon: function(object, point) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;
    return false;
  },
  GeometryCollection: function(object, point) {
    var geometries = object.geometries, i = -1, n = geometries.length;
    while (++i < n) if (containsGeometry(geometries[i], point)) return true;
    return false;
  }
};

function containsGeometry(geometry, point) {
  return geometry && containsGeometryType.hasOwnProperty(geometry.type)
      ? containsGeometryType[geometry.type](geometry, point)
      : false;
}

function containsPoint(coordinates, point) {
  return distance(coordinates, point) === 0;
}

function containsLine(coordinates, point) {
  var ab = distance(coordinates[0], coordinates[1]),
      ao = distance(coordinates[0], point),
      ob = distance(point, coordinates[1]);
  return ao + ob <= ab + epsilon$2;
}

function containsPolygon(coordinates, point) {
  return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));
}

function ringRadians(ring) {
  return ring = ring.map(pointRadians), ring.pop(), ring;
}

function pointRadians(point) {
  return [point[0] * radians, point[1] * radians];
}

var contains = function(object, point) {
  return (object && containsObjectType.hasOwnProperty(object.type)
      ? containsObjectType[object.type]
      : containsGeometry)(object, point);
};

function graticuleX(y0, y1, dy) {
  var y = sequence(y0, y1 - epsilon$2, dy).concat(y1);
  return function(x) { return y.map(function(y) { return [x, y]; }); };
}

function graticuleY(x0, x1, dx) {
  var x = sequence(x0, x1 - epsilon$2, dx).concat(x1);
  return function(y) { return x.map(function(x) { return [x, y]; }); };
}

function graticule() {
  var x1, x0, X1, X0,
      y1, y0, Y1, Y0,
      dx = 10, dy = dx, DX = 90, DY = 360,
      x, y, X, Y,
      precision = 2.5;

  function graticule() {
    return {type: "MultiLineString", coordinates: lines()};
  }

  function lines() {
    return sequence(ceil(X0 / DX) * DX, X1, DX).map(X)
        .concat(sequence(ceil(Y0 / DY) * DY, Y1, DY).map(Y))
        .concat(sequence(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon$2; }).map(x))
        .concat(sequence(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon$2; }).map(y));
  }

  graticule.lines = function() {
    return lines().map(function(coordinates) { return {type: "LineString", coordinates: coordinates}; });
  };

  graticule.outline = function() {
    return {
      type: "Polygon",
      coordinates: [
        X(X0).concat(
        Y(Y1).slice(1),
        X(X1).reverse().slice(1),
        Y(Y0).reverse().slice(1))
      ]
    };
  };

  graticule.extent = function(_) {
    if (!arguments.length) return graticule.extentMinor();
    return graticule.extentMajor(_).extentMinor(_);
  };

  graticule.extentMajor = function(_) {
    if (!arguments.length) return [[X0, Y0], [X1, Y1]];
    X0 = +_[0][0], X1 = +_[1][0];
    Y0 = +_[0][1], Y1 = +_[1][1];
    if (X0 > X1) _ = X0, X0 = X1, X1 = _;
    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
    return graticule.precision(precision);
  };

  graticule.extentMinor = function(_) {
    if (!arguments.length) return [[x0, y0], [x1, y1]];
    x0 = +_[0][0], x1 = +_[1][0];
    y0 = +_[0][1], y1 = +_[1][1];
    if (x0 > x1) _ = x0, x0 = x1, x1 = _;
    if (y0 > y1) _ = y0, y0 = y1, y1 = _;
    return graticule.precision(precision);
  };

  graticule.step = function(_) {
    if (!arguments.length) return graticule.stepMinor();
    return graticule.stepMajor(_).stepMinor(_);
  };

  graticule.stepMajor = function(_) {
    if (!arguments.length) return [DX, DY];
    DX = +_[0], DY = +_[1];
    return graticule;
  };

  graticule.stepMinor = function(_) {
    if (!arguments.length) return [dx, dy];
    dx = +_[0], dy = +_[1];
    return graticule;
  };

  graticule.precision = function(_) {
    if (!arguments.length) return precision;
    precision = +_;
    x = graticuleX(y0, y1, 90);
    y = graticuleY(x0, x1, precision);
    X = graticuleX(Y0, Y1, 90);
    Y = graticuleY(X0, X1, precision);
    return graticule;
  };

  return graticule
      .extentMajor([[-180, -90 + epsilon$2], [180, 90 - epsilon$2]])
      .extentMinor([[-180, -80 - epsilon$2], [180, 80 + epsilon$2]]);
}

function graticule10() {
  return graticule()();
}

var interpolate$1 = function(a, b) {
  var x0 = a[0] * radians,
      y0 = a[1] * radians,
      x1 = b[0] * radians,
      y1 = b[1] * radians,
      cy0 = cos$1(y0),
      sy0 = sin$1(y0),
      cy1 = cos$1(y1),
      sy1 = sin$1(y1),
      kx0 = cy0 * cos$1(x0),
      ky0 = cy0 * sin$1(x0),
      kx1 = cy1 * cos$1(x1),
      ky1 = cy1 * sin$1(x1),
      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),
      k = sin$1(d);

  var interpolate = d ? function(t) {
    var B = sin$1(t *= d) / k,
        A = sin$1(d - t) / k,
        x = A * kx0 + B * kx1,
        y = A * ky0 + B * ky1,
        z = A * sy0 + B * sy1;
    return [
      atan2(y, x) * degrees$1,
      atan2(z, sqrt(x * x + y * y)) * degrees$1
    ];
  } : function() {
    return [x0 * degrees$1, y0 * degrees$1];
  };

  interpolate.distance = d;

  return interpolate;
};

var identity$4 = function(x) {
  return x;
};

var areaSum$1 = adder();
var areaRingSum$1 = adder();
var x00;
var y00;
var x0$1;
var y0$1;

var areaStream$1 = {
  point: noop$1,
  lineStart: noop$1,
  lineEnd: noop$1,
  polygonStart: function() {
    areaStream$1.lineStart = areaRingStart$1;
    areaStream$1.lineEnd = areaRingEnd$1;
  },
  polygonEnd: function() {
    areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop$1;
    areaSum$1.add(abs(areaRingSum$1));
    areaRingSum$1.reset();
  },
  result: function() {
    var area = areaSum$1 / 2;
    areaSum$1.reset();
    return area;
  }
};

function areaRingStart$1() {
  areaStream$1.point = areaPointFirst$1;
}

function areaPointFirst$1(x, y) {
  areaStream$1.point = areaPoint$1;
  x00 = x0$1 = x, y00 = y0$1 = y;
}

function areaPoint$1(x, y) {
  areaRingSum$1.add(y0$1 * x - x0$1 * y);
  x0$1 = x, y0$1 = y;
}

function areaRingEnd$1() {
  areaPoint$1(x00, y00);
}

var x0$2 = Infinity;
var y0$2 = x0$2;
var x1 = -x0$2;
var y1 = x1;

var boundsStream$1 = {
  point: boundsPoint$1,
  lineStart: noop$1,
  lineEnd: noop$1,
  polygonStart: noop$1,
  polygonEnd: noop$1,
  result: function() {
    var bounds = [[x0$2, y0$2], [x1, y1]];
    x1 = y1 = -(y0$2 = x0$2 = Infinity);
    return bounds;
  }
};

function boundsPoint$1(x, y) {
  if (x < x0$2) x0$2 = x;
  if (x > x1) x1 = x;
  if (y < y0$2) y0$2 = y;
  if (y > y1) y1 = y;
}

// TODO Enforce positive area for exterior, negative area for interior?

var X0$1 = 0;
var Y0$1 = 0;
var Z0$1 = 0;
var X1$1 = 0;
var Y1$1 = 0;
var Z1$1 = 0;
var X2$1 = 0;
var Y2$1 = 0;
var Z2$1 = 0;
var x00$1;
var y00$1;
var x0$3;
var y0$3;

var centroidStream$1 = {
  point: centroidPoint$1,
  lineStart: centroidLineStart$1,
  lineEnd: centroidLineEnd$1,
  polygonStart: function() {
    centroidStream$1.lineStart = centroidRingStart$1;
    centroidStream$1.lineEnd = centroidRingEnd$1;
  },
  polygonEnd: function() {
    centroidStream$1.point = centroidPoint$1;
    centroidStream$1.lineStart = centroidLineStart$1;
    centroidStream$1.lineEnd = centroidLineEnd$1;
  },
  result: function() {
    var centroid = Z2$1 ? [X2$1 / Z2$1, Y2$1 / Z2$1]
        : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1]
        : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1]
        : [NaN, NaN];
    X0$1 = Y0$1 = Z0$1 =
    X1$1 = Y1$1 = Z1$1 =
    X2$1 = Y2$1 = Z2$1 = 0;
    return centroid;
  }
};

function centroidPoint$1(x, y) {
  X0$1 += x;
  Y0$1 += y;
  ++Z0$1;
}

function centroidLineStart$1() {
  centroidStream$1.point = centroidPointFirstLine;
}

function centroidPointFirstLine(x, y) {
  centroidStream$1.point = centroidPointLine;
  centroidPoint$1(x0$3 = x, y0$3 = y);
}

function centroidPointLine(x, y) {
  var dx = x - x0$3, dy = y - y0$3, z = sqrt(dx * dx + dy * dy);
  X1$1 += z * (x0$3 + x) / 2;
  Y1$1 += z * (y0$3 + y) / 2;
  Z1$1 += z;
  centroidPoint$1(x0$3 = x, y0$3 = y);
}

function centroidLineEnd$1() {
  centroidStream$1.point = centroidPoint$1;
}

function centroidRingStart$1() {
  centroidStream$1.point = centroidPointFirstRing;
}

function centroidRingEnd$1() {
  centroidPointRing(x00$1, y00$1);
}

function centroidPointFirstRing(x, y) {
  centroidStream$1.point = centroidPointRing;
  centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);
}

function centroidPointRing(x, y) {
  var dx = x - x0$3,
      dy = y - y0$3,
      z = sqrt(dx * dx + dy * dy);

  X1$1 += z * (x0$3 + x) / 2;
  Y1$1 += z * (y0$3 + y) / 2;
  Z1$1 += z;

  z = y0$3 * x - x0$3 * y;
  X2$1 += z * (x0$3 + x);
  Y2$1 += z * (y0$3 + y);
  Z2$1 += z * 3;
  centroidPoint$1(x0$3 = x, y0$3 = y);
}

function PathContext(context) {
  this._context = context;
}

PathContext.prototype = {
  _radius: 4.5,
  pointRadius: function(_) {
    return this._radius = _, this;
  },
  polygonStart: function() {
    this._line = 0;
  },
  polygonEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line === 0) this._context.closePath();
    this._point = NaN;
  },
  point: function(x, y) {
    switch (this._point) {
      case 0: {
        this._context.moveTo(x, y);
        this._point = 1;
        break;
      }
      case 1: {
        this._context.lineTo(x, y);
        break;
      }
      default: {
        this._context.moveTo(x + this._radius, y);
        this._context.arc(x, y, this._radius, 0, tau$3);
        break;
      }
    }
  },
  result: noop$1
};

var lengthSum$1 = adder();
var lengthRing;
var x00$2;
var y00$2;
var x0$4;
var y0$4;

var lengthStream$1 = {
  point: noop$1,
  lineStart: function() {
    lengthStream$1.point = lengthPointFirst$1;
  },
  lineEnd: function() {
    if (lengthRing) lengthPoint$1(x00$2, y00$2);
    lengthStream$1.point = noop$1;
  },
  polygonStart: function() {
    lengthRing = true;
  },
  polygonEnd: function() {
    lengthRing = null;
  },
  result: function() {
    var length = +lengthSum$1;
    lengthSum$1.reset();
    return length;
  }
};

function lengthPointFirst$1(x, y) {
  lengthStream$1.point = lengthPoint$1;
  x00$2 = x0$4 = x, y00$2 = y0$4 = y;
}

function lengthPoint$1(x, y) {
  x0$4 -= x, y0$4 -= y;
  lengthSum$1.add(sqrt(x0$4 * x0$4 + y0$4 * y0$4));
  x0$4 = x, y0$4 = y;
}

function PathString() {
  this._string = [];
}

PathString.prototype = {
  _circle: circle$1(4.5),
  pointRadius: function(_) {
    return this._circle = circle$1(_), this;
  },
  polygonStart: function() {
    this._line = 0;
  },
  polygonEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line === 0) this._string.push("Z");
    this._point = NaN;
  },
  point: function(x, y) {
    switch (this._point) {
      case 0: {
        this._string.push("M", x, ",", y);
        this._point = 1;
        break;
      }
      case 1: {
        this._string.push("L", x, ",", y);
        break;
      }
      default: {
        this._string.push("M", x, ",", y, this._circle);
        break;
      }
    }
  },
  result: function() {
    if (this._string.length) {
      var result = this._string.join("");
      this._string = [];
      return result;
    }
  }
};

function circle$1(radius) {
  return "m0," + radius
      + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius
      + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius
      + "z";
}

var index$1 = function(projection, context) {
  var pointRadius = 4.5,
      projectionStream,
      contextStream;

  function path(object) {
    if (object) {
      if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
      geoStream(object, projectionStream(contextStream));
    }
    return contextStream.result();
  }

  path.area = function(object) {
    geoStream(object, projectionStream(areaStream$1));
    return areaStream$1.result();
  };

  path.measure = function(object) {
    geoStream(object, projectionStream(lengthStream$1));
    return lengthStream$1.result();
  };

  path.bounds = function(object) {
    geoStream(object, projectionStream(boundsStream$1));
    return boundsStream$1.result();
  };

  path.centroid = function(object) {
    geoStream(object, projectionStream(centroidStream$1));
    return centroidStream$1.result();
  };

  path.projection = function(_) {
    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity$4) : (projection = _).stream, path) : projection;
  };

  path.context = function(_) {
    if (!arguments.length) return context;
    contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);
    if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
    return path;
  };

  path.pointRadius = function(_) {
    if (!arguments.length) return pointRadius;
    pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
    return path;
  };

  return path.projection(projection).context(context);
};

var clip = function(pointVisible, clipLine, interpolate, start) {
  return function(rotate, sink) {
    var line = clipLine(sink),
        rotatedStart = rotate.invert(start[0], start[1]),
        ringBuffer = clipBuffer(),
        ringSink = clipLine(ringBuffer),
        polygonStarted = false,
        polygon,
        segments,
        ring;

    var clip = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function() {
        clip.point = pointRing;
        clip.lineStart = ringStart;
        clip.lineEnd = ringEnd;
        segments = [];
        polygon = [];
      },
      polygonEnd: function() {
        clip.point = point;
        clip.lineStart = lineStart;
        clip.lineEnd = lineEnd;
        segments = merge(segments);
        var startInside = polygonContains(polygon, rotatedStart);
        if (segments.length) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          clipPolygon(segments, compareIntersection, startInside, interpolate, sink);
        } else if (startInside) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          interpolate(null, null, 1, sink);
          sink.lineEnd();
        }
        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
        segments = polygon = null;
      },
      sphere: function() {
        sink.polygonStart();
        sink.lineStart();
        interpolate(null, null, 1, sink);
        sink.lineEnd();
        sink.polygonEnd();
      }
    };

    function point(lambda, phi) {
      var point = rotate(lambda, phi);
      if (pointVisible(lambda = point[0], phi = point[1])) sink.point(lambda, phi);
    }

    function pointLine(lambda, phi) {
      var point = rotate(lambda, phi);
      line.point(point[0], point[1]);
    }

    function lineStart() {
      clip.point = pointLine;
      line.lineStart();
    }

    function lineEnd() {
      clip.point = point;
      line.lineEnd();
    }

    function pointRing(lambda, phi) {
      ring.push([lambda, phi]);
      var point = rotate(lambda, phi);
      ringSink.point(point[0], point[1]);
    }

    function ringStart() {
      ringSink.lineStart();
      ring = [];
    }

    function ringEnd() {
      pointRing(ring[0][0], ring[0][1]);
      ringSink.lineEnd();

      var clean = ringSink.clean(),
          ringSegments = ringBuffer.result(),
          i, n = ringSegments.length, m,
          segment,
          point;

      ring.pop();
      polygon.push(ring);
      ring = null;

      if (!n) return;

      // No intersections.
      if (clean & 1) {
        segment = ringSegments[0];
        if ((m = segment.length - 1) > 0) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);
          sink.lineEnd();
        }
        return;
      }

      // Rejoin connected segments.
      // TODO reuse ringBuffer.rejoin()?
      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));

      segments.push(ringSegments.filter(validSegment));
    }

    return clip;
  };
};

function validSegment(segment) {
  return segment.length > 1;
}

// Intersections are sorted along the clip edge. For both antimeridian cutting
// and circle clipping, the same comparison is used.
function compareIntersection(a, b) {
  return ((a = a.x)[0] < 0 ? a[1] - halfPi$2 - epsilon$2 : halfPi$2 - a[1])
       - ((b = b.x)[0] < 0 ? b[1] - halfPi$2 - epsilon$2 : halfPi$2 - b[1]);
}

var clipAntimeridian = clip(
  function() { return true; },
  clipAntimeridianLine,
  clipAntimeridianInterpolate,
  [-pi$3, -halfPi$2]
);

// Takes a line and cuts into visible segments. Return values: 0 - there were
// intersections or the line was empty; 1 - no intersections; 2 - there were
// intersections, and the first and last segments should be rejoined.
function clipAntimeridianLine(stream) {
  var lambda0 = NaN,
      phi0 = NaN,
      sign0 = NaN,
      clean; // no intersections

  return {
    lineStart: function() {
      stream.lineStart();
      clean = 1;
    },
    point: function(lambda1, phi1) {
      var sign1 = lambda1 > 0 ? pi$3 : -pi$3,
          delta = abs(lambda1 - lambda0);
      if (abs(delta - pi$3) < epsilon$2) { // line crosses a pole
        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi$2 : -halfPi$2);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        stream.point(lambda1, phi0);
        clean = 0;
      } else if (sign0 !== sign1 && delta >= pi$3) { // line crosses antimeridian
        if (abs(lambda0 - sign0) < epsilon$2) lambda0 -= sign0 * epsilon$2; // handle degeneracies
        if (abs(lambda1 - sign1) < epsilon$2) lambda1 -= sign1 * epsilon$2;
        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        clean = 0;
      }
      stream.point(lambda0 = lambda1, phi0 = phi1);
      sign0 = sign1;
    },
    lineEnd: function() {
      stream.lineEnd();
      lambda0 = phi0 = NaN;
    },
    clean: function() {
      return 2 - clean; // if intersections, rejoin first and last segments
    }
  };
}

function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
  var cosPhi0,
      cosPhi1,
      sinLambda0Lambda1 = sin$1(lambda0 - lambda1);
  return abs(sinLambda0Lambda1) > epsilon$2
      ? atan((sin$1(phi0) * (cosPhi1 = cos$1(phi1)) * sin$1(lambda1)
          - sin$1(phi1) * (cosPhi0 = cos$1(phi0)) * sin$1(lambda0))
          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))
      : (phi0 + phi1) / 2;
}

function clipAntimeridianInterpolate(from, to, direction, stream) {
  var phi;
  if (from == null) {
    phi = direction * halfPi$2;
    stream.point(-pi$3, phi);
    stream.point(0, phi);
    stream.point(pi$3, phi);
    stream.point(pi$3, 0);
    stream.point(pi$3, -phi);
    stream.point(0, -phi);
    stream.point(-pi$3, -phi);
    stream.point(-pi$3, 0);
    stream.point(-pi$3, phi);
  } else if (abs(from[0] - to[0]) > epsilon$2) {
    var lambda = from[0] < to[0] ? pi$3 : -pi$3;
    phi = direction * lambda / 2;
    stream.point(-lambda, phi);
    stream.point(0, phi);
    stream.point(lambda, phi);
  } else {
    stream.point(to[0], to[1]);
  }
}

var clipCircle = function(radius, delta) {
  var cr = cos$1(radius),
      smallRadius = cr > 0,
      notHemisphere = abs(cr) > epsilon$2; // TODO optimise for this common case

  function interpolate(from, to, direction, stream) {
    circleStream(stream, radius, delta, direction, from, to);
  }

  function visible(lambda, phi) {
    return cos$1(lambda) * cos$1(phi) > cr;
  }

  // Takes a line and cuts into visible segments. Return values used for polygon
  // clipping: 0 - there were intersections or the line was empty; 1 - no
  // intersections 2 - there were intersections, and the first and last segments
  // should be rejoined.
  function clipLine(stream) {
    var point0, // previous point
        c0, // code for previous point
        v0, // visibility of previous point
        v00, // visibility of first point
        clean; // no intersections
    return {
      lineStart: function() {
        v00 = v0 = false;
        clean = 1;
      },
      point: function(lambda, phi) {
        var point1 = [lambda, phi],
            point2,
            v = visible(lambda, phi),
            c = smallRadius
              ? v ? 0 : code(lambda, phi)
              : v ? code(lambda + (lambda < 0 ? pi$3 : -pi$3), phi) : 0;
        if (!point0 && (v00 = v0 = v)) stream.lineStart();
        // Handle degeneracies.
        // TODO ignore if not clipping polygons.
        if (v !== v0) {
          point2 = intersect(point0, point1);
          if (pointEqual(point0, point2) || pointEqual(point1, point2)) {
            point1[0] += epsilon$2;
            point1[1] += epsilon$2;
            v = visible(point1[0], point1[1]);
          }
        }
        if (v !== v0) {
          clean = 0;
          if (v) {
            // outside going in
            stream.lineStart();
            point2 = intersect(point1, point0);
            stream.point(point2[0], point2[1]);
          } else {
            // inside going out
            point2 = intersect(point0, point1);
            stream.point(point2[0], point2[1]);
            stream.lineEnd();
          }
          point0 = point2;
        } else if (notHemisphere && point0 && smallRadius ^ v) {
          var t;
          // If the codes for two points are different, or are both zero,
          // and there this segment intersects with the small circle.
          if (!(c & c0) && (t = intersect(point1, point0, true))) {
            clean = 0;
            if (smallRadius) {
              stream.lineStart();
              stream.point(t[0][0], t[0][1]);
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
            } else {
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
              stream.lineStart();
              stream.point(t[0][0], t[0][1]);
            }
          }
        }
        if (v && (!point0 || !pointEqual(point0, point1))) {
          stream.point(point1[0], point1[1]);
        }
        point0 = point1, v0 = v, c0 = c;
      },
      lineEnd: function() {
        if (v0) stream.lineEnd();
        point0 = null;
      },
      // Rejoin first and last segments if there were intersections and the first
      // and last points were visible.
      clean: function() {
        return clean | ((v00 && v0) << 1);
      }
    };
  }

  // Intersects the great circle between a and b with the clip circle.
  function intersect(a, b, two) {
    var pa = cartesian(a),
        pb = cartesian(b);

    // We have two planes, n1.p = d1 and n2.p = d2.
    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).
    var n1 = [1, 0, 0], // normal
        n2 = cartesianCross(pa, pb),
        n2n2 = cartesianDot(n2, n2),
        n1n2 = n2[0], // cartesianDot(n1, n2),
        determinant = n2n2 - n1n2 * n1n2;

    // Two polar points.
    if (!determinant) return !two && a;

    var c1 =  cr * n2n2 / determinant,
        c2 = -cr * n1n2 / determinant,
        n1xn2 = cartesianCross(n1, n2),
        A = cartesianScale(n1, c1),
        B = cartesianScale(n2, c2);
    cartesianAddInPlace(A, B);

    // Solve |p(t)|^2 = 1.
    var u = n1xn2,
        w = cartesianDot(A, u),
        uu = cartesianDot(u, u),
        t2 = w * w - uu * (cartesianDot(A, A) - 1);

    if (t2 < 0) return;

    var t = sqrt(t2),
        q = cartesianScale(u, (-w - t) / uu);
    cartesianAddInPlace(q, A);
    q = spherical(q);

    if (!two) return q;

    // Two intersection points.
    var lambda0 = a[0],
        lambda1 = b[0],
        phi0 = a[1],
        phi1 = b[1],
        z;

    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;

    var delta = lambda1 - lambda0,
        polar = abs(delta - pi$3) < epsilon$2,
        meridian = polar || delta < epsilon$2;

    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;

    // Check that the first point is between a and b.
    if (meridian
        ? polar
          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon$2 ? phi0 : phi1)
          : phi0 <= q[1] && q[1] <= phi1
        : delta > pi$3 ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
      var q1 = cartesianScale(u, (-w + t) / uu);
      cartesianAddInPlace(q1, A);
      return [q, spherical(q1)];
    }
  }

  // Generates a 4-bit vector representing the location of a point relative to
  // the small circle's bounding box.
  function code(lambda, phi) {
    var r = smallRadius ? radius : pi$3 - radius,
        code = 0;
    if (lambda < -r) code |= 1; // left
    else if (lambda > r) code |= 2; // right
    if (phi < -r) code |= 4; // below
    else if (phi > r) code |= 8; // above
    return code;
  }

  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi$3, radius - pi$3]);
};

var transform = function(methods) {
  return {
    stream: transformer(methods)
  };
};

function transformer(methods) {
  return function(stream) {
    var s = new TransformStream;
    for (var key in methods) s[key] = methods[key];
    s.stream = stream;
    return s;
  };
}

function TransformStream() {}

TransformStream.prototype = {
  constructor: TransformStream,
  point: function(x, y) { this.stream.point(x, y); },
  sphere: function() { this.stream.sphere(); },
  lineStart: function() { this.stream.lineStart(); },
  lineEnd: function() { this.stream.lineEnd(); },
  polygonStart: function() { this.stream.polygonStart(); },
  polygonEnd: function() { this.stream.polygonEnd(); }
};

function fitExtent(projection, extent, object) {
  var w = extent[1][0] - extent[0][0],
      h = extent[1][1] - extent[0][1],
      clip = projection.clipExtent && projection.clipExtent();

  projection
      .scale(150)
      .translate([0, 0]);

  if (clip != null) projection.clipExtent(null);

  geoStream(object, projection.stream(boundsStream$1));

  var b = boundsStream$1.result(),
      k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
      x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
      y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;

  if (clip != null) projection.clipExtent(clip);

  return projection
      .scale(k * 150)
      .translate([x, y]);
}

function fitSize(projection, size, object) {
  return fitExtent(projection, [[0, 0], size], object);
}

var maxDepth = 16;
var cosMinDistance = cos$1(30 * radians); // cos(minimum angular distance)

var resample = function(project, delta2) {
  return +delta2 ? resample$1(project, delta2) : resampleNone(project);
};

function resampleNone(project) {
  return transformer({
    point: function(x, y) {
      x = project(x, y);
      this.stream.point(x[0], x[1]);
    }
  });
}

function resample$1(project, delta2) {

  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
    var dx = x1 - x0,
        dy = y1 - y0,
        d2 = dx * dx + dy * dy;
    if (d2 > 4 * delta2 && depth--) {
      var a = a0 + a1,
          b = b0 + b1,
          c = c0 + c1,
          m = sqrt(a * a + b * b + c * c),
          phi2 = asin(c /= m),
          lambda2 = abs(abs(c) - 1) < epsilon$2 || abs(lambda0 - lambda1) < epsilon$2 ? (lambda0 + lambda1) / 2 : atan2(b, a),
          p = project(lambda2, phi2),
          x2 = p[0],
          y2 = p[1],
          dx2 = x2 - x0,
          dy2 = y2 - y0,
          dz = dy * dx2 - dx * dy2;
      if (dz * dz / d2 > delta2 // perpendicular projected distance
          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance
        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
        stream.point(x2, y2);
        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
      }
    }
  }
  return function(stream) {
    var lambda00, x00, y00, a00, b00, c00, // first point
        lambda0, x0, y0, a0, b0, c0; // previous point

    var resampleStream = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },
      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }
    };

    function point(x, y) {
      x = project(x, y);
      stream.point(x[0], x[1]);
    }

    function lineStart() {
      x0 = NaN;
      resampleStream.point = linePoint;
      stream.lineStart();
    }

    function linePoint(lambda, phi) {
      var c = cartesian([lambda, phi]), p = project(lambda, phi);
      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
      stream.point(x0, y0);
    }

    function lineEnd() {
      resampleStream.point = point;
      stream.lineEnd();
    }

    function ringStart() {
      lineStart();
      resampleStream.point = ringPoint;
      resampleStream.lineEnd = ringEnd;
    }

    function ringPoint(lambda, phi) {
      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
      resampleStream.point = linePoint;
    }

    function ringEnd() {
      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
      resampleStream.lineEnd = lineEnd;
      lineEnd();
    }

    return resampleStream;
  };
}

var transformRadians = transformer({
  point: function(x, y) {
    this.stream.point(x * radians, y * radians);
  }
});

function projection(project) {
  return projectionMutator(function() { return project; })();
}

function projectionMutator(projectAt) {
  var project,
      k = 150, // scale
      x = 480, y = 250, // translate
      dx, dy, lambda = 0, phi = 0, // center
      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, projectRotate, // rotate
      theta = null, preclip = clipAntimeridian, // clip angle
      x0 = null, y0, x1, y1, postclip = identity$4, // clip extent
      delta2 = 0.5, projectResample = resample(projectTransform, delta2), // precision
      cache,
      cacheStream;

  function projection(point) {
    point = projectRotate(point[0] * radians, point[1] * radians);
    return [point[0] * k + dx, dy - point[1] * k];
  }

  function invert(point) {
    point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);
    return point && [point[0] * degrees$1, point[1] * degrees$1];
  }

  function projectTransform(x, y) {
    return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];
  }

  projection.stream = function(stream) {
    return cache && cacheStream === stream ? cache : cache = transformRadians(preclip(rotate, projectResample(postclip(cacheStream = stream))));
  };

  projection.clipAngle = function(_) {
    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians, 6 * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees$1;
  };

  projection.clipExtent = function(_) {
    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$4) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };

  projection.scale = function(_) {
    return arguments.length ? (k = +_, recenter()) : k;
  };

  projection.translate = function(_) {
    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
  };

  projection.center = function(_) {
    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees$1, phi * degrees$1];
  };

  projection.rotate = function(_) {
    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees$1, deltaPhi * degrees$1, deltaGamma * degrees$1];
  };

  projection.precision = function(_) {
    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);
  };

  projection.fitExtent = function(extent, object) {
    return fitExtent(projection, extent, object);
  };

  projection.fitSize = function(size, object) {
    return fitSize(projection, size, object);
  };

  function recenter() {
    projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);
    var center = project(lambda, phi);
    dx = x - center[0] * k;
    dy = y + center[1] * k;
    return reset();
  }

  function reset() {
    cache = cacheStream = null;
    return projection;
  }

  return function() {
    project = projectAt.apply(this, arguments);
    projection.invert = project.invert && invert;
    return recenter();
  };
}

function conicProjection(projectAt) {
  var phi0 = 0,
      phi1 = pi$3 / 3,
      m = projectionMutator(projectAt),
      p = m(phi0, phi1);

  p.parallels = function(_) {
    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees$1, phi1 * degrees$1];
  };

  return p;
}

function cylindricalEqualAreaRaw(phi0) {
  var cosPhi0 = cos$1(phi0);

  function forward(lambda, phi) {
    return [lambda * cosPhi0, sin$1(phi) / cosPhi0];
  }

  forward.invert = function(x, y) {
    return [x / cosPhi0, asin(y * cosPhi0)];
  };

  return forward;
}

function conicEqualAreaRaw(y0, y1) {
  var sy0 = sin$1(y0), n = (sy0 + sin$1(y1)) / 2;

  // Are the parallels symmetrical around the Equator?
  if (abs(n) < epsilon$2) return cylindricalEqualAreaRaw(y0);

  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;

  function project(x, y) {
    var r = sqrt(c - 2 * n * sin$1(y)) / n;
    return [r * sin$1(x *= n), r0 - r * cos$1(x)];
  }

  project.invert = function(x, y) {
    var r0y = r0 - y;
    return [atan2(x, abs(r0y)) / n * sign(r0y), asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];
  };

  return project;
}

var conicEqualArea = function() {
  return conicProjection(conicEqualAreaRaw)
      .scale(155.424)
      .center([0, 33.6442]);
};

var albers = function() {
  return conicEqualArea()
      .parallels([29.5, 45.5])
      .scale(1070)
      .translate([480, 250])
      .rotate([96, 0])
      .center([-0.6, 38.7]);
};

// The projections must have mutually exclusive clip regions on the sphere,
// as this will avoid emitting interleaving lines and polygons.
function multiplex(streams) {
  var n = streams.length;
  return {
    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },
    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },
    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },
    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },
    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },
    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }
  };
}

// A composite projection for the United States, configured by default for
// 960×500. The projection also works quite well at 960×600 if you change the
// scale to 1285 and adjust the translate accordingly. The set of standard
// parallels for each region comes from USGS, which is published here:
// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers
var albersUsa = function() {
  var cache,
      cacheStream,
      lower48 = albers(), lower48Point,
      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338
      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007
      point, pointStream = {point: function(x, y) { point = [x, y]; }};

  function albersUsa(coordinates) {
    var x = coordinates[0], y = coordinates[1];
    return point = null,
        (lower48Point.point(x, y), point)
        || (alaskaPoint.point(x, y), point)
        || (hawaiiPoint.point(x, y), point);
  }

  albersUsa.invert = function(coordinates) {
    var k = lower48.scale(),
        t = lower48.translate(),
        x = (coordinates[0] - t[0]) / k,
        y = (coordinates[1] - t[1]) / k;
    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska
        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii
        : lower48).invert(coordinates);
  };

  albersUsa.stream = function(stream) {
    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
  };

  albersUsa.precision = function(_) {
    if (!arguments.length) return lower48.precision();
    lower48.precision(_), alaska.precision(_), hawaii.precision(_);
    return reset();
  };

  albersUsa.scale = function(_) {
    if (!arguments.length) return lower48.scale();
    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
    return albersUsa.translate(lower48.translate());
  };

  albersUsa.translate = function(_) {
    if (!arguments.length) return lower48.translate();
    var k = lower48.scale(), x = +_[0], y = +_[1];

    lower48Point = lower48
        .translate(_)
        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])
        .stream(pointStream);

    alaskaPoint = alaska
        .translate([x - 0.307 * k, y + 0.201 * k])
        .clipExtent([[x - 0.425 * k + epsilon$2, y + 0.120 * k + epsilon$2], [x - 0.214 * k - epsilon$2, y + 0.234 * k - epsilon$2]])
        .stream(pointStream);

    hawaiiPoint = hawaii
        .translate([x - 0.205 * k, y + 0.212 * k])
        .clipExtent([[x - 0.214 * k + epsilon$2, y + 0.166 * k + epsilon$2], [x - 0.115 * k - epsilon$2, y + 0.234 * k - epsilon$2]])
        .stream(pointStream);

    return reset();
  };

  albersUsa.fitExtent = function(extent, object) {
    return fitExtent(albersUsa, extent, object);
  };

  albersUsa.fitSize = function(size, object) {
    return fitSize(albersUsa, size, object);
  };

  function reset() {
    cache = cacheStream = null;
    return albersUsa;
  }

  return albersUsa.scale(1070);
};

function azimuthalRaw(scale) {
  return function(x, y) {
    var cx = cos$1(x),
        cy = cos$1(y),
        k = scale(cx * cy);
    return [
      k * cy * sin$1(x),
      k * sin$1(y)
    ];
  }
}

function azimuthalInvert(angle) {
  return function(x, y) {
    var z = sqrt(x * x + y * y),
        c = angle(z),
        sc = sin$1(c),
        cc = cos$1(c);
    return [
      atan2(x * sc, z * cc),
      asin(z && y * sc / z)
    ];
  }
}

var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {
  return sqrt(2 / (1 + cxcy));
});

azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {
  return 2 * asin(z / 2);
});

var azimuthalEqualArea = function() {
  return projection(azimuthalEqualAreaRaw)
      .scale(124.75)
      .clipAngle(180 - 1e-3);
};

var azimuthalEquidistantRaw = azimuthalRaw(function(c) {
  return (c = acos(c)) && c / sin$1(c);
});

azimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {
  return z;
});

var azimuthalEquidistant = function() {
  return projection(azimuthalEquidistantRaw)
      .scale(79.4188)
      .clipAngle(180 - 1e-3);
};

function mercatorRaw(lambda, phi) {
  return [lambda, log(tan((halfPi$2 + phi) / 2))];
}

mercatorRaw.invert = function(x, y) {
  return [x, 2 * atan(exp(y)) - halfPi$2];
};

var mercator = function() {
  return mercatorProjection(mercatorRaw)
      .scale(961 / tau$3);
};

function mercatorProjection(project) {
  var m = projection(project),
      center = m.center,
      scale = m.scale,
      translate = m.translate,
      clipExtent = m.clipExtent,
      x0 = null, y0, x1, y1; // clip extent

  m.center = function(_) {
    return arguments.length ? (center(_), reclip()) : center();
  };

  m.scale = function(_) {
    return arguments.length ? (scale(_), reclip()) : scale();
  };

  m.translate = function(_) {
    return arguments.length ? (translate(_), reclip()) : translate();
  };

  m.clipExtent = function(_) {
    return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };

  function reclip() {
    var k = pi$3 * scale(),
        t = m([0, 0]);
    return clipExtent(x0 == null
        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]]
        : [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]);
  }

  return reclip();
}

function tany(y) {
  return tan((halfPi$2 + y) / 2);
}

function conicConformalRaw(y0, y1) {
  var cy0 = cos$1(y0),
      n = y0 === y1 ? sin$1(y0) : log(cy0 / cos$1(y1)) / log(tany(y1) / tany(y0)),
      f = cy0 * pow(tany(y0), n) / n;

  if (!n) return mercatorRaw;

  function project(x, y) {
    if (f > 0) { if (y < -halfPi$2 + epsilon$2) y = -halfPi$2 + epsilon$2; }
    else { if (y > halfPi$2 - epsilon$2) y = halfPi$2 - epsilon$2; }
    var r = f / pow(tany(y), n);
    return [r * sin$1(n * x), f - r * cos$1(n * x)];
  }

  project.invert = function(x, y) {
    var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy);
    return [atan2(x, abs(fy)) / n * sign(fy), 2 * atan(pow(f / r, 1 / n)) - halfPi$2];
  };

  return project;
}

var conicConformal = function() {
  return conicProjection(conicConformalRaw)
      .scale(109.5)
      .parallels([30, 30]);
};

function equirectangularRaw(lambda, phi) {
  return [lambda, phi];
}

equirectangularRaw.invert = equirectangularRaw;

var equirectangular = function() {
  return projection(equirectangularRaw)
      .scale(152.63);
};

function conicEquidistantRaw(y0, y1) {
  var cy0 = cos$1(y0),
      n = y0 === y1 ? sin$1(y0) : (cy0 - cos$1(y1)) / (y1 - y0),
      g = cy0 / n + y0;

  if (abs(n) < epsilon$2) return equirectangularRaw;

  function project(x, y) {
    var gy = g - y, nx = n * x;
    return [gy * sin$1(nx), g - gy * cos$1(nx)];
  }

  project.invert = function(x, y) {
    var gy = g - y;
    return [atan2(x, abs(gy)) / n * sign(gy), g - sign(n) * sqrt(x * x + gy * gy)];
  };

  return project;
}

var conicEquidistant = function() {
  return conicProjection(conicEquidistantRaw)
      .scale(131.154)
      .center([0, 13.9389]);
};

function gnomonicRaw(x, y) {
  var cy = cos$1(y), k = cos$1(x) * cy;
  return [cy * sin$1(x) / k, sin$1(y) / k];
}

gnomonicRaw.invert = azimuthalInvert(atan);

var gnomonic = function() {
  return projection(gnomonicRaw)
      .scale(144.049)
      .clipAngle(60);
};

function scaleTranslate(kx, ky, tx, ty) {
  return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? identity$4 : transformer({
    point: function(x, y) {
      this.stream.point(x * kx + tx, y * ky + ty);
    }
  });
}

var identity$5 = function() {
  var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, transform = identity$4, // scale, translate and reflect
      x0 = null, y0, x1, y1, clip = identity$4, // clip extent
      cache,
      cacheStream,
      projection;

  function reset() {
    cache = cacheStream = null;
    return projection;
  }

  return projection = {
    stream: function(stream) {
      return cache && cacheStream === stream ? cache : cache = transform(clip(cacheStream = stream));
    },
    clipExtent: function(_) {
      return arguments.length ? (clip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$4) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
    },
    scale: function(_) {
      return arguments.length ? (transform = scaleTranslate((k = +_) * sx, k * sy, tx, ty), reset()) : k;
    },
    translate: function(_) {
      return arguments.length ? (transform = scaleTranslate(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];
    },
    reflectX: function(_) {
      return arguments.length ? (transform = scaleTranslate(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;
    },
    reflectY: function(_) {
      return arguments.length ? (transform = scaleTranslate(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;
    },
    fitExtent: function(extent, object) {
      return fitExtent(projection, extent, object);
    },
    fitSize: function(size, object) {
      return fitSize(projection, size, object);
    }
  };
};

function orthographicRaw(x, y) {
  return [cos$1(y) * sin$1(x), sin$1(y)];
}

orthographicRaw.invert = azimuthalInvert(asin);

var orthographic = function() {
  return projection(orthographicRaw)
      .scale(249.5)
      .clipAngle(90 + epsilon$2);
};

function stereographicRaw(x, y) {
  var cy = cos$1(y), k = 1 + cos$1(x) * cy;
  return [cy * sin$1(x) / k, sin$1(y) / k];
}

stereographicRaw.invert = azimuthalInvert(function(z) {
  return 2 * atan(z);
});

var stereographic = function() {
  return projection(stereographicRaw)
      .scale(250)
      .clipAngle(142);
};

function transverseMercatorRaw(lambda, phi) {
  return [log(tan((halfPi$2 + phi) / 2)), -lambda];
}

transverseMercatorRaw.invert = function(x, y) {
  return [-y, 2 * atan(exp(x)) - halfPi$2];
};

var transverseMercator = function() {
  var m = mercatorProjection(transverseMercatorRaw),
      center = m.center,
      rotate = m.rotate;

  m.center = function(_) {
    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
  };

  m.rotate = function(_) {
    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
  };

  return rotate([0, 0, 90])
      .scale(159.155);
};

function defaultSeparation(a, b) {
  return a.parent === b.parent ? 1 : 2;
}

function meanX(children) {
  return children.reduce(meanXReduce, 0) / children.length;
}

function meanXReduce(x, c) {
  return x + c.x;
}

function maxY(children) {
  return 1 + children.reduce(maxYReduce, 0);
}

function maxYReduce(y, c) {
  return Math.max(y, c.y);
}

function leafLeft(node) {
  var children;
  while (children = node.children) node = children[0];
  return node;
}

function leafRight(node) {
  var children;
  while (children = node.children) node = children[children.length - 1];
  return node;
}

var cluster = function() {
  var separation = defaultSeparation,
      dx = 1,
      dy = 1,
      nodeSize = false;

  function cluster(root) {
    var previousNode,
        x = 0;

    // First walk, computing the initial x & y values.
    root.eachAfter(function(node) {
      var children = node.children;
      if (children) {
        node.x = meanX(children);
        node.y = maxY(children);
      } else {
        node.x = previousNode ? x += separation(node, previousNode) : 0;
        node.y = 0;
        previousNode = node;
      }
    });

    var left = leafLeft(root),
        right = leafRight(root),
        x0 = left.x - separation(left, right) / 2,
        x1 = right.x + separation(right, left) / 2;

    // Second walk, normalizing x & y to the desired size.
    return root.eachAfter(nodeSize ? function(node) {
      node.x = (node.x - root.x) * dx;
      node.y = (root.y - node.y) * dy;
    } : function(node) {
      node.x = (node.x - x0) / (x1 - x0) * dx;
      node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
    });
  }

  cluster.separation = function(x) {
    return arguments.length ? (separation = x, cluster) : separation;
  };

  cluster.size = function(x) {
    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);
  };

  cluster.nodeSize = function(x) {
    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);
  };

  return cluster;
};

function count(node) {
  var sum = 0,
      children = node.children,
      i = children && children.length;
  if (!i) sum = 1;
  else while (--i >= 0) sum += children[i].value;
  node.value = sum;
}

var node_count = function() {
  return this.eachAfter(count);
};

var node_each = function(callback) {
  var node = this, current, next = [node], children, i, n;
  do {
    current = next.reverse(), next = [];
    while (node = current.pop()) {
      callback(node), children = node.children;
      if (children) for (i = 0, n = children.length; i < n; ++i) {
        next.push(children[i]);
      }
    }
  } while (next.length);
  return this;
};

var node_eachBefore = function(callback) {
  var node = this, nodes = [node], children, i;
  while (node = nodes.pop()) {
    callback(node), children = node.children;
    if (children) for (i = children.length - 1; i >= 0; --i) {
      nodes.push(children[i]);
    }
  }
  return this;
};

var node_eachAfter = function(callback) {
  var node = this, nodes = [node], next = [], children, i, n;
  while (node = nodes.pop()) {
    next.push(node), children = node.children;
    if (children) for (i = 0, n = children.length; i < n; ++i) {
      nodes.push(children[i]);
    }
  }
  while (node = next.pop()) {
    callback(node);
  }
  return this;
};

var node_sum = function(value) {
  return this.eachAfter(function(node) {
    var sum = +value(node.data) || 0,
        children = node.children,
        i = children && children.length;
    while (--i >= 0) sum += children[i].value;
    node.value = sum;
  });
};

var node_sort = function(compare) {
  return this.eachBefore(function(node) {
    if (node.children) {
      node.children.sort(compare);
    }
  });
};

var node_path = function(end) {
  var start = this,
      ancestor = leastCommonAncestor(start, end),
      nodes = [start];
  while (start !== ancestor) {
    start = start.parent;
    nodes.push(start);
  }
  var k = nodes.length;
  while (end !== ancestor) {
    nodes.splice(k, 0, end);
    end = end.parent;
  }
  return nodes;
};

function leastCommonAncestor(a, b) {
  if (a === b) return a;
  var aNodes = a.ancestors(),
      bNodes = b.ancestors(),
      c = null;
  a = aNodes.pop();
  b = bNodes.pop();
  while (a === b) {
    c = a;
    a = aNodes.pop();
    b = bNodes.pop();
  }
  return c;
}

var node_ancestors = function() {
  var node = this, nodes = [node];
  while (node = node.parent) {
    nodes.push(node);
  }
  return nodes;
};

var node_descendants = function() {
  var nodes = [];
  this.each(function(node) {
    nodes.push(node);
  });
  return nodes;
};

var node_leaves = function() {
  var leaves = [];
  this.eachBefore(function(node) {
    if (!node.children) {
      leaves.push(node);
    }
  });
  return leaves;
};

var node_links = function() {
  var root = this, links = [];
  root.each(function(node) {
    if (node !== root) { // Don’t include the root’s parent, if any.
      links.push({source: node.parent, target: node});
    }
  });
  return links;
};

function hierarchy(data, children) {
  var root = new Node(data),
      valued = +data.value && (root.value = data.value),
      node,
      nodes = [root],
      child,
      childs,
      i,
      n;

  if (children == null) children = defaultChildren;

  while (node = nodes.pop()) {
    if (valued) node.value = +node.data.value;
    if ((childs = children(node.data)) && (n = childs.length)) {
      node.children = new Array(n);
      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = node.children[i] = new Node(childs[i]));
        child.parent = node;
        child.depth = node.depth + 1;
      }
    }
  }

  return root.eachBefore(computeHeight);
}

function node_copy() {
  return hierarchy(this).eachBefore(copyData);
}

function defaultChildren(d) {
  return d.children;
}

function copyData(node) {
  node.data = node.data.data;
}

function computeHeight(node) {
  var height = 0;
  do node.height = height;
  while ((node = node.parent) && (node.height < ++height));
}

function Node(data) {
  this.data = data;
  this.depth =
  this.height = 0;
  this.parent = null;
}

Node.prototype = hierarchy.prototype = {
  constructor: Node,
  count: node_count,
  each: node_each,
  eachAfter: node_eachAfter,
  eachBefore: node_eachBefore,
  sum: node_sum,
  sort: node_sort,
  path: node_path,
  ancestors: node_ancestors,
  descendants: node_descendants,
  leaves: node_leaves,
  links: node_links,
  copy: node_copy
};

function Node$2(value) {
  this._ = value;
  this.next = null;
}

var shuffle$1 = function(array) {
  var i,
      n = (array = array.slice()).length,
      head = null,
      node = head;

  while (n) {
    var next = new Node$2(array[n - 1]);
    if (node) node = node.next = next;
    else node = head = next;
    array[i] = array[--n];
  }

  return {
    head: head,
    tail: node
  };
};

var enclose = function(circles) {
  return encloseN(shuffle$1(circles), []);
};

function encloses(a, b) {
  var dx = b.x - a.x,
      dy = b.y - a.y,
      dr = a.r - b.r;
  return dr * dr + 1e-6 > dx * dx + dy * dy;
}

// Returns the smallest circle that contains circles L and intersects circles B.
function encloseN(L, B) {
  var circle,
      l0 = null,
      l1 = L.head,
      l2,
      p1;

  switch (B.length) {
    case 1: circle = enclose1(B[0]); break;
    case 2: circle = enclose2(B[0], B[1]); break;
    case 3: circle = enclose3(B[0], B[1], B[2]); break;
  }

  while (l1) {
    p1 = l1._, l2 = l1.next;
    if (!circle || !encloses(circle, p1)) {

      // Temporarily truncate L before l1.
      if (l0) L.tail = l0, l0.next = null;
      else L.head = L.tail = null;

      B.push(p1);
      circle = encloseN(L, B); // Note: reorders L!
      B.pop();

      // Move l1 to the front of L and reconnect the truncated list L.
      if (L.head) l1.next = L.head, L.head = l1;
      else l1.next = null, L.head = L.tail = l1;
      l0 = L.tail, l0.next = l2;

    } else {
      l0 = l1;
    }
    l1 = l2;
  }

  L.tail = l0;
  return circle;
}

function enclose1(a) {
  return {
    x: a.x,
    y: a.y,
    r: a.r
  };
}

function enclose2(a, b) {
  var x1 = a.x, y1 = a.y, r1 = a.r,
      x2 = b.x, y2 = b.y, r2 = b.r,
      x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,
      l = Math.sqrt(x21 * x21 + y21 * y21);
  return {
    x: (x1 + x2 + x21 / l * r21) / 2,
    y: (y1 + y2 + y21 / l * r21) / 2,
    r: (l + r1 + r2) / 2
  };
}

function enclose3(a, b, c) {
  var x1 = a.x, y1 = a.y, r1 = a.r,
      x2 = b.x, y2 = b.y, r2 = b.r,
      x3 = c.x, y3 = c.y, r3 = c.r,
      a2 = 2 * (x1 - x2),
      b2 = 2 * (y1 - y2),
      c2 = 2 * (r2 - r1),
      d2 = x1 * x1 + y1 * y1 - r1 * r1 - x2 * x2 - y2 * y2 + r2 * r2,
      a3 = 2 * (x1 - x3),
      b3 = 2 * (y1 - y3),
      c3 = 2 * (r3 - r1),
      d3 = x1 * x1 + y1 * y1 - r1 * r1 - x3 * x3 - y3 * y3 + r3 * r3,
      ab = a3 * b2 - a2 * b3,
      xa = (b2 * d3 - b3 * d2) / ab - x1,
      xb = (b3 * c2 - b2 * c3) / ab,
      ya = (a3 * d2 - a2 * d3) / ab - y1,
      yb = (a2 * c3 - a3 * c2) / ab,
      A = xb * xb + yb * yb - 1,
      B = 2 * (xa * xb + ya * yb + r1),
      C = xa * xa + ya * ya - r1 * r1,
      r = (-B - Math.sqrt(B * B - 4 * A * C)) / (2 * A);
  return {
    x: xa + xb * r + x1,
    y: ya + yb * r + y1,
    r: r
  };
}

function place(a, b, c) {
  var ax = a.x,
      ay = a.y,
      da = b.r + c.r,
      db = a.r + c.r,
      dx = b.x - ax,
      dy = b.y - ay,
      dc = dx * dx + dy * dy;
  if (dc) {
    var x = 0.5 + ((db *= db) - (da *= da)) / (2 * dc),
        y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
    c.x = ax + x * dx + y * dy;
    c.y = ay + x * dy - y * dx;
  } else {
    c.x = ax + db;
    c.y = ay;
  }
}

function intersects(a, b) {
  var dx = b.x - a.x,
      dy = b.y - a.y,
      dr = a.r + b.r;
  return dr * dr - 1e-6 > dx * dx + dy * dy;
}

function distance1(a, b) {
  var l = a._.r;
  while (a !== b) l += 2 * (a = a.next)._.r;
  return l - b._.r;
}

function distance2(node, x, y) {
  var a = node._,
      b = node.next._,
      ab = a.r + b.r,
      dx = (a.x * b.r + b.x * a.r) / ab - x,
      dy = (a.y * b.r + b.y * a.r) / ab - y;
  return dx * dx + dy * dy;
}

function Node$1(circle) {
  this._ = circle;
  this.next = null;
  this.previous = null;
}

function packEnclose(circles) {
  if (!(n = circles.length)) return 0;

  var a, b, c, n;

  // Place the first circle.
  a = circles[0], a.x = 0, a.y = 0;
  if (!(n > 1)) return a.r;

  // Place the second circle.
  b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;
  if (!(n > 2)) return a.r + b.r;

  // Place the third circle.
  place(b, a, c = circles[2]);

  // Initialize the weighted centroid.
  var aa = a.r * a.r,
      ba = b.r * b.r,
      ca = c.r * c.r,
      oa = aa + ba + ca,
      ox = aa * a.x + ba * b.x + ca * c.x,
      oy = aa * a.y + ba * b.y + ca * c.y,
      cx, cy, i, j, k, sj, sk;

  // Initialize the front-chain using the first three circles a, b and c.
  a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);
  a.next = c.previous = b;
  b.next = a.previous = c;
  c.next = b.previous = a;

  // Attempt to place each remaining circle…
  pack: for (i = 3; i < n; ++i) {
    place(a._, b._, c = circles[i]), c = new Node$1(c);

    // Find the closest intersecting circle on the front-chain, if any.
    // “Closeness” is determined by linear distance along the front-chain.
    // “Ahead” or “behind” is likewise determined by linear distance.
    j = b.next, k = a.previous, sj = b._.r, sk = a._.r;
    do {
      if (sj <= sk) {
        if (intersects(j._, c._)) {
          if (sj + a._.r + b._.r > distance1(j, b)) a = j; else b = j;
          a.next = b, b.previous = a, --i;
          continue pack;
        }
        sj += j._.r, j = j.next;
      } else {
        if (intersects(k._, c._)) {
          if (distance1(a, k) > sk + a._.r + b._.r) a = k; else b = k;
          a.next = b, b.previous = a, --i;
          continue pack;
        }
        sk += k._.r, k = k.previous;
      }
    } while (j !== k.next);

    // Success! Insert the new circle c between a and b.
    c.previous = a, c.next = b, a.next = b.previous = b = c;

    // Update the weighted centroid.
    oa += ca = c._.r * c._.r;
    ox += ca * c._.x;
    oy += ca * c._.y;

    // Compute the new closest circle pair to the centroid.
    aa = distance2(a, cx = ox / oa, cy = oy / oa);
    while ((c = c.next) !== b) {
      if ((ca = distance2(c, cx, cy)) < aa) {
        a = c, aa = ca;
      }
    }
    b = a.next;
  }

  // Compute the enclosing circle of the front chain.
  a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);

  // Translate the circles to put the enclosing circle around the origin.
  for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;

  return c.r;
}

var siblings = function(circles) {
  packEnclose(circles);
  return circles;
};

function optional(f) {
  return f == null ? null : required(f);
}

function required(f) {
  if (typeof f !== "function") throw new Error;
  return f;
}

function constantZero() {
  return 0;
}

var constant$8 = function(x) {
  return function() {
    return x;
  };
};

function defaultRadius$1(d) {
  return Math.sqrt(d.value);
}

var index$2 = function() {
  var radius = null,
      dx = 1,
      dy = 1,
      padding = constantZero;

  function pack(root) {
    root.x = dx / 2, root.y = dy / 2;
    if (radius) {
      root.eachBefore(radiusLeaf(radius))
          .eachAfter(packChildren(padding, 0.5))
          .eachBefore(translateChild(1));
    } else {
      root.eachBefore(radiusLeaf(defaultRadius$1))
          .eachAfter(packChildren(constantZero, 1))
          .eachAfter(packChildren(padding, root.r / Math.min(dx, dy)))
          .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));
    }
    return root;
  }

  pack.radius = function(x) {
    return arguments.length ? (radius = optional(x), pack) : radius;
  };

  pack.size = function(x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];
  };

  pack.padding = function(x) {
    return arguments.length ? (padding = typeof x === "function" ? x : constant$8(+x), pack) : padding;
  };

  return pack;
};

function radiusLeaf(radius) {
  return function(node) {
    if (!node.children) {
      node.r = Math.max(0, +radius(node) || 0);
    }
  };
}

function packChildren(padding, k) {
  return function(node) {
    if (children = node.children) {
      var children,
          i,
          n = children.length,
          r = padding(node) * k || 0,
          e;

      if (r) for (i = 0; i < n; ++i) children[i].r += r;
      e = packEnclose(children);
      if (r) for (i = 0; i < n; ++i) children[i].r -= r;
      node.r = e + r;
    }
  };
}

function translateChild(k) {
  return function(node) {
    var parent = node.parent;
    node.r *= k;
    if (parent) {
      node.x = parent.x + k * node.x;
      node.y = parent.y + k * node.y;
    }
  };
}

var roundNode = function(node) {
  node.x0 = Math.round(node.x0);
  node.y0 = Math.round(node.y0);
  node.x1 = Math.round(node.x1);
  node.y1 = Math.round(node.y1);
};

var treemapDice = function(parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      node,
      i = -1,
      n = nodes.length,
      k = parent.value && (x1 - x0) / parent.value;

  while (++i < n) {
    node = nodes[i], node.y0 = y0, node.y1 = y1;
    node.x0 = x0, node.x1 = x0 += node.value * k;
  }
};

var partition = function() {
  var dx = 1,
      dy = 1,
      padding = 0,
      round = false;

  function partition(root) {
    var n = root.height + 1;
    root.x0 =
    root.y0 = padding;
    root.x1 = dx;
    root.y1 = dy / n;
    root.eachBefore(positionNode(dy, n));
    if (round) root.eachBefore(roundNode);
    return root;
  }

  function positionNode(dy, n) {
    return function(node) {
      if (node.children) {
        treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);
      }
      var x0 = node.x0,
          y0 = node.y0,
          x1 = node.x1 - padding,
          y1 = node.y1 - padding;
      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
      node.x0 = x0;
      node.y0 = y0;
      node.x1 = x1;
      node.y1 = y1;
    };
  }

  partition.round = function(x) {
    return arguments.length ? (round = !!x, partition) : round;
  };

  partition.size = function(x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];
  };

  partition.padding = function(x) {
    return arguments.length ? (padding = +x, partition) : padding;
  };

  return partition;
};

var keyPrefix$1 = "$";
var preroot = {depth: -1};
var ambiguous = {};

function defaultId(d) {
  return d.id;
}

function defaultParentId(d) {
  return d.parentId;
}

var stratify = function() {
  var id = defaultId,
      parentId = defaultParentId;

  function stratify(data) {
    var d,
        i,
        n = data.length,
        root,
        parent,
        node,
        nodes = new Array(n),
        nodeId,
        nodeKey,
        nodeByKey = {};

    for (i = 0; i < n; ++i) {
      d = data[i], node = nodes[i] = new Node(d);
      if ((nodeId = id(d, i, data)) != null && (nodeId += "")) {
        nodeKey = keyPrefix$1 + (node.id = nodeId);
        nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;
      }
    }

    for (i = 0; i < n; ++i) {
      node = nodes[i], nodeId = parentId(data[i], i, data);
      if (nodeId == null || !(nodeId += "")) {
        if (root) throw new Error("multiple roots");
        root = node;
      } else {
        parent = nodeByKey[keyPrefix$1 + nodeId];
        if (!parent) throw new Error("missing: " + nodeId);
        if (parent === ambiguous) throw new Error("ambiguous: " + nodeId);
        if (parent.children) parent.children.push(node);
        else parent.children = [node];
        node.parent = parent;
      }
    }

    if (!root) throw new Error("no root");
    root.parent = preroot;
    root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);
    root.parent = null;
    if (n > 0) throw new Error("cycle");

    return root;
  }

  stratify.id = function(x) {
    return arguments.length ? (id = required(x), stratify) : id;
  };

  stratify.parentId = function(x) {
    return arguments.length ? (parentId = required(x), stratify) : parentId;
  };

  return stratify;
};

function defaultSeparation$1(a, b) {
  return a.parent === b.parent ? 1 : 2;
}

// function radialSeparation(a, b) {
//   return (a.parent === b.parent ? 1 : 2) / a.depth;
// }

// This function is used to traverse the left contour of a subtree (or
// subforest). It returns the successor of v on this contour. This successor is
// either given by the leftmost child of v or by the thread of v. The function
// returns null if and only if v is on the highest level of its subtree.
function nextLeft(v) {
  var children = v.children;
  return children ? children[0] : v.t;
}

// This function works analogously to nextLeft.
function nextRight(v) {
  var children = v.children;
  return children ? children[children.length - 1] : v.t;
}

// Shifts the current subtree rooted at w+. This is done by increasing
// prelim(w+) and mod(w+) by shift.
function moveSubtree(wm, wp, shift) {
  var change = shift / (wp.i - wm.i);
  wp.c -= change;
  wp.s += shift;
  wm.c += change;
  wp.z += shift;
  wp.m += shift;
}

// All other shifts, applied to the smaller subtrees between w- and w+, are
// performed by this function. To prepare the shifts, we have to adjust
// change(w+), shift(w+), and change(w-).
function executeShifts(v) {
  var shift = 0,
      change = 0,
      children = v.children,
      i = children.length,
      w;
  while (--i >= 0) {
    w = children[i];
    w.z += shift;
    w.m += shift;
    shift += w.s + (change += w.c);
  }
}

// If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
// returns the specified (default) ancestor.
function nextAncestor(vim, v, ancestor) {
  return vim.a.parent === v.parent ? vim.a : ancestor;
}

function TreeNode(node, i) {
  this._ = node;
  this.parent = null;
  this.children = null;
  this.A = null; // default ancestor
  this.a = this; // ancestor
  this.z = 0; // prelim
  this.m = 0; // mod
  this.c = 0; // change
  this.s = 0; // shift
  this.t = null; // thread
  this.i = i; // number
}

TreeNode.prototype = Object.create(Node.prototype);

function treeRoot(root) {
  var tree = new TreeNode(root, 0),
      node,
      nodes = [tree],
      child,
      children,
      i,
      n;

  while (node = nodes.pop()) {
    if (children = node._.children) {
      node.children = new Array(n = children.length);
      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = node.children[i] = new TreeNode(children[i], i));
        child.parent = node;
      }
    }
  }

  (tree.parent = new TreeNode(null, 0)).children = [tree];
  return tree;
}

// Node-link tree diagram using the Reingold-Tilford "tidy" algorithm
var tree = function() {
  var separation = defaultSeparation$1,
      dx = 1,
      dy = 1,
      nodeSize = null;

  function tree(root) {
    var t = treeRoot(root);

    // Compute the layout using Buchheim et al.’s algorithm.
    t.eachAfter(firstWalk), t.parent.m = -t.z;
    t.eachBefore(secondWalk);

    // If a fixed node size is specified, scale x and y.
    if (nodeSize) root.eachBefore(sizeNode);

    // If a fixed tree size is specified, scale x and y based on the extent.
    // Compute the left-most, right-most, and depth-most nodes for extents.
    else {
      var left = root,
          right = root,
          bottom = root;
      root.eachBefore(function(node) {
        if (node.x < left.x) left = node;
        if (node.x > right.x) right = node;
        if (node.depth > bottom.depth) bottom = node;
      });
      var s = left === right ? 1 : separation(left, right) / 2,
          tx = s - left.x,
          kx = dx / (right.x + s + tx),
          ky = dy / (bottom.depth || 1);
      root.eachBefore(function(node) {
        node.x = (node.x + tx) * kx;
        node.y = node.depth * ky;
      });
    }

    return root;
  }

  // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
  // applied recursively to the children of v, as well as the function
  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
  // node v is placed to the midpoint of its outermost children.
  function firstWalk(v) {
    var children = v.children,
        siblings = v.parent.children,
        w = v.i ? siblings[v.i - 1] : null;
    if (children) {
      executeShifts(v);
      var midpoint = (children[0].z + children[children.length - 1].z) / 2;
      if (w) {
        v.z = w.z + separation(v._, w._);
        v.m = v.z - midpoint;
      } else {
        v.z = midpoint;
      }
    } else if (w) {
      v.z = w.z + separation(v._, w._);
    }
    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
  }

  // Computes all real x-coordinates by summing up the modifiers recursively.
  function secondWalk(v) {
    v._.x = v.z + v.parent.m;
    v.m += v.parent.m;
  }

  // The core of the algorithm. Here, a new subtree is combined with the
  // previous subtrees. Threads are used to traverse the inside and outside
  // contours of the left and right subtree up to the highest common level. The
  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
  // superscript o means outside and i means inside, the subscript - means left
  // subtree and + means right subtree. For summing up the modifiers along the
  // contour, we use respective variables si+, si-, so-, and so+. Whenever two
  // nodes of the inside contours conflict, we compute the left one of the
  // greatest uncommon ancestors using the function ANCESTOR and call MOVE
  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
  // Finally, we add a new thread (if necessary).
  function apportion(v, w, ancestor) {
    if (w) {
      var vip = v,
          vop = v,
          vim = w,
          vom = vip.parent.children[0],
          sip = vip.m,
          sop = vop.m,
          sim = vim.m,
          som = vom.m,
          shift;
      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
        vom = nextLeft(vom);
        vop = nextRight(vop);
        vop.a = v;
        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
        if (shift > 0) {
          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
          sip += shift;
          sop += shift;
        }
        sim += vim.m;
        sip += vip.m;
        som += vom.m;
        sop += vop.m;
      }
      if (vim && !nextRight(vop)) {
        vop.t = vim;
        vop.m += sim - sop;
      }
      if (vip && !nextLeft(vom)) {
        vom.t = vip;
        vom.m += sip - som;
        ancestor = v;
      }
    }
    return ancestor;
  }

  function sizeNode(node) {
    node.x *= dx;
    node.y = node.depth * dy;
  }

  tree.separation = function(x) {
    return arguments.length ? (separation = x, tree) : separation;
  };

  tree.size = function(x) {
    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);
  };

  tree.nodeSize = function(x) {
    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);
  };

  return tree;
};

var treemapSlice = function(parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      node,
      i = -1,
      n = nodes.length,
      k = parent.value && (y1 - y0) / parent.value;

  while (++i < n) {
    node = nodes[i], node.x0 = x0, node.x1 = x1;
    node.y0 = y0, node.y1 = y0 += node.value * k;
  }
};

var phi = (1 + Math.sqrt(5)) / 2;

function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
  var rows = [],
      nodes = parent.children,
      row,
      nodeValue,
      i0 = 0,
      i1 = 0,
      n = nodes.length,
      dx, dy,
      value = parent.value,
      sumValue,
      minValue,
      maxValue,
      newRatio,
      minRatio,
      alpha,
      beta;

  while (i0 < n) {
    dx = x1 - x0, dy = y1 - y0;

    // Find the next non-empty node.
    do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);
    minValue = maxValue = sumValue;
    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
    beta = sumValue * sumValue * alpha;
    minRatio = Math.max(maxValue / beta, beta / minValue);

    // Keep adding nodes while the aspect ratio maintains or improves.
    for (; i1 < n; ++i1) {
      sumValue += nodeValue = nodes[i1].value;
      if (nodeValue < minValue) minValue = nodeValue;
      if (nodeValue > maxValue) maxValue = nodeValue;
      beta = sumValue * sumValue * alpha;
      newRatio = Math.max(maxValue / beta, beta / minValue);
      if (newRatio > minRatio) { sumValue -= nodeValue; break; }
      minRatio = newRatio;
    }

    // Position and record the row orientation.
    rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});
    if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);
    else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
    value -= sumValue, i0 = i1;
  }

  return rows;
}

var squarify = ((function custom(ratio) {

  function squarify(parent, x0, y0, x1, y1) {
    squarifyRatio(ratio, parent, x0, y0, x1, y1);
  }

  squarify.ratio = function(x) {
    return custom((x = +x) > 1 ? x : 1);
  };

  return squarify;
}))(phi);

var index$3 = function() {
  var tile = squarify,
      round = false,
      dx = 1,
      dy = 1,
      paddingStack = [0],
      paddingInner = constantZero,
      paddingTop = constantZero,
      paddingRight = constantZero,
      paddingBottom = constantZero,
      paddingLeft = constantZero;

  function treemap(root) {
    root.x0 =
    root.y0 = 0;
    root.x1 = dx;
    root.y1 = dy;
    root.eachBefore(positionNode);
    paddingStack = [0];
    if (round) root.eachBefore(roundNode);
    return root;
  }

  function positionNode(node) {
    var p = paddingStack[node.depth],
        x0 = node.x0 + p,
        y0 = node.y0 + p,
        x1 = node.x1 - p,
        y1 = node.y1 - p;
    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
    node.x0 = x0;
    node.y0 = y0;
    node.x1 = x1;
    node.y1 = y1;
    if (node.children) {
      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
      x0 += paddingLeft(node) - p;
      y0 += paddingTop(node) - p;
      x1 -= paddingRight(node) - p;
      y1 -= paddingBottom(node) - p;
      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
      tile(node, x0, y0, x1, y1);
    }
  }

  treemap.round = function(x) {
    return arguments.length ? (round = !!x, treemap) : round;
  };

  treemap.size = function(x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];
  };

  treemap.tile = function(x) {
    return arguments.length ? (tile = required(x), treemap) : tile;
  };

  treemap.padding = function(x) {
    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();
  };

  treemap.paddingInner = function(x) {
    return arguments.length ? (paddingInner = typeof x === "function" ? x : constant$8(+x), treemap) : paddingInner;
  };

  treemap.paddingOuter = function(x) {
    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();
  };

  treemap.paddingTop = function(x) {
    return arguments.length ? (paddingTop = typeof x === "function" ? x : constant$8(+x), treemap) : paddingTop;
  };

  treemap.paddingRight = function(x) {
    return arguments.length ? (paddingRight = typeof x === "function" ? x : constant$8(+x), treemap) : paddingRight;
  };

  treemap.paddingBottom = function(x) {
    return arguments.length ? (paddingBottom = typeof x === "function" ? x : constant$8(+x), treemap) : paddingBottom;
  };

  treemap.paddingLeft = function(x) {
    return arguments.length ? (paddingLeft = typeof x === "function" ? x : constant$8(+x), treemap) : paddingLeft;
  };

  return treemap;
};

var binary = function(parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      i, n = nodes.length,
      sum, sums = new Array(n + 1);

  for (sums[0] = sum = i = 0; i < n; ++i) {
    sums[i + 1] = sum += nodes[i].value;
  }

  partition(0, n, parent.value, x0, y0, x1, y1);

  function partition(i, j, value, x0, y0, x1, y1) {
    if (i >= j - 1) {
      var node = nodes[i];
      node.x0 = x0, node.y0 = y0;
      node.x1 = x1, node.y1 = y1;
      return;
    }

    var valueOffset = sums[i],
        valueTarget = (value / 2) + valueOffset,
        k = i + 1,
        hi = j - 1;

    while (k < hi) {
      var mid = k + hi >>> 1;
      if (sums[mid] < valueTarget) k = mid + 1;
      else hi = mid;
    }

    var valueLeft = sums[k] - valueOffset,
        valueRight = value - valueLeft;

    if ((y1 - y0) > (x1 - x0)) {
      var yk = (y0 * valueRight + y1 * valueLeft) / value;
      partition(i, k, valueLeft, x0, y0, x1, yk);
      partition(k, j, valueRight, x0, yk, x1, y1);
    } else {
      var xk = (x0 * valueRight + x1 * valueLeft) / value;
      partition(i, k, valueLeft, x0, y0, xk, y1);
      partition(k, j, valueRight, xk, y0, x1, y1);
    }
  }
};

var sliceDice = function(parent, x0, y0, x1, y1) {
  (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);
};

var resquarify = ((function custom(ratio) {

  function resquarify(parent, x0, y0, x1, y1) {
    if ((rows = parent._squarify) && (rows.ratio === ratio)) {
      var rows,
          row,
          nodes,
          i,
          j = -1,
          n,
          m = rows.length,
          value = parent.value;

      while (++j < m) {
        row = rows[j], nodes = row.children;
        for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;
        if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);
        else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);
        value -= row.value;
      }
    } else {
      parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);
      rows.ratio = ratio;
    }
  }

  resquarify.ratio = function(x) {
    return custom((x = +x) > 1 ? x : 1);
  };

  return resquarify;
}))(phi);

var area$1 = function(polygon) {
  var i = -1,
      n = polygon.length,
      a,
      b = polygon[n - 1],
      area = 0;

  while (++i < n) {
    a = b;
    b = polygon[i];
    area += a[1] * b[0] - a[0] * b[1];
  }

  return area / 2;
};

var centroid$1 = function(polygon) {
  var i = -1,
      n = polygon.length,
      x = 0,
      y = 0,
      a,
      b = polygon[n - 1],
      c,
      k = 0;

  while (++i < n) {
    a = b;
    b = polygon[i];
    k += c = a[0] * b[1] - b[0] * a[1];
    x += (a[0] + b[0]) * c;
    y += (a[1] + b[1]) * c;
  }

  return k *= 3, [x / k, y / k];
};

// Returns the 2D cross product of AB and AC vectors, i.e., the z-component of
// the 3D cross product in a quadrant I Cartesian coordinate system (+x is
// right, +y is up). Returns a positive value if ABC is counter-clockwise,
// negative if clockwise, and zero if the points are collinear.
var cross$1 = function(a, b, c) {
  return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
};

function lexicographicOrder(a, b) {
  return a[0] - b[0] || a[1] - b[1];
}

// Computes the upper convex hull per the monotone chain algorithm.
// Assumes points.length >= 3, is sorted by x, unique in y.
// Returns an array of indices into points in left-to-right order.
function computeUpperHullIndexes(points) {
  var n = points.length,
      indexes = [0, 1],
      size = 2;

  for (var i = 2; i < n; ++i) {
    while (size > 1 && cross$1(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;
    indexes[size++] = i;
  }

  return indexes.slice(0, size); // remove popped points
}

var hull = function(points) {
  if ((n = points.length) < 3) return null;

  var i,
      n,
      sortedPoints = new Array(n),
      flippedPoints = new Array(n);

  for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];
  sortedPoints.sort(lexicographicOrder);
  for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];

  var upperIndexes = computeUpperHullIndexes(sortedPoints),
      lowerIndexes = computeUpperHullIndexes(flippedPoints);

  // Construct the hull polygon, removing possible duplicate endpoints.
  var skipLeft = lowerIndexes[0] === upperIndexes[0],
      skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],
      hull = [];

  // Add upper hull in right-to-l order.
  // Then add lower hull in left-to-right order.
  for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);
  for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);

  return hull;
};

var contains$1 = function(polygon, point) {
  var n = polygon.length,
      p = polygon[n - 1],
      x = point[0], y = point[1],
      x0 = p[0], y0 = p[1],
      x1, y1,
      inside = false;

  for (var i = 0; i < n; ++i) {
    p = polygon[i], x1 = p[0], y1 = p[1];
    if (((y1 > y) !== (y0 > y)) && (x < (x0 - x1) * (y - y1) / (y0 - y1) + x1)) inside = !inside;
    x0 = x1, y0 = y1;
  }

  return inside;
};

var length$2 = function(polygon) {
  var i = -1,
      n = polygon.length,
      b = polygon[n - 1],
      xa,
      ya,
      xb = b[0],
      yb = b[1],
      perimeter = 0;

  while (++i < n) {
    xa = xb;
    ya = yb;
    b = polygon[i];
    xb = b[0];
    yb = b[1];
    xa -= xb;
    ya -= yb;
    perimeter += Math.sqrt(xa * xa + ya * ya);
  }

  return perimeter;
};

var slice$3 = [].slice;

var noabort = {};

function Queue(size) {
  if (!(size >= 1)) throw new Error;
  this._size = size;
  this._call =
  this._error = null;
  this._tasks = [];
  this._data = [];
  this._waiting =
  this._active =
  this._ended =
  this._start = 0; // inside a synchronous task callback?
}

Queue.prototype = queue.prototype = {
  constructor: Queue,
  defer: function(callback) {
    if (typeof callback !== "function" || this._call) throw new Error;
    if (this._error != null) return this;
    var t = slice$3.call(arguments, 1);
    t.push(callback);
    ++this._waiting, this._tasks.push(t);
    poke$1(this);
    return this;
  },
  abort: function() {
    if (this._error == null) abort(this, new Error("abort"));
    return this;
  },
  await: function(callback) {
    if (typeof callback !== "function" || this._call) throw new Error;
    this._call = function(error, results) { callback.apply(null, [error].concat(results)); };
    maybeNotify(this);
    return this;
  },
  awaitAll: function(callback) {
    if (typeof callback !== "function" || this._call) throw new Error;
    this._call = callback;
    maybeNotify(this);
    return this;
  }
};

function poke$1(q) {
  if (!q._start) {
    try { start$1(q); } // let the current task complete
    catch (e) {
      if (q._tasks[q._ended + q._active - 1]) abort(q, e); // task errored synchronously
      else if (!q._data) throw e; // await callback errored synchronously
    }
  }
}

function start$1(q) {
  while (q._start = q._waiting && q._active < q._size) {
    var i = q._ended + q._active,
        t = q._tasks[i],
        j = t.length - 1,
        c = t[j];
    t[j] = end(q, i);
    --q._waiting, ++q._active;
    t = c.apply(null, t);
    if (!q._tasks[i]) continue; // task finished synchronously
    q._tasks[i] = t || noabort;
  }
}

function end(q, i) {
  return function(e, r) {
    if (!q._tasks[i]) return; // ignore multiple callbacks
    --q._active, ++q._ended;
    q._tasks[i] = null;
    if (q._error != null) return; // ignore secondary errors
    if (e != null) {
      abort(q, e);
    } else {
      q._data[i] = r;
      if (q._waiting) poke$1(q);
      else maybeNotify(q);
    }
  };
}

function abort(q, e) {
  var i = q._tasks.length, t;
  q._error = e; // ignore active callbacks
  q._data = undefined; // allow gc
  q._waiting = NaN; // prevent starting

  while (--i >= 0) {
    if (t = q._tasks[i]) {
      q._tasks[i] = null;
      if (t.abort) {
        try { t.abort(); }
        catch (e) { /* ignore */ }
      }
    }
  }

  q._active = NaN; // allow notification
  maybeNotify(q);
}

function maybeNotify(q) {
  if (!q._active && q._call) {
    var d = q._data;
    q._data = undefined; // allow gc
    q._call(q._error, d);
  }
}

function queue(concurrency) {
  return new Queue(arguments.length ? +concurrency : Infinity);
}

var uniform = function(min, max) {
  min = min == null ? 0 : +min;
  max = max == null ? 1 : +max;
  if (arguments.length === 1) max = min, min = 0;
  else max -= min;
  return function() {
    return Math.random() * max + min;
  };
};

var normal = function(mu, sigma) {
  var x, r;
  mu = mu == null ? 0 : +mu;
  sigma = sigma == null ? 1 : +sigma;
  return function() {
    var y;

    // If available, use the second previously-generated uniform random.
    if (x != null) y = x, x = null;

    // Otherwise, generate a new x and y.
    else do {
      x = Math.random() * 2 - 1;
      y = Math.random() * 2 - 1;
      r = x * x + y * y;
    } while (!r || r > 1);

    return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);
  };
};

var logNormal = function() {
  var randomNormal = normal.apply(this, arguments);
  return function() {
    return Math.exp(randomNormal());
  };
};

var irwinHall = function(n) {
  return function() {
    for (var sum = 0, i = 0; i < n; ++i) sum += Math.random();
    return sum;
  };
};

var bates = function(n) {
  var randomIrwinHall = irwinHall(n);
  return function() {
    return randomIrwinHall() / n;
  };
};

var exponential$1 = function(lambda) {
  return function() {
    return -Math.log(1 - Math.random()) / lambda;
  };
};

var request = function(url, callback) {
  var request,
      event = dispatch("beforesend", "progress", "load", "error"),
      mimeType,
      headers = map$1(),
      xhr = new XMLHttpRequest,
      user = null,
      password = null,
      response,
      responseType,
      timeout = 0;

  // If IE does not support CORS, use XDomainRequest.
  if (typeof XDomainRequest !== "undefined"
      && !("withCredentials" in xhr)
      && /^(http(s)?:)?\/\//.test(url)) xhr = new XDomainRequest;

  "onload" in xhr
      ? xhr.onload = xhr.onerror = xhr.ontimeout = respond
      : xhr.onreadystatechange = function(o) { xhr.readyState > 3 && respond(o); };

  function respond(o) {
    var status = xhr.status, result;
    if (!status && hasResponse(xhr)
        || status >= 200 && status < 300
        || status === 304) {
      if (response) {
        try {
          result = response.call(request, xhr);
        } catch (e) {
          event.call("error", request, e);
          return;
        }
      } else {
        result = xhr;
      }
      event.call("load", request, result);
    } else {
      event.call("error", request, o);
    }
  }

  xhr.onprogress = function(e) {
    event.call("progress", request, e);
  };

  request = {
    header: function(name, value) {
      name = (name + "").toLowerCase();
      if (arguments.length < 2) return headers.get(name);
      if (value == null) headers.remove(name);
      else headers.set(name, value + "");
      return request;
    },

    // If mimeType is non-null and no Accept header is set, a default is used.
    mimeType: function(value) {
      if (!arguments.length) return mimeType;
      mimeType = value == null ? null : value + "";
      return request;
    },

    // Specifies what type the response value should take;
    // for instance, arraybuffer, blob, document, or text.
    responseType: function(value) {
      if (!arguments.length) return responseType;
      responseType = value;
      return request;
    },

    timeout: function(value) {
      if (!arguments.length) return timeout;
      timeout = +value;
      return request;
    },

    user: function(value) {
      return arguments.length < 1 ? user : (user = value == null ? null : value + "", request);
    },

    password: function(value) {
      return arguments.length < 1 ? password : (password = value == null ? null : value + "", request);
    },

    // Specify how to convert the response content to a specific type;
    // changes the callback value on "load" events.
    response: function(value) {
      response = value;
      return request;
    },

    // Alias for send("GET", …).
    get: function(data, callback) {
      return request.send("GET", data, callback);
    },

    // Alias for send("POST", …).
    post: function(data, callback) {
      return request.send("POST", data, callback);
    },

    // If callback is non-null, it will be used for error and load events.
    send: function(method, data, callback) {
      xhr.open(method, url, true, user, password);
      if (mimeType != null && !headers.has("accept")) headers.set("accept", mimeType + ",*/*");
      if (xhr.setRequestHeader) headers.each(function(value, name) { xhr.setRequestHeader(name, value); });
      if (mimeType != null && xhr.overrideMimeType) xhr.overrideMimeType(mimeType);
      if (responseType != null) xhr.responseType = responseType;
      if (timeout > 0) xhr.timeout = timeout;
      if (callback == null && typeof data === "function") callback = data, data = null;
      if (callback != null && callback.length === 1) callback = fixCallback(callback);
      if (callback != null) request.on("error", callback).on("load", function(xhr) { callback(null, xhr); });
      event.call("beforesend", request, xhr);
      xhr.send(data == null ? null : data);
      return request;
    },

    abort: function() {
      xhr.abort();
      return request;
    },

    on: function() {
      var value = event.on.apply(event, arguments);
      return value === event ? request : value;
    }
  };

  if (callback != null) {
    if (typeof callback !== "function") throw new Error("invalid callback: " + callback);
    return request.get(callback);
  }

  return request;
};

function fixCallback(callback) {
  return function(error, xhr) {
    callback(error == null ? xhr : null);
  };
}

function hasResponse(xhr) {
  var type = xhr.responseType;
  return type && type !== "text"
      ? xhr.response // null on error
      : xhr.responseText; // "" on error
}

var type$1 = function(defaultMimeType, response) {
  return function(url, callback) {
    var r = request(url).mimeType(defaultMimeType).response(response);
    if (callback != null) {
      if (typeof callback !== "function") throw new Error("invalid callback: " + callback);
      return r.get(callback);
    }
    return r;
  };
};

var html = type$1("text/html", function(xhr) {
  return document.createRange().createContextualFragment(xhr.responseText);
});

var json = type$1("application/json", function(xhr) {
  return JSON.parse(xhr.responseText);
});

var text = type$1("text/plain", function(xhr) {
  return xhr.responseText;
});

var xml = type$1("application/xml", function(xhr) {
  var xml = xhr.responseXML;
  if (!xml) throw new Error("parse error");
  return xml;
});

var dsv$1 = function(defaultMimeType, parse) {
  return function(url, row, callback) {
    if (arguments.length < 3) callback = row, row = null;
    var r = request(url).mimeType(defaultMimeType);
    r.row = function(_) { return arguments.length ? r.response(responseOf(parse, row = _)) : row; };
    r.row(row);
    return callback ? r.get(callback) : r;
  };
};

function responseOf(parse, row) {
  return function(request$$1) {
    return parse(request$$1.responseText, row);
  };
}

var csv$1 = dsv$1("text/csv", csvParse);

var tsv$1 = dsv$1("text/tab-separated-values", tsvParse);

var array$2 = Array.prototype;

var map$3 = array$2.map;
var slice$4 = array$2.slice;

var implicit = {name: "implicit"};

function ordinal(range) {
  var index = map$1(),
      domain = [],
      unknown = implicit;

  range = range == null ? [] : slice$4.call(range);

  function scale(d) {
    var key = d + "", i = index.get(key);
    if (!i) {
      if (unknown !== implicit) return unknown;
      index.set(key, i = domain.push(d));
    }
    return range[(i - 1) % range.length];
  }

  scale.domain = function(_) {
    if (!arguments.length) return domain.slice();
    domain = [], index = map$1();
    var i = -1, n = _.length, d, key;
    while (++i < n) if (!index.has(key = (d = _[i]) + "")) index.set(key, domain.push(d));
    return scale;
  };

  scale.range = function(_) {
    return arguments.length ? (range = slice$4.call(_), scale) : range.slice();
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function() {
    return ordinal()
        .domain(domain)
        .range(range)
        .unknown(unknown);
  };

  return scale;
}

function band() {
  var scale = ordinal().unknown(undefined),
      domain = scale.domain,
      ordinalRange = scale.range,
      range$$1 = [0, 1],
      step,
      bandwidth,
      round = false,
      paddingInner = 0,
      paddingOuter = 0,
      align = 0.5;

  delete scale.unknown;

  function rescale() {
    var n = domain().length,
        reverse = range$$1[1] < range$$1[0],
        start = range$$1[reverse - 0],
        stop = range$$1[1 - reverse];
    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
    if (round) step = Math.floor(step);
    start += (stop - start - step * (n - paddingInner)) * align;
    bandwidth = step * (1 - paddingInner);
    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
    var values = sequence(n).map(function(i) { return start + step * i; });
    return ordinalRange(reverse ? values.reverse() : values);
  }

  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.range = function(_) {
    return arguments.length ? (range$$1 = [+_[0], +_[1]], rescale()) : range$$1.slice();
  };

  scale.rangeRound = function(_) {
    return range$$1 = [+_[0], +_[1]], round = true, rescale();
  };

  scale.bandwidth = function() {
    return bandwidth;
  };

  scale.step = function() {
    return step;
  };

  scale.round = function(_) {
    return arguments.length ? (round = !!_, rescale()) : round;
  };

  scale.padding = function(_) {
    return arguments.length ? (paddingInner = paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
  };

  scale.paddingInner = function(_) {
    return arguments.length ? (paddingInner = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
  };

  scale.paddingOuter = function(_) {
    return arguments.length ? (paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingOuter;
  };

  scale.align = function(_) {
    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
  };

  scale.copy = function() {
    return band()
        .domain(domain())
        .range(range$$1)
        .round(round)
        .paddingInner(paddingInner)
        .paddingOuter(paddingOuter)
        .align(align);
  };

  return rescale();
}

function pointish(scale) {
  var copy = scale.copy;

  scale.padding = scale.paddingOuter;
  delete scale.paddingInner;
  delete scale.paddingOuter;

  scale.copy = function() {
    return pointish(copy());
  };

  return scale;
}

function point$1() {
  return pointish(band().paddingInner(1));
}

var constant$9 = function(x) {
  return function() {
    return x;
  };
};

var number$1 = function(x) {
  return +x;
};

var unit = [0, 1];

function deinterpolateLinear(a, b) {
  return (b -= (a = +a))
      ? function(x) { return (x - a) / b; }
      : constant$9(b);
}

function deinterpolateClamp(deinterpolate) {
  return function(a, b) {
    var d = deinterpolate(a = +a, b = +b);
    return function(x) { return x <= a ? 0 : x >= b ? 1 : d(x); };
  };
}

function reinterpolateClamp(reinterpolate) {
  return function(a, b) {
    var r = reinterpolate(a = +a, b = +b);
    return function(t) { return t <= 0 ? a : t >= 1 ? b : r(t); };
  };
}

function bimap(domain, range$$1, deinterpolate, reinterpolate) {
  var d0 = domain[0], d1 = domain[1], r0 = range$$1[0], r1 = range$$1[1];
  if (d1 < d0) d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);
  else d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);
  return function(x) { return r0(d0(x)); };
}

function polymap(domain, range$$1, deinterpolate, reinterpolate) {
  var j = Math.min(domain.length, range$$1.length) - 1,
      d = new Array(j),
      r = new Array(j),
      i = -1;

  // Reverse descending domains.
  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range$$1 = range$$1.slice().reverse();
  }

  while (++i < j) {
    d[i] = deinterpolate(domain[i], domain[i + 1]);
    r[i] = reinterpolate(range$$1[i], range$$1[i + 1]);
  }

  return function(x) {
    var i = bisectRight(domain, x, 1, j) - 1;
    return r[i](d[i](x));
  };
}

function copy(source, target) {
  return target
      .domain(source.domain())
      .range(source.range())
      .interpolate(source.interpolate())
      .clamp(source.clamp());
}

// deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
// reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].
function continuous(deinterpolate, reinterpolate) {
  var domain = unit,
      range$$1 = unit,
      interpolate$$1 = interpolateValue,
      clamp = false,
      piecewise,
      output,
      input;

  function rescale() {
    piecewise = Math.min(domain.length, range$$1.length) > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }

  function scale(x) {
    return (output || (output = piecewise(domain, range$$1, clamp ? deinterpolateClamp(deinterpolate) : deinterpolate, interpolate$$1)))(+x);
  }

  scale.invert = function(y) {
    return (input || (input = piecewise(range$$1, domain, deinterpolateLinear, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y);
  };

  scale.domain = function(_) {
    return arguments.length ? (domain = map$3.call(_, number$1), rescale()) : domain.slice();
  };

  scale.range = function(_) {
    return arguments.length ? (range$$1 = slice$4.call(_), rescale()) : range$$1.slice();
  };

  scale.rangeRound = function(_) {
    return range$$1 = slice$4.call(_), interpolate$$1 = interpolateRound, rescale();
  };

  scale.clamp = function(_) {
    return arguments.length ? (clamp = !!_, rescale()) : clamp;
  };

  scale.interpolate = function(_) {
    return arguments.length ? (interpolate$$1 = _, rescale()) : interpolate$$1;
  };

  return rescale();
}

var tickFormat = function(domain, count, specifier) {
  var start = domain[0],
      stop = domain[domain.length - 1],
      step = tickStep(start, stop, count == null ? 10 : count),
      precision;
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start), Math.abs(stop));
      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
      return exports.formatPrefix(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return exports.format(specifier);
};

function linearish(scale) {
  var domain = scale.domain;

  scale.ticks = function(count) {
    var d = domain();
    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
  };

  scale.tickFormat = function(count, specifier) {
    return tickFormat(domain(), count, specifier);
  };

  scale.nice = function(count) {
    var d = domain(),
        i = d.length - 1,
        n = count == null ? 10 : count,
        start = d[0],
        stop = d[i],
        step = tickStep(start, stop, n);

    if (step) {
      step = tickStep(Math.floor(start / step) * step, Math.ceil(stop / step) * step, n);
      d[0] = Math.floor(start / step) * step;
      d[i] = Math.ceil(stop / step) * step;
      domain(d);
    }

    return scale;
  };

  return scale;
}

function linear$2() {
  var scale = continuous(deinterpolateLinear, reinterpolate);

  scale.copy = function() {
    return copy(scale, linear$2());
  };

  return linearish(scale);
}

function identity$6() {
  var domain = [0, 1];

  function scale(x) {
    return +x;
  }

  scale.invert = scale;

  scale.domain = scale.range = function(_) {
    return arguments.length ? (domain = map$3.call(_, number$1), scale) : domain.slice();
  };

  scale.copy = function() {
    return identity$6().domain(domain);
  };

  return linearish(scale);
}

var nice = function(domain, interval) {
  domain = domain.slice();

  var i0 = 0,
      i1 = domain.length - 1,
      x0 = domain[i0],
      x1 = domain[i1],
      t;

  if (x1 < x0) {
    t = i0, i0 = i1, i1 = t;
    t = x0, x0 = x1, x1 = t;
  }

  domain[i0] = interval.floor(x0);
  domain[i1] = interval.ceil(x1);
  return domain;
};

function deinterpolate(a, b) {
  return (b = Math.log(b / a))
      ? function(x) { return Math.log(x / a) / b; }
      : constant$9(b);
}

function reinterpolate$1(a, b) {
  return a < 0
      ? function(t) { return -Math.pow(-b, t) * Math.pow(-a, 1 - t); }
      : function(t) { return Math.pow(b, t) * Math.pow(a, 1 - t); };
}

function pow10(x) {
  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
}

function powp(base) {
  return base === 10 ? pow10
      : base === Math.E ? Math.exp
      : function(x) { return Math.pow(base, x); };
}

function logp(base) {
  return base === Math.E ? Math.log
      : base === 10 && Math.log10
      || base === 2 && Math.log2
      || (base = Math.log(base), function(x) { return Math.log(x) / base; });
}

function reflect(f) {
  return function(x) {
    return -f(-x);
  };
}

function log$1() {
  var scale = continuous(deinterpolate, reinterpolate$1).domain([1, 10]),
      domain = scale.domain,
      base = 10,
      logs = logp(10),
      pows = powp(10);

  function rescale() {
    logs = logp(base), pows = powp(base);
    if (domain()[0] < 0) logs = reflect(logs), pows = reflect(pows);
    return scale;
  }

  scale.base = function(_) {
    return arguments.length ? (base = +_, rescale()) : base;
  };

  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.ticks = function(count) {
    var d = domain(),
        u = d[0],
        v = d[d.length - 1],
        r;

    if (r = v < u) i = u, u = v, v = i;

    var i = logs(u),
        j = logs(v),
        p,
        k,
        t,
        n = count == null ? 10 : +count,
        z = [];

    if (!(base % 1) && j - i < n) {
      i = Math.round(i) - 1, j = Math.round(j) + 1;
      if (u > 0) for (; i < j; ++i) {
        for (k = 1, p = pows(i); k < base; ++k) {
          t = p * k;
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      } else for (; i < j; ++i) {
        for (k = base - 1, p = pows(i); k >= 1; --k) {
          t = p * k;
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      }
    } else {
      z = ticks(i, j, Math.min(j - i, n)).map(pows);
    }

    return r ? z.reverse() : z;
  };

  scale.tickFormat = function(count, specifier) {
    if (specifier == null) specifier = base === 10 ? ".0e" : ",";
    if (typeof specifier !== "function") specifier = exports.format(specifier);
    if (count === Infinity) return specifier;
    if (count == null) count = 10;
    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?
    return function(d) {
      var i = d / pows(Math.round(logs(d)));
      if (i * base < base - 0.5) i *= base;
      return i <= k ? specifier(d) : "";
    };
  };

  scale.nice = function() {
    return domain(nice(domain(), {
      floor: function(x) { return pows(Math.floor(logs(x))); },
      ceil: function(x) { return pows(Math.ceil(logs(x))); }
    }));
  };

  scale.copy = function() {
    return copy(scale, log$1().base(base));
  };

  return scale;
}

function raise$1(x, exponent) {
  return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
}

function pow$1() {
  var exponent = 1,
      scale = continuous(deinterpolate, reinterpolate),
      domain = scale.domain;

  function deinterpolate(a, b) {
    return (b = raise$1(b, exponent) - (a = raise$1(a, exponent)))
        ? function(x) { return (raise$1(x, exponent) - a) / b; }
        : constant$9(b);
  }

  function reinterpolate(a, b) {
    b = raise$1(b, exponent) - (a = raise$1(a, exponent));
    return function(t) { return raise$1(a + b * t, 1 / exponent); };
  }

  scale.exponent = function(_) {
    return arguments.length ? (exponent = +_, domain(domain())) : exponent;
  };

  scale.copy = function() {
    return copy(scale, pow$1().exponent(exponent));
  };

  return linearish(scale);
}

function sqrt$1() {
  return pow$1().exponent(0.5);
}

function quantile$$1() {
  var domain = [],
      range$$1 = [],
      thresholds = [];

  function rescale() {
    var i = 0, n = Math.max(1, range$$1.length);
    thresholds = new Array(n - 1);
    while (++i < n) thresholds[i - 1] = threshold(domain, i / n);
    return scale;
  }

  function scale(x) {
    if (!isNaN(x = +x)) return range$$1[bisectRight(thresholds, x)];
  }

  scale.invertExtent = function(y) {
    var i = range$$1.indexOf(y);
    return i < 0 ? [NaN, NaN] : [
      i > 0 ? thresholds[i - 1] : domain[0],
      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
    ];
  };

  scale.domain = function(_) {
    if (!arguments.length) return domain.slice();
    domain = [];
    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);
    domain.sort(ascending);
    return rescale();
  };

  scale.range = function(_) {
    return arguments.length ? (range$$1 = slice$4.call(_), rescale()) : range$$1.slice();
  };

  scale.quantiles = function() {
    return thresholds.slice();
  };

  scale.copy = function() {
    return quantile$$1()
        .domain(domain)
        .range(range$$1);
  };

  return scale;
}

function quantize$1() {
  var x0 = 0,
      x1 = 1,
      n = 1,
      domain = [0.5],
      range$$1 = [0, 1];

  function scale(x) {
    if (x <= x) return range$$1[bisectRight(domain, x, 0, n)];
  }

  function rescale() {
    var i = -1;
    domain = new Array(n);
    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
    return scale;
  }

  scale.domain = function(_) {
    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];
  };

  scale.range = function(_) {
    return arguments.length ? (n = (range$$1 = slice$4.call(_)).length - 1, rescale()) : range$$1.slice();
  };

  scale.invertExtent = function(y) {
    var i = range$$1.indexOf(y);
    return i < 0 ? [NaN, NaN]
        : i < 1 ? [x0, domain[0]]
        : i >= n ? [domain[n - 1], x1]
        : [domain[i - 1], domain[i]];
  };

  scale.copy = function() {
    return quantize$1()
        .domain([x0, x1])
        .range(range$$1);
  };

  return linearish(scale);
}

function threshold$1() {
  var domain = [0.5],
      range$$1 = [0, 1],
      n = 1;

  function scale(x) {
    if (x <= x) return range$$1[bisectRight(domain, x, 0, n)];
  }

  scale.domain = function(_) {
    return arguments.length ? (domain = slice$4.call(_), n = Math.min(domain.length, range$$1.length - 1), scale) : domain.slice();
  };

  scale.range = function(_) {
    return arguments.length ? (range$$1 = slice$4.call(_), n = Math.min(domain.length, range$$1.length - 1), scale) : range$$1.slice();
  };

  scale.invertExtent = function(y) {
    var i = range$$1.indexOf(y);
    return [domain[i - 1], domain[i]];
  };

  scale.copy = function() {
    return threshold$1()
        .domain(domain)
        .range(range$$1);
  };

  return scale;
}

var t0$1 = new Date;
var t1$1 = new Date;

function newInterval(floori, offseti, count, field) {

  function interval(date) {
    return floori(date = new Date(+date)), date;
  }

  interval.floor = interval;

  interval.ceil = function(date) {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };

  interval.round = function(date) {
    var d0 = interval(date),
        d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };

  interval.offset = function(date, step) {
    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };

  interval.range = function(start, stop, step) {
    var range = [];
    start = interval.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
    do range.push(new Date(+start)); while (offseti(start, step), floori(start), start < stop)
    return range;
  };

  interval.filter = function(test) {
    return newInterval(function(date) {
      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
    }, function(date, step) {
      if (date >= date) while (--step >= 0) while (offseti(date, 1), !test(date)) {} // eslint-disable-line no-empty
    });
  };

  if (count) {
    interval.count = function(start, end) {
      t0$1.setTime(+start), t1$1.setTime(+end);
      floori(t0$1), floori(t1$1);
      return Math.floor(count(t0$1, t1$1));
    };

    interval.every = function(step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null
          : !(step > 1) ? interval
          : interval.filter(field
              ? function(d) { return field(d) % step === 0; }
              : function(d) { return interval.count(0, d) % step === 0; });
    };
  }

  return interval;
}

var millisecond = newInterval(function() {
  // noop
}, function(date, step) {
  date.setTime(+date + step);
}, function(start, end) {
  return end - start;
});

// An optimized implementation for this simple case.
millisecond.every = function(k) {
  k = Math.floor(k);
  if (!isFinite(k) || !(k > 0)) return null;
  if (!(k > 1)) return millisecond;
  return newInterval(function(date) {
    date.setTime(Math.floor(date / k) * k);
  }, function(date, step) {
    date.setTime(+date + step * k);
  }, function(start, end) {
    return (end - start) / k;
  });
};

var milliseconds = millisecond.range;

var durationSecond$1 = 1e3;
var durationMinute$1 = 6e4;
var durationHour$1 = 36e5;
var durationDay$1 = 864e5;
var durationWeek$1 = 6048e5;

var second = newInterval(function(date) {
  date.setTime(Math.floor(date / durationSecond$1) * durationSecond$1);
}, function(date, step) {
  date.setTime(+date + step * durationSecond$1);
}, function(start, end) {
  return (end - start) / durationSecond$1;
}, function(date) {
  return date.getUTCSeconds();
});

var seconds = second.range;

var minute = newInterval(function(date) {
  date.setTime(Math.floor(date / durationMinute$1) * durationMinute$1);
}, function(date, step) {
  date.setTime(+date + step * durationMinute$1);
}, function(start, end) {
  return (end - start) / durationMinute$1;
}, function(date) {
  return date.getMinutes();
});

var minutes = minute.range;

var hour = newInterval(function(date) {
  var offset = date.getTimezoneOffset() * durationMinute$1 % durationHour$1;
  if (offset < 0) offset += durationHour$1;
  date.setTime(Math.floor((+date - offset) / durationHour$1) * durationHour$1 + offset);
}, function(date, step) {
  date.setTime(+date + step * durationHour$1);
}, function(start, end) {
  return (end - start) / durationHour$1;
}, function(date) {
  return date.getHours();
});

var hours = hour.range;

var day = newInterval(function(date) {
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setDate(date.getDate() + step);
}, function(start, end) {
  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute$1) / durationDay$1;
}, function(date) {
  return date.getDate() - 1;
});

var days = day.range;

function weekday(i) {
  return newInterval(function(date) {
    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setDate(date.getDate() + step * 7);
  }, function(start, end) {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute$1) / durationWeek$1;
  });
}

var sunday = weekday(0);
var monday = weekday(1);
var tuesday = weekday(2);
var wednesday = weekday(3);
var thursday = weekday(4);
var friday = weekday(5);
var saturday = weekday(6);

var sundays = sunday.range;
var mondays = monday.range;
var tuesdays = tuesday.range;
var wednesdays = wednesday.range;
var thursdays = thursday.range;
var fridays = friday.range;
var saturdays = saturday.range;

var month = newInterval(function(date) {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setMonth(date.getMonth() + step);
}, function(start, end) {
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, function(date) {
  return date.getMonth();
});

var months = month.range;

var year = newInterval(function(date) {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setFullYear(date.getFullYear() + step);
}, function(start, end) {
  return end.getFullYear() - start.getFullYear();
}, function(date) {
  return date.getFullYear();
});

// An optimized implementation for this simple case.
year.every = function(k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setFullYear(date.getFullYear() + step * k);
  });
};

var years = year.range;

var utcMinute = newInterval(function(date) {
  date.setUTCSeconds(0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationMinute$1);
}, function(start, end) {
  return (end - start) / durationMinute$1;
}, function(date) {
  return date.getUTCMinutes();
});

var utcMinutes = utcMinute.range;

var utcHour = newInterval(function(date) {
  date.setUTCMinutes(0, 0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationHour$1);
}, function(start, end) {
  return (end - start) / durationHour$1;
}, function(date) {
  return date.getUTCHours();
});

var utcHours = utcHour.range;

var utcDay = newInterval(function(date) {
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCDate(date.getUTCDate() + step);
}, function(start, end) {
  return (end - start) / durationDay$1;
}, function(date) {
  return date.getUTCDate() - 1;
});

var utcDays = utcDay.range;

function utcWeekday(i) {
  return newInterval(function(date) {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, function(start, end) {
    return (end - start) / durationWeek$1;
  });
}

var utcSunday = utcWeekday(0);
var utcMonday = utcWeekday(1);
var utcTuesday = utcWeekday(2);
var utcWednesday = utcWeekday(3);
var utcThursday = utcWeekday(4);
var utcFriday = utcWeekday(5);
var utcSaturday = utcWeekday(6);

var utcSundays = utcSunday.range;
var utcMondays = utcMonday.range;
var utcTuesdays = utcTuesday.range;
var utcWednesdays = utcWednesday.range;
var utcThursdays = utcThursday.range;
var utcFridays = utcFriday.range;
var utcSaturdays = utcSaturday.range;

var utcMonth = newInterval(function(date) {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCMonth(date.getUTCMonth() + step);
}, function(start, end) {
  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, function(date) {
  return date.getUTCMonth();
});

var utcMonths = utcMonth.range;

var utcYear = newInterval(function(date) {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, function(start, end) {
  return end.getUTCFullYear() - start.getUTCFullYear();
}, function(date) {
  return date.getUTCFullYear();
});

// An optimized implementation for this simple case.
utcYear.every = function(k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step * k);
  });
};

var utcYears = utcYear.range;

function localDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date.setFullYear(d.y);
    return date;
  }
  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}

function utcDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date.setUTCFullYear(d.y);
    return date;
  }
  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}

function newYear(y) {
  return {y: y, m: 0, d: 1, H: 0, M: 0, S: 0, L: 0};
}

function formatLocale$1(locale) {
  var locale_dateTime = locale.dateTime,
      locale_date = locale.date,
      locale_time = locale.time,
      locale_periods = locale.periods,
      locale_weekdays = locale.days,
      locale_shortWeekdays = locale.shortDays,
      locale_months = locale.months,
      locale_shortMonths = locale.shortMonths;

  var periodRe = formatRe(locale_periods),
      periodLookup = formatLookup(locale_periods),
      weekdayRe = formatRe(locale_weekdays),
      weekdayLookup = formatLookup(locale_weekdays),
      shortWeekdayRe = formatRe(locale_shortWeekdays),
      shortWeekdayLookup = formatLookup(locale_shortWeekdays),
      monthRe = formatRe(locale_months),
      monthLookup = formatLookup(locale_months),
      shortMonthRe = formatRe(locale_shortMonths),
      shortMonthLookup = formatLookup(locale_shortMonths);

  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "S": formatSeconds,
    "U": formatWeekNumberSunday,
    "w": formatWeekdayNumber,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };

  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "S": formatUTCSeconds,
    "U": formatUTCWeekNumberSunday,
    "w": formatUTCWeekdayNumber,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };

  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "S": parseSeconds,
    "U": parseWeekNumberSunday,
    "w": parseWeekdayNumber,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  };

  // These recursive directive definitions must be deferred.
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);

  function newFormat(specifier, formats) {
    return function(date) {
      var string = [],
          i = -1,
          j = 0,
          n = specifier.length,
          c,
          pad,
          format;

      if (!(date instanceof Date)) date = new Date(+date);

      while (++i < n) {
        if (specifier.charCodeAt(i) === 37) {
          string.push(specifier.slice(j, i));
          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
          else pad = c === "e" ? " " : "0";
          if (format = formats[c]) c = format(date, pad);
          string.push(c);
          j = i + 1;
        }
      }

      string.push(specifier.slice(j, i));
      return string.join("");
    };
  }

  function newParse(specifier, newDate) {
    return function(string) {
      var d = newYear(1900),
          i = parseSpecifier(d, specifier, string += "", 0);
      if (i != string.length) return null;

      // The am-pm flag is 0 for AM, and 1 for PM.
      if ("p" in d) d.H = d.H % 12 + d.p * 12;

      // Convert day-of-week and week-of-year to day-of-year.
      if ("W" in d || "U" in d) {
        if (!("w" in d)) d.w = "W" in d ? 1 : 0;
        var day$$1 = "Z" in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day$$1 + 5) % 7 : d.w + d.U * 7 - (day$$1 + 6) % 7;
      }

      // If a time zone is specified, all fields are interpreted as UTC and then
      // offset according to the specified time zone.
      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate(d);
      }

      // Otherwise, all fields are in local time.
      return newDate(d);
    };
  }

  function parseSpecifier(d, specifier, string, j) {
    var i = 0,
        n = specifier.length,
        m = string.length,
        c,
        parse;

    while (i < n) {
      if (j >= m) return -1;
      c = specifier.charCodeAt(i++);
      if (c === 37) {
        c = specifier.charAt(i++);
        parse = parses[c in pads ? specifier.charAt(i++) : c];
        if (!parse || ((j = parse(d, string, j)) < 0)) return -1;
      } else if (c != string.charCodeAt(j++)) {
        return -1;
      }
    }

    return j;
  }

  function parsePeriod(d, string, i) {
    var n = periodRe.exec(string.slice(i));
    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseShortWeekday(d, string, i) {
    var n = shortWeekdayRe.exec(string.slice(i));
    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseWeekday(d, string, i) {
    var n = weekdayRe.exec(string.slice(i));
    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseShortMonth(d, string, i) {
    var n = shortMonthRe.exec(string.slice(i));
    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseMonth(d, string, i) {
    var n = monthRe.exec(string.slice(i));
    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseLocaleDateTime(d, string, i) {
    return parseSpecifier(d, locale_dateTime, string, i);
  }

  function parseLocaleDate(d, string, i) {
    return parseSpecifier(d, locale_date, string, i);
  }

  function parseLocaleTime(d, string, i) {
    return parseSpecifier(d, locale_time, string, i);
  }

  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }

  function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
  }

  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }

  function formatMonth(d) {
    return locale_months[d.getMonth()];
  }

  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }

  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }

  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }

  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }

  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }

  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }

  return {
    format: function(specifier) {
      var f = newFormat(specifier += "", formats);
      f.toString = function() { return specifier; };
      return f;
    },
    parse: function(specifier) {
      var p = newParse(specifier += "", localDate);
      p.toString = function() { return specifier; };
      return p;
    },
    utcFormat: function(specifier) {
      var f = newFormat(specifier += "", utcFormats);
      f.toString = function() { return specifier; };
      return f;
    },
    utcParse: function(specifier) {
      var p = newParse(specifier, utcDate);
      p.toString = function() { return specifier; };
      return p;
    }
  };
}

var pads = {"-": "", "_": " ", "0": "0"};
var numberRe = /^\s*\d+/;
var percentRe = /^%/;
var requoteRe = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;

function pad(value, fill, width) {
  var sign = value < 0 ? "-" : "",
      string = (sign ? -value : value) + "",
      length = string.length;
  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}

function requote(s) {
  return s.replace(requoteRe, "\\$&");
}

function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}

function formatLookup(names) {
  var map = {}, i = -1, n = names.length;
  while (++i < n) map[names[i].toLowerCase()] = i;
  return map;
}

function parseWeekdayNumber(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.w = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.U = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.W = +n[0], i + n[0].length) : -1;
}

function parseFullYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 4));
  return n ? (d.y = +n[0], i + n[0].length) : -1;
}

function parseYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
}

function parseZone(d, string, i) {
  var n = /^(Z)|([+-]\d\d)(?:\:?(\d\d))?/.exec(string.slice(i, i + 6));
  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
}

function parseMonthNumber(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
}

function parseDayOfMonth(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.d = +n[0], i + n[0].length) : -1;
}

function parseDayOfYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
}

function parseHour24(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.H = +n[0], i + n[0].length) : -1;
}

function parseMinutes(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.M = +n[0], i + n[0].length) : -1;
}

function parseSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.S = +n[0], i + n[0].length) : -1;
}

function parseMilliseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.L = +n[0], i + n[0].length) : -1;
}

function parseLiteralPercent(d, string, i) {
  var n = percentRe.exec(string.slice(i, i + 1));
  return n ? i + n[0].length : -1;
}

function formatDayOfMonth(d, p) {
  return pad(d.getDate(), p, 2);
}

function formatHour24(d, p) {
  return pad(d.getHours(), p, 2);
}

function formatHour12(d, p) {
  return pad(d.getHours() % 12 || 12, p, 2);
}

function formatDayOfYear(d, p) {
  return pad(1 + day.count(year(d), d), p, 3);
}

function formatMilliseconds(d, p) {
  return pad(d.getMilliseconds(), p, 3);
}

function formatMonthNumber(d, p) {
  return pad(d.getMonth() + 1, p, 2);
}

function formatMinutes(d, p) {
  return pad(d.getMinutes(), p, 2);
}

function formatSeconds(d, p) {
  return pad(d.getSeconds(), p, 2);
}

function formatWeekNumberSunday(d, p) {
  return pad(sunday.count(year(d), d), p, 2);
}

function formatWeekdayNumber(d) {
  return d.getDay();
}

function formatWeekNumberMonday(d, p) {
  return pad(monday.count(year(d), d), p, 2);
}

function formatYear(d, p) {
  return pad(d.getFullYear() % 100, p, 2);
}

function formatFullYear(d, p) {
  return pad(d.getFullYear() % 10000, p, 4);
}

function formatZone(d) {
  var z = d.getTimezoneOffset();
  return (z > 0 ? "-" : (z *= -1, "+"))
      + pad(z / 60 | 0, "0", 2)
      + pad(z % 60, "0", 2);
}

function formatUTCDayOfMonth(d, p) {
  return pad(d.getUTCDate(), p, 2);
}

function formatUTCHour24(d, p) {
  return pad(d.getUTCHours(), p, 2);
}

function formatUTCHour12(d, p) {
  return pad(d.getUTCHours() % 12 || 12, p, 2);
}

function formatUTCDayOfYear(d, p) {
  return pad(1 + utcDay.count(utcYear(d), d), p, 3);
}

function formatUTCMilliseconds(d, p) {
  return pad(d.getUTCMilliseconds(), p, 3);
}

function formatUTCMonthNumber(d, p) {
  return pad(d.getUTCMonth() + 1, p, 2);
}

function formatUTCMinutes(d, p) {
  return pad(d.getUTCMinutes(), p, 2);
}

function formatUTCSeconds(d, p) {
  return pad(d.getUTCSeconds(), p, 2);
}

function formatUTCWeekNumberSunday(d, p) {
  return pad(utcSunday.count(utcYear(d), d), p, 2);
}

function formatUTCWeekdayNumber(d) {
  return d.getUTCDay();
}

function formatUTCWeekNumberMonday(d, p) {
  return pad(utcMonday.count(utcYear(d), d), p, 2);
}

function formatUTCYear(d, p) {
  return pad(d.getUTCFullYear() % 100, p, 2);
}

function formatUTCFullYear(d, p) {
  return pad(d.getUTCFullYear() % 10000, p, 4);
}

function formatUTCZone() {
  return "+0000";
}

function formatLiteralPercent() {
  return "%";
}

var locale$2;





defaultLocale$1({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});

function defaultLocale$1(definition) {
  locale$2 = formatLocale$1(definition);
  exports.timeFormat = locale$2.format;
  exports.timeParse = locale$2.parse;
  exports.utcFormat = locale$2.utcFormat;
  exports.utcParse = locale$2.utcParse;
  return locale$2;
}

var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";

function formatIsoNative(date) {
  return date.toISOString();
}

var formatIso = Date.prototype.toISOString
    ? formatIsoNative
    : exports.utcFormat(isoSpecifier);

function parseIsoNative(string) {
  var date = new Date(string);
  return isNaN(date) ? null : date;
}

var parseIso = +new Date("2000-01-01T00:00:00.000Z")
    ? parseIsoNative
    : exports.utcParse(isoSpecifier);

var durationSecond = 1000;
var durationMinute = durationSecond * 60;
var durationHour = durationMinute * 60;
var durationDay = durationHour * 24;
var durationWeek = durationDay * 7;
var durationMonth = durationDay * 30;
var durationYear = durationDay * 365;

function date$1(t) {
  return new Date(t);
}

function number$2(t) {
  return t instanceof Date ? +t : +new Date(+t);
}

function calendar(year$$1, month$$1, week, day$$1, hour$$1, minute$$1, second$$1, millisecond$$1, format) {
  var scale = continuous(deinterpolateLinear, reinterpolate),
      invert = scale.invert,
      domain = scale.domain;

  var formatMillisecond = format(".%L"),
      formatSecond = format(":%S"),
      formatMinute = format("%I:%M"),
      formatHour = format("%I %p"),
      formatDay = format("%a %d"),
      formatWeek = format("%b %d"),
      formatMonth = format("%B"),
      formatYear = format("%Y");

  var tickIntervals = [
    [second$$1,  1,      durationSecond],
    [second$$1,  5,  5 * durationSecond],
    [second$$1, 15, 15 * durationSecond],
    [second$$1, 30, 30 * durationSecond],
    [minute$$1,  1,      durationMinute],
    [minute$$1,  5,  5 * durationMinute],
    [minute$$1, 15, 15 * durationMinute],
    [minute$$1, 30, 30 * durationMinute],
    [  hour$$1,  1,      durationHour  ],
    [  hour$$1,  3,  3 * durationHour  ],
    [  hour$$1,  6,  6 * durationHour  ],
    [  hour$$1, 12, 12 * durationHour  ],
    [   day$$1,  1,      durationDay   ],
    [   day$$1,  2,  2 * durationDay   ],
    [  week,  1,      durationWeek  ],
    [ month$$1,  1,      durationMonth ],
    [ month$$1,  3,  3 * durationMonth ],
    [  year$$1,  1,      durationYear  ]
  ];

  function tickFormat(date) {
    return (second$$1(date) < date ? formatMillisecond
        : minute$$1(date) < date ? formatSecond
        : hour$$1(date) < date ? formatMinute
        : day$$1(date) < date ? formatHour
        : month$$1(date) < date ? (week(date) < date ? formatDay : formatWeek)
        : year$$1(date) < date ? formatMonth
        : formatYear)(date);
  }

  function tickInterval(interval, start, stop, step) {
    if (interval == null) interval = 10;

    // If a desired tick count is specified, pick a reasonable tick interval
    // based on the extent of the domain and a rough estimate of tick size.
    // Otherwise, assume interval is already a time interval and use it.
    if (typeof interval === "number") {
      var target = Math.abs(stop - start) / interval,
          i = bisector(function(i) { return i[2]; }).right(tickIntervals, target);
      if (i === tickIntervals.length) {
        step = tickStep(start / durationYear, stop / durationYear, interval);
        interval = year$$1;
      } else if (i) {
        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
        step = i[1];
        interval = i[0];
      } else {
        step = tickStep(start, stop, interval);
        interval = millisecond$$1;
      }
    }

    return step == null ? interval : interval.every(step);
  }

  scale.invert = function(y) {
    return new Date(invert(y));
  };

  scale.domain = function(_) {
    return arguments.length ? domain(map$3.call(_, number$2)) : domain().map(date$1);
  };

  scale.ticks = function(interval, step) {
    var d = domain(),
        t0 = d[0],
        t1 = d[d.length - 1],
        r = t1 < t0,
        t;
    if (r) t = t0, t0 = t1, t1 = t;
    t = tickInterval(interval, t0, t1, step);
    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop
    return r ? t.reverse() : t;
  };

  scale.tickFormat = function(count, specifier) {
    return specifier == null ? tickFormat : format(specifier);
  };

  scale.nice = function(interval, step) {
    var d = domain();
    return (interval = tickInterval(interval, d[0], d[d.length - 1], step))
        ? domain(nice(d, interval))
        : scale;
  };

  scale.copy = function() {
    return copy(scale, calendar(year$$1, month$$1, week, day$$1, hour$$1, minute$$1, second$$1, millisecond$$1, format));
  };

  return scale;
}

var time = function() {
  return calendar(year, month, sunday, day, hour, minute, second, millisecond, exports.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]);
};

var utcTime = function() {
  return calendar(utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute, second, millisecond, exports.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]);
};

var colors = function(s) {
  return s.match(/.{6}/g).map(function(x) {
    return "#" + x;
  });
};

var category10 = colors("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

var category20b = colors("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6");

var category20c = colors("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9");

var category20 = colors("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5");

var cubehelix$3 = cubehelixLong(cubehelix(300, 0.5, 0.0), cubehelix(-240, 0.5, 1.0));

var warm = cubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.50, 0.8));

var cool = cubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.50, 0.8));

var rainbow = cubehelix();

var rainbow$1 = function(t) {
  if (t < 0 || t > 1) t -= Math.floor(t);
  var ts = Math.abs(t - 0.5);
  rainbow.h = 360 * t - 100;
  rainbow.s = 1.5 - 1.5 * ts;
  rainbow.l = 0.8 - 0.9 * ts;
  return rainbow + "";
};

function ramp(range) {
  var n = range.length;
  return function(t) {
    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
  };
}

var viridis = ramp(colors("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));

var magma = ramp(colors("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));

var inferno = ramp(colors("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));

var plasma = ramp(colors("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));

function sequential(interpolator) {
  var x0 = 0,
      x1 = 1,
      clamp = false;

  function scale(x) {
    var t = (x - x0) / (x1 - x0);
    return interpolator(clamp ? Math.max(0, Math.min(1, t)) : t);
  }

  scale.domain = function(_) {
    return arguments.length ? (x0 = +_[0], x1 = +_[1], scale) : [x0, x1];
  };

  scale.clamp = function(_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
  };

  scale.interpolator = function(_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  scale.copy = function() {
    return sequential(interpolator).domain([x0, x1]).clamp(clamp);
  };

  return linearish(scale);
}

var constant$10 = function(x) {
  return function constant() {
    return x;
  };
};

var abs$1 = Math.abs;
var atan2$1 = Math.atan2;
var cos$2 = Math.cos;
var max$2 = Math.max;
var min$1 = Math.min;
var sin$2 = Math.sin;
var sqrt$2 = Math.sqrt;

var epsilon$3 = 1e-12;
var pi$4 = Math.PI;
var halfPi$3 = pi$4 / 2;
var tau$4 = 2 * pi$4;

function acos$1(x) {
  return x > 1 ? 0 : x < -1 ? pi$4 : Math.acos(x);
}

function asin$1(x) {
  return x >= 1 ? halfPi$3 : x <= -1 ? -halfPi$3 : Math.asin(x);
}

function arcInnerRadius(d) {
  return d.innerRadius;
}

function arcOuterRadius(d) {
  return d.outerRadius;
}

function arcStartAngle(d) {
  return d.startAngle;
}

function arcEndAngle(d) {
  return d.endAngle;
}

function arcPadAngle(d) {
  return d && d.padAngle; // Note: optional!
}

function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
  var x10 = x1 - x0, y10 = y1 - y0,
      x32 = x3 - x2, y32 = y3 - y2,
      t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);
  return [x0 + t * x10, y0 + t * y10];
}

// Compute perpendicular offset line of length rc.
// http://mathworld.wolfram.com/Circle-LineIntersection.html
function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
  var x01 = x0 - x1,
      y01 = y0 - y1,
      lo = (cw ? rc : -rc) / sqrt$2(x01 * x01 + y01 * y01),
      ox = lo * y01,
      oy = -lo * x01,
      x11 = x0 + ox,
      y11 = y0 + oy,
      x10 = x1 + ox,
      y10 = y1 + oy,
      x00 = (x11 + x10) / 2,
      y00 = (y11 + y10) / 2,
      dx = x10 - x11,
      dy = y10 - y11,
      d2 = dx * dx + dy * dy,
      r = r1 - rc,
      D = x11 * y10 - x10 * y11,
      d = (dy < 0 ? -1 : 1) * sqrt$2(max$2(0, r * r * d2 - D * D)),
      cx0 = (D * dy - dx * d) / d2,
      cy0 = (-D * dx - dy * d) / d2,
      cx1 = (D * dy + dx * d) / d2,
      cy1 = (-D * dx + dy * d) / d2,
      dx0 = cx0 - x00,
      dy0 = cy0 - y00,
      dx1 = cx1 - x00,
      dy1 = cy1 - y00;

  // Pick the closer of the two intersection points.
  // TODO Is there a faster way to determine which intersection to use?
  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;

  return {
    cx: cx0,
    cy: cy0,
    x01: -ox,
    y01: -oy,
    x11: cx0 * (r1 / r - 1),
    y11: cy0 * (r1 / r - 1)
  };
}

var arc = function() {
  var innerRadius = arcInnerRadius,
      outerRadius = arcOuterRadius,
      cornerRadius = constant$10(0),
      padRadius = null,
      startAngle = arcStartAngle,
      endAngle = arcEndAngle,
      padAngle = arcPadAngle,
      context = null;

  function arc() {
    var buffer,
        r,
        r0 = +innerRadius.apply(this, arguments),
        r1 = +outerRadius.apply(this, arguments),
        a0 = startAngle.apply(this, arguments) - halfPi$3,
        a1 = endAngle.apply(this, arguments) - halfPi$3,
        da = abs$1(a1 - a0),
        cw = a1 > a0;

    if (!context) context = buffer = path();

    // Ensure that the outer radius is always larger than the inner radius.
    if (r1 < r0) r = r1, r1 = r0, r0 = r;

    // Is it a point?
    if (!(r1 > epsilon$3)) context.moveTo(0, 0);

    // Or is it a circle or annulus?
    else if (da > tau$4 - epsilon$3) {
      context.moveTo(r1 * cos$2(a0), r1 * sin$2(a0));
      context.arc(0, 0, r1, a0, a1, !cw);
      if (r0 > epsilon$3) {
        context.moveTo(r0 * cos$2(a1), r0 * sin$2(a1));
        context.arc(0, 0, r0, a1, a0, cw);
      }
    }

    // Or is it a circular or annular sector?
    else {
      var a01 = a0,
          a11 = a1,
          a00 = a0,
          a10 = a1,
          da0 = da,
          da1 = da,
          ap = padAngle.apply(this, arguments) / 2,
          rp = (ap > epsilon$3) && (padRadius ? +padRadius.apply(this, arguments) : sqrt$2(r0 * r0 + r1 * r1)),
          rc = min$1(abs$1(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
          rc0 = rc,
          rc1 = rc,
          t0,
          t1;

      // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
      if (rp > epsilon$3) {
        var p0 = asin$1(rp / r0 * sin$2(ap)),
            p1 = asin$1(rp / r1 * sin$2(ap));
        if ((da0 -= p0 * 2) > epsilon$3) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;
        else da0 = 0, a00 = a10 = (a0 + a1) / 2;
        if ((da1 -= p1 * 2) > epsilon$3) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;
        else da1 = 0, a01 = a11 = (a0 + a1) / 2;
      }

      var x01 = r1 * cos$2(a01),
          y01 = r1 * sin$2(a01),
          x10 = r0 * cos$2(a10),
          y10 = r0 * sin$2(a10);

      // Apply rounded corners?
      if (rc > epsilon$3) {
        var x11 = r1 * cos$2(a11),
            y11 = r1 * sin$2(a11),
            x00 = r0 * cos$2(a00),
            y00 = r0 * sin$2(a00);

        // Restrict the corner radius according to the sector angle.
        if (da < pi$4) {
          var oc = da0 > epsilon$3 ? intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [x10, y10],
              ax = x01 - oc[0],
              ay = y01 - oc[1],
              bx = x11 - oc[0],
              by = y11 - oc[1],
              kc = 1 / sin$2(acos$1((ax * bx + ay * by) / (sqrt$2(ax * ax + ay * ay) * sqrt$2(bx * bx + by * by))) / 2),
              lc = sqrt$2(oc[0] * oc[0] + oc[1] * oc[1]);
          rc0 = min$1(rc, (r0 - lc) / (kc - 1));
          rc1 = min$1(rc, (r1 - lc) / (kc + 1));
        }
      }

      // Is the sector collapsed to a line?
      if (!(da1 > epsilon$3)) context.moveTo(x01, y01);

      // Does the sector’s outer ring have rounded corners?
      else if (rc1 > epsilon$3) {
        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);

        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);

        // Have the corners merged?
        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2$1(t0.y01, t0.x01), atan2$1(t1.y01, t1.x01), !cw);

        // Otherwise, draw the two corners and the ring.
        else {
          context.arc(t0.cx, t0.cy, rc1, atan2$1(t0.y01, t0.x01), atan2$1(t0.y11, t0.x11), !cw);
          context.arc(0, 0, r1, atan2$1(t0.cy + t0.y11, t0.cx + t0.x11), atan2$1(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
          context.arc(t1.cx, t1.cy, rc1, atan2$1(t1.y11, t1.x11), atan2$1(t1.y01, t1.x01), !cw);
        }
      }

      // Or is the outer ring just a circular arc?
      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);

      // Is there no inner ring, and it’s a circular sector?
      // Or perhaps it’s an annular sector collapsed due to padding?
      if (!(r0 > epsilon$3) || !(da0 > epsilon$3)) context.lineTo(x10, y10);

      // Does the sector’s inner ring (or point) have rounded corners?
      else if (rc0 > epsilon$3) {
        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);

        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);

        // Have the corners merged?
        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2$1(t0.y01, t0.x01), atan2$1(t1.y01, t1.x01), !cw);

        // Otherwise, draw the two corners and the ring.
        else {
          context.arc(t0.cx, t0.cy, rc0, atan2$1(t0.y01, t0.x01), atan2$1(t0.y11, t0.x11), !cw);
          context.arc(0, 0, r0, atan2$1(t0.cy + t0.y11, t0.cx + t0.x11), atan2$1(t1.cy + t1.y11, t1.cx + t1.x11), cw);
          context.arc(t1.cx, t1.cy, rc0, atan2$1(t1.y11, t1.x11), atan2$1(t1.y01, t1.x01), !cw);
        }
      }

      // Or is the inner ring just a circular arc?
      else context.arc(0, 0, r0, a10, a00, cw);
    }

    context.closePath();

    if (buffer) return context = null, buffer + "" || null;
  }

  arc.centroid = function() {
    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi$4 / 2;
    return [cos$2(a) * r, sin$2(a) * r];
  };

  arc.innerRadius = function(_) {
    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant$10(+_), arc) : innerRadius;
  };

  arc.outerRadius = function(_) {
    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant$10(+_), arc) : outerRadius;
  };

  arc.cornerRadius = function(_) {
    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant$10(+_), arc) : cornerRadius;
  };

  arc.padRadius = function(_) {
    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant$10(+_), arc) : padRadius;
  };

  arc.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$10(+_), arc) : startAngle;
  };

  arc.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$10(+_), arc) : endAngle;
  };

  arc.padAngle = function(_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$10(+_), arc) : padAngle;
  };

  arc.context = function(_) {
    return arguments.length ? ((context = _ == null ? null : _), arc) : context;
  };

  return arc;
};

function Linear(context) {
  this._context = context;
}

Linear.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; // proceed
      default: this._context.lineTo(x, y); break;
    }
  }
};

var curveLinear = function(context) {
  return new Linear(context);
};

function x$3(p) {
  return p[0];
}

function y$3(p) {
  return p[1];
}

var line = function() {
  var x$$1 = x$3,
      y$$1 = y$3,
      defined = constant$10(true),
      context = null,
      curve = curveLinear,
      output = null;

  function line(data) {
    var i,
        n = data.length,
        d,
        defined0 = false,
        buffer;

    if (context == null) output = curve(buffer = path());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) output.lineStart();
        else output.lineEnd();
      }
      if (defined0) output.point(+x$$1(d, i, data), +y$$1(d, i, data));
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  line.x = function(_) {
    return arguments.length ? (x$$1 = typeof _ === "function" ? _ : constant$10(+_), line) : x$$1;
  };

  line.y = function(_) {
    return arguments.length ? (y$$1 = typeof _ === "function" ? _ : constant$10(+_), line) : y$$1;
  };

  line.defined = function(_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant$10(!!_), line) : defined;
  };

  line.curve = function(_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
  };

  line.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
  };

  return line;
};

var area$2 = function() {
  var x0 = x$3,
      x1 = null,
      y0 = constant$10(0),
      y1 = y$3,
      defined = constant$10(true),
      context = null,
      curve = curveLinear,
      output = null;

  function area(data) {
    var i,
        j,
        k,
        n = data.length,
        d,
        defined0 = false,
        buffer,
        x0z = new Array(n),
        y0z = new Array(n);

    if (context == null) output = curve(buffer = path());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) {
          j = i;
          output.areaStart();
          output.lineStart();
        } else {
          output.lineEnd();
          output.lineStart();
          for (k = i - 1; k >= j; --k) {
            output.point(x0z[k], y0z[k]);
          }
          output.lineEnd();
          output.areaEnd();
        }
      }
      if (defined0) {
        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
      }
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  function arealine() {
    return line().defined(defined).curve(curve).context(context);
  }

  area.x = function(_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$10(+_), x1 = null, area) : x0;
  };

  area.x0 = function(_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$10(+_), area) : x0;
  };

  area.x1 = function(_) {
    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant$10(+_), area) : x1;
  };

  area.y = function(_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$10(+_), y1 = null, area) : y0;
  };

  area.y0 = function(_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$10(+_), area) : y0;
  };

  area.y1 = function(_) {
    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant$10(+_), area) : y1;
  };

  area.lineX0 =
  area.lineY0 = function() {
    return arealine().x(x0).y(y0);
  };

  area.lineY1 = function() {
    return arealine().x(x0).y(y1);
  };

  area.lineX1 = function() {
    return arealine().x(x1).y(y0);
  };

  area.defined = function(_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant$10(!!_), area) : defined;
  };

  area.curve = function(_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
  };

  area.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
  };

  return area;
};

var descending$1 = function(a, b) {
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
};

var identity$7 = function(d) {
  return d;
};

var pie = function() {
  var value = identity$7,
      sortValues = descending$1,
      sort = null,
      startAngle = constant$10(0),
      endAngle = constant$10(tau$4),
      padAngle = constant$10(0);

  function pie(data) {
    var i,
        n = data.length,
        j,
        k,
        sum = 0,
        index = new Array(n),
        arcs = new Array(n),
        a0 = +startAngle.apply(this, arguments),
        da = Math.min(tau$4, Math.max(-tau$4, endAngle.apply(this, arguments) - a0)),
        a1,
        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),
        pa = p * (da < 0 ? -1 : 1),
        v;

    for (i = 0; i < n; ++i) {
      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
        sum += v;
      }
    }

    // Optionally sort the arcs by previously-computed values or by data.
    if (sortValues != null) index.sort(function(i, j) { return sortValues(arcs[i], arcs[j]); });
    else if (sort != null) index.sort(function(i, j) { return sort(data[i], data[j]); });

    // Compute the arcs! They are stored in the original data's order.
    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
        data: data[j],
        index: i,
        value: v,
        startAngle: a0,
        endAngle: a1,
        padAngle: p
      };
    }

    return arcs;
  }

  pie.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant$10(+_), pie) : value;
  };

  pie.sortValues = function(_) {
    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
  };

  pie.sort = function(_) {
    return arguments.length ? (sort = _, sortValues = null, pie) : sort;
  };

  pie.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$10(+_), pie) : startAngle;
  };

  pie.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$10(+_), pie) : endAngle;
  };

  pie.padAngle = function(_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$10(+_), pie) : padAngle;
  };

  return pie;
};

var curveRadialLinear = curveRadial(curveLinear);

function Radial(curve) {
  this._curve = curve;
}

Radial.prototype = {
  areaStart: function() {
    this._curve.areaStart();
  },
  areaEnd: function() {
    this._curve.areaEnd();
  },
  lineStart: function() {
    this._curve.lineStart();
  },
  lineEnd: function() {
    this._curve.lineEnd();
  },
  point: function(a, r) {
    this._curve.point(r * Math.sin(a), r * -Math.cos(a));
  }
};

function curveRadial(curve) {

  function radial(context) {
    return new Radial(curve(context));
  }

  radial._curve = curve;

  return radial;
}

function radialLine(l) {
  var c = l.curve;

  l.angle = l.x, delete l.x;
  l.radius = l.y, delete l.y;

  l.curve = function(_) {
    return arguments.length ? c(curveRadial(_)) : c()._curve;
  };

  return l;
}

var radialLine$1 = function() {
  return radialLine(line().curve(curveRadialLinear));
};

var radialArea = function() {
  var a = area$2().curve(curveRadialLinear),
      c = a.curve,
      x0 = a.lineX0,
      x1 = a.lineX1,
      y0 = a.lineY0,
      y1 = a.lineY1;

  a.angle = a.x, delete a.x;
  a.startAngle = a.x0, delete a.x0;
  a.endAngle = a.x1, delete a.x1;
  a.radius = a.y, delete a.y;
  a.innerRadius = a.y0, delete a.y0;
  a.outerRadius = a.y1, delete a.y1;
  a.lineStartAngle = function() { return radialLine(x0()); }, delete a.lineX0;
  a.lineEndAngle = function() { return radialLine(x1()); }, delete a.lineX1;
  a.lineInnerRadius = function() { return radialLine(y0()); }, delete a.lineY0;
  a.lineOuterRadius = function() { return radialLine(y1()); }, delete a.lineY1;

  a.curve = function(_) {
    return arguments.length ? c(curveRadial(_)) : c()._curve;
  };

  return a;
};

var circle$2 = {
  draw: function(context, size) {
    var r = Math.sqrt(size / pi$4);
    context.moveTo(r, 0);
    context.arc(0, 0, r, 0, tau$4);
  }
};

var cross$2 = {
  draw: function(context, size) {
    var r = Math.sqrt(size / 5) / 2;
    context.moveTo(-3 * r, -r);
    context.lineTo(-r, -r);
    context.lineTo(-r, -3 * r);
    context.lineTo(r, -3 * r);
    context.lineTo(r, -r);
    context.lineTo(3 * r, -r);
    context.lineTo(3 * r, r);
    context.lineTo(r, r);
    context.lineTo(r, 3 * r);
    context.lineTo(-r, 3 * r);
    context.lineTo(-r, r);
    context.lineTo(-3 * r, r);
    context.closePath();
  }
};

var tan30 = Math.sqrt(1 / 3);
var tan30_2 = tan30 * 2;

var diamond = {
  draw: function(context, size) {
    var y = Math.sqrt(size / tan30_2),
        x = y * tan30;
    context.moveTo(0, -y);
    context.lineTo(x, 0);
    context.lineTo(0, y);
    context.lineTo(-x, 0);
    context.closePath();
  }
};

var ka = 0.89081309152928522810;
var kr = Math.sin(pi$4 / 10) / Math.sin(7 * pi$4 / 10);
var kx = Math.sin(tau$4 / 10) * kr;
var ky = -Math.cos(tau$4 / 10) * kr;

var star = {
  draw: function(context, size) {
    var r = Math.sqrt(size * ka),
        x = kx * r,
        y = ky * r;
    context.moveTo(0, -r);
    context.lineTo(x, y);
    for (var i = 1; i < 5; ++i) {
      var a = tau$4 * i / 5,
          c = Math.cos(a),
          s = Math.sin(a);
      context.lineTo(s * r, -c * r);
      context.lineTo(c * x - s * y, s * x + c * y);
    }
    context.closePath();
  }
};

var square = {
  draw: function(context, size) {
    var w = Math.sqrt(size),
        x = -w / 2;
    context.rect(x, x, w, w);
  }
};

var sqrt3 = Math.sqrt(3);

var triangle = {
  draw: function(context, size) {
    var y = -Math.sqrt(size / (sqrt3 * 3));
    context.moveTo(0, y * 2);
    context.lineTo(-sqrt3 * y, -y);
    context.lineTo(sqrt3 * y, -y);
    context.closePath();
  }
};

var c = -0.5;
var s = Math.sqrt(3) / 2;
var k = 1 / Math.sqrt(12);
var a = (k / 2 + 1) * 3;

var wye = {
  draw: function(context, size) {
    var r = Math.sqrt(size / a),
        x0 = r / 2,
        y0 = r * k,
        x1 = x0,
        y1 = r * k + r,
        x2 = -x1,
        y2 = y1;
    context.moveTo(x0, y0);
    context.lineTo(x1, y1);
    context.lineTo(x2, y2);
    context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
    context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
    context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
    context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
    context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
    context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
    context.closePath();
  }
};

var symbols = [
  circle$2,
  cross$2,
  diamond,
  square,
  star,
  triangle,
  wye
];

var symbol = function() {
  var type = constant$10(circle$2),
      size = constant$10(64),
      context = null;

  function symbol() {
    var buffer;
    if (!context) context = buffer = path();
    type.apply(this, arguments).draw(context, +size.apply(this, arguments));
    if (buffer) return context = null, buffer + "" || null;
  }

  symbol.type = function(_) {
    return arguments.length ? (type = typeof _ === "function" ? _ : constant$10(_), symbol) : type;
  };

  symbol.size = function(_) {
    return arguments.length ? (size = typeof _ === "function" ? _ : constant$10(+_), symbol) : size;
  };

  symbol.context = function(_) {
    return arguments.length ? (context = _ == null ? null : _, symbol) : context;
  };

  return symbol;
};

var noop$2 = function() {};

function point$2(that, x, y) {
  that._context.bezierCurveTo(
    (2 * that._x0 + that._x1) / 3,
    (2 * that._y0 + that._y1) / 3,
    (that._x0 + 2 * that._x1) / 3,
    (that._y0 + 2 * that._y1) / 3,
    (that._x0 + 4 * that._x1 + x) / 6,
    (that._y0 + 4 * that._y1 + y) / 6
  );
}

function Basis(context) {
  this._context = context;
}

Basis.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 =
    this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 3: point$2(this, this._x1, this._y1); // proceed
      case 2: this._context.lineTo(this._x1, this._y1); break;
    }
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed
      default: point$2(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

var basis$2 = function(context) {
  return new Basis(context);
};

function BasisClosed(context) {
  this._context = context;
}

BasisClosed.prototype = {
  areaStart: noop$2,
  areaEnd: noop$2,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =
    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x2, this._y2);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x2, this._y2);
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        break;
      }
    }
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._x2 = x, this._y2 = y; break;
      case 1: this._point = 2; this._x3 = x, this._y3 = y; break;
      case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;
      default: point$2(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

var basisClosed$1 = function(context) {
  return new BasisClosed(context);
};

function BasisOpen(context) {
  this._context = context;
}

BasisOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 =
    this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;
      case 3: this._point = 4; // proceed
      default: point$2(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

var basisOpen = function(context) {
  return new BasisOpen(context);
};

function Bundle(context, beta) {
  this._basis = new Basis(context);
  this._beta = beta;
}

Bundle.prototype = {
  lineStart: function() {
    this._x = [];
    this._y = [];
    this._basis.lineStart();
  },
  lineEnd: function() {
    var x = this._x,
        y = this._y,
        j = x.length - 1;

    if (j > 0) {
      var x0 = x[0],
          y0 = y[0],
          dx = x[j] - x0,
          dy = y[j] - y0,
          i = -1,
          t;

      while (++i <= j) {
        t = i / j;
        this._basis.point(
          this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),
          this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)
        );
      }
    }

    this._x = this._y = null;
    this._basis.lineEnd();
  },
  point: function(x, y) {
    this._x.push(+x);
    this._y.push(+y);
  }
};

var bundle = ((function custom(beta) {

  function bundle(context) {
    return beta === 1 ? new Basis(context) : new Bundle(context, beta);
  }

  bundle.beta = function(beta) {
    return custom(+beta);
  };

  return bundle;
}))(0.85);

function point$3(that, x, y) {
  that._context.bezierCurveTo(
    that._x1 + that._k * (that._x2 - that._x0),
    that._y1 + that._k * (that._y2 - that._y0),
    that._x2 + that._k * (that._x1 - x),
    that._y2 + that._k * (that._y1 - y),
    that._x2,
    that._y2
  );
}

function Cardinal(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

Cardinal.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 =
    this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2: this._context.lineTo(this._x2, this._y2); break;
      case 3: point$3(this, this._x1, this._y1); break;
    }
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; this._x1 = x, this._y1 = y; break;
      case 2: this._point = 3; // proceed
      default: point$3(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var cardinal = ((function custom(tension) {

  function cardinal(context) {
    return new Cardinal(context, tension);
  }

  cardinal.tension = function(tension) {
    return custom(+tension);
  };

  return cardinal;
}))(0);

function CardinalClosed(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

CardinalClosed.prototype = {
  areaStart: noop$2,
  areaEnd: noop$2,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
      default: point$3(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var cardinalClosed = ((function custom(tension) {

  function cardinal(context) {
    return new CardinalClosed(context, tension);
  }

  cardinal.tension = function(tension) {
    return custom(+tension);
  };

  return cardinal;
}))(0);

function CardinalOpen(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

CardinalOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 =
    this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
      case 3: this._point = 4; // proceed
      default: point$3(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var cardinalOpen = ((function custom(tension) {

  function cardinal(context) {
    return new CardinalOpen(context, tension);
  }

  cardinal.tension = function(tension) {
    return custom(+tension);
  };

  return cardinal;
}))(0);

function point$4(that, x, y) {
  var x1 = that._x1,
      y1 = that._y1,
      x2 = that._x2,
      y2 = that._y2;

  if (that._l01_a > epsilon$3) {
    var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,
        n = 3 * that._l01_a * (that._l01_a + that._l12_a);
    x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
    y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
  }

  if (that._l23_a > epsilon$3) {
    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,
        m = 3 * that._l23_a * (that._l23_a + that._l12_a);
    x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
    y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
  }

  that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
}

function CatmullRom(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRom.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 =
    this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a =
    this._l01_2a = this._l12_2a = this._l23_2a =
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2: this._context.lineTo(this._x2, this._y2); break;
      case 3: this.point(this._x2, this._y2); break;
    }
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; // proceed
      default: point$4(this, x, y); break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var catmullRom = ((function custom(alpha) {

  function catmullRom(context) {
    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
  }

  catmullRom.alpha = function(alpha) {
    return custom(+alpha);
  };

  return catmullRom;
}))(0.5);

function CatmullRomClosed(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRomClosed.prototype = {
  areaStart: noop$2,
  areaEnd: noop$2,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._l01_a = this._l12_a = this._l23_a =
    this._l01_2a = this._l12_2a = this._l23_2a =
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
      default: point$4(this, x, y); break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var catmullRomClosed = ((function custom(alpha) {

  function catmullRom(context) {
    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
  }

  catmullRom.alpha = function(alpha) {
    return custom(+alpha);
  };

  return catmullRom;
}))(0.5);

function CatmullRomOpen(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRomOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 =
    this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a =
    this._l01_2a = this._l12_2a = this._l23_2a =
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0: this._point = 1; break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
      case 3: this._point = 4; // proceed
      default: point$4(this, x, y); break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var catmullRomOpen = ((function custom(alpha) {

  function catmullRom(context) {
    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
  }

  catmullRom.alpha = function(alpha) {
    return custom(+alpha);
  };

  return catmullRom;
}))(0.5);

function LinearClosed(context) {
  this._context = context;
}

LinearClosed.prototype = {
  areaStart: noop$2,
  areaEnd: noop$2,
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._point) this._context.closePath();
  },
  point: function(x, y) {
    x = +x, y = +y;
    if (this._point) this._context.lineTo(x, y);
    else this._point = 1, this._context.moveTo(x, y);
  }
};

var linearClosed = function(context) {
  return new LinearClosed(context);
};

function sign$1(x) {
  return x < 0 ? -1 : 1;
}

// Calculate the slopes of the tangents (Hermite-type interpolation) based on
// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
// NOV(II), P. 443, 1990.
function slope3(that, x2, y2) {
  var h0 = that._x1 - that._x0,
      h1 = x2 - that._x1,
      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
      p = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign$1(s0) + sign$1(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
}

// Calculate a one-sided slope.
function slope2(that, t) {
  var h = that._x1 - that._x0;
  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
}

// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
function point$5(that, t0, t1) {
  var x0 = that._x0,
      y0 = that._y0,
      x1 = that._x1,
      y1 = that._y1,
      dx = (x1 - x0) / 3;
  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
}

function MonotoneX(context) {
  this._context = context;
}

MonotoneX.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 =
    this._y0 = this._y1 =
    this._t0 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2: this._context.lineTo(this._x1, this._y1); break;
      case 3: point$5(this, this._t0, slope2(this, this._t0)); break;
    }
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    var t1 = NaN;

    x = +x, y = +y;
    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; point$5(this, slope2(this, t1 = slope3(this, x, y)), t1); break;
      default: point$5(this, this._t0, t1 = slope3(this, x, y)); break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
    this._t0 = t1;
  }
};

function MonotoneY(context) {
  this._context = new ReflectContext(context);
}

(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {
  MonotoneX.prototype.point.call(this, y, x);
};

function ReflectContext(context) {
  this._context = context;
}

ReflectContext.prototype = {
  moveTo: function(x, y) { this._context.moveTo(y, x); },
  closePath: function() { this._context.closePath(); },
  lineTo: function(x, y) { this._context.lineTo(y, x); },
  bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }
};

function monotoneX(context) {
  return new MonotoneX(context);
}

function monotoneY(context) {
  return new MonotoneY(context);
}

function Natural(context) {
  this._context = context;
}

Natural.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = [];
    this._y = [];
  },
  lineEnd: function() {
    var x = this._x,
        y = this._y,
        n = x.length;

    if (n) {
      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
      if (n === 2) {
        this._context.lineTo(x[1], y[1]);
      } else {
        var px = controlPoints(x),
            py = controlPoints(y);
        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
        }
      }
    }

    if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();
    this._line = 1 - this._line;
    this._x = this._y = null;
  },
  point: function(x, y) {
    this._x.push(+x);
    this._y.push(+y);
  }
};

// See https://www.particleincell.com/2012/bezier-splines/ for derivation.
function controlPoints(x) {
  var i,
      n = x.length - 1,
      m,
      a = new Array(n),
      b = new Array(n),
      r = new Array(n);
  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];
  for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];
  for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
  a[n - 1] = r[n - 1] / b[n - 1];
  for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];
  b[n - 1] = (x[n] + a[n - 1]) / 2;
  for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];
  return [a, b];
}

var natural = function(context) {
  return new Natural(context);
};

function Step(context, t) {
  this._context = context;
  this._t = t;
}

Step.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = this._y = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; // proceed
      default: {
        if (this._t <= 0) {
          this._context.lineTo(this._x, y);
          this._context.lineTo(x, y);
        } else {
          var x1 = this._x * (1 - this._t) + x * this._t;
          this._context.lineTo(x1, this._y);
          this._context.lineTo(x1, y);
        }
        break;
      }
    }
    this._x = x, this._y = y;
  }
};

var step = function(context) {
  return new Step(context, 0.5);
};

function stepBefore(context) {
  return new Step(context, 0);
}

function stepAfter(context) {
  return new Step(context, 1);
}

var slice$5 = Array.prototype.slice;

var none$1 = function(series, order) {
  if (!((n = series.length) > 1)) return;
  for (var i = 1, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
    s0 = s1, s1 = series[order[i]];
    for (var j = 0; j < m; ++j) {
      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
    }
  }
};

var none$2 = function(series) {
  var n = series.length, o = new Array(n);
  while (--n >= 0) o[n] = n;
  return o;
};

function stackValue(d, key) {
  return d[key];
}

var stack = function() {
  var keys = constant$10([]),
      order = none$2,
      offset = none$1,
      value = stackValue;

  function stack(data) {
    var kz = keys.apply(this, arguments),
        i,
        m = data.length,
        n = kz.length,
        sz = new Array(n),
        oz;

    for (i = 0; i < n; ++i) {
      for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {
        si[j] = sij = [0, +value(data[j], ki, j, data)];
        sij.data = data[j];
      }
      si.key = ki;
    }

    for (i = 0, oz = order(sz); i < n; ++i) {
      sz[oz[i]].index = i;
    }

    offset(sz, oz);
    return sz;
  }

  stack.keys = function(_) {
    return arguments.length ? (keys = typeof _ === "function" ? _ : constant$10(slice$5.call(_)), stack) : keys;
  };

  stack.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant$10(+_), stack) : value;
  };

  stack.order = function(_) {
    return arguments.length ? (order = _ == null ? none$2 : typeof _ === "function" ? _ : constant$10(slice$5.call(_)), stack) : order;
  };

  stack.offset = function(_) {
    return arguments.length ? (offset = _ == null ? none$1 : _, stack) : offset;
  };

  return stack;
};

var expand = function(series, order) {
  if (!((n = series.length) > 0)) return;
  for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
    for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;
    if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;
  }
  none$1(series, order);
};

var silhouette = function(series, order) {
  if (!((n = series.length) > 0)) return;
  for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
    for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;
    s0[j][1] += s0[j][0] = -y / 2;
  }
  none$1(series, order);
};

var wiggle = function(series, order) {
  if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;
  for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
    for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
      var si = series[order[i]],
          sij0 = si[j][1] || 0,
          sij1 = si[j - 1][1] || 0,
          s3 = (sij0 - sij1) / 2;
      for (var k = 0; k < i; ++k) {
        var sk = series[order[k]],
            skj0 = sk[j][1] || 0,
            skj1 = sk[j - 1][1] || 0;
        s3 += skj0 - skj1;
      }
      s1 += sij0, s2 += s3 * sij0;
    }
    s0[j - 1][1] += s0[j - 1][0] = y;
    if (s1) y -= s2 / s1;
  }
  s0[j - 1][1] += s0[j - 1][0] = y;
  none$1(series, order);
};

var ascending$2 = function(series) {
  var sums = series.map(sum$2);
  return none$2(series).sort(function(a, b) { return sums[a] - sums[b]; });
};

function sum$2(series) {
  var s = 0, i = -1, n = series.length, v;
  while (++i < n) if (v = +series[i][1]) s += v;
  return s;
}

var descending$2 = function(series) {
  return ascending$2(series).reverse();
};

var insideOut = function(series) {
  var n = series.length,
      i,
      j,
      sums = series.map(sum$2),
      order = none$2(series).sort(function(a, b) { return sums[b] - sums[a]; }),
      top = 0,
      bottom = 0,
      tops = [],
      bottoms = [];

  for (i = 0; i < n; ++i) {
    j = order[i];
    if (top < bottom) {
      top += sums[j];
      tops.push(j);
    } else {
      bottom += sums[j];
      bottoms.push(j);
    }
  }

  return bottoms.reverse().concat(tops);
};

var reverse = function(series) {
  return none$2(series).reverse();
};

var constant$11 = function(x) {
  return function() {
    return x;
  };
};

function x$4(d) {
  return d[0];
}

function y$4(d) {
  return d[1];
}

function RedBlackTree() {
  this._ = null; // root node
}

function RedBlackNode(node) {
  node.U = // parent node
  node.C = // color - true for red, false for black
  node.L = // left node
  node.R = // right node
  node.P = // previous node
  node.N = null; // next node
}

RedBlackTree.prototype = {
  constructor: RedBlackTree,

  insert: function(after, node) {
    var parent, grandpa, uncle;

    if (after) {
      node.P = after;
      node.N = after.N;
      if (after.N) after.N.P = node;
      after.N = node;
      if (after.R) {
        after = after.R;
        while (after.L) after = after.L;
        after.L = node;
      } else {
        after.R = node;
      }
      parent = after;
    } else if (this._) {
      after = RedBlackFirst(this._);
      node.P = null;
      node.N = after;
      after.P = after.L = node;
      parent = after;
    } else {
      node.P = node.N = null;
      this._ = node;
      parent = null;
    }
    node.L = node.R = null;
    node.U = parent;
    node.C = true;

    after = node;
    while (parent && parent.C) {
      grandpa = parent.U;
      if (parent === grandpa.L) {
        uncle = grandpa.R;
        if (uncle && uncle.C) {
          parent.C = uncle.C = false;
          grandpa.C = true;
          after = grandpa;
        } else {
          if (after === parent.R) {
            RedBlackRotateLeft(this, parent);
            after = parent;
            parent = after.U;
          }
          parent.C = false;
          grandpa.C = true;
          RedBlackRotateRight(this, grandpa);
        }
      } else {
        uncle = grandpa.L;
        if (uncle && uncle.C) {
          parent.C = uncle.C = false;
          grandpa.C = true;
          after = grandpa;
        } else {
          if (after === parent.L) {
            RedBlackRotateRight(this, parent);
            after = parent;
            parent = after.U;
          }
          parent.C = false;
          grandpa.C = true;
          RedBlackRotateLeft(this, grandpa);
        }
      }
      parent = after.U;
    }
    this._.C = false;
  },

  remove: function(node) {
    if (node.N) node.N.P = node.P;
    if (node.P) node.P.N = node.N;
    node.N = node.P = null;

    var parent = node.U,
        sibling,
        left = node.L,
        right = node.R,
        next,
        red;

    if (!left) next = right;
    else if (!right) next = left;
    else next = RedBlackFirst(right);

    if (parent) {
      if (parent.L === node) parent.L = next;
      else parent.R = next;
    } else {
      this._ = next;
    }

    if (left && right) {
      red = next.C;
      next.C = node.C;
      next.L = left;
      left.U = next;
      if (next !== right) {
        parent = next.U;
        next.U = node.U;
        node = next.R;
        parent.L = node;
        next.R = right;
        right.U = next;
      } else {
        next.U = parent;
        parent = next;
        node = next.R;
      }
    } else {
      red = node.C;
      node = next;
    }

    if (node) node.U = parent;
    if (red) return;
    if (node && node.C) { node.C = false; return; }

    do {
      if (node === this._) break;
      if (node === parent.L) {
        sibling = parent.R;
        if (sibling.C) {
          sibling.C = false;
          parent.C = true;
          RedBlackRotateLeft(this, parent);
          sibling = parent.R;
        }
        if ((sibling.L && sibling.L.C)
            || (sibling.R && sibling.R.C)) {
          if (!sibling.R || !sibling.R.C) {
            sibling.L.C = false;
            sibling.C = true;
            RedBlackRotateRight(this, sibling);
            sibling = parent.R;
          }
          sibling.C = parent.C;
          parent.C = sibling.R.C = false;
          RedBlackRotateLeft(this, parent);
          node = this._;
          break;
        }
      } else {
        sibling = parent.L;
        if (sibling.C) {
          sibling.C = false;
          parent.C = true;
          RedBlackRotateRight(this, parent);
          sibling = parent.L;
        }
        if ((sibling.L && sibling.L.C)
          || (sibling.R && sibling.R.C)) {
          if (!sibling.L || !sibling.L.C) {
            sibling.R.C = false;
            sibling.C = true;
            RedBlackRotateLeft(this, sibling);
            sibling = parent.L;
          }
          sibling.C = parent.C;
          parent.C = sibling.L.C = false;
          RedBlackRotateRight(this, parent);
          node = this._;
          break;
        }
      }
      sibling.C = true;
      node = parent;
      parent = parent.U;
    } while (!node.C);

    if (node) node.C = false;
  }
};

function RedBlackRotateLeft(tree, node) {
  var p = node,
      q = node.R,
      parent = p.U;

  if (parent) {
    if (parent.L === p) parent.L = q;
    else parent.R = q;
  } else {
    tree._ = q;
  }

  q.U = parent;
  p.U = q;
  p.R = q.L;
  if (p.R) p.R.U = p;
  q.L = p;
}

function RedBlackRotateRight(tree, node) {
  var p = node,
      q = node.L,
      parent = p.U;

  if (parent) {
    if (parent.L === p) parent.L = q;
    else parent.R = q;
  } else {
    tree._ = q;
  }

  q.U = parent;
  p.U = q;
  p.L = q.R;
  if (p.L) p.L.U = p;
  q.R = p;
}

function RedBlackFirst(node) {
  while (node.L) node = node.L;
  return node;
}

function createEdge(left, right, v0, v1) {
  var edge = [null, null],
      index = edges.push(edge) - 1;
  edge.left = left;
  edge.right = right;
  if (v0) setEdgeEnd(edge, left, right, v0);
  if (v1) setEdgeEnd(edge, right, left, v1);
  cells[left.index].halfedges.push(index);
  cells[right.index].halfedges.push(index);
  return edge;
}

function createBorderEdge(left, v0, v1) {
  var edge = [v0, v1];
  edge.left = left;
  return edge;
}

function setEdgeEnd(edge, left, right, vertex) {
  if (!edge[0] && !edge[1]) {
    edge[0] = vertex;
    edge.left = left;
    edge.right = right;
  } else if (edge.left === right) {
    edge[1] = vertex;
  } else {
    edge[0] = vertex;
  }
}

// Liang–Barsky line clipping.
function clipEdge(edge, x0, y0, x1, y1) {
  var a = edge[0],
      b = edge[1],
      ax = a[0],
      ay = a[1],
      bx = b[0],
      by = b[1],
      t0 = 0,
      t1 = 1,
      dx = bx - ax,
      dy = by - ay,
      r;

  r = x0 - ax;
  if (!dx && r > 0) return;
  r /= dx;
  if (dx < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dx > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = x1 - ax;
  if (!dx && r < 0) return;
  r /= dx;
  if (dx < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dx > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  r = y0 - ay;
  if (!dy && r > 0) return;
  r /= dy;
  if (dy < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dy > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = y1 - ay;
  if (!dy && r < 0) return;
  r /= dy;
  if (dy < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dy > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?

  if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];
  if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];
  return true;
}

function connectEdge(edge, x0, y0, x1, y1) {
  var v1 = edge[1];
  if (v1) return true;

  var v0 = edge[0],
      left = edge.left,
      right = edge.right,
      lx = left[0],
      ly = left[1],
      rx = right[0],
      ry = right[1],
      fx = (lx + rx) / 2,
      fy = (ly + ry) / 2,
      fm,
      fb;

  if (ry === ly) {
    if (fx < x0 || fx >= x1) return;
    if (lx > rx) {
      if (!v0) v0 = [fx, y0];
      else if (v0[1] >= y1) return;
      v1 = [fx, y1];
    } else {
      if (!v0) v0 = [fx, y1];
      else if (v0[1] < y0) return;
      v1 = [fx, y0];
    }
  } else {
    fm = (lx - rx) / (ry - ly);
    fb = fy - fm * fx;
    if (fm < -1 || fm > 1) {
      if (lx > rx) {
        if (!v0) v0 = [(y0 - fb) / fm, y0];
        else if (v0[1] >= y1) return;
        v1 = [(y1 - fb) / fm, y1];
      } else {
        if (!v0) v0 = [(y1 - fb) / fm, y1];
        else if (v0[1] < y0) return;
        v1 = [(y0 - fb) / fm, y0];
      }
    } else {
      if (ly < ry) {
        if (!v0) v0 = [x0, fm * x0 + fb];
        else if (v0[0] >= x1) return;
        v1 = [x1, fm * x1 + fb];
      } else {
        if (!v0) v0 = [x1, fm * x1 + fb];
        else if (v0[0] < x0) return;
        v1 = [x0, fm * x0 + fb];
      }
    }
  }

  edge[0] = v0;
  edge[1] = v1;
  return true;
}

function clipEdges(x0, y0, x1, y1) {
  var i = edges.length,
      edge;

  while (i--) {
    if (!connectEdge(edge = edges[i], x0, y0, x1, y1)
        || !clipEdge(edge, x0, y0, x1, y1)
        || !(Math.abs(edge[0][0] - edge[1][0]) > epsilon$4
            || Math.abs(edge[0][1] - edge[1][1]) > epsilon$4)) {
      delete edges[i];
    }
  }
}

function createCell(site) {
  return cells[site.index] = {
    site: site,
    halfedges: []
  };
}

function cellHalfedgeAngle(cell, edge) {
  var site = cell.site,
      va = edge.left,
      vb = edge.right;
  if (site === vb) vb = va, va = site;
  if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);
  if (site === va) va = edge[1], vb = edge[0];
  else va = edge[0], vb = edge[1];
  return Math.atan2(va[0] - vb[0], vb[1] - va[1]);
}

function cellHalfedgeStart(cell, edge) {
  return edge[+(edge.left !== cell.site)];
}

function cellHalfedgeEnd(cell, edge) {
  return edge[+(edge.left === cell.site)];
}

function sortCellHalfedges() {
  for (var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i) {
    if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {
      var index = new Array(m),
          array = new Array(m);
      for (j = 0; j < m; ++j) index[j] = j, array[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);
      index.sort(function(i, j) { return array[j] - array[i]; });
      for (j = 0; j < m; ++j) array[j] = halfedges[index[j]];
      for (j = 0; j < m; ++j) halfedges[j] = array[j];
    }
  }
}

function clipCells(x0, y0, x1, y1) {
  var nCells = cells.length,
      iCell,
      cell,
      site,
      iHalfedge,
      halfedges,
      nHalfedges,
      start,
      startX,
      startY,
      end,
      endX,
      endY,
      cover = true;

  for (iCell = 0; iCell < nCells; ++iCell) {
    if (cell = cells[iCell]) {
      site = cell.site;
      halfedges = cell.halfedges;
      iHalfedge = halfedges.length;

      // Remove any dangling clipped edges.
      while (iHalfedge--) {
        if (!edges[halfedges[iHalfedge]]) {
          halfedges.splice(iHalfedge, 1);
        }
      }

      // Insert any border edges as necessary.
      iHalfedge = 0, nHalfedges = halfedges.length;
      while (iHalfedge < nHalfedges) {
        end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];
        start = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];
        if (Math.abs(endX - startX) > epsilon$4 || Math.abs(endY - startY) > epsilon$4) {
          halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(site, end,
              Math.abs(endX - x0) < epsilon$4 && y1 - endY > epsilon$4 ? [x0, Math.abs(startX - x0) < epsilon$4 ? startY : y1]
              : Math.abs(endY - y1) < epsilon$4 && x1 - endX > epsilon$4 ? [Math.abs(startY - y1) < epsilon$4 ? startX : x1, y1]
              : Math.abs(endX - x1) < epsilon$4 && endY - y0 > epsilon$4 ? [x1, Math.abs(startX - x1) < epsilon$4 ? startY : y0]
              : Math.abs(endY - y0) < epsilon$4 && endX - x0 > epsilon$4 ? [Math.abs(startY - y0) < epsilon$4 ? startX : x0, y0]
              : null)) - 1);
          ++nHalfedges;
        }
      }

      if (nHalfedges) cover = false;
    }
  }

  // If there weren’t any edges, have the closest site cover the extent.
  // It doesn’t matter which corner of the extent we measure!
  if (cover) {
    var dx, dy, d2, dc = Infinity;

    for (iCell = 0, cover = null; iCell < nCells; ++iCell) {
      if (cell = cells[iCell]) {
        site = cell.site;
        dx = site[0] - x0;
        dy = site[1] - y0;
        d2 = dx * dx + dy * dy;
        if (d2 < dc) dc = d2, cover = cell;
      }
    }

    if (cover) {
      var v00 = [x0, y0], v01 = [x0, y1], v11 = [x1, y1], v10 = [x1, y0];
      cover.halfedges.push(
        edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1,
        edges.push(createBorderEdge(site, v01, v11)) - 1,
        edges.push(createBorderEdge(site, v11, v10)) - 1,
        edges.push(createBorderEdge(site, v10, v00)) - 1
      );
    }
  }

  // Lastly delete any cells with no edges; these were entirely clipped.
  for (iCell = 0; iCell < nCells; ++iCell) {
    if (cell = cells[iCell]) {
      if (!cell.halfedges.length) {
        delete cells[iCell];
      }
    }
  }
}

var circlePool = [];

var firstCircle;

function Circle() {
  RedBlackNode(this);
  this.x =
  this.y =
  this.arc =
  this.site =
  this.cy = null;
}

function attachCircle(arc) {
  var lArc = arc.P,
      rArc = arc.N;

  if (!lArc || !rArc) return;

  var lSite = lArc.site,
      cSite = arc.site,
      rSite = rArc.site;

  if (lSite === rSite) return;

  var bx = cSite[0],
      by = cSite[1],
      ax = lSite[0] - bx,
      ay = lSite[1] - by,
      cx = rSite[0] - bx,
      cy = rSite[1] - by;

  var d = 2 * (ax * cy - ay * cx);
  if (d >= -epsilon2$2) return;

  var ha = ax * ax + ay * ay,
      hc = cx * cx + cy * cy,
      x = (cy * ha - ay * hc) / d,
      y = (ax * hc - cx * ha) / d;

  var circle = circlePool.pop() || new Circle;
  circle.arc = arc;
  circle.site = cSite;
  circle.x = x + bx;
  circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom

  arc.circle = circle;

  var before = null,
      node = circles._;

  while (node) {
    if (circle.y < node.y || (circle.y === node.y && circle.x <= node.x)) {
      if (node.L) node = node.L;
      else { before = node.P; break; }
    } else {
      if (node.R) node = node.R;
      else { before = node; break; }
    }
  }

  circles.insert(before, circle);
  if (!before) firstCircle = circle;
}

function detachCircle(arc) {
  var circle = arc.circle;
  if (circle) {
    if (!circle.P) firstCircle = circle.N;
    circles.remove(circle);
    circlePool.push(circle);
    RedBlackNode(circle);
    arc.circle = null;
  }
}

var beachPool = [];

function Beach() {
  RedBlackNode(this);
  this.edge =
  this.site =
  this.circle = null;
}

function createBeach(site) {
  var beach = beachPool.pop() || new Beach;
  beach.site = site;
  return beach;
}

function detachBeach(beach) {
  detachCircle(beach);
  beaches.remove(beach);
  beachPool.push(beach);
  RedBlackNode(beach);
}

function removeBeach(beach) {
  var circle = beach.circle,
      x = circle.x,
      y = circle.cy,
      vertex = [x, y],
      previous = beach.P,
      next = beach.N,
      disappearing = [beach];

  detachBeach(beach);

  var lArc = previous;
  while (lArc.circle
      && Math.abs(x - lArc.circle.x) < epsilon$4
      && Math.abs(y - lArc.circle.cy) < epsilon$4) {
    previous = lArc.P;
    disappearing.unshift(lArc);
    detachBeach(lArc);
    lArc = previous;
  }

  disappearing.unshift(lArc);
  detachCircle(lArc);

  var rArc = next;
  while (rArc.circle
      && Math.abs(x - rArc.circle.x) < epsilon$4
      && Math.abs(y - rArc.circle.cy) < epsilon$4) {
    next = rArc.N;
    disappearing.push(rArc);
    detachBeach(rArc);
    rArc = next;
  }

  disappearing.push(rArc);
  detachCircle(rArc);

  var nArcs = disappearing.length,
      iArc;
  for (iArc = 1; iArc < nArcs; ++iArc) {
    rArc = disappearing[iArc];
    lArc = disappearing[iArc - 1];
    setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
  }

  lArc = disappearing[0];
  rArc = disappearing[nArcs - 1];
  rArc.edge = createEdge(lArc.site, rArc.site, null, vertex);

  attachCircle(lArc);
  attachCircle(rArc);
}

function addBeach(site) {
  var x = site[0],
      directrix = site[1],
      lArc,
      rArc,
      dxl,
      dxr,
      node = beaches._;

  while (node) {
    dxl = leftBreakPoint(node, directrix) - x;
    if (dxl > epsilon$4) node = node.L; else {
      dxr = x - rightBreakPoint(node, directrix);
      if (dxr > epsilon$4) {
        if (!node.R) {
          lArc = node;
          break;
        }
        node = node.R;
      } else {
        if (dxl > -epsilon$4) {
          lArc = node.P;
          rArc = node;
        } else if (dxr > -epsilon$4) {
          lArc = node;
          rArc = node.N;
        } else {
          lArc = rArc = node;
        }
        break;
      }
    }
  }

  createCell(site);
  var newArc = createBeach(site);
  beaches.insert(lArc, newArc);

  if (!lArc && !rArc) return;

  if (lArc === rArc) {
    detachCircle(lArc);
    rArc = createBeach(lArc.site);
    beaches.insert(newArc, rArc);
    newArc.edge = rArc.edge = createEdge(lArc.site, newArc.site);
    attachCircle(lArc);
    attachCircle(rArc);
    return;
  }

  if (!rArc) { // && lArc
    newArc.edge = createEdge(lArc.site, newArc.site);
    return;
  }

  // else lArc !== rArc
  detachCircle(lArc);
  detachCircle(rArc);

  var lSite = lArc.site,
      ax = lSite[0],
      ay = lSite[1],
      bx = site[0] - ax,
      by = site[1] - ay,
      rSite = rArc.site,
      cx = rSite[0] - ax,
      cy = rSite[1] - ay,
      d = 2 * (bx * cy - by * cx),
      hb = bx * bx + by * by,
      hc = cx * cx + cy * cy,
      vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];

  setEdgeEnd(rArc.edge, lSite, rSite, vertex);
  newArc.edge = createEdge(lSite, site, null, vertex);
  rArc.edge = createEdge(site, rSite, null, vertex);
  attachCircle(lArc);
  attachCircle(rArc);
}

function leftBreakPoint(arc, directrix) {
  var site = arc.site,
      rfocx = site[0],
      rfocy = site[1],
      pby2 = rfocy - directrix;

  if (!pby2) return rfocx;

  var lArc = arc.P;
  if (!lArc) return -Infinity;

  site = lArc.site;
  var lfocx = site[0],
      lfocy = site[1],
      plby2 = lfocy - directrix;

  if (!plby2) return lfocx;

  var hl = lfocx - rfocx,
      aby2 = 1 / pby2 - 1 / plby2,
      b = hl / plby2;

  if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;

  return (rfocx + lfocx) / 2;
}

function rightBreakPoint(arc, directrix) {
  var rArc = arc.N;
  if (rArc) return leftBreakPoint(rArc, directrix);
  var site = arc.site;
  return site[1] === directrix ? site[0] : Infinity;
}

var epsilon$4 = 1e-6;
var epsilon2$2 = 1e-12;
var beaches;
var cells;
var circles;
var edges;

function triangleArea(a, b, c) {
  return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);
}

function lexicographic(a, b) {
  return b[1] - a[1]
      || b[0] - a[0];
}

function Diagram(sites, extent) {
  var site = sites.sort(lexicographic).pop(),
      x,
      y,
      circle;

  edges = [];
  cells = new Array(sites.length);
  beaches = new RedBlackTree;
  circles = new RedBlackTree;

  while (true) {
    circle = firstCircle;
    if (site && (!circle || site[1] < circle.y || (site[1] === circle.y && site[0] < circle.x))) {
      if (site[0] !== x || site[1] !== y) {
        addBeach(site);
        x = site[0], y = site[1];
      }
      site = sites.pop();
    } else if (circle) {
      removeBeach(circle.arc);
    } else {
      break;
    }
  }

  sortCellHalfedges();

  if (extent) {
    var x0 = +extent[0][0],
        y0 = +extent[0][1],
        x1 = +extent[1][0],
        y1 = +extent[1][1];
    clipEdges(x0, y0, x1, y1);
    clipCells(x0, y0, x1, y1);
  }

  this.edges = edges;
  this.cells = cells;

  beaches =
  circles =
  edges =
  cells = null;
}

Diagram.prototype = {
  constructor: Diagram,

  polygons: function() {
    var edges = this.edges;

    return this.cells.map(function(cell) {
      var polygon = cell.halfedges.map(function(i) { return cellHalfedgeStart(cell, edges[i]); });
      polygon.data = cell.site.data;
      return polygon;
    });
  },

  triangles: function() {
    var triangles = [],
        edges = this.edges;

    this.cells.forEach(function(cell, i) {
      if (!(m = (halfedges = cell.halfedges).length)) return;
      var site = cell.site,
          halfedges,
          j = -1,
          m,
          s0,
          e1 = edges[halfedges[m - 1]],
          s1 = e1.left === site ? e1.right : e1.left;

      while (++j < m) {
        s0 = s1;
        e1 = edges[halfedges[j]];
        s1 = e1.left === site ? e1.right : e1.left;
        if (s0 && s1 && i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {
          triangles.push([site.data, s0.data, s1.data]);
        }
      }
    });

    return triangles;
  },

  links: function() {
    return this.edges.filter(function(edge) {
      return edge.right;
    }).map(function(edge) {
      return {
        source: edge.left.data,
        target: edge.right.data
      };
    });
  },

  find: function(x, y, radius) {
    var that = this, i0, i1 = that._found || 0, n = that.cells.length, cell;

    // Use the previously-found cell, or start with an arbitrary one.
    while (!(cell = that.cells[i1])) if (++i1 >= n) return null;
    var dx = x - cell.site[0], dy = y - cell.site[1], d2 = dx * dx + dy * dy;

    // Traverse the half-edges to find a closer cell, if any.
    do {
      cell = that.cells[i0 = i1], i1 = null;
      cell.halfedges.forEach(function(e) {
        var edge = that.edges[e], v = edge.left;
        if ((v === cell.site || !v) && !(v = edge.right)) return;
        var vx = x - v[0], vy = y - v[1], v2 = vx * vx + vy * vy;
        if (v2 < d2) d2 = v2, i1 = v.index;
      });
    } while (i1 !== null);

    that._found = i0;

    return radius == null || d2 <= radius * radius ? cell.site : null;
  }
};

var voronoi = function() {
  var x$$1 = x$4,
      y$$1 = y$4,
      extent = null;

  function voronoi(data) {
    return new Diagram(data.map(function(d, i) {
      var s = [Math.round(x$$1(d, i, data) / epsilon$4) * epsilon$4, Math.round(y$$1(d, i, data) / epsilon$4) * epsilon$4];
      s.index = i;
      s.data = d;
      return s;
    }), extent);
  }

  voronoi.polygons = function(data) {
    return voronoi(data).polygons();
  };

  voronoi.links = function(data) {
    return voronoi(data).links();
  };

  voronoi.triangles = function(data) {
    return voronoi(data).triangles();
  };

  voronoi.x = function(_) {
    return arguments.length ? (x$$1 = typeof _ === "function" ? _ : constant$11(+_), voronoi) : x$$1;
  };

  voronoi.y = function(_) {
    return arguments.length ? (y$$1 = typeof _ === "function" ? _ : constant$11(+_), voronoi) : y$$1;
  };

  voronoi.extent = function(_) {
    return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];
  };

  voronoi.size = function(_) {
    return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];
  };

  return voronoi;
};

var constant$12 = function(x) {
  return function() {
    return x;
  };
};

function ZoomEvent(target, type, transform) {
  this.target = target;
  this.type = type;
  this.transform = transform;
}

function Transform(k, x, y) {
  this.k = k;
  this.x = x;
  this.y = y;
}

Transform.prototype = {
  constructor: Transform,
  scale: function(k) {
    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
  },
  translate: function(x, y) {
    return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);
  },
  apply: function(point) {
    return [point[0] * this.k + this.x, point[1] * this.k + this.y];
  },
  applyX: function(x) {
    return x * this.k + this.x;
  },
  applyY: function(y) {
    return y * this.k + this.y;
  },
  invert: function(location) {
    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
  },
  invertX: function(x) {
    return (x - this.x) / this.k;
  },
  invertY: function(y) {
    return (y - this.y) / this.k;
  },
  rescaleX: function(x) {
    return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));
  },
  rescaleY: function(y) {
    return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));
  },
  toString: function() {
    return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
  }
};

var identity$8 = new Transform(1, 0, 0);

transform$1.prototype = Transform.prototype;

function transform$1(node) {
  return node.__zoom || identity$8;
}

function nopropagation$2() {
  exports.event.stopImmediatePropagation();
}

var noevent$2 = function() {
  exports.event.preventDefault();
  exports.event.stopImmediatePropagation();
};

// Ignore right-click, since that should open the context menu.
function defaultFilter$2() {
  return !exports.event.button;
}

function defaultExtent$1() {
  var e = this, w, h;
  if (e instanceof SVGElement) {
    e = e.ownerSVGElement || e;
    w = e.width.baseVal.value;
    h = e.height.baseVal.value;
  } else {
    w = e.clientWidth;
    h = e.clientHeight;
  }
  return [[0, 0], [w, h]];
}

function defaultTransform() {
  return this.__zoom || identity$8;
}

var zoom = function() {
  var filter = defaultFilter$2,
      extent = defaultExtent$1,
      k0 = 0,
      k1 = Infinity,
      x0 = -k1,
      x1 = k1,
      y0 = x0,
      y1 = x1,
      duration = 250,
      interpolate$$1 = interpolateZoom,
      gestures = [],
      listeners = dispatch("start", "zoom", "end"),
      touchstarting,
      touchending,
      touchDelay = 500,
      wheelDelay = 150;

  function zoom(selection$$1) {
    selection$$1
        .on("wheel.zoom", wheeled)
        .on("mousedown.zoom", mousedowned)
        .on("dblclick.zoom", dblclicked)
        .on("touchstart.zoom", touchstarted)
        .on("touchmove.zoom", touchmoved)
        .on("touchend.zoom touchcancel.zoom", touchended)
        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)")
        .property("__zoom", defaultTransform);
  }

  zoom.transform = function(collection, transform) {
    var selection$$1 = collection.selection ? collection.selection() : collection;
    selection$$1.property("__zoom", defaultTransform);
    if (collection !== selection$$1) {
      schedule(collection, transform);
    } else {
      selection$$1.interrupt().each(function() {
        gesture(this, arguments)
            .start()
            .zoom(null, typeof transform === "function" ? transform.apply(this, arguments) : transform)
            .end();
      });
    }
  };

  zoom.scaleBy = function(selection$$1, k) {
    zoom.scaleTo(selection$$1, function() {
      var k0 = this.__zoom.k,
          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return k0 * k1;
    });
  };

  zoom.scaleTo = function(selection$$1, k) {
    zoom.transform(selection$$1, function() {
      var e = extent.apply(this, arguments),
          t0 = this.__zoom,
          p0 = centroid(e),
          p1 = t0.invert(p0),
          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return constrain(translate(scale(t0, k1), p0, p1), e);
    });
  };

  zoom.translateBy = function(selection$$1, x, y) {
    zoom.transform(selection$$1, function() {
      return constrain(this.__zoom.translate(
        typeof x === "function" ? x.apply(this, arguments) : x,
        typeof y === "function" ? y.apply(this, arguments) : y
      ), extent.apply(this, arguments));
    });
  };

  function scale(transform, k) {
    k = Math.max(k0, Math.min(k1, k));
    return k === transform.k ? transform : new Transform(k, transform.x, transform.y);
  }

  function translate(transform, p0, p1) {
    var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;
    return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y);
  }

  function constrain(transform, extent) {
    var dx0 = transform.invertX(extent[0][0]) - x0,
        dx1 = transform.invertX(extent[1][0]) - x1,
        dy0 = transform.invertY(extent[0][1]) - y0,
        dy1 = transform.invertY(extent[1][1]) - y1;
    return transform.translate(
      dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),
      dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)
    );
  }

  function centroid(extent) {
    return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];
  }

  function schedule(transition$$1, transform, center) {
    transition$$1
        .on("start.zoom", function() { gesture(this, arguments).start(); })
        .on("interrupt.zoom end.zoom", function() { gesture(this, arguments).end(); })
        .tween("zoom", function() {
          var that = this,
              args = arguments,
              g = gesture(that, args),
              e = extent.apply(that, args),
              p = center || centroid(e),
              w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),
              a = that.__zoom,
              b = typeof transform === "function" ? transform.apply(that, args) : transform,
              i = interpolate$$1(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
          return function(t) {
            if (t === 1) t = b; // Avoid rounding error on end.
            else { var l = i(t), k = w / l[2]; t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k); }
            g.zoom(null, t);
          };
        });
  }

  function gesture(that, args) {
    for (var i = 0, n = gestures.length, g; i < n; ++i) {
      if ((g = gestures[i]).that === that) {
        return g;
      }
    }
    return new Gesture(that, args);
  }

  function Gesture(that, args) {
    this.that = that;
    this.args = args;
    this.index = -1;
    this.active = 0;
    this.extent = extent.apply(that, args);
  }

  Gesture.prototype = {
    start: function() {
      if (++this.active === 1) {
        this.index = gestures.push(this) - 1;
        this.emit("start");
      }
      return this;
    },
    zoom: function(key, transform) {
      if (this.mouse && key !== "mouse") this.mouse[1] = transform.invert(this.mouse[0]);
      if (this.touch0 && key !== "touch") this.touch0[1] = transform.invert(this.touch0[0]);
      if (this.touch1 && key !== "touch") this.touch1[1] = transform.invert(this.touch1[0]);
      this.that.__zoom = transform;
      this.emit("zoom");
      return this;
    },
    end: function() {
      if (--this.active === 0) {
        gestures.splice(this.index, 1);
        this.index = -1;
        this.emit("end");
      }
      return this;
    },
    emit: function(type) {
      customEvent(new ZoomEvent(zoom, type, this.that.__zoom), listeners.apply, listeners, [type, this.that, this.args]);
    }
  };

  function wheeled() {
    if (!filter.apply(this, arguments)) return;
    var g = gesture(this, arguments),
        t = this.__zoom,
        k = Math.max(k0, Math.min(k1, t.k * Math.pow(2, -exports.event.deltaY * (exports.event.deltaMode ? 120 : 1) / 500))),
        p = mouse(this);

    // If the mouse is in the same location as before, reuse it.
    // If there were recent wheel events, reset the wheel idle timeout.
    if (g.wheel) {
      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
        g.mouse[1] = t.invert(g.mouse[0] = p);
      }
      clearTimeout(g.wheel);
    }

    // If this wheel event won’t trigger a transform change, ignore it.
    else if (t.k === k) return;

    // Otherwise, capture the mouse point and location at the start.
    else {
      g.mouse = [p, t.invert(p)];
      interrupt(this);
      g.start();
    }

    noevent$2();
    g.wheel = setTimeout(wheelidled, wheelDelay);
    g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent));

    function wheelidled() {
      g.wheel = null;
      g.end();
    }
  }

  function mousedowned() {
    if (touchending || !filter.apply(this, arguments)) return;
    var g = gesture(this, arguments),
        v = select(exports.event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true),
        p = mouse(this);

    dragDisable(exports.event.view);
    nopropagation$2();
    g.mouse = [p, this.__zoom.invert(p)];
    interrupt(this);
    g.start();

    function mousemoved() {
      noevent$2();
      g.moved = true;
      g.zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = mouse(g.that), g.mouse[1]), g.extent));
    }

    function mouseupped() {
      v.on("mousemove.zoom mouseup.zoom", null);
      yesdrag(exports.event.view, g.moved);
      noevent$2();
      g.end();
    }
  }

  function dblclicked() {
    if (!filter.apply(this, arguments)) return;
    var t0 = this.__zoom,
        p0 = mouse(this),
        p1 = t0.invert(p0),
        k1 = t0.k * (exports.event.shiftKey ? 0.5 : 2),
        t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, arguments));

    noevent$2();
    if (duration > 0) select(this).transition().duration(duration).call(schedule, t1, p0);
    else select(this).call(zoom.transform, t1);
  }

  function touchstarted() {
    if (!filter.apply(this, arguments)) return;
    var g = gesture(this, arguments),
        touches$$1 = exports.event.changedTouches,
        started,
        n = touches$$1.length, i, t, p;

    nopropagation$2();
    for (i = 0; i < n; ++i) {
      t = touches$$1[i], p = touch(this, touches$$1, t.identifier);
      p = [p, this.__zoom.invert(p), t.identifier];
      if (!g.touch0) g.touch0 = p, started = true;
      else if (!g.touch1) g.touch1 = p;
    }

    // If this is a dbltap, reroute to the (optional) dblclick.zoom handler.
    if (touchstarting) {
      touchstarting = clearTimeout(touchstarting);
      if (!g.touch1) {
        g.end();
        p = select(this).on("dblclick.zoom");
        if (p) p.apply(this, arguments);
        return;
      }
    }

    if (started) {
      touchstarting = setTimeout(function() { touchstarting = null; }, touchDelay);
      interrupt(this);
      g.start();
    }
  }

  function touchmoved() {
    var g = gesture(this, arguments),
        touches$$1 = exports.event.changedTouches,
        n = touches$$1.length, i, t, p, l;

    noevent$2();
    if (touchstarting) touchstarting = clearTimeout(touchstarting);
    for (i = 0; i < n; ++i) {
      t = touches$$1[i], p = touch(this, touches$$1, t.identifier);
      if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;
      else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;
    }
    t = g.that.__zoom;
    if (g.touch1) {
      var p0 = g.touch0[0], l0 = g.touch0[1],
          p1 = g.touch1[0], l1 = g.touch1[1],
          dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,
          dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
      t = scale(t, Math.sqrt(dp / dl));
      p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
    }
    else if (g.touch0) p = g.touch0[0], l = g.touch0[1];
    else return;
    g.zoom("touch", constrain(translate(t, p, l), g.extent));
  }

  function touchended() {
    var g = gesture(this, arguments),
        touches$$1 = exports.event.changedTouches,
        n = touches$$1.length, i, t;

    nopropagation$2();
    if (touchending) clearTimeout(touchending);
    touchending = setTimeout(function() { touchending = null; }, touchDelay);
    for (i = 0; i < n; ++i) {
      t = touches$$1[i];
      if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;
      else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;
    }
    if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;
    if (!g.touch0) g.end();
  }

  zoom.filter = function(_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : constant$12(!!_), zoom) : filter;
  };

  zoom.extent = function(_) {
    return arguments.length ? (extent = typeof _ === "function" ? _ : constant$12([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;
  };

  zoom.scaleExtent = function(_) {
    return arguments.length ? (k0 = +_[0], k1 = +_[1], zoom) : [k0, k1];
  };

  zoom.translateExtent = function(_) {
    return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], zoom) : [[x0, y0], [x1, y1]];
  };

  zoom.duration = function(_) {
    return arguments.length ? (duration = +_, zoom) : duration;
  };

  zoom.interpolate = function(_) {
    return arguments.length ? (interpolate$$1 = _, zoom) : interpolate$$1;
  };

  zoom.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? zoom : value;
  };

  return zoom;
};

exports.version = version;
exports.bisect = bisectRight;
exports.bisectRight = bisectRight;
exports.bisectLeft = bisectLeft;
exports.ascending = ascending;
exports.bisector = bisector;
exports.cross = cross;
exports.descending = descending;
exports.deviation = deviation;
exports.extent = extent;
exports.histogram = histogram;
exports.thresholdFreedmanDiaconis = freedmanDiaconis;
exports.thresholdScott = scott;
exports.thresholdSturges = sturges;
exports.max = max;
exports.mean = mean;
exports.median = median;
exports.merge = merge;
exports.min = min;
exports.pairs = pairs;
exports.permute = permute;
exports.quantile = threshold;
exports.range = sequence;
exports.scan = scan;
exports.shuffle = shuffle;
exports.sum = sum;
exports.ticks = ticks;
exports.tickStep = tickStep;
exports.transpose = transpose;
exports.variance = variance;
exports.zip = zip;
exports.axisTop = axisTop;
exports.axisRight = axisRight;
exports.axisBottom = axisBottom;
exports.axisLeft = axisLeft;
exports.brush = brush;
exports.brushX = brushX;
exports.brushY = brushY;
exports.brushSelection = brushSelection;
exports.chord = chord;
exports.ribbon = ribbon;
exports.nest = nest;
exports.set = set$2;
exports.map = map$1;
exports.keys = keys;
exports.values = values;
exports.entries = entries;
exports.color = color;
exports.rgb = rgb;
exports.hsl = hsl;
exports.lab = lab;
exports.hcl = hcl;
exports.cubehelix = cubehelix;
exports.dispatch = dispatch;
exports.drag = drag;
exports.dragDisable = dragDisable;
exports.dragEnable = yesdrag;
exports.dsvFormat = dsv;
exports.csvParse = csvParse;
exports.csvParseRows = csvParseRows;
exports.csvFormat = csvFormat;
exports.csvFormatRows = csvFormatRows;
exports.tsvParse = tsvParse;
exports.tsvParseRows = tsvParseRows;
exports.tsvFormat = tsvFormat;
exports.tsvFormatRows = tsvFormatRows;
exports.easeLinear = linear$1;
exports.easeQuad = quadInOut;
exports.easeQuadIn = quadIn;
exports.easeQuadOut = quadOut;
exports.easeQuadInOut = quadInOut;
exports.easeCubic = cubicInOut;
exports.easeCubicIn = cubicIn;
exports.easeCubicOut = cubicOut;
exports.easeCubicInOut = cubicInOut;
exports.easePoly = polyInOut;
exports.easePolyIn = polyIn;
exports.easePolyOut = polyOut;
exports.easePolyInOut = polyInOut;
exports.easeSin = sinInOut;
exports.easeSinIn = sinIn;
exports.easeSinOut = sinOut;
exports.easeSinInOut = sinInOut;
exports.easeExp = expInOut;
exports.easeExpIn = expIn;
exports.easeExpOut = expOut;
exports.easeExpInOut = expInOut;
exports.easeCircle = circleInOut;
exports.easeCircleIn = circleIn;
exports.easeCircleOut = circleOut;
exports.easeCircleInOut = circleInOut;
exports.easeBounce = bounceOut;
exports.easeBounceIn = bounceIn;
exports.easeBounceOut = bounceOut;
exports.easeBounceInOut = bounceInOut;
exports.easeBack = backInOut;
exports.easeBackIn = backIn;
exports.easeBackOut = backOut;
exports.easeBackInOut = backInOut;
exports.easeElastic = elasticOut;
exports.easeElasticIn = elasticIn;
exports.easeElasticOut = elasticOut;
exports.easeElasticInOut = elasticInOut;
exports.forceCenter = center$1;
exports.forceCollide = collide;
exports.forceLink = link;
exports.forceManyBody = manyBody;
exports.forceSimulation = simulation;
exports.forceX = x$2;
exports.forceY = y$2;
exports.formatDefaultLocale = defaultLocale;
exports.formatLocale = formatLocale;
exports.formatSpecifier = formatSpecifier;
exports.precisionFixed = precisionFixed;
exports.precisionPrefix = precisionPrefix;
exports.precisionRound = precisionRound;
exports.geoArea = area;
exports.geoBounds = bounds;
exports.geoCentroid = centroid;
exports.geoCircle = circle;
exports.geoClipExtent = extent$1;
exports.geoContains = contains;
exports.geoDistance = distance;
exports.geoGraticule = graticule;
exports.geoGraticule10 = graticule10;
exports.geoInterpolate = interpolate$1;
exports.geoLength = length$1;
exports.geoPath = index$1;
exports.geoAlbers = albers;
exports.geoAlbersUsa = albersUsa;
exports.geoAzimuthalEqualArea = azimuthalEqualArea;
exports.geoAzimuthalEqualAreaRaw = azimuthalEqualAreaRaw;
exports.geoAzimuthalEquidistant = azimuthalEquidistant;
exports.geoAzimuthalEquidistantRaw = azimuthalEquidistantRaw;
exports.geoConicConformal = conicConformal;
exports.geoConicConformalRaw = conicConformalRaw;
exports.geoConicEqualArea = conicEqualArea;
exports.geoConicEqualAreaRaw = conicEqualAreaRaw;
exports.geoConicEquidistant = conicEquidistant;
exports.geoConicEquidistantRaw = conicEquidistantRaw;
exports.geoEquirectangular = equirectangular;
exports.geoEquirectangularRaw = equirectangularRaw;
exports.geoGnomonic = gnomonic;
exports.geoGnomonicRaw = gnomonicRaw;
exports.geoIdentity = identity$5;
exports.geoProjection = projection;
exports.geoProjectionMutator = projectionMutator;
exports.geoMercator = mercator;
exports.geoMercatorRaw = mercatorRaw;
exports.geoOrthographic = orthographic;
exports.geoOrthographicRaw = orthographicRaw;
exports.geoStereographic = stereographic;
exports.geoStereographicRaw = stereographicRaw;
exports.geoTransverseMercator = transverseMercator;
exports.geoTransverseMercatorRaw = transverseMercatorRaw;
exports.geoRotation = rotation;
exports.geoStream = geoStream;
exports.geoTransform = transform;
exports.cluster = cluster;
exports.hierarchy = hierarchy;
exports.pack = index$2;
exports.packSiblings = siblings;
exports.packEnclose = enclose;
exports.partition = partition;
exports.stratify = stratify;
exports.tree = tree;
exports.treemap = index$3;
exports.treemapBinary = binary;
exports.treemapDice = treemapDice;
exports.treemapSlice = treemapSlice;
exports.treemapSliceDice = sliceDice;
exports.treemapSquarify = squarify;
exports.treemapResquarify = resquarify;
exports.interpolate = interpolateValue;
exports.interpolateArray = array$1;
exports.interpolateBasis = basis$1;
exports.interpolateBasisClosed = basisClosed;
exports.interpolateDate = date;
exports.interpolateNumber = reinterpolate;
exports.interpolateObject = object;
exports.interpolateRound = interpolateRound;
exports.interpolateString = interpolateString;
exports.interpolateTransformCss = interpolateTransformCss;
exports.interpolateTransformSvg = interpolateTransformSvg;
exports.interpolateZoom = interpolateZoom;
exports.interpolateRgb = interpolateRgb;
exports.interpolateRgbBasis = rgbBasis;
exports.interpolateRgbBasisClosed = rgbBasisClosed;
exports.interpolateHsl = hsl$2;
exports.interpolateHslLong = hslLong;
exports.interpolateLab = lab$1;
exports.interpolateHcl = hcl$2;
exports.interpolateHclLong = hclLong;
exports.interpolateCubehelix = cubehelix$2;
exports.interpolateCubehelixLong = cubehelixLong;
exports.quantize = quantize;
exports.path = path;
exports.polygonArea = area$1;
exports.polygonCentroid = centroid$1;
exports.polygonHull = hull;
exports.polygonContains = contains$1;
exports.polygonLength = length$2;
exports.quadtree = quadtree;
exports.queue = queue;
exports.randomUniform = uniform;
exports.randomNormal = normal;
exports.randomLogNormal = logNormal;
exports.randomBates = bates;
exports.randomIrwinHall = irwinHall;
exports.randomExponential = exponential$1;
exports.request = request;
exports.html = html;
exports.json = json;
exports.text = text;
exports.xml = xml;
exports.csv = csv$1;
exports.tsv = tsv$1;
exports.scaleBand = band;
exports.scalePoint = point$1;
exports.scaleIdentity = identity$6;
exports.scaleLinear = linear$2;
exports.scaleLog = log$1;
exports.scaleOrdinal = ordinal;
exports.scaleImplicit = implicit;
exports.scalePow = pow$1;
exports.scaleSqrt = sqrt$1;
exports.scaleQuantile = quantile$$1;
exports.scaleQuantize = quantize$1;
exports.scaleThreshold = threshold$1;
exports.scaleTime = time;
exports.scaleUtc = utcTime;
exports.schemeCategory10 = category10;
exports.schemeCategory20b = category20b;
exports.schemeCategory20c = category20c;
exports.schemeCategory20 = category20;
exports.interpolateCubehelixDefault = cubehelix$3;
exports.interpolateRainbow = rainbow$1;
exports.interpolateWarm = warm;
exports.interpolateCool = cool;
exports.interpolateViridis = viridis;
exports.interpolateMagma = magma;
exports.interpolateInferno = inferno;
exports.interpolatePlasma = plasma;
exports.scaleSequential = sequential;
exports.creator = creator;
exports.local = local$1;
exports.matcher = matcher$1;
exports.mouse = mouse;
exports.namespace = namespace;
exports.namespaces = namespaces;
exports.select = select;
exports.selectAll = selectAll;
exports.selection = selection;
exports.selector = selector;
exports.selectorAll = selectorAll;
exports.touch = touch;
exports.touches = touches;
exports.window = window;
exports.customEvent = customEvent;
exports.arc = arc;
exports.area = area$2;
exports.line = line;
exports.pie = pie;
exports.radialArea = radialArea;
exports.radialLine = radialLine$1;
exports.symbol = symbol;
exports.symbols = symbols;
exports.symbolCircle = circle$2;
exports.symbolCross = cross$2;
exports.symbolDiamond = diamond;
exports.symbolSquare = square;
exports.symbolStar = star;
exports.symbolTriangle = triangle;
exports.symbolWye = wye;
exports.curveBasisClosed = basisClosed$1;
exports.curveBasisOpen = basisOpen;
exports.curveBasis = basis$2;
exports.curveBundle = bundle;
exports.curveCardinalClosed = cardinalClosed;
exports.curveCardinalOpen = cardinalOpen;
exports.curveCardinal = cardinal;
exports.curveCatmullRomClosed = catmullRomClosed;
exports.curveCatmullRomOpen = catmullRomOpen;
exports.curveCatmullRom = catmullRom;
exports.curveLinearClosed = linearClosed;
exports.curveLinear = curveLinear;
exports.curveMonotoneX = monotoneX;
exports.curveMonotoneY = monotoneY;
exports.curveNatural = natural;
exports.curveStep = step;
exports.curveStepAfter = stepAfter;
exports.curveStepBefore = stepBefore;
exports.stack = stack;
exports.stackOffsetExpand = expand;
exports.stackOffsetNone = none$1;
exports.stackOffsetSilhouette = silhouette;
exports.stackOffsetWiggle = wiggle;
exports.stackOrderAscending = ascending$2;
exports.stackOrderDescending = descending$2;
exports.stackOrderInsideOut = insideOut;
exports.stackOrderNone = none$2;
exports.stackOrderReverse = reverse;
exports.timeInterval = newInterval;
exports.timeMillisecond = millisecond;
exports.timeMilliseconds = milliseconds;
exports.utcMillisecond = millisecond;
exports.utcMilliseconds = milliseconds;
exports.timeSecond = second;
exports.timeSeconds = seconds;
exports.utcSecond = second;
exports.utcSeconds = seconds;
exports.timeMinute = minute;
exports.timeMinutes = minutes;
exports.timeHour = hour;
exports.timeHours = hours;
exports.timeDay = day;
exports.timeDays = days;
exports.timeWeek = sunday;
exports.timeWeeks = sundays;
exports.timeSunday = sunday;
exports.timeSundays = sundays;
exports.timeMonday = monday;
exports.timeMondays = mondays;
exports.timeTuesday = tuesday;
exports.timeTuesdays = tuesdays;
exports.timeWednesday = wednesday;
exports.timeWednesdays = wednesdays;
exports.timeThursday = thursday;
exports.timeThursdays = thursdays;
exports.timeFriday = friday;
exports.timeFridays = fridays;
exports.timeSaturday = saturday;
exports.timeSaturdays = saturdays;
exports.timeMonth = month;
exports.timeMonths = months;
exports.timeYear = year;
exports.timeYears = years;
exports.utcMinute = utcMinute;
exports.utcMinutes = utcMinutes;
exports.utcHour = utcHour;
exports.utcHours = utcHours;
exports.utcDay = utcDay;
exports.utcDays = utcDays;
exports.utcWeek = utcSunday;
exports.utcWeeks = utcSundays;
exports.utcSunday = utcSunday;
exports.utcSundays = utcSundays;
exports.utcMonday = utcMonday;
exports.utcMondays = utcMondays;
exports.utcTuesday = utcTuesday;
exports.utcTuesdays = utcTuesdays;
exports.utcWednesday = utcWednesday;
exports.utcWednesdays = utcWednesdays;
exports.utcThursday = utcThursday;
exports.utcThursdays = utcThursdays;
exports.utcFriday = utcFriday;
exports.utcFridays = utcFridays;
exports.utcSaturday = utcSaturday;
exports.utcSaturdays = utcSaturdays;
exports.utcMonth = utcMonth;
exports.utcMonths = utcMonths;
exports.utcYear = utcYear;
exports.utcYears = utcYears;
exports.timeFormatDefaultLocale = defaultLocale$1;
exports.timeFormatLocale = formatLocale$1;
exports.isoFormat = formatIso;
exports.isoParse = parseIso;
exports.now = now;
exports.timer = timer;
exports.timerFlush = timerFlush;
exports.timeout = timeout$1;
exports.interval = interval$1;
exports.transition = transition;
exports.active = active;
exports.interrupt = interrupt;
exports.voronoi = voronoi;
exports.zoom = zoom;
exports.zoomTransform = transform$1;
exports.zoomIdentity = identity$8;

Object.defineProperty(exports, '__esModule', { value: true });

})));


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @typechecks
 */

var emptyFunction = __webpack_require__(9);

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function listen(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function remove() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function capture(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    } else {
      if (process.env.NODE_ENV !== 'production') {
        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
      }
      return {
        remove: emptyFunction
      };
    }
  },

  registerDefault: function registerDefault() {}
};

module.exports = EventListener;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * @param {DOMElement} node input/textarea to focus
 */

function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch (e) {}
}

module.exports = focusNode;

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/* eslint-disable fb-www/typeof-undefined */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document or document body is not
 * yet defined.
 */
function getActiveElement() /*?DOMElement*/{
  if (typeof document === 'undefined') {
    return null;
  }
  try {
    return document.activeElement || document.body;
  } catch (e) {
    return document.body;
  }
}

module.exports = getActiveElement;

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = capitalizeString;
function capitalizeString(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
module.exports = exports["default"];

/***/ }),
/* 67 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__root_js__ = __webpack_require__(156);


/** Built-in value references. */
var Symbol = __WEBPACK_IMPORTED_MODULE_0__root_js__["a" /* default */].Symbol;

/* harmony default export */ __webpack_exports__["a"] = Symbol;


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * CSS properties which accept numbers but are not in units of "px".
 */

var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridColumn: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundAttachment: true,
    backgroundColor: true,
    backgroundImage: true,
    backgroundPositionX: true,
    backgroundPositionY: true,
    backgroundRepeat: true
  },
  backgroundPosition: {
    backgroundPositionX: true,
    backgroundPositionY: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  },
  outline: {
    outlineWidth: true,
    outlineStyle: true,
    outlineColor: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PooledClass = __webpack_require__(14);

var invariant = __webpack_require__(1);

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */

var CallbackQueue = function () {
  function CallbackQueue(arg) {
    _classCallCheck(this, CallbackQueue);

    this._callbacks = null;
    this._contexts = null;
    this._arg = arg;
  }

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */


  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {
    this._callbacks = this._callbacks || [];
    this._callbacks.push(callback);
    this._contexts = this._contexts || [];
    this._contexts.push(context);
  };

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */


  CallbackQueue.prototype.notifyAll = function notifyAll() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    var arg = this._arg;
    if (callbacks && contexts) {
      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0; i < callbacks.length; i++) {
        callbacks[i].call(contexts[i], arg);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  };

  CallbackQueue.prototype.checkpoint = function checkpoint() {
    return this._callbacks ? this._callbacks.length : 0;
  };

  CallbackQueue.prototype.rollback = function rollback(len) {
    if (this._callbacks && this._contexts) {
      this._callbacks.length = len;
      this._contexts.length = len;
    }
  };

  /**
   * Resets the internal queue.
   *
   * @internal
   */


  CallbackQueue.prototype.reset = function reset() {
    this._callbacks = null;
    this._contexts = null;
  };

  /**
   * `PooledClass` looks for this.
   */


  CallbackQueue.prototype.destructor = function destructor() {
    this.reset();
  };

  return CallbackQueue;
}();

module.exports = PooledClass.addPoolingTo(CallbackQueue);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(13);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactInstrumentation = __webpack_require__(8);

var quoteAttributeValueForBrowser = __webpack_require__(227);
var warning = __webpack_require__(2);

var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};

function isAttributeNameSafe(attributeName) {
  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
    return true;
  }
  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
    return false;
  }
  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }
  illegalAttributeNameCache[attributeName] = true;
  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
  return false;
}

function shouldIgnoreValue(propertyInfo, value) {
  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function (id) {
    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
  },

  setAttributeForID: function (node, id) {
    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
  },

  createMarkupForRoot: function () {
    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
  },

  setAttributeForRoot: function (node) {
    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function (name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      if (shouldIgnoreValue(propertyInfo, value)) {
        return '';
      }
      var attributeName = propertyInfo.attributeName;
      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
        return attributeName + '=""';
      }
      return attributeName + '=' + quoteAttributeValueForBrowser(value);
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return name + '=' + quoteAttributeValueForBrowser(value);
    }
    return null;
  },

  /**
   * Creates markup for a custom property.
   *
   * @param {string} name
   * @param {*} value
   * @return {string} Markup string, or empty string if the property was invalid.
   */
  createMarkupForCustomAttribute: function (name, value) {
    if (!isAttributeNameSafe(name) || value == null) {
      return '';
    }
    return name + '=' + quoteAttributeValueForBrowser(value);
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function (node, name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(propertyInfo, value)) {
        this.deleteValueForProperty(node, name);
        return;
      } else if (propertyInfo.mustUseProperty) {
        // Contrary to `setAttribute`, object properties are properly
        // `toString`ed by IE8/9.
        node[propertyInfo.propertyName] = value;
      } else {
        var attributeName = propertyInfo.attributeName;
        var namespace = propertyInfo.attributeNamespace;
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        if (namespace) {
          node.setAttributeNS(namespace, attributeName, '' + value);
        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
          node.setAttribute(attributeName, '');
        } else {
          node.setAttribute(attributeName, '' + value);
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      DOMPropertyOperations.setValueForAttribute(node, name, value);
      return;
    }

    if (process.env.NODE_ENV !== 'production') {
      var payload = {};
      payload[name] = value;
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'update attribute',
        payload: payload
      });
    }
  },

  setValueForAttribute: function (node, name, value) {
    if (!isAttributeNameSafe(name)) {
      return;
    }
    if (value == null) {
      node.removeAttribute(name);
    } else {
      node.setAttribute(name, '' + value);
    }

    if (process.env.NODE_ENV !== 'production') {
      var payload = {};
      payload[name] = value;
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'update attribute',
        payload: payload
      });
    }
  },

  /**
   * Deletes an attributes from a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForAttribute: function (node, name) {
    node.removeAttribute(name);
    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'remove attribute',
        payload: name
      });
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function (node, name) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (propertyInfo.mustUseProperty) {
        var propName = propertyInfo.propertyName;
        if (propertyInfo.hasBooleanValue) {
          node[propName] = false;
        } else {
          node[propName] = '';
        }
      } else {
        node.removeAttribute(propertyInfo.attributeName);
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    }

    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'remove attribute',
        payload: name
      });
    }
  }

};

module.exports = DOMPropertyOperations;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMComponentFlags = {
  hasCachedChildNodes: 1 << 0
};

module.exports = ReactDOMComponentFlags;

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var LinkedValueUtils = __webpack_require__(41);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactUpdates = __webpack_require__(10);

var warning = __webpack_require__(2);

var didWarnValueLink = false;
var didWarnValueDefaultValue = false;

function updateOptionsIfPendingUpdateAndMounted() {
  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
    this._wrapperState.pendingUpdate = false;

    var props = this._currentElement.props;
    var value = LinkedValueUtils.getValue(props);

    if (value != null) {
      updateOptions(this, Boolean(props.multiple), value);
    }
  }
}

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

var valuePropNames = ['value', 'defaultValue'];

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function checkSelectPropTypes(inst, props) {
  var owner = inst._currentElement._owner;
  LinkedValueUtils.checkPropTypes('select', props, owner);

  if (props.valueLink !== undefined && !didWarnValueLink) {
    process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
    didWarnValueLink = true;
  }

  for (var i = 0; i < valuePropNames.length; i++) {
    var propName = valuePropNames[i];
    if (props[propName] == null) {
      continue;
    }
    var isArray = Array.isArray(props[propName]);
    if (props.multiple && !isArray) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
    } else if (!props.multiple && isArray) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
    }
  }
}

/**
 * @param {ReactDOMComponent} inst
 * @param {boolean} multiple
 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
 * @private
 */
function updateOptions(inst, multiple, propValue) {
  var selectedValue, i;
  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;

  if (multiple) {
    selectedValue = {};
    for (i = 0; i < propValue.length; i++) {
      selectedValue['' + propValue[i]] = true;
    }
    for (i = 0; i < options.length; i++) {
      var selected = selectedValue.hasOwnProperty(options[i].value);
      if (options[i].selected !== selected) {
        options[i].selected = selected;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    selectedValue = '' + propValue;
    for (i = 0; i < options.length; i++) {
      if (options[i].value === selectedValue) {
        options[i].selected = true;
        return;
      }
    }
    if (options.length) {
      options[0].selected = true;
    }
  }
}

/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = {
  getHostProps: function (inst, props) {
    return _assign({}, props, {
      onChange: inst._wrapperState.onChange,
      value: undefined
    });
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      checkSelectPropTypes(inst, props);
    }

    var value = LinkedValueUtils.getValue(props);
    inst._wrapperState = {
      pendingUpdate: false,
      initialValue: value != null ? value : props.defaultValue,
      listeners: null,
      onChange: _handleChange.bind(inst),
      wasMultiple: Boolean(props.multiple)
    };

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
      didWarnValueDefaultValue = true;
    }
  },

  getSelectValueContext: function (inst) {
    // ReactDOMOption looks at this initial value so the initial generated
    // markup has correct `selected` attributes
    return inst._wrapperState.initialValue;
  },

  postUpdateWrapper: function (inst) {
    var props = inst._currentElement.props;

    // After the initial mount, we control selected-ness manually so don't pass
    // this value down
    inst._wrapperState.initialValue = undefined;

    var wasMultiple = inst._wrapperState.wasMultiple;
    inst._wrapperState.wasMultiple = Boolean(props.multiple);

    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      inst._wrapperState.pendingUpdate = false;
      updateOptions(inst, Boolean(props.multiple), value);
    } else if (wasMultiple !== Boolean(props.multiple)) {
      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
      if (props.defaultValue != null) {
        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
      } else {
        // Revert the select back to its default unselected state.
        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
      }
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  if (this._rootNodeID) {
    this._wrapperState.pendingUpdate = true;
  }
  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
  return returnValue;
}

module.exports = ReactDOMSelect;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var emptyComponentFactory;

var ReactEmptyComponentInjection = {
  injectEmptyComponentFactory: function (factory) {
    emptyComponentFactory = factory;
  }
};

var ReactEmptyComponent = {
  create: function (instantiate) {
    return emptyComponentFactory(instantiate);
  }
};

ReactEmptyComponent.injection = ReactEmptyComponentInjection;

module.exports = ReactEmptyComponent;

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactFeatureFlags = {
  // When true, call console.time() before and .timeEnd() after each top-level
  // render (both initial renders and updates). Useful when looking at prod-mode
  // timeline profiles in Chrome, for example.
  logTopLevelRenders: false
};

module.exports = ReactFeatureFlags;

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

var genericComponentClass = null;
var textComponentClass = null;

var ReactHostComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function (componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a text component class that takes the text string to be
  // rendered as props.
  injectTextComponentClass: function (componentClass) {
    textComponentClass = componentClass;
  }
};

/**
 * Get a host internal component class for a specific tag.
 *
 * @param {ReactElement} element The element to create.
 * @return {function} The internal class constructor function.
 */
function createInternalComponent(element) {
  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
  return new genericComponentClass(element);
}

/**
 * @param {ReactText} text
 * @return {ReactComponent}
 */
function createInstanceForText(text) {
  return new textComponentClass(text);
}

/**
 * @param {ReactComponent} component
 * @return {boolean}
 */
function isTextComponent(component) {
  return component instanceof textComponentClass;
}

var ReactHostComponent = {
  createInternalComponent: createInternalComponent,
  createInstanceForText: createInstanceForText,
  isTextComponent: isTextComponent,
  injection: ReactHostComponentInjection
};

module.exports = ReactHostComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMSelection = __webpack_require__(181);

var containsNode = __webpack_require__(118);
var focusNode = __webpack_require__(64);
var getActiveElement = __webpack_require__(65);

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function (elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
  },

  getSelectionInformation: function () {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function (priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function (input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || { start: 0, end: 0 };
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function (input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (end === undefined) {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var DOMLazyTree = __webpack_require__(19);
var DOMProperty = __webpack_require__(13);
var React = __webpack_require__(21);
var ReactBrowserEventEmitter = __webpack_require__(28);
var ReactCurrentOwner = __webpack_require__(11);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactDOMContainerInfo = __webpack_require__(173);
var ReactDOMFeatureFlags = __webpack_require__(175);
var ReactFeatureFlags = __webpack_require__(74);
var ReactInstanceMap = __webpack_require__(25);
var ReactInstrumentation = __webpack_require__(8);
var ReactMarkupChecksum = __webpack_require__(195);
var ReactReconciler = __webpack_require__(20);
var ReactUpdateQueue = __webpack_require__(44);
var ReactUpdates = __webpack_require__(10);

var emptyObject = __webpack_require__(22);
var instantiateReactComponent = __webpack_require__(85);
var invariant = __webpack_require__(1);
var setInnerHTML = __webpack_require__(32);
var shouldUpdateReactComponent = __webpack_require__(50);
var warning = __webpack_require__(2);

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

var instancesByReactRootID = {};

/**
 * Finds the index of the first character
 * that's not common between the two given strings.
 *
 * @return {number} the index of the character where the strings diverge
 */
function firstDifferenceIndex(string1, string2) {
  var minLen = Math.min(string1.length, string2.length);
  for (var i = 0; i < minLen; i++) {
    if (string1.charAt(i) !== string2.charAt(i)) {
      return i;
    }
  }
  return string1.length === string2.length ? -1 : minLen;
}

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 * a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Mounts this component and inserts it into the DOM.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {DOMElement} container DOM element to mount into.
 * @param {ReactReconcileTransaction} transaction
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
  var markerName;
  if (ReactFeatureFlags.logTopLevelRenders) {
    var wrappedElement = wrapperInstance._currentElement.props.child;
    var type = wrappedElement.type;
    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
    console.time(markerName);
  }

  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */
  );

  if (markerName) {
    console.timeEnd(markerName);
  }

  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
}

/**
 * Batched mount.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {DOMElement} container DOM element to mount into.
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* useCreateElement */
  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
  ReactUpdates.ReactReconcileTransaction.release(transaction);
}

/**
 * Unmounts a component and removes it from the DOM.
 *
 * @param {ReactComponent} instance React component instance.
 * @param {DOMElement} container DOM element to unmount from.
 * @final
 * @internal
 * @see {ReactMount.unmountComponentAtNode}
 */
function unmountComponentFromNode(instance, container, safely) {
  if (process.env.NODE_ENV !== 'production') {
    ReactInstrumentation.debugTool.onBeginFlush();
  }
  ReactReconciler.unmountComponent(instance, safely);
  if (process.env.NODE_ENV !== 'production') {
    ReactInstrumentation.debugTool.onEndFlush();
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    container = container.documentElement;
  }

  // http://jsperf.com/emptying-a-node
  while (container.lastChild) {
    container.removeChild(container.lastChild);
  }
}

/**
 * True if the supplied DOM node has a direct React-rendered child that is
 * not a React root element. Useful for warning in `render`,
 * `unmountComponentAtNode`, etc.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM element contains a direct child that was
 * rendered by React but is not a root element.
 * @internal
 */
function hasNonRootReactChild(container) {
  var rootEl = getReactRootElementInContainer(container);
  if (rootEl) {
    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
    return !!(inst && inst._hostParent);
  }
}

/**
 * True if the supplied DOM node is a React DOM element and
 * it has been rendered by another copy of React.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM has been rendered by another copy of React
 * @internal
 */
function nodeIsRenderedByOtherInstance(container) {
  var rootEl = getReactRootElementInContainer(container);
  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));
}

/**
 * True if the supplied DOM node is a valid node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid DOM node.
 * @internal
 */
function isValidContainer(node) {
  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));
}

/**
 * True if the supplied DOM node is a valid React node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid React DOM node.
 * @internal
 */
function isReactNode(node) {
  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));
}

function getHostRootInstanceInContainer(container) {
  var rootEl = getReactRootElementInContainer(container);
  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
}

function getTopLevelWrapperInContainer(container) {
  var root = getHostRootInstanceInContainer(container);
  return root ? root._hostContainerInfo._topLevelWrapper : null;
}

/**
 * Temporary (?) hack so that we can store all top-level pending updates on
 * composites instead of having to worry about different types of components
 * here.
 */
var topLevelRootCounter = 1;
var TopLevelWrapper = function () {
  this.rootID = topLevelRootCounter++;
};
TopLevelWrapper.prototype.isReactComponent = {};
if (process.env.NODE_ENV !== 'production') {
  TopLevelWrapper.displayName = 'TopLevelWrapper';
}
TopLevelWrapper.prototype.render = function () {
  return this.props.child;
};
TopLevelWrapper.isReactTopLevelWrapper = true;

/**
 * Mounting is the process of initializing a React component by creating its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {

  TopLevelWrapper: TopLevelWrapper,

  /**
   * Used by devtools. The keys are not important.
   */
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function (container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactElement} nextElement component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {
    ReactMount.scrollMonitor(container, function () {
      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);
      if (callback) {
        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
      }
    });

    return prevComponent;
  },

  /**
   * Render a new component into the DOM. Hooked by hooks!
   *
   * @param {ReactElement} nextElement element to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case.
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
    var componentInstance = instantiateReactComponent(nextElement, false);

    // The initial render is synchronous but any updates that happen during
    // rendering, in componentWillMount or componentDidMount, will be batched
    // according to the current batching strategy.

    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);

    var wrapperID = componentInstance._instance.rootID;
    instancesByReactRootID[wrapperID] = componentInstance;

    return componentInstance;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
  },

  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
    !React.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' :
    // Check if it quacks like an element
    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;

    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;

    var nextWrappedElement = React.createElement(TopLevelWrapper, { child: nextElement });

    var nextContext;
    if (parentComponent) {
      var parentInst = ReactInstanceMap.get(parentComponent);
      nextContext = parentInst._processChildContext(parentInst._context);
    } else {
      nextContext = emptyObject;
    }

    var prevComponent = getTopLevelWrapperInContainer(container);

    if (prevComponent) {
      var prevWrappedElement = prevComponent._currentElement;
      var prevElement = prevWrappedElement.props.child;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        var publicInst = prevComponent._renderedComponent.getPublicInstance();
        var updatedCallback = callback && function () {
          callback.call(publicInst);
        };
        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
        return publicInst;
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
    var containerHasNonRootReactChild = hasNonRootReactChild(container);

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
        var rootElementSibling = reactRootElement;
        while (rootElementSibling) {
          if (internalGetID(rootElementSibling)) {
            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
            break;
          }
          rootElementSibling = rootElementSibling.nextSibling;
        }
      }
    }

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
    if (callback) {
      callback.call(component);
    }
    return component;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function (nextElement, container, callback) {
    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function (container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by another copy of React.') : void 0;
    }

    var prevComponent = getTopLevelWrapperInContainer(container);
    if (!prevComponent) {
      // Check if the node being unmounted was rendered by React, but isn't a
      // root node.
      var containerHasNonRootReactChild = hasNonRootReactChild(container);

      // Check if the container itself is a React root node.
      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);

      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
      }

      return false;
    }
    delete instancesByReactRootID[prevComponent._instance.rootID];
    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
    return true;
  },

  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;

    if (shouldReuseMarkup) {
      var rootElement = getReactRootElementInContainer(container);
      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
        ReactDOMComponentTree.precacheNode(instance, rootElement);
        return;
      } else {
        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

        var rootMarkup = rootElement.outerHTML;
        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

        var normalizedMarkup = markup;
        if (process.env.NODE_ENV !== 'production') {
          // because rootMarkup is retrieved from the DOM, various normalizations
          // will have occurred which will not be present in `markup`. Here,
          // insert markup into a <div> or <iframe> depending on the container
          // type to perform the same normalizations before comparing.
          var normalizer;
          if (container.nodeType === ELEMENT_NODE_TYPE) {
            normalizer = document.createElement('div');
            normalizer.innerHTML = markup;
            normalizedMarkup = normalizer.innerHTML;
          } else {
            normalizer = document.createElement('iframe');
            document.body.appendChild(normalizer);
            normalizer.contentDocument.write(markup);
            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
            document.body.removeChild(normalizer);
          }
        }

        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;

        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
        }
      }
    }

    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;

    if (transaction.useCreateElement) {
      while (container.lastChild) {
        container.removeChild(container.lastChild);
      }
      DOMLazyTree.insertTreeBefore(container, markup, null);
    } else {
      setInnerHTML(container, markup);
      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
    }

    if (process.env.NODE_ENV !== 'production') {
      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
      if (hostNode._debugID !== 0) {
        ReactInstrumentation.debugTool.onHostOperation({
          instanceID: hostNode._debugID,
          type: 'mount',
          payload: markup.toString()
        });
      }
    }
  }
};

module.exports = ReactMount;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var React = __webpack_require__(21);

var invariant = __webpack_require__(1);

var ReactNodeTypes = {
  HOST: 0,
  COMPOSITE: 1,
  EMPTY: 2,

  getType: function (node) {
    if (node === null || node === false) {
      return ReactNodeTypes.EMPTY;
    } else if (React.isValidElement(node)) {
      if (typeof node.type === 'function') {
        return ReactNodeTypes.COMPOSITE;
      } else {
        return ReactNodeTypes.HOST;
      }
    }
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
  }
};

module.exports = ReactNodeTypes;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function (scrollPosition) {
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

/**
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;

  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  if (Array.isArray(current)) {
    if (Array.isArray(next)) {
      current.push.apply(current, next);
      return current;
    }
    current.push(next);
    return current;
  }

  if (Array.isArray(next)) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */

function forEachAccumulated(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
}

module.exports = forEachAccumulated;

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactNodeTypes = __webpack_require__(78);

function getHostComponentFromComposite(inst) {
  var type;

  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
    inst = inst._renderedComponent;
  }

  if (type === ReactNodeTypes.HOST) {
    return inst._renderedComponent;
  } else if (type === ReactNodeTypes.EMPTY) {
    return null;
  }
}

module.exports = getHostComponentFromComposite;

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var ReactCompositeComponent = __webpack_require__(170);
var ReactEmptyComponent = __webpack_require__(73);
var ReactHostComponent = __webpack_require__(75);

var getNextDebugID = __webpack_require__(224);
var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

// To avoid a cyclic dependency, we create the final class in this module
var ReactCompositeComponentWrapper = function (element) {
  this.construct(element);
};
_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
  _instantiateReactComponent: instantiateReactComponent
});

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Check if the type reference is a known internal type. I.e. not a user
 * provided composite type.
 *
 * @param {function} type
 * @return {boolean} Returns true if this is a valid internal type.
 */
function isInternalComponentType(type) {
  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
}

/**
 * Given a ReactNode, create an instance that will actually be mounted.
 *
 * @param {ReactNode} node
 * @param {boolean} shouldHaveDebugID
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(node, shouldHaveDebugID) {
  var instance;

  if (node === null || node === false) {
    instance = ReactEmptyComponent.create(instantiateReactComponent);
  } else if (typeof node === 'object') {
    var element = node;
    var type = element.type;
    if (typeof type !== 'function' && typeof type !== 'string') {
      var info = '';
      if (process.env.NODE_ENV !== 'production') {
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
        }
      }
      info += getDeclarationErrorAddendum(element._owner);
       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info) : _prodInvariant('130', type == null ? type : typeof type, info) : void 0;
    }

    // Special case string values
    if (typeof element.type === 'string') {
      instance = ReactHostComponent.createInternalComponent(element);
    } else if (isInternalComponentType(element.type)) {
      // This is temporarily available for custom components that are not string
      // representations. I.e. ART. Once those are updated to use the string
      // representation, we can drop this code path.
      instance = new element.type(element);

      // We renamed this. Allow the old name for compat. :(
      if (!instance.getHostNode) {
        instance.getHostNode = instance.getNativeNode;
      }
    } else {
      instance = new ReactCompositeComponentWrapper(element);
    }
  } else if (typeof node === 'string' || typeof node === 'number') {
    instance = ReactHostComponent.createInstanceForText(node);
  } else {
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
  }

  // These two fields are used by the DOM and ART diffing algorithms
  // respectively. Instead of using expandos on components, we should be
  // storing the state needed by the diffing algorithms elsewhere.
  instance._mountIndex = 0;
  instance._mountImage = null;

  if (process.env.NODE_ENV !== 'production') {
    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;
  }

  // Internal instances should fully constructed at this point, so they should
  // not get any new fields added to them at this point.
  if (process.env.NODE_ENV !== 'production') {
    if (Object.preventExtensions) {
      Object.preventExtensions(instance);
    }
  }

  return instance;
}

module.exports = instantiateReactComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */

var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

  if (nodeName === 'input') {
    return !!supportedInputTypes[elem.type];
  }

  if (nodeName === 'textarea') {
    return true;
  }

  return false;
}

module.exports = isTextInputElement;

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);
var escapeTextContentForBrowser = __webpack_require__(31);
var setInnerHTML = __webpack_require__(32);

/**
 * Set the textContent property of a node, ensuring that whitespace is preserved
 * even in IE8. innerText is a poor substitute for textContent and, among many
 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
 * as it should.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function (node, text) {
  if (text) {
    var firstChild = node.firstChild;

    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
      firstChild.nodeValue = text;
      return;
    }
  }
  node.textContent = text;
};

if (ExecutionEnvironment.canUseDOM) {
  if (!('textContent' in document.documentElement)) {
    setTextContent = function (node, text) {
      if (node.nodeType === 3) {
        node.nodeValue = text;
        return;
      }
      setInnerHTML(node, escapeTextContentForBrowser(text));
    };
  }
}

module.exports = setTextContent;

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactCurrentOwner = __webpack_require__(11);
var REACT_ELEMENT_TYPE = __webpack_require__(189);

var getIteratorFn = __webpack_require__(223);
var invariant = __webpack_require__(1);
var KeyEscapeUtils = __webpack_require__(40);
var warning = __webpack_require__(2);

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * This is inlined from ReactElement since this file is shared between
 * isomorphic and renderers. We could extract this to a
 *
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (component && typeof component === 'object' && component.key != null) {
    // Explicit key
    return KeyEscapeUtils.escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' ||
  // The following is inlined from ReactElement. This means we can optimize
  // some checks. React Fiber also inlines this logic for similar purposes.
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (process.env.NODE_ENV !== 'production') {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (process.env.NODE_ENV !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 89 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_hoist_non_react_statics__ = __webpack_require__(130);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_hoist_non_react_statics___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_hoist_non_react_statics__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant__ = __webpack_require__(149);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_invariant__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_Subscription__ = __webpack_require__(236);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_PropTypes__ = __webpack_require__(91);
/* harmony export (immutable) */ __webpack_exports__["a"] = connectAdvanced;
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }








var hotReloadingVersion = 0;
var dummyState = {};
function noop() {}
function makeSelectorStateful(sourceSelector, store) {
  // wrap the selector in an object that tracks its results between runs.
  var selector = {
    run: function runComponentSelector(props) {
      try {
        var nextProps = sourceSelector(store.getState(), props);
        if (nextProps !== selector.props || selector.error) {
          selector.shouldComponentUpdate = true;
          selector.props = nextProps;
          selector.error = null;
        }
      } catch (error) {
        selector.shouldComponentUpdate = true;
        selector.error = error;
      }
    }
  };

  return selector;
}

function connectAdvanced(
/*
  selectorFactory is a func that is responsible for returning the selector function used to
  compute new props from state, props, and dispatch. For example:
     export default connectAdvanced((dispatch, options) => (state, props) => ({
      thing: state.things[props.thingId],
      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),
    }))(YourComponent)
   Access to dispatch is provided to the factory so selectorFactories can bind actionCreators
  outside of their selector as an optimization. Options passed to connectAdvanced are passed to
  the selectorFactory, along with displayName and WrappedComponent, as the second argument.
   Note that selectorFactory is responsible for all caching/memoization of inbound and outbound
  props. Do not use connectAdvanced directly without memoizing results between calls to your
  selector, otherwise the Connect component will re-render on every state or props change.
*/
selectorFactory) {
  var _contextTypes, _childContextTypes;

  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$getDisplayName = _ref.getDisplayName,
      getDisplayName = _ref$getDisplayName === undefined ? function (name) {
    return 'ConnectAdvanced(' + name + ')';
  } : _ref$getDisplayName,
      _ref$methodName = _ref.methodName,
      methodName = _ref$methodName === undefined ? 'connectAdvanced' : _ref$methodName,
      _ref$renderCountProp = _ref.renderCountProp,
      renderCountProp = _ref$renderCountProp === undefined ? undefined : _ref$renderCountProp,
      _ref$shouldHandleStat = _ref.shouldHandleStateChanges,
      shouldHandleStateChanges = _ref$shouldHandleStat === undefined ? true : _ref$shouldHandleStat,
      _ref$storeKey = _ref.storeKey,
      storeKey = _ref$storeKey === undefined ? 'store' : _ref$storeKey,
      _ref$withRef = _ref.withRef,
      withRef = _ref$withRef === undefined ? false : _ref$withRef,
      connectOptions = _objectWithoutProperties(_ref, ['getDisplayName', 'methodName', 'renderCountProp', 'shouldHandleStateChanges', 'storeKey', 'withRef']);

  var subscriptionKey = storeKey + 'Subscription';
  var version = hotReloadingVersion++;

  var contextTypes = (_contextTypes = {}, _contextTypes[storeKey] = __WEBPACK_IMPORTED_MODULE_4__utils_PropTypes__["a" /* storeShape */], _contextTypes[subscriptionKey] = __WEBPACK_IMPORTED_MODULE_4__utils_PropTypes__["b" /* subscriptionShape */], _contextTypes);
  var childContextTypes = (_childContextTypes = {}, _childContextTypes[subscriptionKey] = __WEBPACK_IMPORTED_MODULE_4__utils_PropTypes__["b" /* subscriptionShape */], _childContextTypes);

  return function wrapWithConnect(WrappedComponent) {
    __WEBPACK_IMPORTED_MODULE_1_invariant___default()(typeof WrappedComponent == 'function', 'You must pass a component to the function returned by ' + ('connect. Instead received ' + JSON.stringify(WrappedComponent)));

    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';

    var displayName = getDisplayName(wrappedComponentName);

    var selectorFactoryOptions = _extends({}, connectOptions, {
      getDisplayName: getDisplayName,
      methodName: methodName,
      renderCountProp: renderCountProp,
      shouldHandleStateChanges: shouldHandleStateChanges,
      storeKey: storeKey,
      withRef: withRef,
      displayName: displayName,
      wrappedComponentName: wrappedComponentName,
      WrappedComponent: WrappedComponent
    });

    var Connect = function (_Component) {
      _inherits(Connect, _Component);

      function Connect(props, context) {
        _classCallCheck(this, Connect);

        var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

        _this.version = version;
        _this.state = {};
        _this.renderCount = 0;
        _this.store = props[storeKey] || context[storeKey];
        _this.propsMode = Boolean(props[storeKey]);
        _this.setWrappedInstance = _this.setWrappedInstance.bind(_this);

        __WEBPACK_IMPORTED_MODULE_1_invariant___default()(_this.store, 'Could not find "' + storeKey + '" in either the context or props of ' + ('"' + displayName + '". Either wrap the root component in a <Provider>, ') + ('or explicitly pass "' + storeKey + '" as a prop to "' + displayName + '".'));

        _this.initSelector();
        _this.initSubscription();
        return _this;
      }

      Connect.prototype.getChildContext = function getChildContext() {
        var _ref2;

        // If this component received store from props, its subscription should be transparent
        // to any descendants receiving store+subscription from context; it passes along
        // subscription passed to it. Otherwise, it shadows the parent subscription, which allows
        // Connect to control ordering of notifications to flow top-down.
        var subscription = this.propsMode ? null : this.subscription;
        return _ref2 = {}, _ref2[subscriptionKey] = subscription || this.context[subscriptionKey], _ref2;
      };

      Connect.prototype.componentDidMount = function componentDidMount() {
        if (!shouldHandleStateChanges) return;

        // componentWillMount fires during server side rendering, but componentDidMount and
        // componentWillUnmount do not. Because of this, trySubscribe happens during ...didMount.
        // Otherwise, unsubscription would never take place during SSR, causing a memory leak.
        // To handle the case where a child component may have triggered a state change by
        // dispatching an action in its componentWillMount, we have to re-run the select and maybe
        // re-render.
        this.subscription.trySubscribe();
        this.selector.run(this.props);
        if (this.selector.shouldComponentUpdate) this.forceUpdate();
      };

      Connect.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        this.selector.run(nextProps);
      };

      Connect.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
        return this.selector.shouldComponentUpdate;
      };

      Connect.prototype.componentWillUnmount = function componentWillUnmount() {
        if (this.subscription) this.subscription.tryUnsubscribe();
        this.subscription = null;
        this.notifyNestedSubs = noop;
        this.store = null;
        this.selector.run = noop;
        this.selector.shouldComponentUpdate = false;
      };

      Connect.prototype.getWrappedInstance = function getWrappedInstance() {
        __WEBPACK_IMPORTED_MODULE_1_invariant___default()(withRef, 'To access the wrapped instance, you need to specify ' + ('{ withRef: true } in the options argument of the ' + methodName + '() call.'));
        return this.wrappedInstance;
      };

      Connect.prototype.setWrappedInstance = function setWrappedInstance(ref) {
        this.wrappedInstance = ref;
      };

      Connect.prototype.initSelector = function initSelector() {
        var sourceSelector = selectorFactory(this.store.dispatch, selectorFactoryOptions);
        this.selector = makeSelectorStateful(sourceSelector, this.store);
        this.selector.run(this.props);
      };

      Connect.prototype.initSubscription = function initSubscription() {
        if (!shouldHandleStateChanges) return;

        // parentSub's source should match where store came from: props vs. context. A component
        // connected to the store via props shouldn't use subscription from context, or vice versa.
        var parentSub = (this.propsMode ? this.props : this.context)[subscriptionKey];
        this.subscription = new __WEBPACK_IMPORTED_MODULE_3__utils_Subscription__["a" /* default */](this.store, parentSub, this.onStateChange.bind(this));

        // `notifyNestedSubs` is duplicated to handle the case where the component is  unmounted in
        // the middle of the notification loop, where `this.subscription` will then be null. An
        // extra null check every change can be avoided by copying the method onto `this` and then
        // replacing it with a no-op on unmount. This can probably be avoided if Subscription's
        // listeners logic is changed to not call listeners that have been unsubscribed in the
        // middle of the notification loop.
        this.notifyNestedSubs = this.subscription.notifyNestedSubs.bind(this.subscription);
      };

      Connect.prototype.onStateChange = function onStateChange() {
        this.selector.run(this.props);

        if (!this.selector.shouldComponentUpdate) {
          this.notifyNestedSubs();
        } else {
          this.componentDidUpdate = this.notifyNestedSubsOnComponentDidUpdate;
          this.setState(dummyState);
        }
      };

      Connect.prototype.notifyNestedSubsOnComponentDidUpdate = function notifyNestedSubsOnComponentDidUpdate() {
        // `componentDidUpdate` is conditionally implemented when `onStateChange` determines it
        // needs to notify nested subs. Once called, it unimplements itself until further state
        // changes occur. Doing it this way vs having a permanent `componentDidMount` that does
        // a boolean check every time avoids an extra method call most of the time, resulting
        // in some perf boost.
        this.componentDidUpdate = undefined;
        this.notifyNestedSubs();
      };

      Connect.prototype.isSubscribed = function isSubscribed() {
        return Boolean(this.subscription) && this.subscription.isSubscribed();
      };

      Connect.prototype.addExtraProps = function addExtraProps(props) {
        if (!withRef && !renderCountProp && !(this.propsMode && this.subscription)) return props;
        // make a shallow copy so that fields added don't leak to the original selector.
        // this is especially important for 'ref' since that's a reference back to the component
        // instance. a singleton memoized selector would then be holding a reference to the
        // instance, preventing the instance from being garbage collected, and that would be bad
        var withExtras = _extends({}, props);
        if (withRef) withExtras.ref = this.setWrappedInstance;
        if (renderCountProp) withExtras[renderCountProp] = this.renderCount++;
        if (this.propsMode && this.subscription) withExtras[subscriptionKey] = this.subscription;
        return withExtras;
      };

      Connect.prototype.render = function render() {
        var selector = this.selector;
        selector.shouldComponentUpdate = false;

        if (selector.error) {
          throw selector.error;
        } else {
          return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_react__["createElement"])(WrappedComponent, this.addExtraProps(selector.props));
        }
      };

      return Connect;
    }(__WEBPACK_IMPORTED_MODULE_2_react__["Component"]);

    Connect.WrappedComponent = WrappedComponent;
    Connect.displayName = displayName;
    Connect.childContextTypes = childContextTypes;
    Connect.contextTypes = contextTypes;
    Connect.propTypes = contextTypes;

    if (process.env.NODE_ENV !== 'production') {
      Connect.prototype.componentWillUpdate = function componentWillUpdate() {
        // We are hot reloading!
        if (this.version !== version) {
          this.version = version;
          this.initSelector();

          if (this.subscription) this.subscription.tryUnsubscribe();
          this.initSubscription();
          if (shouldHandleStateChanges) this.subscription.trySubscribe();
        }
      };
    }

    return __WEBPACK_IMPORTED_MODULE_0_hoist_non_react_statics___default()(Connect, WrappedComponent);
  };
}
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(0)))

/***/ }),
/* 90 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_verifyPlainObject__ = __webpack_require__(92);
/* harmony export (immutable) */ __webpack_exports__["b"] = wrapMapToPropsConstant;
/* unused harmony export getDependsOnOwnProps */
/* harmony export (immutable) */ __webpack_exports__["a"] = wrapMapToPropsFunc;


function wrapMapToPropsConstant(getConstant) {
  return function initConstantSelector(dispatch, options) {
    var constant = getConstant(dispatch, options);

    function constantSelector() {
      return constant;
    }
    constantSelector.dependsOnOwnProps = false;
    return constantSelector;
  };
}

// dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args
// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine
// whether mapToProps needs to be invoked when props have changed.
// 
// A length of one signals that mapToProps does not depend on props from the parent component.
// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and
// therefore not reporting its length accurately..
function getDependsOnOwnProps(mapToProps) {
  return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== undefined ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
}

// Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,
// this function wraps mapToProps in a proxy function which does several things:
// 
//  * Detects whether the mapToProps function being called depends on props, which
//    is used by selectorFactory to decide if it should reinvoke on props changes.
//    
//  * On first call, handles mapToProps if returns another function, and treats that
//    new function as the true mapToProps for subsequent calls.
//    
//  * On first call, verifies the first result is a plain object, in order to warn
//    the developer that their mapToProps function is not returning a valid result.
//    
function wrapMapToPropsFunc(mapToProps, methodName) {
  return function initProxySelector(dispatch, _ref) {
    var displayName = _ref.displayName;

    var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
      return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
    };

    // allow detectFactoryAndVerify to get ownProps
    proxy.dependsOnOwnProps = true;

    proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
      proxy.mapToProps = mapToProps;
      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
      var props = proxy(stateOrDispatch, ownProps);

      if (typeof props === 'function') {
        proxy.mapToProps = props;
        proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
        props = proxy(stateOrDispatch, ownProps);
      }

      if (process.env.NODE_ENV !== 'production') __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils_verifyPlainObject__["a" /* default */])(props, displayName, methodName);

      return props;
    };

    return proxy;
  };
}
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(0)))

/***/ }),
/* 91 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return subscriptionShape; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return storeShape; });


var subscriptionShape = __WEBPACK_IMPORTED_MODULE_0_react__["PropTypes"].shape({
  trySubscribe: __WEBPACK_IMPORTED_MODULE_0_react__["PropTypes"].func.isRequired,
  tryUnsubscribe: __WEBPACK_IMPORTED_MODULE_0_react__["PropTypes"].func.isRequired,
  notifyNestedSubs: __WEBPACK_IMPORTED_MODULE_0_react__["PropTypes"].func.isRequired,
  isSubscribed: __WEBPACK_IMPORTED_MODULE_0_react__["PropTypes"].func.isRequired
});

var storeShape = __WEBPACK_IMPORTED_MODULE_0_react__["PropTypes"].shape({
  subscribe: __WEBPACK_IMPORTED_MODULE_0_react__["PropTypes"].func.isRequired,
  dispatch: __WEBPACK_IMPORTED_MODULE_0_react__["PropTypes"].func.isRequired,
  getState: __WEBPACK_IMPORTED_MODULE_0_react__["PropTypes"].func.isRequired
});

/***/ }),
/* 92 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash_es_isPlainObject__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__warning__ = __webpack_require__(52);
/* harmony export (immutable) */ __webpack_exports__["a"] = verifyPlainObject;



function verifyPlainObject(value, displayName, methodName) {
  if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_lodash_es_isPlainObject__["a" /* default */])(value)) {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__warning__["a" /* default */])(methodName + '() in ' + displayName + ' must return a plain object. Instead received ' + value + '.');
  }
}

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.

var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

module.exports = REACT_ELEMENT_TYPE;

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */



var ReactCurrentOwner = __webpack_require__(11);
var ReactComponentTreeHook = __webpack_require__(7);
var ReactElement = __webpack_require__(15);

var checkReactTypeSpec = __webpack_require__(246);

var canDefineProperty = __webpack_require__(56);
var getIteratorFn = __webpack_require__(57);
var warning = __webpack_require__(2);

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = ReactCurrentOwner.current.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
    if (parentName) {
      info = ' Check the top-level render call using <' + parentName + '>.';
    }
  }
  return info;
}

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});

  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
  if (memoizer[currentComponentErrorInfo]) {
    return;
  }
  memoizer[currentComponentErrorInfo] = true;

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwner = '';
  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
  }

  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);
    // Entry iterators provide implicit keys.
    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  var componentClass = element.type;
  if (typeof componentClass !== 'function') {
    return;
  }
  var name = componentClass.displayName || componentClass.name;
  if (componentClass.propTypes) {
    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
  }
  if (typeof componentClass.getDefaultProps === 'function') {
    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
  }
}

var ReactElementValidator = {

  createElement: function (type, props, children) {
    var validType = typeof type === 'string' || typeof type === 'function';
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    if (!validType) {
      if (typeof type !== 'function' && typeof type !== 'string') {
        var info = '';
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
        }
        info += getDeclarationErrorAddendum();
        process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info) : void 0;
      }
    }

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    // Skip key warning if the type isn't valid since our key validation logic
    // doesn't expect a non-string/function type and can throw confusing errors.
    // We don't want exception behavior to differ between dev and prod.
    // (Rendering will throw with a helpful message and as soon as the type is
    // fixed, the key warnings will appear.)
    if (validType) {
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], type);
      }
    }

    validatePropTypes(element);

    return element;
  },

  createFactory: function (type) {
    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
    // Legacy hook TODO: Warn if this is accessed
    validatedFactory.type = type;

    if (process.env.NODE_ENV !== 'production') {
      if (canDefineProperty) {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function () {
            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
    }

    return validatedFactory;
  },

  cloneElement: function (element, props, children) {
    var newElement = ReactElement.cloneElement.apply(this, arguments);
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    return newElement;
  }

};

module.exports = ReactElementValidator;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var repeat = exports.repeat = function repeat(str, times) {
  return new Array(times + 1).join(str);
};

var pad = exports.pad = function pad(num, maxLength) {
  return repeat("0", maxLength - num.toString().length) + num;
};

var formatTime = exports.formatTime = function formatTime(time) {
  return pad(time.getHours(), 2) + ":" + pad(time.getMinutes(), 2) + ":" + pad(time.getSeconds(), 2) + "." + pad(time.getMilliseconds(), 3);
};

// Use performance API if it's available in order to get better precision
var timer = exports.timer = typeof performance !== "undefined" && performance !== null && typeof performance.now === "function" ? performance : Date;

/***/ }),
/* 97 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = compose;
/**
 * Composes single-argument functions from right to left. The rightmost
 * function can take multiple arguments as it provides the signature for
 * the resulting composite function.
 *
 * @param {...Function} funcs The functions to compose.
 * @returns {Function} A function obtained by composing the argument functions
 * from right to left. For example, compose(f, g, h) is identical to doing
 * (...args) => f(g(h(...args))).
 */

function compose() {
  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }

  if (funcs.length === 0) {
    return function (arg) {
      return arg;
    };
  }

  if (funcs.length === 1) {
    return funcs[0];
  }

  var last = funcs[funcs.length - 1];
  var rest = funcs.slice(0, -1);
  return function () {
    return rest.reduceRight(function (composed, f) {
      return f(composed);
    }, last.apply(undefined, arguments));
  };
}

/***/ }),
/* 98 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash_es_isPlainObject__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_symbol_observable__ = __webpack_require__(258);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_symbol_observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_symbol_observable__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return ActionTypes; });
/* harmony export (immutable) */ __webpack_exports__["a"] = createStore;



/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */
var ActionTypes = {
  INIT: '@@redux/INIT'
};

/**
 * Creates a Redux store that holds the state tree.
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} enhancer The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */
function createStore(reducer, preloadedState, enhancer) {
  var _ref2;

  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
    enhancer = preloadedState;
    preloadedState = undefined;
  }

  if (typeof enhancer !== 'undefined') {
    if (typeof enhancer !== 'function') {
      throw new Error('Expected the enhancer to be a function.');
    }

    return enhancer(createStore)(reducer, preloadedState);
  }

  if (typeof reducer !== 'function') {
    throw new Error('Expected the reducer to be a function.');
  }

  var currentReducer = reducer;
  var currentState = preloadedState;
  var currentListeners = [];
  var nextListeners = currentListeners;
  var isDispatching = false;

  function ensureCanMutateNextListeners() {
    if (nextListeners === currentListeners) {
      nextListeners = currentListeners.slice();
    }
  }

  /**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */
  function getState() {
    return currentState;
  }

  /**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */
  function subscribe(listener) {
    if (typeof listener !== 'function') {
      throw new Error('Expected listener to be a function.');
    }

    var isSubscribed = true;

    ensureCanMutateNextListeners();
    nextListeners.push(listener);

    return function unsubscribe() {
      if (!isSubscribed) {
        return;
      }

      isSubscribed = false;

      ensureCanMutateNextListeners();
      var index = nextListeners.indexOf(listener);
      nextListeners.splice(index, 1);
    };
  }

  /**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */
  function dispatch(action) {
    if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_lodash_es_isPlainObject__["a" /* default */])(action)) {
      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
    }

    if (typeof action.type === 'undefined') {
      throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
    }

    if (isDispatching) {
      throw new Error('Reducers may not dispatch actions.');
    }

    try {
      isDispatching = true;
      currentState = currentReducer(currentState, action);
    } finally {
      isDispatching = false;
    }

    var listeners = currentListeners = nextListeners;
    for (var i = 0; i < listeners.length; i++) {
      listeners[i]();
    }

    return action;
  }

  /**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */
  function replaceReducer(nextReducer) {
    if (typeof nextReducer !== 'function') {
      throw new Error('Expected the nextReducer to be a function.');
    }

    currentReducer = nextReducer;
    dispatch({ type: ActionTypes.INIT });
  }

  /**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/zenparsing/es-observable
   */
  function observable() {
    var _ref;

    var outerSubscribe = subscribe;
    return _ref = {
      /**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */
      subscribe: function subscribe(observer) {
        if (typeof observer !== 'object') {
          throw new TypeError('Expected the observer to be an object.');
        }

        function observeState() {
          if (observer.next) {
            observer.next(getState());
          }
        }

        observeState();
        var unsubscribe = outerSubscribe(observeState);
        return { unsubscribe: unsubscribe };
      }
    }, _ref[__WEBPACK_IMPORTED_MODULE_1_symbol_observable___default.a] = function () {
      return this;
    }, _ref;
  }

  // When a store is created, an "INIT" action is dispatched so that every
  // reducer returns their initial state. This effectively populates
  // the initial state tree.
  dispatch({ type: ActionTypes.INIT });

  return _ref2 = {
    dispatch: dispatch,
    subscribe: subscribe,
    getState: getState,
    replaceReducer: replaceReducer
  }, _ref2[__WEBPACK_IMPORTED_MODULE_1_symbol_observable___default.a] = observable, _ref2;
}

/***/ }),
/* 99 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__createStore__ = __webpack_require__(98);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__combineReducers__ = __webpack_require__(256);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__bindActionCreators__ = __webpack_require__(255);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__applyMiddleware__ = __webpack_require__(254);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__compose__ = __webpack_require__(97);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_warning__ = __webpack_require__(100);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "createStore", function() { return __WEBPACK_IMPORTED_MODULE_0__createStore__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "combineReducers", function() { return __WEBPACK_IMPORTED_MODULE_1__combineReducers__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "bindActionCreators", function() { return __WEBPACK_IMPORTED_MODULE_2__bindActionCreators__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "applyMiddleware", function() { return __WEBPACK_IMPORTED_MODULE_3__applyMiddleware__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "compose", function() { return __WEBPACK_IMPORTED_MODULE_4__compose__["a"]; });







/*
* This is a dummy function to check if the function name has been altered by minification.
* If the function has been minified and NODE_ENV !== 'production', warn the user.
*/
function isCrushed() {}

if (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_warning__["a" /* default */])('You are currently using minified code outside of NODE_ENV === \'production\'. ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) ' + 'to ensure you have the correct code for your production build.');
}


/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(0)))

/***/ }),
/* 100 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = warning;
/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */
function warning(message) {
  /* eslint-disable no-console */
  if (typeof console !== 'undefined' && typeof console.error === 'function') {
    console.error(message);
  }
  /* eslint-enable no-console */
  try {
    // This error was thrown as a convenience so that if you enable
    // "break on all exceptions" in your console,
    // it would pause the execution at this line.
    throw new Error(message);
    /* eslint-disable no-empty */
  } catch (e) {}
  /* eslint-enable no-empty */
}

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.NorwayMap = NorwayMap;

var _react = __webpack_require__(17);

var _react2 = _interopRequireDefault(_react);

var _norway_simple = __webpack_require__(264);

var _norway_simple2 = _interopRequireDefault(_norway_simple);

var _norway_original = __webpack_require__(263);

var _norway_original2 = _interopRequireDefault(_norway_original);

var _topojson = __webpack_require__(261);

var _d = __webpack_require__(62);

var _Map = __webpack_require__(112);

var _Map2 = _interopRequireDefault(_Map);

var _actions = __webpack_require__(58);

var _reactRedux = __webpack_require__(59);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function mapDispatchToProps(dispatch) {
	return { onClick: function onClick(Nr) {
			dispatch((0, _actions.selectArea)(Nr));
		} };
}

function mapStateToProps(state) {
	return { selected: state.selected };
}

console.log(_reactRedux.connect);

exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(NorwayMap);
function NorwayMap(props) {
	var width = props.width ? props.width : 300;
	var height = props.height ? props.height : 300;

	var projection = (0, _d.geoTransverseMercator)().rotate([-15, -65, 0]).translate([width / 2, height / 2]).scale(2000);

	var path = (0, _d.geoPath)().projection(projection);

	if (props.type == "original") {
		var norge = _norway_original2.default;
	} else {
		var norge = _norway_simple2.default;
	}

	if (props.object) {
		var areas = (0, _topojson.feature)(norge, norge.objects[props.object]).features;
	} else {
		var areas = (0, _topojson.feature)(norge, norge.objects.kommune).features;
	}

	if (props.fylke) {
		if (!props.object || props.object == 'kommune') {
			areas = areas.filter(function (area) {
				return area.properties.Fylke == props.fylke;
			});
		} else if (props.object == 'fylke') {
			areas = areas.filter(function (area) {
				return area.properties.Sted == props.fylke;
			});
		}
	} else if (props.region) {
		if (!props.object || props.object == 'kommune') {
			areas = areas.filter(function (area) {
				return area.properties.Region == props.region;
			});
		} else if (props.object == 'region') {
			areas = areas.filter(function (area) {
				return area.properties.Sted == props.fylke;
			});
		}
	} else if (props.kommune && (!props.object || props.object == 'kommune')) {
		areas = areas.filter(function (area) {
			return area.properties.Sted == props.kommune;
		});
	}

	return _react2.default.createElement(_Map2.default, {
		areas: areas,
		path: path,
		height: height,
		width: width,
		onClick: props.onClick,
		data: props.data
	});
}

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _redux = __webpack_require__(99);

var _reduxLogger = __webpack_require__(252);

var _reduxLogger2 = _interopRequireDefault(_reduxLogger);

var _reduxThunk = __webpack_require__(253);

var _reduxThunk2 = _interopRequireDefault(_reduxThunk);

var _reducer = __webpack_require__(113);

var _reducer2 = _interopRequireDefault(_reducer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var middelware = (0, _redux.applyMiddleware)(_reduxThunk2.default, (0, _reduxLogger2.default)());

exports.default = (0, _redux.createStore)(_reducer2.default, middelware);

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(171);


/***/ }),
/* 104 */
/***/ (function(module, exports) {

module.exports = {
	"1": 0.256684242,
	"2": -0.179457903,
	"3": -0.389476369,
	"4": -0.225024842,
	"5": -0.353288564,
	"6": 0.208592204,
	"7": 0.089654104,
	"8": 0.288037431,
	"9": 0.495638528,
	"10": 0.047594727,
	"11": -0.112746694,
	"12": 0.119775181,
	"14": 0.08620183,
	"15": 0.201113521,
	"16": 0.017044577,
	"17": 0.05973191,
	"18": 0.081268314,
	"19": -0.235734066,
	"20": 0.251002496,
	"101": 0.503266769,
	"104": 0.488341738,
	"105": -0.570894964,
	"106": 0.86684988,
	"111": 1.008260101,
	"118": 0.014726227,
	"119": 0.061612563,
	"121": 1.126070193,
	"122": -0.571502304,
	"123": 0.123570907,
	"124": -0.057553892,
	"125": -0.212500831,
	"127": -0.135036779,
	"128": 0.997553277,
	"135": 0.908368216,
	"136": 0.543001033,
	"137": 0.626718453,
	"138": -0.704509939,
	"211": 0.770903789,
	"213": -0.134487326,
	"214": 0.852843071,
	"215": -0.815184145,
	"216": -0.105463461,
	"217": -0.846153931,
	"219": -0.319189985,
	"220": -0.72382349,
	"221": 0.426093519,
	"226": -0.044114659,
	"227": -0.233166464,
	"228": -0.474678123,
	"229": -0.546235729,
	"230": 1.686357353,
	"231": -0.447303834,
	"233": -0.95793964,
	"234": -1.361607909,
	"235": 0.756437909,
	"236": 0.582793984,
	"237": 1.211521944,
	"238": 1.880559349,
	"239": 2.922176005,
	"301": -0.448289455,
	"402": -0.527655461,
	"403": 0.078180358,
	"412": -0.969993682,
	"415": -0.405110821,
	"417": -0.420388874,
	"418": -0.185704121,
	"419": 0.657791048,
	"420": -0.533654294,
	"423": -0.910326493,
	"425": -0.432342953,
	"426": -0.658764741,
	"427": 0.714630844,
	"428": -0.229427964,
	"429": -0.540345468,
	"430": -0.285594524,
	"432": 1.775329342,
	"434": -2.549911579,
	"436": -2.306410134,
	"437": 0.648394855,
	"438": -0.408151876,
	"439": 0.713212488,
	"441": -1.494268576,
	"501": -0.302608517,
	"502": -0.694401726,
	"511": -0.55720651,
	"512": 0.913509286,
	"513": -1.123826338,
	"514": -0.091010173,
	"515": 0.231310383,
	"516": 0.287528078,
	"517": -0.50092769,
	"519": -1.043576351,
	"520": 0.52421903,
	"521": -0.337360927,
	"522": -0.14471477,
	"528": 0.315509684,
	"529": -0.664337433,
	"532": 0.393247568,
	"533": -0.558872772,
	"534": -0.004802118,
	"536": -0.202335802,
	"538": -0.087485431,
	"540": -0.815804367,
	"541": -6.352539523,
	"542": -0.64498836,
	"543": -0.316543182,
	"544": 0.60943678,
	"545": -1.433694103,
	"602": 0.01006936,
	"604": 0.730351492,
	"605": 0.132248793,
	"612": -0.22953739,
	"615": 3.919817451,
	"616": 0.180963389,
	"617": -0.714401016,
	"618": 2.346861138,
	"619": -0.095314535,
	"620": 1.023997344,
	"621": 0.642947668,
	"622": 0.308054954,
	"623": 0.589984319,
	"624": -0.049535488,
	"625": 0.021107065,
	"626": 0.055358189,
	"627": 0.574135188,
	"628": 0.487068214,
	"631": 0.603752972,
	"632": 1.53366033,
	"633": 0.80689643,
	"701": 0.354231503,
	"702": -0.006399387,
	"704": -0.246761781,
	"706": 0.584811253,
	"709": 0.484455152,
	"711": -0.308012877,
	"713": 0.594106894,
	"714": 0.868771197,
	"716": -0.17823623,
	"719": -0.12689525,
	"720": -0.097071028,
	"722": -0.320860114,
	"723": -0.069991706,
	"728": -0.548161991,
	"805": 0.039057528,
	"806": -0.080062679,
	"807": 0.997956135,
	"811": -1.607132394,
	"814": -0.496322181,
	"815": 0.463224763,
	"817": 0.929236495,
	"819": -1.30272883,
	"821": 1.538304045,
	"822": -0.288427685,
	"826": 1.337248405,
	"827": 0.746747725,
	"828": -0.31830304,
	"829": 0.40245603,
	"830": 0.911164935,
	"831": 2.804727328,
	"833": 0.297793384,
	"834": 0.214031893,
	"901": 0.199361919,
	"904": 1.288396766,
	"906": -0.153555777,
	"911": -0.465921007,
	"912": 0.986977368,
	"914": -0.300156731,
	"919": 0.283497997,
	"926": 1.364888093,
	"928": 1.312594481,
	"929": 0.623703446,
	"935": -1.577851849,
	"937": 0.67519643,
	"938": 2.336736069,
	"940": 0.73984024,
	"941": -0.561814808,
	"1001": 0.127152574,
	"1002": 0.148601828,
	"1003": 0.42683873,
	"1004": 0.23137555,
	"1014": 0.442566457,
	"1017": -0.543252972,
	"1018": -0.488873214,
	"1021": -0.915415236,
	"1026": 1.472293038,
	"1027": -0.844321633,
	"1029": 0.559566421,
	"1032": 1.019996523,
	"1034": -0.484128688,
	"1037": -0.217232728,
	"1046": -0.901012396,
	"1101": -0.496472696,
	"1102": 0.163963966,
	"1103": -0.458077512,
	"1106": 0.318750791,
	"1111": -0.495016055,
	"1112": -0.532892134,
	"1114": -2.059038901,
	"1119": -1.11335957,
	"1120": -0.314970866,
	"1121": 0.129214441,
	"1122": 0.423827472,
	"1124": -0.101557083,
	"1127": 0.518547582,
	"1129": 2.008289122,
	"1130": 0.020121958,
	"1133": -1.202022674,
	"1134": -0.160642961,
	"1135": -0.211240326,
	"1141": 1.987890857,
	"1142": -0.0076167,
	"1144": -1.875107483,
	"1145": -0.265909078,
	"1146": -0.317572372,
	"1149": -0.661742565,
	"1151": -1.80074341,
	"1160": -0.295466227,
	"1201": -0.344520276,
	"1211": -0.316599649,
	"1216": -0.100491494,
	"1219": 0.06275032,
	"1221": -0.474550179,
	"1222": 1.080565896,
	"1223": 0.84152619,
	"1224": 0.214696504,
	"1227": 0.925441153,
	"1228": 0.298731246,
	"1231": 0.11759441,
	"1232": -1.76785301,
	"1233": 1.683822693,
	"1234": -1.284743124,
	"1235": 0.249887976,
	"1238": -0.459727566,
	"1241": 0.427509251,
	"1242": -0.025160211,
	"1243": 1.932567929,
	"1244": 1.434878765,
	"1245": 2.298405358,
	"1246": 0.314165448,
	"1247": 0.297541643,
	"1251": 1.458389477,
	"1252": 1.254574299,
	"1253": 0.508168774,
	"1256": -0.417171833,
	"1259": 1.010982613,
	"1260": 0.682300153,
	"1263": 0.264713879,
	"1264": -0.363739397,
	"1265": 4.606626031,
	"1266": -0.303395565,
	"1401": 0.314500004,
	"1411": 0.834344785,
	"1412": -0.325297807,
	"1413": -0.05254792,
	"1416": 0.828017214,
	"1417": 0.607874019,
	"1418": -0.044710074,
	"1419": -0.066626812,
	"1420": 0.876086848,
	"1421": 1.383794824,
	"1422": 0.629692451,
	"1424": -1.064055959,
	"1426": -0.737293242,
	"1428": 0.516260167,
	"1429": 0.180678637,
	"1430": -0.476057602,
	"1431": -0.33225657,
	"1432": -0.598293126,
	"1433": 1.784458237,
	"1438": -0.37948025,
	"1439": -0.438743991,
	"1441": 1.02726087,
	"1443": -0.073737481,
	"1444": -1.417592794,
	"1445": 0.730087539,
	"1449": -0.034342352,
	"1502": 0.490234195,
	"1504": -0.010376156,
	"1505": 0.017767022,
	"1511": 0.615264399,
	"1514": -1.840756782,
	"1515": 0.188011896,
	"1516": 0.697080969,
	"1517": 1.419457315,
	"1519": -0.009452577,
	"1520": 0.341894024,
	"1523": 0.093852391,
	"1524": 0.755294585,
	"1525": -0.041901444,
	"1526": -0.931448642,
	"1528": -0.304151583,
	"1529": 1.993744449,
	"1531": -0.032064785,
	"1532": 1.036169215,
	"1534": 0.48132319,
	"1535": -1.367715717,
	"1539": 1.246869622,
	"1543": 0.045042899,
	"1545": -0.078855722,
	"1546": 1.553101319,
	"1547": 0.972608822,
	"1548": -1.209702845,
	"1551": -0.18698703,
	"1554": 0.595595037,
	"1557": -0.141343694,
	"1560": 0.921572368,
	"1563": -0.126076364,
	"1566": -0.205307081,
	"1567": 1.038728703,
	"1571": 0.4847393,
	"1573": 0.739435151,
	"1576": 0.188494438,
	"1601": -0.131098695,
	"1612": 0.452745975,
	"1613": 0.335799863,
	"1617": 0.212936393,
	"1620": 2.062673659,
	"1621": -0.677783582,
	"1622": -1.322508028,
	"1624": 0.228798805,
	"1627": 0.947965391,
	"1630": 0.713932443,
	"1632": -1.119966184,
	"1633": -2.272978138,
	"1634": 0.474145159,
	"1635": -0.114747951,
	"1636": -0.492113118,
	"1638": -0.48738263,
	"1640": 0.80837359,
	"1644": 1.632073576,
	"1648": -1.00935868,
	"1653": -0.20596554,
	"1657": -0.581636263,
	"1662": -0.372667317,
	"1663": -0.041308423,
	"1664": 1.294419498,
	"1665": -1.136828618,
	"1702": 0.092962299,
	"1703": -0.371113366,
	"1711": -1.11923096,
	"1714": 0.382822791,
	"1717": -0.014268863,
	"1718": 0.285379522,
	"1719": -0.355585717,
	"1721": 0.047828279,
	"1724": -0.21178927,
	"1725": -0.81849548,
	"1736": 0.19928549,
	"1738": 0.379297914,
	"1739": 0.154589612,
	"1740": -1.755098799,
	"1742": -0.813633269,
	"1743": 0.66805676,
	"1744": 0.863098103,
	"1748": 0.925864006,
	"1749": -1.175042211,
	"1750": 0.55744562,
	"1751": 0.277715076,
	"1755": 0.475842878,
	"1756": -0.572735359,
	"1804": -0.197614337,
	"1805": -0.59865716,
	"1811": 0.593896394,
	"1812": -0.428477268,
	"1813": 0.4024234,
	"1815": 2.957545682,
	"1816": 0.872367498,
	"1818": 1.125365783,
	"1820": -0.514483119,
	"1822": 0.824542493,
	"1824": 0.325327139,
	"1825": 0.889491504,
	"1826": -5.168758238,
	"1827": 0.549655235,
	"1828": -1.141193571,
	"1832": -2.032489525,
	"1833": -0.39214284,
	"1834": -0.183782595,
	"1835": -1.723857049,
	"1836": 0.069064263,
	"1837": 0.368506422,
	"1838": 1.674987793,
	"1839": -1.688815186,
	"1840": -1.018937367,
	"1841": -0.503321982,
	"1845": 0.670651348,
	"1848": 2.045955398,
	"1849": 1.104577867,
	"1850": 0.015591422,
	"1851": 0.213966477,
	"1852": 0.908856983,
	"1853": 1.632255352,
	"1854": -0.631407786,
	"1856": 2.439522454,
	"1857": -0.786295542,
	"1859": -0.064862669,
	"1860": 0.509861921,
	"1865": 0.479741908,
	"1866": 0.762934045,
	"1867": 0.496726766,
	"1868": 0.17033188,
	"1870": 0.179900113,
	"1871": 1.018590762,
	"1874": 0.36014143,
	"1902": -0.516588956,
	"1903": -0.381512646,
	"1911": -0.821789258,
	"1913": 1.832746021,
	"1917": 1.359587963,
	"1919": -0.437592726,
	"1920": 4.574044512,
	"1922": -1.907427167,
	"1923": 0.234849664,
	"1924": -0.552854771,
	"1925": -0.581932598,
	"1926": 1.022375299,
	"1927": 0.035670349,
	"1928": 3.59469881,
	"1929": 1.0189134,
	"1931": 0.052970536,
	"1933": -0.367641713,
	"1936": 0.101992289,
	"1938": -0.759586355,
	"1939": -2.17541365,
	"1940": -1.167666606,
	"1941": 1.001213665,
	"1942": 0.924296828,
	"1943": 1.264591089,
	"2002": 1.248563809,
	"2003": -1.190038897,
	"2004": -0.410721622,
	"2011": 1.61542585,
	"2012": 0.003688428,
	"2014": -2.034307621,
	"2015": 3.210606149,
	"2017": -1.952187761,
	"2018": -1.119918481,
	"2019": 0.114863103,
	"2020": 1.258568133,
	"2021": -1.144853192,
	"2022": -0.9151862,
	"2023": 1.514833528,
	"2024": -0.933713176,
	"2025": 0.525163443,
	"2027": 4.778737786,
	"2028": -1.351558302,
	"2030": 1.028629975,
	"3001": 0.524733999,
	"3002": 0.043945629,
	"3003": 0.496514183,
	"3004": 0.32158746,
	"3005": -0.557024766,
	"3006": -0.397971019,
	"3007": -0.113388791,
	"3008": 0.658754152,
	"3009": -0.436433844,
	"3010": 0.066103863,
	"3011": -0.357810275,
	"3012": -0.428813346,
	"3013": 0.164558012,
	"3014": -0.3251209,
	"3015": -0.045947697,
	"3016": -0.373473392,
	"3017": 0.070335566,
	"3018": -0.176888248,
	"3019": -0.906461782,
	"3020": -0.033599856,
	"3021": 0.567871558,
	"3022": 0.749523823,
	"3023": 0.528883182,
	"3024": 0.044234888,
	"3025": -0.064182211,
	"3026": 0.558161544,
	"3027": 0.232338755,
	"3028": 0.027239492,
	"3029": 1.087481799,
	"3030": 0.477296241,
	"3031": 0.779061329,
	"3032": 0.4032731,
	"3033": 0.271287398,
	"3034": 0.006000096,
	"3035": 0.170396029,
	"3036": -0.667353053,
	"3037": 0.003187389,
	"3038": 0.125175832,
	"3039": -0.065342081,
	"3040": -0.266296776,
	"3041": 1.409184676,
	"3042": -0.039363203,
	"3043": 0.18717665,
	"3044": 0.261079918,
	"3045": 0.769442644,
	"3046": 0.06728239,
	"3047": 0.363712812,
	"3048": 0.402220271,
	"3049": 0.013061905,
	"3050": 0.106048178,
	"3051": -0.104870714,
	"3052": 0.192259253,
	"3053": 0.037383268,
	"3054": -0.094498399,
	"3055": 0.399278645,
	"3056": 0.31247341,
	"3057": 0.110240438,
	"3058": 0.890204099,
	"3059": 0.387551222,
	"3060": -0.392241271,
	"3061": -0.145754837,
	"3062": 0.806415862,
	"3063": 0.104091925,
	"3064": 0.004349389,
	"3065": -0.224711326,
	"3066": 0.597534808,
	"3067": -0.089923994,
	"3068": 0.59857427,
	"3069": 0.060537217,
	"3070": -0.378963824,
	"3071": -0.102386131,
	"3072": -0.58902828,
	"3073": -0.082556444,
	"3074": -0.331707349,
	"3075": 0.470543695,
	"3076": 0.725833624,
	"3077": 0.025369809,
	"3078": -0.217366753,
	"3079": -0.485834393,
	"3080": 0.053481046,
	"3081": -0.112513121,
	"3082": 0.440395062,
	"3083": 0.422791909,
	"3086": 0.066407717
};

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _util = __webpack_require__(34);

var _inject = __webpack_require__(106);

/* ::
import type { SelectorHandler } from './generate.js';
export type SheetDefinition = { [id:string]: any };
export type SheetDefinitions = SheetDefinition | SheetDefinition[];
type RenderFunction = () => string;
type Extension = {
    selectorHandler: SelectorHandler
};
export type MaybeSheetDefinition = SheetDefinition | false | null | void
*/

var StyleSheet = {
    create: function create(sheetDefinition /* : SheetDefinition */) {
        return (0, _util.mapObj)(sheetDefinition, function (_ref) {
            var _ref2 = _slicedToArray(_ref, 2);

            var key = _ref2[0];
            var val = _ref2[1];

            return [key, {
                // TODO(emily): Make a 'production' mode which doesn't prepend
                // the class name here, to make the generated CSS smaller.
                _name: key + '_' + (0, _util.hashObject)(val),
                _definition: val
            }];
        });
    },

    rehydrate: function rehydrate() {
        var renderedClassNames /* : string[] */ = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

        (0, _inject.addRenderedClassNames)(renderedClassNames);
    }
};

/**
 * Utilities for using Aphrodite server-side.
 */
var StyleSheetServer = {
    renderStatic: function renderStatic(renderFunc /* : RenderFunction */) {
        (0, _inject.reset)();
        (0, _inject.startBuffering)();
        var html = renderFunc();
        var cssContent = (0, _inject.flushToString)();

        return {
            html: html,
            css: {
                content: cssContent,
                renderedClassNames: (0, _inject.getRenderedClassNames)()
            }
        };
    }
};

/**
 * Utilities for using Aphrodite in tests.
 *
 * Not meant to be used in production.
 */
var StyleSheetTestUtils = {
    /**
     * Prevent styles from being injected into the DOM.
     *
     * This is useful in situations where you'd like to test rendering UI
     * components which use Aphrodite without any of the side-effects of
     * Aphrodite happening. Particularly useful for testing the output of
     * components when you have no DOM, e.g. testing in Node without a fake DOM.
     *
     * Should be paired with a subsequent call to
     * clearBufferAndResumeStyleInjection.
     */
    suppressStyleInjection: function suppressStyleInjection() {
        (0, _inject.reset)();
        (0, _inject.startBuffering)();
    },

    /**
     * Opposite method of preventStyleInject.
     */
    clearBufferAndResumeStyleInjection: function clearBufferAndResumeStyleInjection() {
        (0, _inject.reset)();
    }
};

/**
 * Generate the Aphrodite API exports, with given `selectorHandlers` and
 * `useImportant` state.
 */
var makeExports = function makeExports(useImportant, /* : boolean */
selectorHandlers /* : SelectorHandler[] */
) {
    return {
        StyleSheet: _extends({}, StyleSheet, {

            /**
             * Returns a version of the exports of Aphrodite (i.e. an object
             * with `css` and `StyleSheet` properties) which have some
             * extensions included.
             *
             * @param {Array.<Object>} extensions: An array of extensions to
             *     add to this instance of Aphrodite. Each object should have a
             *     single property on it, defining which kind of extension to
             *     add.
             * @param {SelectorHandler} [extensions[].selectorHandler]: A
             *     selector handler extension. See `defaultSelectorHandlers` in
             *     generate.js.
             *
             * @returns {Object} An object containing the exports of the new
             *     instance of Aphrodite.
             */
            extend: function extend(extensions /* : Extension[] */) {
                var extensionSelectorHandlers = extensions
                // Pull out extensions with a selectorHandler property
                .map(function (extension) {
                    return extension.selectorHandler;
                })
                // Remove nulls (i.e. extensions without a selectorHandler
                // property).
                .filter(function (handler) {
                    return handler;
                });

                return makeExports(useImportant, selectorHandlers.concat(extensionSelectorHandlers));
            }
        }),

        StyleSheetServer: StyleSheetServer,
        StyleSheetTestUtils: StyleSheetTestUtils,

        css: function css() /* : MaybeSheetDefinition[] */{
            for (var _len = arguments.length, styleDefinitions = Array(_len), _key = 0; _key < _len; _key++) {
                styleDefinitions[_key] = arguments[_key];
            }

            return (0, _inject.injectAndGetClassName)(useImportant, styleDefinitions, selectorHandlers);
        }
    };
};

module.exports = makeExports;

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, '__esModule', {
    value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _asap = __webpack_require__(110);

var _asap2 = _interopRequireDefault(_asap);

var _generate = __webpack_require__(60);

var _util = __webpack_require__(34);

/* ::
import type { SheetDefinition, SheetDefinitions } from './index.js';
import type { MaybeSheetDefinition } from './exports.js';
import type { SelectorHandler } from './generate.js';
*/

// The current <style> tag we are inserting into, or null if we haven't
// inserted anything yet. We could find this each time using
// `document.querySelector("style[data-aphrodite"])`, but holding onto it is
// faster.
var styleTag = null;

// Inject a string of styles into a <style> tag in the head of the document. This
// will automatically create a style tag and then continue to use it for
// multiple injections. It will also use a style tag with the `data-aphrodite`
// tag on it if that exists in the DOM. This could be used for e.g. reusing the
// same style tag that server-side rendering inserts.
var injectStyleTag = function injectStyleTag(cssContents /* : string */) {
    if (styleTag == null) {
        // Try to find a style tag with the `data-aphrodite` attribute first.
        styleTag = document.querySelector("style[data-aphrodite]");

        // If that doesn't work, generate a new style tag.
        if (styleTag == null) {
            // Taken from
            // http://stackoverflow.com/questions/524696/how-to-create-a-style-tag-with-javascript
            var head = document.head || document.getElementsByTagName('head')[0];
            styleTag = document.createElement('style');

            styleTag.type = 'text/css';
            styleTag.setAttribute("data-aphrodite", "");
            head.appendChild(styleTag);
        }
    }

    if (styleTag.styleSheet) {
        // $FlowFixMe: legacy Internet Explorer compatibility
        styleTag.styleSheet.cssText += cssContents;
    } else {
        styleTag.appendChild(document.createTextNode(cssContents));
    }
};

// Custom handlers for stringifying CSS values that have side effects
// (such as fontFamily, which can cause @font-face rules to be injected)
var stringHandlers = {
    // With fontFamily we look for objects that are passed in and interpret
    // them as @font-face rules that we need to inject. The value of fontFamily
    // can either be a string (as normal), an object (a single font face), or
    // an array of objects and strings.
    fontFamily: function fontFamily(val) {
        if (Array.isArray(val)) {
            return val.map(fontFamily).join(",");
        } else if (typeof val === "object") {
            injectStyleOnce(val.src, "@font-face", [val], false);
            return '"' + val.fontFamily + '"';
        } else {
            return val;
        }
    },

    // With animationName we look for an object that contains keyframes and
    // inject them as an `@keyframes` block, returning a uniquely generated
    // name. The keyframes object should look like
    //  animationName: {
    //    from: {
    //      left: 0,
    //      top: 0,
    //    },
    //    '50%': {
    //      left: 15,
    //      top: 5,
    //    },
    //    to: {
    //      left: 20,
    //      top: 20,
    //    }
    //  }
    // TODO(emily): `stringHandlers` doesn't let us rename the key, so I have
    // to use `animationName` here. Improve that so we can call this
    // `animation` instead of `animationName`.
    animationName: function animationName(val, selectorHandlers) {
        if (Array.isArray(val)) {
            return val.map(function (v) {
                return animationName(v, selectorHandlers);
            }).join(",");
        } else if (typeof val === "object") {
            // Generate a unique name based on the hash of the object. We can't
            // just use the hash because the name can't start with a number.
            // TODO(emily): this probably makes debugging hard, allow a custom
            // name?
            var _name = 'keyframe_' + (0, _util.hashObject)(val);

            // Since keyframes need 3 layers of nesting, we use `generateCSS` to
            // build the inner layers and wrap it in `@keyframes` ourselves.
            var finalVal = '@keyframes ' + _name + '{';
            Object.keys(val).forEach(function (key) {
                finalVal += (0, _generate.generateCSS)(key, [val[key]], selectorHandlers, stringHandlers, false);
            });
            finalVal += '}';

            injectGeneratedCSSOnce(_name, finalVal);

            return _name;
        } else {
            return val;
        }
    }
};

// This is a map from Aphrodite's generated class names to `true` (acting as a
// set of class names)
var alreadyInjected = {};

// This is the buffer of styles which have not yet been flushed.
var injectionBuffer = "";

// A flag to tell if we are already buffering styles. This could happen either
// because we scheduled a flush call already, so newly added styles will
// already be flushed, or because we are statically buffering on the server.
var isBuffering = false;

var injectGeneratedCSSOnce = function injectGeneratedCSSOnce(key, generatedCSS) {
    if (!alreadyInjected[key]) {
        if (!isBuffering) {
            // We should never be automatically buffering on the server (or any
            // place without a document), so guard against that.
            if (typeof document === "undefined") {
                throw new Error("Cannot automatically buffer without a document");
            }

            // If we're not already buffering, schedule a call to flush the
            // current styles.
            isBuffering = true;
            (0, _asap2['default'])(flushToStyleTag);
        }

        injectionBuffer += generatedCSS;
        alreadyInjected[key] = true;
    }
};

var injectStyleOnce = function injectStyleOnce(key, /* : string */
selector, /* : string */
definitions, /* : SheetDefinition[] */
useImportant /* : boolean */
) {
    var selectorHandlers /* : SelectorHandler[] */ = arguments.length <= 4 || arguments[4] === undefined ? [] : arguments[4];

    if (!alreadyInjected[key]) {
        var generated = (0, _generate.generateCSS)(selector, definitions, selectorHandlers, stringHandlers, useImportant);

        injectGeneratedCSSOnce(key, generated);
    }
};

exports.injectStyleOnce = injectStyleOnce;
var reset = function reset() {
    injectionBuffer = "";
    alreadyInjected = {};
    isBuffering = false;
    styleTag = null;
};

exports.reset = reset;
var startBuffering = function startBuffering() {
    if (isBuffering) {
        throw new Error("Cannot buffer while already buffering");
    }
    isBuffering = true;
};

exports.startBuffering = startBuffering;
var flushToString = function flushToString() {
    isBuffering = false;
    var ret = injectionBuffer;
    injectionBuffer = "";
    return ret;
};

exports.flushToString = flushToString;
var flushToStyleTag = function flushToStyleTag() {
    var cssContent = flushToString();
    if (cssContent.length > 0) {
        injectStyleTag(cssContent);
    }
};

exports.flushToStyleTag = flushToStyleTag;
var getRenderedClassNames = function getRenderedClassNames() {
    return Object.keys(alreadyInjected);
};

exports.getRenderedClassNames = getRenderedClassNames;
var addRenderedClassNames = function addRenderedClassNames(classNames /* : string[] */) {
    classNames.forEach(function (className) {
        alreadyInjected[className] = true;
    });
};

exports.addRenderedClassNames = addRenderedClassNames;
/**
 * Inject styles associated with the passed style definition objects, and return
 * an associated CSS class name.
 *
 * @param {boolean} useImportant If true, will append !important to generated
 *     CSS output. e.g. {color: red} -> "color: red !important".
 * @param {(Object|Object[])[]} styleDefinitions style definition objects, or
 *     arbitrarily nested arrays of them, as returned as properties of the
 *     return value of StyleSheet.create().
 */
var injectAndGetClassName = function injectAndGetClassName(useImportant, /* : boolean */
styleDefinitions, /* : MaybeSheetDefinition[] */
selectorHandlers /* : SelectorHandler[] */
) /* : string */{
    styleDefinitions = (0, _util.flattenDeep)(styleDefinitions);

    var classNameBits = [];
    var definitionBits = [];
    for (var i = 0; i < styleDefinitions.length; i += 1) {
        // Filter out falsy values from the input, to allow for
        // `css(a, test && c)`
        if (styleDefinitions[i]) {
            classNameBits.push(styleDefinitions[i]._name);
            definitionBits.push(styleDefinitions[i]._definition);
        }
    }
    // Break if there aren't any valid styles.
    if (classNameBits.length === 0) {
        return "";
    }
    var className = classNameBits.join("-o_O-");

    injectStyleOnce(className, '.' + className, definitionBits, useImportant, selectorHandlers);

    return className;
};
exports.injectAndGetClassName = injectAndGetClassName;

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Module with the same interface as the core aphrodite module,
// except that styles injected do not automatically have !important
// appended to them.


Object.defineProperty(exports, '__esModule', {
    value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _generate = __webpack_require__(60);

var _exports2 = __webpack_require__(105);

var _exports3 = _interopRequireDefault(_exports2);

var useImportant = false; // Don't add !important to style definitions
exports['default'] = (0, _exports3['default'])(useImportant, _generate.defaultSelectorHandlers);
module.exports = exports['default'];

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

var calc = __webpack_require__(133)
var crossFade = __webpack_require__(134)
var cursor = __webpack_require__(135)
var filter = __webpack_require__(136)
var flex = __webpack_require__(137)
var flexboxIE = __webpack_require__(138)
var flexboxOld = __webpack_require__(139)
var gradient = __webpack_require__(140)
var imageSet = __webpack_require__(141)
var position = __webpack_require__(142)
var sizing = __webpack_require__(143)
var transition = __webpack_require__(144)

module.exports =  {
  plugins: [calc,crossFade,cursor,filter,flex,flexboxIE,flexboxOld,gradient,imageSet,position,sizing,transition],
  prefixMap: {"transform":["Webkit","ms"],"transformOrigin":["Webkit","ms"],"transformOriginX":["Webkit","ms"],"transformOriginY":["Webkit","ms"],"backfaceVisibility":["Webkit"],"perspective":["Webkit"],"perspectiveOrigin":["Webkit"],"transformStyle":["Webkit"],"transformOriginZ":["Webkit"],"animation":["Webkit"],"animationDelay":["Webkit"],"animationDirection":["Webkit"],"animationFillMode":["Webkit"],"animationDuration":["Webkit"],"animationIterationCount":["Webkit"],"animationName":["Webkit"],"animationPlayState":["Webkit"],"animationTimingFunction":["Webkit"],"appearance":["Webkit","Moz"],"userSelect":["Webkit","Moz","ms"],"fontKerning":["Webkit"],"textEmphasisPosition":["Webkit"],"textEmphasis":["Webkit"],"textEmphasisStyle":["Webkit"],"textEmphasisColor":["Webkit"],"boxDecorationBreak":["Webkit"],"clipPath":["Webkit"],"maskImage":["Webkit"],"maskMode":["Webkit"],"maskRepeat":["Webkit"],"maskPosition":["Webkit"],"maskClip":["Webkit"],"maskOrigin":["Webkit"],"maskSize":["Webkit"],"maskComposite":["Webkit"],"mask":["Webkit"],"maskBorderSource":["Webkit"],"maskBorderMode":["Webkit"],"maskBorderSlice":["Webkit"],"maskBorderWidth":["Webkit"],"maskBorderOutset":["Webkit"],"maskBorderRepeat":["Webkit"],"maskBorder":["Webkit"],"maskType":["Webkit"],"textDecorationStyle":["Webkit","Moz"],"textDecorationSkip":["Webkit","Moz"],"textDecorationLine":["Webkit","Moz"],"textDecorationColor":["Webkit","Moz"],"filter":["Webkit"],"fontFeatureSettings":["Webkit","Moz"],"breakAfter":["Webkit","Moz","ms"],"breakBefore":["Webkit","Moz","ms"],"breakInside":["Webkit","Moz","ms"],"columnCount":["Webkit","Moz"],"columnFill":["Webkit","Moz"],"columnGap":["Webkit","Moz"],"columnRule":["Webkit","Moz"],"columnRuleColor":["Webkit","Moz"],"columnRuleStyle":["Webkit","Moz"],"columnRuleWidth":["Webkit","Moz"],"columns":["Webkit","Moz"],"columnSpan":["Webkit","Moz"],"columnWidth":["Webkit","Moz"],"flex":["Webkit","ms"],"flexBasis":["Webkit"],"flexDirection":["Webkit","ms"],"flexGrow":["Webkit"],"flexFlow":["Webkit","ms"],"flexShrink":["Webkit"],"flexWrap":["Webkit","ms"],"alignContent":["Webkit"],"alignItems":["Webkit"],"alignSelf":["Webkit"],"justifyContent":["Webkit"],"order":["Webkit"],"transitionDelay":["Webkit"],"transitionDuration":["Webkit"],"transitionProperty":["Webkit"],"transitionTimingFunction":["Webkit"],"backdropFilter":["Webkit"],"scrollSnapType":["Webkit","ms"],"scrollSnapPointsX":["Webkit","ms"],"scrollSnapPointsY":["Webkit","ms"],"scrollSnapDestination":["Webkit","ms"],"scrollSnapCoordinate":["Webkit","ms"],"shapeImageThreshold":["Webkit"],"shapeImageMargin":["Webkit"],"shapeImageOutside":["Webkit"],"hyphens":["Webkit","Moz","ms"],"flowInto":["Webkit","ms"],"flowFrom":["Webkit","ms"],"regionFragment":["Webkit","ms"],"boxSizing":["Moz"],"textAlignLast":["Moz"],"tabSize":["Moz"],"wrapFlow":["ms"],"wrapThrough":["ms"],"wrapMargin":["ms"],"touchAction":["ms"],"gridTemplateColumns":["ms"],"gridTemplateRows":["ms"],"gridTemplateAreas":["ms"],"gridTemplate":["ms"],"gridAutoColumns":["ms"],"gridAutoRows":["ms"],"gridAutoFlow":["ms"],"grid":["ms"],"gridRowStart":["ms"],"gridColumnStart":["ms"],"gridRowEnd":["ms"],"gridRow":["ms"],"gridColumn":["ms"],"gridColumnEnd":["ms"],"gridColumnGap":["ms"],"gridRowGap":["ms"],"gridArea":["ms"],"gridGap":["ms"],"textSizeAdjust":["Webkit","ms"],"borderImage":["Webkit"],"borderImageOutset":["Webkit"],"borderImageRepeat":["Webkit"],"borderImageSlice":["Webkit"],"borderImageSource":["Webkit"],"borderImageWidth":["Webkit"]}
}

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(107);


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// rawAsap provides everything we need except exception management.
var rawAsap = __webpack_require__(111);
// RawTasks are recycled to reduce GC churn.
var freeTasks = [];
// We queue errors to ensure they are thrown in right order (FIFO).
// Array-as-queue is good enough here, since we are just dealing with exceptions.
var pendingErrors = [];
var requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);

function throwFirstError() {
    if (pendingErrors.length) {
        throw pendingErrors.shift();
    }
}

/**
 * Calls a task as soon as possible after returning, in its own event, with priority
 * over other events like animation, reflow, and repaint. An error thrown from an
 * event will not interrupt, nor even substantially slow down the processing of
 * other events, but will be rather postponed to a lower priority event.
 * @param {{call}} task A callable object, typically a function that takes no
 * arguments.
 */
module.exports = asap;
function asap(task) {
    var rawTask;
    if (freeTasks.length) {
        rawTask = freeTasks.pop();
    } else {
        rawTask = new RawTask();
    }
    rawTask.task = task;
    rawAsap(rawTask);
}

// We wrap tasks with recyclable task objects.  A task object implements
// `call`, just like a function.
function RawTask() {
    this.task = null;
}

// The sole purpose of wrapping the task is to catch the exception and recycle
// the task object after its single use.
RawTask.prototype.call = function () {
    try {
        this.task.call();
    } catch (error) {
        if (asap.onerror) {
            // This hook exists purely for testing purposes.
            // Its name will be periodically randomized to break any code that
            // depends on its existence.
            asap.onerror(error);
        } else {
            // In a web browser, exceptions are not fatal. However, to avoid
            // slowing down the queue of pending tasks, we rethrow the error in a
            // lower priority turn.
            pendingErrors.push(error);
            requestErrorThrow();
        }
    } finally {
        this.task = null;
        freeTasks[freeTasks.length] = this;
    }
};


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

// Use the fastest means possible to execute a task in its own turn, with
// priority over other events including IO, animation, reflow, and redraw
// events in browsers.
//
// An exception thrown by a task will permanently interrupt the processing of
// subsequent tasks. The higher level `asap` function ensures that if an
// exception is thrown by a task, that the task queue will continue flushing as
// soon as possible, but if you use `rawAsap` directly, you are responsible to
// either ensure that no exceptions are thrown from your task, or to manually
// call `rawAsap.requestFlush` if an exception is thrown.
module.exports = rawAsap;
function rawAsap(task) {
    if (!queue.length) {
        requestFlush();
        flushing = true;
    }
    // Equivalent to push, but avoids a function call.
    queue[queue.length] = task;
}

var queue = [];
// Once a flush has been requested, no further calls to `requestFlush` are
// necessary until the next `flush` completes.
var flushing = false;
// `requestFlush` is an implementation-specific method that attempts to kick
// off a `flush` event as quickly as possible. `flush` will attempt to exhaust
// the event queue before yielding to the browser's own event loop.
var requestFlush;
// The position of the next task to execute in the task queue. This is
// preserved between calls to `flush` so that it can be resumed if
// a task throws an exception.
var index = 0;
// If a task schedules additional tasks recursively, the task queue can grow
// unbounded. To prevent memory exhaustion, the task queue will periodically
// truncate already-completed tasks.
var capacity = 1024;

// The flush function processes all tasks that have been scheduled with
// `rawAsap` unless and until one of those tasks throws an exception.
// If a task throws an exception, `flush` ensures that its state will remain
// consistent and will resume where it left off when called again.
// However, `flush` does not make any arrangements to be called again if an
// exception is thrown.
function flush() {
    while (index < queue.length) {
        var currentIndex = index;
        // Advance the index before calling the task. This ensures that we will
        // begin flushing on the next task the task throws an error.
        index = index + 1;
        queue[currentIndex].call();
        // Prevent leaking memory for long chains of recursive calls to `asap`.
        // If we call `asap` within tasks scheduled by `asap`, the queue will
        // grow, but to avoid an O(n) walk for every task we execute, we don't
        // shift tasks off the queue after they have been executed.
        // Instead, we periodically shift 1024 tasks off the queue.
        if (index > capacity) {
            // Manually shift all values starting at the index back to the
            // beginning of the queue.
            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
                queue[scan] = queue[scan + index];
            }
            queue.length -= index;
            index = 0;
        }
    }
    queue.length = 0;
    index = 0;
    flushing = false;
}

// `requestFlush` is implemented using a strategy based on data collected from
// every available SauceLabs Selenium web driver worker at time of writing.
// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593

// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that
// have WebKitMutationObserver but not un-prefixed MutationObserver.
// Must use `global` or `self` instead of `window` to work in both frames and web
// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.

/* globals self */
var scope = typeof global !== "undefined" ? global : self;
var BrowserMutationObserver = scope.MutationObserver || scope.WebKitMutationObserver;

// MutationObservers are desirable because they have high priority and work
// reliably everywhere they are implemented.
// They are implemented in all modern browsers.
//
// - Android 4-4.3
// - Chrome 26-34
// - Firefox 14-29
// - Internet Explorer 11
// - iPad Safari 6-7.1
// - iPhone Safari 7-7.1
// - Safari 6-7
if (typeof BrowserMutationObserver === "function") {
    requestFlush = makeRequestCallFromMutationObserver(flush);

// MessageChannels are desirable because they give direct access to the HTML
// task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera
// 11-12, and in web workers in many engines.
// Although message channels yield to any queued rendering and IO tasks, they
// would be better than imposing the 4ms delay of timers.
// However, they do not work reliably in Internet Explorer or Safari.

// Internet Explorer 10 is the only browser that has setImmediate but does
// not have MutationObservers.
// Although setImmediate yields to the browser's renderer, it would be
// preferrable to falling back to setTimeout since it does not have
// the minimum 4ms penalty.
// Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and
// Desktop to a lesser extent) that renders both setImmediate and
// MessageChannel useless for the purposes of ASAP.
// https://github.com/kriskowal/q/issues/396

// Timers are implemented universally.
// We fall back to timers in workers in most engines, and in foreground
// contexts in the following browsers.
// However, note that even this simple case requires nuances to operate in a
// broad spectrum of browsers.
//
// - Firefox 3-13
// - Internet Explorer 6-9
// - iPad Safari 4.3
// - Lynx 2.8.7
} else {
    requestFlush = makeRequestCallFromTimer(flush);
}

// `requestFlush` requests that the high priority event queue be flushed as
// soon as possible.
// This is useful to prevent an error thrown in a task from stalling the event
// queue if the exception handled by Node.js’s
// `process.on("uncaughtException")` or by a domain.
rawAsap.requestFlush = requestFlush;

// To request a high priority event, we induce a mutation observer by toggling
// the text of a text node between "1" and "-1".
function makeRequestCallFromMutationObserver(callback) {
    var toggle = 1;
    var observer = new BrowserMutationObserver(callback);
    var node = document.createTextNode("");
    observer.observe(node, {characterData: true});
    return function requestCall() {
        toggle = -toggle;
        node.data = toggle;
    };
}

// The message channel technique was discovered by Malte Ubl and was the
// original foundation for this library.
// http://www.nonblocking.io/2011/06/windownexttick.html

// Safari 6.0.5 (at least) intermittently fails to create message ports on a
// page's first load. Thankfully, this version of Safari supports
// MutationObservers, so we don't need to fall back in that case.

// function makeRequestCallFromMessageChannel(callback) {
//     var channel = new MessageChannel();
//     channel.port1.onmessage = callback;
//     return function requestCall() {
//         channel.port2.postMessage(0);
//     };
// }

// For reasons explained above, we are also unable to use `setImmediate`
// under any circumstances.
// Even if we were, there is another bug in Internet Explorer 10.
// It is not sufficient to assign `setImmediate` to `requestFlush` because
// `setImmediate` must be called *by name* and therefore must be wrapped in a
// closure.
// Never forget.

// function makeRequestCallFromSetImmediate(callback) {
//     return function requestCall() {
//         setImmediate(callback);
//     };
// }

// Safari 6.0 has a problem where timers will get lost while the user is
// scrolling. This problem does not impact ASAP because Safari 6.0 supports
// mutation observers, so that implementation is used instead.
// However, if we ever elect to use timers in Safari, the prevalent work-around
// is to add a scroll event listener that calls for a flush.

// `setTimeout` does not call the passed callback if the delay is less than
// approximately 7 in web workers in Firefox 8 through 18, and sometimes not
// even then.

function makeRequestCallFromTimer(callback) {
    return function requestCall() {
        // We dispatch a timeout with a specified delay of 0 for engines that
        // can reliably accommodate that request. This will usually be snapped
        // to a 4 milisecond delay, but once we're flushing, there's no delay
        // between events.
        var timeoutHandle = setTimeout(handleTimer, 0);
        // However, since this timer gets frequently dropped in Firefox
        // workers, we enlist an interval handle that will try to fire
        // an event 20 times per second until it succeeds.
        var intervalHandle = setInterval(handleTimer, 50);

        function handleTimer() {
            // Whichever timer succeeds will cancel both timers and
            // execute the callback.
            clearTimeout(timeoutHandle);
            clearInterval(intervalHandle);
            callback();
        }
    };
}

// This is for `asap.js` only.
// Its name will be periodically randomized to break any code that depends on
// its existence.
rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;

// ASAP was originally a nextTick shim included in Q. This was factored out
// into this ASAP package. It was later adapted to RSVP which made further
// amendments. These decisions, particularly to marginalize MessageChannel and
// to capture the MutationObserver implementation in a closure, were integrated
// back into ASAP proper.
// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(33)))

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = Map;

var _react = __webpack_require__(17);

var _react2 = _interopRequireDefault(_react);

var _d = __webpack_require__(62);

var _noImportant = __webpack_require__(109);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function computeViewBox(areas, path) {
	var bounds = areas.map(function (area) {
		return path.bounds(area);
	});

	var xmin = [],
	    xmax = [],
	    ymin = [],
	    ymax = [];
	for (var i = 0; i < bounds.length; i++) {
		xmin[i] = bounds[i][0][0];
		ymin[i] = bounds[i][0][1];
		xmax[i] = bounds[i][1][0];
		ymax[i] = bounds[i][1][1];
	}
	xmin = (0, _d.min)(xmin);
	xmax = (0, _d.max)(xmax);
	ymin = (0, _d.min)(ymin);
	ymax = (0, _d.max)(ymax);

	return xmin + " " + ymin + " " + (xmax - xmin) + " " + (ymax - ymin);
}

function Map(props) {
	var height = props.height,
	    width = props.width;
	var areas = props.areas,
	    path = props.path;

	if (props.data) {
		var array = Object.keys(props.data).map(function (key) {
			return props.data[key];
		});
		var scale = (0, _d.scaleQuantile)().domain(array).range(["#CA0020", "#F4A582", "#dedede", "#92C5DE", "#0571B0"]);
	} else {
		var scale = function scale() {
			return false;
		};
	}
	var getColor = function getColor(Nr) {
		if (props.data) {
			return scale(props.data[Nr]);
		} else {
			return false;
		}
	};

	return _react2.default.createElement(
		'svg',
		{
			height: height,
			width: width,
			style: { border: "1px solid black" },
			viewBox: computeViewBox(areas, path)
		},
		areas.map(function (area) {
			return _react2.default.createElement(
				'path',
				{
					d: path(area),
					className: (0, _noImportant.css)(styles.path),
					key: area.properties.Nr,
					onClick: function onClick() {
						return props.onClick(area.properties.Sted);
					},
					style: { fill: getColor(area.properties.Nr) }
				},
				_react2.default.createElement(
					'title',
					{ className: (0, _noImportant.css)(styles.tooltip) },
					area.properties.Sted
				)
			);
		})
	);
}

var styles = _noImportant.StyleSheet.create({
	path: {
		fill: "grey",
		stroke: "black",
		strokeWidth: "0.5px",
		vectorEffect: "non-scaling-stroke",
		':hover': {
			strokeWidth: "1px",
			fillOpacity: 0.5
		}
	},
	tooltip: {
		fill: "white",
		strokeWidth: "2px"
	}

});

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = reducer;
function reducer() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { selected: null };
	var action = arguments[1];

	switch (action.type) {
		case "SELECT_AREA":
			{
				return _extends({}, state, { selected: action.payload });
			}
	}
	return state;
}

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = hyphenateProperty;

var _hyphenateStyleName = __webpack_require__(131);

var _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function hyphenateProperty(property) {
  return (0, _hyphenateStyleName2.default)(property);
}
module.exports = exports['default'];

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * deep-diff.
 * Licensed under the MIT License.
 */
;(function(root, factory) {
  'use strict';
  if (true) {
    // AMD. Register as an anonymous module.
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
      return factory();
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if (typeof exports === 'object') {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    module.exports = factory();
  } else {
    // Browser globals (root is window)
    root.DeepDiff = factory();
  }
}(this, function(undefined) {
  'use strict';

  var $scope, conflict, conflictResolution = [];
  if (typeof global === 'object' && global) {
    $scope = global;
  } else if (typeof window !== 'undefined') {
    $scope = window;
  } else {
    $scope = {};
  }
  conflict = $scope.DeepDiff;
  if (conflict) {
    conflictResolution.push(
      function() {
        if ('undefined' !== typeof conflict && $scope.DeepDiff === accumulateDiff) {
          $scope.DeepDiff = conflict;
          conflict = undefined;
        }
      });
  }

  // nodejs compatible on server side and in the browser.
  function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  }

  function Diff(kind, path) {
    Object.defineProperty(this, 'kind', {
      value: kind,
      enumerable: true
    });
    if (path && path.length) {
      Object.defineProperty(this, 'path', {
        value: path,
        enumerable: true
      });
    }
  }

  function DiffEdit(path, origin, value) {
    DiffEdit.super_.call(this, 'E', path);
    Object.defineProperty(this, 'lhs', {
      value: origin,
      enumerable: true
    });
    Object.defineProperty(this, 'rhs', {
      value: value,
      enumerable: true
    });
  }
  inherits(DiffEdit, Diff);

  function DiffNew(path, value) {
    DiffNew.super_.call(this, 'N', path);
    Object.defineProperty(this, 'rhs', {
      value: value,
      enumerable: true
    });
  }
  inherits(DiffNew, Diff);

  function DiffDeleted(path, value) {
    DiffDeleted.super_.call(this, 'D', path);
    Object.defineProperty(this, 'lhs', {
      value: value,
      enumerable: true
    });
  }
  inherits(DiffDeleted, Diff);

  function DiffArray(path, index, item) {
    DiffArray.super_.call(this, 'A', path);
    Object.defineProperty(this, 'index', {
      value: index,
      enumerable: true
    });
    Object.defineProperty(this, 'item', {
      value: item,
      enumerable: true
    });
  }
  inherits(DiffArray, Diff);

  function arrayRemove(arr, from, to) {
    var rest = arr.slice((to || from) + 1 || arr.length);
    arr.length = from < 0 ? arr.length + from : from;
    arr.push.apply(arr, rest);
    return arr;
  }

  function realTypeOf(subject) {
    var type = typeof subject;
    if (type !== 'object') {
      return type;
    }

    if (subject === Math) {
      return 'math';
    } else if (subject === null) {
      return 'null';
    } else if (Array.isArray(subject)) {
      return 'array';
    } else if (Object.prototype.toString.call(subject) === '[object Date]') {
      return 'date';
    } else if (typeof subject.toString !== 'undefined' && /^\/.*\//.test(subject.toString())) {
      return 'regexp';
    }
    return 'object';
  }

  function deepDiff(lhs, rhs, changes, prefilter, path, key, stack) {
    path = path || [];
    var currentPath = path.slice(0);
    if (typeof key !== 'undefined') {
      if (prefilter) {
        if (typeof(prefilter) === 'function' && prefilter(currentPath, key)) { return; }
        else if (typeof(prefilter) === 'object') {
          if (prefilter.prefilter && prefilter.prefilter(currentPath, key)) { return; }
          if (prefilter.normalize) {
            var alt = prefilter.normalize(currentPath, key, lhs, rhs);
            if (alt) {
              lhs = alt[0];
              rhs = alt[1];
            }
          }
        }
      }
      currentPath.push(key);
    }

    // Use string comparison for regexes
    if (realTypeOf(lhs) === 'regexp' && realTypeOf(rhs) === 'regexp') {
      lhs = lhs.toString();
      rhs = rhs.toString();
    }

    var ltype = typeof lhs;
    var rtype = typeof rhs;
    if (ltype === 'undefined') {
      if (rtype !== 'undefined') {
        changes(new DiffNew(currentPath, rhs));
      }
    } else if (rtype === 'undefined') {
      changes(new DiffDeleted(currentPath, lhs));
    } else if (realTypeOf(lhs) !== realTypeOf(rhs)) {
      changes(new DiffEdit(currentPath, lhs, rhs));
    } else if (Object.prototype.toString.call(lhs) === '[object Date]' && Object.prototype.toString.call(rhs) === '[object Date]' && ((lhs - rhs) !== 0)) {
      changes(new DiffEdit(currentPath, lhs, rhs));
    } else if (ltype === 'object' && lhs !== null && rhs !== null) {
      stack = stack || [];
      if (stack.indexOf(lhs) < 0) {
        stack.push(lhs);
        if (Array.isArray(lhs)) {
          var i, len = lhs.length;
          for (i = 0; i < lhs.length; i++) {
            if (i >= rhs.length) {
              changes(new DiffArray(currentPath, i, new DiffDeleted(undefined, lhs[i])));
            } else {
              deepDiff(lhs[i], rhs[i], changes, prefilter, currentPath, i, stack);
            }
          }
          while (i < rhs.length) {
            changes(new DiffArray(currentPath, i, new DiffNew(undefined, rhs[i++])));
          }
        } else {
          var akeys = Object.keys(lhs);
          var pkeys = Object.keys(rhs);
          akeys.forEach(function(k, i) {
            var other = pkeys.indexOf(k);
            if (other >= 0) {
              deepDiff(lhs[k], rhs[k], changes, prefilter, currentPath, k, stack);
              pkeys = arrayRemove(pkeys, other);
            } else {
              deepDiff(lhs[k], undefined, changes, prefilter, currentPath, k, stack);
            }
          });
          pkeys.forEach(function(k) {
            deepDiff(undefined, rhs[k], changes, prefilter, currentPath, k, stack);
          });
        }
        stack.length = stack.length - 1;
      }
    } else if (lhs !== rhs) {
      if (!(ltype === 'number' && isNaN(lhs) && isNaN(rhs))) {
        changes(new DiffEdit(currentPath, lhs, rhs));
      }
    }
  }

  function accumulateDiff(lhs, rhs, prefilter, accum) {
    accum = accum || [];
    deepDiff(lhs, rhs,
      function(diff) {
        if (diff) {
          accum.push(diff);
        }
      },
      prefilter);
    return (accum.length) ? accum : undefined;
  }

  function applyArrayChange(arr, index, change) {
    if (change.path && change.path.length) {
      var it = arr[index],
          i, u = change.path.length - 1;
      for (i = 0; i < u; i++) {
        it = it[change.path[i]];
      }
      switch (change.kind) {
        case 'A':
          applyArrayChange(it[change.path[i]], change.index, change.item);
          break;
        case 'D':
          delete it[change.path[i]];
          break;
        case 'E':
        case 'N':
          it[change.path[i]] = change.rhs;
          break;
      }
    } else {
      switch (change.kind) {
        case 'A':
          applyArrayChange(arr[index], change.index, change.item);
          break;
        case 'D':
          arr = arrayRemove(arr, index);
          break;
        case 'E':
        case 'N':
          arr[index] = change.rhs;
          break;
      }
    }
    return arr;
  }

  function applyChange(target, source, change) {
    if (target && source && change && change.kind) {
      var it = target,
          i = -1,
          last = change.path ? change.path.length - 1 : 0;
      while (++i < last) {
        if (typeof it[change.path[i]] === 'undefined') {
          it[change.path[i]] = (typeof change.path[i] === 'number') ? [] : {};
        }
        it = it[change.path[i]];
      }
      switch (change.kind) {
        case 'A':
          applyArrayChange(change.path ? it[change.path[i]] : it, change.index, change.item);
          break;
        case 'D':
          delete it[change.path[i]];
          break;
        case 'E':
        case 'N':
          it[change.path[i]] = change.rhs;
          break;
      }
    }
  }

  function revertArrayChange(arr, index, change) {
    if (change.path && change.path.length) {
      // the structure of the object at the index has changed...
      var it = arr[index],
          i, u = change.path.length - 1;
      for (i = 0; i < u; i++) {
        it = it[change.path[i]];
      }
      switch (change.kind) {
        case 'A':
          revertArrayChange(it[change.path[i]], change.index, change.item);
          break;
        case 'D':
          it[change.path[i]] = change.lhs;
          break;
        case 'E':
          it[change.path[i]] = change.lhs;
          break;
        case 'N':
          delete it[change.path[i]];
          break;
      }
    } else {
      // the array item is different...
      switch (change.kind) {
        case 'A':
          revertArrayChange(arr[index], change.index, change.item);
          break;
        case 'D':
          arr[index] = change.lhs;
          break;
        case 'E':
          arr[index] = change.lhs;
          break;
        case 'N':
          arr = arrayRemove(arr, index);
          break;
      }
    }
    return arr;
  }

  function revertChange(target, source, change) {
    if (target && source && change && change.kind) {
      var it = target,
          i, u;
      u = change.path.length - 1;
      for (i = 0; i < u; i++) {
        if (typeof it[change.path[i]] === 'undefined') {
          it[change.path[i]] = {};
        }
        it = it[change.path[i]];
      }
      switch (change.kind) {
        case 'A':
          // Array was modified...
          // it will be an array...
          revertArrayChange(it[change.path[i]], change.index, change.item);
          break;
        case 'D':
          // Item was deleted...
          it[change.path[i]] = change.lhs;
          break;
        case 'E':
          // Item was edited...
          it[change.path[i]] = change.lhs;
          break;
        case 'N':
          // Item is new...
          delete it[change.path[i]];
          break;
      }
    }
  }

  function applyDiff(target, source, filter) {
    if (target && source) {
      var onChange = function(change) {
        if (!filter || filter(target, source, change)) {
          applyChange(target, source, change);
        }
      };
      deepDiff(target, source, onChange);
    }
  }

  Object.defineProperties(accumulateDiff, {

    diff: {
      value: accumulateDiff,
      enumerable: true
    },
    observableDiff: {
      value: deepDiff,
      enumerable: true
    },
    applyDiff: {
      value: applyDiff,
      enumerable: true
    },
    applyChange: {
      value: applyChange,
      enumerable: true
    },
    revertChange: {
      value: revertChange,
      enumerable: true
    },
    isConflict: {
      value: function() {
        return 'undefined' !== typeof conflict;
      },
      enumerable: true
    },
    noConflict: {
      value: function() {
        if (conflictResolution) {
          conflictResolution.forEach(function(it) {
            it();
          });
          conflictResolution = null;
        }
        return accumulateDiff;
      },
      enumerable: true
    }
  });

  return accumulateDiff;
}));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(33)))

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function (_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



var camelize = __webpack_require__(116);

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

var isTextNode = __webpack_require__(126);

/*eslint-disable no-bitwise */

/**
 * Checks if a given DOM node contains or is another DOM node.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if ('contains' in outerNode) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var invariant = __webpack_require__(1);

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFromMixed.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
  // in old versions of Safari).
  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;

  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;

  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;

  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj && (
    // arrays are objects, NodeLists are functions in Safari
    typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    'length' in obj &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    typeof obj.nodeType != 'number' && (
    // a real array
    Array.isArray(obj) ||
    // arguments
    'callee' in obj ||
    // HTMLCollection/NodeList
    'item' in obj)
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFromMixed = require('createArrayFromMixed');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFromMixed(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFromMixed(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFromMixed;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/*eslint-disable fb-www/unsafe-html*/

var ExecutionEnvironment = __webpack_require__(6);

var createArrayFromMixed = __webpack_require__(119);
var getMarkupWrap = __webpack_require__(121);
var invariant = __webpack_require__(1);

/**
 * Dummy container used to render all markup.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
    createArrayFromMixed(scripts).forEach(handleScript);
  }

  var nodes = Array.from(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/*eslint-disable fb-www/unsafe-html */

var ExecutionEnvironment = __webpack_require__(6);

var invariant = __webpack_require__(1);

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */

var shouldWrap = {};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap
};

// Initialize the SVG elements since we know they'll always need to be wrapped
// consistently. If they are created inside a <div> they will be initialized in
// the wrong namespace (and will not display).
var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
svgElements.forEach(function (nodeName) {
  markupWrap[nodeName] = svgWrap;
  shouldWrap[nodeName] = true;
});

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}

module.exports = getMarkupWrap;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */

function getUnboundedScrollPosition(scrollable) {
  if (scrollable === window) {
    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



var hyphenate = __webpack_require__(123);

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}

module.exports = isNode;

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var isNode = __webpack_require__(125);

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @typechecks static-only
 */



/**
 * Memoizes the return value of a function that accepts one string argument.
 */

function memoizeStringOnly(callback) {
  var cache = {};
  return function (string) {
    if (!cache.hasOwnProperty(string)) {
      cache[string] = callback.call(this, string);
    }
    return cache[string];
  };
}

module.exports = memoizeStringOnly;

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



var ExecutionEnvironment = __webpack_require__(6);

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance = window.performance || window.msPerformance || window.webkitPerformance;
}

module.exports = performance || {};

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var performance = __webpack_require__(128);

var performanceNow;

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (performance.now) {
  performanceNow = function performanceNow() {
    return performance.now();
  };
} else {
  performanceNow = function performanceNow() {
    return Date.now();
  };
}

module.exports = performanceNow;

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */


var REACT_STATICS = {
    childContextTypes: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    mixins: true,
    propTypes: true,
    type: true
};

var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    arguments: true,
    arity: true
};

var isGetOwnPropertySymbolsAvailable = typeof Object.getOwnPropertySymbols === 'function';

module.exports = function hoistNonReactStatics(targetComponent, sourceComponent, customStatics) {
    if (typeof sourceComponent !== 'string') { // don't hoist over string (html) components
        var keys = Object.getOwnPropertyNames(sourceComponent);

        /* istanbul ignore else */
        if (isGetOwnPropertySymbolsAvailable) {
            keys = keys.concat(Object.getOwnPropertySymbols(sourceComponent));
        }

        for (var i = 0; i < keys.length; ++i) {
            if (!REACT_STATICS[keys[i]] && !KNOWN_STATICS[keys[i]] && (!customStatics || !customStatics[keys[i]])) {
                try {
                    targetComponent[keys[i]] = sourceComponent[keys[i]];
                } catch (error) {

                }
            }
        }
    }

    return targetComponent;
};


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var uppercasePattern = /[A-Z]/g;
var msPattern = /^ms-/;
var cache = {};

function hyphenateStyleName(string) {
    return string in cache
    ? cache[string]
    : cache[string] = string
      .replace(uppercasePattern, '-$&')
      .toLowerCase()
      .replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createPrefixer;

var _prefixProperty = __webpack_require__(147);

var _prefixProperty2 = _interopRequireDefault(_prefixProperty);

var _prefixValue = __webpack_require__(148);

var _prefixValue2 = _interopRequireDefault(_prefixValue);

var _addNewValuesOnly = __webpack_require__(145);

var _addNewValuesOnly2 = _interopRequireDefault(_addNewValuesOnly);

var _isObject = __webpack_require__(146);

var _isObject2 = _interopRequireDefault(_isObject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createPrefixer(_ref) {
  var prefixMap = _ref.prefixMap,
      plugins = _ref.plugins;

  function prefixAll(style) {
    for (var property in style) {
      var value = style[property];

      // handle nested objects
      if ((0, _isObject2.default)(value)) {
        style[property] = prefixAll(value);
        // handle array values
      } else if (Array.isArray(value)) {
        var combinedValue = [];

        for (var i = 0, len = value.length; i < len; ++i) {
          var processedValue = (0, _prefixValue2.default)(plugins, property, value[i], style, prefixMap);
          (0, _addNewValuesOnly2.default)(combinedValue, processedValue || value[i]);
        }

        // only modify the value if it was touched
        // by any plugin to prevent unnecessary mutations
        if (combinedValue.length > 0) {
          style[property] = combinedValue;
        }
      } else {
        var _processedValue = (0, _prefixValue2.default)(plugins, property, value, style, prefixMap);

        // only modify the value if it was touched
        // by any plugin to prevent unnecessary mutations
        if (_processedValue) {
          style[property] = _processedValue;
        }

        style = (0, _prefixProperty2.default)(prefixMap, property, style);
      }
    }

    return style;
  }

  return prefixAll;
}
module.exports = exports['default'];

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = calc;

var _isPrefixedValue = __webpack_require__(18);

var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var prefixes = ['-webkit-', '-moz-', ''];
function calc(property, value) {
  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && value.indexOf('calc(') > -1) {
    return prefixes.map(function (prefix) {
      return value.replace(/calc\(/g, prefix + 'calc(');
    });
  }
}
module.exports = exports['default'];

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = crossFade;

var _isPrefixedValue = __webpack_require__(18);

var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// http://caniuse.com/#search=cross-fade
var prefixes = ['-webkit-', ''];
function crossFade(property, value) {
  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && value.indexOf('cross-fade(') > -1) {
    return prefixes.map(function (prefix) {
      return value.replace(/cross-fade\(/g, prefix + 'cross-fade(');
    });
  }
}
module.exports = exports['default'];

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = cursor;
var prefixes = ['-webkit-', '-moz-', ''];

var values = {
  'zoom-in': true,
  'zoom-out': true,
  grab: true,
  grabbing: true
};

function cursor(property, value) {
  if (property === 'cursor' && values.hasOwnProperty(value)) {
    return prefixes.map(function (prefix) {
      return prefix + value;
    });
  }
}
module.exports = exports['default'];

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = filter;

var _isPrefixedValue = __webpack_require__(18);

var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// http://caniuse.com/#feat=css-filter-function
var prefixes = ['-webkit-', ''];
function filter(property, value) {
  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && value.indexOf('filter(') > -1) {
    return prefixes.map(function (prefix) {
      return value.replace(/filter\(/g, prefix + 'filter(');
    });
  }
}
module.exports = exports['default'];

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = flex;
var values = {
  flex: true,
  'inline-flex': true
};

function flex(property, value) {
  if (property === 'display' && values.hasOwnProperty(value)) {
    return ['-webkit-box', '-moz-box', '-ms-' + value + 'box', '-webkit-' + value, value];
  }
}
module.exports = exports['default'];

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = flexboxIE;
var alternativeValues = {
  'space-around': 'distribute',
  'space-between': 'justify',
  'flex-start': 'start',
  'flex-end': 'end'
};
var alternativeProps = {
  alignContent: 'msFlexLinePack',
  alignSelf: 'msFlexItemAlign',
  alignItems: 'msFlexAlign',
  justifyContent: 'msFlexPack',
  order: 'msFlexOrder',
  flexGrow: 'msFlexPositive',
  flexShrink: 'msFlexNegative',
  flexBasis: 'msPreferredSize'
};

function flexboxIE(property, value, style) {
  if (alternativeProps.hasOwnProperty(property)) {
    style[alternativeProps[property]] = alternativeValues[value] || value;
  }
}
module.exports = exports['default'];

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = flexboxOld;
var alternativeValues = {
  'space-around': 'justify',
  'space-between': 'justify',
  'flex-start': 'start',
  'flex-end': 'end',
  'wrap-reverse': 'multiple',
  wrap: 'multiple'
};

var alternativeProps = {
  alignItems: 'WebkitBoxAlign',
  justifyContent: 'WebkitBoxPack',
  flexWrap: 'WebkitBoxLines'
};

function flexboxOld(property, value, style) {
  if (property === 'flexDirection' && typeof value === 'string') {
    if (value.indexOf('column') > -1) {
      style.WebkitBoxOrient = 'vertical';
    } else {
      style.WebkitBoxOrient = 'horizontal';
    }
    if (value.indexOf('reverse') > -1) {
      style.WebkitBoxDirection = 'reverse';
    } else {
      style.WebkitBoxDirection = 'normal';
    }
  }
  if (alternativeProps.hasOwnProperty(property)) {
    style[alternativeProps[property]] = alternativeValues[value] || value;
  }
}
module.exports = exports['default'];

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = gradient;

var _isPrefixedValue = __webpack_require__(18);

var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var prefixes = ['-webkit-', '-moz-', ''];

var values = /linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/;

function gradient(property, value) {
  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && values.test(value)) {
    return prefixes.map(function (prefix) {
      return prefix + value;
    });
  }
}
module.exports = exports['default'];

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = imageSet;

var _isPrefixedValue = __webpack_require__(18);

var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// http://caniuse.com/#feat=css-image-set
var prefixes = ['-webkit-', ''];
function imageSet(property, value) {
  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && value.indexOf('image-set(') > -1) {
    return prefixes.map(function (prefix) {
      return value.replace(/image-set\(/g, prefix + 'image-set(');
    });
  }
}
module.exports = exports['default'];

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = position;
function position(property, value) {
  if (property === 'position' && value === 'sticky') {
    return ['-webkit-sticky', 'sticky'];
  }
}
module.exports = exports['default'];

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = sizing;
var prefixes = ['-webkit-', '-moz-', ''];

var properties = {
  maxHeight: true,
  maxWidth: true,
  width: true,
  height: true,
  columnWidth: true,
  minWidth: true,
  minHeight: true
};
var values = {
  'min-content': true,
  'max-content': true,
  'fill-available': true,
  'fit-content': true,
  'contain-floats': true
};

function sizing(property, value) {
  if (properties.hasOwnProperty(property) && values.hasOwnProperty(value)) {
    return prefixes.map(function (prefix) {
      return prefix + value;
    });
  }
}
module.exports = exports['default'];

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = transition;

var _hyphenateProperty = __webpack_require__(114);

var _hyphenateProperty2 = _interopRequireDefault(_hyphenateProperty);

var _isPrefixedValue = __webpack_require__(18);

var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

var _capitalizeString = __webpack_require__(66);

var _capitalizeString2 = _interopRequireDefault(_capitalizeString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var properties = {
  transition: true,
  transitionProperty: true,
  WebkitTransition: true,
  WebkitTransitionProperty: true,
  MozTransition: true,
  MozTransitionProperty: true
};


var prefixMapping = {
  Webkit: '-webkit-',
  Moz: '-moz-',
  ms: '-ms-'
};

function prefixValue(value, propertyPrefixMap) {
  if ((0, _isPrefixedValue2.default)(value)) {
    return value;
  }

  // only split multi values, not cubic beziers
  var multipleValues = value.split(/,(?![^()]*(?:\([^()]*\))?\))/g);

  for (var i = 0, len = multipleValues.length; i < len; ++i) {
    var singleValue = multipleValues[i];
    var values = [singleValue];
    for (var property in propertyPrefixMap) {
      var dashCaseProperty = (0, _hyphenateProperty2.default)(property);

      if (singleValue.indexOf(dashCaseProperty) > -1 && dashCaseProperty !== 'order') {
        var prefixes = propertyPrefixMap[property];
        for (var j = 0, pLen = prefixes.length; j < pLen; ++j) {
          // join all prefixes and create a new value
          values.unshift(singleValue.replace(dashCaseProperty, prefixMapping[prefixes[j]] + dashCaseProperty));
        }
      }
    }

    multipleValues[i] = values.join(',');
  }

  return multipleValues.join(',');
}

function transition(property, value, style, propertyPrefixMap) {
  // also check for already prefixed transitions
  if (typeof value === 'string' && properties.hasOwnProperty(property)) {
    var outputValue = prefixValue(value, propertyPrefixMap);
    // if the property is already prefixed
    var webkitOutput = outputValue.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function (val) {
      return !/-moz-|-ms-/.test(val);
    }).join(',');

    if (property.indexOf('Webkit') > -1) {
      return webkitOutput;
    }

    var mozOutput = outputValue.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function (val) {
      return !/-webkit-|-ms-/.test(val);
    }).join(',');

    if (property.indexOf('Moz') > -1) {
      return mozOutput;
    }

    style['Webkit' + (0, _capitalizeString2.default)(property)] = webkitOutput;
    style['Moz' + (0, _capitalizeString2.default)(property)] = mozOutput;
    return outputValue;
  }
}
module.exports = exports['default'];

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = addNewValuesOnly;
function addIfNew(list, value) {
  if (list.indexOf(value) === -1) {
    list.push(value);
  }
}

function addNewValuesOnly(list, values) {
  if (Array.isArray(values)) {
    for (var i = 0, len = values.length; i < len; ++i) {
      addIfNew(list, values[i]);
    }
  } else {
    addIfNew(list, values);
  }
}
module.exports = exports["default"];

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isObject;
function isObject(value) {
  return value instanceof Object && !Array.isArray(value);
}
module.exports = exports["default"];

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = prefixProperty;

var _capitalizeString = __webpack_require__(66);

var _capitalizeString2 = _interopRequireDefault(_capitalizeString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function prefixProperty(prefixProperties, property, style) {
  if (!prefixProperties.hasOwnProperty(property)) {
    return style;
  }

  // We need to preserve the order of the styles while inserting new prefixed
  // styles. Object order is not guaranteed, but this is better than nothing.
  // Note that this is brittle and is likely to break in older versions of
  // Node (e.g. Node 4).
  var newStyle = {};
  Object.keys(style).forEach(function (styleProperty) {
    if (styleProperty === property) {
      // We've found the style we need to prefix.
      var requiredPrefixes = prefixProperties[property];
      for (var i = 0, len = requiredPrefixes.length; i < len; ++i) {
        newStyle[requiredPrefixes[i] + (0, _capitalizeString2.default)(property)] = style[property];
      }
    }

    newStyle[styleProperty] = style[styleProperty];
  });

  return newStyle;
}
module.exports = exports['default'];

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = prefixValue;
function prefixValue(plugins, property, value, style, metaData) {
  for (var i = 0, len = plugins.length; i < len; ++i) {
    var processedValue = plugins[i](property, value, style, metaData);

    // we can stop processing if a value is returned
    // as all plugin criteria are unique
    if (processedValue) {
      return processedValue;
    }
  }
}
module.exports = exports["default"];

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if (process.env.NODE_ENV !== 'production') {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 150 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Symbol_js__ = __webpack_require__(67);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__getRawTag_js__ = __webpack_require__(153);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__objectToString_js__ = __webpack_require__(154);




/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = __WEBPACK_IMPORTED_MODULE_0__Symbol_js__["a" /* default */] ? __WEBPACK_IMPORTED_MODULE_0__Symbol_js__["a" /* default */].toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__getRawTag_js__["a" /* default */])(value)
    : __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__objectToString_js__["a" /* default */])(value);
}

/* harmony default export */ __webpack_exports__["a"] = baseGetTag;


/***/ }),
/* 151 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/* harmony default export */ __webpack_exports__["a"] = freeGlobal;

/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(33)))

/***/ }),
/* 152 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__overArg_js__ = __webpack_require__(155);


/** Built-in value references. */
var getPrototype = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__overArg_js__["a" /* default */])(Object.getPrototypeOf, Object);

/* harmony default export */ __webpack_exports__["a"] = getPrototype;


/***/ }),
/* 153 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Symbol_js__ = __webpack_require__(67);


/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = __WEBPACK_IMPORTED_MODULE_0__Symbol_js__["a" /* default */] ? __WEBPACK_IMPORTED_MODULE_0__Symbol_js__["a" /* default */].toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

/* harmony default export */ __webpack_exports__["a"] = getRawTag;


/***/ }),
/* 154 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

/* harmony default export */ __webpack_exports__["a"] = objectToString;


/***/ }),
/* 155 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/* harmony default export */ __webpack_exports__["a"] = overArg;


/***/ }),
/* 156 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__freeGlobal_js__ = __webpack_require__(151);


/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = __WEBPACK_IMPORTED_MODULE_0__freeGlobal_js__["a" /* default */] || freeSelf || Function('return this')();

/* harmony default export */ __webpack_exports__["a"] = root;


/***/ }),
/* 157 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

/* harmony default export */ __webpack_exports__["a"] = isObjectLike;


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ARIADOMPropertyConfig = {
  Properties: {
    // Global States and Properties
    'aria-current': 0, // state
    'aria-details': 0,
    'aria-disabled': 0, // state
    'aria-hidden': 0, // state
    'aria-invalid': 0, // state
    'aria-keyshortcuts': 0,
    'aria-label': 0,
    'aria-roledescription': 0,
    // Widget Attributes
    'aria-autocomplete': 0,
    'aria-checked': 0,
    'aria-expanded': 0,
    'aria-haspopup': 0,
    'aria-level': 0,
    'aria-modal': 0,
    'aria-multiline': 0,
    'aria-multiselectable': 0,
    'aria-orientation': 0,
    'aria-placeholder': 0,
    'aria-pressed': 0,
    'aria-readonly': 0,
    'aria-required': 0,
    'aria-selected': 0,
    'aria-sort': 0,
    'aria-valuemax': 0,
    'aria-valuemin': 0,
    'aria-valuenow': 0,
    'aria-valuetext': 0,
    // Live Region Attributes
    'aria-atomic': 0,
    'aria-busy': 0,
    'aria-live': 0,
    'aria-relevant': 0,
    // Drag-and-Drop Attributes
    'aria-dropeffect': 0,
    'aria-grabbed': 0,
    // Relationship Attributes
    'aria-activedescendant': 0,
    'aria-colcount': 0,
    'aria-colindex': 0,
    'aria-colspan': 0,
    'aria-controls': 0,
    'aria-describedby': 0,
    'aria-errormessage': 0,
    'aria-flowto': 0,
    'aria-labelledby': 0,
    'aria-owns': 0,
    'aria-posinset': 0,
    'aria-rowcount': 0,
    'aria-rowindex': 0,
    'aria-rowspan': 0,
    'aria-setsize': 0
  },
  DOMAttributeNames: {},
  DOMPropertyNames: {}
};

module.exports = ARIADOMPropertyConfig;

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMComponentTree = __webpack_require__(5);

var focusNode = __webpack_require__(64);

var AutoFocusUtils = {
  focusDOMComponent: function () {
    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
  }
};

module.exports = AutoFocusUtils;

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPropagators = __webpack_require__(24);
var ExecutionEnvironment = __webpack_require__(6);
var FallbackCompositionState = __webpack_require__(166);
var SyntheticCompositionEvent = __webpack_require__(209);
var SyntheticInputEvent = __webpack_require__(212);

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

var documentMode = null;
if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: 'onBeforeInput',
      captured: 'onBeforeInputCapture'
    },
    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionEnd',
      captured: 'onCompositionEndCapture'
    },
    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionStart',
      captured: 'onCompositionStartCapture'
    },
    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionUpdate',
      captured: 'onCompositionUpdateCapture'
    },
    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case 'topCompositionStart':
      return eventTypes.compositionStart;
    case 'topCompositionEnd':
      return eventTypes.compositionEnd;
    case 'topCompositionUpdate':
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topKeyUp':
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
    case 'topKeyDown':
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;
    case 'topKeyPress':
    case 'topMouseDown':
    case 'topBlur':
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }
  return null;
}

// Track the current IME composition fallback object, if any.
var currentComposition = null;

/**
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!currentComposition) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!currentComposition && eventType === eventTypes.compositionStart) {
      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (currentComposition) {
        fallbackData = currentComposition.getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;
    }
  }

  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topCompositionEnd':
      return getDataFromCustomEvent(nativeEvent);
    case 'topKeyPress':
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case 'topTextInput':
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to blacklist it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  // If composition event is available, we extract a string only at
  // compositionevent, otherwise extract it at fallback events.
  if (currentComposition) {
    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = currentComposition.getData();
      FallbackCompositionState.release(currentComposition);
      currentComposition = null;
      return chars;
    }
    return null;
  }

  switch (topLevelType) {
    case 'topPaste':
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case 'topKeyPress':
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
        return String.fromCharCode(nativeEvent.which);
      }
      return null;
    case 'topCompositionEnd':
      return useFallbackCompositionData ? null : nativeEvent.data;
    default:
      return null;
  }
}

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  }

  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

  event.data = chars;
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
  }
};

module.exports = BeforeInputEventPlugin;

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var CSSProperty = __webpack_require__(68);
var ExecutionEnvironment = __webpack_require__(6);
var ReactInstrumentation = __webpack_require__(8);

var camelizeStyleName = __webpack_require__(117);
var dangerousStyleValue = __webpack_require__(219);
var hyphenateStyleName = __webpack_require__(124);
var memoizeStringOnly = __webpack_require__(127);
var warning = __webpack_require__(2);

var processStyleName = memoizeStringOnly(function (styleName) {
  return hyphenateStyleName(styleName);
});

var hasShorthandPropertyBug = false;
var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  var tempStyle = document.createElement('div').style;
  try {
    // IE8 throws "Invalid argument." if resetting shorthand style properties.
    tempStyle.font = '';
  } catch (e) {
    hasShorthandPropertyBug = true;
  }
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if (process.env.NODE_ENV !== 'production') {
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};
  var warnedForNaNValue = false;

  var warnHyphenatedStyleName = function (name, owner) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
  };

  var warnBadVendoredStyleName = function (name, owner) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
  };

  var warnStyleValueWithSemicolon = function (name, value, owner) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon.%s ' + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
  };

  var warnStyleValueIsNaN = function (name, value, owner) {
    if (warnedForNaNValue) {
      return;
    }

    warnedForNaNValue = true;
    process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
  };

  var checkRenderMessage = function (owner) {
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  };

  /**
   * @param {string} name
   * @param {*} value
   * @param {ReactDOMComponent} component
   */
  var warnValidStyle = function (name, value, component) {
    var owner;
    if (component) {
      owner = component._currentElement._owner;
    }
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name, owner);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name, owner);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value, owner);
    }

    if (typeof value === 'number' && isNaN(value)) {
      warnStyleValueIsNaN(name, value, owner);
    }
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @param {ReactDOMComponent} component
   * @return {?string}
   */
  createMarkupForStyles: function (styles, component) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var styleValue = styles[styleName];
      if (process.env.NODE_ENV !== 'production') {
        warnValidStyle(styleName, styleValue, component);
      }
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue, component) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   * @param {ReactDOMComponent} component
   */
  setValueForStyles: function (node, styles, component) {
    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: component._debugID,
        type: 'update styles',
        payload: styles
      });
    }

    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if (process.env.NODE_ENV !== 'production') {
        warnValidStyle(styleName, styles[styleName], component);
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName], component);
      if (styleName === 'float' || styleName === 'cssFloat') {
        styleName = styleFloatAccessor;
      }
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

module.exports = CSSPropertyOperations;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPluginHub = __webpack_require__(23);
var EventPropagators = __webpack_require__(24);
var ExecutionEnvironment = __webpack_require__(6);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactUpdates = __webpack_require__(10);
var SyntheticEvent = __webpack_require__(12);

var getEventTarget = __webpack_require__(48);
var isEventSupported = __webpack_require__(49);
var isTextInputElement = __webpack_require__(86);

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: 'onChange',
      captured: 'onChangeCapture'
    },
    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementInst = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue(false);
}

function startWatchingForChangeEventIE8(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementInst = null;
}

function getTargetInstForChangeEvent(topLevelType, targetInst) {
  if (topLevelType === 'topChange') {
    return targetInst;
  }
}
function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
  if (topLevelType === 'topFocus') {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(target, targetInst);
  } else if (topLevelType === 'topBlur') {
    stopWatchingForChangeEventIE8();
  }
}

/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events.
  // IE10+ fire input events to often, such when a placeholder
  // changes or when an input with a placeholder is focused.
  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 11);
}

/**
 * (For IE <=11) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp = {
  get: function () {
    return activeElementValueProp.get.call(this);
  },
  set: function (val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For IE <=11) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
  // on DOM elements
  Object.defineProperty(activeElement, 'value', newValueProp);
  if (activeElement.attachEvent) {
    activeElement.attachEvent('onpropertychange', handlePropertyChange);
  } else {
    activeElement.addEventListener('propertychange', handlePropertyChange, false);
  }
}

/**
 * (For IE <=11) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;

  if (activeElement.detachEvent) {
    activeElement.detachEvent('onpropertychange', handlePropertyChange);
  } else {
    activeElement.removeEventListener('propertychange', handlePropertyChange, false);
  }

  activeElement = null;
  activeElementInst = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For IE <=11) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetInstForInputEvent(topLevelType, targetInst) {
  if (topLevelType === 'topInput') {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return targetInst;
  }
}

function handleEventsForInputEventIE(topLevelType, target, targetInst) {
  if (topLevelType === 'topFocus') {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9-11, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(target, targetInst);
  } else if (topLevelType === 'topBlur') {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetInstForInputEventIE(topLevelType, targetInst) {
  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementInst;
    }
  }
}

/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetInstForClickEvent(topLevelType, targetInst) {
  if (topLevelType === 'topClick') {
    return targetInst;
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

    var getTargetInstFunc, handleEventFunc;
    if (shouldUseChangeEvent(targetNode)) {
      if (doesChangeEventBubble) {
        getTargetInstFunc = getTargetInstForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(targetNode)) {
      if (isInputEventSupported) {
        getTargetInstFunc = getTargetInstForInputEvent;
      } else {
        getTargetInstFunc = getTargetInstForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForClickEvent;
    }

    if (getTargetInstFunc) {
      var inst = getTargetInstFunc(topLevelType, targetInst);
      if (inst) {
        var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, nativeEventTarget);
        event.type = 'change';
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, targetNode, targetInst);
    }
  }

};

module.exports = ChangeEventPlugin;

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var DOMLazyTree = __webpack_require__(19);
var ExecutionEnvironment = __webpack_require__(6);

var createNodesFromMarkup = __webpack_require__(120);
var emptyFunction = __webpack_require__(9);
var invariant = __webpack_require__(1);

var Danger = {

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;

    if (typeof markup === 'string') {
      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
      oldChild.parentNode.replaceChild(newChild, oldChild);
    } else {
      DOMLazyTree.replaceChildWithTree(oldChild, markup);
    }
  }

};

module.exports = Danger;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */

var DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

module.exports = DefaultEventPluginOrder;

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPropagators = __webpack_require__(24);
var ReactDOMComponentTree = __webpack_require__(5);
var SyntheticMouseEvent = __webpack_require__(29);

var eventTypes = {
  mouseEnter: {
    registrationName: 'onMouseEnter',
    dependencies: ['topMouseOut', 'topMouseOver']
  },
  mouseLeave: {
    registrationName: 'onMouseLeave',
    dependencies: ['topMouseOut', 'topMouseOver']
  }
};

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (nativeEventTarget.window === nativeEventTarget) {
      // `nativeEventTarget` is probably a window object.
      win = nativeEventTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = nativeEventTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from;
    var to;
    if (topLevelType === 'topMouseOut') {
      from = targetInst;
      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
    } else {
      // Moving to a node from outside the window.
      from = null;
      to = targetInst;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);

    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
    leave.type = 'mouseleave';
    leave.target = fromNode;
    leave.relatedTarget = toNode;

    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
    enter.type = 'mouseenter';
    enter.target = toNode;
    enter.relatedTarget = fromNode;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);

    return [leave, enter];
  }

};

module.exports = EnterLeaveEventPlugin;

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var PooledClass = __webpack_require__(14);

var getTextContentAccessor = __webpack_require__(84);

/**
 * This helper class stores information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this._root = root;
  this._startText = this.getText();
  this._fallbackText = null;
}

_assign(FallbackCompositionState.prototype, {
  destructor: function () {
    this._root = null;
    this._startText = null;
    this._fallbackText = null;
  },

  /**
   * Get current text of input.
   *
   * @return {string}
   */
  getText: function () {
    if ('value' in this._root) {
      return this._root.value;
    }
    return this._root[getTextContentAccessor()];
  },

  /**
   * Determine the differing substring between the initially stored
   * text content and the current content.
   *
   * @return {string}
   */
  getData: function () {
    if (this._fallbackText) {
      return this._fallbackText;
    }

    var start;
    var startValue = this._startText;
    var startLength = startValue.length;
    var end;
    var endValue = this.getText();
    var endLength = endValue.length;

    for (start = 0; start < startLength; start++) {
      if (startValue[start] !== endValue[start]) {
        break;
      }
    }

    var minEnd = startLength - start;
    for (end = 1; end <= minEnd; end++) {
      if (startValue[startLength - end] !== endValue[endLength - end]) {
        break;
      }
    }

    var sliceTail = end > 1 ? 1 - end : undefined;
    this._fallbackText = endValue.slice(start, sliceTail);
    return this._fallbackText;
  }
});

PooledClass.addPoolingTo(FallbackCompositionState);

module.exports = FallbackCompositionState;

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(13);

var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
  Properties: {
    /**
     * Standard Properties
     */
    accept: 0,
    acceptCharset: 0,
    accessKey: 0,
    action: 0,
    allowFullScreen: HAS_BOOLEAN_VALUE,
    allowTransparency: 0,
    alt: 0,
    // specifies target context for links with `preload` type
    as: 0,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: 0,
    // autoFocus is polyfilled/normalized by AutoFocusUtils
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    capture: HAS_BOOLEAN_VALUE,
    cellPadding: 0,
    cellSpacing: 0,
    charSet: 0,
    challenge: 0,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    cite: 0,
    classID: 0,
    className: 0,
    cols: HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: 0,
    content: 0,
    contentEditable: 0,
    contextMenu: 0,
    controls: HAS_BOOLEAN_VALUE,
    coords: 0,
    crossOrigin: 0,
    data: 0, // For `<object />` acts as `src`.
    dateTime: 0,
    'default': HAS_BOOLEAN_VALUE,
    defer: HAS_BOOLEAN_VALUE,
    dir: 0,
    disabled: HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: 0,
    encType: 0,
    form: 0,
    formAction: 0,
    formEncType: 0,
    formMethod: 0,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: 0,
    frameBorder: 0,
    headers: 0,
    height: 0,
    hidden: HAS_BOOLEAN_VALUE,
    high: 0,
    href: 0,
    hrefLang: 0,
    htmlFor: 0,
    httpEquiv: 0,
    icon: 0,
    id: 0,
    inputMode: 0,
    integrity: 0,
    is: 0,
    keyParams: 0,
    keyType: 0,
    kind: 0,
    label: 0,
    lang: 0,
    list: 0,
    loop: HAS_BOOLEAN_VALUE,
    low: 0,
    manifest: 0,
    marginHeight: 0,
    marginWidth: 0,
    max: 0,
    maxLength: 0,
    media: 0,
    mediaGroup: 0,
    method: 0,
    min: 0,
    minLength: 0,
    // Caution; `option.selected` is not updated if `select.multiple` is
    // disabled with `removeAttribute`.
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: 0,
    nonce: 0,
    noValidate: HAS_BOOLEAN_VALUE,
    open: HAS_BOOLEAN_VALUE,
    optimum: 0,
    pattern: 0,
    placeholder: 0,
    playsInline: HAS_BOOLEAN_VALUE,
    poster: 0,
    preload: 0,
    profile: 0,
    radioGroup: 0,
    readOnly: HAS_BOOLEAN_VALUE,
    referrerPolicy: 0,
    rel: 0,
    required: HAS_BOOLEAN_VALUE,
    reversed: HAS_BOOLEAN_VALUE,
    role: 0,
    rows: HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: HAS_NUMERIC_VALUE,
    sandbox: 0,
    scope: 0,
    scoped: HAS_BOOLEAN_VALUE,
    scrolling: 0,
    seamless: HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: 0,
    size: HAS_POSITIVE_NUMERIC_VALUE,
    sizes: 0,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: 0,
    src: 0,
    srcDoc: 0,
    srcLang: 0,
    srcSet: 0,
    start: HAS_NUMERIC_VALUE,
    step: 0,
    style: 0,
    summary: 0,
    tabIndex: 0,
    target: 0,
    title: 0,
    // Setting .type throws on non-<input> tags
    type: 0,
    useMap: 0,
    value: 0,
    width: 0,
    wmode: 0,
    wrap: 0,

    /**
     * RDFa Properties
     */
    about: 0,
    datatype: 0,
    inlist: 0,
    prefix: 0,
    // property is also supported for OpenGraph in meta tags.
    property: 0,
    resource: 0,
    'typeof': 0,
    vocab: 0,

    /**
     * Non-standard Properties
     */
    // autoCapitalize and autoCorrect are supported in Mobile Safari for
    // keyboard hints.
    autoCapitalize: 0,
    autoCorrect: 0,
    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
    autoSave: 0,
    // color is for Safari mask-icon link
    color: 0,
    // itemProp, itemScope, itemType are for
    // Microdata support. See http://schema.org/docs/gs.html
    itemProp: 0,
    itemScope: HAS_BOOLEAN_VALUE,
    itemType: 0,
    // itemID and itemRef are for Microdata support as well but
    // only specified in the WHATWG spec document. See
    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
    itemID: 0,
    itemRef: 0,
    // results show looking glass icon and recent searches on input
    // search fields in WebKit/Blink
    results: 0,
    // IE-only attribute that specifies security restrictions on an iframe
    // as an alternative to the sandbox attribute on IE<10
    security: 0,
    // IE-only attribute that controls focus behavior
    unselectable: 0
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {}
};

module.exports = HTMLDOMPropertyConfig;

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactReconciler = __webpack_require__(20);

var instantiateReactComponent = __webpack_require__(85);
var KeyEscapeUtils = __webpack_require__(40);
var shouldUpdateReactComponent = __webpack_require__(50);
var traverseAllChildren = __webpack_require__(88);
var warning = __webpack_require__(2);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(7);
}

function instantiateChild(childInstances, child, name, selfDebugID) {
  // We found a component instance.
  var keyUnique = childInstances[name] === undefined;
  if (process.env.NODE_ENV !== 'production') {
    if (!ReactComponentTreeHook) {
      ReactComponentTreeHook = __webpack_require__(7);
    }
    if (!keyUnique) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
    }
  }
  if (child != null && keyUnique) {
    childInstances[name] = instantiateReactComponent(child, true);
  }
}

/**
 * ReactChildReconciler provides helpers for initializing or updating a set of
 * children. Its output is suitable for passing it onto ReactMultiChild which
 * does diffed reordering and insertion.
 */
var ReactChildReconciler = {
  /**
   * Generates a "mount image" for each of the supplied children. In the case
   * of `ReactDOMComponent`, a mount image is a string of markup.
   *
   * @param {?object} nestedChildNodes Nested child maps.
   * @return {?object} A set of child instances.
   * @internal
   */
  instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID // 0 in production and for roots
  ) {
    if (nestedChildNodes == null) {
      return null;
    }
    var childInstances = {};

    if (process.env.NODE_ENV !== 'production') {
      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
        return instantiateChild(childInsts, child, name, selfDebugID);
      }, childInstances);
    } else {
      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
    }
    return childInstances;
  },

  /**
   * Updates the rendered children and returns a new set of children.
   *
   * @param {?object} prevChildren Previously initialized set of children.
   * @param {?object} nextChildren Flat child element maps.
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @return {?object} A new set of child instances.
   * @internal
   */
  updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID // 0 in production and for roots
  ) {
    // We currently don't have a way to track moves here but if we use iterators
    // instead of for..in we can zip the iterators and check if an item has
    // moved.
    // TODO: If nothing has changed, return the prevChildren object so that we
    // can quickly bailout if nothing has changed.
    if (!nextChildren && !prevChildren) {
      return;
    }
    var name;
    var prevChild;
    for (name in nextChildren) {
      if (!nextChildren.hasOwnProperty(name)) {
        continue;
      }
      prevChild = prevChildren && prevChildren[name];
      var prevElement = prevChild && prevChild._currentElement;
      var nextElement = nextChildren[name];
      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
        nextChildren[name] = prevChild;
      } else {
        if (prevChild) {
          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
          ReactReconciler.unmountComponent(prevChild, false);
        }
        // The child must be instantiated before it's mounted.
        var nextChildInstance = instantiateReactComponent(nextElement, true);
        nextChildren[name] = nextChildInstance;
        // Creating mount image now ensures refs are resolved in right order
        // (see https://github.com/facebook/react/pull/7101 for explanation).
        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
        mountImages.push(nextChildMountImage);
      }
    }
    // Unmount children that are no longer present.
    for (name in prevChildren) {
      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
        prevChild = prevChildren[name];
        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
        ReactReconciler.unmountComponent(prevChild, false);
      }
    }
  },

  /**
   * Unmounts all rendered children. This should be used to clean up children
   * when this component is unmounted.
   *
   * @param {?object} renderedChildren Previously initialized set of children.
   * @internal
   */
  unmountChildren: function (renderedChildren, safely) {
    for (var name in renderedChildren) {
      if (renderedChildren.hasOwnProperty(name)) {
        var renderedChild = renderedChildren[name];
        ReactReconciler.unmountComponent(renderedChild, safely);
      }
    }
  }

};

module.exports = ReactChildReconciler;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMChildrenOperations = __webpack_require__(37);
var ReactDOMIDOperations = __webpack_require__(176);

/**
 * Abstracts away all functionality of the reconciler that requires knowledge of
 * the browser context. TODO: These callers should be refactored to avoid the
 * need for this injection.
 */
var ReactComponentBrowserEnvironment = {

  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup

};

module.exports = ReactComponentBrowserEnvironment;

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var React = __webpack_require__(21);
var ReactComponentEnvironment = __webpack_require__(42);
var ReactCurrentOwner = __webpack_require__(11);
var ReactErrorUtils = __webpack_require__(43);
var ReactInstanceMap = __webpack_require__(25);
var ReactInstrumentation = __webpack_require__(8);
var ReactNodeTypes = __webpack_require__(78);
var ReactReconciler = __webpack_require__(20);

if (process.env.NODE_ENV !== 'production') {
  var checkReactTypeSpec = __webpack_require__(218);
}

var emptyObject = __webpack_require__(22);
var invariant = __webpack_require__(1);
var shallowEqual = __webpack_require__(35);
var shouldUpdateReactComponent = __webpack_require__(50);
var warning = __webpack_require__(2);

var CompositeTypes = {
  ImpureClass: 0,
  PureClass: 1,
  StatelessFunctional: 2
};

function StatelessComponent(Component) {}
StatelessComponent.prototype.render = function () {
  var Component = ReactInstanceMap.get(this)._currentElement.type;
  var element = Component(this.props, this.context, this.updater);
  warnIfInvalidElement(Component, element);
  return element;
};

function warnIfInvalidElement(Component, element) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
  }
}

function shouldConstruct(Component) {
  return !!(Component.prototype && Component.prototype.isReactComponent);
}

function isPureComponent(Component) {
  return !!(Component.prototype && Component.prototype.isPureReactComponent);
}

// Separated into a function to contain deoptimizations caused by try/finally.
function measureLifeCyclePerf(fn, debugID, timerType) {
  if (debugID === 0) {
    // Top-level wrappers (see ReactMount) and empty components (see
    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
    // Both are implementation details that should go away in the future.
    return fn();
  }

  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
  try {
    return fn();
  } finally {
    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
  }
}

/**
 * ------------------ The Life-Cycle of a Composite Component ------------------
 *
 * - constructor: Initialization of state. The instance is now retained.
 *   - componentWillMount
 *   - render
 *   - [children's constructors]
 *     - [children's componentWillMount and render]
 *     - [children's componentDidMount]
 *     - componentDidMount
 *
 *       Update Phases:
 *       - componentWillReceiveProps (only called if parent updated)
 *       - shouldComponentUpdate
 *         - componentWillUpdate
 *           - render
 *           - [children's constructors or receive props phases]
 *         - componentDidUpdate
 *
 *     - componentWillUnmount
 *     - [children's componentWillUnmount]
 *   - [children destroyed]
 * - (destroyed): The instance is now blank, released by React and ready for GC.
 *
 * -----------------------------------------------------------------------------
 */

/**
 * An incrementing ID assigned to each component when it is mounted. This is
 * used to enforce the order in which `ReactUpdates` updates dirty components.
 *
 * @private
 */
var nextMountID = 1;

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponent = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function (element) {
    this._currentElement = element;
    this._rootNodeID = 0;
    this._compositeType = null;
    this._instance = null;
    this._hostParent = null;
    this._hostContainerInfo = null;

    // See ReactUpdateQueue
    this._updateBatchNumber = null;
    this._pendingElement = null;
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    this._renderedNodeType = null;
    this._renderedComponent = null;
    this._context = null;
    this._mountOrder = 0;
    this._topLevelWrapper = null;

    // See ReactUpdates and ReactUpdateQueue.
    this._pendingCallbacks = null;

    // ComponentWillUnmount shall only be called once
    this._calledComponentWillUnmount = false;

    if (process.env.NODE_ENV !== 'production') {
      this._warnedAboutRefsInRender = false;
    }
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?object} hostParent
   * @param {?object} hostContainerInfo
   * @param {?object} context
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    var _this = this;

    this._context = context;
    this._mountOrder = nextMountID++;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var publicProps = this._currentElement.props;
    var publicContext = this._processContext(context);

    var Component = this._currentElement.type;

    var updateQueue = transaction.getUpdateQueue();

    // Initialize the public class
    var doConstruct = shouldConstruct(Component);
    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
    var renderedElement;

    // Support functional components
    if (!doConstruct && (inst == null || inst.render == null)) {
      renderedElement = inst;
      warnIfInvalidElement(Component, renderedElement);
      !(inst === null || inst === false || React.isValidElement(inst)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
      inst = new StatelessComponent(Component);
      this._compositeType = CompositeTypes.StatelessFunctional;
    } else {
      if (isPureComponent(Component)) {
        this._compositeType = CompositeTypes.PureClass;
      } else {
        this._compositeType = CompositeTypes.ImpureClass;
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      // This will throw later in _renderValidatedComponent, but add an early
      // warning now to help debugging
      if (inst.render == null) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
      }

      var propsMutated = inst.props !== publicProps;
      var componentName = Component.displayName || Component.name || 'Component';

      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\'s constructor was passed.', componentName, componentName) : void 0;
    }

    // These should be set up in the constructor, but as a convenience for
    // simpler class abstractions, we set them up after the fact.
    inst.props = publicProps;
    inst.context = publicContext;
    inst.refs = emptyObject;
    inst.updater = updateQueue;

    this._instance = inst;

    // Store a reference from the instance back to the internal representation
    ReactInstanceMap.set(inst, this);

    if (process.env.NODE_ENV !== 'production') {
      // Since plain JS classes are defined without any special initialization
      // logic, we can not catch common errors early. Therefore, we have to
      // catch them here, at initialization time, instead.
      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
    }

    var initialState = inst.state;
    if (initialState === undefined) {
      inst.state = initialState = null;
    }
    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;

    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    var markup;
    if (inst.unstable_handleError) {
      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
    } else {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    }

    if (inst.componentDidMount) {
      if (process.env.NODE_ENV !== 'production') {
        transaction.getReactMountReady().enqueue(function () {
          measureLifeCyclePerf(function () {
            return inst.componentDidMount();
          }, _this._debugID, 'componentDidMount');
        });
      } else {
        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
      }
    }

    return markup;
  },

  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {
    if (process.env.NODE_ENV !== 'production') {
      ReactCurrentOwner.current = this;
      try {
        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
      } finally {
        ReactCurrentOwner.current = null;
      }
    } else {
      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
    }
  },

  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {
    var Component = this._currentElement.type;

    if (doConstruct) {
      if (process.env.NODE_ENV !== 'production') {
        return measureLifeCyclePerf(function () {
          return new Component(publicProps, publicContext, updateQueue);
        }, this._debugID, 'ctor');
      } else {
        return new Component(publicProps, publicContext, updateQueue);
      }
    }

    // This can still be an instance in case of factory components
    // but we'll count this as time spent rendering as the more common case.
    if (process.env.NODE_ENV !== 'production') {
      return measureLifeCyclePerf(function () {
        return Component(publicProps, publicContext, updateQueue);
      }, this._debugID, 'render');
    } else {
      return Component(publicProps, publicContext, updateQueue);
    }
  },

  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var markup;
    var checkpoint = transaction.checkpoint();
    try {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    } catch (e) {
      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
      transaction.rollback(checkpoint);
      this._instance.unstable_handleError(e);
      if (this._pendingStateQueue) {
        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
      }
      checkpoint = transaction.checkpoint();

      this._renderedComponent.unmountComponent(true);
      transaction.rollback(checkpoint);

      // Try again - we've informed the component about the error, so they can render an error message this time.
      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    }
    return markup;
  },

  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var inst = this._instance;

    var debugID = 0;
    if (process.env.NODE_ENV !== 'production') {
      debugID = this._debugID;
    }

    if (inst.componentWillMount) {
      if (process.env.NODE_ENV !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillMount();
        }, debugID, 'componentWillMount');
      } else {
        inst.componentWillMount();
      }
      // When mounting, calls to `setState` by `componentWillMount` will set
      // `this._pendingStateQueue` without triggering a re-render.
      if (this._pendingStateQueue) {
        inst.state = this._processPendingState(inst.props, inst.context);
      }
    }

    // If not a stateless component, we now render
    if (renderedElement === undefined) {
      renderedElement = this._renderValidatedComponent();
    }

    var nodeType = ReactNodeTypes.getType(renderedElement);
    this._renderedNodeType = nodeType;
    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
    );
    this._renderedComponent = child;

    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);

    if (process.env.NODE_ENV !== 'production') {
      if (debugID !== 0) {
        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
      }
    }

    return markup;
  },

  getHostNode: function () {
    return ReactReconciler.getHostNode(this._renderedComponent);
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (safely) {
    if (!this._renderedComponent) {
      return;
    }

    var inst = this._instance;

    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
      inst._calledComponentWillUnmount = true;

      if (safely) {
        var name = this.getName() + '.componentWillUnmount()';
        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
      } else {
        if (process.env.NODE_ENV !== 'production') {
          measureLifeCyclePerf(function () {
            return inst.componentWillUnmount();
          }, this._debugID, 'componentWillUnmount');
        } else {
          inst.componentWillUnmount();
        }
      }
    }

    if (this._renderedComponent) {
      ReactReconciler.unmountComponent(this._renderedComponent, safely);
      this._renderedNodeType = null;
      this._renderedComponent = null;
      this._instance = null;
    }

    // Reset pending fields
    // Even if this component is scheduled for another update in ReactUpdates,
    // it would still be ignored because these fields are reset.
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;
    this._pendingCallbacks = null;
    this._pendingElement = null;

    // These fields do not really need to be reset since this object is no
    // longer accessible.
    this._context = null;
    this._rootNodeID = 0;
    this._topLevelWrapper = null;

    // Delete the reference from the instance to this internal representation
    // which allow the internals to be properly cleaned up even if the user
    // leaks a reference to the public instance.
    ReactInstanceMap.remove(inst);

    // Some existing components rely on inst.props even after they've been
    // destroyed (in event handlers).
    // TODO: inst.props = null;
    // TODO: inst.state = null;
    // TODO: inst.context = null;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _maskContext: function (context) {
    var Component = this._currentElement.type;
    var contextTypes = Component.contextTypes;
    if (!contextTypes) {
      return emptyObject;
    }
    var maskedContext = {};
    for (var contextName in contextTypes) {
      maskedContext[contextName] = context[contextName];
    }
    return maskedContext;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function (context) {
    var maskedContext = this._maskContext(context);
    if (process.env.NODE_ENV !== 'production') {
      var Component = this._currentElement.type;
      if (Component.contextTypes) {
        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function (currentContext) {
    var Component = this._currentElement.type;
    var inst = this._instance;
    var childContext;

    if (inst.getChildContext) {
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
        try {
          childContext = inst.getChildContext();
        } finally {
          ReactInstrumentation.debugTool.onEndProcessingChildContext();
        }
      } else {
        childContext = inst.getChildContext();
      }
    }

    if (childContext) {
      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
      if (process.env.NODE_ENV !== 'production') {
        this._checkContextTypes(Component.childContextTypes, childContext, 'childContext');
      }
      for (var name in childContext) {
        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
      }
      return _assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Assert that the context types are valid
   *
   * @param {object} typeSpecs Map of context field to a ReactPropType
   * @param {object} values Runtime values that need to be type-checked
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkContextTypes: function (typeSpecs, values, location) {
    if (process.env.NODE_ENV !== 'production') {
      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
    }
  },

  receiveComponent: function (nextElement, transaction, nextContext) {
    var prevElement = this._currentElement;
    var prevContext = this._context;

    this._pendingElement = null;

    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
  },

  /**
   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (transaction) {
    if (this._pendingElement != null) {
      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
    } else {
      this._updateBatchNumber = null;
    }
  },

  /**
   * Perform an update to a mounted component. The componentWillReceiveProps and
   * shouldComponentUpdate methods are called, then (assuming the update isn't
   * skipped) the remaining update lifecycle methods are called and the DOM
   * representation is updated.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevParentElement
   * @param {ReactElement} nextParentElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
    var inst = this._instance;
    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;

    var willReceive = false;
    var nextContext;

    // Determine if the context has changed or not
    if (this._context === nextUnmaskedContext) {
      nextContext = inst.context;
    } else {
      nextContext = this._processContext(nextUnmaskedContext);
      willReceive = true;
    }

    var prevProps = prevParentElement.props;
    var nextProps = nextParentElement.props;

    // Not a simple state update but a props update
    if (prevParentElement !== nextParentElement) {
      willReceive = true;
    }

    // An update here will schedule an update but immediately set
    // _pendingStateQueue which will ensure that any state updates gets
    // immediately reconciled instead of waiting for the next batch.
    if (willReceive && inst.componentWillReceiveProps) {
      if (process.env.NODE_ENV !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillReceiveProps(nextProps, nextContext);
        }, this._debugID, 'componentWillReceiveProps');
      } else {
        inst.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    var nextState = this._processPendingState(nextProps, nextContext);
    var shouldUpdate = true;

    if (!this._pendingForceUpdate) {
      if (inst.shouldComponentUpdate) {
        if (process.env.NODE_ENV !== 'production') {
          shouldUpdate = measureLifeCyclePerf(function () {
            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
          }, this._debugID, 'shouldComponentUpdate');
        } else {
          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
        }
      } else {
        if (this._compositeType === CompositeTypes.PureClass) {
          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
        }
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
    }

    this._updateBatchNumber = null;
    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state but we shortcut the rest of the update.
      this._currentElement = nextParentElement;
      this._context = nextUnmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;
    }
  },

  _processPendingState: function (props, context) {
    var inst = this._instance;
    var queue = this._pendingStateQueue;
    var replace = this._pendingReplaceState;
    this._pendingReplaceState = false;
    this._pendingStateQueue = null;

    if (!queue) {
      return inst.state;
    }

    if (replace && queue.length === 1) {
      return queue[0];
    }

    var nextState = _assign({}, replace ? queue[0] : inst.state);
    for (var i = replace ? 1 : 0; i < queue.length; i++) {
      var partial = queue[i];
      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
    }

    return nextState;
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @param {?object} unmaskedContext
   * @private
   */
  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
    var _this2 = this;

    var inst = this._instance;

    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
    var prevProps;
    var prevState;
    var prevContext;
    if (hasComponentDidUpdate) {
      prevProps = inst.props;
      prevState = inst.state;
      prevContext = inst.context;
    }

    if (inst.componentWillUpdate) {
      if (process.env.NODE_ENV !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillUpdate(nextProps, nextState, nextContext);
        }, this._debugID, 'componentWillUpdate');
      } else {
        inst.componentWillUpdate(nextProps, nextState, nextContext);
      }
    }

    this._currentElement = nextElement;
    this._context = unmaskedContext;
    inst.props = nextProps;
    inst.state = nextState;
    inst.context = nextContext;

    this._updateRenderedComponent(transaction, unmaskedContext);

    if (hasComponentDidUpdate) {
      if (process.env.NODE_ENV !== 'production') {
        transaction.getReactMountReady().enqueue(function () {
          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
        });
      } else {
        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
      }
    }
  },

  /**
   * Call the component's `render` method and update the DOM accordingly.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  _updateRenderedComponent: function (transaction, context) {
    var prevComponentInstance = this._renderedComponent;
    var prevRenderedElement = prevComponentInstance._currentElement;
    var nextRenderedElement = this._renderValidatedComponent();

    var debugID = 0;
    if (process.env.NODE_ENV !== 'production') {
      debugID = this._debugID;
    }

    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
    } else {
      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
      ReactReconciler.unmountComponent(prevComponentInstance, false);

      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
      this._renderedNodeType = nodeType;
      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
      );
      this._renderedComponent = child;

      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);

      if (process.env.NODE_ENV !== 'production') {
        if (debugID !== 0) {
          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
        }
      }

      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
    }
  },

  /**
   * Overridden in shallow rendering.
   *
   * @protected
   */
  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {
    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
  },

  /**
   * @protected
   */
  _renderValidatedComponentWithoutOwnerOrContext: function () {
    var inst = this._instance;
    var renderedElement;

    if (process.env.NODE_ENV !== 'production') {
      renderedElement = measureLifeCyclePerf(function () {
        return inst.render();
      }, this._debugID, 'render');
    } else {
      renderedElement = inst.render();
    }

    if (process.env.NODE_ENV !== 'production') {
      // We allow auto-mocks to proceed as if they're returning null.
      if (renderedElement === undefined && inst.render._isMockFunction) {
        // This is probably bad practice. Consider warning here and
        // deprecating this convenience.
        renderedElement = null;
      }
    }

    return renderedElement;
  },

  /**
   * @private
   */
  _renderValidatedComponent: function () {
    var renderedElement;
    if (process.env.NODE_ENV !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {
      ReactCurrentOwner.current = this;
      try {
        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
      } finally {
        ReactCurrentOwner.current = null;
      }
    } else {
      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
    }
    !(
    // TODO: An `isValidNode` function would probably be more appropriate
    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;

    return renderedElement;
  },

  /**
   * Lazily allocates the refs object and stores `component` as `ref`.
   *
   * @param {string} ref Reference name.
   * @param {component} component Component to store as `ref`.
   * @final
   * @private
   */
  attachRef: function (ref, component) {
    var inst = this.getPublicInstance();
    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
    var publicComponentInstance = component.getPublicInstance();
    if (process.env.NODE_ENV !== 'production') {
      var componentName = component && component.getName ? component.getName() : 'a component';
      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
    }
    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
    refs[ref] = publicComponentInstance;
  },

  /**
   * Detaches a reference name.
   *
   * @param {string} ref Name to dereference.
   * @final
   * @private
   */
  detachRef: function (ref) {
    var refs = this.getPublicInstance().refs;
    delete refs[ref];
  },

  /**
   * Get a text description of the component that can be used to identify it
   * in error messages.
   * @return {string} The name or null.
   * @internal
   */
  getName: function () {
    var type = this._currentElement.type;
    var constructor = this._instance && this._instance.constructor;
    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
  },

  /**
   * Get the publicly accessible representation of this component - i.e. what
   * is exposed by refs and returned by render. Can be null for stateless
   * components.
   *
   * @return {ReactComponent} the public component instance.
   * @internal
   */
  getPublicInstance: function () {
    var inst = this._instance;
    if (this._compositeType === CompositeTypes.StatelessFunctional) {
      return null;
    }
    return inst;
  },

  // Stub
  _instantiateReactComponent: null

};

module.exports = ReactCompositeComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/



var ReactDOMComponentTree = __webpack_require__(5);
var ReactDefaultInjection = __webpack_require__(188);
var ReactMount = __webpack_require__(77);
var ReactReconciler = __webpack_require__(20);
var ReactUpdates = __webpack_require__(10);
var ReactVersion = __webpack_require__(203);

var findDOMNode = __webpack_require__(220);
var getHostComponentFromComposite = __webpack_require__(83);
var renderSubtreeIntoContainer = __webpack_require__(228);
var warning = __webpack_require__(2);

ReactDefaultInjection.inject();

var ReactDOM = {
  findDOMNode: findDOMNode,
  render: ReactMount.render,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  version: ReactVersion,

  /* eslint-disable camelcase */
  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    ComponentTree: {
      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
      getNodeFromInstance: function (inst) {
        // inst is an internal instance (but could be a composite)
        if (inst._renderedComponent) {
          inst = getHostComponentFromComposite(inst);
        }
        if (inst) {
          return ReactDOMComponentTree.getNodeFromInstance(inst);
        } else {
          return null;
        }
      }
    },
    Mount: ReactMount,
    Reconciler: ReactReconciler
  });
}

if (process.env.NODE_ENV !== 'production') {
  var ExecutionEnvironment = __webpack_require__(6);
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

    // First check if devtools is not installed
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
      // If we're in Chrome or Firefox, provide a download link if not installed.
      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
        // Firefox does not have the issue with devtools loaded over file://
        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
      }
    }

    var testFunc = function testFn() {};
    process.env.NODE_ENV !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, 'It looks like you\'re using a minified copy of the development build ' + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;

    // If we're in IE8, check to see if we are in compatibility mode and provide
    // information on preventing compatibility mode
    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;

    var expectedFeatures = [
    // shims
    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.trim];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
        break;
      }
    }
  }
}

if (process.env.NODE_ENV !== 'production') {
  var ReactInstrumentation = __webpack_require__(8);
  var ReactDOMUnknownPropertyHook = __webpack_require__(185);
  var ReactDOMNullInputValuePropHook = __webpack_require__(179);
  var ReactDOMInvalidARIAHook = __webpack_require__(178);

  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);
  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);
  ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook);
}

module.exports = ReactDOM;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* global hasOwnProperty:true */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var AutoFocusUtils = __webpack_require__(159);
var CSSPropertyOperations = __webpack_require__(161);
var DOMLazyTree = __webpack_require__(19);
var DOMNamespaces = __webpack_require__(38);
var DOMProperty = __webpack_require__(13);
var DOMPropertyOperations = __webpack_require__(70);
var EventPluginHub = __webpack_require__(23);
var EventPluginRegistry = __webpack_require__(27);
var ReactBrowserEventEmitter = __webpack_require__(28);
var ReactDOMComponentFlags = __webpack_require__(71);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactDOMInput = __webpack_require__(177);
var ReactDOMOption = __webpack_require__(180);
var ReactDOMSelect = __webpack_require__(72);
var ReactDOMTextarea = __webpack_require__(183);
var ReactInstrumentation = __webpack_require__(8);
var ReactMultiChild = __webpack_require__(196);
var ReactServerRenderingTransaction = __webpack_require__(201);

var emptyFunction = __webpack_require__(9);
var escapeTextContentForBrowser = __webpack_require__(31);
var invariant = __webpack_require__(1);
var isEventSupported = __webpack_require__(49);
var shallowEqual = __webpack_require__(35);
var validateDOMNesting = __webpack_require__(51);
var warning = __webpack_require__(2);

var Flags = ReactDOMComponentFlags;
var deleteListener = EventPluginHub.deleteListener;
var getNode = ReactDOMComponentTree.getNodeFromInstance;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = EventPluginRegistry.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = { 'string': true, 'number': true };

var STYLE = 'style';
var HTML = '__html';
var RESERVED_PROPS = {
  children: null,
  dangerouslySetInnerHTML: null,
  suppressContentEditableWarning: null
};

// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
var DOC_FRAGMENT_TYPE = 11;

function getDeclarationErrorAddendum(internalInstance) {
  if (internalInstance) {
    var owner = internalInstance._currentElement._owner || null;
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' This DOM node was rendered by `' + name + '`.';
      }
    }
  }
  return '';
}

function friendlyStringify(obj) {
  if (typeof obj === 'object') {
    if (Array.isArray(obj)) {
      return '[' + obj.map(friendlyStringify).join(', ') + ']';
    } else {
      var pairs = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
        }
      }
      return '{' + pairs.join(', ') + '}';
    }
  } else if (typeof obj === 'string') {
    return JSON.stringify(obj);
  } else if (typeof obj === 'function') {
    return '[function object]';
  }
  // Differs from JSON.stringify in that undefined because undefined and that
  // inf and nan don't become null
  return String(obj);
}

var styleMutationWarning = {};

function checkAndWarnForMutatedStyle(style1, style2, component) {
  if (style1 == null || style2 == null) {
    return;
  }
  if (shallowEqual(style1, style2)) {
    return;
  }

  var componentName = component._tag;
  var owner = component._currentElement._owner;
  var ownerName;
  if (owner) {
    ownerName = owner.getName();
  }

  var hash = ownerName + '|' + componentName;

  if (styleMutationWarning.hasOwnProperty(hash)) {
    return;
  }

  styleMutationWarning[hash] = true;

  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
}

/**
 * @param {object} component
 * @param {?object} props
 */
function assertValidProps(component, props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  if (voidElementTags[component._tag]) {
    !(props.children == null && props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
  }
  if (props.dangerouslySetInnerHTML != null) {
    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
  }
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
  }
  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
}

function enqueuePutListener(inst, registrationName, listener, transaction) {
  if (transaction instanceof ReactServerRenderingTransaction) {
    return;
  }
  if (process.env.NODE_ENV !== 'production') {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : void 0;
  }
  var containerInfo = inst._hostContainerInfo;
  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
  listenTo(registrationName, doc);
  transaction.getReactMountReady().enqueue(putListener, {
    inst: inst,
    registrationName: registrationName,
    listener: listener
  });
}

function putListener() {
  var listenerToPut = this;
  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
}

function inputPostMount() {
  var inst = this;
  ReactDOMInput.postMountWrapper(inst);
}

function textareaPostMount() {
  var inst = this;
  ReactDOMTextarea.postMountWrapper(inst);
}

function optionPostMount() {
  var inst = this;
  ReactDOMOption.postMountWrapper(inst);
}

var setAndValidateContentChildDev = emptyFunction;
if (process.env.NODE_ENV !== 'production') {
  setAndValidateContentChildDev = function (content) {
    var hasExistingContent = this._contentDebugID != null;
    var debugID = this._debugID;
    // This ID represents the inlined child that has no backing instance:
    var contentDebugID = -debugID;

    if (content == null) {
      if (hasExistingContent) {
        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
      }
      this._contentDebugID = null;
      return;
    }

    validateDOMNesting(null, String(content), this, this._ancestorInfo);
    this._contentDebugID = contentDebugID;
    if (hasExistingContent) {
      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
    } else {
      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
    }
  };
}

// There are so many media events, it makes sense to just
// maintain a list rather than create a `trapBubbledEvent` for each
var mediaEvents = {
  topAbort: 'abort',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTimeUpdate: 'timeupdate',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting'
};

function trapBubbledEventsLocal() {
  var inst = this;
  // If a component renders to null or if another component fatals and causes
  // the state of the tree to be corrupted, `node` here can be null.
  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
  var node = getNode(inst);
  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;

  switch (inst._tag) {
    case 'iframe':
    case 'object':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
      break;
    case 'video':
    case 'audio':

      inst._wrapperState.listeners = [];
      // Create listener for each media event
      for (var event in mediaEvents) {
        if (mediaEvents.hasOwnProperty(event)) {
          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(event, mediaEvents[event], node));
        }
      }
      break;
    case 'source':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node)];
      break;
    case 'img':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
      break;
    case 'form':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node)];
      break;
    case 'input':
    case 'select':
    case 'textarea':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topInvalid', 'invalid', node)];
      break;
  }
}

function postUpdateSelectWrapper() {
  ReactDOMSelect.postUpdateWrapper(this);
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special-case tags.

var omittedCloseTags = {
  'area': true,
  'base': true,
  'br': true,
  'col': true,
  'embed': true,
  'hr': true,
  'img': true,
  'input': true,
  'keygen': true,
  'link': true,
  'meta': true,
  'param': true,
  'source': true,
  'track': true,
  'wbr': true
};

var newlineEatingTags = {
  'listing': true,
  'pre': true,
  'textarea': true
};

// For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = _assign({
  'menuitem': true
}, omittedCloseTags);

// We accept any tag to be rendered but since this gets injected into arbitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
    validatedTagCache[tag] = true;
  }
}

function isCustomComponent(tagName, props) {
  return tagName.indexOf('-') >= 0 || props.is != null;
}

var globalIdCounter = 1;

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(element) {
  var tag = element.type;
  validateDangerousTag(tag);
  this._currentElement = element;
  this._tag = tag.toLowerCase();
  this._namespaceURI = null;
  this._renderedChildren = null;
  this._previousStyle = null;
  this._previousStyleCopy = null;
  this._hostNode = null;
  this._hostParent = null;
  this._rootNodeID = 0;
  this._domID = 0;
  this._hostContainerInfo = null;
  this._wrapperState = null;
  this._topLevelWrapper = null;
  this._flags = 0;
  if (process.env.NODE_ENV !== 'production') {
    this._ancestorInfo = null;
    setAndValidateContentChildDev.call(this, null);
  }
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?ReactDOMComponent} the parent component instance
   * @param {?object} info about the host container
   * @param {object} context
   * @return {string} The computed markup.
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    this._rootNodeID = globalIdCounter++;
    this._domID = hostContainerInfo._idCounter++;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var props = this._currentElement.props;

    switch (this._tag) {
      case 'audio':
      case 'form':
      case 'iframe':
      case 'img':
      case 'link':
      case 'object':
      case 'source':
      case 'video':
        this._wrapperState = {
          listeners: null
        };
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'input':
        ReactDOMInput.mountWrapper(this, props, hostParent);
        props = ReactDOMInput.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'option':
        ReactDOMOption.mountWrapper(this, props, hostParent);
        props = ReactDOMOption.getHostProps(this, props);
        break;
      case 'select':
        ReactDOMSelect.mountWrapper(this, props, hostParent);
        props = ReactDOMSelect.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'textarea':
        ReactDOMTextarea.mountWrapper(this, props, hostParent);
        props = ReactDOMTextarea.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
    }

    assertValidProps(this, props);

    // We create tags in the namespace of their parent container, except HTML
    // tags get no namespace.
    var namespaceURI;
    var parentTag;
    if (hostParent != null) {
      namespaceURI = hostParent._namespaceURI;
      parentTag = hostParent._tag;
    } else if (hostContainerInfo._tag) {
      namespaceURI = hostContainerInfo._namespaceURI;
      parentTag = hostContainerInfo._tag;
    }
    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
      namespaceURI = DOMNamespaces.html;
    }
    if (namespaceURI === DOMNamespaces.html) {
      if (this._tag === 'svg') {
        namespaceURI = DOMNamespaces.svg;
      } else if (this._tag === 'math') {
        namespaceURI = DOMNamespaces.mathml;
      }
    }
    this._namespaceURI = namespaceURI;

    if (process.env.NODE_ENV !== 'production') {
      var parentInfo;
      if (hostParent != null) {
        parentInfo = hostParent._ancestorInfo;
      } else if (hostContainerInfo._tag) {
        parentInfo = hostContainerInfo._ancestorInfo;
      }
      if (parentInfo) {
        // parentInfo should always be present except for the top-level
        // component when server rendering
        validateDOMNesting(this._tag, null, this, parentInfo);
      }
      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
    }

    var mountImage;
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var el;
      if (namespaceURI === DOMNamespaces.html) {
        if (this._tag === 'script') {
          // Create the script via .innerHTML so its "parser-inserted" flag is
          // set to true and it does not execute
          var div = ownerDocument.createElement('div');
          var type = this._currentElement.type;
          div.innerHTML = '<' + type + '></' + type + '>';
          el = div.removeChild(div.firstChild);
        } else if (props.is) {
          el = ownerDocument.createElement(this._currentElement.type, props.is);
        } else {
          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
          // See discussion in https://github.com/facebook/react/pull/6896
          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
          el = ownerDocument.createElement(this._currentElement.type);
        }
      } else {
        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
      }
      ReactDOMComponentTree.precacheNode(this, el);
      this._flags |= Flags.hasCachedChildNodes;
      if (!this._hostParent) {
        DOMPropertyOperations.setAttributeForRoot(el);
      }
      this._updateDOMProperties(null, props, transaction);
      var lazyTree = DOMLazyTree(el);
      this._createInitialChildren(transaction, props, context, lazyTree);
      mountImage = lazyTree;
    } else {
      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
      var tagContent = this._createContentMarkup(transaction, props, context);
      if (!tagContent && omittedCloseTags[this._tag]) {
        mountImage = tagOpen + '/>';
      } else {
        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
      }
    }

    switch (this._tag) {
      case 'input':
        transaction.getReactMountReady().enqueue(inputPostMount, this);
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'textarea':
        transaction.getReactMountReady().enqueue(textareaPostMount, this);
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'select':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'button':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'option':
        transaction.getReactMountReady().enqueue(optionPostMount, this);
        break;
    }

    return mountImage;
  },

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
    var ret = '<' + this._currentElement.type;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        if (propValue) {
          enqueuePutListener(this, propKey, propValue, transaction);
        }
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            if (process.env.NODE_ENV !== 'production') {
              // See `_updateDOMProperties`. style block
              this._previousStyle = propValue;
            }
            propValue = this._previousStyleCopy = _assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
        }
        var markup = null;
        if (this._tag != null && isCustomComponent(this._tag, props)) {
          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
          }
        } else {
          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        }
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret;
    }

    if (!this._hostParent) {
      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
    }
    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
    return ret;
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @param {object} context
   * @return {string} Content markup.
   */
  _createContentMarkup: function (transaction, props, context) {
    var ret = '';

    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        ret = innerHTML.__html;
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        // TODO: Validate that text is allowed as a child of this node
        ret = escapeTextContentForBrowser(contentToUse);
        if (process.env.NODE_ENV !== 'production') {
          setAndValidateContentChildDev.call(this, contentToUse);
        }
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        ret = mountImages.join('');
      }
    }
    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
      // text/html ignores the first character in these tags if it's a newline
      // Prefer to break application/xml over text/html (for now) by adding
      // a newline specifically to get eaten by the parser. (Alternately for
      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
      // \r is normalized out by HTMLTextAreaElement#value.)
      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
      // See: Parsing of "textarea" "listing" and "pre" elements
      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
      return '\n' + ret;
    } else {
      return ret;
    }
  },

  _createInitialChildren: function (transaction, props, context, lazyTree) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      // TODO: Validate that text is allowed as a child of this node
      if (contentToUse != null) {
        // Avoid setting textContent when the text is empty. In IE11 setting
        // textContent on a text area will cause the placeholder to not
        // show within the textarea until it has been focused and blurred again.
        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
        if (contentToUse !== '') {
          if (process.env.NODE_ENV !== 'production') {
            setAndValidateContentChildDev.call(this, contentToUse);
          }
          DOMLazyTree.queueText(lazyTree, contentToUse);
        }
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        for (var i = 0; i < mountImages.length; i++) {
          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
        }
      }
    }
  },

  /**
   * Receives a next element and updates the component.
   *
   * @internal
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   */
  receiveComponent: function (nextElement, transaction, context) {
    var prevElement = this._currentElement;
    this._currentElement = nextElement;
    this.updateComponent(transaction, prevElement, nextElement, context);
  },

  /**
   * Updates a DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @param {ReactElement} nextElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevElement, nextElement, context) {
    var lastProps = prevElement.props;
    var nextProps = this._currentElement.props;

    switch (this._tag) {
      case 'input':
        lastProps = ReactDOMInput.getHostProps(this, lastProps);
        nextProps = ReactDOMInput.getHostProps(this, nextProps);
        break;
      case 'option':
        lastProps = ReactDOMOption.getHostProps(this, lastProps);
        nextProps = ReactDOMOption.getHostProps(this, nextProps);
        break;
      case 'select':
        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
        break;
      case 'textarea':
        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
        break;
    }

    assertValidProps(this, nextProps);
    this._updateDOMProperties(lastProps, nextProps, transaction);
    this._updateDOMChildren(lastProps, nextProps, transaction, context);

    switch (this._tag) {
      case 'input':
        // Update the wrapper around inputs *after* updating props. This has to
        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
        // raise warnings and prevent the new value from being assigned.
        ReactDOMInput.updateWrapper(this);
        break;
      case 'textarea':
        ReactDOMTextarea.updateWrapper(this);
        break;
      case 'select':
        // <select> value update needs to occur after <option> children
        // reconciliation
        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
        break;
    }
  },

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {?DOMElement} node
   */
  _updateDOMProperties: function (lastProps, nextProps, transaction) {
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = this._previousStyleCopy;
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
        this._previousStyleCopy = null;
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (lastProps[propKey]) {
          // Only call deleteListener if there was a listener previously or
          // else willDeleteListener gets called when there wasn't actually a
          // listener (e.g., onClick={null})
          deleteListener(this, propKey);
        }
      } else if (isCustomComponent(this._tag, lastProps)) {
        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          if (process.env.NODE_ENV !== 'production') {
            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
            this._previousStyle = nextProp;
          }
          nextProp = this._previousStyleCopy = _assign({}, nextProp);
        } else {
          this._previousStyleCopy = null;
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (nextProp) {
          enqueuePutListener(this, propKey, nextProp, transaction);
        } else if (lastProp) {
          deleteListener(this, propKey);
        }
      } else if (isCustomComponent(this._tag, nextProps)) {
        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        var node = getNode(this);
        // If we're updating to null or undefined, we should remove the property
        // from the DOM node instead of inadvertently setting to a string. This
        // brings us in line with the same behavior we have on initial render.
        if (nextProp != null) {
          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
        } else {
          DOMPropertyOperations.deleteValueForProperty(node, propKey);
        }
      }
    }
    if (styleUpdates) {
      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   */
  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction, context);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
      }
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
        if (process.env.NODE_ENV !== 'production') {
          setAndValidateContentChildDev.call(this, nextContent);
        }
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        this.updateMarkup('' + nextHtml);
      }
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
      }
    } else if (nextChildren != null) {
      if (process.env.NODE_ENV !== 'production') {
        setAndValidateContentChildDev.call(this, null);
      }

      this.updateChildren(nextChildren, transaction, context);
    }
  },

  getHostNode: function () {
    return getNode(this);
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function (safely) {
    switch (this._tag) {
      case 'audio':
      case 'form':
      case 'iframe':
      case 'img':
      case 'link':
      case 'object':
      case 'source':
      case 'video':
        var listeners = this._wrapperState.listeners;
        if (listeners) {
          for (var i = 0; i < listeners.length; i++) {
            listeners[i].remove();
          }
        }
        break;
      case 'html':
      case 'head':
      case 'body':
        /**
         * Components like <html> <head> and <body> can't be removed or added
         * easily in a cross-browser way, however it's valuable to be able to
         * take advantage of React's reconciliation for styling and <title>
         * management. So we just document it and throw in dangerous cases.
         */
         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
        break;
    }

    this.unmountChildren(safely);
    ReactDOMComponentTree.uncacheNode(this);
    EventPluginHub.deleteAllListeners(this);
    this._rootNodeID = 0;
    this._domID = 0;
    this._wrapperState = null;

    if (process.env.NODE_ENV !== 'production') {
      setAndValidateContentChildDev.call(this, null);
    }
  },

  getPublicInstance: function () {
    return getNode(this);
  }

};

_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

module.exports = ReactDOMComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var validateDOMNesting = __webpack_require__(51);

var DOC_NODE_TYPE = 9;

function ReactDOMContainerInfo(topLevelWrapper, node) {
  var info = {
    _topLevelWrapper: topLevelWrapper,
    _idCounter: 1,
    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
    _node: node,
    _tag: node ? node.nodeName.toLowerCase() : null,
    _namespaceURI: node ? node.namespaceURI : null
  };
  if (process.env.NODE_ENV !== 'production') {
    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
  }
  return info;
}

module.exports = ReactDOMContainerInfo;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var DOMLazyTree = __webpack_require__(19);
var ReactDOMComponentTree = __webpack_require__(5);

var ReactDOMEmptyComponent = function (instantiate) {
  // ReactCompositeComponent uses this:
  this._currentElement = null;
  // ReactDOMComponentTree uses these:
  this._hostNode = null;
  this._hostParent = null;
  this._hostContainerInfo = null;
  this._domID = 0;
};
_assign(ReactDOMEmptyComponent.prototype, {
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    var domID = hostContainerInfo._idCounter++;
    this._domID = domID;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var nodeValue = ' react-empty: ' + this._domID + ' ';
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var node = ownerDocument.createComment(nodeValue);
      ReactDOMComponentTree.precacheNode(this, node);
      return DOMLazyTree(node);
    } else {
      if (transaction.renderToStaticMarkup) {
        // Normally we'd insert a comment node, but since this is a situation
        // where React won't take over (static pages), we can simply return
        // nothing.
        return '';
      }
      return '<!--' + nodeValue + '-->';
    }
  },
  receiveComponent: function () {},
  getHostNode: function () {
    return ReactDOMComponentTree.getNodeFromInstance(this);
  },
  unmountComponent: function () {
    ReactDOMComponentTree.uncacheNode(this);
  }
});

module.exports = ReactDOMEmptyComponent;

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMFeatureFlags = {
  useCreateElement: true,
  useFiber: false
};

module.exports = ReactDOMFeatureFlags;

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMChildrenOperations = __webpack_require__(37);
var ReactDOMComponentTree = __webpack_require__(5);

/**
 * Operations used to process updates to DOM nodes.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
    DOMChildrenOperations.processUpdates(node, updates);
  }
};

module.exports = ReactDOMIDOperations;

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var DOMPropertyOperations = __webpack_require__(70);
var LinkedValueUtils = __webpack_require__(41);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactUpdates = __webpack_require__(10);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var didWarnValueLink = false;
var didWarnCheckedLink = false;
var didWarnValueDefaultValue = false;
var didWarnCheckedDefaultChecked = false;
var didWarnControlledToUncontrolled = false;
var didWarnUncontrolledToControlled = false;

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMInput.updateWrapper(this);
  }
}

function isControlled(props) {
  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
  return usesChecked ? props.checked != null : props.value != null;
}

/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = {
  getHostProps: function (inst, props) {
    var value = LinkedValueUtils.getValue(props);
    var checked = LinkedValueUtils.getChecked(props);

    var hostProps = _assign({
      // Make sure we set .type before any other properties (setting .value
      // before .type means .value is lost in IE11 and below)
      type: undefined,
      // Make sure we set .step before .value (setting .value before .step
      // means .value is rounded on mount, based upon step precision)
      step: undefined,
      // Make sure we set .min & .max before .value (to ensure proper order
      // in corner cases such as min or max deriving from value, e.g. Issue #7170)
      min: undefined,
      max: undefined
    }, props, {
      defaultChecked: undefined,
      defaultValue: undefined,
      value: value != null ? value : inst._wrapperState.initialValue,
      checked: checked != null ? checked : inst._wrapperState.initialChecked,
      onChange: inst._wrapperState.onChange
    });

    return hostProps;
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);

      var owner = inst._currentElement._owner;

      if (props.valueLink !== undefined && !didWarnValueLink) {
        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnValueLink = true;
      }
      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnCheckedLink = true;
      }
      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnCheckedDefaultChecked = true;
      }
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnValueDefaultValue = true;
      }
    }

    var defaultValue = props.defaultValue;
    inst._wrapperState = {
      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
      initialValue: props.value != null ? props.value : defaultValue,
      listeners: null,
      onChange: _handleChange.bind(inst)
    };

    if (process.env.NODE_ENV !== 'production') {
      inst._wrapperState.controlled = isControlled(props);
    }
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    if (process.env.NODE_ENV !== 'production') {
      var controlled = isControlled(props);
      var owner = inst._currentElement._owner;

      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnUncontrolledToControlled = true;
      }
      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnControlledToUncontrolled = true;
      }
    }

    // TODO: Shouldn't this be getChecked(props)?
    var checked = props.checked;
    if (checked != null) {
      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
    }

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {

      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      var newValue = '' + value;

      // To avoid side effects (such as losing text selection), only set value if changed
      if (newValue !== node.value) {
        node.value = newValue;
      }
    } else {
      if (props.value == null && props.defaultValue != null) {
        // In Chrome, assigning defaultValue to certain input types triggers input validation.
        // For number inputs, the display value loses trailing decimal points. For email inputs,
        // Chrome raises "The specified value <x> is not a valid email address".
        //
        // Here we check to see if the defaultValue has actually changed, avoiding these problems
        // when the user is inputting text
        //
        // https://github.com/facebook/react/issues/7253
        if (node.defaultValue !== '' + props.defaultValue) {
          node.defaultValue = '' + props.defaultValue;
        }
      }
      if (props.checked == null && props.defaultChecked != null) {
        node.defaultChecked = !!props.defaultChecked;
      }
    }
  },

  postMountWrapper: function (inst) {
    var props = inst._currentElement.props;

    // This is in postMount because we need access to the DOM node, which is not
    // available until after the component has mounted.
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);

    // Detach value from defaultValue. We won't do anything if we're working on
    // submit or reset inputs as those values & defaultValues are linked. They
    // are not resetable nodes so this operation doesn't matter and actually
    // removes browser-default values (eg "Submit Query") when no value is
    // provided.

    switch (props.type) {
      case 'submit':
      case 'reset':
        break;
      case 'color':
      case 'date':
      case 'datetime':
      case 'datetime-local':
      case 'month':
      case 'time':
      case 'week':
        // This fixes the no-show issue on iOS Safari and Android Chrome:
        // https://github.com/facebook/react/issues/7233
        node.value = '';
        node.value = node.defaultValue;
        break;
      default:
        node.value = node.value;
        break;
    }

    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
    // this is needed to work around a chrome bug where setting defaultChecked
    // will sometimes influence the value of checked (even after detachment).
    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
    // We need to temporarily unset name to avoid disrupting radio button groups.
    var name = node.name;
    if (name !== '') {
      node.name = '';
    }
    node.defaultChecked = !node.defaultChecked;
    node.defaultChecked = !node.defaultChecked;
    if (name !== '') {
      node.name = name;
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;

  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  // Here we use asap to wait until all updates have propagated, which
  // is important when using controlled components within layers:
  // https://github.com/facebook/react/issues/1698
  ReactUpdates.asap(forceUpdateIfMounted, this);

  var name = props.name;
  if (props.type === 'radio' && name != null) {
    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    }

    // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form, let's just use the global
    // `querySelectorAll` to ensure we don't miss anything.
    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];
      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      }
      // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React radio buttons with non-React ones.
      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
      // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.
      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
    }
  }

  return returnValue;
}

module.exports = ReactDOMInput;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(13);
var ReactComponentTreeHook = __webpack_require__(7);

var warning = __webpack_require__(2);

var warnedProperties = {};
var rARIA = new RegExp('^(aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');

function validateProperty(tagName, name, debugID) {
  if (warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
    return true;
  }

  if (rARIA.test(name)) {
    var lowerCasedName = name.toLowerCase();
    var standardName = DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

    // If this is an aria-* attribute, but is not listed in the known DOM
    // DOM properties, then it is an invalid aria-* attribute.
    if (standardName == null) {
      warnedProperties[name] = true;
      return false;
    }
    // aria-* attributes should be lowercase; suggest the lowercase version.
    if (name !== standardName) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown ARIA attribute %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      warnedProperties[name] = true;
      return true;
    }
  }

  return true;
}

function warnInvalidARIAProps(debugID, element) {
  var invalidProps = [];

  for (var key in element.props) {
    var isValid = validateProperty(element.type, key, debugID);
    if (!isValid) {
      invalidProps.push(key);
    }
  }

  var unknownPropString = invalidProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (invalidProps.length === 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  } else if (invalidProps.length > 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  }
}

function handleElement(debugID, element) {
  if (element == null || typeof element.type !== 'string') {
    return;
  }
  if (element.type.indexOf('-') >= 0 || element.props.is) {
    return;
  }

  warnInvalidARIAProps(debugID, element);
}

var ReactDOMInvalidARIAHook = {
  onBeforeMountComponent: function (debugID, element) {
    if (process.env.NODE_ENV !== 'production') {
      handleElement(debugID, element);
    }
  },
  onBeforeUpdateComponent: function (debugID, element) {
    if (process.env.NODE_ENV !== 'production') {
      handleElement(debugID, element);
    }
  }
};

module.exports = ReactDOMInvalidARIAHook;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactComponentTreeHook = __webpack_require__(7);

var warning = __webpack_require__(2);

var didWarnValueNull = false;

function handleElement(debugID, element) {
  if (element == null) {
    return;
  }
  if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {
    return;
  }
  if (element.props != null && element.props.value === null && !didWarnValueNull) {
    process.env.NODE_ENV !== 'production' ? warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;

    didWarnValueNull = true;
  }
}

var ReactDOMNullInputValuePropHook = {
  onBeforeMountComponent: function (debugID, element) {
    handleElement(debugID, element);
  },
  onBeforeUpdateComponent: function (debugID, element) {
    handleElement(debugID, element);
  }
};

module.exports = ReactDOMNullInputValuePropHook;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var React = __webpack_require__(21);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactDOMSelect = __webpack_require__(72);

var warning = __webpack_require__(2);
var didWarnInvalidOptionChildren = false;

function flattenChildren(children) {
  var content = '';

  // Flatten children and warn if they aren't strings or numbers;
  // invalid types are ignored.
  React.Children.forEach(children, function (child) {
    if (child == null) {
      return;
    }
    if (typeof child === 'string' || typeof child === 'number') {
      content += child;
    } else if (!didWarnInvalidOptionChildren) {
      didWarnInvalidOptionChildren = true;
      process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
    }
  });

  return content;
}

/**
 * Implements an <option> host component that warns when `selected` is set.
 */
var ReactDOMOption = {
  mountWrapper: function (inst, props, hostParent) {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
    }

    // Look up whether this option is 'selected'
    var selectValue = null;
    if (hostParent != null) {
      var selectParent = hostParent;

      if (selectParent._tag === 'optgroup') {
        selectParent = selectParent._hostParent;
      }

      if (selectParent != null && selectParent._tag === 'select') {
        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
      }
    }

    // If the value is null (e.g., no specified value or after initial mount)
    // or missing (e.g., for <datalist>), we don't change props.selected
    var selected = null;
    if (selectValue != null) {
      var value;
      if (props.value != null) {
        value = props.value + '';
      } else {
        value = flattenChildren(props.children);
      }
      selected = false;
      if (Array.isArray(selectValue)) {
        // multiple
        for (var i = 0; i < selectValue.length; i++) {
          if ('' + selectValue[i] === value) {
            selected = true;
            break;
          }
        }
      } else {
        selected = '' + selectValue === value;
      }
    }

    inst._wrapperState = { selected: selected };
  },

  postMountWrapper: function (inst) {
    // value="" should make a value attribute (#6219)
    var props = inst._currentElement.props;
    if (props.value != null) {
      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
      node.setAttribute('value', props.value);
    }
  },

  getHostProps: function (inst, props) {
    var hostProps = _assign({ selected: undefined, children: undefined }, props);

    // Read state only from initial mount because <select> updates value
    // manually; we need the initial state only for server rendering
    if (inst._wrapperState.selected != null) {
      hostProps.selected = inst._wrapperState.selected;
    }

    var content = flattenChildren(props.children);

    if (content) {
      hostProps.children = content;
    }

    return hostProps;
  }

};

module.exports = ReactDOMOption;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);

var getNodeForCharacterOffset = __webpack_require__(225);
var getTextContentAccessor = __webpack_require__(84);

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // In Firefox, range.startContainer and range.endContainer can be "anonymous
  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
  // divs do not seem to expose properties, triggering a "Permission denied
  // error" if any of its properties are accessed. The only seemingly possible
  // way to avoid erroring is to access a property that typically works for
  // non-anonymous divs and catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
  try {
    /* eslint-disable no-unused-expressions */
    currentRange.startContainer.nodeType;
    currentRange.endContainer.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (offsets.end === undefined) {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var DOMChildrenOperations = __webpack_require__(37);
var DOMLazyTree = __webpack_require__(19);
var ReactDOMComponentTree = __webpack_require__(5);

var escapeTextContentForBrowser = __webpack_require__(31);
var invariant = __webpack_require__(1);
var validateDOMNesting = __webpack_require__(51);

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings between comment nodes so that they
 * can undergo the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactDOMTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactDOMTextComponent = function (text) {
  // TODO: This is really a ReactText (ReactNode), not a ReactElement
  this._currentElement = text;
  this._stringText = '' + text;
  // ReactDOMComponentTree uses these:
  this._hostNode = null;
  this._hostParent = null;

  // Properties
  this._domID = 0;
  this._mountIndex = 0;
  this._closingComment = null;
  this._commentNodes = null;
};

_assign(ReactDOMTextComponent.prototype, {

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    if (process.env.NODE_ENV !== 'production') {
      var parentInfo;
      if (hostParent != null) {
        parentInfo = hostParent._ancestorInfo;
      } else if (hostContainerInfo != null) {
        parentInfo = hostContainerInfo._ancestorInfo;
      }
      if (parentInfo) {
        // parentInfo should always be present except for the top-level
        // component when server rendering
        validateDOMNesting(null, this._stringText, this, parentInfo);
      }
    }

    var domID = hostContainerInfo._idCounter++;
    var openingValue = ' react-text: ' + domID + ' ';
    var closingValue = ' /react-text ';
    this._domID = domID;
    this._hostParent = hostParent;
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var openingComment = ownerDocument.createComment(openingValue);
      var closingComment = ownerDocument.createComment(closingValue);
      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
      if (this._stringText) {
        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
      }
      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
      ReactDOMComponentTree.precacheNode(this, openingComment);
      this._closingComment = closingComment;
      return lazyTree;
    } else {
      var escapedText = escapeTextContentForBrowser(this._stringText);

      if (transaction.renderToStaticMarkup) {
        // Normally we'd wrap this between comment nodes for the reasons stated
        // above, but since this is a situation where React won't take over
        // (static pages), we can simply return the text as it is.
        return escapedText;
      }

      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
    }
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {ReactText} nextText The next text content
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function (nextText, transaction) {
    if (nextText !== this._currentElement) {
      this._currentElement = nextText;
      var nextStringText = '' + nextText;
      if (nextStringText !== this._stringText) {
        // TODO: Save this as pending props and use performUpdateIfNecessary
        // and/or updateComponent to do the actual update for consistency with
        // other component types?
        this._stringText = nextStringText;
        var commentNodes = this.getHostNode();
        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
      }
    }
  },

  getHostNode: function () {
    var hostNode = this._commentNodes;
    if (hostNode) {
      return hostNode;
    }
    if (!this._closingComment) {
      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
      var node = openingComment.nextSibling;
      while (true) {
        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
          this._closingComment = node;
          break;
        }
        node = node.nextSibling;
      }
    }
    hostNode = [this._hostNode, this._closingComment];
    this._commentNodes = hostNode;
    return hostNode;
  },

  unmountComponent: function () {
    this._closingComment = null;
    this._commentNodes = null;
    ReactDOMComponentTree.uncacheNode(this);
  }

});

module.exports = ReactDOMTextComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var LinkedValueUtils = __webpack_require__(41);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactUpdates = __webpack_require__(10);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var didWarnValueLink = false;
var didWarnValDefaultVal = false;

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMTextarea.updateWrapper(this);
  }
}

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = {
  getHostProps: function (inst, props) {
    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.  We could add a check in setTextContent
    // to only set the value if/when the value differs from the node value (which would
    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
    // The value can be a boolean or object so that's why it's forced to be a string.
    var hostProps = _assign({}, props, {
      value: undefined,
      defaultValue: undefined,
      children: '' + inst._wrapperState.initialValue,
      onChange: inst._wrapperState.onChange
    });

    return hostProps;
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
      if (props.valueLink !== undefined && !didWarnValueLink) {
        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnValueLink = true;
      }
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
        didWarnValDefaultVal = true;
      }
    }

    var value = LinkedValueUtils.getValue(props);
    var initialValue = value;

    // Only bother fetching default value if we're going to use it
    if (value == null) {
      var defaultValue = props.defaultValue;
      // TODO (yungsters): Remove support for children content in <textarea>.
      var children = props.children;
      if (children != null) {
        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
        }
        !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
        if (Array.isArray(children)) {
          !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
          children = children[0];
        }

        defaultValue = '' + children;
      }
      if (defaultValue == null) {
        defaultValue = '';
      }
      initialValue = defaultValue;
    }

    inst._wrapperState = {
      initialValue: '' + initialValue,
      listeners: null,
      onChange: _handleChange.bind(inst)
    };
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      var newValue = '' + value;

      // To avoid side effects (such as losing text selection), only set value if changed
      if (newValue !== node.value) {
        node.value = newValue;
      }
      if (props.defaultValue == null) {
        node.defaultValue = newValue;
      }
    }
    if (props.defaultValue != null) {
      node.defaultValue = props.defaultValue;
    }
  },

  postMountWrapper: function (inst) {
    // This is in postMount because we need access to the DOM node, which is not
    // available until after the component has mounted.
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var textContent = node.textContent;

    // Only set node.value if textContent is equal to the expected
    // initial value. In IE10/IE11 there is a bug where the placeholder attribute
    // will populate textContent as well.
    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
    if (textContent === inst._wrapperState.initialValue) {
      node.value = textContent;
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);
  ReactUpdates.asap(forceUpdateIfMounted, this);
  return returnValue;
}

module.exports = ReactDOMTextarea;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */
function getLowestCommonAncestor(instA, instB) {
  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

  var depthA = 0;
  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
    depthA++;
  }
  var depthB = 0;
  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
    depthB++;
  }

  // If A is deeper, crawl up.
  while (depthA - depthB > 0) {
    instA = instA._hostParent;
    depthA--;
  }

  // If B is deeper, crawl up.
  while (depthB - depthA > 0) {
    instB = instB._hostParent;
    depthB--;
  }

  // Walk in lockstep until we find a match.
  var depth = depthA;
  while (depth--) {
    if (instA === instB) {
      return instA;
    }
    instA = instA._hostParent;
    instB = instB._hostParent;
  }
  return null;
}

/**
 * Return if A is an ancestor of B.
 */
function isAncestor(instA, instB) {
  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;

  while (instB) {
    if (instB === instA) {
      return true;
    }
    instB = instB._hostParent;
  }
  return false;
}

/**
 * Return the parent instance of the passed-in instance.
 */
function getParentInstance(inst) {
  !('_hostNode' in inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;

  return inst._hostParent;
}

/**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */
function traverseTwoPhase(inst, fn, arg) {
  var path = [];
  while (inst) {
    path.push(inst);
    inst = inst._hostParent;
  }
  var i;
  for (i = path.length; i-- > 0;) {
    fn(path[i], 'captured', arg);
  }
  for (i = 0; i < path.length; i++) {
    fn(path[i], 'bubbled', arg);
  }
}

/**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */
function traverseEnterLeave(from, to, fn, argFrom, argTo) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;
  var pathFrom = [];
  while (from && from !== common) {
    pathFrom.push(from);
    from = from._hostParent;
  }
  var pathTo = [];
  while (to && to !== common) {
    pathTo.push(to);
    to = to._hostParent;
  }
  var i;
  for (i = 0; i < pathFrom.length; i++) {
    fn(pathFrom[i], 'bubbled', argFrom);
  }
  for (i = pathTo.length; i-- > 0;) {
    fn(pathTo[i], 'captured', argTo);
  }
}

module.exports = {
  isAncestor: isAncestor,
  getLowestCommonAncestor: getLowestCommonAncestor,
  getParentInstance: getParentInstance,
  traverseTwoPhase: traverseTwoPhase,
  traverseEnterLeave: traverseEnterLeave
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(13);
var EventPluginRegistry = __webpack_require__(27);
var ReactComponentTreeHook = __webpack_require__(7);

var warning = __webpack_require__(2);

if (process.env.NODE_ENV !== 'production') {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true,

    autoFocus: true,
    defaultValue: true,
    valueLink: true,
    defaultChecked: true,
    checkedLink: true,
    innerHTML: true,
    suppressContentEditableWarning: true,
    onFocusIn: true,
    onFocusOut: true
  };
  var warnedProperties = {};

  var validateProperty = function (tagName, name, debugID) {
    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
      return true;
    }
    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return true;
    }
    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {
      return true;
    }
    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;

    if (standardName != null) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      return true;
    } else if (registrationName != null) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      return true;
    } else {
      // We were unable to guess which prop the user intended.
      // It is likely that the user was just blindly spreading/forwarding props
      // Components should be careful to only render valid props/attributes.
      // Warning will be invoked in warnUnknownProperties to allow grouping.
      return false;
    }
  };
}

var warnUnknownProperties = function (debugID, element) {
  var unknownProps = [];
  for (var key in element.props) {
    var isValid = validateProperty(element.type, key, debugID);
    if (!isValid) {
      unknownProps.push(key);
    }
  }

  var unknownPropString = unknownProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (unknownProps.length === 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  } else if (unknownProps.length > 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  }
};

function handleElement(debugID, element) {
  if (element == null || typeof element.type !== 'string') {
    return;
  }
  if (element.type.indexOf('-') >= 0 || element.props.is) {
    return;
  }
  warnUnknownProperties(debugID, element);
}

var ReactDOMUnknownPropertyHook = {
  onBeforeMountComponent: function (debugID, element) {
    handleElement(debugID, element);
  },
  onBeforeUpdateComponent: function (debugID, element) {
    handleElement(debugID, element);
  }
};

module.exports = ReactDOMUnknownPropertyHook;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactInvalidSetStateWarningHook = __webpack_require__(194);
var ReactHostOperationHistoryHook = __webpack_require__(192);
var ReactComponentTreeHook = __webpack_require__(7);
var ExecutionEnvironment = __webpack_require__(6);

var performanceNow = __webpack_require__(129);
var warning = __webpack_require__(2);

var hooks = [];
var didHookThrowForEvent = {};

function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
  try {
    fn.call(context, arg1, arg2, arg3, arg4, arg5);
  } catch (e) {
    process.env.NODE_ENV !== 'production' ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack) : void 0;
    didHookThrowForEvent[event] = true;
  }
}

function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
  for (var i = 0; i < hooks.length; i++) {
    var hook = hooks[i];
    var fn = hook[event];
    if (fn) {
      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
    }
  }
}

var isProfiling = false;
var flushHistory = [];
var lifeCycleTimerStack = [];
var currentFlushNesting = 0;
var currentFlushMeasurements = [];
var currentFlushStartTime = 0;
var currentTimerDebugID = null;
var currentTimerStartTime = 0;
var currentTimerNestedFlushDuration = 0;
var currentTimerType = null;

var lifeCycleTimerHasWarned = false;

function clearHistory() {
  ReactComponentTreeHook.purgeUnmountedComponents();
  ReactHostOperationHistoryHook.clearHistory();
}

function getTreeSnapshot(registeredIDs) {
  return registeredIDs.reduce(function (tree, id) {
    var ownerID = ReactComponentTreeHook.getOwnerID(id);
    var parentID = ReactComponentTreeHook.getParentID(id);
    tree[id] = {
      displayName: ReactComponentTreeHook.getDisplayName(id),
      text: ReactComponentTreeHook.getText(id),
      updateCount: ReactComponentTreeHook.getUpdateCount(id),
      childIDs: ReactComponentTreeHook.getChildIDs(id),
      // Text nodes don't have owners but this is close enough.
      ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
      parentID: parentID
    };
    return tree;
  }, {});
}

function resetMeasurements() {
  var previousStartTime = currentFlushStartTime;
  var previousMeasurements = currentFlushMeasurements;
  var previousOperations = ReactHostOperationHistoryHook.getHistory();

  if (currentFlushNesting === 0) {
    currentFlushStartTime = 0;
    currentFlushMeasurements = [];
    clearHistory();
    return;
  }

  if (previousMeasurements.length || previousOperations.length) {
    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
    flushHistory.push({
      duration: performanceNow() - previousStartTime,
      measurements: previousMeasurements || [],
      operations: previousOperations || [],
      treeSnapshot: getTreeSnapshot(registeredIDs)
    });
  }

  clearHistory();
  currentFlushStartTime = performanceNow();
  currentFlushMeasurements = [];
}

function checkDebugID(debugID) {
  var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (allowRoot && debugID === 0) {
    return;
  }
  if (!debugID) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;
  }
}

function beginLifeCycleTimer(debugID, timerType) {
  if (currentFlushNesting === 0) {
    return;
  }
  if (currentTimerType && !lifeCycleTimerHasWarned) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
    lifeCycleTimerHasWarned = true;
  }
  currentTimerStartTime = performanceNow();
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;
}

function endLifeCycleTimer(debugID, timerType) {
  if (currentFlushNesting === 0) {
    return;
  }
  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
    lifeCycleTimerHasWarned = true;
  }
  if (isProfiling) {
    currentFlushMeasurements.push({
      timerType: timerType,
      instanceID: debugID,
      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
    });
  }
  currentTimerStartTime = 0;
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = null;
  currentTimerType = null;
}

function pauseCurrentLifeCycleTimer() {
  var currentTimer = {
    startTime: currentTimerStartTime,
    nestedFlushStartTime: performanceNow(),
    debugID: currentTimerDebugID,
    timerType: currentTimerType
  };
  lifeCycleTimerStack.push(currentTimer);
  currentTimerStartTime = 0;
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = null;
  currentTimerType = null;
}

function resumeCurrentLifeCycleTimer() {
  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
      startTime = _lifeCycleTimerStack$.startTime,
      nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
      debugID = _lifeCycleTimerStack$.debugID,
      timerType = _lifeCycleTimerStack$.timerType;

  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
  currentTimerStartTime = startTime;
  currentTimerNestedFlushDuration += nestedFlushDuration;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;
}

var lastMarkTimeStamp = 0;
var canUsePerformanceMeasure =
// $FlowFixMe https://github.com/facebook/flow/issues/2345
typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

function shouldMark(debugID) {
  if (!isProfiling || !canUsePerformanceMeasure) {
    return false;
  }
  var element = ReactComponentTreeHook.getElement(debugID);
  if (element == null || typeof element !== 'object') {
    return false;
  }
  var isHostElement = typeof element.type === 'string';
  if (isHostElement) {
    return false;
  }
  return true;
}

function markBegin(debugID, markType) {
  if (!shouldMark(debugID)) {
    return;
  }

  var markName = debugID + '::' + markType;
  lastMarkTimeStamp = performanceNow();
  performance.mark(markName);
}

function markEnd(debugID, markType) {
  if (!shouldMark(debugID)) {
    return;
  }

  var markName = debugID + '::' + markType;
  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';

  // Chrome has an issue of dropping markers recorded too fast:
  // https://bugs.chromium.org/p/chromium/issues/detail?id=640652
  // To work around this, we will not report very small measurements.
  // I determined the magic number by tweaking it back and forth.
  // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.
  // When the bug is fixed, we can `measure()` unconditionally if we want to.
  var timeStamp = performanceNow();
  if (timeStamp - lastMarkTimeStamp > 0.1) {
    var measurementName = displayName + ' [' + markType + ']';
    performance.measure(measurementName, markName);
  }

  performance.clearMarks(markName);
  performance.clearMeasures(measurementName);
}

var ReactDebugTool = {
  addHook: function (hook) {
    hooks.push(hook);
  },
  removeHook: function (hook) {
    for (var i = 0; i < hooks.length; i++) {
      if (hooks[i] === hook) {
        hooks.splice(i, 1);
        i--;
      }
    }
  },
  isProfiling: function () {
    return isProfiling;
  },
  beginProfiling: function () {
    if (isProfiling) {
      return;
    }

    isProfiling = true;
    flushHistory.length = 0;
    resetMeasurements();
    ReactDebugTool.addHook(ReactHostOperationHistoryHook);
  },
  endProfiling: function () {
    if (!isProfiling) {
      return;
    }

    isProfiling = false;
    resetMeasurements();
    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
  },
  getFlushHistory: function () {
    return flushHistory;
  },
  onBeginFlush: function () {
    currentFlushNesting++;
    resetMeasurements();
    pauseCurrentLifeCycleTimer();
    emitEvent('onBeginFlush');
  },
  onEndFlush: function () {
    resetMeasurements();
    currentFlushNesting--;
    resumeCurrentLifeCycleTimer();
    emitEvent('onEndFlush');
  },
  onBeginLifeCycleTimer: function (debugID, timerType) {
    checkDebugID(debugID);
    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
    markBegin(debugID, timerType);
    beginLifeCycleTimer(debugID, timerType);
  },
  onEndLifeCycleTimer: function (debugID, timerType) {
    checkDebugID(debugID);
    endLifeCycleTimer(debugID, timerType);
    markEnd(debugID, timerType);
    emitEvent('onEndLifeCycleTimer', debugID, timerType);
  },
  onBeginProcessingChildContext: function () {
    emitEvent('onBeginProcessingChildContext');
  },
  onEndProcessingChildContext: function () {
    emitEvent('onEndProcessingChildContext');
  },
  onHostOperation: function (operation) {
    checkDebugID(operation.instanceID);
    emitEvent('onHostOperation', operation);
  },
  onSetState: function () {
    emitEvent('onSetState');
  },
  onSetChildren: function (debugID, childDebugIDs) {
    checkDebugID(debugID);
    childDebugIDs.forEach(checkDebugID);
    emitEvent('onSetChildren', debugID, childDebugIDs);
  },
  onBeforeMountComponent: function (debugID, element, parentDebugID) {
    checkDebugID(debugID);
    checkDebugID(parentDebugID, true);
    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
    markBegin(debugID, 'mount');
  },
  onMountComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'mount');
    emitEvent('onMountComponent', debugID);
  },
  onBeforeUpdateComponent: function (debugID, element) {
    checkDebugID(debugID);
    emitEvent('onBeforeUpdateComponent', debugID, element);
    markBegin(debugID, 'update');
  },
  onUpdateComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'update');
    emitEvent('onUpdateComponent', debugID);
  },
  onBeforeUnmountComponent: function (debugID) {
    checkDebugID(debugID);
    emitEvent('onBeforeUnmountComponent', debugID);
    markBegin(debugID, 'unmount');
  },
  onUnmountComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'unmount');
    emitEvent('onUnmountComponent', debugID);
  },
  onTestEvent: function () {
    emitEvent('onTestEvent');
  }
};

// TODO remove these when RN/www gets updated
ReactDebugTool.addDevtool = ReactDebugTool.addHook;
ReactDebugTool.removeDevtool = ReactDebugTool.removeHook;

ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
ReactDebugTool.addHook(ReactComponentTreeHook);
var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
if (/[?&]react_perf\b/.test(url)) {
  ReactDebugTool.beginProfiling();
}

module.exports = ReactDebugTool;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var ReactUpdates = __webpack_require__(10);
var Transaction = __webpack_require__(30);

var emptyFunction = __webpack_require__(9);

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function () {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  }
});

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function (callback, a, b, c, d, e) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      return callback(a, b, c, d, e);
    } else {
      return transaction.perform(callback, null, a, b, c, d, e);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ARIADOMPropertyConfig = __webpack_require__(158);
var BeforeInputEventPlugin = __webpack_require__(160);
var ChangeEventPlugin = __webpack_require__(162);
var DefaultEventPluginOrder = __webpack_require__(164);
var EnterLeaveEventPlugin = __webpack_require__(165);
var HTMLDOMPropertyConfig = __webpack_require__(167);
var ReactComponentBrowserEnvironment = __webpack_require__(169);
var ReactDOMComponent = __webpack_require__(172);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactDOMEmptyComponent = __webpack_require__(174);
var ReactDOMTreeTraversal = __webpack_require__(184);
var ReactDOMTextComponent = __webpack_require__(182);
var ReactDefaultBatchingStrategy = __webpack_require__(187);
var ReactEventListener = __webpack_require__(191);
var ReactInjection = __webpack_require__(193);
var ReactReconcileTransaction = __webpack_require__(199);
var SVGDOMPropertyConfig = __webpack_require__(204);
var SelectEventPlugin = __webpack_require__(205);
var SimpleEventPlugin = __webpack_require__(206);

var alreadyInjected = false;

function inject() {
  if (alreadyInjected) {
    // TODO: This is currently true because these injections are shared between
    // the client and the server package. They should be built independently
    // and not share any injection state. Then this problem will be solved.
    return;
  }
  alreadyInjected = true;

  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);

  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
    return new ReactDOMEmptyComponent(instantiate);
  });

  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
}

module.exports = {
  inject: inject
};

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.

var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

module.exports = REACT_ELEMENT_TYPE;

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPluginHub = __webpack_require__(23);

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue(false);
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   */
  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var EventListener = __webpack_require__(63);
var ExecutionEnvironment = __webpack_require__(6);
var PooledClass = __webpack_require__(14);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactUpdates = __webpack_require__(10);

var getEventTarget = __webpack_require__(48);
var getUnboundedScrollPosition = __webpack_require__(122);

/**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */
function findParent(inst) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  while (inst._hostParent) {
    inst = inst._hostParent;
  }
  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
  var container = rootNode.parentNode;
  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
_assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function () {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

function handleTopLevelImpl(bookKeeping) {
  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = targetInst;
  do {
    bookKeeping.ancestors.push(ancestor);
    ancestor = ancestor && findParent(ancestor);
  } while (ancestor);

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    targetInst = bookKeeping.ancestors[i];
    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function (handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function (enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function () {
    return ReactEventListener._enabled;
  },

  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} element Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function (topLevelType, handlerBaseName, element) {
    if (!element) {
      return null;
    }
    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} element Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function (topLevelType, handlerBaseName, element) {
    if (!element) {
      return null;
    }
    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  monitorScrollValue: function (refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
  },

  dispatchEvent: function (topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var history = [];

var ReactHostOperationHistoryHook = {
  onHostOperation: function (operation) {
    history.push(operation);
  },
  clearHistory: function () {
    if (ReactHostOperationHistoryHook._preventClearing) {
      // Should only be used for tests.
      return;
    }

    history = [];
  },
  getHistory: function () {
    return history;
  }
};

module.exports = ReactHostOperationHistoryHook;

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(13);
var EventPluginHub = __webpack_require__(23);
var EventPluginUtils = __webpack_require__(39);
var ReactComponentEnvironment = __webpack_require__(42);
var ReactEmptyComponent = __webpack_require__(73);
var ReactBrowserEventEmitter = __webpack_require__(28);
var ReactHostComponent = __webpack_require__(75);
var ReactUpdates = __webpack_require__(10);

var ReactInjection = {
  Component: ReactComponentEnvironment.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventPluginUtils: EventPluginUtils.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  HostComponent: ReactHostComponent.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var warning = __webpack_require__(2);

if (process.env.NODE_ENV !== 'production') {
  var processingChildContext = false;

  var warnInvalidSetState = function () {
    process.env.NODE_ENV !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
  };
}

var ReactInvalidSetStateWarningHook = {
  onBeginProcessingChildContext: function () {
    processingChildContext = true;
  },
  onEndProcessingChildContext: function () {
    processingChildContext = false;
  },
  onSetState: function () {
    warnInvalidSetState();
  }
};

module.exports = ReactInvalidSetStateWarningHook;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var adler32 = __webpack_require__(217);

var TAG_END = /\/?>/;
var COMMENT_START = /^<\!\-\-/;

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function (markup) {
    var checksum = adler32(markup);

    // Add checksum (handle both parent tags, comments and self-closing tags)
    if (COMMENT_START.test(markup)) {
      return markup;
    } else {
      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
    }
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function (markup, element) {
    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactComponentEnvironment = __webpack_require__(42);
var ReactInstanceMap = __webpack_require__(25);
var ReactInstrumentation = __webpack_require__(8);

var ReactCurrentOwner = __webpack_require__(11);
var ReactReconciler = __webpack_require__(20);
var ReactChildReconciler = __webpack_require__(168);

var emptyFunction = __webpack_require__(9);
var flattenChildren = __webpack_require__(221);
var invariant = __webpack_require__(1);

/**
 * Make an update for markup to be rendered and inserted at a supplied index.
 *
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function makeInsertMarkup(markup, afterNode, toIndex) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'INSERT_MARKUP',
    content: markup,
    fromIndex: null,
    fromNode: null,
    toIndex: toIndex,
    afterNode: afterNode
  };
}

/**
 * Make an update for moving an existing element to another index.
 *
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function makeMove(child, afterNode, toIndex) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'MOVE_EXISTING',
    content: null,
    fromIndex: child._mountIndex,
    fromNode: ReactReconciler.getHostNode(child),
    toIndex: toIndex,
    afterNode: afterNode
  };
}

/**
 * Make an update for removing an element at an index.
 *
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function makeRemove(child, node) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'REMOVE_NODE',
    content: null,
    fromIndex: child._mountIndex,
    fromNode: node,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Make an update for setting the markup of a node.
 *
 * @param {string} markup Markup that renders into an element.
 * @private
 */
function makeSetMarkup(markup) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'SET_MARKUP',
    content: markup,
    fromIndex: null,
    fromNode: null,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Make an update for setting the text content.
 *
 * @param {string} textContent Text content to set.
 * @private
 */
function makeTextContent(textContent) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'TEXT_CONTENT',
    content: textContent,
    fromIndex: null,
    fromNode: null,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Push an update, if any, onto the queue. Creates a new queue if none is
 * passed and always returns the queue. Mutative.
 */
function enqueue(queue, update) {
  if (update) {
    queue = queue || [];
    queue.push(update);
  }
  return queue;
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue(inst, updateQueue) {
  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
}

var setChildrenForInstrumentation = emptyFunction;
if (process.env.NODE_ENV !== 'production') {
  var getDebugID = function (inst) {
    if (!inst._debugID) {
      // Check for ART-like instances. TODO: This is silly/gross.
      var internal;
      if (internal = ReactInstanceMap.get(inst)) {
        inst = internal;
      }
    }
    return inst._debugID;
  };
  setChildrenForInstrumentation = function (children) {
    var debugID = getDebugID(this);
    // TODO: React Native empty components are also multichild.
    // This means they still get into this method but don't have _debugID.
    if (debugID !== 0) {
      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
        return children[key]._debugID;
      }) : []);
    }
  };
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
      if (process.env.NODE_ENV !== 'production') {
        var selfDebugID = getDebugID(this);
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
          } finally {
            ReactCurrentOwner.current = null;
          }
        }
      }
      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
    },

    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
      var nextChildren;
      var selfDebugID = 0;
      if (process.env.NODE_ENV !== 'production') {
        selfDebugID = getDebugID(this);
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
          } finally {
            ReactCurrentOwner.current = null;
          }
          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
          return nextChildren;
        }
      }
      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
      return nextChildren;
    },

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function (nestedChildren, transaction, context) {
      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
      this._renderedChildren = children;

      var mountImages = [];
      var index = 0;
      for (var name in children) {
        if (children.hasOwnProperty(name)) {
          var child = children[name];
          var selfDebugID = 0;
          if (process.env.NODE_ENV !== 'production') {
            selfDebugID = getDebugID(this);
          }
          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
          child._mountIndex = index++;
          mountImages.push(mountImage);
        }
      }

      if (process.env.NODE_ENV !== 'production') {
        setChildrenForInstrumentation.call(this, children);
      }

      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function (nextContent) {
      var prevChildren = this._renderedChildren;
      // Remove any rendered children.
      ReactChildReconciler.unmountChildren(prevChildren, false);
      for (var name in prevChildren) {
        if (prevChildren.hasOwnProperty(name)) {
           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
        }
      }
      // Set new text content.
      var updates = [makeTextContent(nextContent)];
      processQueue(this, updates);
    },

    /**
     * Replaces any rendered children with a markup string.
     *
     * @param {string} nextMarkup String of markup.
     * @internal
     */
    updateMarkup: function (nextMarkup) {
      var prevChildren = this._renderedChildren;
      // Remove any rendered children.
      ReactChildReconciler.unmountChildren(prevChildren, false);
      for (var name in prevChildren) {
        if (prevChildren.hasOwnProperty(name)) {
           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
        }
      }
      var updates = [makeSetMarkup(nextMarkup)];
      processQueue(this, updates);
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function (nextNestedChildrenElements, transaction, context) {
      // Hook used by React ART
      this._updateChildren(nextNestedChildrenElements, transaction, context);
    },

    /**
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
      var prevChildren = this._renderedChildren;
      var removedNodes = {};
      var mountImages = [];
      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
      if (!nextChildren && !prevChildren) {
        return;
      }
      var updates = null;
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var nextIndex = 0;
      var lastIndex = 0;
      // `nextMountIndex` will increment for each newly mounted child.
      var nextMountIndex = 0;
      var lastPlacedNode = null;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var nextChild = nextChildren[name];
        if (prevChild === nextChild) {
          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            // The `removedNodes` loop below will actually remove the child.
          }
          // The child must be instantiated before it's mounted.
          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
          nextMountIndex++;
        }
        nextIndex++;
        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
      }
      // Remove children that are no longer present.
      for (name in removedNodes) {
        if (removedNodes.hasOwnProperty(name)) {
          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
        }
      }
      if (updates) {
        processQueue(this, updates);
      }
      this._renderedChildren = nextChildren;

      if (process.env.NODE_ENV !== 'production') {
        setChildrenForInstrumentation.call(this, nextChildren);
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted. It does not actually perform any
     * backend operations.
     *
     * @internal
     */
    unmountChildren: function (safely) {
      var renderedChildren = this._renderedChildren;
      ReactChildReconciler.unmountChildren(renderedChildren, safely);
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function (child, afterNode, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        return makeMove(child, afterNode, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function (child, afterNode, mountImage) {
      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function (child, node) {
      return makeRemove(child, node);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {
      child._mountIndex = index;
      return this.createChild(child, afterNode, mountImage);
    },

    /**
     * Unmounts a rendered child.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @private
     */
    _unmountChild: function (child, node) {
      var update = this.removeChild(child, node);
      child._mountIndex = null;
      return update;
    }

  }

};

module.exports = ReactMultiChild;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid owner.
 * @final
 */
function isValidOwner(object) {
  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
}

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {
  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function (component, ref, owner) {
    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function (component, ref, owner) {
    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
    var ownerPublicInstance = owner.getPublicInstance();
    // Check that `component`'s owner is still alive and that `component` is still the current ref
    // because we do not want to detach the ref if another component stole it.
    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
      owner.detachRef(ref);
    }
  }

};

module.exports = ReactOwner;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypeLocationNames = {};

if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var CallbackQueue = __webpack_require__(69);
var PooledClass = __webpack_require__(14);
var ReactBrowserEventEmitter = __webpack_require__(28);
var ReactInputSelection = __webpack_require__(76);
var ReactInstrumentation = __webpack_require__(8);
var Transaction = __webpack_require__(30);
var ReactUpdateQueue = __webpack_require__(44);

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function () {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
   *   restores the previous value.
   */
  close: function (previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function () {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function () {
    this.reactMountReady.notifyAll();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

if (process.env.NODE_ENV !== 'production') {
  TRANSACTION_WRAPPERS.push({
    initialize: ReactInstrumentation.debugTool.onBeginFlush,
    close: ReactInstrumentation.debugTool.onEndFlush
  });
}

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction(useCreateElement) {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactDOMTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.useCreateElement = useCreateElement;
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap procedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return this.reactMountReady;
  },

  /**
   * @return {object} The queue to collect React async events.
   */
  getUpdateQueue: function () {
    return ReactUpdateQueue;
  },

  /**
   * Save current transaction state -- if the return value from this method is
   * passed to `rollback`, the transaction will be reset to that state.
   */
  checkpoint: function () {
    // reactMountReady is the our only stateful wrapper
    return this.reactMountReady.checkpoint();
  },

  rollback: function (checkpoint) {
    this.reactMountReady.rollback(checkpoint);
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;
  }
};

_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactOwner = __webpack_require__(197);

var ReactRef = {};

function attachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(component.getPublicInstance());
  } else {
    // Legacy ref
    ReactOwner.addComponentAsRefTo(component, ref, owner);
  }
}

function detachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(null);
  } else {
    // Legacy ref
    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
  }
}

ReactRef.attachRefs = function (instance, element) {
  if (element === null || typeof element !== 'object') {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    attachRef(ref, instance, element._owner);
  }
};

ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
  // If either the owner or a `ref` has changed, make sure the newest owner
  // has stored a reference to `this`, and the previous owner (if different)
  // has forgotten the reference to `this`. We use the element instead
  // of the public this.props because the post processing cannot determine
  // a ref. The ref conceptually lives on the element.

  // TODO: Should this even be possible? The owner cannot change because
  // it's forbidden by shouldUpdateReactComponent. The ref can change
  // if you swap the keys of but not the refs. Reconsider where this check
  // is made. It probably belongs where the key checking and
  // instantiateReactComponent is done.

  var prevRef = null;
  var prevOwner = null;
  if (prevElement !== null && typeof prevElement === 'object') {
    prevRef = prevElement.ref;
    prevOwner = prevElement._owner;
  }

  var nextRef = null;
  var nextOwner = null;
  if (nextElement !== null && typeof nextElement === 'object') {
    nextRef = nextElement.ref;
    nextOwner = nextElement._owner;
  }

  return prevRef !== nextRef ||
  // If owner changes but we have an unchanged function ref, don't update refs
  typeof nextRef === 'string' && nextOwner !== prevOwner;
};

ReactRef.detachRefs = function (instance, element) {
  if (element === null || typeof element !== 'object') {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    detachRef(ref, instance, element._owner);
  }
};

module.exports = ReactRef;

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var PooledClass = __webpack_require__(14);
var Transaction = __webpack_require__(30);
var ReactInstrumentation = __webpack_require__(8);
var ReactServerUpdateQueue = __webpack_require__(202);

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [];

if (process.env.NODE_ENV !== 'production') {
  TRANSACTION_WRAPPERS.push({
    initialize: ReactInstrumentation.debugTool.onBeginFlush,
    close: ReactInstrumentation.debugTool.onEndFlush
  });
}

var noopCallbackQueue = {
  enqueue: function () {}
};

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.useCreateElement = false;
  this.updateQueue = new ReactServerUpdateQueue(this);
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap procedures.
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return noopCallbackQueue;
  },

  /**
   * @return {object} The queue to collect React async events.
   */
  getUpdateQueue: function () {
    return this.updateQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {},

  checkpoint: function () {},

  rollback: function () {}
};

_assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ReactUpdateQueue = __webpack_require__(44);

var warning = __webpack_require__(2);

function warnNoop(publicInstance, callerName) {
  if (process.env.NODE_ENV !== 'production') {
    var constructor = publicInstance.constructor;
    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }
}

/**
 * This is the update queue used for server rendering.
 * It delegates to ReactUpdateQueue while server rendering is in progress and
 * switches to ReactNoopUpdateQueue after the transaction has completed.
 * @class ReactServerUpdateQueue
 * @param {Transaction} transaction
 */

var ReactServerUpdateQueue = function () {
  function ReactServerUpdateQueue(transaction) {
    _classCallCheck(this, ReactServerUpdateQueue);

    this.transaction = transaction;
  }

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */


  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
    return false;
  };

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
    }
  };

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
    } else {
      warnNoop(publicInstance, 'forceUpdate');
    }
  };

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object|function} completeState Next state.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
    } else {
      warnNoop(publicInstance, 'replaceState');
    }
  };

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object|function} partialState Next partial state to be merged with state.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
    } else {
      warnNoop(publicInstance, 'setState');
    }
  };

  return ReactServerUpdateQueue;
}();

module.exports = ReactServerUpdateQueue;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



module.exports = '15.4.2';

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var NS = {
  xlink: 'http://www.w3.org/1999/xlink',
  xml: 'http://www.w3.org/XML/1998/namespace'
};

// We use attributes for everything SVG so let's avoid some duplication and run
// code instead.
// The following are all specified in the HTML config already so we exclude here.
// - class (as className)
// - color
// - height
// - id
// - lang
// - max
// - media
// - method
// - min
// - name
// - style
// - target
// - type
// - width
var ATTRS = {
  accentHeight: 'accent-height',
  accumulate: 0,
  additive: 0,
  alignmentBaseline: 'alignment-baseline',
  allowReorder: 'allowReorder',
  alphabetic: 0,
  amplitude: 0,
  arabicForm: 'arabic-form',
  ascent: 0,
  attributeName: 'attributeName',
  attributeType: 'attributeType',
  autoReverse: 'autoReverse',
  azimuth: 0,
  baseFrequency: 'baseFrequency',
  baseProfile: 'baseProfile',
  baselineShift: 'baseline-shift',
  bbox: 0,
  begin: 0,
  bias: 0,
  by: 0,
  calcMode: 'calcMode',
  capHeight: 'cap-height',
  clip: 0,
  clipPath: 'clip-path',
  clipRule: 'clip-rule',
  clipPathUnits: 'clipPathUnits',
  colorInterpolation: 'color-interpolation',
  colorInterpolationFilters: 'color-interpolation-filters',
  colorProfile: 'color-profile',
  colorRendering: 'color-rendering',
  contentScriptType: 'contentScriptType',
  contentStyleType: 'contentStyleType',
  cursor: 0,
  cx: 0,
  cy: 0,
  d: 0,
  decelerate: 0,
  descent: 0,
  diffuseConstant: 'diffuseConstant',
  direction: 0,
  display: 0,
  divisor: 0,
  dominantBaseline: 'dominant-baseline',
  dur: 0,
  dx: 0,
  dy: 0,
  edgeMode: 'edgeMode',
  elevation: 0,
  enableBackground: 'enable-background',
  end: 0,
  exponent: 0,
  externalResourcesRequired: 'externalResourcesRequired',
  fill: 0,
  fillOpacity: 'fill-opacity',
  fillRule: 'fill-rule',
  filter: 0,
  filterRes: 'filterRes',
  filterUnits: 'filterUnits',
  floodColor: 'flood-color',
  floodOpacity: 'flood-opacity',
  focusable: 0,
  fontFamily: 'font-family',
  fontSize: 'font-size',
  fontSizeAdjust: 'font-size-adjust',
  fontStretch: 'font-stretch',
  fontStyle: 'font-style',
  fontVariant: 'font-variant',
  fontWeight: 'font-weight',
  format: 0,
  from: 0,
  fx: 0,
  fy: 0,
  g1: 0,
  g2: 0,
  glyphName: 'glyph-name',
  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
  glyphOrientationVertical: 'glyph-orientation-vertical',
  glyphRef: 'glyphRef',
  gradientTransform: 'gradientTransform',
  gradientUnits: 'gradientUnits',
  hanging: 0,
  horizAdvX: 'horiz-adv-x',
  horizOriginX: 'horiz-origin-x',
  ideographic: 0,
  imageRendering: 'image-rendering',
  'in': 0,
  in2: 0,
  intercept: 0,
  k: 0,
  k1: 0,
  k2: 0,
  k3: 0,
  k4: 0,
  kernelMatrix: 'kernelMatrix',
  kernelUnitLength: 'kernelUnitLength',
  kerning: 0,
  keyPoints: 'keyPoints',
  keySplines: 'keySplines',
  keyTimes: 'keyTimes',
  lengthAdjust: 'lengthAdjust',
  letterSpacing: 'letter-spacing',
  lightingColor: 'lighting-color',
  limitingConeAngle: 'limitingConeAngle',
  local: 0,
  markerEnd: 'marker-end',
  markerMid: 'marker-mid',
  markerStart: 'marker-start',
  markerHeight: 'markerHeight',
  markerUnits: 'markerUnits',
  markerWidth: 'markerWidth',
  mask: 0,
  maskContentUnits: 'maskContentUnits',
  maskUnits: 'maskUnits',
  mathematical: 0,
  mode: 0,
  numOctaves: 'numOctaves',
  offset: 0,
  opacity: 0,
  operator: 0,
  order: 0,
  orient: 0,
  orientation: 0,
  origin: 0,
  overflow: 0,
  overlinePosition: 'overline-position',
  overlineThickness: 'overline-thickness',
  paintOrder: 'paint-order',
  panose1: 'panose-1',
  pathLength: 'pathLength',
  patternContentUnits: 'patternContentUnits',
  patternTransform: 'patternTransform',
  patternUnits: 'patternUnits',
  pointerEvents: 'pointer-events',
  points: 0,
  pointsAtX: 'pointsAtX',
  pointsAtY: 'pointsAtY',
  pointsAtZ: 'pointsAtZ',
  preserveAlpha: 'preserveAlpha',
  preserveAspectRatio: 'preserveAspectRatio',
  primitiveUnits: 'primitiveUnits',
  r: 0,
  radius: 0,
  refX: 'refX',
  refY: 'refY',
  renderingIntent: 'rendering-intent',
  repeatCount: 'repeatCount',
  repeatDur: 'repeatDur',
  requiredExtensions: 'requiredExtensions',
  requiredFeatures: 'requiredFeatures',
  restart: 0,
  result: 0,
  rotate: 0,
  rx: 0,
  ry: 0,
  scale: 0,
  seed: 0,
  shapeRendering: 'shape-rendering',
  slope: 0,
  spacing: 0,
  specularConstant: 'specularConstant',
  specularExponent: 'specularExponent',
  speed: 0,
  spreadMethod: 'spreadMethod',
  startOffset: 'startOffset',
  stdDeviation: 'stdDeviation',
  stemh: 0,
  stemv: 0,
  stitchTiles: 'stitchTiles',
  stopColor: 'stop-color',
  stopOpacity: 'stop-opacity',
  strikethroughPosition: 'strikethrough-position',
  strikethroughThickness: 'strikethrough-thickness',
  string: 0,
  stroke: 0,
  strokeDasharray: 'stroke-dasharray',
  strokeDashoffset: 'stroke-dashoffset',
  strokeLinecap: 'stroke-linecap',
  strokeLinejoin: 'stroke-linejoin',
  strokeMiterlimit: 'stroke-miterlimit',
  strokeOpacity: 'stroke-opacity',
  strokeWidth: 'stroke-width',
  surfaceScale: 'surfaceScale',
  systemLanguage: 'systemLanguage',
  tableValues: 'tableValues',
  targetX: 'targetX',
  targetY: 'targetY',
  textAnchor: 'text-anchor',
  textDecoration: 'text-decoration',
  textRendering: 'text-rendering',
  textLength: 'textLength',
  to: 0,
  transform: 0,
  u1: 0,
  u2: 0,
  underlinePosition: 'underline-position',
  underlineThickness: 'underline-thickness',
  unicode: 0,
  unicodeBidi: 'unicode-bidi',
  unicodeRange: 'unicode-range',
  unitsPerEm: 'units-per-em',
  vAlphabetic: 'v-alphabetic',
  vHanging: 'v-hanging',
  vIdeographic: 'v-ideographic',
  vMathematical: 'v-mathematical',
  values: 0,
  vectorEffect: 'vector-effect',
  version: 0,
  vertAdvY: 'vert-adv-y',
  vertOriginX: 'vert-origin-x',
  vertOriginY: 'vert-origin-y',
  viewBox: 'viewBox',
  viewTarget: 'viewTarget',
  visibility: 0,
  widths: 0,
  wordSpacing: 'word-spacing',
  writingMode: 'writing-mode',
  x: 0,
  xHeight: 'x-height',
  x1: 0,
  x2: 0,
  xChannelSelector: 'xChannelSelector',
  xlinkActuate: 'xlink:actuate',
  xlinkArcrole: 'xlink:arcrole',
  xlinkHref: 'xlink:href',
  xlinkRole: 'xlink:role',
  xlinkShow: 'xlink:show',
  xlinkTitle: 'xlink:title',
  xlinkType: 'xlink:type',
  xmlBase: 'xml:base',
  xmlns: 0,
  xmlnsXlink: 'xmlns:xlink',
  xmlLang: 'xml:lang',
  xmlSpace: 'xml:space',
  y: 0,
  y1: 0,
  y2: 0,
  yChannelSelector: 'yChannelSelector',
  z: 0,
  zoomAndPan: 'zoomAndPan'
};

var SVGDOMPropertyConfig = {
  Properties: {},
  DOMAttributeNamespaces: {
    xlinkActuate: NS.xlink,
    xlinkArcrole: NS.xlink,
    xlinkHref: NS.xlink,
    xlinkRole: NS.xlink,
    xlinkShow: NS.xlink,
    xlinkTitle: NS.xlink,
    xlinkType: NS.xlink,
    xmlBase: NS.xml,
    xmlLang: NS.xml,
    xmlSpace: NS.xml
  },
  DOMAttributeNames: {}
};

Object.keys(ATTRS).forEach(function (key) {
  SVGDOMPropertyConfig.Properties[key] = 0;
  if (ATTRS[key]) {
    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
  }
});

module.exports = SVGDOMPropertyConfig;

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPropagators = __webpack_require__(24);
var ExecutionEnvironment = __webpack_require__(6);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactInputSelection = __webpack_require__(76);
var SyntheticEvent = __webpack_require__(12);

var getActiveElement = __webpack_require__(65);
var isTextInputElement = __webpack_require__(86);
var shallowEqual = __webpack_require__(35);

var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: 'onSelect',
      captured: 'onSelectCapture'
    },
    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
  }
};

var activeElement = null;
var activeElementInst = null;
var lastSelection = null;
var mouseDown = false;

// Track whether a listener exists for this plugin. If none exist, we do
// not extract events. See #3639.
var hasListener = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getSelection(node) {
  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
    return null;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }

  return null;
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    if (!hasListener) {
      return null;
    }

    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

    switch (topLevelType) {
      // Track the input node that has focus.
      case 'topFocus':
        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
          activeElement = targetNode;
          activeElementInst = targetInst;
          lastSelection = null;
        }
        break;
      case 'topBlur':
        activeElement = null;
        activeElementInst = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case 'topMouseDown':
        mouseDown = true;
        break;
      case 'topContextMenu':
      case 'topMouseUp':
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.
      case 'topSelectionChange':
        if (skipSelectionChangeEvent) {
          break;
        }
      // falls through
      case 'topKeyDown':
      case 'topKeyUp':
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  },

  didPutListener: function (inst, registrationName, listener) {
    if (registrationName === 'onSelect') {
      hasListener = true;
    }
  }
};

module.exports = SelectEventPlugin;

/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var EventListener = __webpack_require__(63);
var EventPropagators = __webpack_require__(24);
var ReactDOMComponentTree = __webpack_require__(5);
var SyntheticAnimationEvent = __webpack_require__(207);
var SyntheticClipboardEvent = __webpack_require__(208);
var SyntheticEvent = __webpack_require__(12);
var SyntheticFocusEvent = __webpack_require__(211);
var SyntheticKeyboardEvent = __webpack_require__(213);
var SyntheticMouseEvent = __webpack_require__(29);
var SyntheticDragEvent = __webpack_require__(210);
var SyntheticTouchEvent = __webpack_require__(214);
var SyntheticTransitionEvent = __webpack_require__(215);
var SyntheticUIEvent = __webpack_require__(26);
var SyntheticWheelEvent = __webpack_require__(216);

var emptyFunction = __webpack_require__(9);
var getEventCharCode = __webpack_require__(46);
var invariant = __webpack_require__(1);

/**
 * Turns
 * ['abort', ...]
 * into
 * eventTypes = {
 *   'abort': {
 *     phasedRegistrationNames: {
 *       bubbled: 'onAbort',
 *       captured: 'onAbortCapture',
 *     },
 *     dependencies: ['topAbort'],
 *   },
 *   ...
 * };
 * topLevelEventsToDispatchConfig = {
 *   'topAbort': { sameConfig }
 * };
 */
var eventTypes = {};
var topLevelEventsToDispatchConfig = {};
['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
  var onEvent = 'on' + capitalizedEvent;
  var topEvent = 'top' + capitalizedEvent;

  var type = {
    phasedRegistrationNames: {
      bubbled: onEvent,
      captured: onEvent + 'Capture'
    },
    dependencies: [topEvent]
  };
  eventTypes[event] = type;
  topLevelEventsToDispatchConfig[topEvent] = type;
});

var onClickListeners = {};

function getDictionaryKey(inst) {
  // Prevents V8 performance issue:
  // https://github.com/facebook/react/pull/7232
  return '.' + inst._rootNodeID;
}

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case 'topAbort':
      case 'topCanPlay':
      case 'topCanPlayThrough':
      case 'topDurationChange':
      case 'topEmptied':
      case 'topEncrypted':
      case 'topEnded':
      case 'topError':
      case 'topInput':
      case 'topInvalid':
      case 'topLoad':
      case 'topLoadedData':
      case 'topLoadedMetadata':
      case 'topLoadStart':
      case 'topPause':
      case 'topPlay':
      case 'topPlaying':
      case 'topProgress':
      case 'topRateChange':
      case 'topReset':
      case 'topSeeked':
      case 'topSeeking':
      case 'topStalled':
      case 'topSubmit':
      case 'topSuspend':
      case 'topTimeUpdate':
      case 'topVolumeChange':
      case 'topWaiting':
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case 'topKeyPress':
        // Firefox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
      /* falls through */
      case 'topKeyDown':
      case 'topKeyUp':
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case 'topBlur':
      case 'topFocus':
        EventConstructor = SyntheticFocusEvent;
        break;
      case 'topClick':
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
      /* falls through */
      case 'topDoubleClick':
      case 'topMouseDown':
      case 'topMouseMove':
      case 'topMouseUp':
      // TODO: Disabled elements should not respond to mouse events
      /* falls through */
      case 'topMouseOut':
      case 'topMouseOver':
      case 'topContextMenu':
        EventConstructor = SyntheticMouseEvent;
        break;
      case 'topDrag':
      case 'topDragEnd':
      case 'topDragEnter':
      case 'topDragExit':
      case 'topDragLeave':
      case 'topDragOver':
      case 'topDragStart':
      case 'topDrop':
        EventConstructor = SyntheticDragEvent;
        break;
      case 'topTouchCancel':
      case 'topTouchEnd':
      case 'topTouchMove':
      case 'topTouchStart':
        EventConstructor = SyntheticTouchEvent;
        break;
      case 'topAnimationEnd':
      case 'topAnimationIteration':
      case 'topAnimationStart':
        EventConstructor = SyntheticAnimationEvent;
        break;
      case 'topTransitionEnd':
        EventConstructor = SyntheticTransitionEvent;
        break;
      case 'topScroll':
        EventConstructor = SyntheticUIEvent;
        break;
      case 'topWheel':
        EventConstructor = SyntheticWheelEvent;
        break;
      case 'topCopy':
      case 'topCut':
      case 'topPaste':
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  },

  didPutListener: function (inst, registrationName, listener) {
    // Mobile Safari does not fire properly bubble click events on
    // non-interactive elements, which means delegated click listeners do not
    // fire. The workaround for this bug involves attaching an empty click
    // listener on the target node.
    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
      var key = getDictionaryKey(inst);
      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
      if (!onClickListeners[key]) {
        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
      }
    }
  },

  willDeleteListener: function (inst, registrationName) {
    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
      var key = getDictionaryKey(inst);
      onClickListeners[key].remove();
      delete onClickListeners[key];
    }
  }

};

module.exports = SimpleEventPlugin;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(12);

/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */
var AnimationEventInterface = {
  animationName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

module.exports = SyntheticAnimationEvent;

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(12);

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(12);

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

module.exports = SyntheticCompositionEvent;

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticMouseEvent = __webpack_require__(29);

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(26);

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(12);

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

module.exports = SyntheticInputEvent;

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(26);

var getEventCharCode = __webpack_require__(46);
var getEventKey = __webpack_require__(222);
var getEventModifierState = __webpack_require__(47);

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;

/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(26);

var getEventModifierState = __webpack_require__(47);

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;

/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(12);

/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */
var TransitionEventInterface = {
  propertyName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

module.exports = SyntheticTransitionEvent;

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticMouseEvent = __webpack_require__(29);

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX :
    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY :
    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY :
    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;

/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var MOD = 65521;

// adler32 is not cryptographically strong, and is only used to sanity check that
// markup generated on the server matches the markup generated on the client.
// This implementation (a modified version of the SheetJS version) has been optimized
// for our use case, at the expense of conforming to the adler32 specification
// for non-ascii inputs.
function adler32(data) {
  var a = 1;
  var b = 0;
  var i = 0;
  var l = data.length;
  var m = l & ~0x3;
  while (i < m) {
    var n = Math.min(i + 4096, m);
    for (; i < n; i += 4) {
      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
    }
    a %= MOD;
    b %= MOD;
  }
  for (; i < l; i++) {
    b += a += data.charCodeAt(i);
  }
  a %= MOD;
  b %= MOD;
  return a | b << 16;
}

module.exports = adler32;

/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactPropTypeLocationNames = __webpack_require__(198);
var ReactPropTypesSecret = __webpack_require__(79);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(7);
}

var loggedTypeFailures = {};

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?object} element The React element that is being type-checked
 * @param {?number} debugID The React component instance that is being type-checked
 * @private
 */
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if (process.env.NODE_ENV !== 'production') {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = __webpack_require__(7);
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }
    }
  }
}

module.exports = checkReactTypeSpec;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var CSSProperty = __webpack_require__(68);
var warning = __webpack_require__(2);

var isUnitlessNumber = CSSProperty.isUnitlessNumber;
var styleWarnings = {};

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @param {ReactDOMComponent} component
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value, component) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    if (process.env.NODE_ENV !== 'production') {
      // Allow '0' to pass through without warning. 0 is already special and
      // doesn't require units, so we don't need to warn about it.
      if (component && value !== '0') {
        var owner = component._currentElement._owner;
        var ownerName = owner ? owner.getName() : null;
        if (ownerName && !styleWarnings[ownerName]) {
          styleWarnings[ownerName] = {};
        }
        var warned = false;
        if (ownerName) {
          var warnings = styleWarnings[ownerName];
          warned = warnings[name];
          if (!warned) {
            warnings[name] = true;
          }
        }
        if (!warned) {
          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
        }
      }
    }
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactCurrentOwner = __webpack_require__(11);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactInstanceMap = __webpack_require__(25);

var getHostComponentFromComposite = __webpack_require__(83);
var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

/**
 * Returns the DOM node rendered by this element.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
 *
 * @param {ReactComponent|DOMElement} componentOrElement
 * @return {?DOMElement} The root node of this element.
 */
function findDOMNode(componentOrElement) {
  if (process.env.NODE_ENV !== 'production') {
    var owner = ReactCurrentOwner.current;
    if (owner !== null) {
      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
      owner._warnedAboutRefsInRender = true;
    }
  }
  if (componentOrElement == null) {
    return null;
  }
  if (componentOrElement.nodeType === 1) {
    return componentOrElement;
  }

  var inst = ReactInstanceMap.get(componentOrElement);
  if (inst) {
    inst = getHostComponentFromComposite(inst);
    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
  }

  if (typeof componentOrElement.render === 'function') {
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;
  } else {
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;
  }
}

module.exports = findDOMNode;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var KeyEscapeUtils = __webpack_require__(40);
var traverseAllChildren = __webpack_require__(88);
var warning = __webpack_require__(2);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(7);
}

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 * @param {number=} selfDebugID Optional debugID of the current internal instance.
 */
function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
  // We found a component instance.
  if (traverseContext && typeof traverseContext === 'object') {
    var result = traverseContext;
    var keyUnique = result[name] === undefined;
    if (process.env.NODE_ENV !== 'production') {
      if (!ReactComponentTreeHook) {
        ReactComponentTreeHook = __webpack_require__(7);
      }
      if (!keyUnique) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
      }
    }
    if (keyUnique && child != null) {
      result[name] = child;
    }
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children, selfDebugID) {
  if (children == null) {
    return children;
  }
  var result = {};

  if (process.env.NODE_ENV !== 'production') {
    traverseAllChildren(children, function (traverseContext, child, name) {
      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
    }, result);
  } else {
    traverseAllChildren(children, flattenSingleChildIntoContext, result);
  }
  return result;
}

module.exports = flattenChildren;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var getEventCharCode = __webpack_require__(46);

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/* global Symbol */

var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var nextDebugID = 1;

function getNextDebugID() {
  return nextDebugID++;
}

module.exports = getNextDebugID;

/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */

function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;

/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */
function makePrefixMap(styleProp, eventName) {
  var prefixes = {};

  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
  prefixes['Moz' + styleProp] = 'moz' + eventName;
  prefixes['ms' + styleProp] = 'MS' + eventName;
  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

  return prefixes;
}

/**
 * A list of event names to a configurable list of vendor prefixes.
 */
var vendorPrefixes = {
  animationend: makePrefixMap('Animation', 'AnimationEnd'),
  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
  animationstart: makePrefixMap('Animation', 'AnimationStart'),
  transitionend: makePrefixMap('Transition', 'TransitionEnd')
};

/**
 * Event names that have already been detected and prefixed (if applicable).
 */
var prefixedEventNames = {};

/**
 * Element to check for prefixes on.
 */
var style = {};

/**
 * Bootstrap if a DOM exists.
 */
if (ExecutionEnvironment.canUseDOM) {
  style = document.createElement('div').style;

  // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are usable, and if not remove them from the map.
  if (!('AnimationEvent' in window)) {
    delete vendorPrefixes.animationend.animation;
    delete vendorPrefixes.animationiteration.animation;
    delete vendorPrefixes.animationstart.animation;
  }

  // Same as above
  if (!('TransitionEvent' in window)) {
    delete vendorPrefixes.transitionend.transition;
  }
}

/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */
function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  } else if (!vendorPrefixes[eventName]) {
    return eventName;
  }

  var prefixMap = vendorPrefixes[eventName];

  for (var styleProp in prefixMap) {
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
      return prefixedEventNames[eventName] = prefixMap[styleProp];
    }
  }

  return '';
}

module.exports = getVendorPrefixedEventName;

/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var escapeTextContentForBrowser = __webpack_require__(31);

/**
 * Escapes attribute value to prevent scripting attacks.
 *
 * @param {*} value Value to escape.
 * @return {string} An escaped string.
 */
function quoteAttributeValueForBrowser(value) {
  return '"' + escapeTextContentForBrowser(value) + '"';
}

module.exports = quoteAttributeValueForBrowser;

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactMount = __webpack_require__(77);

module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ }),
/* 229 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_PropTypes__ = __webpack_require__(91);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_warning__ = __webpack_require__(52);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Provider; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





var didWarnAboutReceivingStore = false;
function warnAboutReceivingStore() {
  if (didWarnAboutReceivingStore) {
    return;
  }
  didWarnAboutReceivingStore = true;

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_warning__["a" /* default */])('<Provider> does not support changing `store` on the fly. ' + 'It is most likely that you see this error because you updated to ' + 'Redux 2.x and React Redux 2.x which no longer hot reload reducers ' + 'automatically. See https://github.com/reactjs/react-redux/releases/' + 'tag/v2.0.0 for the migration instructions.');
}

var Provider = function (_Component) {
  _inherits(Provider, _Component);

  Provider.prototype.getChildContext = function getChildContext() {
    return { store: this.store, storeSubscription: null };
  };

  function Provider(props, context) {
    _classCallCheck(this, Provider);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

    _this.store = props.store;
    return _this;
  }

  Provider.prototype.render = function render() {
    return __WEBPACK_IMPORTED_MODULE_0_react__["Children"].only(this.props.children);
  };

  return Provider;
}(__WEBPACK_IMPORTED_MODULE_0_react__["Component"]);




if (process.env.NODE_ENV !== 'production') {
  Provider.prototype.componentWillReceiveProps = function (nextProps) {
    var store = this.store;
    var nextStore = nextProps.store;


    if (store !== nextStore) {
      warnAboutReceivingStore();
    }
  };
}

Provider.propTypes = {
  store: __WEBPACK_IMPORTED_MODULE_1__utils_PropTypes__["a" /* storeShape */].isRequired,
  children: __WEBPACK_IMPORTED_MODULE_0_react__["PropTypes"].element.isRequired
};
Provider.childContextTypes = {
  store: __WEBPACK_IMPORTED_MODULE_1__utils_PropTypes__["a" /* storeShape */].isRequired,
  storeSubscription: __WEBPACK_IMPORTED_MODULE_1__utils_PropTypes__["b" /* subscriptionShape */]
};
Provider.displayName = 'Provider';
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(0)))

/***/ }),
/* 230 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_connectAdvanced__ = __webpack_require__(89);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_shallowEqual__ = __webpack_require__(237);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__mapDispatchToProps__ = __webpack_require__(231);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__mapStateToProps__ = __webpack_require__(232);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__mergeProps__ = __webpack_require__(233);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__selectorFactory__ = __webpack_require__(234);
/* unused harmony export createConnect */
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }








/*
  connect is a facade over connectAdvanced. It turns its args into a compatible
  selectorFactory, which has the signature:

    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps
  
  connect passes its args to connectAdvanced as options, which will in turn pass them to
  selectorFactory each time a Connect component instance is instantiated or hot reloaded.

  selectorFactory returns a final props selector from its mapStateToProps,
  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,
  mergePropsFactories, and pure args.

  The resulting final props selector is called by the Connect component instance whenever
  it receives new props or store state.
 */

function match(arg, factories, name) {
  for (var i = factories.length - 1; i >= 0; i--) {
    var result = factories[i](arg);
    if (result) return result;
  }

  return function (dispatch, options) {
    throw new Error('Invalid value of type ' + typeof arg + ' for ' + name + ' argument when connecting component ' + options.wrappedComponentName + '.');
  };
}

function strictEqual(a, b) {
  return a === b;
}

// createConnect with default args builds the 'official' connect behavior. Calling it with
// different options opens up some testing and extensibility scenarios
function createConnect() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$connectHOC = _ref.connectHOC,
      connectHOC = _ref$connectHOC === undefined ? __WEBPACK_IMPORTED_MODULE_0__components_connectAdvanced__["a" /* default */] : _ref$connectHOC,
      _ref$mapStateToPropsF = _ref.mapStateToPropsFactories,
      mapStateToPropsFactories = _ref$mapStateToPropsF === undefined ? __WEBPACK_IMPORTED_MODULE_3__mapStateToProps__["a" /* default */] : _ref$mapStateToPropsF,
      _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories,
      mapDispatchToPropsFactories = _ref$mapDispatchToPro === undefined ? __WEBPACK_IMPORTED_MODULE_2__mapDispatchToProps__["a" /* default */] : _ref$mapDispatchToPro,
      _ref$mergePropsFactor = _ref.mergePropsFactories,
      mergePropsFactories = _ref$mergePropsFactor === undefined ? __WEBPACK_IMPORTED_MODULE_4__mergeProps__["a" /* default */] : _ref$mergePropsFactor,
      _ref$selectorFactory = _ref.selectorFactory,
      selectorFactory = _ref$selectorFactory === undefined ? __WEBPACK_IMPORTED_MODULE_5__selectorFactory__["a" /* default */] : _ref$selectorFactory;

  return function connect(mapStateToProps, mapDispatchToProps, mergeProps) {
    var _ref2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
        _ref2$pure = _ref2.pure,
        pure = _ref2$pure === undefined ? true : _ref2$pure,
        _ref2$areStatesEqual = _ref2.areStatesEqual,
        areStatesEqual = _ref2$areStatesEqual === undefined ? strictEqual : _ref2$areStatesEqual,
        _ref2$areOwnPropsEqua = _ref2.areOwnPropsEqual,
        areOwnPropsEqual = _ref2$areOwnPropsEqua === undefined ? __WEBPACK_IMPORTED_MODULE_1__utils_shallowEqual__["a" /* default */] : _ref2$areOwnPropsEqua,
        _ref2$areStatePropsEq = _ref2.areStatePropsEqual,
        areStatePropsEqual = _ref2$areStatePropsEq === undefined ? __WEBPACK_IMPORTED_MODULE_1__utils_shallowEqual__["a" /* default */] : _ref2$areStatePropsEq,
        _ref2$areMergedPropsE = _ref2.areMergedPropsEqual,
        areMergedPropsEqual = _ref2$areMergedPropsE === undefined ? __WEBPACK_IMPORTED_MODULE_1__utils_shallowEqual__["a" /* default */] : _ref2$areMergedPropsE,
        extraOptions = _objectWithoutProperties(_ref2, ['pure', 'areStatesEqual', 'areOwnPropsEqual', 'areStatePropsEqual', 'areMergedPropsEqual']);

    var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, 'mapStateToProps');
    var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, 'mapDispatchToProps');
    var initMergeProps = match(mergeProps, mergePropsFactories, 'mergeProps');

    return connectHOC(selectorFactory, _extends({
      // used in error messages
      methodName: 'connect',

      // used to compute Connect's displayName from the wrapped component's displayName.
      getDisplayName: function getDisplayName(name) {
        return 'Connect(' + name + ')';
      },

      // if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes
      shouldHandleStateChanges: Boolean(mapStateToProps),

      // passed through to selectorFactory
      initMapStateToProps: initMapStateToProps,
      initMapDispatchToProps: initMapDispatchToProps,
      initMergeProps: initMergeProps,
      pure: pure,
      areStatesEqual: areStatesEqual,
      areOwnPropsEqual: areOwnPropsEqual,
      areStatePropsEqual: areStatePropsEqual,
      areMergedPropsEqual: areMergedPropsEqual

    }, extraOptions));
  };
}

/* harmony default export */ __webpack_exports__["a"] = createConnect();

/***/ }),
/* 231 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_redux__ = __webpack_require__(99);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__wrapMapToProps__ = __webpack_require__(90);
/* unused harmony export whenMapDispatchToPropsIsFunction */
/* unused harmony export whenMapDispatchToPropsIsMissing */
/* unused harmony export whenMapDispatchToPropsIsObject */



function whenMapDispatchToPropsIsFunction(mapDispatchToProps) {
  return typeof mapDispatchToProps === 'function' ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__wrapMapToProps__["a" /* wrapMapToPropsFunc */])(mapDispatchToProps, 'mapDispatchToProps') : undefined;
}

function whenMapDispatchToPropsIsMissing(mapDispatchToProps) {
  return !mapDispatchToProps ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__wrapMapToProps__["b" /* wrapMapToPropsConstant */])(function (dispatch) {
    return { dispatch: dispatch };
  }) : undefined;
}

function whenMapDispatchToPropsIsObject(mapDispatchToProps) {
  return mapDispatchToProps && typeof mapDispatchToProps === 'object' ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__wrapMapToProps__["b" /* wrapMapToPropsConstant */])(function (dispatch) {
    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_redux__["bindActionCreators"])(mapDispatchToProps, dispatch);
  }) : undefined;
}

/* harmony default export */ __webpack_exports__["a"] = [whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject];

/***/ }),
/* 232 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__wrapMapToProps__ = __webpack_require__(90);
/* unused harmony export whenMapStateToPropsIsFunction */
/* unused harmony export whenMapStateToPropsIsMissing */


function whenMapStateToPropsIsFunction(mapStateToProps) {
  return typeof mapStateToProps === 'function' ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__wrapMapToProps__["a" /* wrapMapToPropsFunc */])(mapStateToProps, 'mapStateToProps') : undefined;
}

function whenMapStateToPropsIsMissing(mapStateToProps) {
  return !mapStateToProps ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__wrapMapToProps__["b" /* wrapMapToPropsConstant */])(function () {
    return {};
  }) : undefined;
}

/* harmony default export */ __webpack_exports__["a"] = [whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing];

/***/ }),
/* 233 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_verifyPlainObject__ = __webpack_require__(92);
/* unused harmony export defaultMergeProps */
/* unused harmony export wrapMergePropsFunc */
/* unused harmony export whenMergePropsIsFunction */
/* unused harmony export whenMergePropsIsOmitted */
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



function defaultMergeProps(stateProps, dispatchProps, ownProps) {
  return _extends({}, ownProps, stateProps, dispatchProps);
}

function wrapMergePropsFunc(mergeProps) {
  return function initMergePropsProxy(dispatch, _ref) {
    var displayName = _ref.displayName,
        pure = _ref.pure,
        areMergedPropsEqual = _ref.areMergedPropsEqual;

    var hasRunOnce = false;
    var mergedProps = void 0;

    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
      var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);

      if (hasRunOnce) {
        if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;
      } else {
        hasRunOnce = true;
        mergedProps = nextMergedProps;

        if (process.env.NODE_ENV !== 'production') __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils_verifyPlainObject__["a" /* default */])(mergedProps, displayName, 'mergeProps');
      }

      return mergedProps;
    };
  };
}

function whenMergePropsIsFunction(mergeProps) {
  return typeof mergeProps === 'function' ? wrapMergePropsFunc(mergeProps) : undefined;
}

function whenMergePropsIsOmitted(mergeProps) {
  return !mergeProps ? function () {
    return defaultMergeProps;
  } : undefined;
}

/* harmony default export */ __webpack_exports__["a"] = [whenMergePropsIsFunction, whenMergePropsIsOmitted];
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(0)))

/***/ }),
/* 234 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__verifySubselectors__ = __webpack_require__(235);
/* unused harmony export impureFinalPropsSelectorFactory */
/* unused harmony export pureFinalPropsSelectorFactory */
/* harmony export (immutable) */ __webpack_exports__["a"] = finalPropsSelectorFactory;
function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }



function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {
  return function impureFinalPropsSelector(state, ownProps) {
    return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);
  };
}

function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {
  var areStatesEqual = _ref.areStatesEqual,
      areOwnPropsEqual = _ref.areOwnPropsEqual,
      areStatePropsEqual = _ref.areStatePropsEqual;

  var hasRunAtLeastOnce = false;
  var state = void 0;
  var ownProps = void 0;
  var stateProps = void 0;
  var dispatchProps = void 0;
  var mergedProps = void 0;

  function handleFirstCall(firstState, firstOwnProps) {
    state = firstState;
    ownProps = firstOwnProps;
    stateProps = mapStateToProps(state, ownProps);
    dispatchProps = mapDispatchToProps(dispatch, ownProps);
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    hasRunAtLeastOnce = true;
    return mergedProps;
  }

  function handleNewPropsAndNewState() {
    stateProps = mapStateToProps(state, ownProps);

    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);

    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }

  function handleNewProps() {
    if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);

    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);

    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }

  function handleNewState() {
    var nextStateProps = mapStateToProps(state, ownProps);
    var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
    stateProps = nextStateProps;

    if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);

    return mergedProps;
  }

  function handleSubsequentCalls(nextState, nextOwnProps) {
    var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
    var stateChanged = !areStatesEqual(nextState, state);
    state = nextState;
    ownProps = nextOwnProps;

    if (propsChanged && stateChanged) return handleNewPropsAndNewState();
    if (propsChanged) return handleNewProps();
    if (stateChanged) return handleNewState();
    return mergedProps;
  }

  return function pureFinalPropsSelector(nextState, nextOwnProps) {
    return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
  };
}

// TODO: Add more comments

// If pure is true, the selector returned by selectorFactory will memoize its results,
// allowing connectAdvanced's shouldComponentUpdate to return false if final
// props have not changed. If false, the selector will always return a new
// object and shouldComponentUpdate will always return true.

function finalPropsSelectorFactory(dispatch, _ref2) {
  var initMapStateToProps = _ref2.initMapStateToProps,
      initMapDispatchToProps = _ref2.initMapDispatchToProps,
      initMergeProps = _ref2.initMergeProps,
      options = _objectWithoutProperties(_ref2, ['initMapStateToProps', 'initMapDispatchToProps', 'initMergeProps']);

  var mapStateToProps = initMapStateToProps(dispatch, options);
  var mapDispatchToProps = initMapDispatchToProps(dispatch, options);
  var mergeProps = initMergeProps(dispatch, options);

  if (process.env.NODE_ENV !== 'production') {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__verifySubselectors__["a" /* default */])(mapStateToProps, mapDispatchToProps, mergeProps, options.displayName);
  }

  var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;

  return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);
}
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(0)))

/***/ }),
/* 235 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_warning__ = __webpack_require__(52);
/* harmony export (immutable) */ __webpack_exports__["a"] = verifySubselectors;


function verify(selector, methodName, displayName) {
  if (!selector) {
    throw new Error('Unexpected value for ' + methodName + ' in ' + displayName + '.');
  } else if (methodName === 'mapStateToProps' || methodName === 'mapDispatchToProps') {
    if (!selector.hasOwnProperty('dependsOnOwnProps')) {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils_warning__["a" /* default */])('The selector for ' + methodName + ' of ' + displayName + ' did not specify a value for dependsOnOwnProps.');
    }
  }
}

function verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, displayName) {
  verify(mapStateToProps, 'mapStateToProps', displayName);
  verify(mapDispatchToProps, 'mapDispatchToProps', displayName);
  verify(mergeProps, 'mergeProps', displayName);
}

/***/ }),
/* 236 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Subscription; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// encapsulates the subscription logic for connecting a component to the redux store, as
// well as nesting subscriptions of descendant components, so that we can ensure the
// ancestor components re-render before descendants

var CLEARED = null;
var nullListeners = {
  notify: function notify() {}
};

function createListenerCollection() {
  // the current/next pattern is copied from redux's createStore code.
  // TODO: refactor+expose that code to be reusable here?
  var current = [];
  var next = [];

  return {
    clear: function clear() {
      next = CLEARED;
      current = CLEARED;
    },
    notify: function notify() {
      var listeners = current = next;
      for (var i = 0; i < listeners.length; i++) {
        listeners[i]();
      }
    },
    subscribe: function subscribe(listener) {
      var isSubscribed = true;
      if (next === current) next = current.slice();
      next.push(listener);

      return function unsubscribe() {
        if (!isSubscribed || current === CLEARED) return;
        isSubscribed = false;

        if (next === current) next = current.slice();
        next.splice(next.indexOf(listener), 1);
      };
    }
  };
}

var Subscription = function () {
  function Subscription(store, parentSub, onStateChange) {
    _classCallCheck(this, Subscription);

    this.store = store;
    this.parentSub = parentSub;
    this.onStateChange = onStateChange;
    this.unsubscribe = null;
    this.listeners = nullListeners;
  }

  Subscription.prototype.addNestedSub = function addNestedSub(listener) {
    this.trySubscribe();
    return this.listeners.subscribe(listener);
  };

  Subscription.prototype.notifyNestedSubs = function notifyNestedSubs() {
    this.listeners.notify();
  };

  Subscription.prototype.isSubscribed = function isSubscribed() {
    return Boolean(this.unsubscribe);
  };

  Subscription.prototype.trySubscribe = function trySubscribe() {
    if (!this.unsubscribe) {
      this.unsubscribe = this.parentSub ? this.parentSub.addNestedSub(this.onStateChange) : this.store.subscribe(this.onStateChange);

      this.listeners = createListenerCollection();
    }
  };

  Subscription.prototype.tryUnsubscribe = function tryUnsubscribe() {
    if (this.unsubscribe) {
      this.unsubscribe();
      this.unsubscribe = null;
      this.listeners.clear();
      this.listeners = nullListeners;
    }
  };

  return Subscription;
}();



/***/ }),
/* 237 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = shallowEqual;
var hasOwn = Object.prototype.hasOwnProperty;

function is(x, y) {
  if (x === y) {
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
}

function shallowEqual(objA, objB) {
  if (is(objA, objB)) return true;

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) return false;

  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwn.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

/**
 * Unescape and unwrap key for human-readable display
 *
 * @param {string} key to unescape.
 * @return {string} the unescaped key.
 */
function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = {
    '=0': '=',
    '=2': ':'
  };
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(unescapeRegex, function (match) {
    return unescaperLookup[match];
  });
}

var KeyEscapeUtils = {
  escape: escape,
  unescape: unescape
};

module.exports = KeyEscapeUtils;

/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(16);

var invariant = __webpack_require__(1);

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function (copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function (a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function (a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function (a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function (instance) {
  var Klass = this;
  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances.
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function (CopyConstructor, pooler) {
  // Casting as any so that flow ignores the actual implementation and trusts
  // it to match the type we declared
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler
};

module.exports = PooledClass;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var PooledClass = __webpack_require__(239);
var ReactElement = __webpack_require__(15);

var emptyFunction = __webpack_require__(9);
var traverseAllChildren = __webpack_require__(248);

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var fourArgumentPooler = PooledClass.fourArgumentPooler;

var userProvidedKeyEscapeRegex = /\/+/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.func = forEachFunction;
  this.context = forEachContext;
  this.count = 0;
}
ForEachBookKeeping.prototype.destructor = function () {
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func,
      context = bookKeeping.context;

  func.call(context, child, bookKeeping.count++);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }
  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
  this.result = mapResult;
  this.keyPrefix = keyPrefix;
  this.func = mapFunction;
  this.context = mapContext;
  this.count = 0;
}
MapBookKeeping.prototype.destructor = function () {
  this.result = null;
  this.keyPrefix = null;
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result,
      keyPrefix = bookKeeping.keyPrefix,
      func = bookKeeping.func,
      context = bookKeeping.context;


  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
  } else if (mappedChild != null) {
    if (ReactElement.isValidElement(mappedChild)) {
      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
      // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}

function forEachSingleChildDummy(traverseContext, child, name) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
 */
function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
  return result;
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
  count: countChildren,
  toArray: toArray
};

module.exports = ReactChildren;

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(16),
    _assign = __webpack_require__(4);

var ReactComponent = __webpack_require__(53);
var ReactElement = __webpack_require__(15);
var ReactPropTypeLocationNames = __webpack_require__(55);
var ReactNoopUpdateQueue = __webpack_require__(54);

var emptyObject = __webpack_require__(22);
var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var MIXINS_KEY = 'mixins';

// Helper function to allow the creation of anonymous functions which do not
// have .name set to the name of the variable being assigned to.
function identity(fn) {
  return fn;
}

/**
 * Policies that describe methods in `ReactClassInterface`.
 */


var injectedMixins = [];

/**
 * Composite components are higher-level components that compose other composite
 * or host components.
 *
 * To create a new type of `ReactClass`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactClassInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will be available on the prototype.
 *
 * @interface ReactClassInterface
 * @internal
 */
var ReactClassInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: 'DEFINE_MANY',

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: 'DEFINE_MANY',

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: 'DEFINE_MANY',

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: 'DEFINE_MANY',

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: 'DEFINE_MANY',

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: 'DEFINE_MANY_MERGED',

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: 'DEFINE_MANY_MERGED',

  /**
   * @return {object}
   * @optional
   */
  getChildContext: 'DEFINE_MANY_MERGED',

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: 'DEFINE_ONCE',

  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: 'DEFINE_MANY',

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: 'DEFINE_MANY',

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: 'DEFINE_MANY',

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: 'DEFINE_ONCE',

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: 'DEFINE_MANY',

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: 'DEFINE_MANY',

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: 'DEFINE_MANY',

  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: 'OVERRIDE_BASE'

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function (Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function (Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function (Constructor, childContextTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, childContextTypes, 'childContext');
    }
    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);
  },
  contextTypes: function (Constructor, contextTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, contextTypes, 'context');
    }
    Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function (Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function (Constructor, propTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, propTypes, 'prop');
    }
    Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
  },
  statics: function (Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  },
  autobind: function () {} };

function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      // use a warning instead of an invariant so components
      // don't show up in prod but only in __DEV__
      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
    }
  }
}

function validateMethodOverride(isAlreadyDefined, name) {
  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactClassMixin.hasOwnProperty(name)) {
    !(specPolicy === 'OVERRIDE_BASE') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name) : void 0;
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (isAlreadyDefined) {
    !(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name) : void 0;
  }
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building React classes.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    if (process.env.NODE_ENV !== 'production') {
      var typeofSpec = typeof spec;
      var isMixinValid = typeofSpec === 'object' && spec !== null;

      process.env.NODE_ENV !== 'production' ? warning(isMixinValid, '%s: You\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;
    }

    return;
  }

  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75') : void 0;
  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;

  var proto = Constructor.prototype;
  var autoBindPairs = proto.__reactAutoBindPairs;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above.
      continue;
    }

    var property = spec[name];
    var isAlreadyDefined = proto.hasOwnProperty(name);
    validateMethodOverride(isAlreadyDefined, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactClass methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
      var isFunction = typeof property === 'function';
      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

      if (shouldAutoBind) {
        autoBindPairs.push(name, property);
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactClassInterface[name];

          // These cases should already be caught by validateMethodOverride.
          !(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name) : void 0;

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === 'DEFINE_MANY_MERGED') {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === 'DEFINE_MANY') {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if (process.env.NODE_ENV !== 'production') {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = name in RESERVED_SPEC_KEYS;
    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;

    var isInherited = name in Constructor;
    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeIntoWithNoDuplicateKeys(one, two) {
  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80') : void 0;

  for (var key in two) {
    if (two.hasOwnProperty(key)) {
      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key) : void 0;
      one[key] = two[key];
    }
  }
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    var c = {};
    mergeIntoWithNoDuplicateKeys(c, a);
    mergeIntoWithNoDuplicateKeys(c, b);
    return c;
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * Binds a method to the component.
 *
 * @param {object} component Component whose method is going to be bound.
 * @param {function} method Method to be bound.
 * @return {function} The bound method.
 */
function bindAutoBindMethod(component, method) {
  var boundMethod = method.bind(component);
  if (process.env.NODE_ENV !== 'production') {
    boundMethod.__reactBoundContext = component;
    boundMethod.__reactBoundMethod = method;
    boundMethod.__reactBoundArguments = null;
    var componentName = component.constructor.displayName;
    var _bind = boundMethod.bind;
    boundMethod.bind = function (newThis) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      // User is trying to bind() an autobound method; we effectively will
      // ignore the value of "this" that the user is trying to use, so
      // let's warn.
      if (newThis !== component && newThis !== null) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
      } else if (!args.length) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
        return boundMethod;
      }
      var reboundMethod = _bind.apply(boundMethod, arguments);
      reboundMethod.__reactBoundContext = component;
      reboundMethod.__reactBoundMethod = method;
      reboundMethod.__reactBoundArguments = args;
      return reboundMethod;
    };
  }
  return boundMethod;
}

/**
 * Binds all auto-bound methods in a component.
 *
 * @param {object} component Component whose method is going to be bound.
 */
function bindAutoBindMethods(component) {
  var pairs = component.__reactAutoBindPairs;
  for (var i = 0; i < pairs.length; i += 2) {
    var autoBindKey = pairs[i];
    var method = pairs[i + 1];
    component[autoBindKey] = bindAutoBindMethod(component, method);
  }
}

/**
 * Add more to the ReactClass base class. These are all legacy features and
 * therefore not already part of the modern ReactComponent.
 */
var ReactClassMixin = {

  /**
   * TODO: This will be deprecated because state should always keep a consistent
   * type signature and the only use case for this, is to avoid that.
   */
  replaceState: function (newState, callback) {
    this.updater.enqueueReplaceState(this, newState);
    if (callback) {
      this.updater.enqueueCallback(this, callback, 'replaceState');
    }
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function () {
    return this.updater.isMounted(this);
  }
};

var ReactClassComponent = function () {};
_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

/**
 * Module for creating composite components.
 *
 * @class ReactClass
 */
var ReactClass = {

  /**
   * Creates a composite component class given a class specification.
   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function (spec) {
    // To keep our warnings more understandable, we'll use a little hack here to
    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
    // unnecessarily identify a class without displayName as 'Constructor'.
    var Constructor = identity(function (props, context, updater) {
      // This constructor gets overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
      }

      // Wire up auto-binding
      if (this.__reactAutoBindPairs.length) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;

      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if (process.env.NODE_ENV !== 'production') {
        // We allow auto-mocks to proceed as if they're returning null.
        if (initialState === undefined && this.getInitialState._isMockFunction) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;
        }
      }
      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;

      this.state = initialState;
    });
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;
    Constructor.prototype.__reactAutoBindPairs = [];

    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged.
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if (process.env.NODE_ENV !== 'production') {
      // This is a tag to indicate that the use of these method names is ok,
      // since it's used with createClass. If it's not, then it's likely a
      // mistake so we'll warn you to use the static property, property
      // initializer or constructor respectively.
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    return Constructor;
  },

  injection: {
    injectMixin: function (mixin) {
      injectedMixins.push(mixin);
    }
  }

};

module.exports = ReactClass;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactElement = __webpack_require__(15);

/**
 * Create a factory that creates HTML tag elements.
 *
 * @private
 */
var createDOMFactory = ReactElement.createFactory;
if (process.env.NODE_ENV !== 'production') {
  var ReactElementValidator = __webpack_require__(94);
  createDOMFactory = ReactElementValidator.createFactory;
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOMFactories = {
  a: createDOMFactory('a'),
  abbr: createDOMFactory('abbr'),
  address: createDOMFactory('address'),
  area: createDOMFactory('area'),
  article: createDOMFactory('article'),
  aside: createDOMFactory('aside'),
  audio: createDOMFactory('audio'),
  b: createDOMFactory('b'),
  base: createDOMFactory('base'),
  bdi: createDOMFactory('bdi'),
  bdo: createDOMFactory('bdo'),
  big: createDOMFactory('big'),
  blockquote: createDOMFactory('blockquote'),
  body: createDOMFactory('body'),
  br: createDOMFactory('br'),
  button: createDOMFactory('button'),
  canvas: createDOMFactory('canvas'),
  caption: createDOMFactory('caption'),
  cite: createDOMFactory('cite'),
  code: createDOMFactory('code'),
  col: createDOMFactory('col'),
  colgroup: createDOMFactory('colgroup'),
  data: createDOMFactory('data'),
  datalist: createDOMFactory('datalist'),
  dd: createDOMFactory('dd'),
  del: createDOMFactory('del'),
  details: createDOMFactory('details'),
  dfn: createDOMFactory('dfn'),
  dialog: createDOMFactory('dialog'),
  div: createDOMFactory('div'),
  dl: createDOMFactory('dl'),
  dt: createDOMFactory('dt'),
  em: createDOMFactory('em'),
  embed: createDOMFactory('embed'),
  fieldset: createDOMFactory('fieldset'),
  figcaption: createDOMFactory('figcaption'),
  figure: createDOMFactory('figure'),
  footer: createDOMFactory('footer'),
  form: createDOMFactory('form'),
  h1: createDOMFactory('h1'),
  h2: createDOMFactory('h2'),
  h3: createDOMFactory('h3'),
  h4: createDOMFactory('h4'),
  h5: createDOMFactory('h5'),
  h6: createDOMFactory('h6'),
  head: createDOMFactory('head'),
  header: createDOMFactory('header'),
  hgroup: createDOMFactory('hgroup'),
  hr: createDOMFactory('hr'),
  html: createDOMFactory('html'),
  i: createDOMFactory('i'),
  iframe: createDOMFactory('iframe'),
  img: createDOMFactory('img'),
  input: createDOMFactory('input'),
  ins: createDOMFactory('ins'),
  kbd: createDOMFactory('kbd'),
  keygen: createDOMFactory('keygen'),
  label: createDOMFactory('label'),
  legend: createDOMFactory('legend'),
  li: createDOMFactory('li'),
  link: createDOMFactory('link'),
  main: createDOMFactory('main'),
  map: createDOMFactory('map'),
  mark: createDOMFactory('mark'),
  menu: createDOMFactory('menu'),
  menuitem: createDOMFactory('menuitem'),
  meta: createDOMFactory('meta'),
  meter: createDOMFactory('meter'),
  nav: createDOMFactory('nav'),
  noscript: createDOMFactory('noscript'),
  object: createDOMFactory('object'),
  ol: createDOMFactory('ol'),
  optgroup: createDOMFactory('optgroup'),
  option: createDOMFactory('option'),
  output: createDOMFactory('output'),
  p: createDOMFactory('p'),
  param: createDOMFactory('param'),
  picture: createDOMFactory('picture'),
  pre: createDOMFactory('pre'),
  progress: createDOMFactory('progress'),
  q: createDOMFactory('q'),
  rp: createDOMFactory('rp'),
  rt: createDOMFactory('rt'),
  ruby: createDOMFactory('ruby'),
  s: createDOMFactory('s'),
  samp: createDOMFactory('samp'),
  script: createDOMFactory('script'),
  section: createDOMFactory('section'),
  select: createDOMFactory('select'),
  small: createDOMFactory('small'),
  source: createDOMFactory('source'),
  span: createDOMFactory('span'),
  strong: createDOMFactory('strong'),
  style: createDOMFactory('style'),
  sub: createDOMFactory('sub'),
  summary: createDOMFactory('summary'),
  sup: createDOMFactory('sup'),
  table: createDOMFactory('table'),
  tbody: createDOMFactory('tbody'),
  td: createDOMFactory('td'),
  textarea: createDOMFactory('textarea'),
  tfoot: createDOMFactory('tfoot'),
  th: createDOMFactory('th'),
  thead: createDOMFactory('thead'),
  time: createDOMFactory('time'),
  title: createDOMFactory('title'),
  tr: createDOMFactory('tr'),
  track: createDOMFactory('track'),
  u: createDOMFactory('u'),
  ul: createDOMFactory('ul'),
  'var': createDOMFactory('var'),
  video: createDOMFactory('video'),
  wbr: createDOMFactory('wbr'),

  // SVG
  circle: createDOMFactory('circle'),
  clipPath: createDOMFactory('clipPath'),
  defs: createDOMFactory('defs'),
  ellipse: createDOMFactory('ellipse'),
  g: createDOMFactory('g'),
  image: createDOMFactory('image'),
  line: createDOMFactory('line'),
  linearGradient: createDOMFactory('linearGradient'),
  mask: createDOMFactory('mask'),
  path: createDOMFactory('path'),
  pattern: createDOMFactory('pattern'),
  polygon: createDOMFactory('polygon'),
  polyline: createDOMFactory('polyline'),
  radialGradient: createDOMFactory('radialGradient'),
  rect: createDOMFactory('rect'),
  stop: createDOMFactory('stop'),
  svg: createDOMFactory('svg'),
  text: createDOMFactory('text'),
  tspan: createDOMFactory('tspan')
};

module.exports = ReactDOMFactories;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactElement = __webpack_require__(15);
var ReactPropTypeLocationNames = __webpack_require__(55);
var ReactPropTypesSecret = __webpack_require__(95);

var emptyFunction = __webpack_require__(9);
var getIteratorFn = __webpack_require__(57);
var warning = __webpack_require__(2);

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

var ANONYMOUS = '<<anonymous>>';

var ReactPropTypes = {
  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),
  symbol: createPrimitiveTypeChecker('symbol'),

  any: createAnyTypeChecker(),
  arrayOf: createArrayOfTypeChecker,
  element: createElementTypeChecker(),
  instanceOf: createInstanceTypeChecker,
  node: createNodeChecker(),
  objectOf: createObjectOfTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  shape: createShapeTypeChecker
};

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
/*eslint-disable no-self-compare*/
function is(x, y) {
  // SameValue algorithm
  if (x === y) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    return x !== 0 || 1 / x === 1 / y;
  } else {
    // Step 6.a: NaN == NaN
    return x !== x && y !== y;
  }
}
/*eslint-enable no-self-compare*/

/**
 * We use an Error-like object for backward compatibility as people may call
 * PropTypes directly and inspect their output. However we don't use real
 * Errors anymore. We don't inspect their stack anyway, and creating them
 * is prohibitively expensive if they are created too often, such as what
 * happens in oneOfType() for any type before the one that matched.
 */
function PropTypeError(message) {
  this.message = message;
  this.stack = '';
}
// Make `instanceof Error` still work for returned errors.
PropTypeError.prototype = Error.prototype;

function createChainableTypeChecker(validate) {
  if (process.env.NODE_ENV !== 'production') {
    var manualPropTypeCallCache = {};
  }
  function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
    componentName = componentName || ANONYMOUS;
    propFullName = propFullName || propName;
    if (process.env.NODE_ENV !== 'production') {
      if (secret !== ReactPropTypesSecret && typeof console !== 'undefined') {
        var cacheKey = componentName + ':' + propName;
        if (!manualPropTypeCallCache[cacheKey]) {
          process.env.NODE_ENV !== 'production' ? warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will not work in production with the next major version. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName) : void 0;
          manualPropTypeCallCache[cacheKey] = true;
        }
      }
    }
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        if (props[propName] === null) {
          return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
        }
        return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
      }
      return null;
    } else {
      return validate(props, propName, componentName, location, propFullName);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location, propFullName, secret) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];
      // `propValue` being instance of, say, date/regexp, pass the 'object'
      // check, but we can offer a more precise error message here rather than
      // 'of type `object`'.
      var preciseType = getPreciseType(propValue);

      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns(null));
}

function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location, propFullName) {
    if (typeof typeChecker !== 'function') {
      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
    }
    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
    }
    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
      if (error instanceof Error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createElementTypeChecker() {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    if (!ReactElement.isValidElement(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location, propFullName) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      var actualClassName = getClassName(props[propName]);
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
  if (!Array.isArray(expectedValues)) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
    return emptyFunction.thatReturnsNull;
  }

  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (is(propValue, expectedValues[i])) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
  }
  return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location, propFullName) {
    if (typeof typeChecker !== 'function') {
      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
    }
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
    }
    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
  if (!Array.isArray(arrayOfTypeCheckers)) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
    return emptyFunction.thatReturnsNull;
  }

  function validate(props, propName, componentName, location, propFullName) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
  }
  return createChainableTypeChecker(validate);
}

function createNodeChecker() {
  function validate(props, propName, componentName, location, propFullName) {
    if (!isNode(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
    }
    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;
      }
      var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
      if (error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function isNode(propValue) {
  switch (typeof propValue) {
    case 'number':
    case 'string':
    case 'undefined':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isNode);
      }
      if (propValue === null || ReactElement.isValidElement(propValue)) {
        return true;
      }

      var iteratorFn = getIteratorFn(propValue);
      if (iteratorFn) {
        var iterator = iteratorFn.call(propValue);
        var step;
        if (iteratorFn !== propValue.entries) {
          while (!(step = iterator.next()).done) {
            if (!isNode(step.value)) {
              return false;
            }
          }
        } else {
          // Iterator will provide entry [k,v] tuples rather than values.
          while (!(step = iterator.next()).done) {
            var entry = step.value;
            if (entry) {
              if (!isNode(entry[1])) {
                return false;
              }
            }
          }
        }
      } else {
        return false;
      }

      return true;
    default:
      return false;
  }
}

function isSymbol(propType, propValue) {
  // Native Symbol.
  if (propType === 'symbol') {
    return true;
  }

  // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
  if (propValue['@@toStringTag'] === 'Symbol') {
    return true;
  }

  // Fallback for non-spec compliant Symbols which are polyfilled.
  if (typeof Symbol === 'function' && propValue instanceof Symbol) {
    return true;
  }

  return false;
}

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  if (isSymbol(propType, propValue)) {
    return 'symbol';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

// Returns class name of the object, if any.
function getClassName(propValue) {
  if (!propValue.constructor || !propValue.constructor.name) {
    return ANONYMOUS;
  }
  return propValue.constructor.name;
}

module.exports = ReactPropTypes;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var ReactComponent = __webpack_require__(53);
var ReactNoopUpdateQueue = __webpack_require__(54);

var emptyObject = __webpack_require__(22);

/**
 * Base class helpers for the updating state of a component.
 */
function ReactPureComponent(props, context, updater) {
  // Duplicated from ReactComponent.
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

function ComponentDummy() {}
ComponentDummy.prototype = ReactComponent.prototype;
ReactPureComponent.prototype = new ComponentDummy();
ReactPureComponent.prototype.constructor = ReactPureComponent;
// Avoid an extra prototype jump for these methods.
_assign(ReactPureComponent.prototype, ReactComponent.prototype);
ReactPureComponent.prototype.isPureReactComponent = true;

module.exports = ReactPureComponent;

/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



module.exports = '15.4.2';

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(16);

var ReactPropTypeLocationNames = __webpack_require__(55);
var ReactPropTypesSecret = __webpack_require__(95);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(7);
}

var loggedTypeFailures = {};

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?object} element The React element that is being type-checked
 * @param {?number} debugID The React component instance that is being type-checked
 * @private
 */
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if (process.env.NODE_ENV !== 'production') {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = __webpack_require__(7);
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }
    }
  }
}

module.exports = checkReactTypeSpec;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */


var _prodInvariant = __webpack_require__(16);

var ReactElement = __webpack_require__(15);

var invariant = __webpack_require__(1);

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */
function onlyChild(children) {
  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
  return children;
}

module.exports = onlyChild;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(16);

var ReactCurrentOwner = __webpack_require__(11);
var REACT_ELEMENT_TYPE = __webpack_require__(93);

var getIteratorFn = __webpack_require__(57);
var invariant = __webpack_require__(1);
var KeyEscapeUtils = __webpack_require__(238);
var warning = __webpack_require__(2);

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * This is inlined from ReactElement since this file is shared between
 * isomorphic and renderers. We could extract this to a
 *
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (component && typeof component === 'object' && component.key != null) {
    // Explicit key
    return KeyEscapeUtils.escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' ||
  // The following is inlined from ReactElement. This means we can optimize
  // some checks. React Fiber also inlines this logic for similar purposes.
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (process.env.NODE_ENV !== 'production') {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (process.env.NODE_ENV !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.printBuffer = printBuffer;

var _helpers = __webpack_require__(96);

var _diff = __webpack_require__(251);

var _diff2 = _interopRequireDefault(_diff);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * Get log level string based on supplied params
 *
 * @param {string | function | object} level - console[level]
 * @param {object} action - selected action
 * @param {array} payload - selected payload
 * @param {string} type - log entry type
 *
 * @returns {string} level
 */
function getLogLevel(level, action, payload, type) {
  switch (typeof level === 'undefined' ? 'undefined' : _typeof(level)) {
    case 'object':
      return typeof level[type] === 'function' ? level[type].apply(level, _toConsumableArray(payload)) : level[type];
    case 'function':
      return level(action);
    default:
      return level;
  }
}

function defaultTitleFormatter(options) {
  var timestamp = options.timestamp,
      duration = options.duration;


  return function (action, time, took) {
    var parts = ['action'];

    if (timestamp) parts.push('@ ' + time);
    parts.push(String(action.type));
    if (duration) parts.push('(in ' + took.toFixed(2) + ' ms)');

    return parts.join(' ');
  };
}

function printBuffer(buffer, options) {
  var logger = options.logger,
      actionTransformer = options.actionTransformer,
      _options$titleFormatt = options.titleFormatter,
      titleFormatter = _options$titleFormatt === undefined ? defaultTitleFormatter(options) : _options$titleFormatt,
      collapsed = options.collapsed,
      colors = options.colors,
      level = options.level,
      diff = options.diff;


  buffer.forEach(function (logEntry, key) {
    var started = logEntry.started,
        startedTime = logEntry.startedTime,
        action = logEntry.action,
        prevState = logEntry.prevState,
        error = logEntry.error;
    var took = logEntry.took,
        nextState = logEntry.nextState;

    var nextEntry = buffer[key + 1];

    if (nextEntry) {
      nextState = nextEntry.prevState;
      took = nextEntry.started - started;
    }

    // Message
    var formattedAction = actionTransformer(action);
    var isCollapsed = typeof collapsed === 'function' ? collapsed(function () {
      return nextState;
    }, action, logEntry) : collapsed;

    var formattedTime = (0, _helpers.formatTime)(startedTime);
    var titleCSS = colors.title ? 'color: ' + colors.title(formattedAction) + ';' : null;
    var title = titleFormatter(formattedAction, formattedTime, took);

    // Render
    try {
      if (isCollapsed) {
        if (colors.title) logger.groupCollapsed('%c ' + title, titleCSS);else logger.groupCollapsed(title);
      } else {
        if (colors.title) logger.group('%c ' + title, titleCSS);else logger.group(title);
      }
    } catch (e) {
      logger.log(title);
    }

    var prevStateLevel = getLogLevel(level, formattedAction, [prevState], 'prevState');
    var actionLevel = getLogLevel(level, formattedAction, [formattedAction], 'action');
    var errorLevel = getLogLevel(level, formattedAction, [error, prevState], 'error');
    var nextStateLevel = getLogLevel(level, formattedAction, [nextState], 'nextState');

    if (prevStateLevel) {
      if (colors.prevState) logger[prevStateLevel]('%c prev state', 'color: ' + colors.prevState(prevState) + '; font-weight: bold', prevState);else logger[prevStateLevel]('prev state', prevState);
    }

    if (actionLevel) {
      if (colors.action) logger[actionLevel]('%c action', 'color: ' + colors.action(formattedAction) + '; font-weight: bold', formattedAction);else logger[actionLevel]('action', formattedAction);
    }

    if (error && errorLevel) {
      if (colors.error) logger[errorLevel]('%c error', 'color: ' + colors.error(error, prevState) + '; font-weight: bold', error);else logger[errorLevel]('error', error);
    }

    if (nextStateLevel) {
      if (colors.nextState) logger[nextStateLevel]('%c next state', 'color: ' + colors.nextState(nextState) + '; font-weight: bold', nextState);else logger[nextStateLevel]('next state', nextState);
    }

    if (diff) {
      (0, _diff2.default)(prevState, nextState, logger, isCollapsed);
    }

    try {
      logger.groupEnd();
    } catch (e) {
      logger.log('\u2014\u2014 log end \u2014\u2014');
    }
  });
}

/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  level: "log",
  logger: console,
  logErrors: true,
  collapsed: undefined,
  predicate: undefined,
  duration: false,
  timestamp: true,
  stateTransformer: function stateTransformer(state) {
    return state;
  },
  actionTransformer: function actionTransformer(action) {
    return action;
  },
  errorTransformer: function errorTransformer(error) {
    return error;
  },
  colors: {
    title: function title() {
      return "inherit";
    },
    prevState: function prevState() {
      return "#9E9E9E";
    },
    action: function action() {
      return "#03A9F4";
    },
    nextState: function nextState() {
      return "#4CAF50";
    },
    error: function error() {
      return "#F20404";
    }
  },
  diff: false,
  diffPredicate: undefined,

  // Deprecated options
  transformer: undefined
};
module.exports = exports["default"];

/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = diffLogger;

var _deepDiff = __webpack_require__(115);

var _deepDiff2 = _interopRequireDefault(_deepDiff);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

// https://github.com/flitbit/diff#differences
var dictionary = {
  'E': {
    color: '#2196F3',
    text: 'CHANGED:'
  },
  'N': {
    color: '#4CAF50',
    text: 'ADDED:'
  },
  'D': {
    color: '#F44336',
    text: 'DELETED:'
  },
  'A': {
    color: '#2196F3',
    text: 'ARRAY:'
  }
};

function style(kind) {
  return 'color: ' + dictionary[kind].color + '; font-weight: bold';
}

function render(diff) {
  var kind = diff.kind,
      path = diff.path,
      lhs = diff.lhs,
      rhs = diff.rhs,
      index = diff.index,
      item = diff.item;


  switch (kind) {
    case 'E':
      return [path.join('.'), lhs, '\u2192', rhs];
    case 'N':
      return [path.join('.'), rhs];
    case 'D':
      return [path.join('.')];
    case 'A':
      return [path.join('.') + '[' + index + ']', item];
    default:
      return [];
  }
}

function diffLogger(prevState, newState, logger, isCollapsed) {
  var diff = (0, _deepDiff2.default)(prevState, newState);

  try {
    if (isCollapsed) {
      logger.groupCollapsed('diff');
    } else {
      logger.group('diff');
    }
  } catch (e) {
    logger.log('diff');
  }

  if (diff) {
    diff.forEach(function (elem) {
      var kind = elem.kind;

      var output = render(elem);

      logger.log.apply(logger, ['%c ' + dictionary[kind].text, style(kind)].concat(_toConsumableArray(output)));
    });
  } else {
    logger.log('\u2014\u2014 no diff \u2014\u2014');
  }

  try {
    logger.groupEnd();
  } catch (e) {
    logger.log('\u2014\u2014 diff end \u2014\u2014 ');
  }
}
module.exports = exports['default'];

/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _core = __webpack_require__(249);

var _helpers = __webpack_require__(96);

var _defaults = __webpack_require__(250);

var _defaults2 = _interopRequireDefault(_defaults);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Creates logger with following options
 *
 * @namespace
 * @param {object} options - options for logger
 * @param {string | function | object} options.level - console[level]
 * @param {boolean} options.duration - print duration of each action?
 * @param {boolean} options.timestamp - print timestamp with each action?
 * @param {object} options.colors - custom colors
 * @param {object} options.logger - implementation of the `console` API
 * @param {boolean} options.logErrors - should errors in action execution be caught, logged, and re-thrown?
 * @param {boolean} options.collapsed - is group collapsed?
 * @param {boolean} options.predicate - condition which resolves logger behavior
 * @param {function} options.stateTransformer - transform state before print
 * @param {function} options.actionTransformer - transform action before print
 * @param {function} options.errorTransformer - transform error before print
 *
 * @returns {function} logger middleware
 */
function createLogger() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var loggerOptions = _extends({}, _defaults2.default, options);

  var logger = loggerOptions.logger,
      transformer = loggerOptions.transformer,
      stateTransformer = loggerOptions.stateTransformer,
      errorTransformer = loggerOptions.errorTransformer,
      predicate = loggerOptions.predicate,
      logErrors = loggerOptions.logErrors,
      diffPredicate = loggerOptions.diffPredicate;

  // Return if 'console' object is not defined

  if (typeof logger === 'undefined') {
    return function () {
      return function (next) {
        return function (action) {
          return next(action);
        };
      };
    };
  }

  if (transformer) {
    console.error('Option \'transformer\' is deprecated, use \'stateTransformer\' instead!'); // eslint-disable-line no-console
  }

  var logBuffer = [];

  return function (_ref) {
    var getState = _ref.getState;
    return function (next) {
      return function (action) {
        // Exit early if predicate function returns 'false'
        if (typeof predicate === 'function' && !predicate(getState, action)) {
          return next(action);
        }

        var logEntry = {};
        logBuffer.push(logEntry);

        logEntry.started = _helpers.timer.now();
        logEntry.startedTime = new Date();
        logEntry.prevState = stateTransformer(getState());
        logEntry.action = action;

        var returnedValue = void 0;
        if (logErrors) {
          try {
            returnedValue = next(action);
          } catch (e) {
            logEntry.error = errorTransformer(e);
          }
        } else {
          returnedValue = next(action);
        }

        logEntry.took = _helpers.timer.now() - logEntry.started;
        logEntry.nextState = stateTransformer(getState());

        var diff = loggerOptions.diff && typeof diffPredicate === 'function' ? diffPredicate(getState, action) : loggerOptions.diff;

        (0, _core.printBuffer)(logBuffer, _extends({}, loggerOptions, { diff: diff }));
        logBuffer.length = 0;

        if (logEntry.error) throw logEntry.error;
        return returnedValue;
      };
    };
  };
}

exports.default = createLogger;
module.exports = exports['default'];

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
function createThunkMiddleware(extraArgument) {
  return function (_ref) {
    var dispatch = _ref.dispatch,
        getState = _ref.getState;
    return function (next) {
      return function (action) {
        if (typeof action === 'function') {
          return action(dispatch, getState, extraArgument);
        }

        return next(action);
      };
    };
  };
}

var thunk = createThunkMiddleware();
thunk.withExtraArgument = createThunkMiddleware;

exports['default'] = thunk;

/***/ }),
/* 254 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__compose__ = __webpack_require__(97);
/* harmony export (immutable) */ __webpack_exports__["a"] = applyMiddleware;
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



/**
 * Creates a store enhancer that applies middleware to the dispatch method
 * of the Redux store. This is handy for a variety of tasks, such as expressing
 * asynchronous actions in a concise manner, or logging every action payload.
 *
 * See `redux-thunk` package as an example of the Redux middleware.
 *
 * Because middleware is potentially asynchronous, this should be the first
 * store enhancer in the composition chain.
 *
 * Note that each middleware will be given the `dispatch` and `getState` functions
 * as named arguments.
 *
 * @param {...Function} middlewares The middleware chain to be applied.
 * @returns {Function} A store enhancer applying the middleware.
 */
function applyMiddleware() {
  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
    middlewares[_key] = arguments[_key];
  }

  return function (createStore) {
    return function (reducer, preloadedState, enhancer) {
      var store = createStore(reducer, preloadedState, enhancer);
      var _dispatch = store.dispatch;
      var chain = [];

      var middlewareAPI = {
        getState: store.getState,
        dispatch: function dispatch(action) {
          return _dispatch(action);
        }
      };
      chain = middlewares.map(function (middleware) {
        return middleware(middlewareAPI);
      });
      _dispatch = __WEBPACK_IMPORTED_MODULE_0__compose__["a" /* default */].apply(undefined, chain)(store.dispatch);

      return _extends({}, store, {
        dispatch: _dispatch
      });
    };
  };
}

/***/ }),
/* 255 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = bindActionCreators;
function bindActionCreator(actionCreator, dispatch) {
  return function () {
    return dispatch(actionCreator.apply(undefined, arguments));
  };
}

/**
 * Turns an object whose values are action creators, into an object with the
 * same keys, but with every function wrapped into a `dispatch` call so they
 * may be invoked directly. This is just a convenience method, as you can call
 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
 *
 * For convenience, you can also pass a single function as the first argument,
 * and get a function in return.
 *
 * @param {Function|Object} actionCreators An object whose values are action
 * creator functions. One handy way to obtain it is to use ES6 `import * as`
 * syntax. You may also pass a single function.
 *
 * @param {Function} dispatch The `dispatch` function available on your Redux
 * store.
 *
 * @returns {Function|Object} The object mimicking the original object, but with
 * every action creator wrapped into the `dispatch` call. If you passed a
 * function as `actionCreators`, the return value will also be a single
 * function.
 */
function bindActionCreators(actionCreators, dispatch) {
  if (typeof actionCreators === 'function') {
    return bindActionCreator(actionCreators, dispatch);
  }

  if (typeof actionCreators !== 'object' || actionCreators === null) {
    throw new Error('bindActionCreators expected an object or a function, instead received ' + (actionCreators === null ? 'null' : typeof actionCreators) + '. ' + 'Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
  }

  var keys = Object.keys(actionCreators);
  var boundActionCreators = {};
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    var actionCreator = actionCreators[key];
    if (typeof actionCreator === 'function') {
      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
    }
  }
  return boundActionCreators;
}

/***/ }),
/* 256 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__createStore__ = __webpack_require__(98);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash_es_isPlainObject__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_warning__ = __webpack_require__(100);
/* harmony export (immutable) */ __webpack_exports__["a"] = combineReducers;




function getUndefinedStateErrorMessage(key, action) {
  var actionType = action && action.type;
  var actionName = actionType && '"' + actionType.toString() + '"' || 'an action';

  return 'Given action ' + actionName + ', reducer "' + key + '" returned undefined. ' + 'To ignore an action, you must explicitly return the previous state.';
}

function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
  var reducerKeys = Object.keys(reducers);
  var argumentName = action && action.type === __WEBPACK_IMPORTED_MODULE_0__createStore__["b" /* ActionTypes */].INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';

  if (reducerKeys.length === 0) {
    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
  }

  if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_lodash_es_isPlainObject__["a" /* default */])(inputState)) {
    return 'The ' + argumentName + ' has unexpected type of "' + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
  }

  var unexpectedKeys = Object.keys(inputState).filter(function (key) {
    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
  });

  unexpectedKeys.forEach(function (key) {
    unexpectedKeyCache[key] = true;
  });

  if (unexpectedKeys.length > 0) {
    return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + '. ') + 'Expected to find one of the known reducer keys instead: ' + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
  }
}

function assertReducerSanity(reducers) {
  Object.keys(reducers).forEach(function (key) {
    var reducer = reducers[key];
    var initialState = reducer(undefined, { type: __WEBPACK_IMPORTED_MODULE_0__createStore__["b" /* ActionTypes */].INIT });

    if (typeof initialState === 'undefined') {
      throw new Error('Reducer "' + key + '" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined.');
    }

    var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');
    if (typeof reducer(undefined, { type: type }) === 'undefined') {
      throw new Error('Reducer "' + key + '" returned undefined when probed with a random type. ' + ('Don\'t try to handle ' + __WEBPACK_IMPORTED_MODULE_0__createStore__["b" /* ActionTypes */].INIT + ' or other actions in "redux/*" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined.');
    }
  });
}

/**
 * Turns an object whose values are different reducer functions, into a single
 * reducer function. It will call every child reducer, and gather their results
 * into a single state object, whose keys correspond to the keys of the passed
 * reducer functions.
 *
 * @param {Object} reducers An object whose values correspond to different
 * reducer functions that need to be combined into one. One handy way to obtain
 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
 * undefined for any action. Instead, they should return their initial state
 * if the state passed to them was undefined, and the current state for any
 * unrecognized action.
 *
 * @returns {Function} A reducer function that invokes every reducer inside the
 * passed object, and builds a state object with the same shape.
 */
function combineReducers(reducers) {
  var reducerKeys = Object.keys(reducers);
  var finalReducers = {};
  for (var i = 0; i < reducerKeys.length; i++) {
    var key = reducerKeys[i];

    if (process.env.NODE_ENV !== 'production') {
      if (typeof reducers[key] === 'undefined') {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_warning__["a" /* default */])('No reducer provided for key "' + key + '"');
      }
    }

    if (typeof reducers[key] === 'function') {
      finalReducers[key] = reducers[key];
    }
  }
  var finalReducerKeys = Object.keys(finalReducers);

  if (process.env.NODE_ENV !== 'production') {
    var unexpectedKeyCache = {};
  }

  var sanityError;
  try {
    assertReducerSanity(finalReducers);
  } catch (e) {
    sanityError = e;
  }

  return function combination() {
    var state = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var action = arguments[1];

    if (sanityError) {
      throw sanityError;
    }

    if (process.env.NODE_ENV !== 'production') {
      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
      if (warningMessage) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_warning__["a" /* default */])(warningMessage);
      }
    }

    var hasChanged = false;
    var nextState = {};
    for (var i = 0; i < finalReducerKeys.length; i++) {
      var key = finalReducerKeys[i];
      var reducer = finalReducers[key];
      var previousStateForKey = state[key];
      var nextStateForKey = reducer(previousStateForKey, action);
      if (typeof nextStateForKey === 'undefined') {
        var errorMessage = getUndefinedStateErrorMessage(key, action);
        throw new Error(errorMessage);
      }
      nextState[key] = nextStateForKey;
      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
    }
    return hasChanged ? nextState : state;
  };
}
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(0)))

/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function hash(str) {
  var hash = 5381,
      i    = str.length;

  while(i) {
    hash = (hash * 33) ^ str.charCodeAt(--i);
  }

  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed
   * integers. Since we want the results to be always positive, convert the
   * signed int to an unsigned by doing an unsigned bitshift. */
  return hash >>> 0;
}

module.exports = hash;


/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(259);


/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, module) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ponyfill = __webpack_require__(260);

var _ponyfill2 = _interopRequireDefault(_ponyfill);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var root; /* global window */


if (typeof self !== 'undefined') {
  root = self;
} else if (typeof window !== 'undefined') {
  root = window;
} else if (typeof global !== 'undefined') {
  root = global;
} else if (true) {
  root = module;
} else {
  root = Function('return this')();
}

var result = (0, _ponyfill2['default'])(root);
exports['default'] = result;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(33), __webpack_require__(262)(module)))

/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports['default'] = symbolObservablePonyfill;
function symbolObservablePonyfill(root) {
	var result;
	var _Symbol = root.Symbol;

	if (typeof _Symbol === 'function') {
		if (_Symbol.observable) {
			result = _Symbol.observable;
		} else {
			result = _Symbol('observable');
			_Symbol.observable = result;
		}
	} else {
		result = '@@observable';
	}

	return result;
};

/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/topojson/topojson Version 2.2.0. Copyright 2016 Mike Bostock.
(function (global, factory) {
   true ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global.topojson = global.topojson || {})));
}(this, (function (exports) { 'use strict';

// Computes the bounding box of the specified hash of GeoJSON objects.
var bounds = function(objects) {
  var x0 = Infinity,
      y0 = Infinity,
      x1 = -Infinity,
      y1 = -Infinity;

  function boundGeometry(geometry) {
    if (geometry && boundGeometryType.hasOwnProperty(geometry.type)) boundGeometryType[geometry.type](geometry);
  }

  var boundGeometryType = {
    GeometryCollection: function(o) { o.geometries.forEach(boundGeometry); },
    Point: function(o) { boundPoint(o.coordinates); },
    MultiPoint: function(o) { o.coordinates.forEach(boundPoint); },
    LineString: function(o) { boundLine(o.coordinates); },
    MultiLineString: function(o) { o.coordinates.forEach(boundLine); },
    Polygon: function(o) { o.coordinates.forEach(boundLine); },
    MultiPolygon: function(o) { o.coordinates.forEach(boundMultiLine); }
  };

  function boundPoint(coordinates) {
    var x = coordinates[0],
        y = coordinates[1];
    if (x < x0) x0 = x;
    if (x > x1) x1 = x;
    if (y < y0) y0 = y;
    if (y > y1) y1 = y;
  }

  function boundLine(coordinates) {
    coordinates.forEach(boundPoint);
  }

  function boundMultiLine(coordinates) {
    coordinates.forEach(boundLine);
  }

  for (var key in objects) {
    boundGeometry(objects[key]);
  }

  return x1 >= x0 && y1 >= y0 ? [x0, y0, x1, y1] : undefined;
};

var hashset = function(size, hash, equal, type, empty) {
  if (arguments.length === 3) {
    type = Array;
    empty = null;
  }

  var store = new type(size = 1 << Math.max(4, Math.ceil(Math.log(size) / Math.LN2))),
      mask = size - 1;

  for (var i = 0; i < size; ++i) {
    store[i] = empty;
  }

  function add(value) {
    var index = hash(value) & mask,
        match = store[index],
        collisions = 0;
    while (match != empty) {
      if (equal(match, value)) return true;
      if (++collisions >= size) throw new Error("full hashset");
      match = store[index = (index + 1) & mask];
    }
    store[index] = value;
    return true;
  }

  function has(value) {
    var index = hash(value) & mask,
        match = store[index],
        collisions = 0;
    while (match != empty) {
      if (equal(match, value)) return true;
      if (++collisions >= size) break;
      match = store[index = (index + 1) & mask];
    }
    return false;
  }

  function values() {
    var values = [];
    for (var i = 0, n = store.length; i < n; ++i) {
      var match = store[i];
      if (match != empty) values.push(match);
    }
    return values;
  }

  return {
    add: add,
    has: has,
    values: values
  };
};

var hashmap = function(size, hash, equal, keyType, keyEmpty, valueType) {
  if (arguments.length === 3) {
    keyType = valueType = Array;
    keyEmpty = null;
  }

  var keystore = new keyType(size = 1 << Math.max(4, Math.ceil(Math.log(size) / Math.LN2))),
      valstore = new valueType(size),
      mask = size - 1;

  for (var i = 0; i < size; ++i) {
    keystore[i] = keyEmpty;
  }

  function set(key, value) {
    var index = hash(key) & mask,
        matchKey = keystore[index],
        collisions = 0;
    while (matchKey != keyEmpty) {
      if (equal(matchKey, key)) return valstore[index] = value;
      if (++collisions >= size) throw new Error("full hashmap");
      matchKey = keystore[index = (index + 1) & mask];
    }
    keystore[index] = key;
    valstore[index] = value;
    return value;
  }

  function maybeSet(key, value) {
    var index = hash(key) & mask,
        matchKey = keystore[index],
        collisions = 0;
    while (matchKey != keyEmpty) {
      if (equal(matchKey, key)) return valstore[index];
      if (++collisions >= size) throw new Error("full hashmap");
      matchKey = keystore[index = (index + 1) & mask];
    }
    keystore[index] = key;
    valstore[index] = value;
    return value;
  }

  function get(key, missingValue) {
    var index = hash(key) & mask,
        matchKey = keystore[index],
        collisions = 0;
    while (matchKey != keyEmpty) {
      if (equal(matchKey, key)) return valstore[index];
      if (++collisions >= size) break;
      matchKey = keystore[index = (index + 1) & mask];
    }
    return missingValue;
  }

  function keys() {
    var keys = [];
    for (var i = 0, n = keystore.length; i < n; ++i) {
      var matchKey = keystore[i];
      if (matchKey != keyEmpty) keys.push(matchKey);
    }
    return keys;
  }

  return {
    set: set,
    maybeSet: maybeSet, // set if unset
    get: get,
    keys: keys
  };
};

var equalPoint = function(pointA, pointB) {
  return pointA[0] === pointB[0] && pointA[1] === pointB[1];
};

// TODO if quantized, use simpler Int32 hashing?

var buffer = new ArrayBuffer(16);
var floats = new Float64Array(buffer);
var uints = new Uint32Array(buffer);

var hashPoint = function(point) {
  floats[0] = point[0];
  floats[1] = point[1];
  var hash = uints[0] ^ uints[1];
  hash = hash << 5 ^ hash >> 7 ^ uints[2] ^ uints[3];
  return hash & 0x7fffffff;
};

// Given an extracted (pre-)topology, identifies all of the junctions. These are
// the points at which arcs (lines or rings) will need to be cut so that each
// arc is represented uniquely.
//
// A junction is a point where at least one arc deviates from another arc going
// through the same point. For example, consider the point B. If there is a arc
// through ABC and another arc through CBA, then B is not a junction because in
// both cases the adjacent point pairs are {A,C}. However, if there is an
// additional arc ABD, then {A,D} != {A,C}, and thus B becomes a junction.
//
// For a closed ring ABCA, the first point A’s adjacent points are the second
// and last point {B,C}. For a line, the first and last point are always
// considered junctions, even if the line is closed; this ensures that a closed
// line is never rotated.
var join = function(topology) {
  var coordinates = topology.coordinates,
      lines = topology.lines,
      rings = topology.rings,
      indexes = index(),
      visitedByIndex = new Int32Array(coordinates.length),
      leftByIndex = new Int32Array(coordinates.length),
      rightByIndex = new Int32Array(coordinates.length),
      junctionByIndex = new Int8Array(coordinates.length),
      junctionCount = 0, // upper bound on number of junctions
      i, n,
      previousIndex,
      currentIndex,
      nextIndex;

  for (i = 0, n = coordinates.length; i < n; ++i) {
    visitedByIndex[i] = leftByIndex[i] = rightByIndex[i] = -1;
  }

  for (i = 0, n = lines.length; i < n; ++i) {
    var line = lines[i],
        lineStart = line[0],
        lineEnd = line[1];
    currentIndex = indexes[lineStart];
    nextIndex = indexes[++lineStart];
    ++junctionCount, junctionByIndex[currentIndex] = 1; // start
    while (++lineStart <= lineEnd) {
      sequence(i, previousIndex = currentIndex, currentIndex = nextIndex, nextIndex = indexes[lineStart]);
    }
    ++junctionCount, junctionByIndex[nextIndex] = 1; // end
  }

  for (i = 0, n = coordinates.length; i < n; ++i) {
    visitedByIndex[i] = -1;
  }

  for (i = 0, n = rings.length; i < n; ++i) {
    var ring = rings[i],
        ringStart = ring[0] + 1,
        ringEnd = ring[1];
    previousIndex = indexes[ringEnd - 1];
    currentIndex = indexes[ringStart - 1];
    nextIndex = indexes[ringStart];
    sequence(i, previousIndex, currentIndex, nextIndex);
    while (++ringStart <= ringEnd) {
      sequence(i, previousIndex = currentIndex, currentIndex = nextIndex, nextIndex = indexes[ringStart]);
    }
  }

  function sequence(i, previousIndex, currentIndex, nextIndex) {
    if (visitedByIndex[currentIndex] === i) return; // ignore self-intersection
    visitedByIndex[currentIndex] = i;
    var leftIndex = leftByIndex[currentIndex];
    if (leftIndex >= 0) {
      var rightIndex = rightByIndex[currentIndex];
      if ((leftIndex !== previousIndex || rightIndex !== nextIndex)
        && (leftIndex !== nextIndex || rightIndex !== previousIndex)) {
        ++junctionCount, junctionByIndex[currentIndex] = 1;
      }
    } else {
      leftByIndex[currentIndex] = previousIndex;
      rightByIndex[currentIndex] = nextIndex;
    }
  }

  function index() {
    var indexByPoint = hashmap(coordinates.length * 1.4, hashIndex, equalIndex, Int32Array, -1, Int32Array),
        indexes = new Int32Array(coordinates.length);

    for (var i = 0, n = coordinates.length; i < n; ++i) {
      indexes[i] = indexByPoint.maybeSet(i, i);
    }

    return indexes;
  }

  function hashIndex(i) {
    return hashPoint(coordinates[i]);
  }

  function equalIndex(i, j) {
    return equalPoint(coordinates[i], coordinates[j]);
  }

  visitedByIndex = leftByIndex = rightByIndex = null;

  var junctionByPoint = hashset(junctionCount * 1.4, hashPoint, equalPoint), j;

  // Convert back to a standard hashset by point for caller convenience.
  for (i = 0, n = coordinates.length; i < n; ++i) {
    if (junctionByIndex[j = indexes[i]]) {
      junctionByPoint.add(coordinates[j]);
    }
  }

  return junctionByPoint;
};

// Given an extracted (pre-)topology, cuts (or rotates) arcs so that all shared
// point sequences are identified. The topology can then be subsequently deduped
// to remove exact duplicate arcs.
var cut = function(topology) {
  var junctions = join(topology),
      coordinates = topology.coordinates,
      lines = topology.lines,
      rings = topology.rings,
      next,
      i, n;

  for (i = 0, n = lines.length; i < n; ++i) {
    var line = lines[i],
        lineMid = line[0],
        lineEnd = line[1];
    while (++lineMid < lineEnd) {
      if (junctions.has(coordinates[lineMid])) {
        next = {0: lineMid, 1: line[1]};
        line[1] = lineMid;
        line = line.next = next;
      }
    }
  }

  for (i = 0, n = rings.length; i < n; ++i) {
    var ring = rings[i],
        ringStart = ring[0],
        ringMid = ringStart,
        ringEnd = ring[1],
        ringFixed = junctions.has(coordinates[ringStart]);
    while (++ringMid < ringEnd) {
      if (junctions.has(coordinates[ringMid])) {
        if (ringFixed) {
          next = {0: ringMid, 1: ring[1]};
          ring[1] = ringMid;
          ring = ring.next = next;
        } else { // For the first junction, we can rotate rather than cut.
          rotateArray(coordinates, ringStart, ringEnd, ringEnd - ringMid);
          coordinates[ringEnd] = coordinates[ringStart];
          ringFixed = true;
          ringMid = ringStart; // restart; we may have skipped junctions
        }
      }
    }
  }

  return topology;
};

function rotateArray(array, start, end, offset) {
  reverse(array, start, end);
  reverse(array, start, start + offset);
  reverse(array, start + offset, end);
}

function reverse(array, start, end) {
  for (var mid = start + ((end-- - start) >> 1), t; start < mid; ++start, --end) {
    t = array[start], array[start] = array[end], array[end] = t;
  }
}

// Given a cut topology, combines duplicate arcs.
var dedup = function(topology) {
  var coordinates = topology.coordinates,
      lines = topology.lines, line,
      rings = topology.rings, ring,
      arcCount = lines.length + rings.length,
      i, n;

  delete topology.lines;
  delete topology.rings;

  // Count the number of (non-unique) arcs to initialize the hashmap safely.
  for (i = 0, n = lines.length; i < n; ++i) {
    line = lines[i]; while (line = line.next) ++arcCount;
  }
  for (i = 0, n = rings.length; i < n; ++i) {
    ring = rings[i]; while (ring = ring.next) ++arcCount;
  }

  var arcsByEnd = hashmap(arcCount * 2 * 1.4, hashPoint, equalPoint),
      arcs = topology.arcs = [];

  for (i = 0, n = lines.length; i < n; ++i) {
    line = lines[i];
    do {
      dedupLine(line);
    } while (line = line.next);
  }

  for (i = 0, n = rings.length; i < n; ++i) {
    ring = rings[i];
    if (ring.next) { // arc is no longer closed
      do {
        dedupLine(ring);
      } while (ring = ring.next);
    } else {
      dedupRing(ring);
    }
  }

  function dedupLine(arc) {
    var startPoint,
        endPoint,
        startArcs, startArc,
        endArcs, endArc,
        i, n;

    // Does this arc match an existing arc in order?
    if (startArcs = arcsByEnd.get(startPoint = coordinates[arc[0]])) {
      for (i = 0, n = startArcs.length; i < n; ++i) {
        startArc = startArcs[i];
        if (equalLine(startArc, arc)) {
          arc[0] = startArc[0];
          arc[1] = startArc[1];
          return;
        }
      }
    }

    // Does this arc match an existing arc in reverse order?
    if (endArcs = arcsByEnd.get(endPoint = coordinates[arc[1]])) {
      for (i = 0, n = endArcs.length; i < n; ++i) {
        endArc = endArcs[i];
        if (reverseEqualLine(endArc, arc)) {
          arc[1] = endArc[0];
          arc[0] = endArc[1];
          return;
        }
      }
    }

    if (startArcs) startArcs.push(arc); else arcsByEnd.set(startPoint, [arc]);
    if (endArcs) endArcs.push(arc); else arcsByEnd.set(endPoint, [arc]);
    arcs.push(arc);
  }

  function dedupRing(arc) {
    var endPoint,
        endArcs,
        endArc,
        i, n;

    // Does this arc match an existing line in order, or reverse order?
    // Rings are closed, so their start point and end point is the same.
    if (endArcs = arcsByEnd.get(endPoint = coordinates[arc[0]])) {
      for (i = 0, n = endArcs.length; i < n; ++i) {
        endArc = endArcs[i];
        if (equalRing(endArc, arc)) {
          arc[0] = endArc[0];
          arc[1] = endArc[1];
          return;
        }
        if (reverseEqualRing(endArc, arc)) {
          arc[0] = endArc[1];
          arc[1] = endArc[0];
          return;
        }
      }
    }

    // Otherwise, does this arc match an existing ring in order, or reverse order?
    if (endArcs = arcsByEnd.get(endPoint = coordinates[arc[0] + findMinimumOffset(arc)])) {
      for (i = 0, n = endArcs.length; i < n; ++i) {
        endArc = endArcs[i];
        if (equalRing(endArc, arc)) {
          arc[0] = endArc[0];
          arc[1] = endArc[1];
          return;
        }
        if (reverseEqualRing(endArc, arc)) {
          arc[0] = endArc[1];
          arc[1] = endArc[0];
          return;
        }
      }
    }

    if (endArcs) endArcs.push(arc); else arcsByEnd.set(endPoint, [arc]);
    arcs.push(arc);
  }

  function equalLine(arcA, arcB) {
    var ia = arcA[0], ib = arcB[0],
        ja = arcA[1], jb = arcB[1];
    if (ia - ja !== ib - jb) return false;
    for (; ia <= ja; ++ia, ++ib) if (!equalPoint(coordinates[ia], coordinates[ib])) return false;
    return true;
  }

  function reverseEqualLine(arcA, arcB) {
    var ia = arcA[0], ib = arcB[0],
        ja = arcA[1], jb = arcB[1];
    if (ia - ja !== ib - jb) return false;
    for (; ia <= ja; ++ia, --jb) if (!equalPoint(coordinates[ia], coordinates[jb])) return false;
    return true;
  }

  function equalRing(arcA, arcB) {
    var ia = arcA[0], ib = arcB[0],
        ja = arcA[1], jb = arcB[1],
        n = ja - ia;
    if (n !== jb - ib) return false;
    var ka = findMinimumOffset(arcA),
        kb = findMinimumOffset(arcB);
    for (var i = 0; i < n; ++i) {
      if (!equalPoint(coordinates[ia + (i + ka) % n], coordinates[ib + (i + kb) % n])) return false;
    }
    return true;
  }

  function reverseEqualRing(arcA, arcB) {
    var ia = arcA[0], ib = arcB[0],
        ja = arcA[1], jb = arcB[1],
        n = ja - ia;
    if (n !== jb - ib) return false;
    var ka = findMinimumOffset(arcA),
        kb = n - findMinimumOffset(arcB);
    for (var i = 0; i < n; ++i) {
      if (!equalPoint(coordinates[ia + (i + ka) % n], coordinates[jb - (i + kb) % n])) return false;
    }
    return true;
  }

  // Rings are rotated to a consistent, but arbitrary, start point.
  // This is necessary to detect when a ring and a rotated copy are dupes.
  function findMinimumOffset(arc) {
    var start = arc[0],
        end = arc[1],
        mid = start,
        minimum = mid,
        minimumPoint = coordinates[mid];
    while (++mid < end) {
      var point = coordinates[mid];
      if (point[0] < minimumPoint[0] || point[0] === minimumPoint[0] && point[1] < minimumPoint[1]) {
        minimum = mid;
        minimumPoint = point;
      }
    }
    return minimum - start;
  }

  return topology;
};

// Given a TopoJSON topology in absolute (quantized) coordinates,
// converts to fixed-point delta encoding.
// This is a destructive operation that modifies the given topology!
var delta = function(topology) {
  var arcs = topology.arcs,
      i = -1,
      n = arcs.length;

  while (++i < n) {
    var arc = arcs[i],
        j = 0,
        m = arc.length,
        point = arc[0],
        x0 = point[0],
        y0 = point[1],
        x1,
        y1;
    while (++j < m) {
      point = arc[j];
      x1 = point[0];
      y1 = point[1];
      arc[j] = [x1 - x0, y1 - y0];
      x0 = x1;
      y0 = y1;
    }
  }

  return topology;
};

// Extracts the lines and rings from the specified hash of geometry objects.
//
// Returns an object with three properties:
//
// * coordinates - shared buffer of [x, y] coordinates
// * lines - lines extracted from the hash, of the form [start, end]
// * rings - rings extracted from the hash, of the form [start, end]
//
// For each ring or line, start and end represent inclusive indexes into the
// coordinates buffer. For rings (and closed lines), coordinates[start] equals
// coordinates[end].
//
// For each line or polygon geometry in the input hash, including nested
// geometries as in geometry collections, the `coordinates` array is replaced
// with an equivalent `arcs` array that, for each line (for line string
// geometries) or ring (for polygon geometries), points to one of the above
// lines or rings.
var extract = function(objects) {
  var index = -1,
      lines = [],
      rings = [],
      coordinates = [];

  function extractGeometry(geometry) {
    if (geometry && extractGeometryType.hasOwnProperty(geometry.type)) extractGeometryType[geometry.type](geometry);
  }

  var extractGeometryType = {
    GeometryCollection: function(o) { o.geometries.forEach(extractGeometry); },
    LineString: function(o) { o.arcs = extractLine(o.coordinates); delete o.coordinates; },
    MultiLineString: function(o) { o.arcs = o.coordinates.map(extractLine); delete o.coordinates; },
    Polygon: function(o) { o.arcs = o.coordinates.map(extractRing); delete o.coordinates; },
    MultiPolygon: function(o) { o.arcs = o.coordinates.map(extractMultiRing); delete o.coordinates; }
  };

  function extractLine(line) {
    for (var i = 0, n = line.length; i < n; ++i) coordinates[++index] = line[i];
    var arc = {0: index - n + 1, 1: index};
    lines.push(arc);
    return arc;
  }

  function extractRing(ring) {
    for (var i = 0, n = ring.length; i < n; ++i) coordinates[++index] = ring[i];
    var arc = {0: index - n + 1, 1: index};
    rings.push(arc);
    return arc;
  }

  function extractMultiRing(rings) {
    return rings.map(extractRing);
  }

  for (var key in objects) {
    extractGeometry(objects[key]);
  }

  return {
    type: "Topology",
    coordinates: coordinates,
    lines: lines,
    rings: rings,
    objects: objects
  };
};

// Given a hash of GeoJSON objects, replaces Features with geometry objects.
// This is a destructive operation that modifies the input objects!
var geometry = function(objects) {
  var key;
  for (key in objects) objects[key] = geomifyObject(objects[key]);
  return objects;
};

function geomifyObject(object) {
  return (object && geomifyObjectType.hasOwnProperty(object.type)
      ? geomifyObjectType[object.type]
      : geomifyGeometry)(object);
}

function geomifyFeature(feature) {
  var geometry = feature.geometry;
  if (geometry == null) {
    feature.type = null;
  } else {
    geomifyGeometry(geometry);
    feature.type = geometry.type;
    if (geometry.geometries) feature.geometries = geometry.geometries;
    else if (geometry.coordinates) feature.coordinates = geometry.coordinates;
    if (geometry.bbox) feature.bbox = geometry.bbox;
  }
  delete feature.geometry;
  return feature;
}

function geomifyGeometry(geometry) {
  if (!geometry) return {type: null};
  if (geomifyGeometryType.hasOwnProperty(geometry.type)) geomifyGeometryType[geometry.type](geometry);
  return geometry;
}

var geomifyObjectType = {
  Feature: geomifyFeature,
  FeatureCollection: function(collection) {
    collection.type = "GeometryCollection";
    collection.geometries = collection.features;
    collection.features.forEach(geomifyFeature);
    delete collection.features;
    return collection;
  }
};

var geomifyGeometryType = {
  GeometryCollection: function(o) {
    var geometries = o.geometries, i = -1, n = geometries.length;
    while (++i < n) geometries[i] = geomifyGeometry(geometries[i]);
  },
  MultiPoint: function(o) {
    if (!o.coordinates.length) {
      o.type = null;
      delete o.coordinates;
    } else if (o.coordinates.length < 2) {
      o.type = "Point";
      o.coordinates = o.coordinates[0];
    }
  },
  LineString: function(o) {
    if (!o.coordinates.length) {
      o.type = null;
      delete o.coordinates;
    }
  },
  MultiLineString: function(o) {
    for (var lines = o.coordinates, i = 0, N = 0, n = lines.length; i < n; ++i) {
      var line = lines[i];
      if (line.length) lines[N++] = line;
    }
    if (!N) {
      o.type = null;
      delete o.coordinates;
    } else if (N < 2) {
      o.type = "LineString";
      o.coordinates = lines[0];
    } else {
      o.coordinates.length = N;
    }
  },
  Polygon: function(o) {
    for (var rings = o.coordinates, i = 0, N = 0, n = rings.length; i < n; ++i) {
      var ring = rings[i];
      if (ring.length) rings[N++] = ring;
    }
    if (!N) {
      o.type = null;
      delete o.coordinates;
    } else {
      o.coordinates.length = N;
    }
  },
  MultiPolygon: function(o) {
    for (var polygons = o.coordinates, j = 0, M = 0, m = polygons.length; j < m; ++j) {
      for (var rings = polygons[j], i = 0, N = 0, n = rings.length; i < n; ++i) {
        var ring = rings[i];
        if (ring.length) rings[N++] = ring;
      }
      if (N) {
        rings.length = N;
        polygons[M++] = rings;
      }
    }
    if (!M) {
      o.type = null;
      delete o.coordinates;
    } else if (M < 2) {
      o.type = "Polygon";
      o.coordinates = polygons[0];
    } else {
      polygons.length = M;
    }
  }
};

var prequantize = function(objects, bbox, n) {
  var x0 = bbox[0],
      y0 = bbox[1],
      x1 = bbox[2],
      y1 = bbox[3],
      kx = x1 - x0 ? (n - 1) / (x1 - x0) : 1,
      ky = y1 - y0 ? (n - 1) / (y1 - y0) : 1;

  function quantizePoint(coordinates) {
    coordinates[0] = Math.round((coordinates[0] - x0) * kx);
    coordinates[1] = Math.round((coordinates[1] - y0) * ky);
    return coordinates;
  }

  function quantizeLine(coordinates) {
    var i = 0,
        j = 1,
        n = coordinates.length,
        pi = quantizePoint(coordinates[0]),
        pj,
        px = pi[0],
        py = pi[1],
        x,
        y;

    while (++i < n) {
      pi = quantizePoint(coordinates[i]);
      x = pi[0];
      y = pi[1];
      if (x !== px || y !== py) { // skip coincident points
        pj = coordinates[j++];
        pj[0] = px = x;
        pj[1] = py = y;
      }
    }

    coordinates.length = j;
  }

  function quantizeGeometry(o) {
    if (o && quantizeGeometryType.hasOwnProperty(o.type)) quantizeGeometryType[o.type](o);
  }

  var quantizeGeometryType = {
    GeometryCollection: function(o) {
      o.geometries.forEach(quantizeGeometry);
    },
    Point: function(o) {
      quantizePoint(o.coordinates);
    },
    MultiPoint: function(o) {
      o.coordinates.forEach(quantizePoint);
    },
    LineString: function(o) {
      var line = o.coordinates;
      quantizeLine(line);
      if (line.length < 2) line[1] = line[0]; // must have 2+
    },
    MultiLineString: function(o) {
      for (var lines = o.coordinates, i = 0, n = lines.length; i < n; ++i) {
        var line = lines[i];
        quantizeLine(line);
        if (line.length < 2) line[1] = line[0]; // must have 2+
      }
    },
    Polygon: function(o) {
      for (var rings = o.coordinates, i = 0, n = rings.length; i < n; ++i) {
        var ring = rings[i];
        quantizeLine(ring);
        while (ring.length < 4) ring.push(ring[0]); // must have 4+
      }
    },
    MultiPolygon: function(o) {
      for (var polygons = o.coordinates, i = 0, n = polygons.length; i < n; ++i) {
        for (var rings = polygons[i], j = 0, m = rings.length; j < m; ++j) {
          var ring = rings[j];
          quantizeLine(ring);
          while (ring.length < 4) ring.push(ring[0]); // must have 4+
        }
      }
    }
  };

  for (var key in objects) {
    quantizeGeometry(objects[key]);
  }

  return {
    scale: [1 / kx, 1 / ky],
    translate: [x0, y0]
  };
};

// Constructs the TopoJSON Topology for the specified hash of features.
// Each object in the specified hash must be a GeoJSON object,
// meaning FeatureCollection, a Feature or a geometry object.
var topology = function(objects, quantization) {
  var bbox = bounds(geometry(objects)),
      transform = quantization > 0 && bbox && prequantize(objects, bbox, quantization),
      topology = dedup(cut(extract(objects))),
      coordinates = topology.coordinates,
      indexByArc = hashmap(topology.arcs.length * 1.4, hashArc, equalArc);

  objects = topology.objects; // for garbage collection
  topology.bbox = bbox;
  topology.arcs = topology.arcs.map(function(arc, i) {
    indexByArc.set(arc, i);
    return coordinates.slice(arc[0], arc[1] + 1);
  });

  delete topology.coordinates;
  coordinates = null;

  function indexGeometry(geometry$$1) {
    if (geometry$$1 && indexGeometryType.hasOwnProperty(geometry$$1.type)) indexGeometryType[geometry$$1.type](geometry$$1);
  }

  var indexGeometryType = {
    GeometryCollection: function(o) { o.geometries.forEach(indexGeometry); },
    LineString: function(o) { o.arcs = indexArcs(o.arcs); },
    MultiLineString: function(o) { o.arcs = o.arcs.map(indexArcs); },
    Polygon: function(o) { o.arcs = o.arcs.map(indexArcs); },
    MultiPolygon: function(o) { o.arcs = o.arcs.map(indexMultiArcs); }
  };

  function indexArcs(arc) {
    var indexes = [];
    do {
      var index = indexByArc.get(arc);
      indexes.push(arc[0] < arc[1] ? index : ~index);
    } while (arc = arc.next);
    return indexes;
  }

  function indexMultiArcs(arcs) {
    return arcs.map(indexArcs);
  }

  for (var key in objects) {
    indexGeometry(objects[key]);
  }

  if (transform) {
    topology.transform = transform;
    delta(topology);
  }

  return topology;
};

function hashArc(arc) {
  var i = arc[0], j = arc[1], t;
  if (j < i) t = i, i = j, j = t;
  return i + 31 * j;
}

function equalArc(arcA, arcB) {
  var ia = arcA[0], ja = arcA[1],
      ib = arcB[0], jb = arcB[1], t;
  if (ja < ia) t = ia, ia = ja, ja = t;
  if (jb < ib) t = ib, ib = jb, jb = t;
  return ia === ib && ja === jb;
}

var prune = function(topology) {
  var oldArcs = topology.arcs,
      newArcs = topology.arcs = [],
      newArcIndex = -1,
      newIndexByOldIndex = new Array(oldArcs.length),
      name;

  function pruneGeometry(o) {
    switch (o.type) {
      case "GeometryCollection": o.geometries.forEach(pruneGeometry); break;
      case "LineString": pruneArcs(o.arcs); break;
      case "MultiLineString": o.arcs.forEach(pruneArcs); break;
      case "Polygon": o.arcs.forEach(pruneArcs); break;
      case "MultiPolygon": o.arcs.forEach(pruneMultiArcs); break;
    }
  }

  function pruneArcs(arcs) {
    for (var i = 0, n = arcs.length; i < n; ++i) {
      var oldIndex = arcs[i],
          oldReverse = oldIndex < 0 && (oldIndex = ~oldIndex, true),
          newIndex;

      // If this is the first instance of this arc,
      // record it under its new index.
      if ((newIndex = newIndexByOldIndex[oldIndex]) == null) {
        newIndexByOldIndex[oldIndex] = newIndex = ++newArcIndex;
        newArcs[newIndex] = oldArcs[oldIndex];
      }

      arcs[i] = oldReverse ? ~newIndex : newIndex;
    }
  }

  function pruneMultiArcs(arcs) {
    arcs.forEach(pruneArcs);
  }

  for (name in topology.objects) {
    pruneGeometry(topology.objects[name]);
  }

  return topology;
};

var filter = function(topology, filter) {
  var name;

  if (filter == null) filter = filterTrue;

  function filterGeometry(o) {
    switch (o.type) {
      case "Polygon": {
        o.arcs = filterRings(o.arcs);
        if (!o.arcs) o.type = null, delete o.arcs;
        break;
      }
      case "MultiPolygon": {
        o.arcs = o.arcs.map(filterRings).filter(filterIdentity);
        if (!o.arcs.length) o.type = null, delete o.arcs;
        break;
      }
      case "GeometryCollection": {
        o.geometries.forEach(filterGeometry);
        o.geometries = o.geometries.filter(filterNotNull);
        if (!o.geometries.length) o.type = null, delete o.geometries;
        break;
      }
    }
  }

  function filterRings(arcs) {
    return arcs.length && filterExteriorRing(arcs[0]) // if the exterior is small, ignore any holes
        ? [arcs.shift()].concat(arcs.filter(filterInteriorRing))
        : null;
  }

  function filterExteriorRing(ring) {
    return filter(ring, false);
  }

  function filterInteriorRing(ring) {
    return filter(ring, true);
  }

  for (name in topology.objects) {
    filterGeometry(topology.objects[name]);
  }

  return prune(topology);
};

function filterTrue() {
  return true;
}

function filterIdentity(x) {
  return x;
}

function filterNotNull(geometry) {
  return geometry.type != null;
}

var filterAttached = function(topology) {
  var uniqueRingByArc = {}, // arc index -> index of unique associated ring, or -1 if used by multiple rings
      ringIndex = 0,
      name;

  function testGeometry(o) {
    switch (o.type) {
      case "GeometryCollection": o.geometries.forEach(testGeometry); break;
      case "Polygon": testArcs(o.arcs); break;
      case "MultiPolygon": o.arcs.forEach(testArcs); break;
    }
  }

  function testArcs(arcs) {
    for (var i = 0, n = arcs.length; i < n; ++i, ++ringIndex) {
      for (var ring = arcs[i], j = 0, m = ring.length; j < m; ++j) {
        var arc = ring[j];
        if (arc < 0) arc = ~arc;
        var uniqueRing = uniqueRingByArc[arc];
        if (uniqueRing >= 0 && uniqueRing !== ringIndex) uniqueRingByArc[arc] = -1;
        else uniqueRingByArc[arc] = ringIndex;
      }
    }
  }

  for (name in topology.objects) {
    testGeometry(topology.objects[name]);
  }

  return function(ring) {
    for (var j = 0, m = ring.length, arc; j < m; ++j) {
      if (arc = ring[j], uniqueRingByArc[arc < 0 ? ~arc : arc] < 0) {
        return true;
      }
    }
    return false;
  };
};

var identity = function(x) {
  return x;
};

var transform = function(topology) {
  if ((transform = topology.transform) == null) return identity;
  var transform,
      x0,
      y0,
      kx = transform.scale[0],
      ky = transform.scale[1],
      dx = transform.translate[0],
      dy = transform.translate[1];
  return function(point, i) {
    if (!i) x0 = y0 = 0;
    point[0] = (x0 += point[0]) * kx + dx;
    point[1] = (y0 += point[1]) * ky + dy;
    return point;
  };
};

var bbox = function(topology) {
  var bbox = topology.bbox;

  function bboxPoint(p0) {
    p1[0] = p0[0], p1[1] = p0[1], t(p1);
    if (p1[0] < x0) x0 = p1[0];
    if (p1[0] > x1) x1 = p1[0];
    if (p1[1] < y0) y0 = p1[1];
    if (p1[1] > y1) y1 = p1[1];
  }

  function bboxGeometry(o) {
    switch (o.type) {
      case "GeometryCollection": o.geometries.forEach(bboxGeometry); break;
      case "Point": bboxPoint(o.coordinates); break;
      case "MultiPoint": o.coordinates.forEach(bboxPoint); break;
    }
  }

  if (!bbox) {
    var t = transform(topology), p0, p1 = new Array(2), name,
        x0 = Infinity, y0 = x0, x1 = -x0, y1 = -x0;

    topology.arcs.forEach(function(arc) {
      var i = -1, n = arc.length;
      while (++i < n) {
        p0 = arc[i], p1[0] = p0[0], p1[1] = p0[1], t(p1, i);
        if (p1[0] < x0) x0 = p1[0];
        if (p1[0] > x1) x1 = p1[0];
        if (p1[1] < y0) y0 = p1[1];
        if (p1[1] > y1) y1 = p1[1];
      }
    });

    for (name in topology.objects) {
      bboxGeometry(topology.objects[name]);
    }

    bbox = topology.bbox = [x0, y0, x1, y1];
  }

  return bbox;
};

var reverse$1 = function(array, n) {
  var t, j = array.length, i = j - n;
  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;
};

var feature = function(topology, o) {
  return o.type === "GeometryCollection"
      ? {type: "FeatureCollection", features: o.geometries.map(function(o) { return feature$1(topology, o); })}
      : feature$1(topology, o);
};

function feature$1(topology, o) {
  var id = o.id,
      bbox = o.bbox,
      properties = o.properties == null ? {} : o.properties,
      geometry = object(topology, o);
  return id == null && bbox == null ? {type: "Feature", properties: properties, geometry: geometry}
      : bbox == null ? {type: "Feature", id: id, properties: properties, geometry: geometry}
      : {type: "Feature", id: id, bbox: bbox, properties: properties, geometry: geometry};
}

function object(topology, o) {
  var transformPoint = transform(topology),
      arcs = topology.arcs;

  function arc(i, points) {
    if (points.length) points.pop();
    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {
      points.push(transformPoint(a[k].slice(), k));
    }
    if (i < 0) reverse$1(points, n);
  }

  function point(p) {
    return transformPoint(p.slice());
  }

  function line(arcs) {
    var points = [];
    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);
    if (points.length < 2) points.push(points[0].slice());
    return points;
  }

  function ring(arcs) {
    var points = line(arcs);
    while (points.length < 4) points.push(points[0].slice());
    return points;
  }

  function polygon(arcs) {
    return arcs.map(ring);
  }

  function geometry(o) {
    var type = o.type, coordinates;
    switch (type) {
      case "GeometryCollection": return {type: type, geometries: o.geometries.map(geometry)};
      case "Point": coordinates = point(o.coordinates); break;
      case "MultiPoint": coordinates = o.coordinates.map(point); break;
      case "LineString": coordinates = line(o.arcs); break;
      case "MultiLineString": coordinates = o.arcs.map(line); break;
      case "Polygon": coordinates = polygon(o.arcs); break;
      case "MultiPolygon": coordinates = o.arcs.map(polygon); break;
      default: return null;
    }
    return {type: type, coordinates: coordinates};
  }

  return geometry(o);
}

var stitch = function(topology, arcs) {
  var stitchedArcs = {},
      fragmentByStart = {},
      fragmentByEnd = {},
      fragments = [],
      emptyIndex = -1;

  // Stitch empty arcs first, since they may be subsumed by other arcs.
  arcs.forEach(function(i, j) {
    var arc = topology.arcs[i < 0 ? ~i : i], t;
    if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {
      t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;
    }
  });

  arcs.forEach(function(i) {
    var e = ends(i),
        start = e[0],
        end = e[1],
        f, g;

    if (f = fragmentByEnd[start]) {
      delete fragmentByEnd[f.end];
      f.push(i);
      f.end = end;
      if (g = fragmentByStart[end]) {
        delete fragmentByStart[g.start];
        var fg = g === f ? f : f.concat(g);
        fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;
      } else {
        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
      }
    } else if (f = fragmentByStart[end]) {
      delete fragmentByStart[f.start];
      f.unshift(i);
      f.start = start;
      if (g = fragmentByEnd[start]) {
        delete fragmentByEnd[g.end];
        var gf = g === f ? f : g.concat(f);
        fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;
      } else {
        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
      }
    } else {
      f = [i];
      fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;
    }
  });

  function ends(i) {
    var arc = topology.arcs[i < 0 ? ~i : i], p0 = arc[0], p1;
    if (topology.transform) p1 = [0, 0], arc.forEach(function(dp) { p1[0] += dp[0], p1[1] += dp[1]; });
    else p1 = arc[arc.length - 1];
    return i < 0 ? [p1, p0] : [p0, p1];
  }

  function flush(fragmentByEnd, fragmentByStart) {
    for (var k in fragmentByEnd) {
      var f = fragmentByEnd[k];
      delete fragmentByStart[f.start];
      delete f.start;
      delete f.end;
      f.forEach(function(i) { stitchedArcs[i < 0 ? ~i : i] = 1; });
      fragments.push(f);
    }
  }

  flush(fragmentByEnd, fragmentByStart);
  flush(fragmentByStart, fragmentByEnd);
  arcs.forEach(function(i) { if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]); });

  return fragments;
};

var mesh = function(topology) {
  return object(topology, meshArcs.apply(this, arguments));
};

function meshArcs(topology, object$$1, filter) {
  var arcs, i, n;
  if (arguments.length > 1) arcs = extractArcs(topology, object$$1, filter);
  else for (i = 0, arcs = new Array(n = topology.arcs.length); i < n; ++i) arcs[i] = i;
  return {type: "MultiLineString", arcs: stitch(topology, arcs)};
}

function extractArcs(topology, object$$1, filter) {
  var arcs = [],
      geomsByArc = [],
      geom;

  function extract0(i) {
    var j = i < 0 ? ~i : i;
    (geomsByArc[j] || (geomsByArc[j] = [])).push({i: i, g: geom});
  }

  function extract1(arcs) {
    arcs.forEach(extract0);
  }

  function extract2(arcs) {
    arcs.forEach(extract1);
  }

  function extract3(arcs) {
    arcs.forEach(extract2);
  }

  function geometry(o) {
    switch (geom = o, o.type) {
      case "GeometryCollection": o.geometries.forEach(geometry); break;
      case "LineString": extract1(o.arcs); break;
      case "MultiLineString": case "Polygon": extract2(o.arcs); break;
      case "MultiPolygon": extract3(o.arcs); break;
    }
  }

  geometry(object$$1);

  geomsByArc.forEach(filter == null
      ? function(geoms) { arcs.push(geoms[0].i); }
      : function(geoms) { if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i); });

  return arcs;
}

function planarRingArea(ring) {
  var i = -1, n = ring.length, a, b = ring[n - 1], area = 0;
  while (++i < n) a = b, b = ring[i], area += a[0] * b[1] - a[1] * b[0];
  return Math.abs(area); // Note: doubled area!
}

var merge = function(topology) {
  return object(topology, mergeArcs.apply(this, arguments));
};

function mergeArcs(topology, objects) {
  var polygonsByArc = {},
      polygons = [],
      groups = [];

  objects.forEach(geometry);

  function geometry(o) {
    switch (o.type) {
      case "GeometryCollection": o.geometries.forEach(geometry); break;
      case "Polygon": extract(o.arcs); break;
      case "MultiPolygon": o.arcs.forEach(extract); break;
    }
  }

  function extract(polygon) {
    polygon.forEach(function(ring) {
      ring.forEach(function(arc) {
        (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);
      });
    });
    polygons.push(polygon);
  }

  function area(ring) {
    return planarRingArea(object(topology, {type: "Polygon", arcs: [ring]}).coordinates[0]);
  }

  polygons.forEach(function(polygon) {
    if (!polygon._) {
      var group = [],
          neighbors = [polygon];
      polygon._ = 1;
      groups.push(group);
      while (polygon = neighbors.pop()) {
        group.push(polygon);
        polygon.forEach(function(ring) {
          ring.forEach(function(arc) {
            polygonsByArc[arc < 0 ? ~arc : arc].forEach(function(polygon) {
              if (!polygon._) {
                polygon._ = 1;
                neighbors.push(polygon);
              }
            });
          });
        });
      }
    }
  });

  polygons.forEach(function(polygon) {
    delete polygon._;
  });

  return {
    type: "MultiPolygon",
    arcs: groups.map(function(polygons) {
      var arcs = [], n;

      // Extract the exterior (unique) arcs.
      polygons.forEach(function(polygon) {
        polygon.forEach(function(ring) {
          ring.forEach(function(arc) {
            if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {
              arcs.push(arc);
            }
          });
        });
      });

      // Stitch the arcs into one or more rings.
      arcs = stitch(topology, arcs);

      // If more than one ring is returned,
      // at most one of these rings can be the exterior;
      // choose the one with the greatest absolute area.
      if ((n = arcs.length) > 1) {
        for (var i = 1, k = area(arcs[0]), ki, t; i < n; ++i) {
          if ((ki = area(arcs[i])) > k) {
            t = arcs[0], arcs[0] = arcs[i], arcs[i] = t, k = ki;
          }
        }
      }

      return arcs;
    })
  };
}

var bisect = function(a, x) {
  var lo = 0, hi = a.length;
  while (lo < hi) {
    var mid = lo + hi >>> 1;
    if (a[mid] < x) lo = mid + 1;
    else hi = mid;
  }
  return lo;
};

var neighbors = function(objects) {
  var indexesByArc = {}, // arc index -> array of object indexes
      neighbors = objects.map(function() { return []; });

  function line(arcs, i) {
    arcs.forEach(function(a) {
      if (a < 0) a = ~a;
      var o = indexesByArc[a];
      if (o) o.push(i);
      else indexesByArc[a] = [i];
    });
  }

  function polygon(arcs, i) {
    arcs.forEach(function(arc) { line(arc, i); });
  }

  function geometry(o, i) {
    if (o.type === "GeometryCollection") o.geometries.forEach(function(o) { geometry(o, i); });
    else if (o.type in geometryType) geometryType[o.type](o.arcs, i);
  }

  var geometryType = {
    LineString: line,
    MultiLineString: polygon,
    Polygon: polygon,
    MultiPolygon: function(arcs, i) { arcs.forEach(function(arc) { polygon(arc, i); }); }
  };

  objects.forEach(geometry);

  for (var i in indexesByArc) {
    for (var indexes = indexesByArc[i], m = indexes.length, j = 0; j < m; ++j) {
      for (var k = j + 1; k < m; ++k) {
        var ij = indexes[j], ik = indexes[k], n;
        if ((n = neighbors[ij])[i = bisect(n, ik)] !== ik) n.splice(i, 0, ik);
        if ((n = neighbors[ik])[i = bisect(n, ij)] !== ij) n.splice(i, 0, ij);
      }
    }
  }

  return neighbors;
};

var quantize = function(topology, n) {
  if (!((n = Math.floor(n)) >= 2)) throw new Error("n must be \u22652");
  if (topology.transform) throw new Error("already quantized");
  var bb = bbox(topology), name,
      dx = bb[0], kx = (bb[2] - dx) / (n - 1) || 1,
      dy = bb[1], ky = (bb[3] - dy) / (n - 1) || 1;

  function quantizePoint(p) {
    p[0] = Math.round((p[0] - dx) / kx);
    p[1] = Math.round((p[1] - dy) / ky);
  }

  function quantizeGeometry(o) {
    switch (o.type) {
      case "GeometryCollection": o.geometries.forEach(quantizeGeometry); break;
      case "Point": quantizePoint(o.coordinates); break;
      case "MultiPoint": o.coordinates.forEach(quantizePoint); break;
    }
  }

  topology.arcs.forEach(function(arc) {
    var i = 1,
        j = 1,
        n = arc.length,
        pi = arc[0],
        x0 = pi[0] = Math.round((pi[0] - dx) / kx),
        y0 = pi[1] = Math.round((pi[1] - dy) / ky),
        pj,
        x1,
        y1;

    for (; i < n; ++i) {
      pi = arc[i];
      x1 = Math.round((pi[0] - dx) / kx);
      y1 = Math.round((pi[1] - dy) / ky);
      if (x1 !== x0 || y1 !== y0) {
        pj = arc[j++];
        pj[0] = x1 - x0, x0 = x1;
        pj[1] = y1 - y0, y0 = y1;
      }
    }

    if (j < 2) {
      pj = arc[j++];
      pj[0] = 0;
      pj[1] = 0;
    }

    arc.length = j;
  });

  for (name in topology.objects) {
    quantizeGeometry(topology.objects[name]);
  }

  topology.transform = {
    scale: [kx, ky],
    translate: [dx, dy]
  };

  return topology;
};

var untransform = function(topology) {
  if ((transform = topology.transform) == null) return identity;
  var transform,
      x0,
      y0,
      kx = transform.scale[0],
      ky = transform.scale[1],
      dx = transform.translate[0],
      dy = transform.translate[1];
  return function(point, i) {
    if (!i) x0 = y0 = 0;
    var x1 = Math.round((point[0] - dx) / kx),
        y1 = Math.round((point[1] - dy) / ky);
    point[0] = x1 - x0, x0 = x1;
    point[1] = y1 - y0, y0 = y1;
    return point;
  };
};

function planarTriangleArea(triangle) {
  var a = triangle[0], b = triangle[1], c = triangle[2];
  return Math.abs((a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]));
}

function planarRingArea$1(ring) {
  var i = -1, n = ring.length, a, b = ring[n - 1], area = 0;
  while (++i < n) a = b, b = ring[i], area += a[0] * b[1] - a[1] * b[0];
  return Math.abs(area) / 2;
}

var filterWeight = function(topology, minWeight, weight) {
  minWeight = minWeight == null ? Number.MIN_VALUE : +minWeight;

  if (weight == null) weight = planarRingArea$1;

  return function(ring, interior) {
    return weight(feature(topology, {type: "Polygon", arcs: [ring]}).geometry.coordinates[0], interior) >= minWeight;
  };
};

function compare(a, b) {
  return a[1][2] - b[1][2];
}

var newHeap = function() {
  var heap = {},
      array = [],
      size = 0;

  heap.push = function(object) {
    up(array[object._ = size] = object, size++);
    return size;
  };

  heap.pop = function() {
    if (size <= 0) return;
    var removed = array[0], object;
    if (--size > 0) object = array[size], down(array[object._ = 0] = object, 0);
    return removed;
  };

  heap.remove = function(removed) {
    var i = removed._, object;
    if (array[i] !== removed) return; // invalid request
    if (i !== --size) object = array[size], (compare(object, removed) < 0 ? up : down)(array[object._ = i] = object, i);
    return i;
  };

  function up(object, i) {
    while (i > 0) {
      var j = ((i + 1) >> 1) - 1,
          parent = array[j];
      if (compare(object, parent) >= 0) break;
      array[parent._ = i] = parent;
      array[object._ = i = j] = object;
    }
  }

  function down(object, i) {
    while (true) {
      var r = (i + 1) << 1,
          l = r - 1,
          j = i,
          child = array[j];
      if (l < size && compare(array[l], child) < 0) child = array[j = l];
      if (r < size && compare(array[r], child) < 0) child = array[j = r];
      if (j === i) break;
      array[child._ = i] = child;
      array[object._ = i = j] = object;
    }
  }

  return heap;
};

var presimplify = function(topology, weight) {
  var absolute = transform(topology),
      relative = untransform(topology),
      heap = newHeap();

  if (weight == null) weight = planarTriangleArea;

  topology.arcs.forEach(function(arc) {
    var triangles = [],
        maxWeight = 0,
        triangle,
        i,
        n;

    arc.forEach(absolute);

    for (i = 1, n = arc.length - 1; i < n; ++i) {
      triangle = arc.slice(i - 1, i + 2);
      triangle[1][2] = weight(triangle);
      triangles.push(triangle);
      heap.push(triangle);
    }

    // Always keep the arc endpoints!
    arc[0][2] = arc[n][2] = Infinity;

    for (i = 0, n = triangles.length; i < n; ++i) {
      triangle = triangles[i];
      triangle.previous = triangles[i - 1];
      triangle.next = triangles[i + 1];
    }

    while (triangle = heap.pop()) {
      var previous = triangle.previous,
          next = triangle.next;

      // If the weight of the current point is less than that of the previous
      // point to be eliminated, use the latter’s weight instead. This ensures
      // that the current point cannot be eliminated without eliminating
      // previously- eliminated points.
      if (triangle[1][2] < maxWeight) triangle[1][2] = maxWeight;
      else maxWeight = triangle[1][2];

      if (previous) {
        previous.next = next;
        previous[2] = triangle[2];
        update(previous);
      }

      if (next) {
        next.previous = previous;
        next[0] = triangle[0];
        update(next);
      }
    }

    arc.forEach(relative);
  });

  function update(triangle) {
    heap.remove(triangle);
    triangle[1][2] = weight(triangle);
    heap.push(triangle);
  }

  return topology;
};

var quantile = function(topology, p) {
  var array = [];

  topology.arcs.forEach(function(arc) {
    arc.forEach(function(point) {
      if (isFinite(point[2])) { // Ignore endpoints, whose weight is Infinity.
        array.push(point[2]);
      }
    });
  });

  return array.length && quantile$1(array.sort(descending), p);
};

function quantile$1(array, p) {
  if (!(n = array.length)) return;
  if ((p = +p) <= 0 || n < 2) return array[0];
  if (p >= 1) return array[n - 1];
  var n,
      h = (n - 1) * p,
      i = Math.floor(h),
      a = array[i],
      b = array[i + 1];
  return a + (b - a) * (h - i);
}

function descending(a, b) {
  return b - a;
}

var simplify = function(topology, minWeight) {
  minWeight = minWeight == null ? Number.MIN_VALUE : +minWeight;

  // Remove points whose weight is less than the minimum weight.
  topology.arcs.forEach(topology.transform ? function(arc) {
    var dx = 0,
        dy = 0, // accumulate removed points
        i = -1,
        j = -1,
        n = arc.length,
        source,
        target;

    while (++i < n) {
      source = arc[i];
      if (source[2] >= minWeight) {
        target = arc[++j];
        target[0] = source[0] + dx;
        target[1] = source[1] + dy;
        dx = dy = 0;
      } else {
        dx += source[0];
        dy += source[1];
      }
    }

    arc.length = ++j;
  } : function(arc) {
    var i = -1,
        j = -1,
        n = arc.length,
        point;

    while (++i < n) {
      point = arc[i];
      if (point[2] >= minWeight) {
        arc[++j] = point;
      }
    }

    arc.length = ++j;
  });

  // Remove the computed weight for each point, and remove coincident points.
  // This is done as a separate pass because some coordinates may be shared
  // between arcs (such as the last point and first point of a cut line).
  // If the entire arc is empty, retain at least two points (per spec).
  topology.arcs.forEach(topology.transform ? function(arc) {
    var i = 0,
        j = 0,
        n = arc.length,
        p = arc[0];
    p.length = 2;
    while (++i < n) {
      p = arc[i];
      p.length = 2;
      if (p[0] || p[1]) arc[++j] = p;
    }
    arc.length = (j || 1) + 1;
  } : function(arc) {
    var i = 0,
        j = 0,
        n = arc.length,
        p = arc[0],
        x0 = p[0],
        y0 = p[1],
        x1,
        y1;
    p.length = 2;
    while (++i < n) {
      p = arc[i], x1 = p[0], y1 = p[1];
      p.length = 2;
      if (x0 !== x1 || y0 !== y1) arc[++j] = p, x0 = x1, y0 = y1;
    }
    arc.length = (j || 1) + 1;
  });

  return topology;
};

var pi = Math.PI;
var tau = 2 * pi;
var fourPi = 4 * pi;
var radians = pi / 180;
var abs = Math.abs;
var atan = Math.atan;
var atan2 = Math.atan2;
var cos = Math.cos;
var max = Math.max;
var sin = Math.sin;
var sqrt = Math.sqrt;
var tan = Math.tan;

function sphericalRingArea(ring, interior) {
  if (!ring.length) return 0;
  var sum = 0,
      point = ring[0],
      lambda0, lambda1 = point[0] * radians, delta,
      phi1 = (point[1] * radians + tau) / 2,
      cosPhi0, cosPhi1 = cos(phi1),
      sinPhi0, sinPhi1 = sin(phi1),
      i, n, k;

  for (i = 1, n = ring.length; i < n; ++i) {
    point = ring[i];
    lambda0 = lambda1, lambda1 = point[0] * radians, delta = lambda1 - lambda0;
    phi1 = (point[1] * radians + tau) / 2;
    cosPhi0 = cosPhi1, cosPhi1 = cos(phi1);
    sinPhi0 = sinPhi1, sinPhi1 = sin(phi1);

    // Spherical excess E for a spherical triangle with vertices: south pole,
    // previous point, current point. Uses a formula derived from Cagnoli’s
    // theorem. See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).
    k = sinPhi0 * sinPhi1;
    sum += atan2(k * sin(delta), cosPhi0 * cosPhi1 + k * cos(delta));
  }

  sum = 2 * (sum > pi ? sum - tau : sum < -pi ? sum + tau : sum);
  if (interior) sum *= -1;
  return sum < 0 ? sum + fourPi : sum;
}

function sphericalTriangleArea(t) {
  var lambda0 = t[0][0] * radians, phi0 = t[0][1] * radians, cosPhi0 = cos(phi0), sinPhi0 = sin(phi0),
      lambda1 = t[1][0] * radians, phi1 = t[1][1] * radians, cosPhi1 = cos(phi1), sinPhi1 = sin(phi1),
      lambda2 = t[2][0] * radians, phi2 = t[2][1] * radians, cosPhi2 = cos(phi2), sinPhi2 = sin(phi2),
      a = distance(lambda0, cosPhi0, sinPhi0, lambda1, cosPhi1, sinPhi1),
      b = distance(lambda1, cosPhi1, sinPhi1, lambda2, cosPhi2, sinPhi2),
      c = distance(lambda2, cosPhi2, sinPhi2, lambda0, cosPhi0, sinPhi0),
      s = (a + b + c) / 2;
  return 4 * atan(sqrt(max(0, tan(s / 2) * tan((s - a) / 2) * tan((s - b) / 2) * tan((s - c) / 2))));
}

function distance(lambda0, sinPhi0, cosPhi0, lambda1, sinPhi1, cosPhi1) {
  var delta = abs(lambda1 - lambda0),
      cosDelta = cos(delta),
      sinDelta = sin(delta),
      x = cosPhi1 * sinDelta,
      y = cosPhi0 * sinPhi1 - sinPhi0 * cosPhi1 * cosDelta,
      z = sinPhi0 * sinPhi1 + cosPhi0 * cosPhi1 * cosDelta;
  return atan2(sqrt(x * x + y * y), z);
}

exports.topology = topology;
exports.filter = filter;
exports.filterAttached = filterAttached;
exports.filterWeight = filterWeight;
exports.planarRingArea = planarRingArea$1;
exports.planarTriangleArea = planarTriangleArea;
exports.presimplify = presimplify;
exports.quantile = quantile;
exports.simplify = simplify;
exports.sphericalRingArea = sphericalRingArea;
exports.sphericalTriangleArea = sphericalTriangleArea;
exports.bbox = bbox;
exports.feature = feature;
exports.merge = merge;
exports.mergeArcs = mergeArcs;
exports.mesh = mesh;
exports.meshArcs = meshArcs;
exports.neighbors = neighbors;
exports.quantize = quantize;
exports.transform = transform;
exports.untransform = untransform;

Object.defineProperty(exports, '__esModule', { value: true });

})));


/***/ }),
/* 262 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 263 */
/***/ (function(module, exports) {

module.exports = {
	"type": "Topology",
	"arcs": [
		[
			[
				21693,
				12712
			],
			[
				-42,
				204
			],
			[
				-26,
				109
			],
			[
				-13,
				56
			],
			[
				-26,
				172
			],
			[
				51,
				69
			],
			[
				-25,
				77
			],
			[
				-24,
				73
			],
			[
				-29,
				87
			],
			[
				17,
				60
			],
			[
				30,
				104
			],
			[
				68,
				52
			],
			[
				17,
				130
			],
			[
				-60,
				52
			]
		],
		[
			[
				21631,
				13957
			],
			[
				9,
				194
			]
		],
		[
			[
				21640,
				14151
			],
			[
				-17,
				44
			],
			[
				-76,
				-74
			],
			[
				-40,
				286
			],
			[
				-64,
				40
			],
			[
				-124,
				43
			],
			[
				-28,
				31
			],
			[
				-163,
				113
			],
			[
				-174,
				241
			],
			[
				-24,
				87
			],
			[
				-12,
				4
			],
			[
				-32,
				11
			],
			[
				-3,
				3
			],
			[
				-33,
				52
			],
			[
				15,
				30
			],
			[
				32,
				61
			],
			[
				14,
				27
			],
			[
				5,
				10
			],
			[
				5,
				121
			],
			[
				-9,
				131
			],
			[
				39,
				69
			],
			[
				5,
				25
			],
			[
				20,
				110
			],
			[
				-246,
				191
			]
		],
		[
			[
				20730,
				15807
			],
			[
				-139,
				250
			],
			[
				-126,
				51
			],
			[
				-32,
				88
			]
		],
		[
			[
				20433,
				16196
			],
			[
				-34,
				102
			],
			[
				-206,
				622
			]
		],
		[
			[
				20193,
				16920
			],
			[
				26,
				404
			],
			[
				303,
				-80
			],
			[
				175,
				45
			],
			[
				3,
				1
			],
			[
				114,
				29
			],
			[
				-30,
				338
			],
			[
				187,
				94
			],
			[
				45,
				22
			],
			[
				70,
				-76
			],
			[
				48,
				-52
			]
		],
		[
			[
				21134,
				17645
			],
			[
				-18,
				35
			],
			[
				-6,
				65
			]
		],
		[
			[
				21110,
				17745
			],
			[
				-5,
				21
			],
			[
				-18,
				60
			],
			[
				-15,
				116
			],
			[
				-16,
				121
			],
			[
				-18,
				131
			],
			[
				-3,
				37
			],
			[
				-3,
				25
			],
			[
				5,
				53
			],
			[
				-16,
				85
			]
		],
		[
			[
				21021,
				18394
			],
			[
				14,
				11
			],
			[
				15,
				31
			],
			[
				16,
				31
			],
			[
				31,
				57
			],
			[
				-76,
				110
			],
			[
				12,
				46
			],
			[
				44,
				92
			],
			[
				-34,
				71
			]
		],
		[
			[
				21043,
				18843
			],
			[
				76,
				62
			],
			[
				238,
				-23
			],
			[
				48,
				-8
			],
			[
				25,
				-3
			],
			[
				7,
				9
			],
			[
				18,
				23
			],
			[
				4,
				6
			],
			[
				26,
				34
			],
			[
				34,
				46
			],
			[
				65,
				57
			],
			[
				-31,
				106
			],
			[
				154,
				82
			],
			[
				58,
				20
			],
			[
				186,
				56
			],
			[
				84,
				100
			],
			[
				140,
				112
			],
			[
				0,
				0
			],
			[
				-29,
				34
			],
			[
				-103,
				117
			],
			[
				19,
				21
			],
			[
				106,
				114
			],
			[
				-9,
				33
			],
			[
				-20,
				72
			],
			[
				15,
				163
			],
			[
				20,
				217
			],
			[
				83,
				-48
			],
			[
				1,
				0
			],
			[
				111,
				2
			],
			[
				40,
				1
			],
			[
				17,
				-16
			],
			[
				120,
				-108
			],
			[
				10,
				-8
			],
			[
				13,
				-12
			],
			[
				-5,
				15
			],
			[
				-64,
				223
			],
			[
				-1,
				3
			],
			[
				1,
				7
			],
			[
				6,
				81
			],
			[
				1,
				8
			],
			[
				0,
				0
			],
			[
				57,
				3
			],
			[
				16,
				133
			],
			[
				-14,
				38
			],
			[
				-30,
				85
			],
			[
				-60,
				167
			],
			[
				170,
				143
			],
			[
				15,
				13
			]
		],
		[
			[
				22661,
				21023
			],
			[
				41,
				-70
			],
			[
				75,
				-131
			],
			[
				74,
				-129
			]
		],
		[
			[
				12591,
				8871
			],
			[
				-157,
				-50
			],
			[
				-71,
				-23
			],
			[
				-105,
				71
			],
			[
				-27,
				-18
			],
			[
				-62,
				-44
			],
			[
				-200,
				191
			],
			[
				-87,
				-38
			],
			[
				-15,
				-55
			],
			[
				92,
				-117
			],
			[
				-19,
				-49
			],
			[
				-11,
				-29
			],
			[
				-16,
				-40
			],
			[
				-11,
				-29
			]
		],
		[
			[
				11902,
				8641
			],
			[
				171,
				-193
			],
			[
				63,
				-117
			],
			[
				68,
				-125
			],
			[
				0,
				-10
			],
			[
				14,
				-222
			],
			[
				66,
				-103
			],
			[
				55,
				-85
			],
			[
				-43,
				-64
			],
			[
				-155,
				-51
			],
			[
				-27,
				-9
			],
			[
				12,
				-126
			],
			[
				16,
				-159
			],
			[
				23,
				-32
			],
			[
				18,
				-25
			],
			[
				26,
				-38
			],
			[
				31,
				-44
			],
			[
				0,
				0
			],
			[
				44,
				-63
			],
			[
				14,
				-20
			],
			[
				79,
				-59
			],
			[
				255,
				-189
			]
		],
		[
			[
				12632,
				6907
			],
			[
				-36,
				-124
			],
			[
				-205,
				-185
			],
			[
				230,
				-205
			],
			[
				-149,
				-307
			],
			[
				34,
				-21
			]
		],
		[
			[
				12506,
				6065
			],
			[
				-18,
				-142
			],
			[
				-129,
				-83
			]
		],
		[
			[
				12359,
				5840
			],
			[
				-66,
				131
			],
			[
				-206,
				128
			],
			[
				-7,
				21
			],
			[
				-19,
				63
			],
			[
				-20,
				67
			],
			[
				-31,
				44
			],
			[
				-158,
				227
			],
			[
				-97,
				-70
			],
			[
				-41,
				-31
			],
			[
				-81,
				-58
			],
			[
				-80,
				-144
			],
			[
				-259,
				173
			],
			[
				-243,
				49
			],
			[
				-14,
				62
			]
		],
		[
			[
				11037,
				6502
			],
			[
				-41,
				47
			],
			[
				-54,
				61
			],
			[
				-9,
				10
			],
			[
				-119,
				135
			],
			[
				-27,
				31
			],
			[
				-56,
				31
			],
			[
				-92,
				51
			],
			[
				-139,
				18
			],
			[
				-63,
				-39
			],
			[
				-43,
				-26
			],
			[
				-6,
				-3
			],
			[
				-18,
				-12
			],
			[
				-13,
				-8
			],
			[
				29,
				-48
			],
			[
				5,
				-1
			],
			[
				138,
				-26
			],
			[
				-64,
				-41
			],
			[
				-72,
				-45
			],
			[
				-142,
				24
			],
			[
				-106,
				87
			]
		],
		[
			[
				10145,
				6748
			],
			[
				-72,
				-21
			],
			[
				-58,
				46
			],
			[
				-73,
				126
			],
			[
				-5,
				126
			],
			[
				-76,
				21
			],
			[
				-12,
				3
			],
			[
				-113,
				253
			],
			[
				-159,
				354
			]
		],
		[
			[
				9577,
				7656
			],
			[
				-49,
				125
			],
			[
				-188,
				187
			],
			[
				-36,
				132
			],
			[
				52,
				275
			],
			[
				5,
				27
			],
			[
				94,
				88
			],
			[
				-68,
				53
			],
			[
				-34,
				152
			],
			[
				-45,
				48
			],
			[
				-20,
				21
			],
			[
				-87,
				448
			]
		],
		[
			[
				9201,
				9212
			],
			[
				-110,
				33
			],
			[
				-42,
				13
			],
			[
				-8,
				2
			],
			[
				-73,
				-31
			],
			[
				-14,
				-5
			],
			[
				-1,
				3
			],
			[
				-2,
				9
			],
			[
				-8,
				30
			],
			[
				-4,
				25
			],
			[
				-8,
				53
			],
			[
				-11,
				65
			],
			[
				-23,
				144
			],
			[
				-66,
				59
			],
			[
				-29,
				27
			],
			[
				-72,
				64
			]
		],
		[
			[
				8730,
				9703
			],
			[
				14,
				27
			],
			[
				112,
				207
			],
			[
				-47,
				35
			],
			[
				4,
				4
			],
			[
				50,
				45
			],
			[
				125,
				111
			],
			[
				-43,
				54
			],
			[
				-20,
				24
			],
			[
				-30,
				38
			],
			[
				-30,
				150
			],
			[
				-146,
				160
			],
			[
				-66,
				253
			],
			[
				112,
				171
			]
		],
		[
			[
				8765,
				10982
			],
			[
				-3,
				3
			],
			[
				-40,
				38
			],
			[
				-11,
				11
			],
			[
				5,
				19
			],
			[
				4,
				16
			],
			[
				4,
				15
			],
			[
				-11,
				5
			],
			[
				-85,
				37
			],
			[
				-90,
				155
			],
			[
				-5,
				8
			],
			[
				28,
				34
			],
			[
				-66,
				30
			],
			[
				-21,
				11
			],
			[
				-26,
				12
			],
			[
				-3,
				13
			],
			[
				-7,
				29
			],
			[
				-10,
				39
			],
			[
				-25,
				5
			],
			[
				-90,
				16
			],
			[
				17,
				-66
			],
			[
				-44,
				-114
			],
			[
				0,
				-1
			],
			[
				-24,
				3
			],
			[
				-17,
				3
			],
			[
				-21,
				3
			],
			[
				-37,
				33
			],
			[
				-68,
				60
			],
			[
				-8,
				-6
			],
			[
				-29,
				-19
			],
			[
				-27,
				35
			],
			[
				-38,
				49
			],
			[
				-8,
				10
			],
			[
				-5,
				-1
			],
			[
				-41,
				-16
			],
			[
				-14,
				8
			],
			[
				-181,
				101
			],
			[
				-24,
				13
			]
		],
		[
			[
				7744,
				11573
			],
			[
				-283,
				169
			],
			[
				-24,
				14
			],
			[
				0,
				4
			],
			[
				-2,
				425
			],
			[
				-42,
				133
			]
		],
		[
			[
				7393,
				12318
			],
			[
				119,
				199
			],
			[
				33,
				54
			],
			[
				34,
				57
			],
			[
				-33,
				110
			],
			[
				-4,
				15
			],
			[
				-14,
				47
			],
			[
				33,
				60
			],
			[
				18,
				32
			],
			[
				-34,
				94
			],
			[
				12,
				26
			],
			[
				247,
				530
			],
			[
				65,
				89
			],
			[
				42,
				58
			],
			[
				44,
				3
			],
			[
				113,
				9
			],
			[
				169,
				95
			]
		],
		[
			[
				8237,
				13796
			],
			[
				181,
				131
			],
			[
				5,
				77
			],
			[
				4,
				45
			],
			[
				10,
				137
			],
			[
				39,
				82
			],
			[
				31,
				64
			],
			[
				66,
				137
			]
		],
		[
			[
				8573,
				14469
			],
			[
				477,
				191
			],
			[
				357,
				-75
			],
			[
				146,
				-90
			],
			[
				122,
				88
			]
		],
		[
			[
				9675,
				14583
			],
			[
				104,
				-9
			],
			[
				59,
				-5
			],
			[
				113,
				-79
			],
			[
				85,
				-96
			],
			[
				45,
				-51
			],
			[
				77,
				-87
			],
			[
				20,
				-23
			],
			[
				0,
				-8
			],
			[
				-4,
				-54
			],
			[
				-4,
				-59
			],
			[
				193,
				-78
			],
			[
				53,
				32
			],
			[
				1,
				0
			],
			[
				71,
				-170
			],
			[
				-6,
				-5
			],
			[
				-25,
				-25
			],
			[
				-54,
				-52
			],
			[
				174,
				-275
			],
			[
				30,
				19
			],
			[
				80,
				-225
			],
			[
				-52,
				-231
			],
			[
				-2,
				-9
			],
			[
				-12,
				-55
			],
			[
				-14,
				-60
			],
			[
				4,
				-6
			],
			[
				44,
				-75
			],
			[
				-27,
				-51
			],
			[
				-26,
				-47
			],
			[
				321,
				-216
			],
			[
				-7,
				71
			],
			[
				-3,
				36
			],
			[
				-1,
				9
			],
			[
				5,
				-2
			],
			[
				177,
				-65
			],
			[
				-17,
				-38
			],
			[
				-4,
				-9
			],
			[
				-7,
				-17
			],
			[
				-102,
				-1
			],
			[
				8,
				-37
			],
			[
				9,
				-39
			],
			[
				25,
				-115
			],
			[
				18,
				-81
			]
		],
		[
			[
				11024,
				12295
			],
			[
				43,
				12
			],
			[
				134,
				36
			],
			[
				34,
				58
			]
		],
		[
			[
				11235,
				12401
			],
			[
				128,
				-119
			],
			[
				94,
				-88
			],
			[
				30,
				-29
			],
			[
				-36,
				-215
			],
			[
				28,
				-78
			],
			[
				255,
				-699
			],
			[
				123,
				-80
			],
			[
				6,
				-41
			],
			[
				10,
				-60
			],
			[
				4,
				-27
			],
			[
				58,
				14
			],
			[
				76,
				19
			],
			[
				11,
				-44
			],
			[
				198,
				-12
			],
			[
				20,
				-50
			],
			[
				13,
				-32
			],
			[
				19,
				-48
			],
			[
				105,
				-75
			],
			[
				30,
				-22
			],
			[
				4,
				-11
			],
			[
				23,
				-56
			],
			[
				8,
				-19
			],
			[
				23,
				-32
			],
			[
				11,
				-15
			]
		],
		[
			[
				12476,
				10582
			],
			[
				12,
				-132
			],
			[
				83,
				-107
			],
			[
				224,
				-18
			]
		],
		[
			[
				12795,
				10325
			],
			[
				88,
				-102
			],
			[
				-41,
				1
			],
			[
				1,
				-14
			],
			[
				6,
				-67
			],
			[
				11,
				-119
			],
			[
				-127,
				-43
			],
			[
				-4,
				-17
			],
			[
				-5,
				-24
			],
			[
				-9,
				-3
			],
			[
				-76,
				-20
			],
			[
				-31,
				-9
			],
			[
				9,
				-19
			],
			[
				19,
				-42
			],
			[
				-48,
				-168
			],
			[
				48,
				-17
			],
			[
				114,
				-43
			],
			[
				-44,
				-139
			],
			[
				88,
				-56
			],
			[
				-19,
				-43
			]
		],
		[
			[
				12775,
				9381
			],
			[
				-35,
				-120
			],
			[
				27,
				-151
			],
			[
				5,
				-28
			],
			[
				6,
				-35
			],
			[
				-161,
				1
			],
			[
				-8,
				-52
			],
			[
				-7,
				-47
			],
			[
				-11,
				-78
			]
		],
		[
			[
				18703,
				39115
			],
			[
				0,
				0
			],
			[
				-31,
				50
			],
			[
				-11,
				197
			],
			[
				-125,
				67
			],
			[
				-24,
				54
			],
			[
				-7,
				16
			],
			[
				-175,
				-32
			],
			[
				-1,
				59
			],
			[
				-26,
				13
			],
			[
				-33,
				16
			],
			[
				-137,
				67
			]
		],
		[
			[
				18133,
				39622
			],
			[
				-191,
				-42
			],
			[
				-458,
				-322
			]
		],
		[
			[
				17484,
				39258
			],
			[
				-12,
				105
			],
			[
				-6,
				62
			],
			[
				-6,
				55
			],
			[
				-62,
				73
			],
			[
				63,
				44
			]
		],
		[
			[
				17461,
				39597
			],
			[
				46,
				-126
			],
			[
				60,
				136
			],
			[
				97,
				216
			],
			[
				10,
				24
			],
			[
				50,
				112
			],
			[
				146,
				182
			],
			[
				120,
				261
			],
			[
				266,
				196
			],
			[
				35,
				26
			],
			[
				27,
				45
			],
			[
				75,
				128
			],
			[
				65,
				110
			],
			[
				11,
				17
			],
			[
				26,
				82
			],
			[
				5,
				17
			],
			[
				10,
				30
			],
			[
				-78,
				127
			],
			[
				16,
				42
			],
			[
				1,
				3
			],
			[
				99,
				114
			],
			[
				56,
				65
			],
			[
				1,
				6
			],
			[
				20,
				102
			],
			[
				24,
				128
			],
			[
				56,
				20
			],
			[
				95,
				35
			]
		],
		[
			[
				18800,
				41695
			],
			[
				223,
				132
			],
			[
				97,
				57
			],
			[
				231,
				137
			],
			[
				201,
				-13
			],
			[
				30,
				-44
			],
			[
				19,
				-28
			],
			[
				27,
				8
			],
			[
				31,
				8
			]
		],
		[
			[
				19659,
				41952
			],
			[
				122,
				21
			],
			[
				63,
				10
			],
			[
				1,
				0
			],
			[
				1,
				2
			],
			[
				54,
				58
			],
			[
				4,
				4
			],
			[
				-2,
				13
			],
			[
				-5,
				51
			],
			[
				-2,
				21
			],
			[
				22,
				-60
			],
			[
				27,
				7
			],
			[
				40,
				11
			],
			[
				49,
				14
			],
			[
				55,
				15
			],
			[
				151,
				41
			],
			[
				18,
				67
			],
			[
				22,
				87
			],
			[
				36,
				22
			],
			[
				119,
				69
			],
			[
				166,
				98
			],
			[
				86,
				51
			],
			[
				42,
				25
			],
			[
				15,
				8
			],
			[
				52,
				31
			]
		],
		[
			[
				20795,
				42618
			],
			[
				102,
				33
			],
			[
				261,
				87
			],
			[
				28,
				21
			],
			[
				107,
				81
			],
			[
				157,
				119
			]
		],
		[
			[
				21450,
				42959
			],
			[
				44,
				27
			],
			[
				54,
				33
			],
			[
				188,
				113
			],
			[
				97,
				59
			],
			[
				122,
				74
			],
			[
				21,
				13
			],
			[
				41,
				-129
			],
			[
				21,
				-68
			],
			[
				3,
				-10
			]
		],
		[
			[
				22041,
				43071
			],
			[
				22,
				-316
			],
			[
				2,
				-30
			],
			[
				2,
				-37
			],
			[
				-5,
				-50
			],
			[
				-5,
				-47
			],
			[
				160,
				-139
			],
			[
				23,
				-20
			],
			[
				5,
				-4
			],
			[
				-38,
				-37
			],
			[
				14,
				-200
			],
			[
				1,
				-17
			],
			[
				3,
				-37
			],
			[
				3,
				-46
			],
			[
				49,
				-8
			],
			[
				-11,
				-103
			],
			[
				79,
				-193
			],
			[
				16,
				-38
			],
			[
				53,
				-10
			],
			[
				280,
				-48
			],
			[
				-41,
				-113
			],
			[
				-5,
				-16
			],
			[
				-43,
				-117
			],
			[
				-14,
				-39
			],
			[
				22,
				-12
			],
			[
				165,
				-92
			],
			[
				58,
				-33
			],
			[
				124,
				-70
			],
			[
				33,
				-18
			],
			[
				111,
				-154
			],
			[
				50,
				-69
			],
			[
				29,
				-39
			],
			[
				61,
				-85
			],
			[
				8,
				-11
			],
			[
				55,
				-77
			],
			[
				8,
				-10
			],
			[
				0,
				0
			]
		],
		[
			[
				23315,
				40736
			],
			[
				500,
				64
			],
			[
				221,
				28
			],
			[
				105,
				13
			],
			[
				96,
				12
			]
		],
		[
			[
				22627,
				38264
			],
			[
				-283,
				27
			],
			[
				-123,
				11
			],
			[
				-48,
				5
			],
			[
				-66,
				6
			],
			[
				-44,
				19
			],
			[
				-186,
				82
			],
			[
				-184,
				82
			],
			[
				-81,
				35
			],
			[
				-166,
				-176
			],
			[
				-26,
				-27
			],
			[
				-7,
				-7
			],
			[
				-56,
				-59
			],
			[
				-1,
				-1
			]
		],
		[
			[
				21356,
				38261
			],
			[
				-2,
				-1
			],
			[
				-197,
				-24
			],
			[
				-4,
				2
			],
			[
				-43,
				24
			],
			[
				-33,
				19
			],
			[
				-21,
				11
			],
			[
				-15,
				-8
			],
			[
				-16,
				-9
			],
			[
				-128,
				-70
			],
			[
				-4,
				-2
			],
			[
				-3,
				4
			],
			[
				-55,
				99
			],
			[
				-46,
				-19
			],
			[
				-42,
				-17
			],
			[
				-2,
				-1
			],
			[
				-237,
				-130
			],
			[
				-73,
				-40
			],
			[
				-78,
				30
			],
			[
				-87,
				33
			],
			[
				-50,
				-5
			],
			[
				-888,
				-95
			],
			[
				-133,
				30
			],
			[
				-92,
				-20
			],
			[
				-118,
				-26
			],
			[
				-28,
				-6
			]
		],
		[
			[
				18863,
				38377
			],
			[
				4,
				4
			],
			[
				-18,
				76
			],
			[
				152,
				102
			],
			[
				-172,
				241
			]
		],
		[
			[
				9189,
				16613
			],
			[
				6,
				35
			],
			[
				1,
				5
			],
			[
				5,
				33
			],
			[
				22,
				135
			],
			[
				6,
				31
			],
			[
				1,
				8
			],
			[
				43,
				265
			],
			[
				36,
				218
			]
		],
		[
			[
				9309,
				17343
			],
			[
				-177,
				112
			],
			[
				-18,
				27
			],
			[
				-41,
				60
			],
			[
				-20,
				30
			],
			[
				-18,
				27
			],
			[
				-5,
				7
			],
			[
				-54,
				249
			],
			[
				43,
				250
			],
			[
				-131,
				81
			],
			[
				-58,
				36
			],
			[
				-81,
				50
			],
			[
				-324,
				18
			],
			[
				93,
				105
			]
		],
		[
			[
				8518,
				18395
			],
			[
				241,
				258
			],
			[
				51,
				55
			],
			[
				4,
				4
			],
			[
				28,
				29
			],
			[
				10,
				11
			],
			[
				36,
				39
			],
			[
				67,
				72
			],
			[
				213,
				-83
			],
			[
				58,
				48
			],
			[
				66,
				150
			],
			[
				-12,
				163
			],
			[
				-3,
				34
			],
			[
				-51,
				18
			],
			[
				25,
				60
			],
			[
				81,
				196
			],
			[
				32,
				78
			]
		],
		[
			[
				9364,
				19527
			],
			[
				75,
				172
			]
		],
		[
			[
				9439,
				19699
			],
			[
				84,
				202
			],
			[
				146,
				158
			],
			[
				83,
				28
			],
			[
				170,
				-182
			],
			[
				135,
				30
			],
			[
				183,
				-58
			]
		],
		[
			[
				10240,
				19877
			],
			[
				152,
				271
			],
			[
				90,
				159
			],
			[
				79,
				141
			],
			[
				13,
				24
			],
			[
				7,
				11
			],
			[
				63,
				-63
			],
			[
				27,
				-27
			],
			[
				119,
				-6
			],
			[
				29,
				180
			],
			[
				-36,
				67
			],
			[
				110,
				28
			],
			[
				35,
				79
			],
			[
				24,
				52
			],
			[
				17,
				38
			],
			[
				-206,
				140
			],
			[
				113,
				137
			]
		],
		[
			[
				10876,
				21108
			],
			[
				173,
				121
			],
			[
				172,
				-296
			],
			[
				242,
				-193
			],
			[
				103,
				12
			],
			[
				14,
				-6
			],
			[
				83,
				-36
			],
			[
				26,
				-11
			],
			[
				66,
				-28
			],
			[
				36,
				-36
			],
			[
				112,
				-106
			],
			[
				27,
				-26
			],
			[
				20,
				-19
			],
			[
				57,
				-107
			],
			[
				18,
				-34
			],
			[
				-10,
				-17
			],
			[
				-26,
				-49
			],
			[
				109,
				-87
			]
		],
		[
			[
				12098,
				20190
			],
			[
				46,
				-25
			],
			[
				87,
				-48
			],
			[
				341,
				-190
			],
			[
				8,
				0
			],
			[
				187,
				-23
			],
			[
				31,
				-3
			]
		],
		[
			[
				12798,
				19901
			],
			[
				52,
				-132
			],
			[
				4,
				-10
			],
			[
				33,
				-85
			]
		],
		[
			[
				12887,
				19674
			],
			[
				294,
				-164
			],
			[
				12,
				-7
			],
			[
				85,
				-47
			],
			[
				9,
				-5
			],
			[
				190,
				-107
			],
			[
				97,
				-55
			],
			[
				115,
				-90
			],
			[
				24,
				-18
			],
			[
				24,
				-48
			],
			[
				47,
				-91
			],
			[
				114,
				-19
			],
			[
				11,
				-2
			]
		],
		[
			[
				13909,
				19021
			],
			[
				101,
				-38
			],
			[
				37,
				-65
			],
			[
				70,
				-124
			],
			[
				16,
				-29
			],
			[
				-7,
				-32
			],
			[
				-8,
				-40
			],
			[
				-28,
				-138
			]
		],
		[
			[
				14090,
				18555
			],
			[
				10,
				-133
			],
			[
				95,
				-84
			],
			[
				16,
				-115
			],
			[
				9,
				-70
			],
			[
				17,
				-37
			],
			[
				9,
				-22
			],
			[
				26,
				-59
			],
			[
				9,
				-19
			],
			[
				121,
				-46
			],
			[
				36,
				-79
			],
			[
				5,
				-13
			],
			[
				-9,
				-23
			],
			[
				-5,
				-14
			],
			[
				-60,
				-151
			]
		],
		[
			[
				14369,
				17690
			],
			[
				16,
				-127
			],
			[
				5,
				-38
			],
			[
				31,
				-20
			],
			[
				169,
				-110
			],
			[
				14,
				3
			],
			[
				123,
				23
			],
			[
				235,
				44
			],
			[
				1,
				-4
			],
			[
				10,
				-45
			],
			[
				1,
				-7
			],
			[
				0,
				-36
			],
			[
				2,
				-170
			],
			[
				322,
				-202
			],
			[
				248,
				-111
			],
			[
				31,
				4
			],
			[
				55,
				8
			],
			[
				4,
				1
			]
		],
		[
			[
				15636,
				16903
			],
			[
				1,
				-22
			],
			[
				3,
				-35
			],
			[
				2,
				-28
			],
			[
				11,
				-14
			],
			[
				31,
				-37
			],
			[
				-52,
				-54
			],
			[
				-35,
				-37
			],
			[
				-35,
				-37
			],
			[
				61,
				-192
			],
			[
				-46,
				-41
			],
			[
				-61,
				-53
			],
			[
				-122,
				-107
			],
			[
				-26,
				-23
			],
			[
				82,
				-66
			],
			[
				50,
				42
			],
			[
				62,
				52
			],
			[
				40,
				33
			],
			[
				-71,
				-270
			],
			[
				-269,
				-83
			]
		],
		[
			[
				15262,
				15931
			],
			[
				-34,
				-5
			],
			[
				-38,
				-6
			],
			[
				-24,
				-4
			],
			[
				-59,
				-8
			],
			[
				-135,
				-21
			],
			[
				-130,
				-20
			],
			[
				-162,
				-25
			],
			[
				-110,
				-18
			],
			[
				-55,
				-8
			]
		],
		[
			[
				14515,
				15816
			],
			[
				-277,
				241
			],
			[
				-20,
				17
			],
			[
				-62,
				17
			],
			[
				-89,
				26
			],
			[
				-73,
				21
			],
			[
				-18,
				5
			],
			[
				-8,
				2
			],
			[
				-117,
				97
			],
			[
				-77,
				9
			],
			[
				-67,
				8
			],
			[
				-36,
				4
			],
			[
				-71,
				9
			],
			[
				-20,
				2
			]
		],
		[
			[
				13580,
				16274
			],
			[
				-33,
				42
			],
			[
				-15,
				18
			],
			[
				-86,
				107
			],
			[
				-30,
				36
			]
		],
		[
			[
				13416,
				16477
			],
			[
				-68,
				73
			],
			[
				-108,
				113
			],
			[
				-63,
				66
			],
			[
				-312,
				173
			],
			[
				-323,
				177
			],
			[
				-371,
				203
			]
		],
		[
			[
				12171,
				17282
			],
			[
				-130,
				-64
			],
			[
				-26,
				-13
			],
			[
				-116,
				63
			],
			[
				-27,
				-13
			],
			[
				-282,
				-127
			],
			[
				-56,
				-26
			]
		],
		[
			[
				11534,
				17102
			],
			[
				33,
				-25
			],
			[
				40,
				-31
			],
			[
				1,
				0
			],
			[
				21,
				0
			],
			[
				123,
				-2
			],
			[
				242,
				-236
			],
			[
				-49,
				-39
			],
			[
				-60,
				-49
			],
			[
				-12,
				-10
			],
			[
				-29,
				-164
			],
			[
				-232,
				-17
			],
			[
				-75,
				-31
			],
			[
				-337,
				-140
			],
			[
				-136,
				-57
			],
			[
				-236,
				-99
			],
			[
				-32,
				-13
			],
			[
				-90,
				-38
			],
			[
				-175,
				-33
			],
			[
				-49,
				41
			],
			[
				-16,
				15
			],
			[
				36,
				62
			],
			[
				12,
				20
			],
			[
				-58,
				22
			],
			[
				-1,
				1
			],
			[
				-3,
				-1
			],
			[
				-95,
				-37
			],
			[
				-3,
				-2
			],
			[
				-2,
				-1
			],
			[
				-14,
				-20
			],
			[
				-39,
				-50
			],
			[
				-14,
				-19
			],
			[
				-18,
				33
			],
			[
				-40,
				73
			],
			[
				48,
				120
			],
			[
				-138,
				48
			],
			[
				-44,
				16
			],
			[
				-134,
				47
			],
			[
				-217,
				-72
			],
			[
				-36,
				-12
			],
			[
				-36,
				-13
			],
			[
				-54,
				-18
			],
			[
				-100,
				-33
			],
			[
				-36,
				-12
			],
			[
				-280,
				147
			],
			[
				28,
				51
			],
			[
				-39,
				89
			]
		],
		[
			[
				16406,
				26777
			],
			[
				56,
				-75
			],
			[
				17,
				-22
			],
			[
				37,
				-50
			],
			[
				127,
				-21
			],
			[
				-9,
				-25
			],
			[
				-1,
				-2
			],
			[
				-75,
				-195
			],
			[
				-18,
				-48
			],
			[
				-50,
				-130
			],
			[
				-68,
				-180
			],
			[
				-92,
				-240
			],
			[
				-25,
				-67
			]
		],
		[
			[
				16305,
				25722
			],
			[
				132,
				-67
			],
			[
				105,
				-54
			],
			[
				18,
				-9
			],
			[
				119,
				-61
			],
			[
				50,
				-26
			],
			[
				27,
				-4
			],
			[
				268,
				-40
			],
			[
				31,
				-28
			],
			[
				126,
				-113
			],
			[
				12,
				-11
			],
			[
				126,
				-114
			],
			[
				47,
				-42
			],
			[
				29,
				41
			],
			[
				72,
				100
			],
			[
				88,
				121
			],
			[
				69,
				95
			],
			[
				30,
				18
			],
			[
				234,
				141
			],
			[
				140,
				-184
			],
			[
				43,
				-57
			],
			[
				4,
				-4
			],
			[
				26,
				-434
			],
			[
				13,
				-210
			],
			[
				6,
				-92
			],
			[
				0,
				-2
			],
			[
				7,
				-27
			],
			[
				76,
				-336
			],
			[
				1,
				-3
			],
			[
				4,
				-18
			],
			[
				55,
				-244
			],
			[
				9,
				-40
			],
			[
				-74,
				-203
			]
		],
		[
			[
				18198,
				23815
			],
			[
				-206,
				-188
			],
			[
				-120,
				-110
			],
			[
				-128,
				-117
			],
			[
				-38,
				3
			],
			[
				-30,
				2
			],
			[
				-208,
				-87
			],
			[
				-23,
				-3
			],
			[
				-65,
				-9
			],
			[
				-197,
				-27
			],
			[
				-152,
				-84
			],
			[
				-33,
				-19
			],
			[
				-15,
				-9
			],
			[
				-20,
				-11
			],
			[
				-59,
				40
			],
			[
				-16,
				11
			],
			[
				-20,
				-26
			],
			[
				-13,
				-18
			],
			[
				-16,
				-22
			],
			[
				-46,
				-61
			],
			[
				-106,
				-5
			]
		],
		[
			[
				16687,
				23075
			],
			[
				-1,
				60
			],
			[
				-148,
				79
			],
			[
				-221,
				116
			],
			[
				-213,
				-130
			],
			[
				-28,
				-17
			],
			[
				-115,
				76
			]
		],
		[
			[
				15961,
				23259
			],
			[
				-260,
				180
			],
			[
				-132,
				9
			],
			[
				-253,
				-104
			],
			[
				-57,
				-24
			],
			[
				-120,
				40
			],
			[
				-104,
				35
			],
			[
				-150,
				49
			],
			[
				-81,
				27
			],
			[
				0,
				-1
			],
			[
				-14,
				-25
			],
			[
				-56,
				-101
			],
			[
				-18,
				-33
			],
			[
				-90,
				-165
			],
			[
				-49,
				-90
			],
			[
				-133,
				-141
			],
			[
				-130,
				-138
			],
			[
				-136,
				-145
			],
			[
				-76,
				-20
			],
			[
				-32,
				-8
			],
			[
				-31,
				-8
			]
		],
		[
			[
				14039,
				22596
			],
			[
				-18,
				141
			],
			[
				-75,
				68
			],
			[
				-81,
				73
			],
			[
				-114,
				103
			],
			[
				-42,
				38
			]
		],
		[
			[
				13709,
				23019
			],
			[
				5,
				-89
			],
			[
				-55,
				9
			],
			[
				-107,
				108
			],
			[
				9,
				58
			],
			[
				-26,
				16
			],
			[
				-119,
				72
			],
			[
				-19,
				11
			],
			[
				-54,
				33
			]
		],
		[
			[
				13343,
				23237
			],
			[
				113,
				184
			],
			[
				78,
				126
			],
			[
				34,
				54
			],
			[
				-1,
				95
			],
			[
				-1,
				23
			],
			[
				0,
				71
			],
			[
				0,
				6
			],
			[
				-85,
				15
			],
			[
				-11,
				2
			],
			[
				-30,
				6
			],
			[
				-231,
				-95
			],
			[
				-224,
				97
			],
			[
				-148,
				-123
			],
			[
				-8,
				217
			],
			[
				20,
				29
			],
			[
				19,
				27
			],
			[
				22,
				32
			],
			[
				34,
				48
			],
			[
				42,
				61
			],
			[
				167,
				41
			],
			[
				83,
				11
			],
			[
				151,
				-115
			],
			[
				65,
				9
			],
			[
				27,
				32
			],
			[
				41,
				46
			],
			[
				72,
				83
			],
			[
				77,
				87
			],
			[
				89,
				56
			],
			[
				58,
				37
			],
			[
				-28,
				20
			]
		],
		[
			[
				13768,
				24419
			],
			[
				251,
				174
			],
			[
				108,
				146
			],
			[
				27,
				35
			],
			[
				24,
				33
			],
			[
				10,
				13
			],
			[
				36,
				48
			],
			[
				66,
				88
			],
			[
				51,
				68
			],
			[
				109,
				-74
			],
			[
				143,
				91
			],
			[
				76,
				48
			],
			[
				49,
				31
			],
			[
				74,
				47
			],
			[
				17,
				11
			],
			[
				8,
				5
			],
			[
				28,
				46
			],
			[
				11,
				17
			],
			[
				50,
				81
			],
			[
				152,
				247
			],
			[
				173,
				278
			],
			[
				16,
				40
			],
			[
				31,
				77
			],
			[
				75,
				181
			],
			[
				3,
				8
			],
			[
				26,
				62
			],
			[
				183,
				20
			],
			[
				15,
				1
			],
			[
				320,
				34
			],
			[
				21,
				3
			],
			[
				123,
				134
			],
			[
				63,
				69
			],
			[
				20,
				21
			]
		],
		[
			[
				16127,
				26502
			],
			[
				66,
				124
			]
		],
		[
			[
				16193,
				26626
			],
			[
				-1,
				20
			],
			[
				0,
				18
			],
			[
				-3,
				73
			],
			[
				-2,
				63
			],
			[
				29,
				-5
			],
			[
				53,
				-10
			],
			[
				35,
				36
			],
			[
				2,
				2
			],
			[
				77,
				-36
			],
			[
				23,
				-10
			]
		],
		[
			[
				2406,
				27235
			],
			[
				102,
				82
			],
			[
				47,
				-36
			],
			[
				61,
				-47
			],
			[
				79,
				-59
			]
		],
		[
			[
				2695,
				27175
			],
			[
				41,
				-32
			],
			[
				8,
				2
			],
			[
				17,
				4
			],
			[
				362,
				87
			],
			[
				54,
				-40
			],
			[
				96,
				86
			]
		],
		[
			[
				3273,
				27282
			],
			[
				166,
				-76
			],
			[
				15,
				-8
			],
			[
				20,
				-9
			],
			[
				9,
				-4
			],
			[
				9,
				-4
			],
			[
				336,
				195
			],
			[
				99,
				-46
			],
			[
				54,
				42
			],
			[
				76,
				-90
			],
			[
				50,
				-59
			],
			[
				61,
				-72
			],
			[
				2,
				-2
			],
			[
				26,
				-32
			],
			[
				70,
				77
			],
			[
				89,
				-42
			],
			[
				42,
				21
			],
			[
				8,
				4
			],
			[
				65,
				33
			],
			[
				7,
				3
			],
			[
				14,
				7
			],
			[
				24,
				12
			],
			[
				-3,
				10
			],
			[
				-27,
				82
			],
			[
				114,
				47
			],
			[
				1,
				5
			],
			[
				29,
				85
			],
			[
				8,
				22
			],
			[
				59,
				-8
			],
			[
				18,
				-3
			],
			[
				8,
				-1
			],
			[
				39,
				-6
			],
			[
				103,
				-15
			],
			[
				-66,
				-93
			],
			[
				60,
				-38
			],
			[
				49,
				-31
			],
			[
				8,
				-5
			],
			[
				37,
				-24
			],
			[
				28,
				-48
			],
			[
				1,
				-3
			],
			[
				45,
				-77
			],
			[
				112,
				27
			],
			[
				66,
				62
			],
			[
				53,
				48
			],
			[
				51,
				47
			]
		],
		[
			[
				5308,
				27315
			],
			[
				-11,
				134
			],
			[
				60,
				61
			],
			[
				227,
				8
			],
			[
				-5,
				152
			]
		],
		[
			[
				5579,
				27670
			],
			[
				109,
				24
			],
			[
				11,
				64
			],
			[
				5,
				33
			],
			[
				76,
				-16
			],
			[
				52,
				46
			],
			[
				41,
				-18
			],
			[
				86,
				-37
			],
			[
				111,
				136
			]
		],
		[
			[
				6070,
				27902
			],
			[
				148,
				-250
			],
			[
				18,
				-30
			],
			[
				19,
				-32
			],
			[
				55,
				-93
			],
			[
				30,
				-50
			],
			[
				141,
				-239
			]
		],
		[
			[
				6481,
				27208
			],
			[
				141,
				-44
			],
			[
				34,
				84
			],
			[
				94,
				31
			],
			[
				38,
				13
			],
			[
				48,
				-48
			],
			[
				89,
				68
			],
			[
				31,
				23
			],
			[
				37,
				-18
			],
			[
				59,
				-30
			],
			[
				109,
				9
			],
			[
				54,
				5
			],
			[
				33,
				2
			],
			[
				22,
				31
			],
			[
				35,
				48
			],
			[
				47,
				65
			],
			[
				-28,
				29
			],
			[
				247,
				46
			],
			[
				46,
				-28
			],
			[
				86,
				52
			],
			[
				-13,
				75
			],
			[
				66,
				13
			],
			[
				37,
				8
			],
			[
				6,
				1
			],
			[
				29,
				-102
			],
			[
				216,
				-7
			],
			[
				111,
				-69
			]
		],
		[
			[
				8155,
				27465
			],
			[
				95,
				-32
			],
			[
				1,
				-1
			],
			[
				17,
				-34
			],
			[
				2,
				-4
			],
			[
				10,
				-18
			],
			[
				8,
				-16
			],
			[
				-1,
				-31
			],
			[
				-1,
				-18
			],
			[
				-4,
				-121
			],
			[
				-1,
				-33
			],
			[
				-2,
				-66
			],
			[
				-1,
				-11
			],
			[
				-4,
				-123
			],
			[
				2,
				-5
			],
			[
				43,
				-162
			],
			[
				17,
				-60
			],
			[
				0,
				-1
			],
			[
				6,
				-21
			],
			[
				9,
				-34
			],
			[
				-1,
				-63
			],
			[
				-1,
				-3
			],
			[
				-3,
				-166
			]
		],
		[
			[
				8346,
				26442
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				-74,
				-25
			],
			[
				-2,
				0
			],
			[
				0,
				0
			],
			[
				-15,
				-5
			],
			[
				0,
				0
			],
			[
				-2,
				-1
			],
			[
				-301,
				-279
			],
			[
				-173,
				-81
			],
			[
				-136,
				-200
			],
			[
				-125,
				-184
			],
			[
				-220,
				-326
			],
			[
				-86,
				-126
			],
			[
				-145,
				-102
			],
			[
				-253,
				-177
			],
			[
				-55,
				-67
			],
			[
				-96,
				-115
			]
		],
		[
			[
				6663,
				24754
			],
			[
				-29,
				28
			],
			[
				-196,
				185
			],
			[
				-1,
				47
			],
			[
				-2,
				82
			],
			[
				0,
				11
			],
			[
				-37,
				11
			],
			[
				-34,
				10
			],
			[
				-57,
				16
			],
			[
				9,
				125
			],
			[
				-61,
				113
			]
		],
		[
			[
				6255,
				25382
			],
			[
				-99,
				-177
			],
			[
				-79,
				-81
			],
			[
				-17,
				-17
			],
			[
				-11,
				-12
			],
			[
				-24,
				-8
			],
			[
				-3,
				-1
			],
			[
				-27,
				-10
			],
			[
				-23,
				-9
			],
			[
				-7,
				-3
			],
			[
				-25,
				-9
			],
			[
				-34,
				-12
			],
			[
				-66,
				-109
			],
			[
				-21,
				-1
			],
			[
				-44,
				-2
			],
			[
				-62,
				119
			],
			[
				-3,
				0
			],
			[
				-36,
				-6
			],
			[
				-1,
				0
			],
			[
				-26,
				-5
			],
			[
				-34,
				-6
			],
			[
				-1,
				0
			],
			[
				-41,
				-7
			],
			[
				-64,
				-10
			],
			[
				-8,
				-2
			],
			[
				-47,
				-8
			],
			[
				-28,
				-4
			],
			[
				-52,
				-9
			],
			[
				-27,
				-5
			],
			[
				-24,
				-4
			],
			[
				-102,
				-278
			],
			[
				-174,
				72
			],
			[
				41,
				89
			],
			[
				3,
				7
			],
			[
				-69,
				122
			],
			[
				-86,
				7
			],
			[
				-50,
				-48
			]
		],
		[
			[
				4884,
				24955
			],
			[
				-62,
				24
			],
			[
				-50,
				18
			],
			[
				-62,
				23
			],
			[
				-182,
				-14
			],
			[
				-58,
				-4
			],
			[
				-32,
				-55
			],
			[
				-129,
				-35
			],
			[
				-308,
				57
			],
			[
				-301,
				-179
			],
			[
				-111,
				36
			],
			[
				-157,
				-70
			],
			[
				-56,
				-98
			],
			[
				-143,
				-64
			]
		],
		[
			[
				3233,
				24594
			],
			[
				-153,
				22
			],
			[
				-5,
				30
			],
			[
				-8,
				44
			],
			[
				-13,
				69
			],
			[
				-5,
				24
			],
			[
				-29,
				-6
			],
			[
				0,
				28
			],
			[
				1,
				15
			],
			[
				4,
				139
			],
			[
				4,
				10
			],
			[
				10,
				21
			],
			[
				58,
				122
			],
			[
				58,
				121
			],
			[
				29,
				61
			],
			[
				-119,
				224
			],
			[
				-4,
				6
			],
			[
				-24,
				45
			],
			[
				-45,
				85
			]
		],
		[
			[
				2992,
				25654
			],
			[
				-123,
				52
			],
			[
				-37,
				16
			],
			[
				-3,
				4
			],
			[
				-1,
				1
			],
			[
				-48,
				73
			],
			[
				-91,
				-91
			],
			[
				-23,
				55
			],
			[
				-66,
				-39
			],
			[
				-115,
				-69
			],
			[
				-17,
				-2
			],
			[
				-133,
				-10
			],
			[
				-27,
				-69
			],
			[
				-3,
				-7
			],
			[
				-87,
				-32
			],
			[
				-5,
				-87
			],
			[
				-79,
				-26
			],
			[
				-179,
				65
			],
			[
				111,
				-255
			],
			[
				-336,
				-116
			],
			[
				-49,
				99
			],
			[
				-19,
				-16
			],
			[
				-1,
				0
			],
			[
				-30,
				-24
			],
			[
				-94,
				86
			],
			[
				-7,
				-80
			],
			[
				-1,
				-14
			],
			[
				-184,
				-1
			],
			[
				-2,
				0
			],
			[
				-68,
				94
			],
			[
				-76,
				-9
			],
			[
				-46,
				81
			],
			[
				-2,
				1
			],
			[
				-123,
				27
			]
		],
		[
			[
				2553,
				27496
			],
			[
				20,
				-16
			],
			[
				17,
				-14
			],
			[
				-184,
				-231
			]
		],
		[
			[
				18394,
				8960
			],
			[
				36,
				2
			],
			[
				4,
				0
			],
			[
				102,
				4
			],
			[
				20,
				93
			],
			[
				4,
				-58
			],
			[
				145,
				-27
			],
			[
				76,
				81
			],
			[
				27,
				29
			],
			[
				19,
				20
			],
			[
				13,
				-15
			],
			[
				18,
				-20
			],
			[
				13,
				-15
			],
			[
				31,
				-35
			],
			[
				12,
				-101
			],
			[
				33,
				54
			],
			[
				-65,
				106
			],
			[
				-1,
				2
			],
			[
				106,
				79
			],
			[
				17,
				13
			]
		],
		[
			[
				19004,
				9172
			],
			[
				9,
				36
			],
			[
				8,
				30
			],
			[
				3,
				12
			],
			[
				0,
				17
			],
			[
				-4,
				13
			],
			[
				2,
				14
			],
			[
				66,
				108
			],
			[
				-34,
				7
			],
			[
				24,
				86
			],
			[
				6,
				183
			]
		],
		[
			[
				19084,
				9678
			],
			[
				323,
				-20
			],
			[
				115,
				167
			],
			[
				6,
				-1
			],
			[
				48,
				-12
			]
		],
		[
			[
				19576,
				9812
			],
			[
				51,
				-134
			],
			[
				6,
				-15
			],
			[
				96,
				86
			]
		],
		[
			[
				19729,
				9749
			],
			[
				27,
				-15
			],
			[
				41,
				-21
			],
			[
				67,
				-122
			],
			[
				28,
				63
			],
			[
				22,
				-27
			],
			[
				27,
				-225
			],
			[
				2,
				-17
			],
			[
				38,
				-44
			],
			[
				6,
				-6
			],
			[
				60,
				-79
			],
			[
				12,
				-68
			],
			[
				84,
				-237
			],
			[
				67,
				-74
			],
			[
				-15,
				-130
			]
		],
		[
			[
				20195,
				8747
			],
			[
				-34,
				-137
			],
			[
				-259,
				-457
			],
			[
				-11,
				-84
			],
			[
				-3,
				-26
			],
			[
				-9,
				-76
			],
			[
				-3,
				-18
			],
			[
				-1,
				-14
			],
			[
				-16,
				-24
			]
		],
		[
			[
				20197,
				12125
			],
			[
				-150,
				40
			],
			[
				-4,
				1
			],
			[
				-54,
				21
			],
			[
				-61,
				45
			],
			[
				-24,
				-43
			],
			[
				-28,
				-48
			]
		],
		[
			[
				19876,
				12141
			],
			[
				-53,
				177
			],
			[
				-3,
				213
			],
			[
				-135,
				285
			]
		],
		[
			[
				19685,
				12816
			],
			[
				-89,
				-104
			],
			[
				-10,
				-13
			],
			[
				-19,
				17
			],
			[
				-46,
				40
			],
			[
				-5,
				-4
			],
			[
				-52,
				-34
			],
			[
				2,
				-80
			],
			[
				-55,
				-18
			],
			[
				-45,
				46
			],
			[
				-90,
				-13
			],
			[
				-46,
				43
			]
		],
		[
			[
				19230,
				12696
			],
			[
				-270,
				-14
			]
		],
		[
			[
				18960,
				12682
			],
			[
				-77,
				331
			],
			[
				52,
				224
			],
			[
				25,
				102
			],
			[
				5,
				24
			],
			[
				5,
				19
			],
			[
				26,
				40
			],
			[
				9,
				14
			],
			[
				9,
				15
			]
		],
		[
			[
				19014,
				13451
			],
			[
				0,
				2
			],
			[
				-50,
				159
			],
			[
				-3,
				8
			]
		],
		[
			[
				18961,
				13620
			],
			[
				-15,
				42
			],
			[
				-9,
				23
			],
			[
				-23,
				-4
			],
			[
				-75,
				-16
			],
			[
				-132,
				145
			],
			[
				-23,
				-32
			],
			[
				-43,
				173
			],
			[
				-19,
				-37
			],
			[
				-29,
				55
			],
			[
				17,
				99
			],
			[
				1,
				1
			],
			[
				7,
				166
			],
			[
				-33,
				-1
			],
			[
				-64,
				23
			],
			[
				-37,
				102
			],
			[
				-32,
				88
			],
			[
				-30,
				37
			],
			[
				34,
				71
			],
			[
				-83,
				96
			],
			[
				-90,
				-42
			],
			[
				-21,
				40
			],
			[
				-65,
				56
			]
		],
		[
			[
				18197,
				14705
			],
			[
				-10,
				95
			],
			[
				40,
				2
			],
			[
				63,
				36
			],
			[
				28,
				24
			],
			[
				5,
				5
			],
			[
				6,
				-2
			],
			[
				112,
				-35
			],
			[
				23,
				-7
			],
			[
				0,
				1
			],
			[
				-3,
				71
			],
			[
				29,
				80
			],
			[
				0,
				94
			],
			[
				-9,
				7
			]
		],
		[
			[
				18481,
				15076
			],
			[
				111,
				-55
			],
			[
				156,
				37
			],
			[
				-4,
				-60
			],
			[
				11,
				-99
			],
			[
				40,
				-59
			],
			[
				44,
				25
			],
			[
				58,
				-207
			]
		],
		[
			[
				18897,
				14658
			],
			[
				4,
				-14
			],
			[
				45,
				-195
			],
			[
				-24,
				-44
			],
			[
				55,
				-76
			],
			[
				-16,
				-155
			],
			[
				119,
				-84
			]
		],
		[
			[
				19080,
				14090
			],
			[
				178,
				-92
			],
			[
				36,
				0
			],
			[
				37,
				0
			]
		],
		[
			[
				19331,
				13998
			],
			[
				30,
				108
			],
			[
				19,
				51
			],
			[
				44,
				-23
			],
			[
				5,
				-2
			],
			[
				5,
				-3
			],
			[
				1,
				0
			],
			[
				3,
				8
			],
			[
				10,
				36
			]
		],
		[
			[
				19448,
				14173
			],
			[
				2,
				1
			],
			[
				45,
				15
			],
			[
				65,
				-36
			],
			[
				7,
				3
			],
			[
				21,
				8
			],
			[
				123,
				47
			],
			[
				14,
				5
			],
			[
				67,
				-21
			],
			[
				44,
				-46
			],
			[
				2,
				-2
			],
			[
				28,
				108
			],
			[
				52,
				67
			],
			[
				111,
				-110
			]
		],
		[
			[
				20029,
				14212
			],
			[
				118,
				-125
			],
			[
				39,
				-42
			],
			[
				9,
				-9
			],
			[
				31,
				-33
			],
			[
				31,
				-77
			],
			[
				39,
				-7
			],
			[
				41,
				-8
			],
			[
				7,
				-50
			],
			[
				1,
				-7
			],
			[
				32,
				-8
			],
			[
				17,
				-5
			],
			[
				13,
				-25
			],
			[
				23,
				-57
			],
			[
				38,
				-19
			],
			[
				18,
				-23
			]
		],
		[
			[
				20486,
				13717
			],
			[
				234,
				163
			],
			[
				13,
				63
			],
			[
				90,
				3
			],
			[
				278,
				-99
			],
			[
				64,
				-42
			],
			[
				71,
				66
			],
			[
				190,
				2
			],
			[
				82,
				-46
			],
			[
				5,
				5
			],
			[
				55,
				59
			],
			[
				63,
				66
			]
		],
		[
			[
				21956,
				12370
			],
			[
				-62,
				-63
			],
			[
				-332,
				17
			],
			[
				-13,
				-15
			],
			[
				-143,
				-152
			],
			[
				-56,
				8
			],
			[
				-140,
				-127
			],
			[
				84,
				-148
			],
			[
				-91,
				-118
			],
			[
				-80,
				-206
			]
		],
		[
			[
				21123,
				11566
			],
			[
				-81,
				33
			],
			[
				8,
				-77
			],
			[
				-111,
				-111
			],
			[
				-42,
				-18
			],
			[
				-20,
				-8
			],
			[
				-39,
				-17
			],
			[
				-73,
				-30
			],
			[
				40,
				-142
			],
			[
				-46,
				-9
			],
			[
				-5,
				0
			],
			[
				-27,
				-103
			],
			[
				-80,
				-54
			]
		],
		[
			[
				20647,
				11030
			],
			[
				-41,
				36
			]
		],
		[
			[
				20606,
				11066
			],
			[
				-6,
				171
			],
			[
				81,
				8
			],
			[
				-16,
				42
			],
			[
				-5,
				13
			],
			[
				-64,
				164
			],
			[
				-67,
				104
			],
			[
				-24,
				2
			],
			[
				-76,
				7
			],
			[
				-55,
				63
			],
			[
				-10,
				12
			],
			[
				-95,
				90
			],
			[
				17,
				201
			],
			[
				-89,
				182
			]
		],
		[
			[
				18735,
				11020
			],
			[
				-62,
				-74
			],
			[
				45,
				-26
			],
			[
				-51,
				-76
			],
			[
				-16,
				-6
			],
			[
				-132,
				-57
			],
			[
				-47,
				-38
			],
			[
				34,
				-52
			],
			[
				-1,
				-8
			],
			[
				0,
				-94
			],
			[
				-10,
				-56
			]
		],
		[
			[
				18495,
				10533
			],
			[
				0,
				-15
			],
			[
				-4,
				-158
			]
		],
		[
			[
				18491,
				10360
			],
			[
				-87,
				-16
			],
			[
				13,
				-65
			],
			[
				-32,
				-16
			],
			[
				-50,
				-62
			],
			[
				-44,
				103
			],
			[
				-9,
				23
			],
			[
				-33,
				-5
			],
			[
				-37,
				-7
			]
		],
		[
			[
				18445,
				12630
			],
			[
				27,
				-36
			],
			[
				13,
				2
			],
			[
				2,
				0
			],
			[
				8,
				1
			],
			[
				61,
				6
			],
			[
				40,
				4
			],
			[
				64,
				-57
			]
		],
		[
			[
				18660,
				12550
			],
			[
				9,
				-7
			],
			[
				27,
				-21
			],
			[
				32,
				-24
			],
			[
				99,
				56
			],
			[
				7,
				4
			],
			[
				136,
				92
			]
		],
		[
			[
				18970,
				12650
			],
			[
				-10,
				32
			]
		],
		[
			[
				19876,
				12141
			],
			[
				-21,
				-505
			]
		],
		[
			[
				19855,
				11636
			],
			[
				-50,
				1
			],
			[
				-29,
				1
			],
			[
				-153,
				10
			],
			[
				-24,
				46
			],
			[
				-38,
				74
			],
			[
				-82,
				-73
			],
			[
				-6,
				80
			],
			[
				-13,
				-3
			],
			[
				-85,
				-19
			]
		],
		[
			[
				19375,
				11753
			],
			[
				-100,
				-57
			],
			[
				0,
				0
			],
			[
				-145,
				92
			]
		],
		[
			[
				19130,
				11788
			],
			[
				-59,
				-1
			],
			[
				-49,
				-172
			],
			[
				71,
				-125
			],
			[
				1,
				-3
			],
			[
				-51,
				-166
			],
			[
				-1,
				-6
			],
			[
				-3,
				8
			],
			[
				-28,
				88
			],
			[
				-25,
				-60
			],
			[
				-21,
				-49
			],
			[
				-9,
				-24
			],
			[
				-32,
				8
			],
			[
				-21,
				5
			],
			[
				-23,
				-80
			],
			[
				-81,
				-11
			]
		],
		[
			[
				18799,
				11200
			],
			[
				-2,
				-12
			],
			[
				10,
				-21
			],
			[
				14,
				-17
			],
			[
				-11,
				-47
			],
			[
				-55,
				1
			],
			[
				7,
				-20
			],
			[
				7,
				-31
			],
			[
				-9,
				-24
			],
			[
				-25,
				-9
			]
		],
		[
			[
				17953,
				11520
			],
			[
				0,
				0
			],
			[
				-13,
				12
			]
		],
		[
			[
				18942,
				42937
			],
			[
				-34,
				9
			],
			[
				-85,
				24
			],
			[
				-221,
				63
			],
			[
				-211,
				133
			],
			[
				-92,
				146
			],
			[
				-47,
				74
			],
			[
				80,
				104
			],
			[
				-47,
				72
			],
			[
				-30,
				46
			],
			[
				-13,
				21
			],
			[
				-89,
				-20
			],
			[
				-102,
				-23
			],
			[
				-33,
				58
			],
			[
				-37,
				68
			],
			[
				0,
				0
			]
		],
		[
			[
				20770,
				46072
			],
			[
				31,
				-11
			],
			[
				68,
				-25
			],
			[
				240,
				-87
			],
			[
				22,
				-9
			],
			[
				79,
				-3
			],
			[
				3,
				9
			],
			[
				15,
				34
			],
			[
				245,
				204
			],
			[
				90,
				15
			],
			[
				79,
				13
			],
			[
				195,
				32
			],
			[
				27,
				29
			],
			[
				16,
				19
			],
			[
				48,
				15
			],
			[
				101,
				30
			],
			[
				68,
				20
			],
			[
				61,
				77
			],
			[
				37,
				47
			],
			[
				0,
				42
			],
			[
				0,
				36
			],
			[
				0,
				31
			],
			[
				86,
				15
			],
			[
				170,
				31
			],
			[
				77,
				78
			],
			[
				84,
				-71
			],
			[
				53,
				-46
			],
			[
				102,
				-87
			]
		],
		[
			[
				22767,
				46510
			],
			[
				-80,
				-46
			],
			[
				142,
				-104
			],
			[
				-4,
				-11
			],
			[
				-66,
				-192
			],
			[
				-61,
				-175
			],
			[
				-4,
				-11
			],
			[
				-11,
				-32
			],
			[
				-56,
				-38
			],
			[
				-53,
				-36
			],
			[
				-162,
				-110
			],
			[
				-117,
				-80
			],
			[
				-48,
				-32
			]
		],
		[
			[
				22247,
				45643
			],
			[
				39,
				-168
			],
			[
				33,
				-141
			],
			[
				18,
				-74
			],
			[
				127,
				-158
			],
			[
				-29,
				-42
			],
			[
				75,
				-296
			],
			[
				0,
				-1
			],
			[
				41,
				-28
			],
			[
				21,
				49
			],
			[
				88,
				17
			],
			[
				15,
				-24
			],
			[
				22,
				-34
			],
			[
				62,
				-101
			],
			[
				21,
				-33
			],
			[
				83,
				13
			]
		],
		[
			[
				22863,
				44622
			],
			[
				-152,
				-102
			],
			[
				-21,
				12
			],
			[
				-65,
				39
			],
			[
				-1,
				-43
			],
			[
				-67,
				-13
			],
			[
				-26,
				-128
			],
			[
				-5,
				-24
			],
			[
				-109,
				-34
			],
			[
				-11,
				-55
			],
			[
				-3,
				-17
			],
			[
				-4,
				-16
			],
			[
				89,
				-42
			],
			[
				60,
				-27
			],
			[
				12,
				-6
			],
			[
				-32,
				-203
			],
			[
				-15,
				-59
			],
			[
				-1,
				-7
			],
			[
				79,
				-98
			],
			[
				51,
				-63
			],
			[
				10,
				-60
			],
			[
				14,
				-82
			],
			[
				-86,
				-240
			],
			[
				-9,
				-24
			],
			[
				-14,
				-38
			]
		],
		[
			[
				22557,
				43292
			],
			[
				-388,
				-127
			],
			[
				-128,
				-94
			]
		],
		[
			[
				18800,
				41695
			],
			[
				-40,
				101
			],
			[
				-244,
				11
			]
		],
		[
			[
				18516,
				41807
			],
			[
				-134,
				430
			]
		],
		[
			[
				18382,
				42237
			],
			[
				429,
				203
			],
			[
				37,
				68
			],
			[
				47,
				84
			],
			[
				7,
				51
			],
			[
				23,
				173
			],
			[
				17,
				121
			]
		],
		[
			[
				17979,
				43715
			],
			[
				0,
				0
			],
			[
				-6,
				11
			],
			[
				-284,
				223
			]
		],
		[
			[
				17549,
				20816
			],
			[
				124,
				-154
			],
			[
				286,
				-168
			],
			[
				150,
				-191
			],
			[
				47,
				-182
			],
			[
				45,
				-176
			],
			[
				124,
				-226
			],
			[
				-84,
				-316
			],
			[
				151,
				-331
			]
		],
		[
			[
				18392,
				19072
			],
			[
				342,
				-156
			],
			[
				559,
				-519
			]
		],
		[
			[
				19293,
				18397
			],
			[
				165,
				-141
			],
			[
				170,
				-327
			]
		],
		[
			[
				19628,
				17929
			],
			[
				-52,
				-93
			],
			[
				-7,
				-13
			],
			[
				-64,
				-115
			],
			[
				-19,
				-34
			],
			[
				-10,
				-135
			],
			[
				-15,
				-189
			],
			[
				-83,
				-25
			]
		],
		[
			[
				19378,
				17325
			],
			[
				-275,
				-124
			],
			[
				-82,
				-88
			],
			[
				-4,
				-4
			],
			[
				-27,
				-52
			],
			[
				-13,
				-24
			],
			[
				-46,
				-29
			],
			[
				-165,
				31
			],
			[
				-105,
				19
			],
			[
				-86,
				41
			],
			[
				-66,
				31
			],
			[
				-5,
				2
			],
			[
				-50,
				24
			],
			[
				-16,
				7
			],
			[
				-38,
				56
			],
			[
				-103,
				150
			]
		],
		[
			[
				18297,
				17365
			],
			[
				-5,
				-56
			]
		],
		[
			[
				18292,
				17309
			],
			[
				-18,
				-5
			],
			[
				-19,
				-5
			],
			[
				-60,
				-17
			],
			[
				-27,
				-8
			],
			[
				27,
				-53
			],
			[
				-92,
				-17
			],
			[
				-2,
				50
			],
			[
				-40,
				47
			],
			[
				-24,
				30
			],
			[
				-76,
				3
			],
			[
				-18,
				0
			],
			[
				38,
				90
			],
			[
				15,
				36
			],
			[
				-12,
				0
			],
			[
				-61,
				-4
			],
			[
				-7,
				18
			],
			[
				-48,
				112
			],
			[
				-48,
				-22
			],
			[
				-12,
				71
			],
			[
				-7,
				0
			],
			[
				-45,
				2
			],
			[
				-76,
				4
			]
		],
		[
			[
				17680,
				17641
			],
			[
				-70,
				-18
			],
			[
				-291,
				-78
			],
			[
				-181,
				-141
			],
			[
				-27,
				-22
			],
			[
				-5,
				1
			],
			[
				-74,
				9
			],
			[
				-32,
				4
			],
			[
				-152,
				19
			],
			[
				-253,
				117
			],
			[
				-72,
				-90
			]
		],
		[
			[
				16523,
				17442
			],
			[
				-112,
				273
			],
			[
				-158,
				384
			]
		],
		[
			[
				16253,
				18099
			],
			[
				-31,
				126
			],
			[
				-59,
				243
			],
			[
				-85,
				345
			]
		],
		[
			[
				16078,
				18813
			],
			[
				-173,
				160
			],
			[
				-172,
				-234
			],
			[
				-97,
				50
			],
			[
				-77,
				144
			],
			[
				31,
				305
			]
		],
		[
			[
				15590,
				19238
			],
			[
				-20,
				118
			],
			[
				-4,
				29
			],
			[
				-7,
				43
			],
			[
				-9,
				0
			],
			[
				-16,
				2
			],
			[
				-71,
				7
			],
			[
				11,
				49
			],
			[
				10,
				45
			],
			[
				61,
				276
			],
			[
				-37,
				135
			],
			[
				-7,
				27
			],
			[
				6,
				46
			],
			[
				19,
				144
			],
			[
				-29,
				143
			],
			[
				-34,
				171
			],
			[
				17,
				84
			],
			[
				11,
				48
			],
			[
				-106,
				276
			],
			[
				108,
				16
			],
			[
				-47,
				42
			],
			[
				-1,
				1
			],
			[
				43,
				121
			],
			[
				24,
				67
			],
			[
				-86,
				38
			],
			[
				-59,
				-31
			],
			[
				-59,
				-31
			],
			[
				-28,
				112
			],
			[
				-24,
				91
			],
			[
				-7,
				29
			],
			[
				-36,
				139
			]
		],
		[
			[
				15213,
				21475
			],
			[
				-1,
				0
			],
			[
				-48,
				109
			],
			[
				-8,
				20
			],
			[
				-119,
				69
			]
		],
		[
			[
				15037,
				21673
			],
			[
				237,
				24
			],
			[
				72,
				-33
			],
			[
				177,
				-79
			],
			[
				28,
				7
			],
			[
				75,
				19
			],
			[
				-16,
				49
			],
			[
				-24,
				73
			],
			[
				81,
				-24
			],
			[
				210,
				-65
			],
			[
				144,
				-44
			],
			[
				39,
				-49
			],
			[
				-10,
				-112
			],
			[
				95,
				-85
			],
			[
				136,
				55
			]
		],
		[
			[
				16281,
				21409
			],
			[
				-19,
				-176
			],
			[
				142,
				-68
			],
			[
				109,
				-52
			],
			[
				143,
				-185
			],
			[
				11,
				-6
			],
			[
				108,
				-62
			],
			[
				7,
				-10
			],
			[
				43,
				-57
			],
			[
				24,
				-32
			]
		],
		[
			[
				16849,
				20761
			],
			[
				87,
				41
			],
			[
				111,
				53
			],
			[
				107,
				-40
			],
			[
				44,
				-16
			],
			[
				82,
				-45
			],
			[
				45,
				-23
			],
			[
				4,
				4
			],
			[
				10,
				8
			],
			[
				52,
				45
			],
			[
				93,
				-23
			],
			[
				3,
				3
			],
			[
				17,
				13
			],
			[
				45,
				35
			]
		],
		[
			[
				18495,
				10533
			],
			[
				57,
				-49
			],
			[
				81,
				153
			],
			[
				42,
				-47
			],
			[
				1,
				-1
			],
			[
				14,
				8
			],
			[
				22,
				13
			],
			[
				95,
				-6
			],
			[
				43,
				17
			],
			[
				273,
				46
			]
		],
		[
			[
				19123,
				10667
			],
			[
				-24,
				-116
			],
			[
				0,
				-22
			],
			[
				-5,
				-103
			],
			[
				109,
				45
			],
			[
				130,
				-50
			]
		],
		[
			[
				19333,
				10421
			],
			[
				17,
				-62
			],
			[
				7,
				-42
			],
			[
				15,
				-66
			],
			[
				26,
				-112
			],
			[
				109,
				-133
			],
			[
				40,
				-50
			],
			[
				6,
				-75
			],
			[
				15,
				-44
			],
			[
				8,
				-25
			]
		],
		[
			[
				21303,
				7217
			],
			[
				-113,
				137
			],
			[
				-11,
				15
			],
			[
				1,
				3
			],
			[
				27,
				77
			],
			[
				6,
				17
			],
			[
				-18,
				202
			],
			[
				-134,
				222
			],
			[
				5,
				60
			],
			[
				3,
				30
			],
			[
				3,
				42
			],
			[
				-139,
				268
			],
			[
				-5,
				91
			],
			[
				-85,
				374
			]
		],
		[
			[
				20843,
				8755
			],
			[
				-31,
				-27
			],
			[
				-58,
				-49
			],
			[
				-145,
				61
			],
			[
				-86,
				-97
			],
			[
				-16,
				-24
			],
			[
				-6,
				-9
			],
			[
				-60,
				65
			],
			[
				-58,
				-78
			],
			[
				-71,
				86
			],
			[
				-117,
				64
			]
		],
		[
			[
				2190,
				15330
			],
			[
				75,
				122
			],
			[
				78,
				44
			],
			[
				5,
				-37
			],
			[
				47,
				69
			],
			[
				159,
				233
			],
			[
				88,
				-61
			],
			[
				24,
				88
			],
			[
				45,
				170
			],
			[
				99,
				82
			]
		],
		[
			[
				2810,
				16040
			],
			[
				13,
				31
			],
			[
				35,
				92
			],
			[
				-3,
				18
			],
			[
				-3,
				14
			],
			[
				-33,
				172
			],
			[
				83,
				133
			],
			[
				1,
				1
			],
			[
				58,
				21
			],
			[
				52,
				18
			],
			[
				7,
				21
			],
			[
				30,
				86
			],
			[
				2,
				1
			],
			[
				88,
				47
			],
			[
				2,
				68
			]
		],
		[
			[
				3142,
				16763
			],
			[
				137,
				32
			],
			[
				64,
				53
			],
			[
				50,
				42
			],
			[
				63,
				-30
			],
			[
				33,
				89
			],
			[
				109,
				25
			],
			[
				126,
				102
			],
			[
				4,
				63
			],
			[
				5,
				69
			],
			[
				102,
				173
			],
			[
				149,
				-64
			],
			[
				77,
				-95
			]
		],
		[
			[
				4061,
				17222
			],
			[
				-37,
				-218
			],
			[
				-29,
				-69
			],
			[
				-25,
				-58
			],
			[
				-107,
				-254
			],
			[
				-11,
				-27
			],
			[
				-14,
				-31
			],
			[
				-3,
				-101
			],
			[
				-2,
				-65
			],
			[
				-1,
				-26
			],
			[
				2,
				-9
			],
			[
				51,
				-196
			],
			[
				-27,
				-74
			],
			[
				-20,
				-55
			]
		],
		[
			[
				3838,
				16039
			],
			[
				35,
				-66
			],
			[
				91,
				-174
			],
			[
				3,
				-115
			],
			[
				0,
				-6
			],
			[
				2,
				-69
			],
			[
				-11,
				-27
			],
			[
				-28,
				-72
			],
			[
				-106,
				-274
			],
			[
				1,
				-3
			],
			[
				26,
				-79
			],
			[
				-83,
				-81
			],
			[
				-94,
				-90
			],
			[
				-1,
				-1
			],
			[
				-17,
				-17
			],
			[
				9,
				-63
			],
			[
				8,
				-63
			],
			[
				12,
				-90
			],
			[
				-33,
				-161
			],
			[
				51,
				-112
			]
		],
		[
			[
				3703,
				14476
			],
			[
				-211,
				-405
			],
			[
				-37,
				-13
			],
			[
				-93,
				-33
			],
			[
				-32,
				56
			],
			[
				-14,
				24
			],
			[
				-23,
				40
			],
			[
				-56,
				-54
			],
			[
				-10,
				-10
			]
		],
		[
			[
				2962,
				16766
			],
			[
				7,
				-4
			],
			[
				20,
				-13
			],
			[
				8,
				12
			],
			[
				35,
				52
			],
			[
				35,
				-16
			],
			[
				2,
				-1
			],
			[
				73,
				-33
			]
		],
		[
			[
				1632,
				16058
			],
			[
				0,
				0
			],
			[
				-24,
				33
			],
			[
				0,
				0
			]
		],
		[
			[
				26645,
				56214
			],
			[
				11,
				-71
			],
			[
				13,
				-82
			],
			[
				-65,
				-39
			],
			[
				-67,
				-39
			],
			[
				-51,
				-30
			],
			[
				-2,
				-8
			],
			[
				-45,
				-143
			],
			[
				-81,
				-71
			],
			[
				-75,
				-64
			],
			[
				33,
				-36
			],
			[
				-119,
				-228
			]
		],
		[
			[
				26197,
				55403
			],
			[
				-245,
				-154
			],
			[
				25,
				-48
			],
			[
				-58,
				-73
			],
			[
				67,
				-34
			],
			[
				-10,
				-122
			],
			[
				-90,
				-12
			],
			[
				-52,
				-7
			],
			[
				0,
				-31
			],
			[
				-1,
				-165
			],
			[
				-90,
				-107
			],
			[
				-88,
				-31
			],
			[
				-81,
				30
			],
			[
				-3,
				-46
			],
			[
				-169,
				26
			],
			[
				-98,
				-76
			],
			[
				-90,
				44
			],
			[
				-67,
				31
			],
			[
				-221,
				-143
			],
			[
				-16,
				-11
			],
			[
				-6,
				-27
			]
		],
		[
			[
				7393,
				12318
			],
			[
				-69,
				-14
			],
			[
				-43,
				-9
			],
			[
				-248,
				-51
			],
			[
				-32,
				-22
			],
			[
				-38,
				-26
			],
			[
				-416,
				-288
			],
			[
				-30,
				-31
			],
			[
				-92,
				-96
			],
			[
				-24,
				-24
			],
			[
				-57,
				-8
			],
			[
				-25,
				-3
			],
			[
				-3,
				0
			],
			[
				-18,
				-3
			],
			[
				-44,
				-6
			],
			[
				-91,
				-12
			]
		],
		[
			[
				6163,
				11725
			],
			[
				-94,
				40
			],
			[
				-16,
				66
			],
			[
				68,
				233
			],
			[
				47,
				162
			],
			[
				-36,
				83
			],
			[
				27,
				166
			],
			[
				16,
				98
			],
			[
				3,
				16
			],
			[
				-24,
				58
			],
			[
				-87,
				91
			],
			[
				-176,
				-79
			],
			[
				-86,
				-9
			],
			[
				-95,
				76
			],
			[
				-39,
				-34
			]
		],
		[
			[
				5671,
				12692
			],
			[
				-60,
				407
			],
			[
				-3,
				25
			],
			[
				-7,
				43
			],
			[
				0,
				0
			],
			[
				-6,
				42
			],
			[
				-1,
				9
			],
			[
				-8,
				56
			],
			[
				-13,
				87
			],
			[
				-44,
				64
			],
			[
				-102,
				150
			],
			[
				-9,
				14
			],
			[
				-10,
				14
			],
			[
				-52,
				76
			],
			[
				-267,
				241
			]
		],
		[
			[
				5089,
				13920
			],
			[
				374,
				592
			],
			[
				22,
				36
			],
			[
				12,
				18
			],
			[
				5,
				45
			],
			[
				42,
				342
			],
			[
				-86,
				128
			],
			[
				29,
				69
			]
		],
		[
			[
				5487,
				15150
			],
			[
				29,
				68
			]
		],
		[
			[
				5516,
				15218
			],
			[
				-65,
				19
			],
			[
				-122,
				35
			],
			[
				-9,
				2
			],
			[
				-57,
				-17
			],
			[
				-101,
				-29
			],
			[
				-34,
				-59
			],
			[
				-75,
				63
			],
			[
				-124,
				-19
			],
			[
				-183,
				-207
			],
			[
				-5,
				166
			],
			[
				-174,
				-120
			],
			[
				-15,
				2
			],
			[
				-2,
				0
			],
			[
				-197,
				23
			],
			[
				-4,
				-3
			]
		],
		[
			[
				3821,
				14570
			],
			[
				0,
				0
			],
			[
				-24,
				-19
			],
			[
				-94,
				-75
			]
		],
		[
			[
				4061,
				17222
			],
			[
				220,
				123
			],
			[
				24,
				13
			],
			[
				20,
				11
			]
		],
		[
			[
				4325,
				17369
			],
			[
				14,
				-14
			],
			[
				1,
				0
			],
			[
				35,
				-36
			],
			[
				76,
				34
			],
			[
				23,
				10
			],
			[
				102,
				46
			],
			[
				127,
				-50
			],
			[
				21,
				58
			],
			[
				110,
				12
			],
			[
				46,
				-48
			],
			[
				-24,
				-34
			],
			[
				45,
				-120
			],
			[
				16,
				2
			],
			[
				290,
				36
			],
			[
				5,
				-13
			],
			[
				109,
				-274
			],
			[
				115,
				75
			],
			[
				38,
				-70
			],
			[
				122,
				54
			]
		],
		[
			[
				5596,
				17037
			],
			[
				91,
				111
			],
			[
				121,
				0
			],
			[
				46,
				151
			],
			[
				15,
				48
			],
			[
				59,
				30
			],
			[
				-21,
				74
			],
			[
				29,
				54
			],
			[
				26,
				50
			],
			[
				27,
				52
			],
			[
				13,
				24
			],
			[
				-9,
				13
			],
			[
				-45,
				64
			],
			[
				-31,
				44
			],
			[
				5,
				18
			],
			[
				4,
				14
			],
			[
				17,
				55
			],
			[
				34,
				119
			],
			[
				41,
				139
			],
			[
				61,
				40
			],
			[
				44,
				29
			],
			[
				46,
				-9
			],
			[
				25,
				-5
			],
			[
				413,
				-84
			]
		],
		[
			[
				6607,
				18068
			],
			[
				46,
				34
			],
			[
				23,
				121
			],
			[
				12,
				66
			],
			[
				-22,
				30
			],
			[
				-53,
				69
			],
			[
				142,
				13
			],
			[
				58,
				6
			],
			[
				40,
				4
			],
			[
				25,
				82
			],
			[
				3,
				8
			],
			[
				22,
				72
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				34,
				-31
			],
			[
				2,
				8
			],
			[
				6,
				29
			],
			[
				14,
				75
			],
			[
				2,
				10
			],
			[
				34,
				172
			],
			[
				65,
				4
			]
		],
		[
			[
				7060,
				18840
			],
			[
				10,
				-63
			],
			[
				16,
				-94
			],
			[
				1,
				-11
			],
			[
				156,
				-27
			],
			[
				146,
				-25
			],
			[
				109,
				-108
			],
			[
				188,
				39
			],
			[
				60,
				12
			],
			[
				9,
				2
			],
			[
				30,
				6
			],
			[
				600,
				-144
			],
			[
				133,
				-32
			]
		],
		[
			[
				9189,
				16613
			],
			[
				-3,
				-52
			],
			[
				-13,
				-185
			],
			[
				-9,
				-129
			],
			[
				-10,
				-142
			],
			[
				-12,
				-177
			],
			[
				-9,
				-128
			],
			[
				-119,
				-211
			],
			[
				-6,
				-10
			],
			[
				-68,
				-121
			],
			[
				-80,
				-466
			],
			[
				-49,
				-88
			],
			[
				-238,
				-435
			]
		],
		[
			[
				4538,
				20494
			],
			[
				-7,
				-50
			],
			[
				-7,
				-55
			],
			[
				-2,
				-19
			],
			[
				-24,
				-185
			],
			[
				34,
				-62
			],
			[
				1,
				-2
			],
			[
				27,
				-47
			],
			[
				162,
				-57
			]
		],
		[
			[
				4722,
				20017
			],
			[
				283,
				-225
			]
		],
		[
			[
				5005,
				19792
			],
			[
				-61,
				-178
			],
			[
				90,
				-96
			],
			[
				-5,
				-106
			],
			[
				-1,
				-24
			],
			[
				-2,
				-39
			],
			[
				-35,
				16
			],
			[
				-41,
				20
			],
			[
				-27,
				-18
			],
			[
				-162,
				-104
			],
			[
				-34,
				-122
			],
			[
				45,
				-128
			],
			[
				-67,
				17
			],
			[
				-58,
				128
			],
			[
				-49,
				-97
			],
			[
				-89,
				-55
			],
			[
				-15,
				1
			],
			[
				-105,
				1
			],
			[
				-74,
				-167
			],
			[
				-56,
				2
			],
			[
				-15,
				-165
			],
			[
				-116,
				222
			],
			[
				-38,
				3
			],
			[
				-50,
				-60
			],
			[
				-178,
				-50
			],
			[
				-61,
				-93
			],
			[
				-43,
				-293
			],
			[
				-80,
				-141
			],
			[
				-47,
				-4
			],
			[
				-10,
				-71
			],
			[
				-3,
				-15
			],
			[
				-5,
				-35
			],
			[
				61,
				-41
			],
			[
				0,
				0
			]
		],
		[
			[
				3104,
				18819
			],
			[
				0,
				0
			],
			[
				-32,
				11
			],
			[
				-10,
				36
			],
			[
				-29,
				101
			],
			[
				62,
				108
			],
			[
				2,
				4
			],
			[
				8,
				21
			],
			[
				27,
				72
			],
			[
				82,
				121
			],
			[
				-15,
				262
			],
			[
				-3,
				42
			]
		],
		[
			[
				3196,
				19597
			],
			[
				9,
				7
			],
			[
				187,
				150
			],
			[
				2,
				8
			],
			[
				19,
				55
			],
			[
				46,
				-47
			],
			[
				73,
				72
			],
			[
				43,
				187
			],
			[
				80,
				66
			],
			[
				26,
				181
			]
		],
		[
			[
				3681,
				20276
			],
			[
				63,
				-1
			],
			[
				128,
				411
			],
			[
				40,
				-20
			],
			[
				225,
				176
			],
			[
				2,
				2
			],
			[
				3,
				-1
			],
			[
				50,
				-27
			],
			[
				43,
				-23
			],
			[
				12,
				-29
			],
			[
				69,
				-163
			],
			[
				95,
				-46
			],
			[
				41,
				-20
			],
			[
				40,
				-19
			],
			[
				38,
				-19
			],
			[
				8,
				-3
			]
		],
		[
			[
				3713,
				18077
			],
			[
				27,
				5
			],
			[
				0,
				0
			]
		],
		[
			[
				3812,
				18080
			],
			[
				-1,
				-14
			],
			[
				-1,
				-50
			],
			[
				-2,
				-42
			],
			[
				-1,
				-33
			],
			[
				-1,
				-55
			],
			[
				181,
				-157
			],
			[
				18,
				-17
			],
			[
				14,
				4
			],
			[
				300,
				90
			],
			[
				4,
				-294
			],
			[
				1,
				-61
			],
			[
				1,
				-56
			],
			[
				0,
				-26
			]
		],
		[
			[
				1496,
				19503
			],
			[
				0,
				0
			],
			[
				-8,
				48
			],
			[
				-16,
				99
			],
			[
				92,
				96
			],
			[
				4,
				177
			],
			[
				19,
				18
			],
			[
				98,
				92
			],
			[
				71,
				67
			],
			[
				120,
				14
			],
			[
				31,
				4
			],
			[
				46,
				104
			],
			[
				50,
				-27
			],
			[
				2,
				0
			],
			[
				63,
				-190
			],
			[
				66,
				-2
			],
			[
				74,
				-3
			],
			[
				140,
				104
			],
			[
				23,
				17
			],
			[
				93,
				39
			],
			[
				48,
				-4
			],
			[
				2,
				-1
			],
			[
				15,
				-77
			],
			[
				2,
				-7
			],
			[
				25,
				8
			],
			[
				61,
				21
			],
			[
				2,
				2
			],
			[
				11,
				13
			],
			[
				3,
				2
			],
			[
				309,
				333
			]
		],
		[
			[
				2942,
				20450
			],
			[
				88,
				16
			],
			[
				59,
				-110
			],
			[
				13,
				-6
			],
			[
				45,
				-19
			],
			[
				26,
				-11
			],
			[
				30,
				-12
			],
			[
				65,
				103
			],
			[
				0,
				1
			],
			[
				13,
				6
			],
			[
				27,
				11
			],
			[
				174,
				77
			],
			[
				199,
				-230
			]
		],
		[
			[
				5671,
				12692
			],
			[
				-206,
				-175
			],
			[
				-45,
				-39
			],
			[
				-50,
				-112
			],
			[
				-88,
				-17
			],
			[
				-206,
				-40
			],
			[
				0,
				-63
			],
			[
				-77,
				-33
			],
			[
				-85,
				-187
			],
			[
				-17,
				-250
			],
			[
				-94,
				-52
			],
			[
				-27,
				-14
			],
			[
				-1,
				-11
			],
			[
				-6,
				-45
			],
			[
				-57,
				-263
			],
			[
				-64,
				-47
			],
			[
				-9,
				-366
			]
		],
		[
			[
				4639,
				10978
			],
			[
				-53,
				-4
			]
		],
		[
			[
				4586,
				10974
			],
			[
				-72,
				-2
			],
			[
				-37,
				-1
			],
			[
				-19,
				-1
			],
			[
				-6,
				0
			],
			[
				-42,
				21
			],
			[
				-42,
				20
			],
			[
				-102,
				50
			],
			[
				-50,
				-49
			],
			[
				-97,
				27
			],
			[
				-7,
				2
			],
			[
				-11,
				-70
			],
			[
				-62,
				-24
			],
			[
				-44,
				-17
			],
			[
				-7,
				56
			],
			[
				0,
				3
			],
			[
				-6,
				42
			],
			[
				-6,
				49
			],
			[
				-37,
				10
			],
			[
				-102,
				28
			],
			[
				-30,
				8
			],
			[
				-8,
				22
			],
			[
				-11,
				28
			],
			[
				-28,
				72
			],
			[
				-8,
				2
			],
			[
				-165,
				38
			],
			[
				-25,
				95
			]
		],
		[
			[
				2437,
				10384
			],
			[
				0,
				0
			],
			[
				-44,
				3
			],
			[
				-46,
				3
			],
			[
				-100,
				-58
			],
			[
				13,
				-31
			],
			[
				10,
				-23
			]
		],
		[
			[
				2270,
				10278
			],
			[
				-27,
				4
			],
			[
				-37,
				6
			],
			[
				-7,
				1
			],
			[
				-19,
				70
			],
			[
				-159,
				-134
			],
			[
				-34,
				31
			],
			[
				0,
				0
			]
		],
		[
			[
				23994,
				53198
			],
			[
				168,
				-49
			],
			[
				13,
				-84
			],
			[
				70,
				-30
			],
			[
				17,
				-8
			],
			[
				86,
				-159
			],
			[
				-4,
				-47
			],
			[
				-3,
				-34
			],
			[
				108,
				33
			],
			[
				200,
				-97
			],
			[
				21,
				-11
			],
			[
				20,
				1
			],
			[
				5,
				1
			],
			[
				112,
				4
			],
			[
				17,
				-10
			],
			[
				32,
				-19
			],
			[
				46,
				-29
			],
			[
				43,
				-97
			],
			[
				-34,
				-86
			],
			[
				64,
				-11
			],
			[
				129,
				-23
			],
			[
				56,
				-9
			],
			[
				17,
				-195
			],
			[
				67,
				-20
			],
			[
				4,
				-194
			],
			[
				-67,
				-82
			],
			[
				132,
				-138
			],
			[
				-13,
				-296
			]
		],
		[
			[
				25300,
				51509
			],
			[
				15,
				-403
			],
			[
				-54,
				-109
			]
		],
		[
			[
				25261,
				50997
			],
			[
				-75,
				-82
			],
			[
				-59,
				-65
			],
			[
				-12,
				-13
			],
			[
				-60,
				-66
			],
			[
				-68,
				-231
			],
			[
				319,
				23
			],
			[
				99,
				-176
			],
			[
				-67,
				-182
			],
			[
				-8,
				-22
			],
			[
				43,
				-15
			],
			[
				43,
				-15
			],
			[
				68,
				-100
			],
			[
				0,
				0
			],
			[
				-48,
				-51
			],
			[
				30,
				-79
			],
			[
				44,
				-117
			],
			[
				152,
				-36
			],
			[
				35,
				-67
			],
			[
				-13,
				-46
			],
			[
				-146,
				-18
			],
			[
				-173,
				-138
			]
		],
		[
			[
				25365,
				49501
			],
			[
				5,
				-78
			],
			[
				77,
				-40
			],
			[
				6,
				-141
			],
			[
				98,
				-110
			],
			[
				26,
				-210
			],
			[
				86,
				-72
			],
			[
				-215,
				-264
			]
		],
		[
			[
				25448,
				48586
			],
			[
				-64,
				-163
			],
			[
				-19,
				-48
			],
			[
				-14,
				-36
			],
			[
				-173,
				-36
			],
			[
				-85,
				-242
			],
			[
				-114,
				40
			],
			[
				-66,
				-66
			],
			[
				9,
				-81
			],
			[
				112,
				-117
			],
			[
				-42,
				-105
			],
			[
				-82,
				-70
			],
			[
				-78,
				1
			],
			[
				-321,
				7
			],
			[
				50,
				-150
			],
			[
				-69,
				-86
			],
			[
				-160,
				80
			]
		],
		[
			[
				24332,
				47514
			],
			[
				-261,
				-89
			],
			[
				-125,
				157
			],
			[
				-19,
				167
			]
		],
		[
			[
				23927,
				47749
			],
			[
				-59,
				22
			],
			[
				-141,
				-78
			],
			[
				-20,
				-12
			],
			[
				-199,
				60
			],
			[
				-139,
				41
			],
			[
				-109,
				-66
			],
			[
				-250,
				-153
			],
			[
				-87,
				79
			],
			[
				-92,
				23
			],
			[
				-90,
				23
			],
			[
				6,
				72
			]
		],
		[
			[
				22733,
				47842
			],
			[
				0,
				0
			],
			[
				-6,
				3
			],
			[
				-48,
				27
			],
			[
				-17,
				9
			],
			[
				-34,
				85
			],
			[
				-20,
				8
			],
			[
				-27,
				11
			],
			[
				-30,
				-60
			],
			[
				-1,
				-3
			],
			[
				23,
				-92
			],
			[
				-53,
				36
			],
			[
				-44,
				-15
			],
			[
				-44,
				-14
			],
			[
				-15,
				14
			],
			[
				-93,
				91
			],
			[
				-10,
				23
			],
			[
				-30,
				77
			],
			[
				34,
				218
			],
			[
				1,
				5
			],
			[
				0,
				0
			]
		],
		[
			[
				22102,
				48323
			],
			[
				0,
				0
			],
			[
				-33,
				30
			],
			[
				-15,
				14
			],
			[
				-17,
				-24
			],
			[
				-15,
				-20
			]
		],
		[
			[
				21939,
				48299
			],
			[
				0,
				0
			],
			[
				-79,
				4
			],
			[
				-45,
				2
			]
		],
		[
			[
				21815,
				48305
			],
			[
				111,
				76
			],
			[
				5,
				61
			],
			[
				3,
				33
			],
			[
				3,
				41
			],
			[
				119,
				116
			],
			[
				-26,
				23
			],
			[
				-47,
				44
			],
			[
				13,
				64
			],
			[
				17,
				88
			],
			[
				-5,
				5
			]
		],
		[
			[
				15521,
				29373
			],
			[
				-67,
				-11
			],
			[
				-157,
				-24
			],
			[
				-1,
				0
			],
			[
				-9,
				-5
			],
			[
				-150,
				-80
			],
			[
				-25,
				-14
			],
			[
				-61,
				-32
			],
			[
				-104,
				-56
			],
			[
				-57,
				40
			],
			[
				-40,
				28
			],
			[
				-25,
				18
			],
			[
				-12,
				8
			],
			[
				-137,
				97
			],
			[
				-86,
				60
			],
			[
				-156,
				67
			],
			[
				-54,
				23
			],
			[
				-369,
				156
			],
			[
				-40,
				17
			],
			[
				-198,
				84
			]
		],
		[
			[
				13773,
				29749
			],
			[
				-35,
				15
			],
			[
				-419,
				185
			]
		],
		[
			[
				13319,
				29949
			],
			[
				241,
				176
			],
			[
				125,
				192
			],
			[
				4,
				12
			],
			[
				42,
				130
			],
			[
				-44,
				73
			],
			[
				47,
				181
			],
			[
				15,
				55
			],
			[
				2,
				11
			],
			[
				18,
				67
			],
			[
				4,
				17
			],
			[
				-10,
				46
			],
			[
				-6,
				30
			],
			[
				-4,
				19
			],
			[
				51,
				1
			],
			[
				54,
				209
			],
			[
				8,
				30
			],
			[
				-28,
				54
			],
			[
				-35,
				64
			],
			[
				-5,
				9
			],
			[
				-141,
				-8
			],
			[
				-53,
				-3
			],
			[
				-2,
				-1
			],
			[
				-11,
				0
			],
			[
				-32,
				46
			],
			[
				-27,
				41
			],
			[
				-119,
				174
			],
			[
				-245,
				359
			],
			[
				-26,
				-4
			],
			[
				-42,
				-5
			],
			[
				-25,
				-3
			],
			[
				-29,
				53
			],
			[
				-146,
				266
			],
			[
				-10,
				18
			]
		],
		[
			[
				12890,
				32258
			],
			[
				13,
				13
			],
			[
				167,
				171
			],
			[
				21,
				21
			],
			[
				42,
				6
			],
			[
				141,
				20
			],
			[
				32,
				5
			],
			[
				11,
				18
			],
			[
				47,
				72
			],
			[
				129,
				-13
			],
			[
				81,
				-8
			],
			[
				36,
				14
			],
			[
				239,
				93
			],
			[
				53,
				21
			],
			[
				28,
				11
			],
			[
				57,
				22
			],
			[
				181,
				70
			],
			[
				63,
				25
			]
		],
		[
			[
				14231,
				32819
			],
			[
				172,
				149
			]
		],
		[
			[
				14403,
				32968
			],
			[
				52,
				94
			],
			[
				19,
				33
			],
			[
				54,
				96
			],
			[
				-7,
				49
			],
			[
				-32,
				235
			]
		],
		[
			[
				14489,
				33475
			],
			[
				118,
				60
			],
			[
				55,
				108
			],
			[
				61,
				-59
			],
			[
				31,
				-30
			],
			[
				40,
				-39
			],
			[
				15,
				2
			],
			[
				88,
				14
			],
			[
				107,
				123
			],
			[
				20,
				23
			],
			[
				160,
				184
			],
			[
				259,
				157
			],
			[
				33,
				19
			],
			[
				37,
				-7
			],
			[
				93,
				-18
			],
			[
				32,
				-7
			],
			[
				28,
				-5
			],
			[
				153,
				46
			],
			[
				19,
				-33
			],
			[
				157,
				19
			],
			[
				115,
				-51
			]
		],
		[
			[
				16110,
				33981
			],
			[
				117,
				-231
			],
			[
				17,
				-34
			],
			[
				74,
				-145
			],
			[
				90,
				-55
			],
			[
				1,
				-2
			],
			[
				43,
				-71
			],
			[
				8,
				-14
			],
			[
				73,
				-121
			],
			[
				0,
				-1
			],
			[
				32,
				-128
			],
			[
				35,
				-145
			],
			[
				6,
				-21
			],
			[
				58,
				-237
			],
			[
				49,
				-198
			],
			[
				391,
				-218
			],
			[
				4,
				-41
			],
			[
				18,
				-172
			]
		],
		[
			[
				17126,
				32147
			],
			[
				-16,
				0
			],
			[
				-244,
				-2
			],
			[
				-4,
				-2
			],
			[
				-119,
				-48
			],
			[
				-45,
				43
			],
			[
				-20,
				19
			],
			[
				-40,
				-74
			],
			[
				-48,
				9
			],
			[
				-9,
				1
			],
			[
				2,
				-18
			],
			[
				7,
				-46
			],
			[
				1,
				-9
			],
			[
				0,
				-1
			],
			[
				-10,
				-9
			],
			[
				-18,
				-17
			],
			[
				-34,
				-33
			],
			[
				-23,
				-23
			],
			[
				-125,
				-390
			],
			[
				-11,
				-36
			],
			[
				0,
				-1
			],
			[
				-124,
				-97
			],
			[
				-19,
				-14
			],
			[
				33,
				-120
			],
			[
				-95,
				-69
			]
		],
		[
			[
				16165,
				31210
			],
			[
				97,
				-310
			],
			[
				143,
				-457
			],
			[
				36,
				-117
			]
		],
		[
			[
				16441,
				30326
			],
			[
				-309,
				-147
			],
			[
				-47,
				-22
			],
			[
				-84,
				-40
			],
			[
				-20,
				-111
			],
			[
				-12,
				-60
			],
			[
				-21,
				-115
			],
			[
				-74,
				-54
			],
			[
				-28,
				-20
			],
			[
				-55,
				36
			],
			[
				-61,
				40
			],
			[
				-68,
				45
			],
			[
				-23,
				-56
			],
			[
				-31,
				-75
			],
			[
				58,
				-47
			],
			[
				42,
				-34
			],
			[
				-63,
				-16
			],
			[
				-2,
				-17
			],
			[
				-17,
				-184
			],
			[
				-105,
				-76
			]
		],
		[
			[
				9675,
				14583
			],
			[
				204,
				147
			],
			[
				412,
				180
			],
			[
				30,
				29
			],
			[
				26,
				26
			],
			[
				10,
				10
			],
			[
				74,
				72
			],
			[
				55,
				4
			],
			[
				36,
				2
			],
			[
				36,
				2
			],
			[
				14,
				1
			],
			[
				23,
				-16
			],
			[
				2,
				-3
			],
			[
				83,
				-61
			],
			[
				-60,
				89
			],
			[
				6,
				0
			],
			[
				64,
				7
			],
			[
				56,
				6
			],
			[
				228,
				-90
			],
			[
				301,
				42
			],
			[
				307,
				-85
			],
			[
				239,
				58
			],
			[
				46,
				-6
			],
			[
				101,
				-13
			],
			[
				138,
				-17
			],
			[
				190,
				76
			],
			[
				132,
				-91
			],
			[
				137,
				-96
			],
			[
				62,
				-43
			],
			[
				318,
				-294
			],
			[
				60,
				-55
			],
			[
				38,
				-133
			]
		],
		[
			[
				13043,
				14331
			],
			[
				13,
				-76
			],
			[
				2,
				-13
			],
			[
				49,
				-307
			],
			[
				21,
				-127
			],
			[
				-18,
				-143
			],
			[
				80,
				22
			],
			[
				118,
				-150
			],
			[
				138,
				-21
			],
			[
				106,
				-133
			],
			[
				113,
				-66
			],
			[
				8,
				-4
			],
			[
				39,
				-83
			],
			[
				-55,
				-115
			],
			[
				43,
				-21
			],
			[
				-11,
				-119
			]
		],
		[
			[
				13689,
				12975
			],
			[
				3,
				-279
			],
			[
				1,
				-78
			]
		],
		[
			[
				13693,
				12618
			],
			[
				26,
				-15
			],
			[
				521,
				-296
			]
		],
		[
			[
				14240,
				12307
			],
			[
				-23,
				-53
			],
			[
				-48,
				-110
			],
			[
				-2,
				-36
			],
			[
				-8,
				-136
			],
			[
				-6,
				-86
			],
			[
				48,
				-8
			],
			[
				-35,
				-93
			],
			[
				-30,
				-81
			],
			[
				49,
				-12
			],
			[
				136,
				-35
			],
			[
				32,
				-9
			],
			[
				1,
				-98
			],
			[
				0,
				-77
			],
			[
				13,
				-43
			],
			[
				72,
				-248
			],
			[
				7,
				-25
			],
			[
				13,
				-44
			],
			[
				74,
				-255
			],
			[
				18,
				-62
			]
		],
		[
			[
				14551,
				10796
			],
			[
				-64,
				-15
			],
			[
				-124,
				-29
			],
			[
				-35,
				-84
			],
			[
				-101,
				-72
			],
			[
				-113,
				-80
			],
			[
				-1,
				0
			],
			[
				-27,
				-19
			],
			[
				-11,
				-8
			],
			[
				-1,
				0
			],
			[
				-64,
				6
			],
			[
				-4,
				-3
			],
			[
				-192,
				-119
			],
			[
				-17,
				57
			],
			[
				-85,
				-44
			],
			[
				16,
				-34
			],
			[
				-58,
				-57
			]
		],
		[
			[
				13670,
				10295
			],
			[
				-43,
				83
			],
			[
				-112,
				219
			],
			[
				-13,
				26
			],
			[
				-137,
				-60
			],
			[
				-7,
				-3
			],
			[
				-97,
				48
			],
			[
				-58,
				28
			],
			[
				-50,
				-7
			],
			[
				-5,
				-18
			],
			[
				-23,
				-80
			],
			[
				-15,
				-51
			],
			[
				-2,
				-8
			],
			[
				-313,
				-147
			]
		],
		[
			[
				14551,
				10796
			],
			[
				134,
				-144
			],
			[
				-38,
				-80
			],
			[
				-69,
				-147
			],
			[
				-34,
				-71
			],
			[
				10,
				-83
			]
		],
		[
			[
				14554,
				10271
			],
			[
				-13,
				-21
			],
			[
				-65,
				-111
			],
			[
				-125,
				-16
			],
			[
				-2,
				0
			],
			[
				-1,
				-7
			],
			[
				-39,
				-283
			],
			[
				-4,
				-31
			],
			[
				-15,
				-113
			],
			[
				-31,
				-221
			],
			[
				100,
				-62
			],
			[
				-88,
				-34
			],
			[
				-74,
				17
			],
			[
				-27,
				6
			],
			[
				-40,
				10
			],
			[
				-175,
				-115
			],
			[
				-36,
				-23
			]
		],
		[
			[
				13919,
				9267
			],
			[
				156,
				-327
			],
			[
				148,
				-14
			],
			[
				224,
				-301
			],
			[
				20,
				-48
			],
			[
				-97,
				-31
			],
			[
				-46,
				-15
			],
			[
				-8,
				1
			],
			[
				-101,
				5
			],
			[
				-97,
				-62
			],
			[
				-151,
				24
			],
			[
				-34,
				-36
			],
			[
				110,
				-80
			],
			[
				5,
				-56
			],
			[
				-157,
				-140
			],
			[
				-8,
				-137
			],
			[
				-1,
				-19
			],
			[
				-64,
				-59
			]
		],
		[
			[
				13818,
				7972
			],
			[
				-179,
				-15
			],
			[
				49,
				286
			],
			[
				-125,
				235
			],
			[
				-57,
				29
			],
			[
				-48,
				-53
			],
			[
				-73,
				-81
			],
			[
				-4,
				1
			],
			[
				-26,
				5
			],
			[
				-80,
				17
			],
			[
				-232,
				391
			],
			[
				-84,
				-51
			],
			[
				-76,
				41
			],
			[
				-93,
				-40
			],
			[
				-55,
				-23
			],
			[
				-144,
				157
			]
		],
		[
			[
				14554,
				10271
			],
			[
				242,
				34
			],
			[
				65,
				-93
			],
			[
				33,
				-49
			],
			[
				7,
				-107
			],
			[
				104,
				-83
			],
			[
				8,
				-73
			],
			[
				2,
				-19
			]
		],
		[
			[
				15015,
				9881
			],
			[
				107,
				-116
			],
			[
				129,
				10
			],
			[
				26,
				2
			],
			[
				200,
				16
			]
		],
		[
			[
				15477,
				9793
			],
			[
				-26,
				-248
			],
			[
				41,
				-172
			],
			[
				-83,
				-173
			],
			[
				141,
				-209
			],
			[
				176,
				-261
			]
		],
		[
			[
				15726,
				8730
			],
			[
				41,
				-187
			],
			[
				9,
				-42
			],
			[
				2,
				-11
			],
			[
				0,
				0
			],
			[
				-59,
				-33
			],
			[
				-3,
				-2
			],
			[
				54,
				-102
			]
		],
		[
			[
				15770,
				8353
			],
			[
				64,
				-160
			],
			[
				-35,
				-21
			],
			[
				-27,
				-17
			],
			[
				-46,
				-28
			],
			[
				-33,
				-20
			],
			[
				-75,
				-46
			],
			[
				-13,
				-192
			],
			[
				108,
				-206
			],
			[
				-22,
				-139
			],
			[
				-42,
				-277
			],
			[
				0,
				0
			]
		],
		[
			[
				15646,
				7243
			],
			[
				0,
				0
			],
			[
				-37,
				34
			],
			[
				-27,
				-43
			],
			[
				1,
				-1
			]
		],
		[
			[
				14232,
				5407
			],
			[
				0,
				0
			],
			[
				-47,
				51
			],
			[
				-62,
				68
			],
			[
				-72,
				-90
			],
			[
				-91,
				161
			],
			[
				-236,
				53
			],
			[
				34,
				66
			],
			[
				-47,
				9
			],
			[
				-3,
				105
			]
		],
		[
			[
				13708,
				5830
			],
			[
				-25,
				221
			],
			[
				-44,
				99
			],
			[
				-23,
				55
			]
		],
		[
			[
				13616,
				6205
			],
			[
				-211,
				143
			],
			[
				-54,
				36
			],
			[
				-115,
				145
			],
			[
				-120,
				413
			],
			[
				-166,
				-49
			],
			[
				-318,
				14
			]
		],
		[
			[
				15491,
				7189
			],
			[
				0,
				0
			],
			[
				-3,
				-64
			],
			[
				0,
				0
			]
		],
		[
			[
				16539,
				8250
			],
			[
				31,
				-1
			],
			[
				6,
				-1
			],
			[
				0,
				134
			],
			[
				0,
				26
			],
			[
				21,
				-41
			],
			[
				11,
				-21
			],
			[
				25,
				8
			],
			[
				54,
				19
			]
		],
		[
			[
				16687,
				8373
			],
			[
				114,
				58
			],
			[
				22,
				11
			],
			[
				34,
				-13
			],
			[
				9,
				-20
			],
			[
				39,
				-78
			],
			[
				31,
				-65
			],
			[
				6,
				-4
			],
			[
				45,
				-29
			],
			[
				122,
				-80
			],
			[
				26,
				-18
			],
			[
				0,
				0
			]
		],
		[
			[
				15477,
				9793
			],
			[
				-27,
				147
			],
			[
				-32,
				168
			],
			[
				171,
				67
			],
			[
				114,
				-67
			],
			[
				204,
				-19
			],
			[
				73,
				87
			],
			[
				160,
				-9
			],
			[
				1,
				0
			],
			[
				41,
				-58
			],
			[
				22,
				15
			],
			[
				123,
				84
			]
		],
		[
			[
				16327,
				10208
			],
			[
				8,
				-126
			]
		],
		[
			[
				16335,
				10082
			],
			[
				-8,
				-65
			],
			[
				-52,
				-430
			]
		],
		[
			[
				16275,
				9587
			],
			[
				-81,
				-363
			],
			[
				-5,
				-21
			]
		],
		[
			[
				16189,
				9203
			],
			[
				0,
				-181
			],
			[
				10,
				-78
			],
			[
				-75,
				-138
			],
			[
				117,
				-269
			],
			[
				98,
				-56
			],
			[
				29,
				-91
			],
			[
				12,
				-49
			],
			[
				11,
				-4
			],
			[
				90,
				-24
			],
			[
				18,
				-5
			],
			[
				13,
				-3
			],
			[
				27,
				-55
			]
		],
		[
			[
				16327,
				10208
			],
			[
				-58,
				148
			],
			[
				-47,
				120
			],
			[
				-331,
				478
			]
		],
		[
			[
				15891,
				10954
			],
			[
				80,
				30
			],
			[
				-27,
				115
			],
			[
				112,
				76
			],
			[
				24,
				16
			],
			[
				-10,
				104
			],
			[
				24,
				73
			],
			[
				5,
				14
			],
			[
				42,
				125
			]
		],
		[
			[
				16141,
				11507
			],
			[
				21,
				3
			]
		],
		[
			[
				16162,
				11510
			],
			[
				97,
				-162
			]
		],
		[
			[
				16259,
				11348
			],
			[
				315,
				-445
			]
		],
		[
			[
				16574,
				10903
			],
			[
				87,
				-36
			],
			[
				15,
				-31
			],
			[
				11,
				-22
			],
			[
				51,
				-107
			],
			[
				126,
				-80
			],
			[
				11,
				4
			],
			[
				37,
				12
			],
			[
				10,
				3
			],
			[
				0,
				0
			]
		],
		[
			[
				17200,
				13506
			],
			[
				-51,
				59
			],
			[
				-1,
				1
			],
			[
				-31,
				-12
			],
			[
				-47,
				-18
			],
			[
				-41,
				91
			]
		],
		[
			[
				17029,
				13627
			],
			[
				-322,
				349
			],
			[
				-226,
				88
			]
		],
		[
			[
				16481,
				14064
			],
			[
				-78,
				-63
			],
			[
				-110,
				43
			],
			[
				-7,
				3
			],
			[
				-39,
				15
			],
			[
				-44,
				17
			],
			[
				-34,
				17
			],
			[
				-33,
				114
			],
			[
				-93,
				-4
			],
			[
				-33,
				134
			],
			[
				-9,
				178
			],
			[
				34,
				52
			],
			[
				-46,
				180
			],
			[
				44,
				135
			],
			[
				-32,
				14
			],
			[
				-128,
				60
			],
			[
				-24,
				-13
			],
			[
				-70,
				-38
			]
		],
		[
			[
				15779,
				14908
			],
			[
				-1,
				9
			],
			[
				-23,
				103
			],
			[
				-16,
				14
			],
			[
				-36,
				29
			],
			[
				-50,
				33
			],
			[
				-28,
				31
			],
			[
				-10,
				12
			],
			[
				-37,
				33
			],
			[
				-57,
				-7
			],
			[
				0,
				0
			],
			[
				-26,
				16
			],
			[
				-45,
				56
			],
			[
				-84,
				270
			],
			[
				68,
				147
			],
			[
				-95,
				87
			],
			[
				-21,
				19
			],
			[
				-49,
				45
			],
			[
				-4,
				82
			],
			[
				-3,
				44
			]
		],
		[
			[
				15636,
				16903
			],
			[
				1,
				77
			],
			[
				-11,
				47
			],
			[
				-16,
				159
			],
			[
				-34,
				96
			],
			[
				15,
				45
			],
			[
				-9,
				118
			],
			[
				-2,
				30
			],
			[
				0,
				1
			],
			[
				-1,
				33
			],
			[
				-4,
				73
			],
			[
				57,
				105
			],
			[
				13,
				23
			],
			[
				31,
				58
			],
			[
				28,
				-107
			],
			[
				143,
				153
			],
			[
				150,
				136
			],
			[
				5,
				5
			],
			[
				-121,
				109
			],
			[
				-6,
				20
			],
			[
				-11,
				36
			],
			[
				170,
				19
			],
			[
				161,
				-29
			],
			[
				58,
				-11
			]
		],
		[
			[
				16523,
				17442
			],
			[
				95,
				-91
			],
			[
				114,
				-830
			]
		],
		[
			[
				16732,
				16521
			],
			[
				15,
				-168
			],
			[
				1,
				-3
			],
			[
				0,
				0
			],
			[
				362,
				-762
			],
			[
				-32,
				-82
			],
			[
				101,
				-162
			],
			[
				17,
				-27
			],
			[
				27,
				-44
			],
			[
				35,
				28
			],
			[
				23,
				18
			],
			[
				0,
				-1
			],
			[
				44,
				-41
			],
			[
				97,
				-90
			],
			[
				25,
				-22
			],
			[
				54,
				-50
			],
			[
				31,
				-30
			],
			[
				151,
				-112
			],
			[
				15,
				-12
			],
			[
				139,
				-38
			]
		],
		[
			[
				17837,
				14923
			],
			[
				67,
				-115
			],
			[
				38,
				-65
			],
			[
				16,
				-51
			]
		],
		[
			[
				17958,
				14692
			],
			[
				-85,
				-101
			],
			[
				74,
				-269
			],
			[
				-50,
				-7
			],
			[
				-276,
				-401
			]
		],
		[
			[
				17621,
				13914
			],
			[
				-34,
				101
			]
		],
		[
			[
				17587,
				14015
			],
			[
				-127,
				-14
			],
			[
				-3,
				-113
			],
			[
				-67,
				-71
			],
			[
				27,
				-65
			],
			[
				-22,
				-75
			],
			[
				-92,
				-20
			],
			[
				-74,
				-109
			],
			[
				-29,
				-42
			]
		],
		[
			[
				17029,
				13627
			],
			[
				-64,
				-12
			],
			[
				-37,
				-6
			],
			[
				-125,
				-24
			],
			[
				-92,
				-109
			],
			[
				-11,
				-57
			],
			[
				-127,
				-13
			],
			[
				-39,
				-3
			],
			[
				-79,
				-8
			],
			[
				70,
				-283
			],
			[
				-122,
				-78
			],
			[
				-21,
				-55
			],
			[
				-45,
				-122
			]
		],
		[
			[
				16337,
				12857
			],
			[
				-62,
				-14
			],
			[
				-39,
				-9
			],
			[
				-30,
				89
			],
			[
				-112,
				-16
			],
			[
				-173,
				55
			],
			[
				-20,
				6
			],
			[
				-6,
				6
			],
			[
				-18,
				15
			],
			[
				-31,
				-36
			],
			[
				-25,
				-30
			],
			[
				8,
				-63
			],
			[
				9,
				-74
			],
			[
				-4,
				3
			],
			[
				-5,
				4
			],
			[
				-73,
				58
			],
			[
				-17,
				36
			],
			[
				-91,
				-7
			],
			[
				-19,
				-1
			],
			[
				-48,
				87
			],
			[
				-139,
				83
			],
			[
				-85,
				50
			]
		],
		[
			[
				15357,
				13099
			],
			[
				-113,
				57
			]
		],
		[
			[
				15244,
				13156
			],
			[
				-50,
				100
			],
			[
				-79,
				20
			],
			[
				28,
				43
			],
			[
				-120,
				66
			],
			[
				-32,
				18
			],
			[
				-75,
				186
			],
			[
				-117,
				-8
			],
			[
				-129,
				45
			],
			[
				-9,
				96
			],
			[
				-180,
				42
			]
		],
		[
			[
				14481,
				13764
			],
			[
				-153,
				309
			],
			[
				-11,
				22
			],
			[
				-64,
				94
			],
			[
				-102,
				173
			],
			[
				-185,
				42
			],
			[
				-178,
				430
			]
		],
		[
			[
				13788,
				14834
			],
			[
				-132,
				402
			],
			[
				-14,
				487
			],
			[
				-94,
				155
			],
			[
				5,
				64
			],
			[
				23,
				282
			],
			[
				4,
				50
			]
		],
		[
			[
				15244,
				13156
			],
			[
				-2,
				-56
			],
			[
				-93,
				20
			],
			[
				78,
				-114
			],
			[
				40,
				-195
			],
			[
				4,
				-110
			],
			[
				-2,
				-76
			],
			[
				31,
				-211
			],
			[
				8,
				-371
			],
			[
				-185,
				-60
			],
			[
				-45,
				-15
			]
		],
		[
			[
				15078,
				11968
			],
			[
				62,
				-263
			],
			[
				3,
				-4
			],
			[
				119,
				-158
			],
			[
				7,
				-5
			],
			[
				109,
				-69
			],
			[
				1,
				0
			],
			[
				32,
				-12
			],
			[
				70,
				-26
			],
			[
				141,
				-69
			],
			[
				113,
				-222
			],
			[
				156,
				-186
			]
		],
		[
			[
				18711,
				37206
			],
			[
				14,
				-39
			],
			[
				13,
				-39
			],
			[
				5,
				-319
			],
			[
				-52,
				-170
			],
			[
				49,
				-3
			],
			[
				-26,
				-12
			],
			[
				9,
				-60
			],
			[
				331,
				-101
			]
		],
		[
			[
				19054,
				36463
			],
			[
				236,
				77
			],
			[
				112,
				-1
			],
			[
				180,
				-2
			],
			[
				149,
				52
			],
			[
				373,
				-68
			],
			[
				48,
				-9
			],
			[
				96,
				-18
			],
			[
				59,
				-11
			],
			[
				224,
				-41
			]
		],
		[
			[
				20531,
				36442
			],
			[
				289,
				-424
			],
			[
				243,
				-567
			]
		],
		[
			[
				21063,
				35451
			],
			[
				3,
				-246
			],
			[
				-219,
				-62
			],
			[
				-219,
				-163
			],
			[
				-1,
				-2
			],
			[
				-156,
				15
			],
			[
				-20,
				-25
			],
			[
				-8,
				-11
			],
			[
				-32,
				-41
			],
			[
				-11,
				6
			],
			[
				-79,
				42
			],
			[
				-41,
				5
			],
			[
				-1,
				-6
			],
			[
				-36,
				-164
			],
			[
				-11,
				-17
			],
			[
				-87,
				-123
			],
			[
				-52,
				-76
			],
			[
				-3,
				-7
			],
			[
				-51,
				-151
			],
			[
				-59,
				-178
			]
		],
		[
			[
				19980,
				34247
			],
			[
				-99,
				64
			],
			[
				-152,
				-5
			],
			[
				-27,
				73
			],
			[
				-36,
				101
			],
			[
				-63,
				176
			],
			[
				-161,
				-43
			],
			[
				-32,
				4
			],
			[
				-127,
				14
			],
			[
				-24,
				3
			],
			[
				-18,
				2
			],
			[
				-79,
				9
			],
			[
				-6,
				0
			]
		],
		[
			[
				19156,
				34645
			],
			[
				-20,
				-81
			],
			[
				-11,
				-62
			],
			[
				-45,
				-237
			],
			[
				-20,
				-101
			],
			[
				-4,
				-22
			],
			[
				-6,
				-31
			],
			[
				-11,
				-62
			],
			[
				-14,
				-11
			],
			[
				-25,
				-19
			],
			[
				-8,
				-6
			],
			[
				-4,
				-136
			],
			[
				-1,
				-18
			],
			[
				-2,
				-46
			],
			[
				78,
				-151
			],
			[
				-30,
				-202
			],
			[
				0,
				0
			],
			[
				-151,
				-248
			],
			[
				112,
				-431
			],
			[
				-52,
				-17
			],
			[
				-59,
				-19
			],
			[
				-53,
				-17
			],
			[
				-17,
				-41
			],
			[
				-233,
				-545
			],
			[
				-25,
				-58
			],
			[
				-20,
				-48
			]
		],
		[
			[
				18535,
				32036
			],
			[
				-157,
				-229
			]
		],
		[
			[
				18378,
				31807
			],
			[
				-67,
				32
			],
			[
				-19,
				108
			],
			[
				-117,
				61
			],
			[
				-71,
				11
			],
			[
				-170,
				-87
			],
			[
				-767,
				204
			],
			[
				-41,
				11
			]
		],
		[
			[
				16110,
				33981
			],
			[
				32,
				160
			],
			[
				11,
				57
			],
			[
				31,
				157
			]
		],
		[
			[
				16184,
				34355
			],
			[
				-30,
				146
			],
			[
				-29,
				139
			],
			[
				-104,
				150
			],
			[
				-81,
				73
			],
			[
				-19,
				-89
			],
			[
				-52,
				19
			],
			[
				-63,
				297
			],
			[
				-16,
				75
			],
			[
				-10,
				48
			]
		],
		[
			[
				15780,
				35213
			],
			[
				10,
				18
			],
			[
				4,
				6
			],
			[
				91,
				152
			],
			[
				17,
				28
			]
		],
		[
			[
				15902,
				35417
			],
			[
				4,
				247
			],
			[
				-1,
				35
			],
			[
				-2,
				35
			],
			[
				-74,
				47
			],
			[
				-5,
				183
			],
			[
				11,
				81
			],
			[
				75,
				193
			],
			[
				-68,
				-14
			],
			[
				32,
				81
			],
			[
				-40,
				30
			],
			[
				-7,
				73
			],
			[
				-2,
				30
			]
		],
		[
			[
				16337,
				12857
			],
			[
				18,
				-22
			]
		],
		[
			[
				16355,
				12835
			],
			[
				0,
				-1
			],
			[
				90,
				-300
			]
		],
		[
			[
				16445,
				12534
			],
			[
				125,
				-82
			],
			[
				87,
				-101
			],
			[
				-7,
				-77
			],
			[
				58,
				-82
			],
			[
				58,
				3
			],
			[
				57,
				-74
			],
			[
				4,
				-5
			],
			[
				27,
				-35
			],
			[
				9,
				-12
			],
			[
				9,
				-12
			],
			[
				0,
				0
			]
		],
		[
			[
				22943,
				29666
			],
			[
				-45,
				0
			],
			[
				-92,
				1
			],
			[
				-128,
				-125
			],
			[
				-107,
				-19
			],
			[
				-241,
				259
			],
			[
				-2,
				3
			],
			[
				-18,
				5
			],
			[
				-121,
				34
			],
			[
				-47,
				12
			],
			[
				-19,
				6
			],
			[
				-1,
				0
			],
			[
				-170,
				47
			],
			[
				-82,
				22
			],
			[
				-186,
				51
			]
		],
		[
			[
				21684,
				29962
			],
			[
				-147,
				38
			],
			[
				-59,
				16
			],
			[
				-43,
				-69
			],
			[
				-23,
				-36
			],
			[
				-83,
				-134
			],
			[
				-26,
				6
			],
			[
				-65,
				15
			],
			[
				-9,
				35
			],
			[
				-43,
				181
			],
			[
				-210,
				-43
			],
			[
				-89,
				-19
			],
			[
				-49,
				-10
			],
			[
				-58,
				122
			],
			[
				-128,
				269
			],
			[
				-43,
				91
			],
			[
				-100,
				167
			],
			[
				-49,
				83
			],
			[
				-181,
				99
			],
			[
				-96,
				142
			],
			[
				-8,
				5
			],
			[
				-72,
				52
			],
			[
				-38,
				26
			],
			[
				-41,
				30
			],
			[
				-2,
				2
			],
			[
				-95,
				8
			],
			[
				-16,
				75
			],
			[
				-26,
				125
			],
			[
				-10,
				45
			],
			[
				-123,
				53
			],
			[
				1,
				84
			],
			[
				0,
				37
			],
			[
				-96,
				149
			],
			[
				-13,
				214
			],
			[
				-14,
				3
			],
			[
				-73,
				14
			],
			[
				-19,
				74
			],
			[
				-2,
				6
			]
		],
		[
			[
				19536,
				31917
			],
			[
				-15,
				3
			],
			[
				-228,
				32
			],
			[
				-326,
				188
			],
			[
				-22,
				13
			],
			[
				0,
				0
			],
			[
				-232,
				-23
			],
			[
				-51,
				-27
			],
			[
				-97,
				-51
			],
			[
				-30,
				-16
			]
		],
		[
			[
				21063,
				35451
			],
			[
				238,
				26
			],
			[
				199,
				21
			],
			[
				467,
				50
			],
			[
				104,
				-23
			],
			[
				264,
				-58
			]
		],
		[
			[
				18088,
				13194
			],
			[
				0,
				0
			],
			[
				-3,
				4
			],
			[
				-12,
				17
			],
			[
				-2,
				2
			],
			[
				-12,
				17
			],
			[
				-26,
				34
			],
			[
				-1,
				1
			],
			[
				0,
				1
			],
			[
				2,
				9
			],
			[
				8,
				39
			],
			[
				18,
				94
			],
			[
				2,
				11
			],
			[
				-2,
				6
			],
			[
				-10,
				31
			],
			[
				-35,
				107
			],
			[
				-18,
				54
			],
			[
				-45,
				30
			],
			[
				-51,
				33
			],
			[
				-79,
				90
			],
			[
				-114,
				17
			],
			[
				-87,
				123
			]
		],
		[
			[
				17958,
				14692
			],
			[
				12,
				1
			],
			[
				227,
				12
			]
		],
		[
			[
				46424,
				79039
			],
			[
				-4,
				-56
			],
			[
				-12,
				-175
			],
			[
				-241,
				-271
			],
			[
				-36,
				-41
			],
			[
				-202,
				-229
			],
			[
				6,
				-89
			],
			[
				11,
				-157
			],
			[
				2,
				-36
			],
			[
				3,
				-46
			],
			[
				10,
				-140
			]
		],
		[
			[
				45961,
				77799
			],
			[
				-54,
				-113
			],
			[
				-9,
				-19
			],
			[
				-51,
				-28
			],
			[
				-262,
				-142
			],
			[
				-29,
				-35
			],
			[
				-40,
				-51
			],
			[
				-31,
				-39
			],
			[
				36,
				-247
			],
			[
				-306,
				-135
			]
		],
		[
			[
				45215,
				76990
			],
			[
				121,
				-157
			],
			[
				56,
				-71
			],
			[
				34,
				-46
			],
			[
				88,
				-20
			],
			[
				77,
				-18
			],
			[
				82,
				-19
			],
			[
				24,
				-6
			],
			[
				61,
				-14
			],
			[
				6,
				-4
			],
			[
				88,
				-50
			],
			[
				200,
				-115
			],
			[
				11,
				-82
			],
			[
				17,
				-116
			],
			[
				13,
				-88
			],
			[
				11,
				-80
			],
			[
				17,
				-119
			],
			[
				20,
				-140
			],
			[
				13,
				-93
			],
			[
				100,
				-52
			],
			[
				14,
				-7
			],
			[
				-52,
				-80
			],
			[
				-26,
				-41
			]
		],
		[
			[
				46190,
				75572
			],
			[
				-96,
				6
			],
			[
				-14,
				-6
			],
			[
				-306,
				-136
			],
			[
				-125,
				-142
			],
			[
				-125,
				78
			],
			[
				-93,
				57
			],
			[
				-100,
				-21
			],
			[
				-92,
				-20
			],
			[
				-137,
				-30
			],
			[
				-80,
				1
			],
			[
				-180,
				3
			],
			[
				-48,
				0
			],
			[
				-176,
				3
			],
			[
				-3,
				-2
			],
			[
				-43,
				-18
			],
			[
				-105,
				-46
			],
			[
				-56,
				145
			],
			[
				-105,
				-5
			],
			[
				1,
				-5
			],
			[
				31,
				-130
			],
			[
				0,
				-1
			],
			[
				-1,
				0
			],
			[
				-72,
				48
			],
			[
				-43,
				-40
			],
			[
				-67,
				47
			],
			[
				-146,
				102
			],
			[
				-138,
				97
			],
			[
				-159,
				111
			],
			[
				-6,
				9
			],
			[
				-84,
				118
			],
			[
				-240,
				111
			],
			[
				2,
				95
			],
			[
				1,
				22
			],
			[
				0,
				2
			],
			[
				-3,
				3
			],
			[
				-52,
				35
			],
			[
				-48,
				-42
			],
			[
				-213,
				176
			],
			[
				-21,
				18
			],
			[
				-299,
				248
			],
			[
				-79,
				65
			],
			[
				-87,
				72
			],
			[
				-72,
				122
			],
			[
				-24,
				42
			],
			[
				-52,
				88
			],
			[
				-3,
				5
			],
			[
				-18,
				18
			]
		],
		[
			[
				17200,
				13506
			],
			[
				79,
				-238
			],
			[
				5,
				-76
			],
			[
				-44,
				-36
			]
		],
		[
			[
				17240,
				13156
			],
			[
				0,
				-18
			],
			[
				-1,
				-65
			],
			[
				-19,
				-43
			],
			[
				-10,
				-8
			],
			[
				-2,
				-59
			],
			[
				-65,
				-52
			],
			[
				6,
				-63
			],
			[
				-3,
				-40
			],
			[
				15,
				-46
			],
			[
				18,
				-35
			],
			[
				17,
				-23
			],
			[
				7,
				-50
			],
			[
				8,
				-65
			],
			[
				1,
				-11
			],
			[
				1,
				-16
			],
			[
				2,
				-17
			],
			[
				5,
				-84
			],
			[
				-41,
				-67
			]
		],
		[
			[
				17179,
				12394
			],
			[
				79,
				-32
			],
			[
				144,
				-57
			],
			[
				18,
				-48
			],
			[
				7,
				-17
			],
			[
				33,
				18
			],
			[
				12,
				6
			],
			[
				145,
				79
			],
			[
				27,
				14
			],
			[
				8,
				0
			],
			[
				0,
				0
			]
		],
		[
			[
				62314,
				87019
			],
			[
				-104,
				-183
			],
			[
				-912,
				-749
			]
		],
		[
			[
				61298,
				86087
			],
			[
				-215,
				-336
			],
			[
				-87,
				-135
			],
			[
				0,
				-1
			],
			[
				-5,
				-5
			],
			[
				-38,
				-40
			],
			[
				-158,
				-163
			],
			[
				-110,
				-114
			],
			[
				-257,
				-268
			],
			[
				-24,
				-77
			],
			[
				-18,
				-59
			],
			[
				12,
				-12
			],
			[
				122,
				-123
			],
			[
				44,
				-45
			],
			[
				-89,
				-109
			],
			[
				-202,
				-251
			],
			[
				-434,
				-178
			],
			[
				-241,
				-381
			],
			[
				-83,
				-134
			],
			[
				-30,
				-47
			],
			[
				-87,
				-139
			],
			[
				-374,
				-602
			],
			[
				-25,
				-41
			],
			[
				-82,
				-133
			],
			[
				-31,
				-50
			],
			[
				-101,
				-17
			],
			[
				-394,
				-65
			],
			[
				-156,
				-27
			]
		],
		[
			[
				58235,
				82535
			],
			[
				-24,
				-99
			],
			[
				-7,
				-29
			],
			[
				-17,
				-70
			],
			[
				-12,
				-50
			],
			[
				-17,
				-71
			],
			[
				-73,
				-307
			],
			[
				83,
				-26
			],
			[
				403,
				-124
			],
			[
				129,
				39
			],
			[
				59,
				-235
			],
			[
				26,
				-102
			],
			[
				48,
				-191
			],
			[
				33,
				-131
			],
			[
				3,
				-12
			],
			[
				141,
				-566
			]
		],
		[
			[
				59010,
				80561
			],
			[
				-60,
				-628
			],
			[
				-13,
				-137
			],
			[
				50,
				-173
			]
		],
		[
			[
				58987,
				79623
			],
			[
				-396,
				56
			],
			[
				-13,
				2
			],
			[
				-653,
				91
			],
			[
				-71,
				10
			],
			[
				-318,
				44
			],
			[
				-727,
				98
			],
			[
				-206,
				-11
			],
			[
				-7,
				0
			],
			[
				-52,
				-3
			],
			[
				-62,
				-4
			],
			[
				-166,
				-8
			],
			[
				-163,
				-51
			],
			[
				-60,
				-19
			],
			[
				-56,
				-18
			],
			[
				-219,
				-68
			],
			[
				-159,
				11
			],
			[
				-205,
				15
			],
			[
				-142,
				10
			],
			[
				-287,
				21
			],
			[
				-185,
				-187
			]
		],
		[
			[
				54840,
				79612
			],
			[
				-241,
				-148
			],
			[
				-24,
				16
			],
			[
				-532,
				335
			],
			[
				-99,
				170
			],
			[
				52,
				176
			],
			[
				-57,
				148
			],
			[
				-255,
				144
			],
			[
				287,
				377
			],
			[
				-45,
				100
			],
			[
				-164,
				16
			],
			[
				-87,
				70
			],
			[
				74,
				59
			],
			[
				18,
				14
			],
			[
				144,
				115
			],
			[
				-89,
				121
			],
			[
				-285,
				39
			],
			[
				-313,
				124
			],
			[
				-22,
				8
			],
			[
				-29,
				12
			],
			[
				-117,
				104
			],
			[
				13,
				103
			],
			[
				-85,
				110
			],
			[
				-100,
				129
			],
			[
				1,
				53
			],
			[
				2,
				50
			],
			[
				77,
				72
			],
			[
				14,
				12
			]
		],
		[
			[
				52978,
				82141
			],
			[
				-14,
				71
			],
			[
				-2,
				7
			],
			[
				-20,
				99
			],
			[
				-106,
				-1
			],
			[
				-85,
				184
			],
			[
				-23,
				49
			],
			[
				-82,
				176
			],
			[
				-5,
				11
			],
			[
				70,
				86
			],
			[
				-1,
				12
			],
			[
				0,
				0
			],
			[
				-2,
				16
			],
			[
				-20,
				148
			],
			[
				-6,
				40
			],
			[
				-162,
				-25
			],
			[
				-178,
				-26
			],
			[
				-125,
				-94
			],
			[
				-11,
				5
			],
			[
				-144,
				57
			],
			[
				-1,
				-110
			],
			[
				-33,
				-21
			],
			[
				-98,
				-62
			],
			[
				7,
				-45
			],
			[
				14,
				-82
			],
			[
				-61,
				-31
			],
			[
				-58,
				-29
			],
			[
				-24,
				-12
			],
			[
				-121,
				115
			],
			[
				-106,
				19
			],
			[
				-98,
				18
			],
			[
				-1,
				120
			],
			[
				-104,
				64
			],
			[
				-133,
				82
			],
			[
				-46,
				28
			],
			[
				-56,
				84
			],
			[
				0,
				1
			],
			[
				30,
				36
			],
			[
				30,
				37
			],
			[
				-35,
				8
			],
			[
				-75,
				16
			],
			[
				-70,
				15
			],
			[
				-82,
				-54
			],
			[
				-4,
				-2
			],
			[
				-41,
				-27
			],
			[
				-107,
				20
			],
			[
				-18,
				20
			],
			[
				-18,
				22
			],
			[
				-43,
				-17
			],
			[
				-74,
				-28
			],
			[
				-47,
				-18
			],
			[
				-6,
				32
			],
			[
				-1,
				5
			],
			[
				-4,
				20
			],
			[
				-3,
				13
			],
			[
				-147,
				31
			],
			[
				-147,
				30
			],
			[
				-198,
				114
			],
			[
				-172,
				29
			]
		],
		[
			[
				63054,
				86707
			],
			[
				0,
				0
			],
			[
				-38,
				29
			],
			[
				-127,
				97
			],
			[
				-575,
				186
			]
		],
		[
			[
				64716,
				86346
			],
			[
				-293,
				42
			]
		],
		[
			[
				66436,
				88474
			],
			[
				0,
				0
			],
			[
				-75,
				-176
			],
			[
				-95,
				-221
			],
			[
				-125,
				-293
			],
			[
				-447,
				-331
			],
			[
				-439,
				-646
			],
			[
				-187,
				-124
			],
			[
				7,
				-190
			],
			[
				-359,
				-147
			]
		],
		[
			[
				46474,
				75381
			],
			[
				-262,
				176
			],
			[
				-22,
				15
			]
		],
		[
			[
				54840,
				79612
			],
			[
				179,
				-135
			],
			[
				-143,
				-176
			],
			[
				-174,
				-83
			],
			[
				-36,
				-17
			],
			[
				-31,
				-117
			],
			[
				-16,
				-60
			],
			[
				-29,
				-113
			],
			[
				-26,
				-97
			],
			[
				-104,
				-46
			],
			[
				-17,
				-7
			],
			[
				9,
				-38
			],
			[
				48,
				-191
			],
			[
				-75,
				20
			],
			[
				-191,
				51
			],
			[
				-372,
				-38
			],
			[
				-81,
				-37
			],
			[
				-229,
				-108
			],
			[
				-82,
				-38
			],
			[
				-305,
				-29
			]
		],
		[
			[
				53165,
				78353
			],
			[
				-18,
				-80
			],
			[
				86,
				-121
			],
			[
				-44,
				-160
			],
			[
				115,
				-225
			],
			[
				7,
				-192
			],
			[
				114,
				-35
			],
			[
				444,
				-759
			],
			[
				51,
				-89
			],
			[
				-41,
				-413
			],
			[
				23,
				-65
			],
			[
				8,
				-23
			],
			[
				7,
				-22
			],
			[
				-103,
				-125
			],
			[
				18,
				-116
			],
			[
				-66,
				-110
			],
			[
				-482,
				-206
			],
			[
				-66,
				-3
			],
			[
				-83,
				-4
			],
			[
				-813,
				-37
			],
			[
				-49,
				-2
			]
		],
		[
			[
				71451,
				81066
			],
			[
				31,
				120
			],
			[
				12,
				48
			],
			[
				36,
				140
			],
			[
				19,
				71
			],
			[
				-69,
				215
			],
			[
				-79,
				250
			],
			[
				-72,
				573
			],
			[
				78,
				621
			],
			[
				8,
				66
			],
			[
				5,
				35
			],
			[
				108,
				166
			],
			[
				53,
				82
			],
			[
				44,
				67
			],
			[
				26,
				40
			],
			[
				60,
				92
			],
			[
				128,
				194
			],
			[
				230,
				349
			],
			[
				539,
				21
			],
			[
				232,
				-44
			],
			[
				213,
				265
			],
			[
				134,
				33
			],
			[
				182,
				176
			]
		],
		[
			[
				73369,
				84646
			],
			[
				214,
				12
			],
			[
				159,
				288
			],
			[
				365,
				185
			]
		],
		[
			[
				74107,
				85131
			],
			[
				-308,
				5
			],
			[
				-197,
				127
			],
			[
				-141,
				90
			],
			[
				-654,
				-34
			],
			[
				-223,
				377
			],
			[
				1,
				174
			],
			[
				-347,
				281
			],
			[
				-5,
				5
			],
			[
				-44,
				172
			],
			[
				-246,
				199
			]
		],
		[
			[
				71268,
				86774
			],
			[
				0,
				0
			],
			[
				-137,
				-375
			],
			[
				-270,
				-197
			],
			[
				-206,
				-151
			],
			[
				-380,
				-279
			],
			[
				-100,
				-73
			],
			[
				-200,
				-47
			],
			[
				-226,
				-53
			],
			[
				-313,
				-177
			],
			[
				-222,
				-229
			],
			[
				-247,
				-376
			],
			[
				-26,
				-39
			],
			[
				-51,
				-79
			],
			[
				-204,
				-100
			]
		],
		[
			[
				68686,
				84599
			],
			[
				-54,
				365
			],
			[
				-10,
				69
			],
			[
				-20,
				133
			],
			[
				-27,
				178
			],
			[
				-51,
				140
			],
			[
				-5,
				13
			],
			[
				-58,
				157
			],
			[
				-5,
				13
			],
			[
				3,
				9
			],
			[
				1,
				6
			],
			[
				42,
				157
			],
			[
				87,
				321
			],
			[
				456,
				565
			],
			[
				542,
				535
			],
			[
				34,
				238
			],
			[
				-59,
				158
			],
			[
				-117,
				311
			],
			[
				-6,
				357
			],
			[
				-5,
				273
			],
			[
				-161,
				383
			],
			[
				206,
				291
			],
			[
				-133,
				296
			],
			[
				27,
				26
			]
		],
		[
			[
				6349,
				20156
			],
			[
				4,
				-104
			],
			[
				2,
				-64
			],
			[
				24,
				15
			],
			[
				42,
				27
			],
			[
				80,
				51
			],
			[
				79,
				-170
			],
			[
				-93,
				-108
			],
			[
				-124,
				-42
			],
			[
				-15,
				-38
			],
			[
				-9,
				-22
			],
			[
				-9,
				-22
			],
			[
				-28,
				-38
			],
			[
				-41,
				-56
			],
			[
				21,
				-31
			],
			[
				5,
				-7
			],
			[
				7,
				-11
			],
			[
				8,
				-13
			],
			[
				32,
				-47
			],
			[
				118,
				-21
			],
			[
				126,
				38
			],
			[
				13,
				4
			],
			[
				101,
				129
			],
			[
				88,
				-36
			],
			[
				168,
				-67
			],
			[
				-42,
				-97
			],
			[
				-165,
				-7
			],
			[
				28,
				-47
			],
			[
				16,
				-27
			],
			[
				-49,
				-225
			],
			[
				-20,
				-93
			],
			[
				23,
				7
			],
			[
				60,
				17
			],
			[
				68,
				20
			],
			[
				141,
				-29
			],
			[
				50,
				-11
			],
			[
				2,
				-191
			]
		],
		[
			[
				5005,
				19792
			],
			[
				214,
				285
			],
			[
				36,
				47
			],
			[
				51,
				-14
			],
			[
				106,
				-31
			],
			[
				13,
				17
			],
			[
				107,
				149
			],
			[
				64,
				-18
			],
			[
				39,
				-152
			],
			[
				-41,
				-86
			],
			[
				56,
				-54
			],
			[
				71,
				-68
			],
			[
				41,
				10
			],
			[
				51,
				14
			],
			[
				0,
				0
			],
			[
				43,
				74
			],
			[
				22,
				37
			],
			[
				20,
				34
			],
			[
				170,
				67
			],
			[
				31,
				49
			],
			[
				-8,
				44
			],
			[
				-10,
				59
			],
			[
				-13,
				74
			],
			[
				110,
				-25
			],
			[
				11,
				-25
			],
			[
				69,
				-156
			],
			[
				88,
				32
			],
			[
				3,
				1
			]
		],
		[
			[
				22767,
				46510
			],
			[
				54,
				60
			],
			[
				82,
				-17
			],
			[
				-9,
				162
			],
			[
				67,
				39
			],
			[
				44,
				26
			],
			[
				-2,
				123
			],
			[
				39,
				111
			],
			[
				49,
				140
			],
			[
				24,
				68
			],
			[
				36,
				104
			],
			[
				0,
				0
			]
		],
		[
			[
				23445,
				47214
			],
			[
				52,
				37
			],
			[
				178,
				128
			],
			[
				52,
				38
			],
			[
				200,
				332
			]
		],
		[
			[
				25448,
				48586
			],
			[
				202,
				40
			],
			[
				110,
				-16
			],
			[
				61,
				-9
			],
			[
				67,
				-10
			],
			[
				120,
				-17
			],
			[
				181,
				-27
			],
			[
				70,
				-10
			],
			[
				171,
				-25
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				105,
				35
			],
			[
				96,
				32
			],
			[
				157,
				53
			],
			[
				173,
				-45
			],
			[
				41,
				-11
			],
			[
				84,
				-22
			]
		],
		[
			[
				27086,
				48554
			],
			[
				97,
				20
			]
		],
		[
			[
				27183,
				48574
			],
			[
				9,
				1
			],
			[
				23,
				2
			],
			[
				654,
				57
			],
			[
				130,
				11
			],
			[
				52,
				56
			],
			[
				191,
				18
			],
			[
				156,
				-52
			],
			[
				232,
				91
			],
			[
				70,
				27
			],
			[
				83,
				-56
			],
			[
				183,
				3
			],
			[
				90,
				-75
			],
			[
				44,
				-37
			],
			[
				88,
				27
			]
		],
		[
			[
				35912,
				65860
			],
			[
				-98,
				94
			],
			[
				-6,
				108
			],
			[
				-105,
				154
			],
			[
				-118,
				-75
			],
			[
				-160,
				72
			],
			[
				25,
				114
			],
			[
				-192,
				173
			],
			[
				87,
				59
			],
			[
				-104,
				19
			],
			[
				-102,
				142
			],
			[
				-64,
				-78
			],
			[
				-228,
				-20
			],
			[
				-78,
				246
			],
			[
				-57,
				182
			],
			[
				-48,
				152
			],
			[
				-79,
				60
			],
			[
				-96,
				73
			],
			[
				-95,
				71
			],
			[
				17,
				112
			],
			[
				67,
				61
			],
			[
				39,
				35
			],
			[
				0,
				1
			],
			[
				-1,
				6
			],
			[
				0,
				3
			],
			[
				-59,
				397
			],
			[
				87,
				-23
			],
			[
				5,
				18
			],
			[
				9,
				29
			],
			[
				-13,
				17
			],
			[
				-29,
				39
			],
			[
				-120,
				161
			],
			[
				-49,
				67
			],
			[
				-53,
				98
			],
			[
				-22,
				40
			],
			[
				-12,
				-2
			],
			[
				-21,
				-3
			],
			[
				-61,
				-9
			],
			[
				-3,
				5
			],
			[
				-26,
				47
			],
			[
				-15,
				27
			],
			[
				-13,
				24
			],
			[
				-8,
				34
			],
			[
				-19,
				82
			],
			[
				-18,
				7
			],
			[
				-8,
				3
			],
			[
				-53,
				22
			],
			[
				-16,
				6
			],
			[
				-5,
				2
			],
			[
				-57,
				-9
			],
			[
				-4,
				78
			],
			[
				35,
				12
			],
			[
				54,
				18
			],
			[
				103,
				34
			],
			[
				-14,
				36
			],
			[
				207,
				145
			],
			[
				-3,
				16
			],
			[
				-21,
				104
			],
			[
				8,
				113
			],
			[
				8,
				107
			],
			[
				-78,
				-12
			],
			[
				-25,
				42
			],
			[
				-57,
				93
			],
			[
				47,
				193
			],
			[
				62,
				21
			],
			[
				-148,
				94
			]
		],
		[
			[
				35983,
				71938
			],
			[
				0,
				0
			],
			[
				-32,
				-16
			],
			[
				-14,
				-7
			],
			[
				-25,
				-84
			],
			[
				56,
				-131
			],
			[
				6,
				-13
			]
		],
		[
			[
				35974,
				71687
			],
			[
				157,
				-28
			],
			[
				102,
				32
			],
			[
				11,
				3
			],
			[
				61,
				19
			],
			[
				34,
				11
			],
			[
				49,
				15
			],
			[
				59,
				55
			],
			[
				214,
				196
			],
			[
				128,
				117
			],
			[
				59,
				54
			],
			[
				516,
				-48
			],
			[
				162,
				-16
			],
			[
				153,
				-14
			],
			[
				90,
				-9
			],
			[
				68,
				-7
			],
			[
				8,
				-1
			],
			[
				53,
				-5
			],
			[
				26,
				2
			],
			[
				343,
				28
			]
		],
		[
			[
				38267,
				72091
			],
			[
				352,
				131
			],
			[
				153,
				56
			],
			[
				8,
				3
			],
			[
				120,
				45
			]
		],
		[
			[
				38900,
				72326
			],
			[
				125,
				3
			],
			[
				14,
				1
			],
			[
				68,
				1
			],
			[
				162,
				5
			],
			[
				13,
				0
			],
			[
				372,
				9
			]
		],
		[
			[
				39654,
				72345
			],
			[
				5,
				1
			],
			[
				189,
				16
			],
			[
				486,
				42
			]
		],
		[
			[
				40334,
				72404
			],
			[
				310,
				-490
			]
		],
		[
			[
				34577,
				71922
			],
			[
				0,
				0
			],
			[
				-41,
				-12
			],
			[
				-88,
				-23
			],
			[
				-57,
				-16
			],
			[
				-32,
				19
			],
			[
				-26,
				15
			],
			[
				-25,
				14
			],
			[
				-50,
				29
			],
			[
				-14,
				42
			],
			[
				-19,
				55
			],
			[
				11,
				9
			],
			[
				89,
				74
			],
			[
				-17,
				62
			]
		],
		[
			[
				34308,
				72190
			],
			[
				117,
				45
			],
			[
				5,
				20
			],
			[
				28,
				108
			],
			[
				139,
				21
			],
			[
				14,
				40
			],
			[
				48,
				-33
			],
			[
				20,
				33
			],
			[
				23,
				40
			],
			[
				133,
				-1
			],
			[
				106,
				49
			],
			[
				102,
				46
			]
		],
		[
			[
				35043,
				72558
			],
			[
				34,
				-57
			],
			[
				45,
				-76
			],
			[
				23,
				-38
			],
			[
				17,
				-28
			],
			[
				65,
				5
			],
			[
				16,
				-13
			],
			[
				45,
				-34
			],
			[
				129,
				-101
			],
			[
				7,
				-5
			],
			[
				3,
				-3
			],
			[
				103,
				4
			],
			[
				85,
				-87
			],
			[
				-3,
				-54
			],
			[
				0,
				-15
			]
		],
		[
			[
				25934,
				57349
			],
			[
				39,
				-84
			],
			[
				-116,
				-46
			],
			[
				78,
				-53
			],
			[
				4,
				-2
			],
			[
				7,
				-32
			],
			[
				30,
				-152
			],
			[
				-139,
				-20
			],
			[
				-16,
				-111
			],
			[
				-63,
				-31
			],
			[
				3,
				-22
			],
			[
				3,
				-27
			],
			[
				7,
				-48
			],
			[
				0,
				0
			]
		],
		[
			[
				26334,
				59644
			],
			[
				21,
				-140
			],
			[
				86,
				-21
			],
			[
				165,
				-41
			],
			[
				64,
				-16
			],
			[
				56,
				-14
			],
			[
				41,
				-36
			],
			[
				88,
				-76
			],
			[
				17,
				-4
			],
			[
				22,
				-5
			],
			[
				141,
				-31
			],
			[
				44,
				-10
			],
			[
				32,
				-39
			],
			[
				38,
				-45
			],
			[
				110,
				0
			],
			[
				52,
				0
			],
			[
				28,
				0
			],
			[
				25,
				0
			],
			[
				1,
				0
			],
			[
				113,
				-88
			],
			[
				174,
				-136
			],
			[
				169,
				-40
			]
		],
		[
			[
				27821,
				58902
			],
			[
				-105,
				-164
			],
			[
				-96,
				-149
			],
			[
				-44,
				-70
			],
			[
				-10,
				-35
			],
			[
				0,
				0
			],
			[
				-41,
				-142
			],
			[
				33,
				-6
			],
			[
				79,
				-15
			],
			[
				23,
				-45
			],
			[
				30,
				-61
			],
			[
				-7,
				-33
			],
			[
				-34,
				-171
			],
			[
				48,
				-67
			],
			[
				3,
				-4
			],
			[
				-58,
				-108
			],
			[
				-81,
				42
			],
			[
				-100,
				52
			],
			[
				-110,
				-48
			],
			[
				-184,
				-81
			],
			[
				-8,
				-4
			],
			[
				-147,
				27
			],
			[
				-124,
				-62
			],
			[
				-73,
				-37
			],
			[
				-64,
				72
			],
			[
				-6,
				0
			],
			[
				-112,
				2
			],
			[
				-60,
				-31
			],
			[
				-215,
				-112
			],
			[
				-130,
				-145
			],
			[
				-143,
				-59
			],
			[
				-20,
				-73
			],
			[
				-131,
				-26
			]
		],
		[
			[
				25529,
				59829
			],
			[
				52,
				25
			],
			[
				0,
				0
			]
		],
		[
			[
				26197,
				55403
			],
			[
				173,
				64
			],
			[
				22,
				39
			],
			[
				-54,
				26
			],
			[
				37,
				57
			],
			[
				235,
				59
			],
			[
				73,
				58
			],
			[
				72,
				59
			],
			[
				114,
				91
			],
			[
				12,
				10
			],
			[
				8,
				-7
			],
			[
				71,
				-54
			],
			[
				0,
				0
			]
		],
		[
			[
				27225,
				55733
			],
			[
				0,
				0
			],
			[
				2,
				-21
			],
			[
				4,
				-35
			],
			[
				4,
				-39
			],
			[
				65,
				-39
			],
			[
				-28,
				-67
			],
			[
				-32,
				-76
			],
			[
				-3,
				-103
			],
			[
				0,
				-18
			],
			[
				-3,
				-102
			],
			[
				-2,
				-76
			],
			[
				55,
				-122
			],
			[
				9,
				-21
			],
			[
				86,
				-193
			],
			[
				25,
				-55
			],
			[
				-66,
				-286
			],
			[
				-1,
				-7
			],
			[
				-79,
				-343
			],
			[
				-252,
				77
			],
			[
				77,
				-153
			],
			[
				3,
				-159
			],
			[
				156,
				0
			],
			[
				-15,
				-188
			],
			[
				203,
				-197
			],
			[
				59,
				-58
			],
			[
				1,
				-1
			],
			[
				6,
				-6
			],
			[
				-62,
				-69
			],
			[
				-47,
				-52
			],
			[
				47,
				-132
			],
			[
				26,
				-71
			]
		],
		[
			[
				27463,
				53121
			],
			[
				77,
				-35
			],
			[
				9,
				21
			],
			[
				27,
				63
			],
			[
				116,
				8
			],
			[
				124,
				-127
			],
			[
				62,
				39
			],
			[
				15,
				9
			],
			[
				40,
				25
			],
			[
				29,
				18
			],
			[
				67,
				42
			],
			[
				150,
				-59
			],
			[
				188,
				20
			],
			[
				182,
				127
			],
			[
				146,
				255
			],
			[
				-22,
				126
			],
			[
				166,
				142
			],
			[
				295,
				113
			],
			[
				63,
				-57
			],
			[
				26,
				-23
			],
			[
				6,
				-6
			],
			[
				15,
				-17
			],
			[
				87,
				-101
			],
			[
				197,
				1
			],
			[
				89,
				0
			],
			[
				404,
				2
			]
		],
		[
			[
				27821,
				58902
			],
			[
				133,
				-33
			],
			[
				99,
				66
			],
			[
				159,
				-13
			],
			[
				155,
				156
			],
			[
				115,
				117
			],
			[
				11,
				0
			],
			[
				8,
				1
			],
			[
				73,
				2
			],
			[
				203,
				-62
			],
			[
				45,
				-14
			],
			[
				13,
				-4
			],
			[
				14,
				-5
			],
			[
				4,
				-220
			],
			[
				143,
				107
			],
			[
				222,
				168
			],
			[
				35,
				26
			],
			[
				-1,
				17
			],
			[
				-2,
				33
			],
			[
				-3,
				57
			],
			[
				65,
				65
			]
		],
		[
			[
				29312,
				59366
			],
			[
				28,
				-65
			],
			[
				87,
				-37
			],
			[
				17,
				-8
			],
			[
				60,
				-26
			],
			[
				93,
				33
			],
			[
				16,
				5
			],
			[
				451,
				156
			],
			[
				-1,
				110
			],
			[
				0,
				81
			],
			[
				95,
				62
			],
			[
				162,
				106
			],
			[
				52,
				-29
			],
			[
				23,
				-123
			],
			[
				-4,
				-39
			],
			[
				-6,
				-57
			],
			[
				-16,
				-160
			],
			[
				125,
				-242
			],
			[
				-47,
				-54
			],
			[
				115,
				-35
			],
			[
				13,
				67
			],
			[
				135,
				12
			],
			[
				14,
				78
			],
			[
				100,
				-70
			],
			[
				36,
				-24
			],
			[
				18,
				35
			],
			[
				51,
				97
			],
			[
				268,
				45
			],
			[
				30,
				198
			],
			[
				-8,
				55
			],
			[
				-57,
				377
			]
		],
		[
			[
				31162,
				59914
			],
			[
				88,
				29
			],
			[
				120,
				39
			],
			[
				249,
				-19
			],
			[
				79,
				-6
			],
			[
				20,
				-39
			],
			[
				26,
				-51
			],
			[
				67,
				-132
			],
			[
				31,
				-60
			],
			[
				-25,
				-38
			],
			[
				-25,
				-39
			],
			[
				-40,
				-62
			],
			[
				-81,
				-126
			],
			[
				7,
				-217
			],
			[
				91,
				-54
			],
			[
				68,
				-173
			],
			[
				43,
				-109
			],
			[
				-16,
				-91
			],
			[
				-6,
				-37
			],
			[
				-13,
				-74
			],
			[
				107,
				-121
			],
			[
				2,
				-2
			],
			[
				22,
				7
			],
			[
				110,
				35
			],
			[
				118,
				-22
			],
			[
				30,
				-6
			],
			[
				51,
				-8
			],
			[
				543,
				-95
			]
		],
		[
			[
				18481,
				15076
			],
			[
				23,
				283
			],
			[
				131,
				303
			],
			[
				8,
				17
			],
			[
				6,
				14
			],
			[
				23,
				52
			],
			[
				81,
				188
			]
		],
		[
			[
				18753,
				15933
			],
			[
				69,
				74
			],
			[
				73,
				78
			],
			[
				67,
				71
			]
		],
		[
			[
				18962,
				16156
			],
			[
				-1,
				1
			],
			[
				-19,
				45
			],
			[
				-75,
				170
			],
			[
				-1,
				2
			],
			[
				2,
				72
			],
			[
				1,
				48
			],
			[
				-159,
				134
			],
			[
				-74,
				62
			],
			[
				-19,
				16
			],
			[
				-445,
				44
			],
			[
				73,
				86
			],
			[
				6,
				7
			],
			[
				36,
				44
			],
			[
				-16,
				79
			],
			[
				-8,
				41
			],
			[
				-29,
				139
			],
			[
				57,
				35
			],
			[
				0,
				32
			],
			[
				1,
				96
			]
		],
		[
			[
				19628,
				17929
			],
			[
				180,
				-294
			],
			[
				-15,
				-401
			],
			[
				67,
				-32
			],
			[
				15,
				-7
			],
			[
				2,
				-1
			],
			[
				48,
				-55
			],
			[
				132,
				-152
			],
			[
				136,
				-67
			]
		],
		[
			[
				29930,
				70852
			],
			[
				63,
				-117
			],
			[
				15,
				-5
			],
			[
				98,
				-35
			],
			[
				100,
				77
			],
			[
				187,
				26
			],
			[
				75,
				-40
			],
			[
				92,
				-49
			],
			[
				165,
				-88
			],
			[
				-19,
				-81
			],
			[
				-8,
				-35
			],
			[
				289,
				-16
			],
			[
				4,
				-3
			],
			[
				0,
				0
			]
		],
		[
			[
				31329,
				70560
			],
			[
				34,
				-23
			],
			[
				30,
				-20
			],
			[
				252,
				137
			],
			[
				13,
				7
			]
		],
		[
			[
				31658,
				70661
			],
			[
				85,
				-27
			],
			[
				1,
				1
			],
			[
				110,
				27
			],
			[
				90,
				23
			],
			[
				21,
				-13
			],
			[
				0,
				0
			]
		],
		[
			[
				34235,
				73389
			],
			[
				0,
				0
			],
			[
				-38,
				-9
			],
			[
				-25,
				-6
			],
			[
				-21,
				-5
			],
			[
				-25,
				-86
			],
			[
				-35,
				-11
			],
			[
				-187,
				-57
			],
			[
				-1,
				-3
			],
			[
				-19,
				-79
			],
			[
				-11,
				-44
			],
			[
				-25,
				1
			],
			[
				-20,
				1
			],
			[
				-147,
				7
			],
			[
				-97,
				-8
			],
			[
				-20,
				-152
			],
			[
				80,
				-70
			],
			[
				-12,
				-20
			],
			[
				-71,
				-119
			],
			[
				-12,
				-20
			],
			[
				-24,
				-39
			],
			[
				-86,
				-45
			],
			[
				-106,
				51
			],
			[
				-63,
				-41
			],
			[
				-46,
				-29
			],
			[
				-17,
				-11
			],
			[
				-41,
				-27
			],
			[
				7,
				-19
			],
			[
				14,
				-40
			],
			[
				46,
				-129
			],
			[
				20,
				-54
			],
			[
				-12,
				-40
			],
			[
				-9,
				-32
			],
			[
				-224,
				-110
			],
			[
				2,
				-5
			],
			[
				45,
				-120
			],
			[
				22,
				-60
			]
		],
		[
			[
				33077,
				71959
			],
			[
				22,
				-50
			],
			[
				0,
				0
			],
			[
				20,
				-46
			],
			[
				70,
				-24
			],
			[
				2,
				-9
			],
			[
				6,
				-24
			],
			[
				9,
				-35
			],
			[
				7,
				-29
			],
			[
				21,
				-85
			],
			[
				7,
				-30
			],
			[
				4,
				-16
			],
			[
				10,
				-40
			],
			[
				1,
				-4
			],
			[
				-25,
				-20
			],
			[
				-107,
				-84
			],
			[
				-41,
				-117
			],
			[
				66,
				-47
			],
			[
				27,
				-19
			],
			[
				115,
				126
			],
			[
				13,
				15
			],
			[
				-11,
				62
			],
			[
				134,
				107
			],
			[
				72,
				20
			],
			[
				0,
				11
			],
			[
				-3,
				58
			],
			[
				77,
				25
			],
			[
				25,
				34
			],
			[
				20,
				27
			],
			[
				24,
				31
			],
			[
				50,
				68
			],
			[
				28,
				38
			],
			[
				185,
				-4
			],
			[
				-2,
				43
			],
			[
				-5,
				119
			],
			[
				42,
				72
			],
			[
				114,
				197
			],
			[
				55,
				94
			],
			[
				11,
				18
			],
			[
				27,
				-35
			],
			[
				130,
				-174
			],
			[
				31,
				-42
			]
		],
		[
			[
				38602,
				74430
			],
			[
				128,
				52
			],
			[
				111,
				45
			],
			[
				16,
				7
			],
			[
				2,
				2
			],
			[
				99,
				134
			],
			[
				283,
				92
			],
			[
				-16,
				27
			],
			[
				-35,
				56
			],
			[
				-12,
				19
			],
			[
				-16,
				37
			],
			[
				0,
				3
			],
			[
				-7,
				80
			],
			[
				-1,
				2
			],
			[
				35,
				88
			],
			[
				81,
				44
			],
			[
				44,
				24
			],
			[
				21,
				-4
			],
			[
				107,
				-18
			],
			[
				70,
				-12
			],
			[
				15,
				-2
			],
			[
				49,
				-9
			],
			[
				99,
				24
			],
			[
				16,
				4
			],
			[
				30,
				-20
			],
			[
				96,
				-63
			],
			[
				10,
				-7
			],
			[
				335,
				-220
			],
			[
				57,
				26
			],
			[
				198,
				93
			]
		],
		[
			[
				40417,
				74934
			],
			[
				94,
				18
			],
			[
				97,
				20
			],
			[
				4,
				0
			],
			[
				336,
				67
			]
		],
		[
			[
				40948,
				75039
			],
			[
				-44,
				-102
			],
			[
				-205,
				-468
			],
			[
				8,
				-25
			],
			[
				43,
				-132
			],
			[
				69,
				-2
			],
			[
				-40,
				-69
			],
			[
				-187,
				-79
			],
			[
				-49,
				-14
			],
			[
				-38,
				3
			],
			[
				-15,
				-39
			],
			[
				63,
				-25
			],
			[
				25,
				-10
			],
			[
				10,
				-4
			],
			[
				4,
				-1
			],
			[
				1,
				-1
			],
			[
				81,
				-127
			],
			[
				-13,
				-89
			],
			[
				-54,
				-164
			],
			[
				-16,
				-47
			],
			[
				-48,
				-148
			],
			[
				-325,
				-78
			],
			[
				78,
				-125
			]
		],
		[
			[
				40296,
				73293
			],
			[
				-47,
				-89
			],
			[
				149,
				-99
			],
			[
				13,
				-65
			],
			[
				3,
				-18
			],
			[
				1,
				-5
			],
			[
				-3,
				-70
			],
			[
				-3,
				-57
			],
			[
				-1,
				-24
			],
			[
				-7,
				-143
			],
			[
				-139,
				-36
			],
			[
				72,
				-283
			]
		],
		[
			[
				9317,
				28669
			],
			[
				-69,
				-85
			],
			[
				-15,
				-19
			],
			[
				-48,
				-59
			],
			[
				-23,
				-29
			],
			[
				-84,
				-105
			],
			[
				-44,
				-25
			],
			[
				-174,
				-98
			],
			[
				0,
				0
			],
			[
				-11,
				-7
			],
			[
				158,
				-250
			],
			[
				-145,
				-135
			],
			[
				-89,
				29
			],
			[
				-120,
				190
			],
			[
				-86,
				-54
			],
			[
				-170,
				14
			],
			[
				-45,
				3
			]
		],
		[
			[
				8352,
				28039
			],
			[
				-38,
				-217
			],
			[
				-179,
				-168
			],
			[
				2,
				-20
			],
			[
				5,
				-53
			],
			[
				3,
				-26
			],
			[
				8,
				-74
			],
			[
				2,
				-16
			]
		],
		[
			[
				6070,
				27902
			],
			[
				122,
				86
			],
			[
				25,
				18
			],
			[
				-54,
				93
			],
			[
				-61,
				106
			],
			[
				97,
				33
			],
			[
				40,
				85
			],
			[
				39,
				-1
			],
			[
				1,
				-1
			],
			[
				48,
				-2
			],
			[
				14,
				-1
			],
			[
				19,
				0
			],
			[
				9,
				55
			],
			[
				10,
				64
			],
			[
				8,
				52
			],
			[
				22,
				141
			],
			[
				42,
				38
			],
			[
				-100,
				104
			],
			[
				-42,
				44
			],
			[
				-82,
				84
			],
			[
				-15,
				16
			]
		],
		[
			[
				6212,
				28916
			],
			[
				-1,
				83
			],
			[
				-38,
				15
			],
			[
				-102,
				39
			],
			[
				-53,
				21
			],
			[
				-11,
				28
			],
			[
				-34,
				82
			],
			[
				-61,
				-8
			],
			[
				-43,
				-6
			],
			[
				-107,
				302
			],
			[
				-33,
				-1
			],
			[
				-169,
				-6
			],
			[
				-47,
				234
			],
			[
				-18,
				-6
			],
			[
				-41,
				-12
			],
			[
				-41,
				-12
			]
		],
		[
			[
				6198,
				30691
			],
			[
				41,
				29
			],
			[
				21,
				-15
			],
			[
				29,
				-20
			],
			[
				121,
				40
			],
			[
				-13,
				73
			],
			[
				84,
				152
			],
			[
				197,
				165
			]
		],
		[
			[
				6678,
				31115
			],
			[
				122,
				4
			],
			[
				10,
				0
			],
			[
				135,
				-82
			],
			[
				54,
				-33
			],
			[
				34,
				-83
			],
			[
				10,
				-25
			],
			[
				16,
				-39
			],
			[
				82,
				-202
			],
			[
				5,
				-14
			],
			[
				9,
				-22
			],
			[
				90,
				-100
			],
			[
				2,
				-1
			],
			[
				18,
				-3
			],
			[
				188,
				-41
			]
		],
		[
			[
				7453,
				30474
			],
			[
				72,
				31
			],
			[
				82,
				-50
			],
			[
				62,
				80
			],
			[
				15,
				19
			],
			[
				24,
				30
			],
			[
				21,
				28
			],
			[
				56,
				72
			],
			[
				20,
				26
			]
		],
		[
			[
				7805,
				30710
			],
			[
				57,
				-89
			],
			[
				40,
				-14
			],
			[
				184,
				-64
			],
			[
				12,
				-124
			],
			[
				2,
				-19
			],
			[
				6,
				-66
			],
			[
				8,
				-80
			]
		],
		[
			[
				8114,
				30254
			],
			[
				43,
				-81
			],
			[
				52,
				-97
			],
			[
				163,
				-36
			],
			[
				47,
				49
			],
			[
				32,
				35
			],
			[
				33,
				-26
			],
			[
				43,
				29
			],
			[
				45,
				30
			],
			[
				53,
				37
			],
			[
				8,
				52
			],
			[
				31,
				2
			],
			[
				67,
				5
			],
			[
				167,
				13
			],
			[
				38,
				3
			],
			[
				-17,
				54
			],
			[
				-12,
				36
			],
			[
				76,
				28
			],
			[
				56,
				-36
			],
			[
				44,
				-28
			],
			[
				41,
				-27
			],
			[
				1,
				-1
			],
			[
				140,
				-11
			],
			[
				87,
				-8
			],
			[
				85,
				-101
			],
			[
				36,
				-42
			],
			[
				30,
				-37
			],
			[
				44,
				-96
			],
			[
				8,
				-17
			],
			[
				45,
				-100
			],
			[
				-107,
				-46
			],
			[
				-20,
				-9
			],
			[
				-18,
				-8
			],
			[
				-38,
				-168
			],
			[
				-123,
				-102
			],
			[
				-27,
				-22
			],
			[
				-26,
				-41
			],
			[
				-54,
				-87
			],
			[
				40,
				-104
			],
			[
				-215,
				-73
			],
			[
				0,
				-70
			],
			[
				156,
				-91
			],
			[
				68,
				-105
			],
			[
				-72,
				-187
			],
			[
				153,
				-101
			]
		],
		[
			[
				12422,
				35476
			],
			[
				3,
				-11
			],
			[
				12,
				-64
			],
			[
				10,
				-11
			],
			[
				39,
				-39
			],
			[
				108,
				-108
			],
			[
				-44,
				-159
			]
		],
		[
			[
				12550,
				35084
			],
			[
				80,
				-5
			],
			[
				80,
				-80
			],
			[
				32,
				18
			],
			[
				57,
				33
			],
			[
				32,
				-16
			],
			[
				52,
				-26
			],
			[
				14,
				10
			],
			[
				99,
				73
			],
			[
				39,
				29
			],
			[
				39,
				-87
			],
			[
				11,
				-24
			]
		],
		[
			[
				13085,
				35009
			],
			[
				32,
				35
			],
			[
				71,
				52
			],
			[
				14,
				11
			],
			[
				1,
				-1
			],
			[
				50,
				-58
			],
			[
				14,
				7
			],
			[
				3,
				1
			],
			[
				22,
				11
			],
			[
				-10,
				29
			],
			[
				-3,
				10
			],
			[
				16,
				23
			],
			[
				16,
				22
			],
			[
				126,
				-35
			],
			[
				33,
				-9
			],
			[
				50,
				-13
			],
			[
				171,
				52
			],
			[
				-117,
				250
			],
			[
				247,
				219
			],
			[
				16,
				-5
			],
			[
				80,
				-26
			],
			[
				105,
				-33
			],
			[
				158,
				89
			],
			[
				40,
				23
			]
		],
		[
			[
				14220,
				35663
			],
			[
				3,
				-21
			],
			[
				5,
				-45
			],
			[
				18,
				-21
			],
			[
				50,
				-58
			],
			[
				36,
				-43
			],
			[
				108,
				-22
			],
			[
				44,
				-9
			],
			[
				60,
				-12
			]
		],
		[
			[
				14544,
				35432
			],
			[
				3,
				-37
			],
			[
				-61,
				-83
			],
			[
				53,
				-199
			],
			[
				-62,
				-197
			],
			[
				-18,
				-56
			],
			[
				14,
				-137
			],
			[
				8,
				-75
			],
			[
				1,
				-12
			],
			[
				1,
				-6
			],
			[
				-1,
				-2
			],
			[
				-34,
				-53
			],
			[
				-15,
				-22
			],
			[
				21,
				-10
			],
			[
				71,
				-34
			],
			[
				23,
				-11
			],
			[
				21,
				-10
			],
			[
				-6,
				-31
			],
			[
				-9,
				-51
			],
			[
				-1,
				-2
			],
			[
				25,
				-36
			],
			[
				11,
				-15
			],
			[
				23,
				-33
			],
			[
				29,
				1
			],
			[
				37,
				0
			],
			[
				50,
				1
			],
			[
				46,
				1
			],
			[
				67,
				0
			],
			[
				52,
				-40
			],
			[
				-243,
				-88
			],
			[
				-8,
				-3
			],
			[
				-7,
				-3
			],
			[
				-23,
				-8
			],
			[
				-30,
				-133
			],
			[
				-70,
				-63
			],
			[
				-56,
				-51
			],
			[
				-21,
				-19
			],
			[
				-7,
				-7
			],
			[
				-15,
				-156
			],
			[
				-3,
				-27
			],
			[
				79,
				-250
			]
		],
		[
			[
				13319,
				29949
			],
			[
				-126,
				-92
			],
			[
				-267,
				-40
			],
			[
				-127,
				152
			],
			[
				-476,
				9
			]
		],
		[
			[
				12323,
				29978
			],
			[
				-66,
				64
			],
			[
				-130,
				125
			],
			[
				-102,
				11
			],
			[
				-138,
				14
			],
			[
				-147,
				133
			],
			[
				-52,
				48
			],
			[
				-22,
				163
			],
			[
				-181,
				121
			],
			[
				-85,
				56
			],
			[
				-239,
				159
			],
			[
				65,
				154
			],
			[
				-29,
				57
			],
			[
				-68,
				131
			],
			[
				-57,
				110
			],
			[
				-180,
				17
			],
			[
				-26,
				-73
			],
			[
				-28,
				23
			],
			[
				-17,
				13
			],
			[
				-48,
				38
			],
			[
				59,
				290
			],
			[
				25,
				123
			],
			[
				3,
				18
			],
			[
				21,
				15
			],
			[
				38,
				27
			],
			[
				10,
				7
			],
			[
				65,
				195
			],
			[
				-52,
				86
			],
			[
				-204,
				335
			],
			[
				123,
				116
			],
			[
				31,
				30
			],
			[
				123,
				116
			],
			[
				43,
				41
			],
			[
				0,
				0
			]
		],
		[
			[
				8324,
				33211
			],
			[
				-38,
				32
			],
			[
				-52,
				-9
			],
			[
				-74,
				-13
			],
			[
				-77,
				-13
			],
			[
				-8,
				50
			],
			[
				-6,
				35
			],
			[
				-10,
				58
			],
			[
				-7,
				38
			],
			[
				-3,
				18
			],
			[
				-1,
				2
			],
			[
				-39,
				38
			],
			[
				-18,
				18
			],
			[
				-40,
				41
			],
			[
				16,
				17
			],
			[
				19,
				20
			],
			[
				-3,
				6
			],
			[
				-55,
				112
			],
			[
				-25,
				52
			],
			[
				-79,
				161
			],
			[
				51,
				66
			],
			[
				36,
				48
			],
			[
				2,
				20
			],
			[
				14,
				95
			],
			[
				0,
				0
			]
		],
		[
			[
				10480,
				33187
			],
			[
				0,
				0
			],
			[
				-12,
				-5
			],
			[
				-95,
				-37
			],
			[
				-7,
				-3
			],
			[
				-19,
				-14
			],
			[
				-79,
				-31
			],
			[
				-68,
				7
			],
			[
				-25,
				-7
			],
			[
				-84,
				-27
			],
			[
				-172,
				-54
			],
			[
				-45,
				-14
			],
			[
				-188,
				92
			],
			[
				-15,
				-7
			],
			[
				-60,
				-23
			],
			[
				-47,
				-20
			],
			[
				-4,
				-1
			]
		],
		[
			[
				9560,
				33043
			],
			[
				-20,
				65
			],
			[
				-2,
				6
			],
			[
				-98,
				181
			],
			[
				-1,
				1
			],
			[
				-44,
				49
			],
			[
				-19,
				-7
			],
			[
				-48,
				-19
			],
			[
				1,
				-24
			],
			[
				3,
				-60
			],
			[
				1,
				-29
			],
			[
				-19,
				-9
			],
			[
				-250,
				-113
			],
			[
				-139,
				-43
			],
			[
				-40,
				-13
			],
			[
				-60,
				17
			],
			[
				-189,
				54
			],
			[
				-238,
				-49
			]
		],
		[
			[
				8398,
				33050
			],
			[
				-66,
				42
			],
			[
				-10,
				6
			],
			[
				-59,
				37
			],
			[
				61,
				76
			]
		],
		[
			[
				7845,
				34151
			],
			[
				0,
				0
			],
			[
				-1,
				9
			],
			[
				-2,
				75
			]
		],
		[
			[
				12397,
				37115
			],
			[
				9,
				-35
			],
			[
				7,
				-28
			],
			[
				120,
				-88
			],
			[
				5,
				-4
			],
			[
				-13,
				-78
			],
			[
				-6,
				-39
			],
			[
				4,
				-53
			],
			[
				3,
				-40
			],
			[
				149,
				-37
			],
			[
				58,
				32
			],
			[
				24,
				-54
			],
			[
				50,
				-115
			],
			[
				-36,
				-71
			],
			[
				-51,
				-101
			],
			[
				9,
				-174
			],
			[
				-152,
				-199
			],
			[
				15,
				-61
			],
			[
				23,
				-89
			],
			[
				44,
				-33
			],
			[
				59,
				-46
			],
			[
				3,
				-2
			],
			[
				-6,
				-83
			],
			[
				-51,
				-19
			],
			[
				-24,
				-10
			],
			[
				-2,
				-27
			],
			[
				-8,
				-72
			],
			[
				0,
				0
			]
		],
		[
			[
				12323,
				29978
			],
			[
				-90,
				-7
			],
			[
				-155,
				-13
			],
			[
				-28,
				-3
			],
			[
				-126,
				-10
			],
			[
				-333,
				-29
			],
			[
				-300,
				-26
			],
			[
				-554,
				-219
			]
		],
		[
			[
				10737,
				29671
			],
			[
				-99,
				-124
			],
			[
				-61,
				-75
			],
			[
				-38,
				-47
			],
			[
				-15,
				-19
			],
			[
				-6,
				-8
			],
			[
				-5,
				-7
			],
			[
				-14,
				-23
			],
			[
				-22,
				-37
			],
			[
				-37,
				-64
			],
			[
				-12,
				-21
			],
			[
				-53,
				-92
			],
			[
				-6,
				-10
			],
			[
				-9,
				-16
			],
			[
				-293,
				-507
			]
		],
		[
			[
				10067,
				28621
			],
			[
				-360,
				-46
			],
			[
				-111,
				129
			],
			[
				-279,
				-35
			]
		],
		[
			[
				6678,
				31115
			],
			[
				-59,
				71
			],
			[
				-28,
				34
			],
			[
				30,
				10
			]
		],
		[
			[
				6621,
				31230
			],
			[
				-152,
				77
			],
			[
				-20,
				10
			],
			[
				-24,
				65
			],
			[
				-13,
				34
			],
			[
				0,
				1
			],
			[
				-109,
				47
			],
			[
				52,
				58
			],
			[
				39,
				43
			],
			[
				-102,
				52
			],
			[
				-39,
				93
			],
			[
				-60,
				-15
			],
			[
				-21,
				-5
			],
			[
				-9,
				29
			],
			[
				-12,
				36
			]
		],
		[
			[
				2942,
				20450
			],
			[
				12,
				120
			],
			[
				-89,
				-3
			],
			[
				4,
				79
			],
			[
				5,
				105
			],
			[
				-19,
				27
			],
			[
				-5,
				6
			],
			[
				-13,
				17
			],
			[
				11,
				28
			],
			[
				28,
				71
			],
			[
				27,
				71
			],
			[
				-81,
				28
			],
			[
				77,
				152
			],
			[
				-10,
				13
			]
		],
		[
			[
				2289,
				21087
			],
			[
				37,
				53
			],
			[
				8,
				11
			],
			[
				2,
				14
			],
			[
				18,
				153
			],
			[
				70,
				52
			],
			[
				-40,
				173
			],
			[
				-15,
				65
			],
			[
				6,
				23
			],
			[
				29,
				109
			],
			[
				12,
				46
			],
			[
				11,
				42
			],
			[
				-10,
				173
			],
			[
				-1,
				13
			]
		],
		[
			[
				2416,
				22014
			],
			[
				54,
				-2
			],
			[
				75,
				-3
			],
			[
				1,
				0
			],
			[
				182,
				-72
			],
			[
				87,
				-77
			],
			[
				33,
				-30
			],
			[
				49,
				42
			],
			[
				32,
				-31
			],
			[
				3,
				2
			],
			[
				19,
				15
			],
			[
				27,
				19
			],
			[
				6,
				5
			],
			[
				6,
				103
			],
			[
				2,
				32
			],
			[
				44,
				6
			],
			[
				17,
				60
			],
			[
				10,
				34
			],
			[
				4,
				17
			],
			[
				16,
				11
			],
			[
				60,
				42
			],
			[
				16,
				11
			],
			[
				115,
				80
			]
		],
		[
			[
				3274,
				22278
			],
			[
				206,
				-76
			],
			[
				22,
				8
			],
			[
				29,
				11
			],
			[
				25,
				9
			],
			[
				25,
				9
			],
			[
				28,
				81
			],
			[
				60,
				-27
			],
			[
				2,
				7
			],
			[
				33,
				126
			],
			[
				21,
				8
			],
			[
				84,
				34
			],
			[
				33,
				81
			],
			[
				416,
				-12
			],
			[
				274,
				46
			],
			[
				-11,
				-66
			],
			[
				98,
				-124
			],
			[
				169,
				190
			],
			[
				312,
				46
			]
		],
		[
			[
				5100,
				22629
			],
			[
				113,
				83
			],
			[
				105,
				77
			],
			[
				12,
				103
			],
			[
				3,
				26
			]
		],
		[
			[
				5333,
				22918
			],
			[
				21,
				29
			],
			[
				171,
				230
			],
			[
				119,
				160
			],
			[
				33,
				45
			],
			[
				104,
				138
			]
		],
		[
			[
				5781,
				23520
			],
			[
				94,
				14
			],
			[
				148,
				205
			]
		],
		[
			[
				6023,
				23739
			],
			[
				87,
				108
			],
			[
				15,
				19
			],
			[
				4,
				5
			],
			[
				61,
				76
			],
			[
				14,
				16
			],
			[
				31,
				40
			],
			[
				63,
				245
			],
			[
				228,
				239
			]
		],
		[
			[
				6526,
				24487
			],
			[
				-9,
				91
			],
			[
				136,
				163
			],
			[
				10,
				13
			]
		],
		[
			[
				8346,
				26442
			],
			[
				7,
				-16
			],
			[
				301,
				-645
			],
			[
				-3,
				-225
			],
			[
				353,
				92
			],
			[
				161,
				42
			],
			[
				39,
				10
			],
			[
				56,
				15
			],
			[
				111,
				28
			],
			[
				247,
				-73
			],
			[
				19,
				-5
			],
			[
				3,
				-1
			],
			[
				74,
				-55
			],
			[
				73,
				-53
			],
			[
				53,
				-38
			],
			[
				-2,
				-55
			],
			[
				-8,
				-202
			],
			[
				-1,
				-33
			]
		],
		[
			[
				9829,
				25228
			],
			[
				-27,
				-242
			],
			[
				94,
				-233
			],
			[
				19,
				-48
			],
			[
				11,
				-83
			],
			[
				32,
				-228
			],
			[
				19,
				-8
			],
			[
				14,
				-6
			],
			[
				96,
				-43
			],
			[
				19,
				-9
			],
			[
				303,
				-136
			],
			[
				63,
				-28
			],
			[
				8,
				6
			],
			[
				24,
				17
			],
			[
				79,
				57
			],
			[
				123,
				89
			],
			[
				0,
				1
			],
			[
				202,
				-94
			],
			[
				0,
				-1
			],
			[
				180,
				-531
			],
			[
				-59,
				-70
			]
		],
		[
			[
				11029,
				23638
			],
			[
				-84,
				-98
			],
			[
				-173,
				-9
			],
			[
				-76,
				61
			],
			[
				-62,
				-41
			],
			[
				-64,
				-41
			]
		],
		[
			[
				10570,
				23510
			],
			[
				4,
				-64
			],
			[
				8,
				-130
			],
			[
				12,
				-183
			],
			[
				122,
				-123
			],
			[
				4,
				-3
			],
			[
				2,
				1
			],
			[
				2,
				1
			],
			[
				34,
				16
			],
			[
				10,
				-23
			],
			[
				9,
				-21
			],
			[
				20,
				-48
			],
			[
				77,
				-20
			],
			[
				-11,
				-35
			],
			[
				-30,
				-100
			],
			[
				-2,
				-6
			],
			[
				-2,
				0
			],
			[
				-56,
				-1
			],
			[
				11,
				-61
			],
			[
				3,
				-11
			],
			[
				-20,
				-6
			],
			[
				-43,
				-12
			],
			[
				-1,
				-1
			],
			[
				-73,
				1
			],
			[
				0,
				0
			],
			[
				-1,
				0
			],
			[
				-52,
				-89
			],
			[
				-22,
				-36
			],
			[
				-18,
				-29
			],
			[
				-12,
				-35
			],
			[
				-15,
				-46
			],
			[
				-4,
				-10
			],
			[
				-132,
				-90
			],
			[
				-74,
				-51
			],
			[
				-49,
				-106
			],
			[
				-134,
				15
			]
		],
		[
			[
				10137,
				22204
			],
			[
				32,
				-63
			],
			[
				108,
				-37
			],
			[
				10,
				-78
			],
			[
				12,
				-106
			],
			[
				-14,
				-27
			],
			[
				-35,
				-70
			],
			[
				13,
				-33
			],
			[
				82,
				38
			],
			[
				2,
				-6
			],
			[
				1,
				-2
			],
			[
				31,
				-84
			],
			[
				11,
				-31
			],
			[
				10,
				-26
			],
			[
				120,
				-328
			],
			[
				264,
				-138
			],
			[
				92,
				-105
			]
		],
		[
			[
				3274,
				22278
			],
			[
				-25,
				105
			],
			[
				-118,
				55
			],
			[
				-1,
				0
			],
			[
				2,
				5
			],
			[
				10,
				40
			],
			[
				25,
				102
			],
			[
				-5,
				0
			],
			[
				-89,
				-2
			],
			[
				-34,
				-1
			],
			[
				-12,
				23
			],
			[
				-7,
				14
			],
			[
				-55,
				109
			],
			[
				-24,
				46
			],
			[
				-8,
				15
			],
			[
				-13,
				3
			],
			[
				-29,
				6
			],
			[
				-124,
				28
			],
			[
				-47,
				227
			],
			[
				39,
				-9
			],
			[
				4,
				10
			],
			[
				5,
				13
			],
			[
				0,
				0
			]
		],
		[
			[
				2328,
				23219
			],
			[
				-10,
				89
			],
			[
				-2,
				17
			],
			[
				-5,
				41
			],
			[
				35,
				78
			],
			[
				191,
				1
			],
			[
				200,
				66
			]
		],
		[
			[
				2737,
				23511
			],
			[
				2,
				30
			],
			[
				0,
				3
			],
			[
				2,
				34
			],
			[
				-45,
				20
			],
			[
				0,
				0
			]
		],
		[
			[
				2451,
				23718
			],
			[
				0,
				0
			],
			[
				-17,
				9
			],
			[
				0,
				0
			]
		],
		[
			[
				15521,
				29373
			],
			[
				-213,
				-197
			],
			[
				-8,
				-7
			],
			[
				-140,
				-262
			],
			[
				-39,
				-73
			],
			[
				-33,
				-61
			],
			[
				-5,
				-9
			],
			[
				-81,
				3
			],
			[
				-28,
				1
			],
			[
				-82,
				-99
			],
			[
				-1,
				0
			],
			[
				18,
				-27
			],
			[
				18,
				-27
			],
			[
				167,
				-254
			],
			[
				342,
				-112
			],
			[
				25,
				-16
			],
			[
				38,
				-23
			],
			[
				66,
				-42
			],
			[
				45,
				-28
			],
			[
				134,
				-84
			],
			[
				104,
				-135
			],
			[
				41,
				-53
			],
			[
				11,
				-35
			],
			[
				4,
				-16
			],
			[
				1,
				-3
			],
			[
				24,
				-80
			],
			[
				-156,
				-47
			],
			[
				-104,
				-176
			],
			[
				-7,
				-11
			],
			[
				4,
				-17
			],
			[
				7,
				-31
			],
			[
				2,
				-12
			],
			[
				3,
				-12
			],
			[
				9,
				-45
			],
			[
				68,
				-315
			],
			[
				-66,
				-310
			]
		],
		[
			[
				15689,
				26758
			],
			[
				82,
				-5
			],
			[
				20,
				-1
			],
			[
				113,
				-7
			],
			[
				232,
				-96
			],
			[
				9,
				-3
			],
			[
				21,
				-9
			],
			[
				16,
				-6
			],
			[
				11,
				-5
			]
		],
		[
			[
				13343,
				23237
			],
			[
				-27,
				22
			],
			[
				-74,
				62
			],
			[
				-61,
				51
			],
			[
				-128,
				55
			],
			[
				-55,
				23
			],
			[
				-68,
				29
			],
			[
				-45,
				19
			],
			[
				-340,
				144
			],
			[
				-11,
				4
			],
			[
				-52,
				22
			],
			[
				-12,
				5
			],
			[
				8,
				-51
			],
			[
				2,
				-7
			],
			[
				-47,
				-73
			],
			[
				-108,
				-171
			],
			[
				-33,
				-52
			]
		],
		[
			[
				12292,
				23319
			],
			[
				-69,
				-11
			],
			[
				-21,
				-3
			],
			[
				-109,
				-17
			],
			[
				-150,
				-23
			],
			[
				-78,
				-12
			],
			[
				-28,
				13
			],
			[
				-178,
				81
			]
		],
		[
			[
				11659,
				23347
			],
			[
				-22,
				-6
			],
			[
				-24,
				-6
			],
			[
				-90,
				-23
			],
			[
				-1,
				0
			],
			[
				-70,
				58
			],
			[
				-99,
				81
			],
			[
				-8,
				-1
			],
			[
				-79,
				-13
			],
			[
				-237,
				201
			]
		],
		[
			[
				14039,
				22596
			],
			[
				28,
				-20
			],
			[
				278,
				-197
			],
			[
				145,
				-103
			],
			[
				46,
				-33
			]
		],
		[
			[
				14536,
				22243
			],
			[
				3,
				-1
			],
			[
				71,
				-40
			],
			[
				11,
				-6
			],
			[
				59,
				-73
			],
			[
				93,
				-117
			],
			[
				23,
				-29
			],
			[
				25,
				-31
			],
			[
				142,
				-180
			],
			[
				74,
				-93
			]
		],
		[
			[
				7744,
				11573
			],
			[
				-25,
				-11
			],
			[
				-43,
				-19
			],
			[
				-276,
				-121
			],
			[
				-10,
				-70
			],
			[
				-7,
				-50
			],
			[
				-13,
				-95
			],
			[
				-49,
				-91
			],
			[
				-51,
				-94
			],
			[
				-21,
				-39
			],
			[
				-62,
				25
			],
			[
				-52,
				21
			],
			[
				-57,
				24
			],
			[
				-17,
				-235
			],
			[
				-7,
				-105
			],
			[
				-11,
				-162
			],
			[
				-30,
				-27
			],
			[
				-22,
				-20
			],
			[
				15,
				-12
			],
			[
				111,
				-86
			],
			[
				54,
				-142
			],
			[
				-108,
				-134
			],
			[
				-20,
				-25
			],
			[
				-46,
				-58
			],
			[
				-25,
				-31
			],
			[
				-182,
				-85
			],
			[
				-40,
				-19
			],
			[
				34,
				-63
			],
			[
				114,
				-136
			],
			[
				-76,
				-56
			],
			[
				-49,
				42
			],
			[
				-77,
				-203
			]
		],
		[
			[
				6696,
				9496
			],
			[
				-29,
				-99
			],
			[
				-36,
				-127
			],
			[
				-36,
				-126
			],
			[
				-3,
				-44
			],
			[
				-14,
				-195
			],
			[
				-1,
				-16
			],
			[
				46,
				-191
			],
			[
				-10,
				-398
			]
		],
		[
			[
				6613,
				8300
			],
			[
				30,
				-68
			],
			[
				246,
				-5
			],
			[
				29,
				0
			]
		],
		[
			[
				6918,
				8227
			],
			[
				-174,
				-255
			],
			[
				56,
				-84
			],
			[
				6,
				-8
			],
			[
				4,
				-122
			],
			[
				-2,
				-3
			],
			[
				-345,
				-409
			],
			[
				-20,
				-81
			],
			[
				0,
				-2
			],
			[
				-168,
				-175
			],
			[
				-69,
				-140
			],
			[
				-112,
				-60
			]
		],
		[
			[
				6094,
				6888
			],
			[
				-134,
				32
			],
			[
				-223,
				-96
			],
			[
				-23,
				-182
			],
			[
				-126,
				-153
			],
			[
				-237,
				-202
			],
			[
				-272,
				-67
			],
			[
				-56,
				-14
			],
			[
				-41,
				-10
			],
			[
				-14,
				-58
			],
			[
				-39,
				-29
			],
			[
				-106,
				-78
			],
			[
				-92,
				-10
			],
			[
				-27,
				-4
			],
			[
				1,
				-6
			],
			[
				12,
				-46
			]
		],
		[
			[
				5033,
				10858
			],
			[
				66,
				-39
			],
			[
				41,
				13
			],
			[
				35,
				11
			],
			[
				19,
				11
			],
			[
				46,
				25
			],
			[
				64,
				125
			],
			[
				390,
				175
			],
			[
				54,
				24
			],
			[
				241,
				247
			],
			[
				25,
				25
			],
			[
				149,
				250
			]
		],
		[
			[
				4620,
				10292
			],
			[
				5,
				19
			],
			[
				17,
				54
			],
			[
				-77,
				66
			],
			[
				-8,
				7
			],
			[
				-20,
				17
			],
			[
				-10,
				9
			],
			[
				-18,
				124
			],
			[
				11,
				11
			],
			[
				20,
				19
			],
			[
				-31,
				79
			],
			[
				-24,
				61
			],
			[
				16,
				8
			],
			[
				76,
				39
			],
			[
				9,
				169
			]
		],
		[
			[
				4639,
				10978
			],
			[
				180,
				-84
			],
			[
				31,
				-15
			],
			[
				66,
				-31
			],
			[
				20,
				-9
			],
			[
				0,
				0
			]
		],
		[
			[
				6094,
				6888
			],
			[
				-98,
				-310
			],
			[
				-218,
				-203
			],
			[
				20,
				-165
			],
			[
				120,
				-37
			],
			[
				4,
				-1
			],
			[
				-128,
				-259
			],
			[
				-145,
				-509
			]
		],
		[
			[
				5649,
				5404
			],
			[
				-60,
				-20
			],
			[
				-32,
				-11
			],
			[
				-86,
				-29
			],
			[
				-220,
				-177
			],
			[
				-94,
				55
			],
			[
				-23,
				-9
			],
			[
				-122,
				-47
			],
			[
				-82,
				41
			],
			[
				-19,
				9
			],
			[
				0,
				1
			],
			[
				5,
				54
			],
			[
				9,
				100
			],
			[
				1,
				19
			],
			[
				2,
				14
			],
			[
				-20,
				23
			],
			[
				-16,
				20
			],
			[
				-9,
				-2
			],
			[
				-59,
				-14
			],
			[
				-8,
				10
			],
			[
				-8,
				11
			],
			[
				-31,
				40
			],
			[
				-29,
				38
			],
			[
				-65,
				46
			],
			[
				-52,
				-30
			],
			[
				-30,
				45
			],
			[
				-27,
				-96
			],
			[
				-20,
				-69
			],
			[
				-20,
				-70
			],
			[
				-5,
				-19
			],
			[
				-38,
				-131
			],
			[
				-42,
				10
			],
			[
				-72,
				16
			],
			[
				-15,
				4
			],
			[
				-82,
				19
			],
			[
				-9,
				-9
			],
			[
				-44,
				-45
			],
			[
				-17,
				-123
			],
			[
				-98,
				-172
			],
			[
				7,
				-13
			],
			[
				33,
				-72
			],
			[
				-123,
				-38
			],
			[
				-60,
				-19
			],
			[
				-19,
				-6
			],
			[
				-31,
				31
			],
			[
				-42,
				40
			]
		],
		[
			[
				3877,
				4829
			],
			[
				-39,
				-28
			],
			[
				-160,
				-112
			],
			[
				30,
				-41
			],
			[
				33,
				-46
			],
			[
				2,
				-7
			],
			[
				28,
				-162
			]
		],
		[
			[
				3771,
				4433
			],
			[
				-28,
				-48
			],
			[
				62,
				-62
			],
			[
				2,
				-103
			],
			[
				-51,
				-21
			],
			[
				7,
				-97
			],
			[
				-60,
				-98
			],
			[
				84,
				-81
			],
			[
				45,
				-44
			],
			[
				37,
				23
			],
			[
				7,
				-24
			],
			[
				15,
				-53
			]
		],
		[
			[
				3891,
				3825
			],
			[
				-187,
				-85
			],
			[
				-54,
				-222
			],
			[
				-10,
				-39
			],
			[
				-5,
				-21
			],
			[
				-2,
				-9
			]
		],
		[
			[
				8667,
				3690
			],
			[
				12,
				-85
			],
			[
				28,
				-203
			]
		],
		[
			[
				8707,
				3402
			],
			[
				116,
				-188
			],
			[
				42,
				23
			],
			[
				118,
				64
			],
			[
				201,
				-113
			]
		],
		[
			[
				9184,
				3188
			],
			[
				-135,
				-381
			],
			[
				-41,
				-115
			]
		],
		[
			[
				9008,
				2692
			],
			[
				-63,
				-82
			],
			[
				-126,
				32
			],
			[
				-53,
				-128
			],
			[
				36,
				-154
			],
			[
				-102,
				-113
			],
			[
				57,
				-63
			],
			[
				-19,
				-160
			],
			[
				-5,
				-51
			],
			[
				79,
				3
			],
			[
				-9,
				-60
			],
			[
				146,
				-29
			],
			[
				-41,
				-76
			],
			[
				258,
				-59
			],
			[
				151,
				-148
			],
			[
				-17,
				-64
			],
			[
				-59,
				-219
			]
		],
		[
			[
				9241,
				1321
			],
			[
				-10,
				-171
			],
			[
				-220,
				64
			],
			[
				-62,
				-28
			],
			[
				-3,
				-55
			],
			[
				-109,
				-25
			]
		],
		[
			[
				8837,
				1106
			],
			[
				40,
				-68
			],
			[
				-21,
				-70
			],
			[
				138,
				-52
			],
			[
				37,
				-63
			],
			[
				20,
				-35
			],
			[
				-35,
				-212
			],
			[
				-49,
				10
			],
			[
				85,
				-55
			],
			[
				5,
				-141
			],
			[
				70,
				-23
			],
			[
				0,
				0
			]
		],
		[
			[
				7671,
				997
			],
			[
				9,
				3
			],
			[
				43,
				11
			],
			[
				85,
				120
			],
			[
				42,
				371
			],
			[
				-34,
				164
			],
			[
				75,
				119
			]
		],
		[
			[
				7891,
				1785
			],
			[
				63,
				220
			],
			[
				-22,
				26
			],
			[
				-107,
				129
			],
			[
				13,
				77
			]
		],
		[
			[
				7838,
				2237
			],
			[
				166,
				66
			],
			[
				-41,
				107
			],
			[
				0,
				2
			],
			[
				15,
				62
			],
			[
				72,
				19
			],
			[
				-27,
				199
			],
			[
				73,
				109
			],
			[
				-58,
				239
			],
			[
				40,
				8
			],
			[
				-52,
				108
			],
			[
				192,
				107
			],
			[
				-17,
				48
			],
			[
				-50,
				144
			],
			[
				93,
				226
			]
		],
		[
			[
				8244,
				3681
			],
			[
				-109,
				-12
			],
			[
				-17,
				-2
			],
			[
				-84,
				43
			],
			[
				-5,
				4
			],
			[
				-47,
				36
			],
			[
				-15,
				128
			],
			[
				-100,
				51
			],
			[
				33,
				95
			],
			[
				-55,
				377
			],
			[
				-92,
				27
			],
			[
				-24,
				103
			],
			[
				-146,
				215
			]
		],
		[
			[
				7583,
				4746
			],
			[
				73,
				430
			],
			[
				-53,
				9
			],
			[
				-11,
				172
			],
			[
				-60,
				72
			],
			[
				-4,
				194
			],
			[
				10,
				24
			],
			[
				20,
				46
			],
			[
				32,
				72
			]
		],
		[
			[
				7590,
				5765
			],
			[
				4,
				46
			],
			[
				7,
				65
			],
			[
				331,
				45
			],
			[
				141,
				72
			],
			[
				15,
				-2
			],
			[
				89,
				-11
			],
			[
				0,
				22
			],
			[
				1,
				34
			],
			[
				78,
				-5
			],
			[
				32,
				-2
			],
			[
				142,
				126
			],
			[
				10,
				9
			],
			[
				73,
				-17
			],
			[
				-6,
				-86
			],
			[
				31,
				2
			],
			[
				29,
				2
			],
			[
				42,
				3
			],
			[
				13,
				1
			],
			[
				7,
				0
			],
			[
				6,
				-1
			],
			[
				189,
				-49
			],
			[
				19,
				-5
			],
			[
				1,
				-5
			],
			[
				33,
				-106
			],
			[
				81,
				-271
			],
			[
				43,
				-64
			],
			[
				108,
				-160
			],
			[
				-29,
				-119
			],
			[
				-9,
				-36
			],
			[
				-9,
				-40
			],
			[
				-13,
				-55
			]
		],
		[
			[
				9049,
				5158
			],
			[
				-3,
				-17
			],
			[
				-6,
				-36
			],
			[
				-49,
				-293
			],
			[
				-1,
				-8
			],
			[
				-9,
				1
			],
			[
				-96,
				12
			],
			[
				-66,
				8
			],
			[
				-39,
				5
			],
			[
				-26,
				4
			],
			[
				-4,
				-79
			],
			[
				0,
				-16
			],
			[
				-3,
				-54
			],
			[
				-1,
				-13
			],
			[
				-3,
				-62
			],
			[
				-3,
				-60
			],
			[
				0,
				-5
			],
			[
				-1,
				-32
			],
			[
				-5,
				-92
			],
			[
				179,
				-124
			],
			[
				38,
				-76
			],
			[
				-57,
				-184
			],
			[
				-42,
				-57
			],
			[
				-60,
				-81
			],
			[
				-28,
				-14
			],
			[
				-12,
				-6
			],
			[
				-70,
				-34
			],
			[
				-15,
				-155
			]
		],
		[
			[
				7176,
				269
			],
			[
				4,
				24
			],
			[
				0,
				0
			]
		],
		[
			[
				7497,
				671
			],
			[
				53,
				22
			],
			[
				0,
				0
			]
		],
		[
			[
				11230,
				2423
			],
			[
				243,
				-189
			],
			[
				14,
				-32
			],
			[
				10,
				-22
			],
			[
				-23,
				17
			],
			[
				-15,
				11
			],
			[
				-7,
				-20
			],
			[
				-4,
				-9
			],
			[
				0,
				0
			]
		],
		[
			[
				9184,
				3188
			],
			[
				30,
				144
			],
			[
				199,
				-54
			],
			[
				47,
				13
			],
			[
				37,
				10
			],
			[
				32,
				10
			]
		],
		[
			[
				9529,
				3311
			],
			[
				-8,
				32
			],
			[
				-12,
				44
			],
			[
				-46,
				166
			],
			[
				-3,
				10
			],
			[
				3,
				1
			],
			[
				272,
				83
			],
			[
				-6,
				253
			],
			[
				101,
				-3
			],
			[
				-9,
				43
			],
			[
				95,
				35
			]
		],
		[
			[
				9916,
				3975
			],
			[
				255,
				52
			],
			[
				-7,
				90
			],
			[
				0,
				7
			],
			[
				-5,
				57
			],
			[
				62,
				284
			]
		],
		[
			[
				10221,
				4465
			],
			[
				154,
				-26
			],
			[
				115,
				-19
			],
			[
				81,
				-13
			],
			[
				80,
				111
			],
			[
				14,
				-47
			],
			[
				48,
				-169
			],
			[
				20,
				-73
			],
			[
				62,
				-216
			],
			[
				4,
				-14
			],
			[
				43,
				-87
			],
			[
				55,
				-112
			],
			[
				21,
				50
			],
			[
				11,
				28
			],
			[
				2,
				5
			],
			[
				72,
				16
			],
			[
				-1,
				42
			],
			[
				172,
				18
			],
			[
				19,
				254
			],
			[
				107,
				-10
			],
			[
				28,
				-2
			],
			[
				15,
				-1
			],
			[
				108,
				-10
			],
			[
				7,
				-129
			],
			[
				-137,
				-208
			],
			[
				-8,
				-107
			],
			[
				50,
				-37
			],
			[
				-69,
				-10
			],
			[
				-42,
				-100
			],
			[
				36,
				-134
			],
			[
				35,
				22
			],
			[
				-11,
				-46
			],
			[
				42,
				-29
			]
		],
		[
			[
				11354,
				3412
			],
			[
				-159,
				-282
			],
			[
				-148,
				-263
			],
			[
				63,
				-52
			],
			[
				-43,
				-135
			],
			[
				58,
				-32
			],
			[
				-9,
				-71
			],
			[
				114,
				-154
			]
		],
		[
			[
				11452,
				1910
			],
			[
				27,
				-33
			]
		],
		[
			[
				5921,
				4004
			],
			[
				30,
				-44
			],
			[
				-72,
				-332
			],
			[
				-18,
				-87
			],
			[
				-2,
				-6
			],
			[
				23,
				23
			],
			[
				3,
				3
			],
			[
				0,
				-1
			],
			[
				34,
				-48
			],
			[
				31,
				-110
			],
			[
				43,
				-151
			],
			[
				-39,
				-82
			],
			[
				-24,
				-53
			],
			[
				-14,
				-30
			],
			[
				-34,
				-72
			],
			[
				40,
				-300
			],
			[
				-166,
				-339
			],
			[
				-172,
				-107
			],
			[
				-42,
				-27
			],
			[
				-15,
				-9
			],
			[
				-21,
				-13
			]
		],
		[
			[
				5506,
				2219
			],
			[
				-43,
				-23
			],
			[
				-27,
				-14
			],
			[
				-6,
				-3
			],
			[
				-3,
				-2
			],
			[
				-52,
				-28
			]
		],
		[
			[
				5649,
				5404
			],
			[
				165,
				-14
			],
			[
				1,
				-22
			],
			[
				0,
				-1
			],
			[
				1,
				-65
			],
			[
				0,
				-8
			],
			[
				1,
				-66
			],
			[
				98,
				-100
			],
			[
				25,
				-111
			],
			[
				2,
				-8
			],
			[
				8,
				-36
			],
			[
				6,
				-26
			],
			[
				7,
				-28
			],
			[
				-328,
				-177
			],
			[
				-109,
				10
			],
			[
				-69,
				-84
			],
			[
				-27,
				-33
			],
			[
				-28,
				-35
			]
		],
		[
			[
				5402,
				4600
			],
			[
				68,
				-52
			],
			[
				24,
				-19
			],
			[
				32,
				-25
			],
			[
				22,
				-63
			],
			[
				39,
				-109
			]
		],
		[
			[
				5587,
				4332
			],
			[
				106,
				122
			],
			[
				67,
				-38
			],
			[
				84,
				-48
			],
			[
				47,
				33
			],
			[
				28,
				19
			],
			[
				22,
				15
			],
			[
				-53,
				-156
			],
			[
				-28,
				-81
			],
			[
				64,
				-81
			],
			[
				-3,
				-113
			]
		],
		[
			[
				18198,
				23815
			],
			[
				74,
				-153
			],
			[
				91,
				-189
			],
			[
				55,
				-113
			],
			[
				27,
				-91
			],
			[
				88,
				-285
			],
			[
				22,
				-73
			],
			[
				60,
				-195
			],
			[
				57,
				-189
			],
			[
				25,
				-81
			],
			[
				9,
				-31
			]
		],
		[
			[
				18706,
				22415
			],
			[
				-85,
				-53
			],
			[
				-61,
				-39
			],
			[
				-82,
				-52
			],
			[
				-90,
				-57
			]
		],
		[
			[
				18388,
				22214
			],
			[
				-63,
				-231
			],
			[
				-45,
				-61
			],
			[
				-88,
				-122
			],
			[
				-34,
				-46
			],
			[
				-30,
				-41
			],
			[
				-58,
				-214
			],
			[
				-9,
				-33
			],
			[
				-1,
				-3
			],
			[
				-8,
				-13
			],
			[
				-13,
				-20
			],
			[
				-42,
				-70
			],
			[
				-13,
				-20
			],
			[
				-33,
				-54
			],
			[
				-10,
				-17
			],
			[
				-63,
				-103
			],
			[
				-83,
				2
			],
			[
				-111,
				-122
			],
			[
				-78,
				-7
			],
			[
				-73,
				-6
			],
			[
				-21,
				-2
			],
			[
				-30,
				-3
			],
			[
				67,
				-212
			]
		],
		[
			[
				10145,
				6748
			],
			[
				-19,
				-183
			],
			[
				-29,
				-42
			],
			[
				-47,
				-66
			],
			[
				-20,
				-28
			],
			[
				-30,
				-42
			],
			[
				118,
				-135
			],
			[
				9,
				-10
			],
			[
				-4,
				-19
			],
			[
				-39,
				-162
			],
			[
				76,
				-104
			],
			[
				8,
				-11
			],
			[
				-37,
				-40
			],
			[
				31,
				-26
			],
			[
				5,
				-4
			],
			[
				-21,
				-92
			],
			[
				-2,
				-10
			],
			[
				-84,
				-150
			],
			[
				14,
				-83
			],
			[
				18,
				-106
			],
			[
				10,
				-61
			],
			[
				2,
				-10
			],
			[
				-58,
				-125
			],
			[
				46,
				-36
			],
			[
				-55,
				-52
			],
			[
				39,
				-156
			]
		],
		[
			[
				10076,
				4995
			],
			[
				-57,
				-113
			],
			[
				-26,
				-50
			],
			[
				-9,
				-18
			]
		],
		[
			[
				9984,
				4814
			],
			[
				179,
				-209
			],
			[
				58,
				-140
			]
		],
		[
			[
				7590,
				5765
			],
			[
				-26,
				0
			],
			[
				-336,
				7
			],
			[
				-27,
				1
			]
		],
		[
			[
				7201,
				5773
			],
			[
				157,
				217
			],
			[
				27,
				84
			],
			[
				-75,
				24
			],
			[
				-17,
				76
			],
			[
				-1,
				4
			],
			[
				10,
				3
			],
			[
				4,
				2
			],
			[
				9,
				3
			],
			[
				51,
				18
			],
			[
				0,
				0
			],
			[
				158,
				61
			],
			[
				58,
				243
			],
			[
				19,
				79
			]
		],
		[
			[
				7601,
				6587
			],
			[
				-39,
				77
			],
			[
				-73,
				145
			],
			[
				-71,
				141
			],
			[
				35,
				59
			],
			[
				64,
				-7
			],
			[
				64,
				-6
			],
			[
				34,
				-3
			],
			[
				9,
				39
			],
			[
				12,
				53
			],
			[
				-87,
				166
			],
			[
				-15,
				30
			],
			[
				-4,
				7
			],
			[
				83,
				491
			],
			[
				-26,
				125
			],
			[
				53,
				24
			],
			[
				29,
				12
			],
			[
				41,
				18
			],
			[
				10,
				4
			],
			[
				-50,
				73
			],
			[
				-34,
				50
			],
			[
				-330,
				118
			],
			[
				-203,
				72
			],
			[
				-12,
				4
			]
		],
		[
			[
				7091,
				8279
			],
			[
				-162,
				-10
			],
			[
				-11,
				-42
			]
		],
		[
			[
				18706,
				22415
			],
			[
				15,
				21
			],
			[
				9,
				12
			],
			[
				75,
				102
			],
			[
				48,
				65
			],
			[
				103,
				-151
			],
			[
				26,
				-40
			],
			[
				52,
				-76
			]
		],
		[
			[
				19034,
				22348
			],
			[
				78,
				-137
			]
		],
		[
			[
				19112,
				22211
			],
			[
				54,
				-103
			],
			[
				71,
				-136
			],
			[
				280,
				-538
			],
			[
				20,
				-41
			],
			[
				24,
				-28
			],
			[
				87,
				-105
			],
			[
				71,
				-86
			],
			[
				48,
				-59
			],
			[
				46,
				-55
			],
			[
				51,
				-63
			],
			[
				14,
				-16
			]
		],
		[
			[
				19878,
				20981
			],
			[
				23,
				-34
			],
			[
				39,
				-58
			],
			[
				122,
				-182
			]
		],
		[
			[
				20062,
				20707
			],
			[
				67,
				-104
			],
			[
				87,
				-135
			],
			[
				160,
				-250
			],
			[
				132,
				-225
			],
			[
				9,
				-119
			],
			[
				29,
				-69
			],
			[
				22,
				-49
			],
			[
				64,
				-150
			],
			[
				83,
				-489
			],
			[
				201,
				-90
			],
			[
				127,
				-184
			]
		],
		[
			[
				16406,
				26777
			],
			[
				12,
				17
			],
			[
				34,
				48
			],
			[
				73,
				103
			],
			[
				1,
				5
			],
			[
				18,
				118
			],
			[
				73,
				-11
			]
		],
		[
			[
				16617,
				27057
			],
			[
				36,
				-30
			],
			[
				48,
				36
			],
			[
				132,
				-122
			],
			[
				1,
				-1
			],
			[
				80,
				-13
			],
			[
				46,
				-101
			],
			[
				106,
				-4
			],
			[
				7,
				14
			],
			[
				76,
				157
			],
			[
				47,
				99
			],
			[
				107,
				27
			],
			[
				196,
				48
			]
		],
		[
			[
				17499,
				27167
			],
			[
				14,
				-30
			],
			[
				220,
				-470
			],
			[
				-15,
				-80
			],
			[
				173,
				-132
			],
			[
				15,
				-11
			],
			[
				281,
				-214
			],
			[
				7,
				-6
			],
			[
				77,
				-164
			],
			[
				282,
				-319
			],
			[
				4,
				-5
			],
			[
				51,
				-1
			],
			[
				2,
				0
			],
			[
				3,
				-99
			],
			[
				18,
				4
			],
			[
				11,
				2
			],
			[
				46,
				8
			],
			[
				20,
				4
			],
			[
				226,
				182
			],
			[
				14,
				-4
			],
			[
				128,
				-31
			],
			[
				47,
				-105
			],
			[
				125,
				-279
			],
			[
				22,
				-36
			],
			[
				26,
				-37
			],
			[
				39,
				-37
			],
			[
				48,
				-146
			],
			[
				44,
				-102
			],
			[
				53,
				-127
			],
			[
				116,
				-273
			],
			[
				-3,
				-11
			],
			[
				-44,
				-174
			],
			[
				-10,
				-36
			],
			[
				27,
				-58
			],
			[
				205,
				-438
			],
			[
				153,
				-329
			],
			[
				57,
				-122
			],
			[
				35,
				-76
			]
		],
		[
			[
				20016,
				23415
			],
			[
				23,
				9
			],
			[
				7,
				3
			],
			[
				105,
				41
			],
			[
				64,
				25
			],
			[
				9,
				3
			],
			[
				83,
				32
			],
			[
				75,
				29
			],
			[
				82,
				12
			],
			[
				26,
				3
			],
			[
				108,
				15
			],
			[
				52,
				28
			],
			[
				50,
				26
			],
			[
				140,
				75
			],
			[
				244,
				130
			],
			[
				19,
				10
			],
			[
				84,
				44
			],
			[
				30,
				16
			],
			[
				41,
				22
			],
			[
				10,
				5
			],
			[
				99,
				52
			],
			[
				68,
				36
			],
			[
				50,
				26
			]
		],
		[
			[
				21485,
				24057
			],
			[
				86,
				182
			],
			[
				132,
				277
			]
		],
		[
			[
				21703,
				24516
			],
			[
				-57,
				33
			],
			[
				-83,
				219
			],
			[
				-30,
				10
			],
			[
				-92,
				34
			],
			[
				-87,
				117
			],
			[
				-55,
				76
			],
			[
				3,
				88
			],
			[
				-92,
				79
			],
			[
				-21,
				59
			],
			[
				-16,
				47
			],
			[
				-76,
				215
			],
			[
				-22,
				61
			],
			[
				-40,
				319
			],
			[
				10,
				11
			],
			[
				5,
				5
			],
			[
				32,
				31
			],
			[
				21,
				21
			],
			[
				21,
				20
			],
			[
				113,
				112
			],
			[
				8,
				3
			],
			[
				42,
				22
			],
			[
				-4,
				73
			],
			[
				-2,
				18
			],
			[
				13,
				16
			],
			[
				35,
				43
			],
			[
				41,
				118
			],
			[
				7,
				20
			],
			[
				-21,
				136
			],
			[
				-5,
				33
			],
			[
				0,
				5
			],
			[
				1,
				4
			],
			[
				7,
				27
			],
			[
				15,
				56
			],
			[
				-14,
				53
			],
			[
				-53,
				201
			],
			[
				-39,
				143
			],
			[
				-154,
				319
			],
			[
				-140,
				287
			],
			[
				-9,
				39
			],
			[
				-70,
				293
			],
			[
				-37,
				154
			],
			[
				-13,
				55
			],
			[
				-83,
				113
			],
			[
				-63,
				86
			]
		],
		[
			[
				20699,
				28390
			],
			[
				47,
				6
			],
			[
				142,
				19
			],
			[
				105,
				13
			],
			[
				64,
				8
			],
			[
				29,
				4
			],
			[
				15,
				2
			],
			[
				66,
				8
			],
			[
				40,
				77
			],
			[
				52,
				99
			]
		],
		[
			[
				21259,
				28626
			],
			[
				60,
				-17
			],
			[
				47,
				-14
			],
			[
				149,
				-42
			],
			[
				120,
				-184
			],
			[
				26,
				-39
			],
			[
				69,
				36
			],
			[
				-5,
				222
			],
			[
				-4,
				189
			],
			[
				-5,
				229
			],
			[
				-6,
				251
			],
			[
				-150,
				296
			],
			[
				105,
				269
			],
			[
				79,
				27
			],
			[
				-60,
				113
			]
		],
		[
			[
				22851,
				20693
			],
			[
				37,
				-95
			],
			[
				54,
				-139
			],
			[
				41,
				-108
			],
			[
				51,
				-129
			],
			[
				61,
				-153
			],
			[
				34,
				-87
			],
			[
				32,
				-80
			],
			[
				18,
				-45
			],
			[
				1,
				-25
			],
			[
				0,
				-41
			],
			[
				4,
				-192
			],
			[
				11,
				-57
			]
		],
		[
			[
				23195,
				19542
			],
			[
				7,
				-38
			],
			[
				27,
				-139
			],
			[
				0,
				-1
			],
			[
				3,
				-12
			],
			[
				32,
				-128
			],
			[
				11,
				-45
			],
			[
				18,
				-75
			],
			[
				12,
				-52
			],
			[
				22,
				-92
			],
			[
				39,
				-160
			],
			[
				2,
				-7
			],
			[
				46,
				-78
			],
			[
				34,
				-58
			],
			[
				22,
				-36
			],
			[
				91,
				-153
			],
			[
				5,
				-7
			],
			[
				0,
				0
			],
			[
				13,
				-25
			],
			[
				49,
				-94
			],
			[
				36,
				-70
			],
			[
				52,
				-102
			],
			[
				6,
				-122
			],
			[
				0,
				0
			],
			[
				9,
				-166
			],
			[
				52,
				-89
			],
			[
				49,
				-83
			],
			[
				0,
				0
			],
			[
				59,
				-99
			],
			[
				39,
				-64
			],
			[
				50,
				-172
			]
		],
		[
			[
				23980,
				17375
			],
			[
				0,
				0
			],
			[
				24,
				-83
			],
			[
				1,
				-5
			],
			[
				0,
				-141
			],
			[
				-1,
				-101
			],
			[
				0,
				-65
			],
			[
				0,
				-129
			],
			[
				-1,
				-33
			],
			[
				0,
				-111
			],
			[
				0,
				0
			],
			[
				0,
				-147
			],
			[
				-45,
				-99
			],
			[
				-15,
				-33
			],
			[
				-1,
				-1
			],
			[
				0,
				-1
			],
			[
				-19,
				-42
			],
			[
				-29,
				-64
			],
			[
				-60,
				-129
			],
			[
				-7,
				-15
			],
			[
				0,
				0
			],
			[
				-1,
				-2
			],
			[
				-28,
				-37
			],
			[
				0,
				0
			],
			[
				-1,
				-2
			],
			[
				-6,
				-7
			],
			[
				-50,
				-57
			],
			[
				-45,
				-52
			],
			[
				-17,
				-19
			],
			[
				0,
				0
			],
			[
				7,
				-115
			],
			[
				0,
				0
			],
			[
				3,
				-49
			],
			[
				0,
				0
			],
			[
				7,
				-125
			],
			[
				0,
				0
			],
			[
				5,
				-30
			]
		],
		[
			[
				23701,
				15681
			],
			[
				1,
				-9
			],
			[
				22,
				-135
			],
			[
				4,
				-24
			],
			[
				0,
				0
			],
			[
				16,
				-100
			],
			[
				15,
				-94
			],
			[
				24,
				-98
			],
			[
				26,
				-108
			],
			[
				0,
				0
			],
			[
				-36,
				-186
			],
			[
				0,
				0
			],
			[
				-1,
				-4
			],
			[
				-18,
				-94
			],
			[
				-21,
				-105
			],
			[
				0,
				0
			],
			[
				-34,
				-179
			],
			[
				-9,
				-47
			],
			[
				-1,
				-9
			],
			[
				-3,
				-11
			],
			[
				-1,
				-7
			],
			[
				-3,
				-10
			],
			[
				-7,
				-19
			],
			[
				-51,
				-149
			],
			[
				-62,
				-149
			],
			[
				-9,
				-21
			],
			[
				-25,
				-60
			],
			[
				-38,
				-45
			],
			[
				-33,
				-41
			],
			[
				-69,
				-58
			],
			[
				-19,
				-17
			],
			[
				0,
				0
			],
			[
				-45,
				-92
			],
			[
				-9,
				-19
			],
			[
				-2,
				-3
			],
			[
				-24,
				-50
			],
			[
				-32,
				-66
			]
		],
		[
			[
				23257,
				13672
			],
			[
				-14,
				-30
			],
			[
				-39,
				-80
			],
			[
				-64,
				-50
			],
			[
				-69,
				-54
			],
			[
				-50,
				-39
			],
			[
				-22,
				-17
			],
			[
				-92,
				-72
			],
			[
				-6,
				-4
			],
			[
				-19,
				-15
			],
			[
				-2,
				-2
			],
			[
				-8,
				-6
			],
			[
				-22,
				-33
			],
			[
				-47,
				-69
			],
			[
				-52,
				-76
			],
			[
				-50,
				-79
			],
			[
				0,
				0
			],
			[
				-5,
				-2
			],
			[
				-51,
				-19
			],
			[
				-1,
				0
			],
			[
				-65,
				36
			],
			[
				-23,
				13
			],
			[
				-23,
				-6
			],
			[
				-56,
				-16
			],
			[
				-140,
				-32
			],
			[
				-18,
				5
			],
			[
				-6,
				2
			],
			[
				-5,
				2
			],
			[
				-9,
				3
			],
			[
				-1,
				1
			],
			[
				-21,
				7
			],
			[
				-6,
				2
			],
			[
				-5,
				3
			],
			[
				-6,
				3
			],
			[
				-4,
				2
			],
			[
				-3,
				1
			],
			[
				-5,
				3
			],
			[
				-74,
				36
			],
			[
				-36,
				18
			],
			[
				-1,
				1
			],
			[
				-1,
				1
			],
			[
				-5,
				10
			],
			[
				-3,
				-1
			],
			[
				-127,
				-71
			],
			[
				0,
				0
			],
			[
				-1,
				-1
			],
			[
				-20,
				-20
			],
			[
				-7,
				-4
			],
			[
				-13,
				-8
			],
			[
				-15,
				-16
			],
			[
				-7,
				-17
			],
			[
				1,
				-3
			],
			[
				3,
				-30
			],
			[
				-18,
				-19
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				-15,
				-6
			],
			[
				-10,
				4
			],
			[
				-39,
				-3
			],
			[
				-30,
				-1
			],
			[
				-2,
				0
			],
			[
				-8,
				-18
			],
			[
				-2,
				-15
			],
			[
				6,
				-27
			],
			[
				0,
				0
			],
			[
				15,
				-27
			],
			[
				-10,
				-21
			],
			[
				-47,
				-43
			],
			[
				-52,
				-32
			],
			[
				-35,
				-22
			],
			[
				-2,
				-7
			]
		],
		[
			[
				12883,
				39208
			],
			[
				-17,
				-8
			],
			[
				-22,
				-58
			],
			[
				-35,
				-29
			],
			[
				-43,
				-13
			],
			[
				-17,
				28
			],
			[
				2,
				45
			],
			[
				-11,
				42
			],
			[
				81,
				61
			],
			[
				35,
				4
			],
			[
				21,
				-11
			],
			[
				41,
				-19
			],
			[
				8,
				-22
			],
			[
				-43,
				-20
			]
		],
		[
			[
				13422,
				40908
			],
			[
				-95,
				-88
			],
			[
				-52,
				52
			],
			[
				22,
				47
			],
			[
				57,
				49
			],
			[
				68,
				-60
			]
		],
		[
			[
				13697,
				41342
			],
			[
				-57,
				-100
			],
			[
				-68,
				30
			],
			[
				34,
				105
			],
			[
				91,
				-35
			]
		],
		[
			[
				12509,
				39656
			],
			[
				-11,
				-75
			],
			[
				94,
				104
			],
			[
				-15,
				-101
			],
			[
				10,
				-146
			],
			[
				0,
				0
			],
			[
				-84,
				-34
			],
			[
				85,
				2
			],
			[
				32,
				-44
			],
			[
				38,
				-54
			],
			[
				-16,
				-58
			],
			[
				-15,
				-58
			],
			[
				24,
				-65
			],
			[
				10,
				-27
			],
			[
				-37,
				-121
			],
			[
				-57,
				-10
			],
			[
				-16,
				-2
			],
			[
				-30,
				-52
			],
			[
				-67,
				-20
			],
			[
				-226,
				-3
			],
			[
				-11,
				-30
			],
			[
				-182,
				-45
			],
			[
				-13,
				19
			],
			[
				-377,
				-99
			],
			[
				-107,
				-2
			],
			[
				-16,
				38
			],
			[
				126,
				40
			],
			[
				200,
				52
			],
			[
				-4,
				35
			],
			[
				-132,
				-20
			],
			[
				-131,
				-49
			],
			[
				-137,
				-34
			],
			[
				0,
				40
			],
			[
				-71,
				17
			],
			[
				-81,
				-8
			],
			[
				-27,
				-41
			],
			[
				-51,
				-55
			],
			[
				-87,
				-6
			],
			[
				-82,
				-18
			],
			[
				21,
				58
			],
			[
				-91,
				13
			],
			[
				-14,
				57
			],
			[
				200,
				70
			],
			[
				273,
				53
			],
			[
				-9,
				51
			],
			[
				125,
				4
			],
			[
				-42,
				-65
			],
			[
				85,
				54
			],
			[
				210,
				41
			],
			[
				27,
				-29
			],
			[
				3,
				-4
			],
			[
				13,
				16
			],
			[
				30,
				38
			],
			[
				38,
				10
			],
			[
				1,
				1
			],
			[
				0,
				0
			],
			[
				6,
				27
			],
			[
				-99,
				-23
			],
			[
				45,
				56
			],
			[
				110,
				-5
			],
			[
				8,
				57
			],
			[
				94,
				14
			],
			[
				-78,
				39
			],
			[
				251,
				157
			],
			[
				129,
				36
			],
			[
				72,
				20
			],
			[
				1,
				13
			],
			[
				2,
				24
			],
			[
				-59,
				-15
			],
			[
				58,
				211
			],
			[
				54,
				-49
			]
		],
		[
			[
				12825,
				39472
			],
			[
				-80,
				-78
			],
			[
				-49,
				50
			],
			[
				-42,
				-24
			],
			[
				-27,
				-3
			],
			[
				-10,
				33
			],
			[
				58,
				54
			],
			[
				15,
				14
			],
			[
				95,
				39
			],
			[
				17,
				-19
			],
			[
				33,
				-42
			],
			[
				-10,
				-24
			]
		],
		[
			[
				12375,
				39520
			],
			[
				-27,
				-49
			],
			[
				-65,
				-13
			],
			[
				11,
				42
			],
			[
				-39,
				-31
			],
			[
				-37,
				-33
			],
			[
				-91,
				-25
			],
			[
				-14,
				78
			],
			[
				72,
				47
			],
			[
				51,
				35
			],
			[
				65,
				97
			],
			[
				62,
				42
			],
			[
				45,
				9
			],
			[
				3,
				-25
			],
			[
				-79,
				-141
			],
			[
				43,
				-33
			]
		],
		[
			[
				12190,
				39569
			],
			[
				-45,
				-16
			],
			[
				-37,
				5
			],
			[
				-96,
				-37
			],
			[
				-8,
				34
			],
			[
				123,
				107
			],
			[
				73,
				16
			],
			[
				57,
				8
			],
			[
				-2,
				-26
			],
			[
				-39,
				-57
			],
			[
				-26,
				-34
			]
		],
		[
			[
				12152,
				40157
			],
			[
				-65,
				-178
			],
			[
				-38,
				-2
			],
			[
				-26,
				-36
			],
			[
				-36,
				21
			],
			[
				14,
				53
			],
			[
				57,
				45
			],
			[
				-3,
				51
			],
			[
				97,
				46
			]
		],
		[
			[
				11590,
				39997
			],
			[
				-80,
				-76
			],
			[
				-48,
				46
			],
			[
				4,
				30
			],
			[
				76,
				47
			],
			[
				45,
				-18
			],
			[
				3,
				-29
			]
		],
		[
			[
				13034,
				37610
			],
			[
				-39,
				-21
			],
			[
				-83,
				-19
			],
			[
				-24,
				-34
			],
			[
				-63,
				-18
			],
			[
				-168,
				-51
			],
			[
				-71,
				24
			],
			[
				-8,
				23
			],
			[
				-1,
				4
			],
			[
				-17,
				3
			],
			[
				-2,
				0
			],
			[
				-11,
				3
			],
			[
				-4,
				-2
			],
			[
				-44,
				-19
			],
			[
				-62,
				-49
			],
			[
				-45,
				-6
			],
			[
				26,
				52
			],
			[
				-19,
				-6
			],
			[
				-198,
				-60
			],
			[
				-107,
				-32
			],
			[
				-53,
				-13
			],
			[
				-98,
				-48
			],
			[
				-12,
				-6
			],
			[
				-15,
				-16
			],
			[
				-118,
				-117
			],
			[
				-34,
				-37
			],
			[
				-42,
				-39
			],
			[
				-101,
				7
			],
			[
				-144,
				0
			],
			[
				-74,
				8
			],
			[
				-41,
				13
			],
			[
				-12,
				4
			],
			[
				-43,
				-38
			],
			[
				-34,
				8
			],
			[
				-15,
				31
			],
			[
				41,
				20
			],
			[
				-90,
				17
			],
			[
				-19,
				42
			],
			[
				73,
				23
			],
			[
				-84,
				22
			],
			[
				56,
				33
			],
			[
				-175,
				4
			],
			[
				49,
				113
			],
			[
				-59,
				-17
			],
			[
				22,
				71
			],
			[
				98,
				96
			],
			[
				38,
				37
			],
			[
				-22,
				8
			],
			[
				-23,
				8
			],
			[
				-98,
				-84
			],
			[
				-41,
				-16
			],
			[
				28,
				82
			],
			[
				297,
				311
			],
			[
				277,
				107
			],
			[
				174,
				-65
			],
			[
				133,
				68
			],
			[
				45,
				24
			],
			[
				108,
				31
			],
			[
				111,
				-50
			],
			[
				44,
				-6
			],
			[
				64,
				-10
			],
			[
				11,
				-1
			],
			[
				-36,
				61
			],
			[
				-65,
				-15
			],
			[
				-21,
				45
			],
			[
				-51,
				-12
			],
			[
				-43,
				18
			],
			[
				-68,
				29
			],
			[
				-63,
				61
			],
			[
				-186,
				63
			],
			[
				111,
				103
			],
			[
				70,
				37
			],
			[
				90,
				-22
			],
			[
				44,
				63
			],
			[
				120,
				-8
			],
			[
				-5,
				30
			],
			[
				138,
				38
			],
			[
				107,
				22
			],
			[
				248,
				52
			],
			[
				29,
				-42
			],
			[
				-32,
				-39
			],
			[
				16,
				-57
			],
			[
				-48,
				-27
			],
			[
				61,
				-91
			],
			[
				7,
				46
			],
			[
				43,
				29
			],
			[
				45,
				26
			],
			[
				58,
				31
			],
			[
				-128,
				32
			],
			[
				5,
				97
			],
			[
				35,
				28
			],
			[
				69,
				5
			],
			[
				-27,
				-55
			],
			[
				98,
				68
			],
			[
				40,
				28
			],
			[
				145,
				1
			],
			[
				8,
				-73
			],
			[
				2,
				-18
			],
			[
				-86,
				-105
			],
			[
				-69,
				-17
			],
			[
				-19,
				-5
			],
			[
				21,
				-5
			],
			[
				123,
				-35
			],
			[
				-9,
				-126
			],
			[
				-58,
				-118
			],
			[
				37,
				10
			],
			[
				37,
				49
			],
			[
				33,
				-47
			],
			[
				47,
				122
			],
			[
				80,
				21
			],
			[
				75,
				-53
			],
			[
				6,
				-5
			],
			[
				2,
				18
			],
			[
				4,
				27
			],
			[
				63,
				2
			],
			[
				55,
				-48
			],
			[
				45,
				-39
			],
			[
				64,
				-55
			],
			[
				-62,
				-167
			],
			[
				72,
				12
			],
			[
				12,
				69
			],
			[
				86,
				47
			],
			[
				46,
				-55
			],
			[
				-13,
				-59
			],
			[
				-71,
				-69
			],
			[
				-55,
				-21
			],
			[
				-20,
				-51
			],
			[
				-90,
				-86
			],
			[
				-38,
				-20
			],
			[
				-82,
				-42
			],
			[
				-57,
				-20
			],
			[
				-121,
				-41
			],
			[
				-44,
				-14
			],
			[
				-7,
				22
			],
			[
				-42,
				-15
			],
			[
				-16,
				-29
			],
			[
				-47,
				-23
			]
		],
		[
			[
				13462,
				38805
			],
			[
				10,
				-42
			],
			[
				-163,
				-6
			],
			[
				-68,
				27
			],
			[
				-6,
				47
			],
			[
				44,
				42
			],
			[
				56,
				5
			],
			[
				69,
				-22
			],
			[
				58,
				-51
			]
		],
		[
			[
				13511,
				38677
			],
			[
				-45,
				-51
			],
			[
				63,
				17
			],
			[
				66,
				33
			],
			[
				64,
				-57
			],
			[
				-10,
				-71
			],
			[
				-84,
				-52
			],
			[
				-14,
				43
			],
			[
				-27,
				-4
			],
			[
				-25,
				-45
			],
			[
				-3,
				-32
			],
			[
				-119,
				-78
			],
			[
				-196,
				39
			],
			[
				1,
				30
			],
			[
				33,
				124
			],
			[
				48,
				-22
			],
			[
				1,
				-30
			],
			[
				66,
				34
			],
			[
				-82,
				44
			],
			[
				33,
				48
			],
			[
				3,
				34
			],
			[
				2,
				19
			],
			[
				0,
				10
			],
			[
				97,
				11
			],
			[
				114,
				-3
			],
			[
				14,
				-41
			]
		],
		[
			[
				12722,
				38683
			],
			[
				-39,
				-46
			],
			[
				-47,
				-18
			],
			[
				-32,
				-10
			],
			[
				-64,
				-11
			],
			[
				-66,
				-6
			],
			[
				-34,
				-5
			],
			[
				-116,
				-19
			],
			[
				-11,
				-22
			],
			[
				-165,
				-45
			],
			[
				-30,
				86
			],
			[
				66,
				29
			],
			[
				28,
				-24
			],
			[
				25,
				5
			],
			[
				44,
				60
			],
			[
				18,
				-31
			],
			[
				65,
				13
			],
			[
				47,
				14
			],
			[
				44,
				15
			],
			[
				101,
				-41
			],
			[
				7,
				32
			],
			[
				-89,
				49
			],
			[
				72,
				19
			],
			[
				23,
				-3
			],
			[
				79,
				-8
			],
			[
				66,
				5
			],
			[
				8,
				-38
			]
		],
		[
			[
				11332,
				38241
			],
			[
				46,
				-27
			],
			[
				3,
				-3
			],
			[
				6,
				-19
			],
			[
				-10,
				-19
			],
			[
				-64,
				-91
			],
			[
				-26,
				5
			],
			[
				-22,
				10
			],
			[
				15,
				24
			],
			[
				-40,
				40
			],
			[
				-27,
				16
			],
			[
				9,
				39
			],
			[
				17,
				-1
			],
			[
				6,
				-1
			],
			[
				49,
				9
			],
			[
				38,
				18
			]
		],
		[
			[
				11864,
				38054
			],
			[
				-45,
				-19
			],
			[
				-58,
				31
			],
			[
				-98,
				9
			],
			[
				-35,
				39
			],
			[
				99,
				108
			],
			[
				129,
				-6
			],
			[
				32,
				-1
			],
			[
				4,
				0
			],
			[
				1,
				-3
			],
			[
				7,
				-34
			],
			[
				48,
				-36
			],
			[
				50,
				-6
			],
			[
				-60,
				-50
			],
			[
				-74,
				-32
			]
		],
		[
			[
				11125,
				37192
			],
			[
				-8,
				-26
			],
			[
				-32,
				9
			],
			[
				-26,
				11
			],
			[
				-67,
				57
			],
			[
				-7,
				18
			],
			[
				20,
				26
			],
			[
				101,
				6
			],
			[
				17,
				0
			],
			[
				15,
				-7
			],
			[
				-26,
				-67
			],
			[
				13,
				-27
			]
		],
		[
			[
				24237,
				40853
			],
			[
				-97,
				-168
			],
			[
				-126,
				-219
			],
			[
				-96,
				-166
			],
			[
				-5,
				-9
			],
			[
				-115,
				-200
			],
			[
				-103,
				-174
			],
			[
				-16,
				-28
			],
			[
				-55,
				-94
			],
			[
				0,
				0
			],
			[
				-72,
				-113
			],
			[
				-47,
				-74
			],
			[
				0,
				0
			],
			[
				-58,
				-90
			],
			[
				-42,
				-66
			],
			[
				-16,
				-24
			],
			[
				-19,
				-30
			],
			[
				-47,
				-73
			],
			[
				-96,
				-150
			],
			[
				-5,
				-8
			],
			[
				-50,
				-78
			],
			[
				-35,
				-110
			],
			[
				-22,
				-70
			],
			[
				-36,
				-113
			],
			[
				-122,
				-156
			],
			[
				0,
				0
			],
			[
				-80,
				-103
			],
			[
				-16,
				-21
			],
			[
				-90,
				-97
			],
			[
				-39,
				-41
			],
			[
				-33,
				-36
			],
			[
				-72,
				-78
			]
		],
		[
			[
				18961,
				38040
			],
			[
				1,
				1
			],
			[
				-74,
				-9
			],
			[
				23,
				54
			],
			[
				-172,
				-36
			],
			[
				36,
				65
			],
			[
				-22,
				12
			],
			[
				-31,
				-17
			],
			[
				-10,
				24
			],
			[
				70,
				63
			],
			[
				-7,
				35
			],
			[
				83,
				-37
			],
			[
				66,
				22
			],
			[
				-35,
				41
			],
			[
				-52,
				-3
			],
			[
				68,
				81
			],
			[
				55,
				41
			],
			[
				-97,
				0
			],
			[
				0,
				0
			]
		],
		[
			[
				18829,
				38800
			],
			[
				0,
				0
			],
			[
				53,
				73
			],
			[
				69,
				41
			],
			[
				77,
				88
			],
			[
				137,
				-1
			],
			[
				26,
				88
			],
			[
				105,
				-30
			],
			[
				1,
				-22
			],
			[
				3,
				-81
			],
			[
				95,
				35
			],
			[
				3,
				55
			],
			[
				36,
				11
			],
			[
				-2,
				-50
			],
			[
				13,
				6
			],
			[
				55,
				30
			],
			[
				61,
				-14
			],
			[
				59,
				-13
			],
			[
				10,
				34
			],
			[
				-29,
				21
			],
			[
				7,
				36
			],
			[
				114,
				-42
			],
			[
				83,
				57
			],
			[
				-20,
				234
			],
			[
				15,
				28
			],
			[
				38,
				11
			],
			[
				41,
				-25
			],
			[
				76,
				39
			],
			[
				24,
				28
			],
			[
				40,
				-20
			],
			[
				15,
				-76
			],
			[
				22,
				6
			],
			[
				6,
				1
			],
			[
				91,
				22
			],
			[
				48,
				46
			],
			[
				-45,
				48
			],
			[
				124,
				15
			],
			[
				55,
				62
			],
			[
				68,
				-64
			],
			[
				4,
				-29
			],
			[
				32,
				-3
			],
			[
				26,
				67
			]
		],
		[
			[
				20465,
				39512
			],
			[
				0,
				0
			],
			[
				24,
				58
			],
			[
				-22,
				44
			],
			[
				11,
				35
			],
			[
				39,
				-16
			],
			[
				35,
				58
			],
			[
				-45,
				11
			],
			[
				-28,
				51
			],
			[
				-110,
				27
			],
			[
				4,
				41
			],
			[
				102,
				-3
			],
			[
				7,
				66
			],
			[
				-54,
				15
			],
			[
				-8,
				9
			],
			[
				0,
				0
			]
		],
		[
			[
				20420,
				39908
			],
			[
				-4,
				5
			],
			[
				-25,
				29
			],
			[
				-2,
				36
			],
			[
				-3,
				2
			],
			[
				-35,
				14
			],
			[
				-20,
				-58
			],
			[
				-61,
				-31
			],
			[
				-85,
				27
			],
			[
				-35,
				-13
			],
			[
				-33,
				9
			],
			[
				-30,
				35
			],
			[
				-9,
				43
			],
			[
				37,
				29
			],
			[
				-62,
				44
			],
			[
				14,
				29
			],
			[
				3,
				6
			],
			[
				104,
				-42
			],
			[
				3,
				-2
			],
			[
				66,
				43
			],
			[
				59,
				106
			],
			[
				-1,
				2
			],
			[
				-8,
				31
			],
			[
				0,
				0
			]
		],
		[
			[
				20293,
				40252
			],
			[
				-3,
				11
			],
			[
				-43,
				39
			],
			[
				-30,
				3
			],
			[
				7,
				26
			],
			[
				23,
				96
			],
			[
				49,
				4
			],
			[
				5,
				48
			],
			[
				-25,
				24
			],
			[
				5,
				28
			],
			[
				9,
				43
			],
			[
				29,
				87
			],
			[
				-29,
				23
			],
			[
				0,
				0
			],
			[
				0,
				0
			]
		],
		[
			[
				20290,
				40684
			],
			[
				-97,
				-76
			],
			[
				-4,
				-14
			],
			[
				-6,
				-23
			],
			[
				16,
				-27
			],
			[
				3,
				-6
			],
			[
				-5,
				-27
			],
			[
				-33,
				-11
			],
			[
				-9,
				-3
			],
			[
				-32,
				-47
			],
			[
				32,
				-137
			],
			[
				-76,
				-96
			],
			[
				-1,
				-4
			],
			[
				-8,
				-60
			],
			[
				-22,
				-4
			],
			[
				-78,
				-13
			],
			[
				0,
				-30
			],
			[
				-68,
				-17
			],
			[
				-1,
				52
			],
			[
				-30,
				3
			],
			[
				-11,
				1
			],
			[
				-22,
				-32
			],
			[
				-13,
				-20
			],
			[
				-14,
				-6
			],
			[
				-72,
				-33
			],
			[
				-38,
				-67
			],
			[
				0,
				-1
			],
			[
				-2,
				-1
			],
			[
				-109,
				-49
			],
			[
				-147,
				-7
			],
			[
				-30,
				32
			],
			[
				-3,
				11
			],
			[
				-31,
				119
			],
			[
				4,
				158
			],
			[
				121,
				84
			],
			[
				46,
				64
			],
			[
				5,
				8
			],
			[
				3,
				-6
			],
			[
				14,
				-30
			],
			[
				53,
				10
			],
			[
				53,
				43
			],
			[
				48,
				38
			],
			[
				8,
				-26
			],
			[
				48,
				44
			],
			[
				5,
				4
			],
			[
				5,
				63
			],
			[
				5,
				56
			],
			[
				4,
				3
			],
			[
				127,
				103
			],
			[
				85,
				157
			],
			[
				84,
				-45
			],
			[
				14,
				-47
			],
			[
				124,
				87
			],
			[
				32,
				-3
			],
			[
				14,
				-52
			],
			[
				3,
				1
			]
		],
		[
			[
				20284,
				40805
			],
			[
				0,
				0
			],
			[
				33,
				11
			],
			[
				-6,
				73
			],
			[
				-1,
				3
			],
			[
				45,
				33
			],
			[
				14,
				-36
			],
			[
				186,
				150
			],
			[
				63,
				47
			],
			[
				-22,
				41
			],
			[
				-34,
				-22
			],
			[
				-94,
				17
			],
			[
				33,
				48
			],
			[
				-34,
				54
			],
			[
				-45,
				-14
			],
			[
				-46,
				-14
			],
			[
				-86,
				-42
			],
			[
				-32,
				145
			],
			[
				-138,
				-50
			],
			[
				-5,
				46
			],
			[
				-104,
				-19
			],
			[
				-59,
				-68
			],
			[
				-60,
				5
			],
			[
				-19,
				150
			],
			[
				-10,
				152
			],
			[
				99,
				16
			],
			[
				45,
				22
			],
			[
				4,
				2
			],
			[
				185,
				126
			],
			[
				26,
				18
			],
			[
				53,
				-4
			],
			[
				51,
				43
			],
			[
				8,
				7
			],
			[
				-3,
				11
			],
			[
				-6,
				29
			],
			[
				-143,
				-1
			],
			[
				-15,
				5
			],
			[
				-19,
				7
			],
			[
				-48,
				17
			],
			[
				-7,
				2
			],
			[
				-5,
				-24
			],
			[
				0,
				0
			]
		],
		[
			[
				20088,
				41791
			],
			[
				-6,
				-27
			],
			[
				-8,
				-33
			],
			[
				0,
				-2
			],
			[
				50,
				-16
			],
			[
				-45,
				-63
			],
			[
				-94,
				-64
			],
			[
				-19,
				-13
			],
			[
				-100,
				-27
			],
			[
				-47,
				-12
			],
			[
				-29,
				-140
			],
			[
				33,
				-211
			],
			[
				-48,
				-106
			],
			[
				-83,
				-52
			],
			[
				-37,
				-43
			],
			[
				-164,
				-62
			],
			[
				-13,
				-10
			],
			[
				-108,
				-80
			],
			[
				-157,
				-105
			],
			[
				-17,
				-67
			],
			[
				-59,
				-17
			],
			[
				-158,
				-176
			],
			[
				-51,
				-86
			],
			[
				-211,
				-147
			],
			[
				-222,
				-107
			],
			[
				-208,
				-116
			],
			[
				-68,
				-34
			],
			[
				-244,
				-242
			],
			[
				-49,
				-26
			],
			[
				10,
				-54
			],
			[
				115,
				83
			],
			[
				25,
				16
			]
		],
		[
			[
				18076,
				39752
			],
			[
				0,
				0
			],
			[
				22,
				15
			],
			[
				57,
				8
			],
			[
				48,
				88
			],
			[
				-15,
				28
			],
			[
				60,
				54
			],
			[
				1,
				-45
			],
			[
				62,
				63
			],
			[
				109,
				41
			],
			[
				50,
				-14
			],
			[
				121,
				38
			],
			[
				128,
				81
			],
			[
				7,
				44
			],
			[
				250,
				188
			],
			[
				8,
				33
			],
			[
				68,
				20
			],
			[
				26,
				-82
			],
			[
				213,
				-105
			],
			[
				4,
				-3
			],
			[
				2,
				-33
			],
			[
				7,
				-103
			],
			[
				19,
				-31
			],
			[
				47,
				-78
			],
			[
				-2,
				-10
			],
			[
				-8,
				-27
			],
			[
				-54,
				-35
			],
			[
				-2,
				-2
			],
			[
				-99,
				-64
			],
			[
				-29,
				-19
			],
			[
				-20,
				-13
			],
			[
				29,
				-75
			],
			[
				11,
				-27
			],
			[
				-9,
				-50
			],
			[
				-1,
				-5
			],
			[
				-84,
				-163
			],
			[
				-73,
				-163
			],
			[
				-38,
				-46
			],
			[
				-9,
				-11
			],
			[
				-279,
				-134
			],
			[
				0,
				0
			]
		],
		[
			[
				19865,
				39713
			],
			[
				-84,
				-83
			],
			[
				-26,
				-13
			],
			[
				-42,
				31
			],
			[
				-46,
				0
			],
			[
				-71,
				0
			],
			[
				-23,
				-73
			],
			[
				-102,
				-67
			],
			[
				-64,
				-92
			],
			[
				-88,
				-15
			],
			[
				-7,
				-50
			],
			[
				-43,
				-66
			],
			[
				-101,
				-4
			],
			[
				-10,
				38
			],
			[
				60,
				116
			],
			[
				41,
				50
			],
			[
				12,
				49
			],
			[
				-8,
				31
			],
			[
				11,
				50
			],
			[
				52,
				55
			],
			[
				65,
				-21
			],
			[
				113,
				12
			],
			[
				102,
				42
			],
			[
				143,
				81
			],
			[
				91,
				0
			],
			[
				25,
				-71
			]
		],
		[
			[
				1028,
				25361
			],
			[
				0,
				0
			],
			[
				-13,
				51
			],
			[
				-1,
				2
			],
			[
				-28,
				50
			],
			[
				-4,
				62
			],
			[
				30,
				14
			],
			[
				43,
				-38
			],
			[
				26,
				-4
			],
			[
				16,
				-2
			],
			[
				0,
				4
			],
			[
				3,
				30
			],
			[
				-75,
				42
			],
			[
				4,
				41
			],
			[
				30,
				34
			],
			[
				74,
				48
			],
			[
				45,
				73
			],
			[
				52,
				7
			],
			[
				63,
				-37
			],
			[
				13,
				0
			],
			[
				30,
				2
			],
			[
				53,
				-108
			],
			[
				7,
				-231
			],
			[
				44,
				23
			],
			[
				-12,
				239
			],
			[
				92,
				-66
			],
			[
				53,
				-97
			],
			[
				-21,
				-102
			],
			[
				17,
				-22
			],
			[
				18,
				14
			],
			[
				26,
				137
			],
			[
				37,
				3
			],
			[
				17,
				-24
			],
			[
				65,
				15
			],
			[
				13,
				34
			],
			[
				-89,
				57
			],
			[
				-97,
				30
			],
			[
				-33,
				-3
			],
			[
				-3,
				11
			],
			[
				-7,
				28
			],
			[
				12,
				69
			],
			[
				55,
				45
			],
			[
				53,
				-17
			],
			[
				37,
				-11
			],
			[
				52,
				15
			],
			[
				7,
				7
			],
			[
				15,
				15
			],
			[
				74,
				-6
			],
			[
				22,
				39
			],
			[
				47,
				-37
			],
			[
				69,
				37
			],
			[
				20,
				18
			],
			[
				-24,
				30
			],
			[
				-90,
				21
			],
			[
				-169,
				-36
			],
			[
				-44,
				-32
			],
			[
				-34,
				28
			],
			[
				-79,
				-2
			],
			[
				-65,
				-94
			],
			[
				-17,
				9
			],
			[
				-11,
				34
			],
			[
				-43,
				-18
			],
			[
				-38,
				-9
			],
			[
				-14,
				18
			],
			[
				16,
				86
			],
			[
				65,
				87
			],
			[
				20,
				24
			],
			[
				74,
				87
			],
			[
				91,
				46
			],
			[
				55,
				-20
			],
			[
				66,
				15
			],
			[
				1,
				0
			],
			[
				41,
				40
			],
			[
				190,
				49
			],
			[
				29,
				7
			],
			[
				29,
				7
			],
			[
				23,
				35
			],
			[
				-82,
				0
			],
			[
				-4,
				29
			],
			[
				31,
				40
			],
			[
				60,
				32
			],
			[
				116,
				-10
			],
			[
				69,
				-7
			],
			[
				2,
				26
			],
			[
				0,
				12
			],
			[
				-84,
				20
			],
			[
				-175,
				39
			],
			[
				41,
				88
			],
			[
				3,
				6
			],
			[
				19,
				11
			],
			[
				23,
				12
			],
			[
				17,
				37
			],
			[
				20,
				44
			],
			[
				33,
				36
			],
			[
				100,
				108
			],
			[
				143,
				70
			],
			[
				24,
				-21
			],
			[
				45,
				-40
			],
			[
				15,
				-14
			],
			[
				10,
				-8
			],
			[
				1,
				-2
			],
			[
				1,
				1
			],
			[
				139,
				5
			],
			[
				31,
				-10
			],
			[
				48,
				-16
			],
			[
				12,
				-4
			],
			[
				-36,
				-56
			],
			[
				-4,
				-6
			],
			[
				11,
				-7
			],
			[
				40,
				-26
			],
			[
				108,
				69
			],
			[
				92,
				3
			],
			[
				108,
				-70
			],
			[
				182,
				-30
			],
			[
				8,
				-16
			],
			[
				17,
				-32
			],
			[
				65,
				-126
			],
			[
				119,
				-39
			],
			[
				-251,
				-66
			],
			[
				-75,
				-56
			],
			[
				-9,
				-52
			],
			[
				-71,
				-50
			],
			[
				-20,
				-49
			],
			[
				90,
				-4
			],
			[
				37,
				88
			],
			[
				74,
				69
			],
			[
				255,
				55
			],
			[
				8,
				1
			],
			[
				39,
				-9
			],
			[
				48,
				2
			],
			[
				42,
				29
			]
		],
		[
			[
				3586,
				26370
			],
			[
				0,
				0
			],
			[
				78,
				54
			],
			[
				163,
				33
			],
			[
				68,
				-47
			],
			[
				65,
				-9
			],
			[
				69,
				-11
			],
			[
				13,
				-40
			],
			[
				-14,
				-78
			],
			[
				-1,
				-3
			],
			[
				-12,
				-44
			],
			[
				-22,
				-32
			],
			[
				6,
				-86
			],
			[
				-21,
				-56
			],
			[
				0,
				-11
			],
			[
				-5,
				-56
			],
			[
				-42,
				-85
			],
			[
				-15,
				-70
			],
			[
				-95,
				-145
			],
			[
				4,
				-14
			],
			[
				7,
				-28
			],
			[
				16,
				-49
			],
			[
				0,
				-1
			],
			[
				1,
				2
			],
			[
				20,
				66
			],
			[
				4,
				10
			],
			[
				54,
				30
			],
			[
				13,
				20
			],
			[
				51,
				86
			],
			[
				88,
				502
			],
			[
				46,
				41
			],
			[
				68,
				17
			],
			[
				33,
				-52
			],
			[
				249,
				-424
			],
			[
				2,
				-3
			],
			[
				3,
				0
			],
			[
				91,
				-29
			],
			[
				58,
				-50
			],
			[
				57,
				37
			],
			[
				44,
				28
			],
			[
				4,
				30
			],
			[
				-2,
				3
			],
			[
				-20,
				27
			],
			[
				-9,
				-2
			],
			[
				-18,
				-5
			],
			[
				-51,
				16
			],
			[
				-58,
				68
			],
			[
				-33,
				68
			],
			[
				-210,
				217
			],
			[
				-12,
				53
			],
			[
				9,
				11
			],
			[
				0,
				0
			],
			[
				3,
				5
			],
			[
				0,
				0
			],
			[
				33,
				-21
			],
			[
				102,
				-93
			],
			[
				116,
				32
			],
			[
				84,
				-2
			],
			[
				186,
				82
			],
			[
				45,
				3
			]
		],
		[
			[
				4899,
				26365
			],
			[
				0,
				0
			],
			[
				79,
				5
			],
			[
				124,
				-58
			],
			[
				128,
				-139
			],
			[
				305,
				-100
			],
			[
				109,
				18
			],
			[
				45,
				20
			],
			[
				92,
				128
			],
			[
				9,
				8
			],
			[
				39,
				34
			],
			[
				92,
				80
			],
			[
				19,
				53
			],
			[
				2,
				6
			],
			[
				-6,
				4
			],
			[
				-102,
				61
			],
			[
				9,
				15
			],
			[
				5,
				7
			],
			[
				8,
				15
			],
			[
				156,
				28
			],
			[
				147,
				-2
			],
			[
				212,
				-67
			],
			[
				102,
				-74
			],
			[
				41,
				-114
			],
			[
				22,
				34
			],
			[
				5,
				128
			],
			[
				24,
				53
			],
			[
				32,
				9
			],
			[
				43,
				-22
			],
			[
				0,
				2
			],
			[
				4,
				46
			],
			[
				-31,
				23
			],
			[
				-30,
				1
			],
			[
				-14,
				0
			],
			[
				-86,
				-44
			],
			[
				-63,
				31
			],
			[
				-22,
				31
			],
			[
				-163,
				14
			],
			[
				-15,
				91
			],
			[
				19,
				57
			],
			[
				2,
				8
			],
			[
				-31,
				-9
			],
			[
				-5,
				-1
			],
			[
				-8,
				-3
			],
			[
				-2,
				-4
			],
			[
				-31,
				-81
			],
			[
				-39,
				-23
			],
			[
				-83,
				11
			],
			[
				-56,
				19
			],
			[
				-68,
				-27
			],
			[
				-123,
				-26
			],
			[
				-69,
				-83
			],
			[
				-30,
				-83
			],
			[
				-31,
				-170
			],
			[
				-327,
				-9
			],
			[
				-135,
				73
			],
			[
				-97,
				127
			],
			[
				-66,
				22
			],
			[
				-152,
				-28
			],
			[
				-2,
				0
			],
			[
				0,
				0
			]
		],
		[
			[
				4886,
				26460
			],
			[
				-82,
				18
			],
			[
				-170,
				-77
			],
			[
				-132,
				-28
			],
			[
				-170,
				124
			],
			[
				-22,
				15
			],
			[
				-9,
				35
			],
			[
				-68,
				26
			],
			[
				-268,
				-28
			],
			[
				-141,
				65
			],
			[
				-179,
				-53
			],
			[
				-64,
				-79
			],
			[
				-72,
				-35
			],
			[
				1,
				49
			],
			[
				-23,
				43
			],
			[
				-85,
				8
			],
			[
				-18,
				62
			],
			[
				-104,
				86
			],
			[
				161,
				25
			],
			[
				78,
				18
			],
			[
				111,
				-25
			],
			[
				108,
				30
			],
			[
				69,
				9
			],
			[
				198,
				-26
			],
			[
				36,
				25
			],
			[
				12,
				9
			],
			[
				-17,
				60
			],
			[
				-264,
				51
			],
			[
				-111,
				-53
			],
			[
				-20,
				7
			],
			[
				-10,
				4
			],
			[
				-13,
				18
			],
			[
				-112,
				1
			],
			[
				-32,
				24
			],
			[
				-1,
				0
			],
			[
				-73,
				-22
			],
			[
				-33,
				12
			],
			[
				-11,
				-3
			],
			[
				-101,
				-34
			],
			[
				-50,
				-16
			],
			[
				-82,
				0
			],
			[
				-85,
				18
			],
			[
				-98,
				30
			],
			[
				-42,
				34
			],
			[
				-9,
				7
			],
			[
				-8,
				-2
			],
			[
				-33,
				-11
			],
			[
				-117,
				4
			],
			[
				-44,
				35
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				-57,
				-15
			],
			[
				-37,
				37
			],
			[
				-13,
				13
			],
			[
				-13,
				-13
			],
			[
				-25,
				-24
			],
			[
				-45,
				1
			],
			[
				0,
				0
			]
		],
		[
			[
				2497,
				26919
			],
			[
				-50,
				2
			],
			[
				3,
				17
			],
			[
				1,
				9
			],
			[
				7,
				53
			],
			[
				-20,
				2
			],
			[
				-15,
				1
			],
			[
				-15,
				1
			],
			[
				-26,
				-13
			],
			[
				-55,
				-27
			],
			[
				-96,
				-26
			],
			[
				-70,
				-63
			],
			[
				-122,
				-82
			],
			[
				-38,
				32
			],
			[
				-3,
				0
			],
			[
				-48,
				-1
			],
			[
				-44,
				-23
			],
			[
				-105,
				-8
			],
			[
				-32,
				35
			],
			[
				-28,
				-2
			],
			[
				-41,
				-47
			],
			[
				-21,
				-46
			],
			[
				-71,
				-33
			],
			[
				-61,
				56
			],
			[
				-18,
				51
			],
			[
				48,
				0
			],
			[
				62,
				10
			],
			[
				18,
				42
			],
			[
				-63,
				7
			],
			[
				-17,
				-22
			],
			[
				-78,
				-2
			],
			[
				-58,
				22
			],
			[
				15,
				55
			],
			[
				4,
				17
			],
			[
				47,
				-24
			],
			[
				9,
				20
			],
			[
				-34,
				43
			],
			[
				69,
				145
			],
			[
				-5,
				144
			],
			[
				49,
				57
			],
			[
				65,
				10
			],
			[
				-18,
				-51
			],
			[
				9,
				-90
			],
			[
				16,
				-109
			],
			[
				40,
				-34
			],
			[
				24,
				-89
			],
			[
				28,
				2
			],
			[
				-14,
				111
			],
			[
				-38,
				32
			],
			[
				-2,
				38
			],
			[
				0,
				0
			]
		],
		[
			[
				1705,
				27141
			],
			[
				-3,
				48
			],
			[
				-14,
				76
			],
			[
				38,
				-19
			],
			[
				61,
				8
			],
			[
				22,
				49
			],
			[
				61,
				-106
			],
			[
				4,
				-47
			],
			[
				50,
				-29
			],
			[
				17,
				-51
			],
			[
				47,
				52
			],
			[
				-34,
				79
			],
			[
				-51,
				68
			],
			[
				33,
				43
			],
			[
				37,
				13
			],
			[
				25,
				-21
			],
			[
				14,
				-56
			],
			[
				19,
				3
			],
			[
				5,
				88
			],
			[
				46,
				37
			],
			[
				6,
				165
			],
			[
				27,
				39
			],
			[
				78,
				-1
			],
			[
				51,
				0
			],
			[
				56,
				-80
			],
			[
				42,
				4
			],
			[
				8,
				19
			],
			[
				9,
				20
			],
			[
				-19,
				56
			],
			[
				-1,
				3
			],
			[
				-54,
				33
			],
			[
				-27,
				16
			],
			[
				-160,
				8
			],
			[
				-6,
				51
			],
			[
				39,
				21
			],
			[
				-18,
				82
			],
			[
				-104,
				126
			],
			[
				-140,
				53
			],
			[
				-72,
				118
			],
			[
				-372,
				-7
			],
			[
				-6,
				175
			],
			[
				119,
				-43
			],
			[
				25,
				33
			],
			[
				-53,
				67
			],
			[
				-11,
				72
			],
			[
				-109,
				33
			],
			[
				-21,
				46
			],
			[
				-6,
				56
			],
			[
				41,
				-11
			],
			[
				1,
				1
			],
			[
				14,
				17
			],
			[
				-16,
				82
			],
			[
				-44,
				35
			],
			[
				12,
				65
			],
			[
				131,
				50
			],
			[
				9,
				-48
			],
			[
				42,
				-42
			],
			[
				12,
				38
			],
			[
				52,
				11
			],
			[
				39,
				-25
			],
			[
				37,
				6
			],
			[
				-8,
				29
			],
			[
				-84,
				20
			],
			[
				1,
				29
			],
			[
				21,
				77
			],
			[
				56,
				-29
			],
			[
				29,
				-24
			],
			[
				42,
				22
			],
			[
				16,
				-44
			],
			[
				-5,
				-58
			],
			[
				72,
				-116
			],
			[
				53,
				-27
			],
			[
				35,
				4
			],
			[
				11,
				-112
			],
			[
				39,
				-3
			],
			[
				1,
				38
			],
			[
				-15,
				29
			],
			[
				2,
				22
			],
			[
				55,
				-24
			],
			[
				53,
				2
			],
			[
				0,
				-60
			],
			[
				-15,
				-30
			],
			[
				-36,
				-10
			],
			[
				-11,
				-35
			],
			[
				24,
				-32
			],
			[
				-21,
				-88
			],
			[
				23,
				-65
			],
			[
				33,
				-37
			],
			[
				37,
				-12
			],
			[
				25,
				-23
			],
			[
				20,
				-68
			],
			[
				114,
				-66
			],
			[
				19,
				-68
			],
			[
				11,
				-9
			],
			[
				23,
				-19
			],
			[
				60,
				-40
			],
			[
				31,
				18
			],
			[
				17,
				-90
			],
			[
				84,
				-9
			],
			[
				-10,
				-57
			],
			[
				25,
				-68
			],
			[
				24,
				13
			],
			[
				8,
				-59
			],
			[
				-24,
				-24
			],
			[
				-23,
				-93
			],
			[
				-62,
				-43
			],
			[
				42,
				-48
			],
			[
				68,
				63
			]
		],
		[
			[
				1176,
				27509
			],
			[
				93,
				-96
			],
			[
				40,
				18
			],
			[
				-21,
				81
			],
			[
				76,
				-1
			],
			[
				8,
				57
			],
			[
				29,
				56
			],
			[
				39,
				-76
			],
			[
				19,
				-61
			],
			[
				75,
				-85
			],
			[
				13,
				-51
			],
			[
				-11,
				-26
			],
			[
				-47,
				-17
			],
			[
				-7,
				-72
			],
			[
				19,
				-84
			],
			[
				-5,
				-50
			],
			[
				-35,
				-75
			],
			[
				-36,
				-47
			],
			[
				-15,
				-21
			],
			[
				5,
				-26
			],
			[
				2,
				-13
			],
			[
				-17,
				-8
			],
			[
				-58,
				-29
			],
			[
				-36,
				50
			],
			[
				-45,
				-19
			],
			[
				-35,
				68
			],
			[
				-36,
				-10
			],
			[
				-84,
				66
			],
			[
				9,
				55
			],
			[
				64,
				80
			],
			[
				24,
				-19
			],
			[
				3,
				-79
			],
			[
				27,
				-7
			],
			[
				16,
				80
			],
			[
				36,
				49
			],
			[
				-42,
				42
			],
			[
				-6,
				55
			],
			[
				-47,
				30
			],
			[
				-114,
				-2
			],
			[
				-28,
				27
			],
			[
				-66,
				113
			],
			[
				-2,
				53
			],
			[
				26,
				69
			],
			[
				1,
				60
			],
			[
				83,
				-69
			],
			[
				47,
				4
			],
			[
				39,
				-70
			]
		],
		[
			[
				1437,
				26703
			],
			[
				-52,
				-18
			],
			[
				-28,
				11
			],
			[
				-63,
				8
			],
			[
				-97,
				6
			],
			[
				-26,
				45
			],
			[
				-25,
				36
			],
			[
				-40,
				16
			],
			[
				-5,
				25
			],
			[
				43,
				81
			],
			[
				36,
				-61
			],
			[
				122,
				-29
			],
			[
				56,
				-49
			],
			[
				43,
				-12
			],
			[
				48,
				-24
			],
			[
				-12,
				-35
			]
		],
		[
			[
				2041,
				27696
			],
			[
				-20,
				-8
			],
			[
				-38,
				25
			],
			[
				-17,
				5
			],
			[
				-12,
				11
			],
			[
				-6,
				41
			],
			[
				42,
				17
			],
			[
				30,
				-4
			],
			[
				19,
				-14
			],
			[
				2,
				-73
			]
		],
		[
			[
				2004,
				27418
			],
			[
				-12,
				-28
			],
			[
				-53,
				5
			],
			[
				-51,
				-12
			],
			[
				-35,
				31
			],
			[
				-20,
				99
			],
			[
				46,
				35
			],
			[
				-8,
				58
			],
			[
				124,
				-36
			],
			[
				39,
				-45
			],
			[
				-30,
				-107
			]
		],
		[
			[
				1653,
				26545
			],
			[
				35,
				-6
			],
			[
				56,
				-11
			],
			[
				98,
				-42
			],
			[
				17,
				-40
			],
			[
				-33,
				-54
			],
			[
				19,
				-55
			],
			[
				2,
				-51
			],
			[
				-150,
				4
			],
			[
				-221,
				-73
			],
			[
				-17,
				40
			],
			[
				100,
				66
			],
			[
				2,
				105
			],
			[
				-60,
				58
			],
			[
				27,
				-107
			],
			[
				-2,
				-25
			],
			[
				-74,
				-45
			],
			[
				-33,
				-94
			],
			[
				-50,
				-59
			],
			[
				-128,
				-64
			],
			[
				-163,
				-156
			],
			[
				-129,
				-51
			],
			[
				9,
				46
			],
			[
				-22,
				83
			],
			[
				-24,
				30
			],
			[
				-18,
				-8
			],
			[
				-3,
				-49
			],
			[
				21,
				-45
			],
			[
				0,
				-38
			],
			[
				0,
				-31
			],
			[
				-6,
				-23
			],
			[
				-50,
				-15
			],
			[
				-16,
				14
			],
			[
				0,
				5
			],
			[
				2,
				24
			],
			[
				8,
				34
			],
			[
				-6,
				27
			],
			[
				-10,
				22
			],
			[
				-5,
				62
			],
			[
				-42,
				60
			],
			[
				-8,
				70
			],
			[
				54,
				44
			],
			[
				33,
				4
			],
			[
				52,
				-49
			],
			[
				16,
				-31
			],
			[
				3,
				-6
			],
			[
				18,
				-2
			],
			[
				9,
				35
			],
			[
				-3,
				20
			],
			[
				-4,
				26
			],
			[
				-35,
				25
			],
			[
				78,
				44
			],
			[
				65,
				11
			],
			[
				1,
				0
			],
			[
				1,
				1
			],
			[
				5,
				23
			],
			[
				-90,
				31
			],
			[
				-19,
				0
			],
			[
				-103,
				-36
			],
			[
				-89,
				8
			],
			[
				2,
				40
			],
			[
				-13,
				25
			],
			[
				-48,
				14
			],
			[
				-73,
				-17
			],
			[
				-109,
				31
			],
			[
				-3,
				37
			],
			[
				141,
				139
			],
			[
				193,
				35
			],
			[
				0,
				29
			],
			[
				-90,
				52
			],
			[
				103,
				102
			],
			[
				54,
				7
			],
			[
				103,
				-60
			],
			[
				66,
				-64
			],
			[
				191,
				-53
			],
			[
				29,
				-21
			],
			[
				14,
				-11
			],
			[
				90,
				5
			],
			[
				141,
				-21
			],
			[
				91,
				-25
			]
		],
		[
			[
				2031,
				26611
			],
			[
				-45,
				-72
			],
			[
				-12,
				-18
			],
			[
				-78,
				-4
			],
			[
				-17,
				26
			],
			[
				-58,
				18
			],
			[
				-17,
				-17
			],
			[
				-75,
				27
			],
			[
				-86,
				30
			],
			[
				366,
				83
			],
			[
				66,
				-6
			],
			[
				2,
				-30
			],
			[
				-46,
				-37
			]
		],
		[
			[
				708,
				25764
			],
			[
				-87,
				-33
			],
			[
				-19,
				133
			],
			[
				-140,
				124
			],
			[
				143,
				129
			],
			[
				117,
				-91
			],
			[
				17,
				-78
			],
			[
				30,
				-48
			],
			[
				8,
				-13
			],
			[
				-9,
				-20
			],
			[
				-55,
				-64
			],
			[
				-5,
				-39
			]
		],
		[
			[
				19859,
				7911
			],
			[
				-9,
				25
			],
			[
				-26,
				-31
			],
			[
				-5,
				-41
			],
			[
				-19,
				-42
			],
			[
				0,
				0
			],
			[
				-8,
				-18
			],
			[
				-23,
				-51
			],
			[
				-13,
				2
			],
			[
				0,
				0
			],
			[
				-3,
				1
			],
			[
				5,
				21
			],
			[
				7,
				29
			],
			[
				-36,
				-8
			],
			[
				-15,
				-4
			],
			[
				-8,
				21
			],
			[
				-17,
				43
			],
			[
				-6,
				22
			],
			[
				12,
				84
			],
			[
				21,
				11
			],
			[
				46,
				-8
			],
			[
				19,
				-35
			],
			[
				28,
				53
			],
			[
				-25,
				30
			],
			[
				-52,
				13
			],
			[
				-21,
				3
			],
			[
				-19,
				3
			],
			[
				-4,
				23
			],
			[
				-2,
				17
			],
			[
				21,
				97
			],
			[
				23,
				40
			],
			[
				-3,
				42
			],
			[
				-3,
				35
			],
			[
				-4,
				40
			],
			[
				-18,
				13
			],
			[
				-1,
				-3
			],
			[
				-4,
				-75
			],
			[
				-29,
				11
			],
			[
				-16,
				6
			],
			[
				-31,
				38
			],
			[
				-20,
				24
			],
			[
				-19,
				-6
			],
			[
				10,
				-33
			],
			[
				0,
				-2
			],
			[
				47,
				-51
			],
			[
				14,
				-96
			],
			[
				8,
				-59
			],
			[
				-5,
				-7
			],
			[
				-22,
				-31
			],
			[
				-30,
				10
			],
			[
				-41,
				-26
			],
			[
				-3,
				-41
			],
			[
				-34,
				-15
			],
			[
				-1,
				79
			],
			[
				-17,
				77
			],
			[
				-18,
				42
			],
			[
				-29,
				62
			],
			[
				-24,
				1
			],
			[
				0,
				0
			]
		],
		[
			[
				19437,
				8246
			],
			[
				-37,
				1
			],
			[
				36,
				-38
			],
			[
				5,
				-58
			],
			[
				24,
				-69
			],
			[
				16,
				-1
			],
			[
				7,
				-55
			],
			[
				8,
				-68
			],
			[
				-4,
				-29
			],
			[
				-5,
				-31
			],
			[
				-3,
				-2
			],
			[
				-23,
				-24
			],
			[
				-37,
				-30
			],
			[
				-43,
				-23
			],
			[
				-14,
				26
			],
			[
				11,
				100
			],
			[
				-33,
				-18
			],
			[
				-46,
				-26
			],
			[
				-17,
				-23
			],
			[
				-12,
				-19
			],
			[
				-16,
				10
			],
			[
				-9,
				6
			],
			[
				33,
				70
			],
			[
				-1,
				52
			],
			[
				23,
				90
			],
			[
				-13,
				12
			],
			[
				-39,
				-75
			],
			[
				-8,
				-16
			],
			[
				-9,
				7
			],
			[
				-15,
				12
			],
			[
				6,
				88
			],
			[
				-5,
				-1
			],
			[
				-24,
				-5
			],
			[
				-15,
				75
			],
			[
				6,
				11
			],
			[
				26,
				50
			],
			[
				-18,
				24
			],
			[
				-44,
				-62
			],
			[
				-13,
				69
			],
			[
				-16,
				-2
			],
			[
				-26,
				-3
			],
			[
				-23,
				-72
			],
			[
				-25,
				-2
			],
			[
				-3,
				0
			],
			[
				-31,
				-27
			],
			[
				2,
				-74
			],
			[
				-6,
				-57
			],
			[
				-19,
				-44
			],
			[
				-35,
				-82
			],
			[
				-35,
				9
			],
			[
				-26,
				14
			],
			[
				28,
				81
			],
			[
				-55,
				-22
			],
			[
				26,
				61
			],
			[
				-38,
				-5
			],
			[
				36,
				84
			],
			[
				-33,
				99
			],
			[
				-47,
				-42
			],
			[
				25,
				81
			],
			[
				-18,
				10
			],
			[
				-53,
				-90
			],
			[
				-13,
				67
			],
			[
				-22,
				5
			],
			[
				-7,
				-72
			],
			[
				20,
				-33
			],
			[
				-34,
				-25
			],
			[
				-37,
				-41
			],
			[
				-35,
				-63
			],
			[
				-10,
				17
			],
			[
				12,
				111
			],
			[
				-29,
				35
			],
			[
				-16,
				95
			],
			[
				6,
				23
			],
			[
				-18,
				17
			],
			[
				-50,
				-73
			],
			[
				-4,
				58
			],
			[
				42,
				76
			],
			[
				5,
				9
			],
			[
				-29,
				24
			],
			[
				-6,
				6
			],
			[
				-86,
				146
			],
			[
				60,
				134
			],
			[
				25,
				55
			],
			[
				-38,
				-19
			],
			[
				-15,
				-8
			],
			[
				-86,
				-165
			],
			[
				-48,
				-4
			],
			[
				11,
				127
			],
			[
				-5,
				1
			],
			[
				-19,
				4
			],
			[
				-1,
				45
			],
			[
				30,
				50
			],
			[
				19,
				-58
			],
			[
				4,
				-13
			],
			[
				1,
				20
			],
			[
				3,
				109
			],
			[
				8,
				66
			],
			[
				-18,
				23
			],
			[
				11,
				18
			]
		],
		[
			[
				18280,
				8466
			],
			[
				-20,
				-20
			],
			[
				-45,
				52
			],
			[
				-2,
				140
			],
			[
				44,
				53
			],
			[
				23,
				-225
			]
		],
		[
			[
				18520,
				8357
			],
			[
				-39,
				-51
			],
			[
				-31,
				59
			],
			[
				-31,
				113
			],
			[
				22,
				65
			],
			[
				87,
				-154
			],
			[
				-8,
				-32
			]
		],
		[
			[
				19035,
				7892
			],
			[
				-21,
				-26
			],
			[
				-33,
				11
			],
			[
				-3,
				20
			],
			[
				7,
				19
			],
			[
				16,
				47
			],
			[
				11,
				29
			],
			[
				11,
				13
			],
			[
				9,
				0
			],
			[
				13,
				-65
			],
			[
				-10,
				-48
			]
		],
		[
			[
				18688,
				7596
			],
			[
				1,
				37
			],
			[
				-22,
				-22
			],
			[
				-24,
				32
			],
			[
				15,
				45
			],
			[
				1,
				3
			],
			[
				54,
				72
			],
			[
				0,
				3
			],
			[
				2,
				67
			],
			[
				36,
				8
			],
			[
				11,
				2
			],
			[
				22,
				-37
			],
			[
				8,
				-13
			],
			[
				-15,
				-57
			],
			[
				105,
				44
			],
			[
				5,
				2
			],
			[
				33,
				-27
			],
			[
				0,
				-43
			],
			[
				-30,
				-59
			],
			[
				-33,
				-64
			],
			[
				-62,
				-101
			],
			[
				-6,
				-8
			],
			[
				-1,
				6
			],
			[
				-6,
				45
			],
			[
				-24,
				-29
			],
			[
				-26,
				-33
			],
			[
				-5,
				-5
			],
			[
				-4,
				4
			],
			[
				-23,
				25
			],
			[
				-14,
				31
			],
			[
				2,
				72
			]
		],
		[
			[
				19577,
				7688
			],
			[
				-32,
				-45
			],
			[
				-29,
				68
			],
			[
				3,
				54
			],
			[
				27,
				40
			],
			[
				46,
				-12
			],
			[
				-15,
				-105
			]
		],
		[
			[
				19292,
				7601
			],
			[
				-27,
				-142
			],
			[
				51,
				57
			],
			[
				3,
				59
			],
			[
				19,
				17
			],
			[
				85,
				-50
			],
			[
				10,
				-58
			],
			[
				-15,
				-64
			],
			[
				-61,
				-84
			],
			[
				-48,
				-23
			],
			[
				-42,
				-12
			],
			[
				6,
				-34
			],
			[
				71,
				23
			],
			[
				3,
				-47
			],
			[
				-19,
				-62
			],
			[
				-60,
				-36
			],
			[
				-20,
				-40
			],
			[
				-8,
				0
			],
			[
				-35,
				-3
			],
			[
				-9,
				36
			],
			[
				-19,
				46
			],
			[
				-45,
				-8
			],
			[
				-8,
				13
			],
			[
				1,
				68
			],
			[
				0,
				81
			],
			[
				4,
				5
			],
			[
				39,
				46
			],
			[
				-54,
				132
			],
			[
				24,
				39
			],
			[
				66,
				47
			],
			[
				59,
				37
			],
			[
				29,
				-43
			]
		],
		[
			[
				19480,
				7191
			],
			[
				-69,
				-29
			],
			[
				-17,
				12
			],
			[
				43,
				53
			],
			[
				0,
				63
			],
			[
				46,
				62
			],
			[
				18,
				-40
			],
			[
				-21,
				-121
			]
		],
		[
			[
				19424,
				7019
			],
			[
				-14,
				-65
			],
			[
				-20,
				3
			],
			[
				-46,
				82
			],
			[
				-5,
				38
			],
			[
				42,
				53
			],
			[
				93,
				21
			],
			[
				21,
				-3
			],
			[
				3,
				-9
			],
			[
				-13,
				-41
			],
			[
				-26,
				-22
			],
			[
				-35,
				-57
			]
		],
		[
			[
				19349,
				6924
			],
			[
				-25,
				-27
			],
			[
				-36,
				25
			],
			[
				-24,
				1
			],
			[
				-3,
				29
			],
			[
				17,
				58
			],
			[
				22,
				26
			],
			[
				4,
				5
			],
			[
				27,
				-26
			],
			[
				17,
				-62
			],
			[
				1,
				-25
			],
			[
				0,
				-4
			]
		],
		[
			[
				19071,
				7608
			],
			[
				-3,
				-82
			],
			[
				-19,
				-24
			],
			[
				-24,
				10
			],
			[
				13,
				-44
			],
			[
				5,
				-54
			],
			[
				-13,
				-19
			],
			[
				33,
				-81
			],
			[
				-2,
				-25
			],
			[
				-3,
				-48
			],
			[
				-44,
				-1
			],
			[
				-5,
				-12
			],
			[
				-14,
				-37
			],
			[
				-23,
				55
			],
			[
				-28,
				84
			],
			[
				-7,
				37
			],
			[
				-3,
				19
			],
			[
				27,
				90
			],
			[
				28,
				94
			],
			[
				48,
				-8
			],
			[
				34,
				46
			]
		],
		[
			[
				18929,
				7490
			],
			[
				-8,
				-19
			],
			[
				-37,
				-78
			],
			[
				-5,
				-11
			],
			[
				-1,
				14
			],
			[
				0,
				8
			],
			[
				-2,
				21
			],
			[
				-47,
				-3
			],
			[
				2,
				61
			],
			[
				6,
				7
			],
			[
				13,
				18
			],
			[
				21,
				27
			],
			[
				38,
				77
			],
			[
				39,
				80
			],
			[
				19,
				8
			],
			[
				17,
				8
			],
			[
				17,
				-42
			],
			[
				0,
				-1
			],
			[
				-56,
				-135
			],
			[
				-16,
				-40
			]
		],
		[
			[
				19039,
				7633
			],
			[
				-16,
				-2
			],
			[
				2,
				67
			],
			[
				-8,
				14
			],
			[
				5,
				28
			],
			[
				23,
				24
			],
			[
				20,
				-35
			],
			[
				3,
				-29
			],
			[
				-3,
				-51
			],
			[
				-26,
				-16
			]
		],
		[
			[
				21693,
				12712
			],
			[
				9,
				-21
			],
			[
				14,
				-21
			],
			[
				14,
				-22
			],
			[
				25,
				-12
			],
			[
				36,
				-7
			],
			[
				0,
				0
			],
			[
				9,
				2
			],
			[
				29,
				-29
			],
			[
				30,
				-59
			],
			[
				28,
				-29
			],
			[
				4,
				-30
			],
			[
				1,
				-4
			],
			[
				12,
				-34
			],
			[
				22,
				-24
			],
			[
				27,
				-28
			],
			[
				3,
				-24
			],
			[
				0,
				0
			],
			[
				0,
				0
			]
		],
		[
			[
				18212,
				10315
			],
			[
				-6,
				145
			],
			[
				-4,
				2
			],
			[
				-14,
				10
			],
			[
				33,
				103
			],
			[
				-49,
				-35
			],
			[
				-21,
				9
			],
			[
				-5,
				21
			],
			[
				-14,
				52
			],
			[
				-23,
				148
			],
			[
				-5,
				158
			],
			[
				17,
				37
			],
			[
				-7,
				130
			],
			[
				0,
				68
			]
		],
		[
			[
				18114,
				11163
			],
			[
				0,
				0
			],
			[
				1,
				17
			],
			[
				-45,
				190
			],
			[
				-43,
				177
			],
			[
				-6,
				29
			],
			[
				3,
				19
			],
			[
				26,
				143
			],
			[
				20,
				4
			],
			[
				21,
				39
			],
			[
				-8,
				20
			],
			[
				-58,
				-43
			],
			[
				-15,
				-96
			],
			[
				-13,
				-26
			],
			[
				-85,
				274
			],
			[
				12,
				40
			]
		],
		[
			[
				17924,
				11950
			],
			[
				0,
				0
			],
			[
				6,
				22
			],
			[
				-33,
				58
			],
			[
				5,
				144
			],
			[
				39,
				119
			],
			[
				39,
				166
			],
			[
				19,
				50
			],
			[
				85,
				212
			],
			[
				39,
				193
			],
			[
				2,
				10
			],
			[
				60,
				-85
			],
			[
				34,
				-57
			],
			[
				25,
				-111
			],
			[
				9,
				-90
			],
			[
				29,
				-305
			],
			[
				1,
				-10
			]
		],
		[
			[
				18283,
				12266
			],
			[
				0,
				0
			],
			[
				17,
				-178
			],
			[
				21,
				-141
			],
			[
				-29,
				-75
			],
			[
				50,
				28
			],
			[
				2,
				6
			],
			[
				1,
				4
			]
		],
		[
			[
				18345,
				11910
			],
			[
				0,
				0
			],
			[
				5,
				15
			],
			[
				6,
				20
			],
			[
				-15,
				66
			],
			[
				-11,
				100
			],
			[
				0,
				0
			]
		],
		[
			[
				18330,
				12111
			],
			[
				-3,
				21
			],
			[
				1,
				3
			]
		],
		[
			[
				18328,
				12135
			],
			[
				0,
				0
			],
			[
				13,
				43
			]
		],
		[
			[
				18341,
				12178
			],
			[
				0,
				0
			],
			[
				1,
				5
			],
			[
				21,
				28
			],
			[
				-14,
				83
			],
			[
				11,
				126
			],
			[
				40,
				131
			],
			[
				21,
				51
			],
			[
				24,
				28
			]
		],
		[
			[
				17940,
				11532
			],
			[
				0,
				0
			],
			[
				6,
				5
			],
			[
				7,
				-17
			],
			[
				0,
				0
			]
		],
		[
			[
				17953,
				11591
			],
			[
				2,
				-11
			],
			[
				-96,
				48
			],
			[
				-2,
				4
			],
			[
				-31,
				86
			],
			[
				-11,
				31
			],
			[
				-8,
				110
			],
			[
				-1,
				10
			],
			[
				22,
				30
			],
			[
				28,
				-2
			],
			[
				10,
				-28
			],
			[
				-16,
				-33
			],
			[
				-2,
				-62
			],
			[
				62,
				-49
			],
			[
				27,
				-38
			],
			[
				16,
				-96
			]
		],
		[
			[
				17981,
				43712
			],
			[
				0,
				0
			],
			[
				45,
				-30
			],
			[
				22,
				7
			],
			[
				30,
				10
			],
			[
				-9,
				23
			],
			[
				-17,
				44
			],
			[
				-43,
				8
			],
			[
				-9,
				35
			],
			[
				80,
				16
			],
			[
				-37,
				44
			],
			[
				-61,
				-8
			],
			[
				-10,
				54
			],
			[
				-75,
				4
			],
			[
				-89,
				95
			],
			[
				55,
				26
			],
			[
				59,
				-29
			],
			[
				36,
				120
			],
			[
				48,
				16
			],
			[
				99,
				-118
			],
			[
				95,
				-191
			],
			[
				146,
				11
			],
			[
				63,
				5
			],
			[
				16,
				-50
			],
			[
				5,
				-15
			],
			[
				-3,
				-17
			],
			[
				-16,
				-102
			],
			[
				26,
				-69
			],
			[
				38,
				1
			],
			[
				69,
				54
			],
			[
				6,
				5
			],
			[
				53,
				-71
			],
			[
				2,
				-9
			],
			[
				10,
				-50
			],
			[
				28,
				2
			],
			[
				23,
				1
			],
			[
				8,
				1
			],
			[
				17,
				27
			],
			[
				0,
				1
			],
			[
				-66,
				75
			],
			[
				0,
				7
			],
			[
				-1,
				41
			],
			[
				-64,
				32
			],
			[
				-10,
				12
			],
			[
				-45,
				55
			],
			[
				59,
				63
			],
			[
				52,
				8
			],
			[
				-13,
				21
			],
			[
				-10,
				17
			],
			[
				-31,
				49
			],
			[
				14,
				34
			],
			[
				8,
				20
			],
			[
				-43,
				-7
			],
			[
				-94,
				-17
			],
			[
				-29,
				46
			],
			[
				-20,
				30
			],
			[
				-19,
				11
			],
			[
				-18,
				-20
			],
			[
				11,
				-40
			],
			[
				11,
				-42
			],
			[
				-119,
				-41
			],
			[
				-16,
				78
			],
			[
				-55,
				25
			],
			[
				-64,
				29
			],
			[
				-5,
				82
			],
			[
				103,
				18
			],
			[
				16,
				133
			],
			[
				38,
				3
			],
			[
				82,
				-79
			],
			[
				7,
				-61
			],
			[
				57,
				-7
			],
			[
				30,
				63
			],
			[
				-23,
				63
			],
			[
				35,
				40
			],
			[
				8,
				-3
			],
			[
				115,
				-50
			],
			[
				7,
				-19
			],
			[
				40,
				-110
			],
			[
				18,
				0
			],
			[
				24,
				0
			],
			[
				68,
				-1
			],
			[
				-36,
				42
			],
			[
				-84,
				97
			],
			[
				50,
				22
			],
			[
				-143,
				143
			],
			[
				-5,
				34
			],
			[
				-8,
				57
			],
			[
				141,
				-34
			],
			[
				44,
				-16
			],
			[
				31,
				-17
			],
			[
				41,
				-20
			],
			[
				8,
				-27
			],
			[
				51,
				-190
			],
			[
				53,
				26
			],
			[
				-53,
				129
			],
			[
				-3,
				28
			],
			[
				-2,
				25
			],
			[
				-6,
				60
			],
			[
				63,
				-39
			],
			[
				3,
				-2
			],
			[
				-7,
				108
			],
			[
				120,
				-61
			],
			[
				45,
				-71
			],
			[
				34,
				-2
			],
			[
				-4,
				14
			],
			[
				-20,
				62
			],
			[
				-59,
				85
			],
			[
				84,
				81
			],
			[
				1,
				16
			],
			[
				1,
				28
			],
			[
				-23,
				8
			],
			[
				-21,
				7
			],
			[
				-70,
				172
			],
			[
				-13,
				31
			],
			[
				-43,
				-15
			],
			[
				-39,
				66
			],
			[
				15,
				14
			],
			[
				62,
				55
			],
			[
				38,
				-6
			],
			[
				11,
				78
			],
			[
				35,
				31
			],
			[
				21,
				19
			],
			[
				45,
				-9
			],
			[
				55,
				-58
			],
			[
				-3,
				-80
			],
			[
				67,
				13
			],
			[
				97,
				-71
			],
			[
				18,
				-50
			],
			[
				22,
				-18
			],
			[
				13,
				5
			],
			[
				47,
				19
			],
			[
				12,
				-44
			],
			[
				-45,
				-22
			],
			[
				-1,
				0
			],
			[
				-21,
				-68
			],
			[
				1,
				-10
			]
		],
		[
			[
				19369,
				44766
			],
			[
				0,
				0
			],
			[
				10,
				-71
			],
			[
				28,
				-32
			],
			[
				-27,
				-121
			],
			[
				32,
				-11
			],
			[
				18,
				-6
			],
			[
				1,
				0
			],
			[
				3,
				9
			],
			[
				25,
				75
			],
			[
				4,
				-2
			],
			[
				43,
				-18
			],
			[
				3,
				-49
			],
			[
				48,
				-59
			],
			[
				14,
				-16
			],
			[
				48,
				-53
			],
			[
				21,
				-23
			],
			[
				22,
				17
			],
			[
				4,
				-5
			],
			[
				61,
				-88
			],
			[
				-23,
				-73
			],
			[
				32,
				-10
			],
			[
				-96,
				-177
			],
			[
				96,
				-38
			],
			[
				17,
				38
			],
			[
				84,
				60
			],
			[
				64,
				-21
			],
			[
				56,
				16
			],
			[
				20,
				51
			],
			[
				63,
				27
			],
			[
				121,
				-6
			],
			[
				31,
				-18
			],
			[
				13,
				-77
			],
			[
				-12,
				-45
			],
			[
				-58,
				13
			],
			[
				-48,
				15
			],
			[
				-35,
				15
			],
			[
				-3,
				-55
			],
			[
				138,
				-25
			],
			[
				-22,
				-85
			]
		],
		[
			[
				20165,
				43918
			],
			[
				0,
				0
			],
			[
				-46,
				-184
			],
			[
				-15,
				-57
			],
			[
				-18,
				-16
			],
			[
				0,
				0
			]
		],
		[
			[
				20086,
				43661
			],
			[
				-3,
				-3
			],
			[
				-74,
				-64
			],
			[
				-128,
				-220
			],
			[
				-49,
				-83
			],
			[
				-7,
				-13
			],
			[
				-2,
				-14
			],
			[
				-11,
				-101
			],
			[
				60,
				3
			],
			[
				108,
				276
			],
			[
				12,
				9
			],
			[
				9,
				7
			]
		],
		[
			[
				20001,
				43458
			],
			[
				0,
				0
			],
			[
				109,
				83
			],
			[
				53,
				35
			],
			[
				18,
				125
			],
			[
				113,
				40
			],
			[
				44,
				-109
			],
			[
				4,
				-10
			],
			[
				-22,
				-6
			],
			[
				-18,
				-5
			],
			[
				-15,
				-24
			],
			[
				-40,
				-64
			],
			[
				81,
				-16
			],
			[
				67,
				31
			],
			[
				-3,
				80
			],
			[
				-14,
				24
			],
			[
				-14,
				43
			],
			[
				-35,
				104
			],
			[
				-45,
				2
			],
			[
				-57,
				88
			],
			[
				95,
				62
			],
			[
				-8,
				46
			],
			[
				-1,
				5
			],
			[
				54,
				48
			],
			[
				21,
				18
			],
			[
				117,
				-82
			],
			[
				164,
				74
			],
			[
				60,
				27
			],
			[
				10,
				44
			],
			[
				-15,
				53
			],
			[
				-46,
				-16
			],
			[
				-37,
				49
			],
			[
				-30,
				9
			],
			[
				-26,
				-51
			],
			[
				-29,
				-42
			],
			[
				-63,
				-11
			],
			[
				-18,
				55
			],
			[
				27,
				57
			],
			[
				-33,
				29
			],
			[
				-20,
				17
			],
			[
				52,
				71
			],
			[
				7,
				58
			],
			[
				27,
				83
			],
			[
				22,
				70
			],
			[
				51,
				8
			],
			[
				102,
				-29
			],
			[
				71,
				28
			],
			[
				-47,
				118
			],
			[
				-35,
				-62
			],
			[
				-11,
				0
			],
			[
				-34,
				2
			],
			[
				13,
				37
			],
			[
				11,
				31
			],
			[
				-18,
				13
			],
			[
				-36,
				28
			],
			[
				87,
				23
			],
			[
				31,
				8
			],
			[
				-9,
				68
			],
			[
				-2,
				11
			],
			[
				100,
				-13
			],
			[
				65,
				-9
			],
			[
				-7,
				-11
			],
			[
				-48,
				-72
			],
			[
				-41,
				-8
			],
			[
				4,
				-61
			],
			[
				37,
				14
			],
			[
				99,
				109
			],
			[
				92,
				100
			],
			[
				73,
				24
			],
			[
				243,
				81
			],
			[
				170,
				31
			],
			[
				-4,
				37
			],
			[
				-71,
				3
			],
			[
				-70,
				-19
			],
			[
				-43,
				3
			],
			[
				-80,
				32
			],
			[
				-116,
				-94
			],
			[
				-1,
				0
			],
			[
				-1,
				1
			],
			[
				-34,
				19
			],
			[
				-16,
				-14
			],
			[
				-78,
				-70
			],
			[
				10,
				32
			],
			[
				24,
				76
			],
			[
				-34,
				-8
			],
			[
				19,
				121
			],
			[
				35,
				73
			],
			[
				-79,
				33
			],
			[
				-170,
				-113
			],
			[
				14,
				-29
			],
			[
				117,
				49
			],
			[
				41,
				-59
			],
			[
				-30,
				-98
			],
			[
				-123,
				-104
			],
			[
				-47,
				-8
			],
			[
				-16,
				-2
			],
			[
				-7,
				4
			],
			[
				-78,
				49
			],
			[
				-35,
				22
			],
			[
				-3,
				10
			],
			[
				-13,
				45
			],
			[
				-22,
				20
			],
			[
				0,
				0
			]
		],
		[
			[
				20607,
				45032
			],
			[
				-127,
				114
			],
			[
				-6,
				72
			],
			[
				-23,
				24
			],
			[
				-39,
				41
			],
			[
				-47,
				46
			],
			[
				-7,
				74
			],
			[
				52,
				-22
			],
			[
				-10,
				61
			],
			[
				-78,
				38
			],
			[
				-16,
				109
			],
			[
				38,
				120
			],
			[
				26,
				-55
			],
			[
				50,
				7
			],
			[
				61,
				76
			],
			[
				-13,
				31
			],
			[
				-10,
				22
			],
			[
				-75,
				19
			],
			[
				-2,
				70
			],
			[
				76,
				-24
			],
			[
				4,
				-1
			],
			[
				252,
				132
			],
			[
				17,
				9
			],
			[
				42,
				68
			],
			[
				-2,
				9
			]
		],
		[
			[
				17689,
				43949
			],
			[
				0,
				0
			],
			[
				73,
				57
			],
			[
				79,
				-102
			],
			[
				71,
				-42
			],
			[
				43,
				-72
			],
			[
				24,
				-75
			],
			[
				0,
				0
			]
		],
		[
			[
				18796,
				45078
			],
			[
				-23,
				-2
			],
			[
				-16,
				46
			],
			[
				-2,
				22
			],
			[
				6,
				14
			],
			[
				29,
				39
			],
			[
				36,
				4
			],
			[
				29,
				-51
			],
			[
				1,
				-42
			],
			[
				-31,
				-17
			],
			[
				-29,
				-13
			]
		],
		[
			[
				18673,
				44869
			],
			[
				-79,
				-23
			],
			[
				-34,
				13
			],
			[
				-16,
				33
			],
			[
				4,
				40
			],
			[
				38,
				29
			],
			[
				44,
				11
			],
			[
				29,
				15
			],
			[
				33,
				-6
			],
			[
				14,
				-63
			],
			[
				-14,
				-34
			],
			[
				-19,
				-15
			]
		],
		[
			[
				18958,
				44730
			],
			[
				-36,
				-2
			],
			[
				-36,
				24
			],
			[
				-51,
				19
			],
			[
				-21,
				36
			],
			[
				1,
				23
			],
			[
				14,
				16
			],
			[
				9,
				7
			],
			[
				26,
				-7
			],
			[
				16,
				-6
			],
			[
				60,
				-60
			],
			[
				18,
				-50
			]
		],
		[
			[
				18694,
				44539
			],
			[
				-85,
				-12
			],
			[
				-117,
				30
			],
			[
				36,
				42
			],
			[
				-57,
				45
			],
			[
				49,
				36
			],
			[
				-5,
				42
			],
			[
				18,
				21
			],
			[
				83,
				-129
			],
			[
				78,
				-75
			]
		],
		[
			[
				18362,
				44622
			],
			[
				54,
				-52
			],
			[
				13,
				2
			],
			[
				-1,
				-39
			],
			[
				-56,
				-23
			],
			[
				-33,
				17
			],
			[
				-81,
				-1
			],
			[
				-48,
				55
			],
			[
				-20,
				38
			],
			[
				-10,
				21
			],
			[
				27,
				38
			],
			[
				53,
				-81
			],
			[
				55,
				32
			],
			[
				-16,
				46
			],
			[
				24,
				19
			],
			[
				39,
				-72
			]
		],
		[
			[
				18841,
				44559
			],
			[
				-42,
				-73
			],
			[
				-33,
				16
			],
			[
				-21,
				43
			],
			[
				-27,
				18
			],
			[
				10,
				56
			],
			[
				14,
				6
			],
			[
				39,
				1
			],
			[
				15,
				-60
			],
			[
				45,
				-7
			]
		],
		[
			[
				18570,
				44328
			],
			[
				-33,
				-15
			],
			[
				-63,
				33
			],
			[
				-40,
				22
			],
			[
				-47,
				27
			],
			[
				6,
				27
			],
			[
				17,
				6
			],
			[
				12,
				1
			],
			[
				16,
				34
			],
			[
				10,
				21
			],
			[
				23,
				-6
			],
			[
				25,
				-15
			],
			[
				8,
				-29
			],
			[
				0,
				-23
			],
			[
				0,
				-3
			],
			[
				66,
				-80
			]
		],
		[
			[
				20309,
				45083
			],
			[
				-38,
				49
			],
			[
				-24,
				238
			],
			[
				0,
				2
			],
			[
				-2,
				12
			],
			[
				29,
				-2
			],
			[
				16,
				-1
			],
			[
				7,
				-122
			],
			[
				27,
				-36
			],
			[
				28,
				68
			],
			[
				98,
				-151
			],
			[
				9,
				-13
			],
			[
				4,
				-6
			],
			[
				56,
				-58
			],
			[
				6,
				-7
			],
			[
				32,
				-35
			],
			[
				26,
				-30
			]
		],
		[
			[
				20583,
				44991
			],
			[
				0,
				0
			],
			[
				11,
				-12
			],
			[
				3,
				-4
			],
			[
				-14,
				-48
			],
			[
				0,
				0
			],
			[
				23,
				-78
			],
			[
				37,
				-4
			],
			[
				9,
				0
			],
			[
				14,
				-2
			],
			[
				-79,
				-75
			],
			[
				-11,
				-10
			],
			[
				-7,
				-6
			],
			[
				-4,
				6
			],
			[
				-13,
				19
			],
			[
				-95,
				1
			],
			[
				19,
				-39
			],
			[
				10,
				-20
			],
			[
				-16,
				7
			],
			[
				-217,
				108
			],
			[
				-52,
				12
			],
			[
				-2,
				104
			],
			[
				41,
				85
			],
			[
				3,
				4
			],
			[
				5,
				2
			],
			[
				70,
				31
			],
			[
				-9,
				11
			],
			[
				0,
				0
			]
		],
		[
			[
				20184,
				45350
			],
			[
				10,
				-60
			],
			[
				11,
				-49
			],
			[
				-50,
				-27
			],
			[
				2,
				-67
			],
			[
				-43,
				-71
			],
			[
				-54,
				50
			],
			[
				-97,
				114
			],
			[
				-29,
				92
			],
			[
				14,
				49
			],
			[
				-89,
				-7
			],
			[
				12,
				-55
			],
			[
				-49,
				-5
			],
			[
				-30,
				45
			],
			[
				-71,
				16
			],
			[
				-2,
				-32
			],
			[
				-60,
				30
			],
			[
				27,
				27
			],
			[
				-29,
				48
			],
			[
				95,
				15
			],
			[
				11,
				32
			],
			[
				-88,
				7
			],
			[
				-43,
				20
			],
			[
				24,
				67
			],
			[
				96,
				19
			],
			[
				19,
				35
			],
			[
				95,
				37
			],
			[
				106,
				17
			],
			[
				68,
				-2
			],
			[
				74,
				51
			],
			[
				52,
				-26
			],
			[
				-83,
				-51
			],
			[
				40,
				-4
			],
			[
				95,
				-7
			],
			[
				20,
				-2
			],
			[
				3,
				-122
			],
			[
				-22,
				-106
			],
			[
				-5,
				-9
			],
			[
				-21,
				-46
			],
			[
				-10,
				-21
			],
			[
				1,
				-2
			]
		],
		[
			[
				19475,
				45463
			],
			[
				10,
				-5
			],
			[
				10,
				-9
			],
			[
				37,
				-32
			],
			[
				87,
				-117
			],
			[
				14,
				-30
			],
			[
				18,
				-41
			],
			[
				165,
				-34
			],
			[
				46,
				-9
			],
			[
				6,
				-4
			],
			[
				37,
				-25
			],
			[
				28,
				-18
			],
			[
				42,
				-62
			],
			[
				41,
				-73
			],
			[
				-1,
				-3
			],
			[
				0,
				-4
			],
			[
				-8,
				-86
			],
			[
				-3,
				-34
			],
			[
				-28,
				-156
			],
			[
				14,
				-4
			],
			[
				86,
				-26
			],
			[
				22,
				-6
			],
			[
				87,
				23
			],
			[
				2,
				21
			],
			[
				6,
				47
			],
			[
				1,
				0
			],
			[
				87,
				-1
			],
			[
				247,
				-165
			],
			[
				-14,
				-56
			],
			[
				-31,
				-60
			],
			[
				-34,
				-63
			],
			[
				-43,
				-177
			],
			[
				-53,
				-3
			],
			[
				-9,
				93
			],
			[
				-76,
				-23
			],
			[
				-171,
				-20
			],
			[
				0,
				0
			],
			[
				-2,
				2
			],
			[
				-72,
				122
			],
			[
				7,
				91
			],
			[
				-106,
				27
			],
			[
				-78,
				-15
			],
			[
				-101,
				-57
			],
			[
				-19,
				21
			],
			[
				-70,
				78
			],
			[
				-4,
				11
			],
			[
				-38,
				114
			],
			[
				-45,
				35
			],
			[
				12,
				66
			],
			[
				-17,
				56
			],
			[
				-6,
				22
			],
			[
				9,
				4
			],
			[
				43,
				23
			],
			[
				10,
				43
			],
			[
				3,
				13
			],
			[
				6,
				-2
			],
			[
				43,
				-19
			],
			[
				61,
				83
			],
			[
				28,
				-5
			],
			[
				32,
				-40
			],
			[
				6,
				-32
			],
			[
				10,
				-49
			],
			[
				20,
				-1
			],
			[
				10,
				0
			],
			[
				22,
				61
			],
			[
				-18,
				49
			],
			[
				-8,
				23
			],
			[
				-10,
				11
			],
			[
				-65,
				24
			],
			[
				-86,
				-18
			],
			[
				-114,
				0
			],
			[
				-49,
				-30
			],
			[
				-65,
				8
			],
			[
				-12,
				5
			],
			[
				-179,
				83
			],
			[
				-6,
				154
			],
			[
				38,
				102
			],
			[
				95,
				-11
			],
			[
				-10,
				48
			],
			[
				-26,
				23
			],
			[
				42,
				44
			],
			[
				68,
				5
			],
			[
				19,
				-10
			]
		],
		[
			[
				20017,
				44250
			],
			[
				-81,
				-74
			],
			[
				-82,
				-24
			],
			[
				-15,
				14
			],
			[
				-93,
				-52
			],
			[
				22,
				111
			],
			[
				57,
				-9
			],
			[
				-45,
				71
			],
			[
				12,
				56
			],
			[
				53,
				36
			],
			[
				129,
				-26
			],
			[
				19,
				-34
			],
			[
				-33,
				-46
			],
			[
				57,
				-23
			]
		],
		[
			[
				18394,
				8960
			],
			[
				0,
				0
			],
			[
				43,
				66
			],
			[
				18,
				27
			],
			[
				16,
				6
			],
			[
				56,
				71
			],
			[
				21,
				46
			],
			[
				-52,
				-6
			],
			[
				-61,
				-85
			],
			[
				-21,
				57
			],
			[
				8,
				110
			],
			[
				-1,
				0
			],
			[
				-22,
				-8
			],
			[
				-4,
				38
			],
			[
				23,
				50
			],
			[
				-5,
				2
			],
			[
				0,
				0
			]
		],
		[
			[
				18413,
				9334
			],
			[
				-39,
				10
			],
			[
				-22,
				-10
			],
			[
				-9,
				-36
			],
			[
				-36,
				-91
			],
			[
				-50,
				-48
			],
			[
				-19,
				-53
			],
			[
				-6,
				-52
			],
			[
				-1,
				-9
			],
			[
				-3,
				2
			],
			[
				-22,
				18
			],
			[
				-11,
				71
			],
			[
				-17,
				39
			],
			[
				-5,
				10
			],
			[
				-18,
				37
			],
			[
				-23,
				55
			],
			[
				5,
				55
			],
			[
				4,
				50
			],
			[
				-1,
				56
			],
			[
				5,
				137
			],
			[
				-37,
				-61
			],
			[
				-9,
				160
			],
			[
				7,
				48
			],
			[
				10,
				110
			]
		],
		[
			[
				18116,
				9832
			],
			[
				0,
				0
			],
			[
				2,
				13
			],
			[
				5,
				83
			],
			[
				0,
				6
			],
			[
				21,
				45
			],
			[
				0,
				0
			],
			[
				1,
				1
			],
			[
				35,
				116
			],
			[
				22,
				71
			],
			[
				14,
				44
			],
			[
				-4,
				104
			],
			[
				0,
				0
			]
		],
		[
			[
				18360,
				9062
			],
			[
				-38,
				-10
			],
			[
				-11,
				37
			],
			[
				15,
				22
			],
			[
				-22,
				14
			],
			[
				16,
				30
			],
			[
				66,
				36
			],
			[
				10,
				-19
			],
			[
				-1,
				-25
			],
			[
				0,
				-31
			],
			[
				-1,
				-18
			],
			[
				-34,
				-36
			]
		],
		[
			[
				18149,
				10163
			],
			[
				5,
				-22
			],
			[
				-22,
				9
			],
			[
				-15,
				-28
			],
			[
				7,
				-73
			],
			[
				2,
				-18
			],
			[
				-21,
				-19
			],
			[
				-9,
				-34
			],
			[
				9,
				-58
			],
			[
				-45,
				-70
			],
			[
				-19,
				-15
			],
			[
				-30,
				42
			],
			[
				-39,
				-47
			],
			[
				-40,
				-3
			],
			[
				-20,
				29
			],
			[
				8,
				119
			],
			[
				47,
				12
			],
			[
				15,
				4
			],
			[
				20,
				96
			],
			[
				8,
				34
			],
			[
				25,
				0
			],
			[
				23,
				36
			],
			[
				6,
				8
			],
			[
				-9,
				20
			],
			[
				-18,
				10
			],
			[
				-8,
				5
			],
			[
				3,
				79
			],
			[
				30,
				4
			],
			[
				4,
				1
			],
			[
				37,
				45
			],
			[
				13,
				43
			],
			[
				-26,
				39
			],
			[
				4,
				25
			],
			[
				32,
				-7
			],
			[
				18,
				-3
			],
			[
				0,
				-3
			],
			[
				37,
				-115
			],
			[
				-46,
				-82
			],
			[
				14,
				-63
			]
		],
		[
			[
				21956,
				12370
			],
			[
				-4,
				-36
			],
			[
				8,
				-35
			],
			[
				9,
				-42
			],
			[
				7,
				-94
			],
			[
				-5,
				-22
			],
			[
				-1,
				-1
			],
			[
				-19,
				-23
			],
			[
				-7,
				-23
			],
			[
				7,
				-29
			],
			[
				4,
				-8
			],
			[
				20,
				-40
			],
			[
				-1,
				-24
			],
			[
				-2,
				-33
			],
			[
				13,
				-23
			],
			[
				-1,
				-27
			],
			[
				-1,
				-61
			],
			[
				6,
				-66
			],
			[
				16,
				-25
			],
			[
				7,
				-1
			],
			[
				1,
				0
			],
			[
				0,
				0
			],
			[
				-18,
				-40
			],
			[
				-26,
				-2
			],
			[
				-77,
				-5
			],
			[
				-50,
				-3
			],
			[
				-34,
				-70
			],
			[
				-8,
				-71
			],
			[
				-15,
				-67
			],
			[
				-24,
				-67
			],
			[
				-19,
				-28
			],
			[
				-1,
				-2
			],
			[
				-19,
				-3
			],
			[
				-49,
				-8
			],
			[
				-68,
				-10
			],
			[
				-62,
				-10
			],
			[
				-10,
				-2
			],
			[
				-24,
				-3
			],
			[
				-19,
				-15
			],
			[
				-20,
				-14
			],
			[
				-14,
				-10
			],
			[
				0,
				0
			],
			[
				-72,
				-47
			],
			[
				-32,
				-21
			],
			[
				-19,
				-13
			],
			[
				-6,
				-11
			]
		],
		[
			[
				21327,
				11235
			],
			[
				0,
				0
			],
			[
				-1,
				-2
			],
			[
				-7,
				-11
			],
			[
				-23,
				-39
			],
			[
				-31,
				-50
			],
			[
				-7,
				-45
			],
			[
				-2,
				-13
			],
			[
				-3,
				-19
			],
			[
				-8,
				-54
			],
			[
				2,
				-10
			],
			[
				19,
				-94
			],
			[
				16,
				-75
			],
			[
				35,
				-163
			],
			[
				0,
				0
			],
			[
				7,
				-30
			],
			[
				34,
				-162
			],
			[
				35,
				-87
			],
			[
				2,
				-4
			],
			[
				18,
				-45
			],
			[
				19,
				-80
			],
			[
				20,
				-145
			],
			[
				0,
				0
			],
			[
				3,
				-201
			],
			[
				3,
				-7
			],
			[
				37,
				-91
			],
			[
				5,
				-54
			],
			[
				5,
				-60
			],
			[
				0,
				0
			],
			[
				7,
				-75
			],
			[
				35,
				-82
			],
			[
				0,
				0
			],
			[
				-5,
				-23
			],
			[
				0,
				0
			],
			[
				56,
				-117
			],
			[
				3,
				-8
			],
			[
				21,
				-54
			],
			[
				0,
				0
			],
			[
				6,
				-82
			],
			[
				7,
				-111
			],
			[
				3,
				-31
			],
			[
				-4,
				-47
			],
			[
				3,
				-46
			]
		],
		[
			[
				21637,
				9018
			],
			[
				13,
				-223
			],
			[
				13,
				-158
			],
			[
				-3,
				-16
			],
			[
				-8,
				-14
			],
			[
				-7,
				-6
			],
			[
				-36,
				-33
			],
			[
				-20,
				-29
			],
			[
				-14,
				-17
			],
			[
				0,
				0
			],
			[
				-51,
				-115
			],
			[
				0,
				-5
			],
			[
				-3,
				-20
			],
			[
				-3,
				-25
			],
			[
				2,
				-9
			],
			[
				4,
				-31
			],
			[
				-7,
				-16
			],
			[
				-2,
				-33
			],
			[
				-4,
				-20
			],
			[
				-9,
				-51
			],
			[
				-3,
				-26
			],
			[
				-2,
				-21
			],
			[
				1,
				-10
			],
			[
				2,
				-19
			],
			[
				2,
				-25
			],
			[
				0,
				-14
			],
			[
				0,
				0
			],
			[
				-1,
				-9
			],
			[
				2,
				-15
			],
			[
				1,
				-8
			],
			[
				-3,
				-71
			],
			[
				0,
				0
			],
			[
				1,
				-13
			],
			[
				3,
				-24
			],
			[
				1,
				-14
			],
			[
				1,
				-14
			],
			[
				0,
				0
			],
			[
				-27,
				-63
			],
			[
				-9,
				-37
			],
			[
				-4,
				-29
			],
			[
				-2,
				-10
			],
			[
				-2,
				-7
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				2,
				0
			],
			[
				10,
				-5
			],
			[
				19,
				-38
			],
			[
				12,
				-43
			],
			[
				2,
				-7
			],
			[
				-6,
				-81
			],
			[
				-3,
				-16
			],
			[
				0,
				-1
			],
			[
				-69,
				-110
			],
			[
				-10,
				-18
			],
			[
				-34,
				-104
			],
			[
				0,
				0
			],
			[
				-8,
				-15
			],
			[
				-48,
				-82
			],
			[
				-27,
				-31
			],
			[
				0,
				0
			]
		],
		[
			[
				3227,
				14081
			],
			[
				-6,
				41
			],
			[
				-1,
				8
			],
			[
				12,
				160
			],
			[
				23,
				26
			],
			[
				90,
				-121
			],
			[
				-8,
				60
			],
			[
				51,
				0
			],
			[
				45,
				-1
			],
			[
				23,
				-37
			],
			[
				-4,
				-43
			],
			[
				12,
				-34
			],
			[
				23,
				28
			],
			[
				34,
				71
			],
			[
				25,
				89
			],
			[
				62,
				89
			],
			[
				-33,
				6
			],
			[
				-80,
				-96
			],
			[
				-4,
				97
			],
			[
				-31,
				4
			],
			[
				-28,
				-120
			],
			[
				-48,
				-12
			],
			[
				-23,
				-6
			],
			[
				-76,
				157
			],
			[
				36,
				71
			],
			[
				-56,
				-27
			],
			[
				14,
				111
			],
			[
				17,
				32
			],
			[
				46,
				16
			],
			[
				10,
				47
			],
			[
				-38,
				62
			],
			[
				-49,
				91
			],
			[
				-20,
				69
			],
			[
				7,
				60
			],
			[
				130,
				63
			],
			[
				12,
				31
			],
			[
				-23,
				12
			],
			[
				-5,
				2
			],
			[
				-55,
				-36
			],
			[
				-66,
				1
			],
			[
				-53,
				-27
			],
			[
				-20,
				72
			],
			[
				-25,
				-106
			],
			[
				13,
				-43
			],
			[
				-16,
				-50
			],
			[
				-60,
				-30
			],
			[
				-55,
				-51
			],
			[
				-115,
				-30
			],
			[
				-35,
				18
			],
			[
				-77,
				39
			],
			[
				40,
				112
			],
			[
				24,
				-12
			],
			[
				0,
				75
			],
			[
				6,
				28
			],
			[
				27,
				11
			],
			[
				-10,
				64
			],
			[
				-31,
				22
			],
			[
				-3,
				50
			],
			[
				0,
				1
			],
			[
				0,
				0
			],
			[
				7,
				2
			],
			[
				33,
				7
			],
			[
				52,
				-23
			],
			[
				24,
				33
			],
			[
				96,
				135
			],
			[
				9,
				12
			],
			[
				197,
				18
			],
			[
				59,
				43
			],
			[
				-40,
				61
			],
			[
				0,
				1
			],
			[
				0,
				-1
			],
			[
				-41,
				-31
			],
			[
				-184,
				11
			],
			[
				-115,
				-58
			],
			[
				127,
				204
			],
			[
				13,
				90
			],
			[
				-27,
				30
			],
			[
				-38,
				-67
			],
			[
				-48,
				-125
			],
			[
				-102,
				-127
			],
			[
				3,
				89
			],
			[
				-43,
				17
			],
			[
				62,
				85
			],
			[
				82,
				38
			],
			[
				7,
				59
			],
			[
				50,
				110
			],
			[
				16,
				-32
			],
			[
				14,
				77
			],
			[
				-30,
				20
			],
			[
				5,
				73
			]
		],
		[
			[
				3043,
				15946
			],
			[
				0,
				0
			],
			[
				9,
				138
			],
			[
				84,
				68
			],
			[
				-4,
				31
			],
			[
				21,
				89
			],
			[
				21,
				35
			],
			[
				101,
				7
			],
			[
				40,
				-3
			],
			[
				47,
				48
			],
			[
				26,
				92
			],
			[
				-38,
				66
			],
			[
				-39,
				-49
			],
			[
				-22,
				50
			],
			[
				-36,
				33
			],
			[
				-33,
				-53
			],
			[
				21,
				-107
			],
			[
				-49,
				-46
			],
			[
				-37,
				1
			],
			[
				-48,
				-75
			],
			[
				-30,
				-119
			],
			[
				-31,
				-10
			],
			[
				18,
				183
			],
			[
				-38,
				18
			],
			[
				-8,
				4
			],
			[
				-1,
				-18
			],
			[
				-12,
				-187
			],
			[
				-42,
				-72
			],
			[
				-11,
				-60
			],
			[
				23,
				-14
			],
			[
				-25,
				-192
			],
			[
				-25,
				-56
			],
			[
				0,
				0
			],
			[
				0,
				0
			]
		],
		[
			[
				2925,
				15748
			],
			[
				-114,
				-153
			],
			[
				-44,
				-38
			],
			[
				37,
				-91
			],
			[
				-50,
				-143
			],
			[
				-63,
				-107
			],
			[
				0,
				0
			],
			[
				25,
				-5
			],
			[
				-49,
				-87
			],
			[
				-58,
				-31
			],
			[
				-16,
				-8
			],
			[
				-6,
				22
			],
			[
				-41,
				-30
			],
			[
				-55,
				-40
			],
			[
				-30,
				-59
			],
			[
				-20,
				-38
			],
			[
				28,
				-29
			],
			[
				-43,
				-191
			],
			[
				-28,
				-25
			],
			[
				-39,
				94
			],
			[
				-2,
				5
			],
			[
				4,
				102
			],
			[
				-70,
				-52
			],
			[
				2,
				-10
			],
			[
				-28,
				-11
			],
			[
				-44,
				-86
			],
			[
				-43,
				-44
			],
			[
				-39,
				4
			],
			[
				-7,
				23
			],
			[
				17,
				29
			],
			[
				18,
				27
			],
			[
				16,
				13
			],
			[
				11,
				18
			],
			[
				16,
				15
			],
			[
				28,
				31
			],
			[
				44,
				7
			],
			[
				13,
				41
			],
			[
				-23,
				115
			],
			[
				-34,
				-1
			],
			[
				-1,
				-30
			],
			[
				-44,
				10
			],
			[
				-59,
				71
			],
			[
				-44,
				10
			],
			[
				-18,
				37
			],
			[
				4,
				53
			],
			[
				9,
				33
			],
			[
				49,
				26
			],
			[
				31,
				-62
			],
			[
				33,
				30
			],
			[
				36,
				93
			],
			[
				-44,
				44
			],
			[
				0,
				0
			]
		],
		[
			[
				2163,
				14802
			],
			[
				-36,
				-37
			],
			[
				-66,
				72
			],
			[
				17,
				115
			],
			[
				51,
				65
			],
			[
				67,
				-70
			],
			[
				-33,
				-145
			]
		],
		[
			[
				2327,
				14707
			],
			[
				-65,
				-35
			],
			[
				12,
				74
			],
			[
				45,
				40
			],
			[
				8,
				-79
			]
		],
		[
			[
				2190,
				15330
			],
			[
				-35,
				35
			],
			[
				-51,
				-11
			],
			[
				-81,
				-74
			],
			[
				-19,
				24
			],
			[
				-10,
				12
			],
			[
				-46,
				-1
			],
			[
				-1,
				0
			],
			[
				-16,
				-61
			],
			[
				-7,
				-48
			],
			[
				-45,
				-26
			],
			[
				-72,
				47
			],
			[
				5,
				81
			],
			[
				53,
				49
			],
			[
				52,
				-11
			],
			[
				24,
				71
			],
			[
				109,
				110
			],
			[
				30,
				23
			],
			[
				-20,
				82
			],
			[
				-27,
				-13
			],
			[
				-21,
				-38
			],
			[
				-37,
				-23
			],
			[
				0,
				0
			],
			[
				-43,
				26
			],
			[
				-15,
				47
			],
			[
				-52,
				-19
			],
			[
				2,
				-55
			],
			[
				38,
				0
			],
			[
				-37,
				-109
			],
			[
				-84,
				26
			],
			[
				0,
				3
			],
			[
				3,
				55
			],
			[
				3,
				53
			],
			[
				-92,
				85
			],
			[
				-1,
				9
			],
			[
				-12,
				88
			],
			[
				14,
				34
			],
			[
				6,
				150
			],
			[
				25,
				24
			],
			[
				0,
				0
			],
			[
				89,
				8
			],
			[
				48,
				-63
			],
			[
				2,
				47
			],
			[
				11,
				-2
			],
			[
				1,
				0
			],
			[
				89,
				-15
			],
			[
				10,
				-75
			],
			[
				82,
				48
			],
			[
				2,
				101
			],
			[
				36,
				15
			],
			[
				-22,
				95
			],
			[
				-44,
				-94
			],
			[
				-88,
				-45
			],
			[
				-18,
				18
			],
			[
				-14,
				14
			],
			[
				-21,
				-7
			],
			[
				-20,
				-7
			],
			[
				-32,
				-11
			],
			[
				-50,
				121
			],
			[
				-5,
				122
			],
			[
				-50,
				-119
			],
			[
				33,
				-43
			],
			[
				-9,
				-53
			],
			[
				-29,
				49
			],
			[
				-43,
				-53
			],
			[
				-24,
				63
			],
			[
				-38,
				37
			],
			[
				38,
				48
			],
			[
				24,
				24
			],
			[
				-24,
				52
			],
			[
				-53,
				-45
			],
			[
				-11,
				82
			],
			[
				-6,
				45
			],
			[
				-1,
				7
			],
			[
				145,
				129
			],
			[
				3,
				3
			],
			[
				28,
				-19
			],
			[
				32,
				55
			],
			[
				51,
				-53
			],
			[
				24,
				33
			],
			[
				133,
				-74
			],
			[
				-18,
				102
			],
			[
				45,
				23
			],
			[
				1,
				1
			],
			[
				2,
				15
			],
			[
				2,
				39
			],
			[
				-60,
				56
			],
			[
				-64,
				105
			],
			[
				-6,
				85
			],
			[
				113,
				-73
			],
			[
				7,
				50
			],
			[
				-145,
				107
			],
			[
				22,
				57
			],
			[
				-68,
				57
			],
			[
				8,
				106
			],
			[
				11,
				82
			],
			[
				31,
				41
			],
			[
				35,
				46
			],
			[
				52,
				68
			],
			[
				113,
				-49
			],
			[
				98,
				-70
			],
			[
				88,
				-123
			],
			[
				0,
				-1
			],
			[
				134,
				-234
			],
			[
				34,
				-87
			],
			[
				18,
				71
			],
			[
				154,
				-209
			],
			[
				40,
				-12
			],
			[
				34,
				7
			],
			[
				45,
				9
			],
			[
				21,
				-13
			],
			[
				70,
				54
			],
			[
				122,
				6
			],
			[
				14,
				37
			]
		],
		[
			[
				1608,
				16091
			],
			[
				0,
				0
			],
			[
				30,
				-19
			],
			[
				-6,
				-14
			],
			[
				0,
				0
			]
		],
		[
			[
				23107,
				54843
			],
			[
				0,
				0
			],
			[
				59,
				22
			],
			[
				-39,
				27
			],
			[
				0,
				0
			]
		],
		[
			[
				23127,
				54892
			],
			[
				-17,
				11
			],
			[
				30,
				22
			]
		],
		[
			[
				23140,
				54925
			],
			[
				0,
				0
			],
			[
				25,
				18
			],
			[
				69,
				-7
			],
			[
				35,
				50
			],
			[
				27,
				38
			],
			[
				5,
				49
			],
			[
				291,
				169
			],
			[
				-14,
				12
			],
			[
				-20,
				16
			],
			[
				-213,
				-93
			],
			[
				-64,
				16
			],
			[
				-80,
				-57
			],
			[
				-20,
				26
			],
			[
				122,
				148
			],
			[
				142,
				30
			],
			[
				156,
				61
			],
			[
				12,
				-26
			],
			[
				27,
				10
			],
			[
				31,
				56
			],
			[
				-47,
				4
			],
			[
				-7,
				53
			],
			[
				191,
				180
			],
			[
				91,
				65
			],
			[
				-73,
				-9
			],
			[
				18,
				49
			],
			[
				-61,
				10
			],
			[
				-9,
				49
			],
			[
				-34,
				11
			],
			[
				-99,
				-22
			],
			[
				-148,
				-140
			],
			[
				-41,
				17
			],
			[
				172,
				202
			],
			[
				-81,
				26
			],
			[
				35,
				39
			],
			[
				268,
				54
			],
			[
				40,
				89
			],
			[
				-56,
				9
			],
			[
				117,
				71
			],
			[
				63,
				-64
			],
			[
				6,
				-103
			],
			[
				64,
				-92
			],
			[
				-43,
				-191
			],
			[
				19,
				-78
			],
			[
				-148,
				-70
			],
			[
				-25,
				-30
			],
			[
				-23,
				-30
			],
			[
				12,
				-68
			],
			[
				50,
				13
			],
			[
				9,
				6
			],
			[
				89,
				60
			],
			[
				8,
				29
			],
			[
				-10,
				24
			],
			[
				40,
				26
			],
			[
				78,
				-58
			],
			[
				-50,
				-19
			],
			[
				-30,
				-39
			],
			[
				39,
				-8
			],
			[
				-18,
				-19
			],
			[
				-10,
				-11
			],
			[
				-59,
				-24
			],
			[
				24,
				-19
			],
			[
				114,
				53
			],
			[
				14,
				-43
			],
			[
				29,
				-92
			],
			[
				-93,
				-93
			],
			[
				-155,
				-32
			],
			[
				-1,
				0
			],
			[
				-2,
				-13
			],
			[
				-2,
				-12
			],
			[
				-11,
				-69
			],
			[
				-382,
				-252
			],
			[
				-269,
				-71
			],
			[
				-107,
				-60
			],
			[
				-67,
				-14
			],
			[
				-23,
				32
			],
			[
				0,
				0
			]
		],
		[
			[
				23077,
				54767
			],
			[
				-4,
				5
			],
			[
				17,
				50
			],
			[
				5,
				16
			],
			[
				12,
				5
			]
		],
		[
			[
				24539,
				55630
			],
			[
				-54,
				-28
			],
			[
				-95,
				37
			],
			[
				-47,
				-33
			],
			[
				-108,
				21
			],
			[
				62,
				94
			],
			[
				-44,
				23
			],
			[
				11,
				60
			],
			[
				-62,
				50
			],
			[
				48,
				64
			],
			[
				107,
				-30
			],
			[
				105,
				24
			],
			[
				3,
				-29
			],
			[
				-44,
				-35
			],
			[
				-51,
				-4
			],
			[
				-26,
				-77
			],
			[
				27,
				-66
			],
			[
				33,
				100
			],
			[
				67,
				10
			],
			[
				43,
				-74
			],
			[
				20,
				7
			],
			[
				55,
				18
			],
			[
				15,
				-98
			],
			[
				-65,
				-34
			]
		],
		[
			[
				23049,
				56317
			],
			[
				-121,
				-56
			],
			[
				8,
				112
			],
			[
				47,
				13
			],
			[
				59,
				-27
			],
			[
				7,
				-42
			]
		],
		[
			[
				22773,
				56195
			],
			[
				-68,
				-72
			],
			[
				-21,
				55
			],
			[
				44,
				49
			],
			[
				16,
				17
			],
			[
				45,
				-6
			],
			[
				-16,
				-43
			]
		],
		[
			[
				23160,
				55599
			],
			[
				-91,
				-112
			],
			[
				14,
				93
			],
			[
				-39,
				59
			],
			[
				42,
				24
			],
			[
				51,
				122
			],
			[
				37,
				37
			],
			[
				6,
				65
			],
			[
				47,
				27
			],
			[
				9,
				-108
			],
			[
				2,
				-28
			],
			[
				-85,
				-130
			],
			[
				7,
				-49
			]
		],
		[
			[
				23393,
				55631
			],
			[
				-199,
				-122
			],
			[
				35,
				99
			],
			[
				51,
				57
			],
			[
				71,
				40
			],
			[
				39,
				1
			],
			[
				3,
				-75
			]
		],
		[
			[
				23936,
				54982
			],
			[
				-78,
				-79
			],
			[
				-6,
				-24
			],
			[
				-74,
				-9
			],
			[
				-40,
				7
			],
			[
				-26,
				57
			],
			[
				61,
				36
			],
			[
				41,
				-6
			],
			[
				85,
				39
			],
			[
				37,
				-21
			]
		],
		[
			[
				24904,
				54447
			],
			[
				-25,
				2
			],
			[
				1,
				90
			],
			[
				110,
				66
			],
			[
				44,
				60
			],
			[
				13,
				37
			],
			[
				2,
				6
			],
			[
				-33,
				26
			],
			[
				-18,
				60
			],
			[
				49,
				99
			],
			[
				-24,
				17
			],
			[
				17,
				59
			],
			[
				120,
				82
			],
			[
				106,
				34
			],
			[
				75,
				69
			],
			[
				0,
				2
			],
			[
				-5,
				21
			],
			[
				-10,
				-4
			],
			[
				-30,
				-9
			],
			[
				-254,
				-91
			],
			[
				-6,
				-2
			],
			[
				-38,
				-14
			],
			[
				-108,
				-61
			],
			[
				-127,
				-15
			],
			[
				-31,
				37
			],
			[
				-123,
				-15
			],
			[
				-46,
				-16
			],
			[
				-9,
				-3
			],
			[
				-210,
				-71
			],
			[
				-194,
				-66
			],
			[
				-2,
				36
			],
			[
				229,
				100
			],
			[
				125,
				51
			],
			[
				59,
				24
			],
			[
				129,
				52
			],
			[
				-130,
				-35
			],
			[
				-78,
				-21
			],
			[
				-153,
				-42
			],
			[
				35,
				23
			],
			[
				64,
				42
			],
			[
				-82,
				-11
			],
			[
				-59,
				-4
			],
			[
				-73,
				-5
			],
			[
				-7,
				55
			],
			[
				88,
				95
			],
			[
				171,
				140
			],
			[
				82,
				45
			],
			[
				74,
				41
			],
			[
				45,
				25
			],
			[
				0,
				50
			],
			[
				0,
				8
			],
			[
				281,
				85
			],
			[
				49,
				9
			],
			[
				64,
				12
			],
			[
				111,
				19
			],
			[
				13,
				3
			],
			[
				-15,
				10
			],
			[
				-30,
				20
			],
			[
				26,
				5
			],
			[
				229,
				43
			],
			[
				6,
				-35
			],
			[
				-17,
				-26
			],
			[
				34,
				-57
			],
			[
				53,
				46
			],
			[
				-28,
				38
			],
			[
				-4,
				6
			],
			[
				44,
				62
			],
			[
				293,
				124
			],
			[
				157,
				53
			],
			[
				-12,
				11
			],
			[
				-37,
				37
			],
			[
				53,
				58
			],
			[
				127,
				94
			],
			[
				26,
				19
			],
			[
				70,
				36
			],
			[
				102,
				4
			],
			[
				55,
				-49
			],
			[
				13,
				-12
			],
			[
				62,
				15
			],
			[
				13,
				6
			],
			[
				76,
				36
			],
			[
				103,
				23
			],
			[
				61,
				3
			]
		],
		[
			[
				24474,
				54754
			],
			[
				0,
				0
			],
			[
				98,
				21
			],
			[
				72,
				15
			],
			[
				289,
				113
			],
			[
				20,
				-18
			],
			[
				-96,
				-100
			],
			[
				26,
				-22
			],
			[
				80,
				41
			],
			[
				14,
				-125
			],
			[
				-239,
				-153
			],
			[
				-11,
				38
			],
			[
				-145,
				-69
			],
			[
				-111,
				-52
			],
			[
				48,
				71
			],
			[
				-188,
				-84
			],
			[
				-66,
				-53
			],
			[
				0,
				0
			]
		],
		[
			[
				24265,
				54377
			],
			[
				-235,
				-188
			],
			[
				-45,
				-50
			],
			[
				-148,
				-162
			],
			[
				-7,
				-3
			],
			[
				-43,
				-17
			],
			[
				-44,
				-17
			],
			[
				-11,
				12
			],
			[
				-17,
				18
			],
			[
				-252,
				-57
			],
			[
				-34,
				-25
			],
			[
				-83,
				-61
			],
			[
				-3,
				61
			],
			[
				-15,
				31
			],
			[
				-5,
				11
			],
			[
				2,
				50
			],
			[
				103,
				158
			],
			[
				89,
				-3
			],
			[
				40,
				-2
			],
			[
				12,
				35
			],
			[
				-40,
				71
			],
			[
				16,
				55
			],
			[
				16,
				54
			],
			[
				138,
				186
			],
			[
				1,
				3
			],
			[
				45,
				38
			],
			[
				91,
				78
			],
			[
				22,
				19
			],
			[
				142,
				102
			],
			[
				84,
				38
			],
			[
				30,
				1
			],
			[
				1,
				0
			],
			[
				151,
				17
			],
			[
				28,
				4
			],
			[
				8,
				-20
			],
			[
				-123,
				-65
			],
			[
				-88,
				-103
			],
			[
				-55,
				-64
			],
			[
				-19,
				-75
			],
			[
				31,
				16
			],
			[
				206,
				108
			],
			[
				113,
				101
			],
			[
				107,
				22
			]
		],
		[
			[
				22255,
				54966
			],
			[
				-103,
				-74
			],
			[
				29,
				97
			],
			[
				39,
				69
			],
			[
				41,
				49
			],
			[
				27,
				0
			],
			[
				23,
				-19
			],
			[
				-25,
				-63
			],
			[
				-31,
				-59
			]
		],
		[
			[
				23063,
				54825
			],
			[
				-8,
				-30
			],
			[
				-24,
				-24
			],
			[
				-13,
				-42
			],
			[
				-43,
				-25
			],
			[
				-3,
				2
			],
			[
				-28,
				13
			],
			[
				15,
				27
			],
			[
				28,
				29
			],
			[
				27,
				48
			],
			[
				-30,
				-5
			],
			[
				-26,
				-21
			],
			[
				-29,
				10
			],
			[
				22,
				30
			],
			[
				26,
				19
			],
			[
				3,
				23
			],
			[
				18,
				39
			],
			[
				76,
				14
			],
			[
				18,
				-13
			],
			[
				-5,
				-43
			],
			[
				-14,
				-12
			],
			[
				-10,
				-39
			]
		],
		[
			[
				23223,
				54559
			],
			[
				-160,
				-128
			],
			[
				-27,
				77
			],
			[
				-3,
				9
			],
			[
				21,
				110
			],
			[
				31,
				23
			],
			[
				55,
				40
			],
			[
				202,
				72
			],
			[
				-4,
				-38
			],
			[
				-25,
				-9
			],
			[
				-76,
				-31
			],
			[
				-28,
				-63
			],
			[
				-46,
				-28
			],
			[
				60,
				-34
			]
		],
		[
			[
				23018,
				54404
			],
			[
				-138,
				-48
			],
			[
				-54,
				27
			],
			[
				76,
				87
			],
			[
				58,
				133
			],
			[
				67,
				7
			],
			[
				-14,
				-45
			],
			[
				-9,
				-44
			],
			[
				4,
				-38
			],
			[
				5,
				-39
			],
			[
				5,
				-40
			]
		],
		[
			[
				23079,
				54349
			],
			[
				-23,
				-70
			],
			[
				-90,
				-60
			],
			[
				-23,
				9
			],
			[
				47,
				53
			],
			[
				30,
				37
			],
			[
				-32,
				24
			],
			[
				-99,
				-83
			],
			[
				-26,
				-40
			],
			[
				-82,
				-107
			],
			[
				26,
				173
			],
			[
				107,
				63
			],
			[
				105,
				38
			],
			[
				60,
				-37
			]
		],
		[
			[
				22680,
				54011
			],
			[
				-68,
				-92
			],
			[
				5,
				88
			],
			[
				10,
				65
			],
			[
				19,
				37
			],
			[
				71,
				12
			],
			[
				19,
				-24
			],
			[
				-10,
				-71
			],
			[
				-46,
				-15
			]
		],
		[
			[
				22553,
				54028
			],
			[
				-143,
				-81
			],
			[
				-23,
				15
			],
			[
				22,
				96
			],
			[
				74,
				50
			],
			[
				16,
				44
			],
			[
				26,
				17
			],
			[
				39,
				-18
			],
			[
				-11,
				-123
			]
		],
		[
			[
				22848,
				54540
			],
			[
				-65,
				-46
			],
			[
				-6,
				47
			],
			[
				32,
				40
			],
			[
				21,
				49
			],
			[
				-69,
				36
			],
			[
				12,
				54
			],
			[
				33,
				22
			],
			[
				39,
				-6
			],
			[
				55,
				-55
			],
			[
				29,
				-45
			],
			[
				-36,
				-81
			],
			[
				-45,
				-15
			]
		],
		[
			[
				21271,
				54795
			],
			[
				-37,
				-63
			],
			[
				-42,
				47
			],
			[
				79,
				16
			]
		],
		[
			[
				22828,
				55184
			],
			[
				-51,
				-47
			],
			[
				-84,
				8
			],
			[
				56,
				52
			],
			[
				79,
				-13
			]
		],
		[
			[
				22288,
				55402
			],
			[
				-39,
				-17
			],
			[
				-30,
				3
			],
			[
				3,
				34
			],
			[
				15,
				23
			],
			[
				38,
				13
			],
			[
				36,
				15
			],
			[
				40,
				15
			],
			[
				31,
				-5
			],
			[
				-10,
				-25
			],
			[
				-46,
				-34
			],
			[
				-38,
				-22
			]
		],
		[
			[
				23304,
				54194
			],
			[
				-57,
				-132
			],
			[
				-36,
				-1
			],
			[
				-146,
				-202
			],
			[
				15,
				-48
			],
			[
				-56,
				-63
			],
			[
				-20,
				-1
			],
			[
				-62,
				-94
			],
			[
				-3,
				-74
			],
			[
				-51,
				-39
			],
			[
				-2,
				108
			],
			[
				49,
				72
			],
			[
				-6,
				30
			],
			[
				28,
				89
			],
			[
				72,
				41
			],
			[
				127,
				179
			],
			[
				11,
				24
			],
			[
				-30,
				-10
			],
			[
				-31,
				-16
			],
			[
				-18,
				37
			],
			[
				31,
				83
			],
			[
				140,
				38
			],
			[
				45,
				-21
			]
		],
		[
			[
				23807,
				53923
			],
			[
				-191,
				-244
			],
			[
				-68,
				-12
			],
			[
				30,
				40
			],
			[
				-23,
				10
			],
			[
				-63,
				-40
			],
			[
				-5,
				14
			],
			[
				-8,
				26
			],
			[
				55,
				56
			],
			[
				135,
				50
			],
			[
				72,
				93
			],
			[
				37,
				4
			],
			[
				29,
				3
			]
		],
		[
			[
				24024,
				53673
			],
			[
				-53,
				-44
			],
			[
				-47,
				82
			],
			[
				11,
				16
			],
			[
				27,
				25
			],
			[
				8,
				10
			],
			[
				29,
				28
			],
			[
				54,
				25
			],
			[
				-18,
				-126
			],
			[
				-11,
				-16
			]
		],
		[
			[
				23394,
				53560
			],
			[
				23,
				-56
			],
			[
				72,
				80
			],
			[
				93,
				33
			],
			[
				15,
				27
			],
			[
				94,
				49
			],
			[
				23,
				-10
			],
			[
				-68,
				-166
			],
			[
				-36,
				-17
			],
			[
				-30,
				1
			],
			[
				-72,
				-65
			],
			[
				-41,
				-2
			],
			[
				-1,
				-1
			],
			[
				-27,
				-39
			],
			[
				-55,
				-4
			],
			[
				-36,
				37
			],
			[
				13,
				66
			],
			[
				-16,
				51
			],
			[
				5,
				73
			],
			[
				87,
				69
			],
			[
				21,
				-20
			],
			[
				-2,
				-5
			],
			[
				-19,
				-38
			],
			[
				-43,
				-63
			]
		],
		[
			[
				23869,
				53392
			],
			[
				-18,
				-50
			],
			[
				-4,
				-33
			],
			[
				-4,
				-17
			],
			[
				-10,
				-32
			],
			[
				-47,
				-90
			],
			[
				-34,
				-8
			],
			[
				-16,
				17
			],
			[
				-1,
				27
			],
			[
				26,
				111
			],
			[
				42,
				-2
			],
			[
				12,
				50
			],
			[
				-48,
				-7
			],
			[
				-8,
				35
			],
			[
				55,
				88
			],
			[
				41,
				10
			],
			[
				23,
				58
			],
			[
				41,
				1
			],
			[
				-10,
				-80
			],
			[
				-9,
				-54
			],
			[
				-31,
				-24
			]
		],
		[
			[
				23651,
				53140
			],
			[
				-80,
				-107
			],
			[
				-41,
				-13
			],
			[
				-40,
				24
			],
			[
				-156,
				-174
			],
			[
				-28,
				56
			],
			[
				83,
				96
			],
			[
				4,
				111
			],
			[
				128,
				104
			],
			[
				76,
				30
			],
			[
				36,
				71
			],
			[
				35,
				-3
			],
			[
				-10,
				-104
			],
			[
				-7,
				-91
			]
		],
		[
			[
				22910,
				53335
			],
			[
				-21,
				-170
			],
			[
				-83,
				60
			],
			[
				36,
				94
			],
			[
				68,
				16
			]
		],
		[
			[
				23223,
				53501
			],
			[
				-71,
				-158
			],
			[
				-24,
				35
			],
			[
				17,
				118
			],
			[
				28,
				35
			],
			[
				19,
				139
			],
			[
				43,
				69
			],
			[
				23,
				-3
			],
			[
				-35,
				-235
			]
		],
		[
			[
				23902,
				53271
			],
			[
				-32,
				-39
			],
			[
				-15,
				4
			],
			[
				17,
				106
			],
			[
				36,
				52
			],
			[
				25,
				-13
			],
			[
				-11,
				-48
			],
			[
				-20,
				-62
			]
		],
		[
			[
				23028,
				54036
			],
			[
				-46,
				-40
			],
			[
				-19,
				6
			],
			[
				5,
				48
			],
			[
				28,
				91
			],
			[
				66,
				30
			],
			[
				27,
				0
			],
			[
				-28,
				-91
			],
			[
				-33,
				-44
			]
		],
		[
			[
				4349,
				15074
			],
			[
				-2,
				1
			],
			[
				-12,
				33
			],
			[
				76,
				58
			],
			[
				18,
				89
			],
			[
				35,
				39
			],
			[
				50,
				3
			],
			[
				33,
				-11
			],
			[
				12,
				-34
			],
			[
				81,
				42
			],
			[
				37,
				47
			],
			[
				-7,
				77
			],
			[
				41,
				54
			],
			[
				-16,
				38
			],
			[
				2,
				13
			],
			[
				6,
				27
			],
			[
				10,
				-1
			],
			[
				34,
				-4
			],
			[
				43,
				18
			],
			[
				8,
				28
			],
			[
				-4,
				81
			],
			[
				49,
				-4
			],
			[
				-2,
				10
			],
			[
				-1,
				2
			],
			[
				-22,
				94
			],
			[
				-50,
				24
			],
			[
				59,
				54
			],
			[
				89,
				32
			],
			[
				28,
				-19
			],
			[
				51,
				51
			],
			[
				65,
				25
			],
			[
				41,
				69
			],
			[
				4,
				46
			],
			[
				29,
				36
			],
			[
				89,
				29
			],
			[
				-5,
				33
			],
			[
				-62,
				25
			],
			[
				-10,
				115
			],
			[
				11,
				22
			],
			[
				27,
				-4
			],
			[
				56,
				-13
			],
			[
				6,
				0
			]
		],
		[
			[
				5246,
				16299
			],
			[
				0,
				0
			],
			[
				42,
				-2
			],
			[
				172,
				41
			],
			[
				122,
				74
			],
			[
				51,
				179
			],
			[
				31,
				11
			],
			[
				119,
				164
			],
			[
				56,
				2
			],
			[
				61,
				-53
			],
			[
				45,
				-7
			],
			[
				20,
				-15
			],
			[
				1,
				-1
			],
			[
				58,
				-45
			],
			[
				78,
				-70
			],
			[
				0,
				-7
			],
			[
				-1,
				-19
			],
			[
				0,
				-12
			],
			[
				-67,
				-109
			],
			[
				-2,
				-82
			],
			[
				-55,
				-114
			],
			[
				0,
				-135
			],
			[
				-62,
				-55
			],
			[
				-2,
				-2
			],
			[
				1,
				-1
			],
			[
				0,
				-8
			],
			[
				10,
				-88
			],
			[
				6,
				-53
			],
			[
				-64,
				-225
			],
			[
				-37,
				-27
			],
			[
				-41,
				-220
			],
			[
				23,
				-103
			],
			[
				-24,
				-98
			],
			[
				-22,
				-73
			],
			[
				-13,
				-65
			],
			[
				2,
				-48
			],
			[
				-17,
				-58
			],
			[
				0,
				0
			]
		],
		[
			[
				5737,
				14975
			],
			[
				-3,
				-14
			],
			[
				11,
				-116
			],
			[
				-28,
				-67
			],
			[
				-17,
				-150
			],
			[
				8,
				-80
			],
			[
				-16,
				-59
			],
			[
				14,
				-94
			],
			[
				-28,
				13
			],
			[
				7,
				-75
			],
			[
				33,
				-55
			],
			[
				2,
				-3
			],
			[
				2,
				0
			],
			[
				22,
				8
			],
			[
				7,
				52
			],
			[
				-13,
				111
			],
			[
				26,
				104
			],
			[
				-7,
				55
			],
			[
				15,
				90
			],
			[
				40,
				69
			],
			[
				-7,
				49
			],
			[
				11,
				94
			]
		],
		[
			[
				5816,
				14907
			],
			[
				0,
				0
			],
			[
				1,
				10
			],
			[
				-3,
				44
			],
			[
				86,
				238
			],
			[
				6,
				118
			],
			[
				37,
				71
			],
			[
				12,
				27
			],
			[
				-11,
				106
			],
			[
				25,
				51
			],
			[
				-18,
				112
			],
			[
				14,
				54
			],
			[
				39,
				53
			],
			[
				64,
				203
			],
			[
				-13,
				100
			],
			[
				98,
				335
			],
			[
				20,
				5
			],
			[
				61,
				-84
			],
			[
				17,
				11
			],
			[
				15,
				9
			],
			[
				8,
				6
			],
			[
				-47,
				99
			],
			[
				-3,
				29
			],
			[
				76,
				67
			],
			[
				63,
				178
			],
			[
				56,
				13
			],
			[
				3,
				0
			],
			[
				2,
				6
			],
			[
				12,
				41
			],
			[
				84,
				62
			],
			[
				22,
				71
			],
			[
				45,
				62
			],
			[
				33,
				21
			],
			[
				31,
				-3
			]
		],
		[
			[
				6651,
				17022
			],
			[
				0,
				0
			],
			[
				37,
				-4
			],
			[
				34,
				-22
			],
			[
				51,
				-15
			],
			[
				53,
				23
			],
			[
				14,
				6
			],
			[
				89,
				1
			],
			[
				92,
				62
			],
			[
				58,
				13
			],
			[
				118,
				-38
			],
			[
				40,
				-36
			],
			[
				40,
				-60
			],
			[
				39,
				43
			],
			[
				13,
				14
			],
			[
				17,
				40
			],
			[
				3,
				8
			],
			[
				98,
				71
			],
			[
				62,
				46
			],
			[
				-9,
				36
			],
			[
				-135,
				-86
			],
			[
				-21,
				-14
			],
			[
				-53,
				10
			],
			[
				-5,
				1
			],
			[
				-78,
				52
			],
			[
				-60,
				42
			],
			[
				-85,
				9
			],
			[
				-86,
				-24
			],
			[
				-37,
				-25
			],
			[
				-17,
				-34
			],
			[
				-28,
				-6
			],
			[
				-13,
				4
			],
			[
				0,
				0
			]
		],
		[
			[
				6882,
				17139
			],
			[
				-34,
				10
			],
			[
				-6,
				27
			],
			[
				110,
				156
			],
			[
				-17,
				47
			],
			[
				268,
				391
			],
			[
				-43,
				28
			],
			[
				-156,
				-189
			],
			[
				-113,
				-181
			],
			[
				-24,
				15
			],
			[
				21,
				71
			],
			[
				-16,
				85
			],
			[
				65,
				63
			],
			[
				0,
				49
			],
			[
				-46,
				-4
			],
			[
				-52,
				-52
			],
			[
				-13,
				-14
			],
			[
				-6,
				-36
			],
			[
				8,
				-11
			],
			[
				7,
				-9
			],
			[
				-9,
				-155
			],
			[
				25,
				-89
			],
			[
				-11,
				-51
			],
			[
				-62,
				-128
			],
			[
				0,
				-2
			],
			[
				-5,
				-26
			],
			[
				-31,
				-27
			],
			[
				-12,
				-11
			],
			[
				-11,
				11
			],
			[
				-27,
				27
			],
			[
				-87,
				-10
			],
			[
				-50,
				-45
			],
			[
				-64,
				-40
			],
			[
				0,
				0
			]
		],
		[
			[
				6491,
				17039
			],
			[
				-15,
				-10
			],
			[
				-63,
				-17
			],
			[
				-44,
				-16
			],
			[
				-15,
				-97
			],
			[
				-139,
				-100
			],
			[
				-11,
				-65
			],
			[
				-69,
				-10
			],
			[
				-31,
				18
			],
			[
				-24,
				92
			],
			[
				-77,
				13
			],
			[
				-13,
				114
			],
			[
				26,
				21
			]
		],
		[
			[
				6016,
				16982
			],
			[
				0,
				0
			],
			[
				33,
				28
			],
			[
				38,
				84
			],
			[
				54,
				60
			],
			[
				34,
				14
			],
			[
				78,
				180
			],
			[
				-54,
				-3
			],
			[
				-74,
				-155
			],
			[
				-53,
				-21
			],
			[
				-57,
				-117
			],
			[
				-81,
				-35
			],
			[
				-11,
				-5
			],
			[
				-18,
				-86
			],
			[
				-58,
				-19
			],
			[
				-76,
				-17
			],
			[
				-86,
				19
			],
			[
				-78,
				-63
			],
			[
				-16,
				-11
			],
			[
				0,
				0
			]
		],
		[
			[
				5591,
				16835
			],
			[
				-120,
				-83
			],
			[
				-74,
				-33
			],
			[
				-23,
				14
			],
			[
				-49,
				4
			],
			[
				-24,
				-26
			],
			[
				5,
				-60
			],
			[
				-23,
				-39
			],
			[
				-119,
				-6
			],
			[
				-39,
				-83
			],
			[
				-86,
				-26
			],
			[
				-58,
				-38
			],
			[
				-49,
				15
			],
			[
				-10,
				18
			],
			[
				-113,
				203
			],
			[
				10,
				98
			],
			[
				-77,
				222
			],
			[
				-38,
				-49
			],
			[
				58,
				-157
			],
			[
				14,
				-171
			],
			[
				114,
				-171
			],
			[
				36,
				-54
			],
			[
				-7,
				-31
			],
			[
				-39,
				-8
			],
			[
				-30,
				-52
			],
			[
				-65,
				69
			],
			[
				-87,
				37
			],
			[
				15,
				-95
			],
			[
				-9,
				-26
			],
			[
				-50,
				-18
			],
			[
				-45,
				-17
			],
			[
				-87,
				58
			],
			[
				36,
				-56
			],
			[
				70,
				-109
			],
			[
				1,
				-2
			],
			[
				1,
				0
			],
			[
				38,
				12
			],
			[
				58,
				-30
			],
			[
				28,
				-76
			],
			[
				-6,
				-28
			],
			[
				-65,
				-39
			],
			[
				-63,
				-21
			],
			[
				-1,
				0
			],
			[
				0,
				0
			],
			[
				-26,
				-59
			],
			[
				10,
				-76
			],
			[
				1,
				-10
			],
			[
				11,
				-95
			],
			[
				47,
				10
			],
			[
				9,
				-20
			],
			[
				4,
				-25
			],
			[
				-47,
				-111
			],
			[
				-47,
				-50
			],
			[
				-28,
				-95
			],
			[
				-43,
				12
			],
			[
				-7,
				46
			],
			[
				-72,
				-9
			],
			[
				-71,
				-4
			],
			[
				-72,
				66
			],
			[
				-58,
				25
			],
			[
				-47,
				74
			],
			[
				-50,
				-26
			],
			[
				10,
				-95
			],
			[
				-38,
				-42
			],
			[
				-7,
				-69
			],
			[
				6,
				-62
			],
			[
				-124,
				-119
			],
			[
				-5,
				-95
			],
			[
				-5,
				-78
			],
			[
				-30,
				-66
			],
			[
				10,
				-95
			],
			[
				-28,
				-52
			],
			[
				-10,
				-20
			],
			[
				-11,
				-3
			],
			[
				-44,
				-12
			],
			[
				12,
				74
			],
			[
				-3,
				27
			],
			[
				-6,
				0
			],
			[
				-15,
				1
			],
			[
				-16,
				-10
			],
			[
				-28,
				-17
			],
			[
				-18,
				-53
			],
			[
				14,
				-65
			],
			[
				-18,
				-66
			],
			[
				42,
				-147
			]
		],
		[
			[
				3168,
				17420
			],
			[
				47,
				-337
			],
			[
				-13,
				-79
			],
			[
				-30,
				29
			],
			[
				-28,
				28
			],
			[
				-73,
				-8
			],
			[
				-43,
				-65
			],
			[
				-66,
				-67
			],
			[
				-45,
				-79
			],
			[
				-20,
				-62
			],
			[
				-129,
				2
			],
			[
				-46,
				-42
			],
			[
				-20,
				-19
			],
			[
				-10,
				0
			],
			[
				-22,
				0
			],
			[
				-5,
				69
			],
			[
				-91,
				65
			],
			[
				-215,
				288
			],
			[
				6,
				84
			],
			[
				-8,
				1
			],
			[
				-53,
				2
			],
			[
				-6,
				42
			],
			[
				-39,
				49
			],
			[
				-99,
				33
			],
			[
				-42,
				73
			],
			[
				-10,
				72
			],
			[
				25,
				17
			],
			[
				139,
				41
			],
			[
				97,
				59
			],
			[
				43,
				-73
			],
			[
				145,
				-191
			],
			[
				1,
				66
			],
			[
				-154,
				243
			],
			[
				48,
				42
			],
			[
				7,
				76
			],
			[
				42,
				-58
			],
			[
				5,
				-7
			],
			[
				0,
				39
			],
			[
				0,
				63
			],
			[
				26,
				74
			],
			[
				23,
				1
			],
			[
				80,
				-61
			],
			[
				-17,
				74
			],
			[
				-33,
				19
			],
			[
				11,
				34
			],
			[
				129,
				32
			],
			[
				-2,
				-91
			],
			[
				34,
				8
			],
			[
				6,
				84
			],
			[
				42,
				32
			],
			[
				49,
				-1
			],
			[
				-10,
				52
			],
			[
				166,
				410
			],
			[
				-37,
				1
			],
			[
				-37,
				-53
			],
			[
				-20,
				10
			],
			[
				-6,
				42
			],
			[
				10,
				31
			],
			[
				37,
				40
			],
			[
				79,
				62
			],
			[
				56,
				-84
			]
		],
		[
			[
				3092,
				18532
			],
			[
				0,
				0
			],
			[
				1,
				-2
			],
			[
				2,
				-83
			],
			[
				43,
				63
			],
			[
				37,
				40
			],
			[
				88,
				-94
			],
			[
				15,
				-86
			],
			[
				-22,
				-53
			],
			[
				10,
				-89
			],
			[
				-38,
				-150
			],
			[
				10,
				-170
			],
			[
				-6,
				-88
			],
			[
				-3,
				-33
			],
			[
				-8,
				-55
			],
			[
				-33,
				-218
			],
			[
				-7,
				-26
			],
			[
				-15,
				-56
			],
			[
				2,
				-12
			],
			[
				0,
				0
			]
		],
		[
			[
				3674,
				18100
			],
			[
				-25,
				-49
			],
			[
				-34,
				-15
			],
			[
				-6,
				-2
			],
			[
				-44,
				90
			],
			[
				-13,
				61
			],
			[
				-17,
				0
			],
			[
				-34,
				88
			],
			[
				-6,
				18
			],
			[
				-60,
				16
			],
			[
				-41,
				41
			],
			[
				-32,
				-5
			],
			[
				-22,
				-24
			],
			[
				-29,
				18
			],
			[
				-2,
				110
			],
			[
				52,
				51
			],
			[
				57,
				95
			],
			[
				58,
				166
			],
			[
				12,
				35
			],
			[
				-24,
				7
			],
			[
				-62,
				-98
			],
			[
				-59,
				-136
			],
			[
				-59,
				14
			],
			[
				-83,
				0
			],
			[
				-53,
				12
			],
			[
				-13,
				-31
			],
			[
				-22,
				5
			],
			[
				-28,
				84
			],
			[
				2,
				48
			],
			[
				76,
				119
			]
		],
		[
			[
				3163,
				18818
			],
			[
				0,
				0
			],
			[
				37,
				58
			],
			[
				-6,
				48
			],
			[
				22,
				35
			],
			[
				39,
				-23
			],
			[
				128,
				167
			],
			[
				24,
				140
			],
			[
				48,
				45
			],
			[
				37,
				33
			],
			[
				-4,
				28
			],
			[
				-1,
				5
			],
			[
				-32,
				4
			],
			[
				-8,
				-6
			],
			[
				-55,
				-46
			],
			[
				-98,
				-263
			],
			[
				-107,
				-37
			],
			[
				-29,
				-50
			],
			[
				-30,
				-89
			],
			[
				-24,
				-48
			],
			[
				0,
				0
			]
		],
		[
			[
				3740,
				18082
			],
			[
				0,
				0
			],
			[
				37,
				-20
			],
			[
				35,
				18
			]
		],
		[
			[
				2962,
				16766
			],
			[
				0,
				0
			],
			[
				53,
				141
			],
			[
				66,
				35
			],
			[
				25,
				-30
			],
			[
				63,
				-34
			],
			[
				119,
				25
			],
			[
				15,
				59
			],
			[
				11,
				44
			],
			[
				-23,
				37
			],
			[
				-6,
				11
			],
			[
				-44,
				417
			],
			[
				37,
				55
			],
			[
				24,
				36
			],
			[
				-9,
				6
			],
			[
				-46,
				32
			],
			[
				48,
				256
			],
			[
				-4,
				191
			],
			[
				9,
				121
			],
			[
				14,
				61
			],
			[
				-11,
				53
			],
			[
				90,
				16
			],
			[
				39,
				-43
			],
			[
				28,
				-3
			],
			[
				17,
				0
			],
			[
				0,
				-1
			],
			[
				22,
				-97
			],
			[
				86,
				-183
			],
			[
				36,
				17
			],
			[
				102,
				48
			],
			[
				-10,
				41
			],
			[
				0,
				0
			]
		],
		[
			[
				172,
				19144
			],
			[
				15,
				-28
			],
			[
				24,
				9
			],
			[
				18,
				8
			],
			[
				21,
				13
			],
			[
				50,
				-78
			],
			[
				-34,
				0
			],
			[
				42,
				-91
			],
			[
				-42,
				-63
			],
			[
				-55,
				-3
			],
			[
				-55,
				133
			],
			[
				68,
				32
			],
			[
				-78,
				14
			],
			[
				26,
				54
			]
		],
		[
			[
				3104,
				18819
			],
			[
				-35,
				-69
			],
			[
				-16,
				29
			],
			[
				-60,
				-74
			],
			[
				-88,
				-110
			],
			[
				-92,
				-53
			],
			[
				-76,
				24
			],
			[
				18,
				-81
			],
			[
				32,
				-121
			],
			[
				28,
				-70
			],
			[
				-13,
				-47
			],
			[
				10,
				-80
			],
			[
				-44,
				-68
			],
			[
				-59,
				-43
			],
			[
				-50,
				3
			],
			[
				-22,
				31
			],
			[
				-62,
				-6
			],
			[
				-15,
				-41
			],
			[
				-52,
				-17
			],
			[
				-31,
				-93
			],
			[
				-41,
				-36
			],
			[
				-33,
				-28
			],
			[
				-47,
				-17
			],
			[
				-72,
				70
			],
			[
				-23,
				-11
			],
			[
				40,
				-86
			],
			[
				2,
				-45
			],
			[
				-38,
				3
			],
			[
				-78,
				82
			],
			[
				-20,
				21
			],
			[
				6,
				-40
			],
			[
				14,
				-92
			],
			[
				53,
				-67
			],
			[
				-28,
				-39
			],
			[
				-123,
				-23
			],
			[
				-72,
				-52
			],
			[
				-49,
				-87
			],
			[
				-54,
				-6
			],
			[
				-7,
				20
			],
			[
				-6,
				18
			],
			[
				0,
				22
			],
			[
				0,
				19
			],
			[
				-11,
				4
			],
			[
				-57,
				25
			],
			[
				-47,
				37
			],
			[
				-4,
				37
			],
			[
				-17,
				135
			],
			[
				-86,
				200
			],
			[
				18,
				37
			],
			[
				-98,
				71
			],
			[
				-179,
				200
			],
			[
				7,
				98
			],
			[
				32,
				17
			],
			[
				145,
				-82
			],
			[
				69,
				-74
			],
			[
				42,
				-112
			],
			[
				111,
				-133
			],
			[
				57,
				-8
			],
			[
				-41,
				72
			],
			[
				-73,
				93
			],
			[
				-5,
				90
			],
			[
				48,
				-26
			],
			[
				-3,
				51
			],
			[
				-107,
				100
			],
			[
				-82,
				77
			],
			[
				-217,
				206
			],
			[
				63,
				-5
			],
			[
				-3,
				62
			],
			[
				127,
				-122
			],
			[
				56,
				-55
			],
			[
				-67,
				172
			],
			[
				113,
				-55
			],
			[
				21,
				57
			],
			[
				-162,
				56
			],
			[
				-28,
				10
			],
			[
				-121,
				-31
			],
			[
				-136,
				153
			],
			[
				-61,
				181
			],
			[
				-59,
				57
			],
			[
				0,
				0
			]
		],
		[
			[
				1146,
				19154
			],
			[
				-59,
				57
			],
			[
				-49,
				34
			],
			[
				-5,
				-56
			],
			[
				-35,
				20
			],
			[
				-29,
				16
			],
			[
				-50,
				60
			],
			[
				3,
				23
			],
			[
				67,
				-6
			],
			[
				10,
				33
			],
			[
				39,
				33
			],
			[
				52,
				-6
			],
			[
				3,
				-7
			],
			[
				11,
				-21
			],
			[
				18,
				3
			]
		],
		[
			[
				1122,
				19337
			],
			[
				0,
				0
			],
			[
				21,
				2
			],
			[
				-21,
				52
			],
			[
				75,
				-32
			],
			[
				-2,
				-45
			],
			[
				63,
				-54
			],
			[
				63,
				-129
			],
			[
				-5,
				-28
			],
			[
				27,
				-34
			],
			[
				59,
				-70
			],
			[
				-6,
				16
			],
			[
				-51,
				153
			],
			[
				41,
				2
			],
			[
				77,
				-151
			],
			[
				-16,
				101
			],
			[
				103,
				-40
			],
			[
				17,
				-55
			],
			[
				28,
				-23
			],
			[
				220,
				-175
			],
			[
				-16,
				58
			],
			[
				66,
				-7
			],
			[
				47,
				-43
			],
			[
				-3,
				-63
			],
			[
				47,
				32
			],
			[
				78,
				-34
			],
			[
				24,
				-63
			],
			[
				71,
				-90
			],
			[
				-1,
				-55
			],
			[
				-13,
				-11
			],
			[
				-36,
				12
			],
			[
				-5,
				-23
			],
			[
				76,
				-195
			],
			[
				3,
				-38
			],
			[
				-19,
				-3
			],
			[
				24,
				-50
			],
			[
				107,
				-115
			],
			[
				13,
				18
			],
			[
				-75,
				105
			],
			[
				-16,
				49
			],
			[
				-25,
				117
			],
			[
				57,
				-47
			],
			[
				69,
				-91
			],
			[
				132,
				-170
			],
			[
				37,
				4
			],
			[
				14,
				40
			],
			[
				-66,
				71
			],
			[
				-9,
				10
			],
			[
				-54,
				58
			],
			[
				-104,
				133
			],
			[
				8,
				116
			],
			[
				64,
				-23
			],
			[
				39,
				-66
			],
			[
				50,
				-83
			],
			[
				59,
				-71
			],
			[
				25,
				-30
			],
			[
				6,
				74
			],
			[
				3,
				29
			],
			[
				-69,
				63
			],
			[
				-11,
				62
			],
			[
				-45,
				38
			],
			[
				-18,
				33
			],
			[
				39,
				29
			],
			[
				2,
				0
			],
			[
				41,
				7
			],
			[
				22,
				37
			],
			[
				-4,
				6
			],
			[
				0,
				0
			]
		],
		[
			[
				2449,
				18657
			],
			[
				-9,
				17
			],
			[
				-20,
				-7
			],
			[
				-24,
				-7
			],
			[
				-29,
				-16
			],
			[
				-35,
				-19
			],
			[
				-62,
				93
			],
			[
				18,
				72
			],
			[
				-20,
				19
			],
			[
				-24,
				-58
			],
			[
				-32,
				29
			],
			[
				29,
				76
			],
			[
				-3,
				42
			],
			[
				-30,
				-5
			],
			[
				-25,
				-67
			],
			[
				-39,
				13
			],
			[
				-22,
				35
			],
			[
				16,
				138
			],
			[
				-32,
				-5
			],
			[
				-29,
				-90
			],
			[
				-21,
				-16
			],
			[
				-85,
				15
			],
			[
				-87,
				72
			],
			[
				-7,
				46
			],
			[
				26,
				62
			],
			[
				74,
				148
			],
			[
				1,
				0
			],
			[
				65,
				-5
			],
			[
				28,
				41
			],
			[
				0,
				71
			],
			[
				92,
				21
			],
			[
				51,
				-32
			],
			[
				13,
				49
			],
			[
				-37,
				17
			],
			[
				-46,
				77
			],
			[
				-8,
				75
			],
			[
				46,
				121
			],
			[
				64,
				22
			],
			[
				88,
				-17
			],
			[
				164,
				75
			],
			[
				59,
				-26
			],
			[
				23,
				-61
			],
			[
				39,
				-49
			],
			[
				2,
				2
			],
			[
				72,
				85
			],
			[
				48,
				-17
			],
			[
				94,
				18
			],
			[
				8,
				8
			],
			[
				21,
				23
			],
			[
				-26,
				11
			],
			[
				-41,
				19
			],
			[
				-4,
				1
			],
			[
				-40,
				-8
			],
			[
				-116,
				-25
			],
			[
				-78,
				51
			],
			[
				-13,
				36
			],
			[
				126,
				197
			],
			[
				-35,
				8
			],
			[
				-154,
				-197
			],
			[
				-186,
				-75
			],
			[
				-46,
				17
			],
			[
				-71,
				-13
			],
			[
				-67,
				-67
			],
			[
				-30,
				-255
			],
			[
				-74,
				15
			],
			[
				3,
				-104
			],
			[
				-25,
				-29
			],
			[
				-9,
				-11
			],
			[
				-54,
				23
			],
			[
				14,
				73
			],
			[
				-75,
				55
			],
			[
				-5,
				4
			],
			[
				-5,
				-1
			],
			[
				-65,
				-11
			],
			[
				7,
				-37
			],
			[
				-69,
				-9
			],
			[
				-11,
				56
			],
			[
				6,
				89
			],
			[
				5,
				73
			],
			[
				47,
				51
			],
			[
				-83,
				8
			],
			[
				-2,
				-126
			],
			[
				-2,
				-9
			],
			[
				-16,
				-64
			],
			[
				11,
				-41
			],
			[
				-84,
				-121
			],
			[
				-58,
				22
			],
			[
				-2,
				124
			],
			[
				17,
				1
			],
			[
				27,
				53
			],
			[
				-85,
				-23
			],
			[
				0,
				0
			]
		],
		[
			[
				1075,
				19171
			],
			[
				0,
				0
			],
			[
				0,
				6
			],
			[
				21,
				-18
			],
			[
				0,
				0
			]
		],
		[
			[
				1096,
				19159
			],
			[
				68,
				-60
			],
			[
				39,
				-79
			],
			[
				-44,
				-2
			],
			[
				0,
				1
			],
			[
				0,
				0
			]
		],
		[
			[
				1159,
				19019
			],
			[
				-89,
				114
			],
			[
				2,
				11
			]
		],
		[
			[
				1072,
				19144
			],
			[
				0,
				0
			],
			[
				3,
				27
			]
		],
		[
			[
				788,
				19488
			],
			[
				-32,
				-144
			],
			[
				-46,
				1
			],
			[
				-39,
				18
			],
			[
				-30,
				106
			],
			[
				96,
				17
			],
			[
				51,
				2
			]
		],
		[
			[
				850,
				19222
			],
			[
				118,
				-171
			],
			[
				-20,
				-16
			],
			[
				52,
				-133
			],
			[
				-32,
				-5
			],
			[
				67,
				-81
			],
			[
				-67,
				-24
			],
			[
				-2,
				0
			],
			[
				-249,
				185
			],
			[
				75,
				19
			],
			[
				7,
				26
			],
			[
				-58,
				21
			],
			[
				-84,
				70
			],
			[
				-6,
				26
			],
			[
				-6,
				23
			],
			[
				44,
				88
			],
			[
				22,
				3
			],
			[
				137,
				-143
			],
			[
				-45,
				85
			],
			[
				-20,
				74
			],
			[
				25,
				91
			],
			[
				71,
				-109
			],
			[
				-6,
				-5
			],
			[
				-23,
				-24
			]
		],
		[
			[
				1002,
				19174
			],
			[
				176,
				-223
			],
			[
				-100,
				22
			],
			[
				-77,
				127
			],
			[
				-33,
				0
			],
			[
				-62,
				119
			],
			[
				6,
				3
			],
			[
				15,
				7
			],
			[
				36,
				-55
			],
			[
				24,
				0
			],
			[
				15,
				0
			]
		],
		[
			[
				1126,
				18859
			],
			[
				-6,
				-15
			],
			[
				-30,
				1
			],
			[
				-21,
				18
			],
			[
				-39,
				49
			],
			[
				-10,
				18
			],
			[
				-18,
				38
			],
			[
				-2,
				36
			],
			[
				12,
				7
			],
			[
				66,
				-77
			],
			[
				22,
				-33
			],
			[
				26,
				-42
			]
		],
		[
			[
				1370,
				18342
			],
			[
				-22,
				-4
			],
			[
				-27,
				45
			],
			[
				-11,
				26
			]
		],
		[
			[
				1310,
				18409
			],
			[
				0,
				0
			],
			[
				-38,
				85
			],
			[
				-5,
				19
			],
			[
				12,
				18
			],
			[
				44,
				-31
			],
			[
				25,
				-31
			],
			[
				45,
				-67
			],
			[
				14,
				-52
			],
			[
				-34,
				-8
			],
			[
				-3,
				0
			],
			[
				0,
				0
			]
		],
		[
			[
				1624,
				17785
			],
			[
				-73,
				99
			],
			[
				-32,
				43
			],
			[
				-159,
				5
			],
			[
				-50,
				48
			],
			[
				12,
				22
			],
			[
				-43,
				49
			],
			[
				-71,
				36
			],
			[
				33,
				19
			],
			[
				-148,
				29
			],
			[
				13,
				38
			],
			[
				-46,
				44
			],
			[
				38,
				18
			],
			[
				-53,
				54
			],
			[
				-25,
				-18
			],
			[
				-59,
				40
			],
			[
				-69,
				85
			],
			[
				4,
				27
			],
			[
				-67,
				60
			],
			[
				-38,
				58
			],
			[
				-6,
				-37
			],
			[
				-48,
				19
			],
			[
				-15,
				49
			],
			[
				53,
				17
			],
			[
				53,
				-30
			],
			[
				9,
				20
			],
			[
				-78,
				68
			],
			[
				-4,
				30
			],
			[
				52,
				-11
			],
			[
				9,
				20
			],
			[
				-65,
				42
			],
			[
				-54,
				102
			],
			[
				110,
				-77
			],
			[
				-24,
				51
			],
			[
				-17,
				34
			],
			[
				-17,
				44
			],
			[
				29,
				-24
			],
			[
				203,
				-166
			],
			[
				1,
				60
			],
			[
				3,
				-1
			],
			[
				89,
				-17
			],
			[
				90,
				-83
			],
			[
				40,
				-37
			],
			[
				55,
				-158
			],
			[
				36,
				-104
			],
			[
				46,
				-83
			],
			[
				48,
				-46
			],
			[
				-21,
				73
			],
			[
				26,
				18
			],
			[
				24,
				-68
			],
			[
				15,
				-17
			],
			[
				167,
				-187
			],
			[
				25,
				-41
			],
			[
				61,
				-150
			]
		],
		[
			[
				1686,
				17851
			],
			[
				0,
				0
			],
			[
				59,
				-149
			],
			[
				6,
				-15
			],
			[
				-20,
				-48
			],
			[
				-107,
				146
			],
			[
				0,
				0
			]
		],
		[
			[
				1051,
				18121
			],
			[
				-7,
				-31
			],
			[
				-86,
				28
			],
			[
				1,
				48
			],
			[
				-76,
				27
			],
			[
				-3,
				35
			],
			[
				-70,
				25
			],
			[
				-37,
				105
			],
			[
				114,
				-61
			],
			[
				164,
				-176
			]
		],
		[
			[
				1500,
				18487
			],
			[
				17,
				-55
			],
			[
				-22,
				2
			],
			[
				-1,
				1
			],
			[
				-31,
				8
			],
			[
				-5,
				5
			],
			[
				-105,
				94
			],
			[
				-14,
				43
			],
			[
				-4,
				14
			],
			[
				29,
				-1
			],
			[
				23,
				-12
			],
			[
				78,
				-68
			],
			[
				35,
				-31
			]
		],
		[
			[
				1267,
				17901
			],
			[
				23,
				-28
			],
			[
				60,
				-33
			],
			[
				22,
				22
			],
			[
				144,
				-39
			],
			[
				208,
				-226
			],
			[
				97,
				-187
			],
			[
				0,
				-10
			],
			[
				1,
				-98
			],
			[
				-22,
				-48
			],
			[
				-29,
				16
			],
			[
				-10,
				-37
			],
			[
				-245,
				161
			],
			[
				-53,
				-3
			],
			[
				-80,
				40
			],
			[
				-31,
				49
			],
			[
				-40,
				-27
			],
			[
				-89,
				23
			],
			[
				-61,
				79
			],
			[
				50,
				62
			],
			[
				22,
				28
			],
			[
				-39,
				17
			],
			[
				-27,
				12
			],
			[
				3,
				-51
			],
			[
				-35,
				-38
			],
			[
				-66,
				66
			],
			[
				30,
				59
			],
			[
				29,
				-33
			],
			[
				-11,
				68
			],
			[
				-69,
				69
			],
			[
				-125,
				95
			],
			[
				-14,
				75
			],
			[
				66,
				0
			],
			[
				58,
				-55
			],
			[
				31,
				-20
			],
			[
				139,
				66
			],
			[
				63,
				-74
			]
		],
		[
			[
				1880,
				17426
			],
			[
				-13,
				-4
			],
			[
				-7,
				1
			],
			[
				-11,
				11
			],
			[
				-5,
				6
			],
			[
				-43,
				80
			],
			[
				13,
				2
			],
			[
				23,
				-11
			],
			[
				29,
				-17
			],
			[
				12,
				-9
			],
			[
				2,
				-1
			],
			[
				7,
				-17
			],
			[
				2,
				-17
			],
			[
				1,
				-12
			],
			[
				-10,
				-12
			]
		],
		[
			[
				1893,
				19374
			],
			[
				-27,
				-170
			],
			[
				-40,
				-3
			],
			[
				-29,
				139
			],
			[
				5,
				44
			],
			[
				52,
				32
			],
			[
				39,
				-42
			]
		],
		[
			[
				1632,
				16058
			],
			[
				-14,
				-39
			],
			[
				29,
				-42
			],
			[
				-1,
				-23
			],
			[
				-19,
				-10
			],
			[
				-1,
				-90
			],
			[
				-21,
				-19
			],
			[
				-30,
				15
			],
			[
				-22,
				19
			],
			[
				-8,
				82
			],
			[
				5,
				39
			],
			[
				36,
				33
			],
			[
				22,
				68
			],
			[
				0,
				0
			]
		],
		[
			[
				1450,
				15652
			],
			[
				-22,
				0
			],
			[
				-22,
				3
			],
			[
				0,
				0
			]
		],
		[
			[
				1406,
				15655
			],
			[
				-18,
				2
			],
			[
				-9,
				15
			]
		],
		[
			[
				1379,
				15672
			],
			[
				0,
				0
			],
			[
				-12,
				24
			],
			[
				-6,
				34
			],
			[
				-61,
				-4
			],
			[
				0,
				0
			]
		],
		[
			[
				1300,
				15726
			],
			[
				-3,
				-1
			],
			[
				-2,
				0
			],
			[
				1,
				-1
			],
			[
				33,
				-48
			],
			[
				46,
				-120
			],
			[
				1,
				60
			],
			[
				51,
				-10
			],
			[
				60,
				-119
			],
			[
				54,
				-177
			],
			[
				44,
				-144
			],
			[
				-39,
				-2
			],
			[
				3,
				-67
			],
			[
				-27,
				-47
			],
			[
				-50,
				-37
			],
			[
				-70,
				41
			],
			[
				4,
				-68
			],
			[
				-32,
				-5
			],
			[
				-33,
				50
			],
			[
				-22,
				122
			],
			[
				-64,
				225
			],
			[
				10,
				73
			],
			[
				-41,
				-9
			],
			[
				-18,
				-12
			],
			[
				22,
				-66
			],
			[
				12,
				-83
			],
			[
				-21,
				-82
			],
			[
				-34,
				-13
			],
			[
				-59,
				60
			],
			[
				-23,
				-20
			],
			[
				-39,
				11
			],
			[
				-1,
				31
			],
			[
				-57,
				78
			],
			[
				11,
				25
			],
			[
				39,
				215
			],
			[
				-25,
				20
			],
			[
				-38,
				-100
			],
			[
				-50,
				38
			],
			[
				-19,
				202
			],
			[
				13,
				34
			],
			[
				-12,
				42
			],
			[
				-5,
				36
			],
			[
				68,
				-13
			],
			[
				17,
				-89
			],
			[
				40,
				-6
			],
			[
				90,
				-218
			],
			[
				61,
				-8
			],
			[
				71,
				-27
			],
			[
				-13,
				71
			],
			[
				0,
				0
			]
		],
		[
			[
				1254,
				15568
			],
			[
				-12,
				62
			],
			[
				-74,
				-62
			],
			[
				-78,
				166
			],
			[
				20,
				57
			],
			[
				89,
				-2
			],
			[
				33,
				-81
			],
			[
				29,
				-13
			],
			[
				-23,
				88
			],
			[
				24,
				103
			],
			[
				-7,
				40
			],
			[
				-44,
				-99
			],
			[
				-75,
				19
			],
			[
				-100,
				279
			],
			[
				-16,
				89
			],
			[
				1,
				111
			],
			[
				-28,
				2
			],
			[
				-25,
				100
			],
			[
				7,
				34
			],
			[
				61,
				-30
			],
			[
				4,
				52
			],
			[
				-54,
				20
			],
			[
				-51,
				191
			],
			[
				25,
				56
			],
			[
				14,
				48
			],
			[
				20,
				71
			],
			[
				44,
				41
			],
			[
				16,
				-78
			],
			[
				65,
				-73
			],
			[
				4,
				-32
			],
			[
				-48,
				-58
			],
			[
				-9,
				-56
			],
			[
				145,
				-85
			],
			[
				-20,
				-88
			],
			[
				-19,
				-89
			],
			[
				37,
				65
			],
			[
				28,
				47
			],
			[
				11,
				-93
			],
			[
				21,
				-57
			],
			[
				27,
				-27
			],
			[
				65,
				-105
			],
			[
				34,
				-57
			],
			[
				54,
				-43
			],
			[
				39,
				-111
			],
			[
				-12,
				-65
			],
			[
				-5,
				-61
			],
			[
				1,
				-55
			]
		],
		[
			[
				1472,
				15789
			],
			[
				0,
				0
			],
			[
				0,
				-8
			],
			[
				23,
				-18
			],
			[
				-2,
				-68
			],
			[
				-11,
				-43
			],
			[
				-32,
				0
			],
			[
				0,
				0
			]
		],
		[
			[
				1524,
				16453
			],
			[
				16,
				-15
			],
			[
				17,
				-104
			],
			[
				11,
				-62
			],
			[
				-11,
				-32
			],
			[
				-55,
				63
			],
			[
				-11,
				13
			],
			[
				-3,
				-25
			],
			[
				-2,
				-25
			],
			[
				74,
				-86
			],
			[
				-11,
				-78
			],
			[
				-37,
				-40
			],
			[
				-37,
				34
			],
			[
				-34,
				82
			],
			[
				-18,
				-15
			],
			[
				-32,
				44
			],
			[
				-29,
				38
			],
			[
				2,
				31
			],
			[
				55,
				-39
			],
			[
				-4,
				38
			],
			[
				-10,
				71
			],
			[
				-38,
				-13
			],
			[
				-44,
				41
			],
			[
				31,
				55
			],
			[
				37,
				-31
			],
			[
				-11,
				96
			],
			[
				38,
				22
			],
			[
				76,
				-32
			],
			[
				30,
				-31
			]
		],
		[
			[
				963,
				16002
			],
			[
				-18,
				-5
			],
			[
				-10,
				3
			],
			[
				-13,
				10
			],
			[
				-3,
				9
			],
			[
				3,
				22
			],
			[
				6,
				23
			],
			[
				29,
				22
			],
			[
				39,
				-8
			],
			[
				8,
				-22
			],
			[
				5,
				-33
			],
			[
				-46,
				-21
			]
		],
		[
			[
				915,
				16088
			],
			[
				-20,
				-3
			],
			[
				-46,
				-6
			],
			[
				-9,
				46
			],
			[
				4,
				76
			],
			[
				2,
				13
			],
			[
				13,
				7
			],
			[
				56,
				18
			],
			[
				11,
				15
			],
			[
				58,
				-23
			],
			[
				8,
				-48
			],
			[
				-65,
				-84
			],
			[
				-12,
				-11
			]
		],
		[
			[
				1346,
				17323
			],
			[
				26,
				36
			],
			[
				0,
				1
			],
			[
				0,
				-1
			],
			[
				150,
				-165
			],
			[
				49,
				38
			],
			[
				1,
				1
			],
			[
				13,
				-11
			],
			[
				131,
				-113
			],
			[
				17,
				7
			],
			[
				9,
				4
			],
			[
				32,
				-148
			],
			[
				12,
				-89
			],
			[
				-30,
				11
			],
			[
				22,
				-136
			],
			[
				46,
				-77
			],
			[
				5,
				-88
			],
			[
				-25,
				26
			],
			[
				-76,
				-76
			],
			[
				-18,
				-19
			],
			[
				-37,
				-38
			],
			[
				-18,
				61
			],
			[
				-45,
				-68
			],
			[
				-9,
				-36
			],
			[
				-36,
				35
			],
			[
				-19,
				92
			],
			[
				-37,
				24
			],
			[
				-16,
				45
			],
			[
				0,
				29
			],
			[
				18,
				50
			],
			[
				24,
				0
			],
			[
				-5,
				-44
			],
			[
				3,
				2
			],
			[
				48,
				27
			],
			[
				-3,
				54
			],
			[
				17,
				8
			],
			[
				-67,
				60
			],
			[
				-29,
				-21
			],
			[
				-59,
				4
			],
			[
				-2,
				54
			],
			[
				-40,
				4
			],
			[
				-65,
				43
			],
			[
				56,
				59
			],
			[
				10,
				11
			],
			[
				-20,
				-5
			],
			[
				-89,
				-23
			],
			[
				22,
				171
			],
			[
				4,
				0
			],
			[
				39,
				0
			],
			[
				3,
				39
			],
			[
				-29,
				37
			],
			[
				-1,
				1
			],
			[
				-43,
				4
			],
			[
				-25,
				-34
			],
			[
				3,
				-40
			],
			[
				-41,
				33
			],
			[
				-86,
				76
			],
			[
				-24,
				57
			],
			[
				-29,
				70
			],
			[
				-29,
				55
			],
			[
				-35,
				-8
			],
			[
				-17,
				100
			],
			[
				-35,
				56
			],
			[
				6,
				38
			],
			[
				200,
				-204
			],
			[
				-5,
				-73
			],
			[
				25,
				-37
			],
			[
				22,
				91
			],
			[
				31,
				0
			],
			[
				57,
				-47
			],
			[
				-1,
				-74
			],
			[
				44,
				61
			]
		],
		[
			[
				937,
				17682
			],
			[
				-14,
				-47
			],
			[
				-12,
				37
			],
			[
				-16,
				50
			],
			[
				4,
				11
			],
			[
				8,
				11
			],
			[
				21,
				5
			],
			[
				27,
				4
			],
			[
				10,
				0
			],
			[
				18,
				-6
			],
			[
				5,
				-10
			],
			[
				-14,
				-18
			],
			[
				-21,
				-18
			],
			[
				-16,
				-19
			]
		],
		[
			[
				962,
				17141
			],
			[
				6,
				-141
			],
			[
				-29,
				-49
			],
			[
				-25,
				-42
			],
			[
				-47,
				26
			],
			[
				-8,
				73
			],
			[
				1,
				73
			],
			[
				41,
				-23
			],
			[
				-30,
				85
			],
			[
				10,
				44
			],
			[
				2,
				8
			],
			[
				58,
				-8
			],
			[
				21,
				-46
			]
		],
		[
			[
				808,
				17320
			],
			[
				55,
				-95
			],
			[
				-6,
				-21
			],
			[
				-4,
				-14
			],
			[
				-24,
				-36
			],
			[
				-22,
				28
			],
			[
				-9,
				59
			],
			[
				-18,
				-3
			],
			[
				-12,
				18
			],
			[
				-9,
				37
			],
			[
				26,
				14
			],
			[
				23,
				13
			]
		],
		[
			[
				748,
				17523
			],
			[
				1,
				-86
			],
			[
				42,
				14
			],
			[
				23,
				-89
			],
			[
				-45,
				-22
			],
			[
				-12,
				-6
			],
			[
				-50,
				74
			],
			[
				20,
				-92
			],
			[
				-71,
				-12
			],
			[
				-20,
				27
			],
			[
				34,
				31
			],
			[
				-42,
				104
			],
			[
				41,
				74
			],
			[
				30,
				55
			],
			[
				49,
				-72
			]
		],
		[
			[
				654,
				17606
			],
			[
				-63,
				-103
			],
			[
				-24,
				14
			],
			[
				-19,
				133
			],
			[
				92,
				83
			],
			[
				17,
				16
			],
			[
				17,
				-4
			],
			[
				-18,
				-126
			],
			[
				-2,
				-13
			]
		],
		[
			[
				601,
				18098
			],
			[
				54,
				-131
			],
			[
				-67,
				-21
			],
			[
				29,
				-73
			],
			[
				-12,
				-57
			],
			[
				-12,
				-52
			],
			[
				-71,
				52
			],
			[
				-10,
				-38
			],
			[
				-46,
				26
			],
			[
				-15,
				219
			],
			[
				100,
				34
			],
			[
				20,
				-10
			],
			[
				26,
				-22
			],
			[
				4,
				73
			]
		],
		[
			[
				493,
				18065
			],
			[
				-41,
				-11
			],
			[
				-5,
				82
			],
			[
				-17,
				90
			],
			[
				19,
				16
			],
			[
				1,
				44
			],
			[
				-6,
				85
			],
			[
				13,
				27
			],
			[
				45,
				-42
			],
			[
				-2,
				-68
			],
			[
				16,
				-34
			],
			[
				42,
				-29
			],
			[
				22,
				-108
			],
			[
				-87,
				-52
			]
		],
		[
			[
				1668,
				15369
			],
			[
				-31,
				-32
			],
			[
				-51,
				32
			],
			[
				-11,
				56
			],
			[
				1,
				20
			],
			[
				10,
				5
			],
			[
				13,
				4
			],
			[
				35,
				-10
			],
			[
				19,
				-5
			],
			[
				23,
				-39
			],
			[
				-8,
				-31
			]
		],
		[
			[
				1325,
				14970
			],
			[
				-9,
				-47
			],
			[
				-45,
				-28
			],
			[
				-39,
				23
			],
			[
				-67,
				-14
			],
			[
				26,
				151
			],
			[
				12,
				34
			],
			[
				51,
				123
			],
			[
				20,
				-4
			],
			[
				15,
				-114
			],
			[
				36,
				-124
			]
		],
		[
			[
				1523,
				14834
			],
			[
				17,
				-82
			],
			[
				-41,
				-43
			],
			[
				10,
				-23
			],
			[
				32,
				-13
			],
			[
				24,
				-70
			],
			[
				-29,
				-40
			],
			[
				-4,
				-6
			],
			[
				7,
				1
			],
			[
				53,
				13
			],
			[
				21,
				-73
			],
			[
				-5,
				-9
			],
			[
				-44,
				-75
			],
			[
				-26,
				40
			],
			[
				-20,
				-28
			],
			[
				-34,
				1
			],
			[
				-12,
				74
			],
			[
				11,
				120
			],
			[
				-70,
				80
			],
			[
				4,
				17
			],
			[
				17,
				70
			],
			[
				27,
				-25
			],
			[
				27,
				11
			],
			[
				8,
				40
			],
			[
				27,
				20
			]
		],
		[
			[
				1813,
				14210
			],
			[
				-1,
				2
			],
			[
				-31,
				-37
			],
			[
				-7,
				71
			],
			[
				11,
				11
			],
			[
				-37,
				86
			],
			[
				8,
				51
			],
			[
				-36,
				95
			],
			[
				-23,
				60
			],
			[
				-18,
				16
			],
			[
				-2,
				55
			],
			[
				4,
				5
			],
			[
				19,
				24
			],
			[
				28,
				-1
			],
			[
				29,
				-35
			],
			[
				31,
				-49
			],
			[
				66,
				-120
			],
			[
				1,
				-39
			],
			[
				1,
				-6
			],
			[
				-7,
				-73
			],
			[
				-3,
				-22
			],
			[
				-18,
				-40
			],
			[
				49,
				-34
			],
			[
				3,
				73
			],
			[
				3,
				55
			],
			[
				81,
				-39
			],
			[
				21,
				-316
			],
			[
				-26,
				-75
			],
			[
				-46,
				-7
			],
			[
				0,
				0
			],
			[
				-29,
				-48
			],
			[
				63,
				11
			],
			[
				4,
				-15
			],
			[
				2,
				-7
			],
			[
				-11,
				-16
			],
			[
				-32,
				-43
			],
			[
				-72,
				-57
			],
			[
				-7,
				-5
			],
			[
				-18,
				8
			],
			[
				-6,
				2
			],
			[
				-16,
				7
			],
			[
				8,
				13
			],
			[
				53,
				76
			],
			[
				-42,
				7
			],
			[
				-14,
				-16
			],
			[
				-26,
				7
			],
			[
				-46,
				12
			],
			[
				-56,
				90
			],
			[
				19,
				59
			],
			[
				-54,
				77
			],
			[
				-2,
				61
			],
			[
				53,
				2
			],
			[
				11,
				58
			],
			[
				-21,
				21
			],
			[
				-15,
				-45
			],
			[
				-27,
				4
			],
			[
				15,
				102
			],
			[
				29,
				2
			],
			[
				-7,
				103
			],
			[
				26,
				40
			],
			[
				43,
				-202
			],
			[
				-11,
				-85
			],
			[
				28,
				-79
			],
			[
				11,
				-29
			],
			[
				24,
				31
			],
			[
				-8,
				47
			],
			[
				65,
				16
			],
			[
				-34,
				80
			]
		],
		[
			[
				1674,
				13894
			],
			[
				22,
				-40
			],
			[
				2,
				-70
			],
			[
				46,
				-63
			],
			[
				-25,
				-45
			],
			[
				-47,
				-40
			],
			[
				-104,
				-45
			],
			[
				-23,
				35
			],
			[
				-10,
				-38
			],
			[
				-63,
				-7
			],
			[
				-36,
				40
			],
			[
				-61,
				92
			],
			[
				7,
				72
			],
			[
				95,
				32
			],
			[
				2,
				31
			],
			[
				83,
				33
			],
			[
				14,
				-28
			],
			[
				53,
				15
			],
			[
				0,
				37
			],
			[
				45,
				-11
			]
		],
		[
			[
				1286,
				13906
			],
			[
				87,
				-48
			],
			[
				-23,
				-69
			],
			[
				-6,
				-86
			],
			[
				-35,
				-33
			],
			[
				-102,
				67
			],
			[
				16,
				52
			],
			[
				64,
				68
			],
			[
				-62,
				20
			],
			[
				-15,
				-9
			],
			[
				-23,
				8
			],
			[
				0,
				37
			],
			[
				21,
				10
			],
			[
				78,
				-17
			]
		],
		[
			[
				1366,
				14704
			],
			[
				-49,
				-69
			],
			[
				-39,
				25
			],
			[
				-21,
				3
			],
			[
				-17,
				-43
			],
			[
				33,
				-31
			],
			[
				-23,
				3
			],
			[
				-59,
				6
			],
			[
				-7,
				66
			],
			[
				4,
				55
			],
			[
				157,
				61
			],
			[
				19,
				-70
			],
			[
				2,
				-6
			]
		],
		[
			[
				2863,
				12951
			],
			[
				0,
				0
			],
			[
				8,
				-1
			],
			[
				28,
				-36
			],
			[
				3,
				-14
			],
			[
				0,
				0
			]
		],
		[
			[
				2902,
				12900
			],
			[
				18,
				-81
			],
			[
				25,
				-14
			],
			[
				-52,
				-67
			],
			[
				-30,
				-14
			],
			[
				7,
				-18
			],
			[
				21,
				-55
			],
			[
				-23,
				-74
			],
			[
				-19,
				-35
			],
			[
				-25,
				3
			],
			[
				-20,
				51
			],
			[
				-21,
				62
			],
			[
				9,
				68
			],
			[
				-19,
				13
			],
			[
				-12,
				9
			],
			[
				8,
				79
			],
			[
				-25,
				-5
			],
			[
				7,
				74
			],
			[
				31,
				29
			],
			[
				35,
				32
			],
			[
				3,
				3
			],
			[
				17,
				-4
			],
			[
				26,
				-5
			]
		],
		[
			[
				2409,
				14032
			],
			[
				2,
				-101
			],
			[
				-27,
				-49
			],
			[
				-47,
				-26
			],
			[
				-57,
				-7
			],
			[
				12,
				57
			],
			[
				-48,
				-25
			],
			[
				-44,
				18
			],
			[
				29,
				-94
			],
			[
				-33,
				-63
			],
			[
				-18,
				-8
			],
			[
				-17,
				30
			],
			[
				13,
				36
			],
			[
				-14,
				49
			],
			[
				-27,
				25
			],
			[
				-32,
				87
			],
			[
				6,
				55
			],
			[
				40,
				77
			],
			[
				12,
				105
			],
			[
				-17,
				36
			],
			[
				3,
				98
			],
			[
				1,
				15
			],
			[
				5,
				6
			],
			[
				7,
				8
			],
			[
				7,
				9
			],
			[
				14,
				-2
			],
			[
				88,
				-17
			],
			[
				83,
				-54
			],
			[
				16,
				-80
			],
			[
				15,
				-83
			],
			[
				23,
				-21
			],
			[
				-27,
				-81
			],
			[
				32,
				0
			]
		],
		[
			[
				3162,
				13720
			],
			[
				-3,
				-4
			],
			[
				-52,
				-68
			],
			[
				-37,
				13
			],
			[
				-70,
				-117
			],
			[
				-3,
				-66
			],
			[
				-53,
				-93
			],
			[
				59,
				-16
			],
			[
				-18,
				-57
			],
			[
				40,
				-46
			],
			[
				32,
				2
			],
			[
				2,
				44
			],
			[
				25,
				-1
			],
			[
				11,
				-48
			],
			[
				-12,
				-38
			],
			[
				9,
				-97
			],
			[
				-77,
				-3
			],
			[
				31,
				94
			],
			[
				-24,
				12
			],
			[
				-36,
				-56
			],
			[
				-57,
				91
			],
			[
				5,
				49
			],
			[
				-14,
				19
			],
			[
				-141,
				-272
			],
			[
				-10,
				-18
			],
			[
				-23,
				-13
			],
			[
				-27,
				18
			],
			[
				0,
				0
			],
			[
				-20,
				17
			],
			[
				-69,
				256
			],
			[
				20,
				10
			],
			[
				2,
				30
			],
			[
				-44,
				31
			],
			[
				-6,
				61
			],
			[
				-5,
				56
			],
			[
				4,
				11
			],
			[
				6,
				18
			],
			[
				-9,
				67
			],
			[
				-14,
				3
			],
			[
				-9,
				2
			],
			[
				-10,
				-118
			],
			[
				-37,
				-92
			],
			[
				-29,
				-6
			],
			[
				-25,
				70
			],
			[
				-230,
				192
			],
			[
				-18,
				-1
			],
			[
				-22,
				53
			],
			[
				30,
				39
			],
			[
				41,
				-45
			],
			[
				-2,
				98
			],
			[
				15,
				16
			],
			[
				40,
				-12
			],
			[
				83,
				-96
			],
			[
				26,
				45
			],
			[
				32,
				5
			],
			[
				46,
				-66
			],
			[
				47,
				57
			],
			[
				-54,
				53
			],
			[
				-36,
				147
			],
			[
				8,
				96
			],
			[
				34,
				85
			],
			[
				46,
				19
			],
			[
				65,
				19
			],
			[
				24,
				-66
			],
			[
				10,
				-25
			],
			[
				127,
				32
			],
			[
				-16,
				31
			],
			[
				-36,
				-10
			],
			[
				-46,
				12
			],
			[
				0,
				30
			],
			[
				81,
				51
			],
			[
				136,
				36
			],
			[
				5,
				-85
			],
			[
				56,
				-16
			],
			[
				21,
				58
			],
			[
				-5,
				53
			],
			[
				56,
				45
			],
			[
				20,
				-40
			],
			[
				0,
				-22
			],
			[
				0,
				-7
			],
			[
				30,
				-6
			],
			[
				-4,
				36
			],
			[
				-7,
				57
			],
			[
				34,
				14
			],
			[
				42,
				-7
			],
			[
				27,
				-36
			],
			[
				-5,
				-109
			],
			[
				17,
				-4
			],
			[
				-4,
				-40
			],
			[
				-5,
				-40
			],
			[
				7,
				-51
			],
			[
				22,
				-62
			],
			[
				-31,
				-108
			],
			[
				-9,
				-20
			],
			[
				-6,
				-37
			],
			[
				8,
				-24
			],
			[
				24,
				-21
			],
			[
				-36,
				-68
			]
		],
		[
			[
				3284,
				13335
			],
			[
				-6,
				-58
			],
			[
				-17,
				4
			],
			[
				-24,
				-66
			],
			[
				-29,
				18
			],
			[
				-10,
				56
			],
			[
				4,
				26
			],
			[
				31,
				55
			],
			[
				29,
				11
			],
			[
				22,
				-46
			]
		],
		[
			[
				2835,
				13073
			],
			[
				75,
				167
			],
			[
				63,
				-115
			],
			[
				-17,
				-23
			],
			[
				3,
				-38
			],
			[
				-14,
				-119
			],
			[
				-37,
				1
			],
			[
				-9,
				15
			],
			[
				-24,
				40
			],
			[
				-39,
				12
			],
			[
				-16,
				28
			],
			[
				15,
				32
			]
		],
		[
			[
				2145,
				12648
			],
			[
				1,
				25
			],
			[
				-23,
				9
			],
			[
				-19,
				-161
			],
			[
				-62,
				28
			],
			[
				-29,
				107
			],
			[
				-5,
				138
			],
			[
				-26,
				-14
			],
			[
				-14,
				62
			],
			[
				-9,
				21
			],
			[
				-26,
				64
			],
			[
				12,
				48
			],
			[
				25,
				56
			],
			[
				28,
				2
			],
			[
				-43,
				81
			],
			[
				-17,
				-77
			],
			[
				-23,
				-8
			],
			[
				4,
				93
			],
			[
				25,
				59
			],
			[
				0,
				81
			],
			[
				27,
				-26
			],
			[
				62,
				6
			],
			[
				-28,
				93
			],
			[
				39,
				-9
			],
			[
				22,
				-6
			],
			[
				-15,
				159
			],
			[
				-41,
				-6
			],
			[
				-77,
				45
			],
			[
				35,
				57
			],
			[
				69,
				96
			],
			[
				28,
				-73
			],
			[
				18,
				-9
			],
			[
				39,
				-20
			],
			[
				8,
				28
			],
			[
				48,
				-10
			],
			[
				64,
				-60
			],
			[
				42,
				-77
			],
			[
				74,
				-27
			],
			[
				60,
				-46
			],
			[
				106,
				-105
			],
			[
				24,
				-37
			]
		],
		[
			[
				2548,
				13235
			],
			[
				0,
				0
			],
			[
				53,
				-79
			],
			[
				40,
				-125
			],
			[
				1,
				-4
			],
			[
				0,
				0
			],
			[
				43,
				-296
			],
			[
				-13,
				-87
			],
			[
				-7,
				-51
			],
			[
				7,
				-40
			],
			[
				33,
				-201
			],
			[
				-53,
				-16
			],
			[
				-9,
				33
			],
			[
				-37,
				-24
			],
			[
				-1,
				-1
			],
			[
				-18,
				-51
			],
			[
				26,
				-4
			],
			[
				3,
				-3
			],
			[
				25,
				-25
			],
			[
				-141,
				-150
			],
			[
				-16,
				-16
			],
			[
				-9,
				-10
			],
			[
				-14,
				-15
			],
			[
				-37,
				7
			],
			[
				-125,
				21
			],
			[
				-12,
				2
			],
			[
				9,
				75
			],
			[
				-66,
				26
			],
			[
				-3,
				1
			],
			[
				0,
				4
			],
			[
				1,
				18
			],
			[
				27,
				27
			],
			[
				-6,
				18
			],
			[
				-5,
				14
			],
			[
				-5,
				14
			],
			[
				-3,
				-7
			],
			[
				-15,
				-24
			],
			[
				-47,
				-16
			],
			[
				2,
				83
			],
			[
				1,
				13
			],
			[
				-21,
				-25
			],
			[
				-33,
				-38
			],
			[
				-35,
				53
			],
			[
				-6,
				36
			],
			[
				-9,
				55
			],
			[
				5,
				42
			],
			[
				34,
				14
			],
			[
				19,
				-90
			],
			[
				18,
				-22
			],
			[
				23,
				20
			],
			[
				-32,
				115
			],
			[
				5,
				142
			],
			[
				0,
				0
			]
		],
		[
			[
				1863,
				12803
			],
			[
				0,
				0
			],
			[
				-5,
				6
			],
			[
				-31,
				51
			],
			[
				-63,
				108
			],
			[
				-20,
				61
			],
			[
				-38,
				75
			],
			[
				7,
				35
			],
			[
				21,
				-7
			],
			[
				45,
				-36
			],
			[
				51,
				-76
			],
			[
				23,
				-32
			],
			[
				28,
				-66
			],
			[
				23,
				-64
			],
			[
				2,
				-15
			],
			[
				-8,
				-27
			],
			[
				-15,
				-26
			],
			[
				0,
				0
			]
		],
		[
			[
				1883,
				12790
			],
			[
				-3,
				-5
			],
			[
				-17,
				18
			]
		],
		[
			[
				1952,
				13410
			],
			[
				20,
				-124
			],
			[
				-58,
				88
			],
			[
				-31,
				2
			],
			[
				-1,
				-30
			],
			[
				-41,
				47
			],
			[
				7,
				95
			],
			[
				25,
				27
			],
			[
				79,
				-105
			]
		],
		[
			[
				1871,
				13068
			],
			[
				-13,
				-20
			],
			[
				-20,
				30
			],
			[
				-27,
				44
			],
			[
				-46,
				35
			],
			[
				-19,
				77
			],
			[
				4,
				35
			],
			[
				44,
				-25
			],
			[
				16,
				-9
			],
			[
				10,
				-11
			],
			[
				5,
				-22
			],
			[
				10,
				-35
			],
			[
				34,
				-55
			],
			[
				2,
				-44
			]
		],
		[
			[
				1648,
				13129
			],
			[
				-6,
				-1
			],
			[
				-10,
				12
			],
			[
				-10,
				9
			],
			[
				-14,
				12
			],
			[
				-22,
				14
			],
			[
				-26,
				58
			],
			[
				17,
				2
			],
			[
				25,
				-5
			],
			[
				28,
				-20
			],
			[
				14,
				-10
			],
			[
				11,
				-17
			],
			[
				5,
				-17
			],
			[
				3,
				-22
			],
			[
				-4,
				-10
			],
			[
				-11,
				-5
			]
		],
		[
			[
				1702,
				12999
			],
			[
				-9,
				-1
			],
			[
				-11,
				7
			],
			[
				-27,
				20
			],
			[
				-19,
				25
			],
			[
				-6,
				11
			],
			[
				2,
				32
			],
			[
				25,
				-13
			],
			[
				23,
				-11
			],
			[
				16,
				-19
			],
			[
				12,
				-26
			],
			[
				0,
				-17
			],
			[
				-6,
				-8
			]
		],
		[
			[
				1712,
				13285
			],
			[
				-54,
				-30
			],
			[
				-14,
				64
			],
			[
				-13,
				55
			],
			[
				56,
				-9
			],
			[
				27,
				-23
			],
			[
				-2,
				-57
			]
		],
		[
			[
				3562,
				11383
			],
			[
				0,
				0
			],
			[
				99,
				22
			],
			[
				41,
				-18
			],
			[
				37,
				-15
			],
			[
				26,
				-11
			],
			[
				91,
				7
			],
			[
				-71,
				44
			],
			[
				-10,
				6
			],
			[
				58,
				95
			],
			[
				38,
				-10
			],
			[
				11,
				15
			],
			[
				-2,
				52
			],
			[
				-34,
				19
			],
			[
				-6,
				4
			],
			[
				-50,
				-24
			],
			[
				-19,
				-21
			],
			[
				-17,
				-18
			],
			[
				-67,
				-54
			],
			[
				-25,
				12
			],
			[
				-16,
				-8
			],
			[
				-50,
				-27
			],
			[
				-3,
				-3
			],
			[
				-5,
				-3
			],
			[
				-46,
				-34
			],
			[
				-75,
				-8
			],
			[
				-15,
				63
			],
			[
				-11,
				48
			],
			[
				-6,
				124
			],
			[
				30,
				39
			],
			[
				20,
				-1
			],
			[
				28,
				27
			],
			[
				25,
				71
			],
			[
				70,
				49
			],
			[
				42,
				-13
			],
			[
				31,
				29
			],
			[
				2,
				30
			],
			[
				-21,
				23
			],
			[
				-6,
				33
			],
			[
				19,
				25
			],
			[
				88,
				37
			],
			[
				40,
				35
			],
			[
				20,
				1
			],
			[
				49,
				-51
			],
			[
				21,
				8
			],
			[
				0,
				0
			],
			[
				18,
				5
			],
			[
				-4,
				11
			],
			[
				-20,
				66
			],
			[
				45,
				34
			],
			[
				-9,
				33
			],
			[
				-42,
				11
			],
			[
				16,
				81
			],
			[
				78,
				-93
			],
			[
				13,
				-50
			],
			[
				-29,
				-20
			],
			[
				41,
				-47
			],
			[
				41,
				-32
			],
			[
				34,
				16
			],
			[
				-22,
				31
			],
			[
				7,
				23
			],
			[
				23,
				10
			],
			[
				32,
				-22
			],
			[
				52,
				-3
			],
			[
				56,
				20
			],
			[
				65,
				-19
			],
			[
				67,
				-36
			],
			[
				4,
				-2
			],
			[
				78,
				77
			],
			[
				17,
				72
			],
			[
				18,
				70
			],
			[
				40,
				96
			],
			[
				68,
				37
			],
			[
				50,
				12
			],
			[
				57,
				70
			],
			[
				43,
				26
			],
			[
				47,
				114
			],
			[
				62,
				65
			],
			[
				87,
				13
			],
			[
				45,
				25
			],
			[
				69,
				19
			],
			[
				84,
				75
			],
			[
				37,
				32
			],
			[
				15,
				66
			],
			[
				11,
				53
			],
			[
				-54,
				-56
			],
			[
				-19,
				-40
			],
			[
				-4,
				-7
			],
			[
				-5,
				-5
			],
			[
				-24,
				-18
			],
			[
				-68,
				-31
			],
			[
				-43,
				-38
			],
			[
				-58,
				2
			],
			[
				-137,
				-55
			],
			[
				-56,
				-87
			],
			[
				-63,
				-68
			],
			[
				-42,
				-20
			],
			[
				-37,
				-28
			],
			[
				-3,
				-41
			],
			[
				-13,
				-17
			],
			[
				0,
				0
			]
		],
		[
			[
				4561,
				12412
			],
			[
				-23,
				-31
			],
			[
				-19,
				4
			],
			[
				-43,
				-27
			],
			[
				-9,
				-35
			],
			[
				-38,
				-24
			],
			[
				1,
				38
			],
			[
				-25,
				26
			],
			[
				-31,
				-16
			],
			[
				-19,
				-111
			],
			[
				-15,
				-74
			],
			[
				-4,
				-1
			],
			[
				-9,
				-1
			],
			[
				-21,
				21
			],
			[
				-25,
				-8
			],
			[
				-26,
				-44
			],
			[
				-56,
				7
			],
			[
				-53,
				-22
			],
			[
				-122,
				77
			],
			[
				-27,
				59
			],
			[
				-16,
				47
			],
			[
				-18,
				55
			],
			[
				-6,
				17
			],
			[
				21,
				30
			],
			[
				55,
				80
			],
			[
				22,
				129
			],
			[
				-23,
				158
			],
			[
				40,
				61
			],
			[
				-43,
				14
			],
			[
				-42,
				-38
			],
			[
				8,
				-136
			],
			[
				-20,
				-62
			],
			[
				-12,
				-87
			],
			[
				-65,
				-117
			],
			[
				-36,
				-24
			],
			[
				-14,
				18
			],
			[
				-22,
				-15
			],
			[
				-20,
				-54
			],
			[
				-5,
				-11
			],
			[
				0,
				-2
			],
			[
				-25,
				-13
			],
			[
				-8,
				-5
			],
			[
				-2,
				-6
			],
			[
				-21,
				-61
			],
			[
				-29,
				-9
			],
			[
				-42,
				27
			],
			[
				-11,
				32
			],
			[
				-94,
				83
			],
			[
				-52,
				96
			],
			[
				-9,
				36
			],
			[
				-22,
				85
			],
			[
				-73,
				70
			],
			[
				-47,
				15
			],
			[
				-62,
				-28
			],
			[
				-57,
				-18
			],
			[
				-30,
				-10
			],
			[
				13,
				44
			],
			[
				-3,
				0
			],
			[
				-54,
				4
			],
			[
				-51,
				47
			],
			[
				-14,
				57
			],
			[
				14,
				18
			],
			[
				28,
				-39
			],
			[
				32,
				12
			],
			[
				-25,
				49
			],
			[
				37,
				40
			],
			[
				39,
				-12
			],
			[
				5,
				3
			],
			[
				70,
				44
			],
			[
				-16,
				41
			],
			[
				43,
				49
			],
			[
				19,
				-20
			],
			[
				-7,
				-53
			],
			[
				20,
				8
			],
			[
				2,
				5
			],
			[
				42,
				93
			],
			[
				-27,
				68
			],
			[
				-5,
				68
			],
			[
				20,
				67
			],
			[
				49,
				51
			],
			[
				13,
				43
			],
			[
				78,
				40
			],
			[
				108,
				-19
			],
			[
				17,
				46
			],
			[
				37,
				53
			],
			[
				108,
				31
			],
			[
				34,
				40
			],
			[
				83,
				-43
			],
			[
				16,
				-8
			],
			[
				11,
				0
			],
			[
				42,
				1
			],
			[
				3,
				3
			],
			[
				51,
				31
			],
			[
				15,
				16
			],
			[
				23,
				138
			],
			[
				9,
				10
			],
			[
				21,
				24
			],
			[
				-11,
				46
			],
			[
				-19,
				7
			],
			[
				-33,
				11
			],
			[
				-19,
				35
			],
			[
				1,
				41
			],
			[
				0,
				13
			],
			[
				36,
				71
			],
			[
				6,
				35
			],
			[
				5,
				24
			],
			[
				5,
				27
			],
			[
				14,
				22
			],
			[
				12,
				18
			],
			[
				34,
				50
			],
			[
				8,
				58
			],
			[
				-15,
				32
			],
			[
				8,
				14
			],
			[
				52,
				92
			],
			[
				158,
				114
			],
			[
				75,
				79
			],
			[
				60,
				-11
			],
			[
				38,
				8
			],
			[
				63,
				35
			],
			[
				52,
				35
			],
			[
				76,
				-9
			],
			[
				86,
				85
			],
			[
				83,
				13
			],
			[
				0,
				0
			],
			[
				52,
				32
			],
			[
				93,
				25
			],
			[
				-4,
				36
			],
			[
				-66,
				-10
			],
			[
				-27,
				19
			],
			[
				0,
				124
			],
			[
				28,
				38
			],
			[
				13,
				49
			],
			[
				-53,
				-1
			],
			[
				-44,
				-70
			],
			[
				-29,
				-133
			],
			[
				-103,
				-72
			],
			[
				-56,
				-63
			],
			[
				-94,
				-12
			],
			[
				-66,
				-32
			],
			[
				-36,
				-6
			],
			[
				-4,
				27
			],
			[
				0,
				6
			],
			[
				15,
				9
			],
			[
				46,
				26
			],
			[
				32,
				34
			],
			[
				0,
				27
			],
			[
				-66,
				82
			],
			[
				0,
				0
			],
			[
				-51,
				37
			],
			[
				-20,
				74
			],
			[
				-40,
				66
			],
			[
				-36,
				64
			],
			[
				-1,
				15
			],
			[
				-1,
				59
			],
			[
				-25,
				22
			],
			[
				0,
				0
			]
		],
		[
			[
				1556,
				12319
			],
			[
				-6,
				0
			],
			[
				-48,
				-192
			],
			[
				-32,
				-38
			],
			[
				-38,
				57
			],
			[
				-38,
				80
			],
			[
				9,
				59
			],
			[
				65,
				45
			],
			[
				-66,
				5
			],
			[
				59,
				90
			],
			[
				-5,
				54
			],
			[
				80,
				2
			],
			[
				-29,
				79
			],
			[
				27,
				15
			],
			[
				16,
				9
			],
			[
				54,
				-102
			],
			[
				3,
				61
			],
			[
				-23,
				46
			],
			[
				-22,
				17
			],
			[
				-12,
				55
			],
			[
				17,
				26
			],
			[
				60,
				-54
			],
			[
				64,
				-85
			],
			[
				-12,
				121
			],
			[
				-32,
				13
			],
			[
				-42,
				32
			],
			[
				-51,
				100
			],
			[
				-22,
				97
			],
			[
				8,
				42
			],
			[
				73,
				-40
			],
			[
				37,
				1
			],
			[
				87,
				-189
			],
			[
				27,
				-19
			],
			[
				1,
				80
			],
			[
				17,
				24
			],
			[
				80,
				-103
			],
			[
				-16,
				-51
			],
			[
				-16,
				-1
			],
			[
				-9,
				-23
			],
			[
				28,
				-55
			],
			[
				52,
				-12
			],
			[
				6,
				-44
			],
			[
				-41,
				-34
			],
			[
				-56,
				-46
			],
			[
				34,
				-20
			],
			[
				1,
				-1
			],
			[
				30,
				-18
			],
			[
				6,
				14
			],
			[
				14,
				32
			],
			[
				1,
				1
			],
			[
				43,
				66
			],
			[
				23,
				-30
			],
			[
				27,
				-37
			],
			[
				51,
				-144
			],
			[
				-4,
				-98
			],
			[
				25,
				6
			],
			[
				61,
				-69
			],
			[
				-1,
				-22
			],
			[
				-1,
				-11
			],
			[
				-8,
				-7
			],
			[
				-18,
				-17
			],
			[
				22,
				-59
			],
			[
				4,
				-32
			],
			[
				6,
				-43
			],
			[
				-38,
				15
			],
			[
				-34,
				14
			],
			[
				-41,
				58
			],
			[
				-21,
				-37
			],
			[
				34,
				-51
			],
			[
				-2,
				-25
			],
			[
				-57,
				-3
			],
			[
				-55,
				14
			],
			[
				-13,
				51
			],
			[
				-17,
				71
			],
			[
				-7,
				26
			],
			[
				-37,
				-12
			],
			[
				-4,
				-2
			],
			[
				-30,
				-14
			],
			[
				11,
				-224
			],
			[
				10,
				-32
			],
			[
				-30,
				-126
			],
			[
				-8,
				-103
			],
			[
				-61,
				-44
			],
			[
				-55,
				-130
			],
			[
				55,
				14
			],
			[
				40,
				94
			],
			[
				38,
				16
			],
			[
				6,
				-58
			],
			[
				-47,
				-75
			],
			[
				40,
				-60
			],
			[
				20,
				-62
			],
			[
				-58,
				-79
			],
			[
				-8,
				-11
			],
			[
				5,
				-20
			],
			[
				13,
				-3
			],
			[
				15,
				-20
			],
			[
				0,
				0
			],
			[
				29,
				-29
			],
			[
				-3,
				-35
			],
			[
				-23,
				-32
			],
			[
				-41,
				-52
			],
			[
				-50,
				-62
			],
			[
				-80,
				-21
			],
			[
				-19,
				46
			],
			[
				63,
				52
			],
			[
				-8,
				61
			],
			[
				-54,
				-50
			],
			[
				-21,
				46
			],
			[
				49,
				53
			],
			[
				3,
				48
			],
			[
				-37,
				-29
			],
			[
				-23,
				21
			],
			[
				-4,
				28
			],
			[
				26,
				45
			],
			[
				31,
				30
			],
			[
				-4,
				28
			],
			[
				-24,
				3
			],
			[
				-21,
				-22
			],
			[
				-16,
				135
			],
			[
				-36,
				36
			],
			[
				60,
				143
			],
			[
				-53,
				-32
			],
			[
				0,
				47
			],
			[
				35,
				125
			],
			[
				53,
				58
			],
			[
				-50,
				-8
			],
			[
				-3,
				89
			],
			[
				64,
				114
			],
			[
				73,
				29
			],
			[
				4,
				2
			],
			[
				37,
				4
			],
			[
				-11,
				71
			],
			[
				-1,
				1
			],
			[
				2,
				2
			],
			[
				29,
				37
			],
			[
				17,
				-30
			],
			[
				25,
				29
			],
			[
				-4,
				27
			],
			[
				-36,
				6
			],
			[
				-43,
				8
			],
			[
				-48,
				-61
			],
			[
				-8,
				51
			],
			[
				-70,
				-53
			],
			[
				-16,
				32
			],
			[
				41,
				75
			],
			[
				-18,
				22
			],
			[
				-33,
				-65
			],
			[
				-16,
				27
			],
			[
				21,
				105
			],
			[
				6,
				29
			],
			[
				-28,
				1
			]
		],
		[
			[
				1343,
				12493
			],
			[
				-30,
				-41
			],
			[
				-21,
				62
			],
			[
				-15,
				29
			],
			[
				-17,
				39
			],
			[
				-1,
				34
			],
			[
				32,
				16
			],
			[
				25,
				-29
			],
			[
				35,
				-81
			],
			[
				-8,
				-29
			]
		],
		[
			[
				1443,
				12886
			],
			[
				68,
				-54
			],
			[
				44,
				-104
			],
			[
				-28,
				-30
			],
			[
				-11,
				-24
			],
			[
				-8,
				-18
			],
			[
				-53,
				-39
			],
			[
				25,
				65
			],
			[
				-31,
				3
			],
			[
				-46,
				-74
			],
			[
				-39,
				39
			],
			[
				-4,
				40
			],
			[
				-49,
				19
			],
			[
				-52,
				48
			],
			[
				-1,
				38
			],
			[
				60,
				-14
			],
			[
				-12,
				80
			],
			[
				11,
				24
			],
			[
				23,
				-30
			],
			[
				40,
				57
			],
			[
				11,
				-4
			],
			[
				52,
				-22
			]
		],
		[
			[
				1472,
				12953
			],
			[
				-28,
				-32
			],
			[
				-51,
				27
			],
			[
				-9,
				5
			],
			[
				-7,
				37
			],
			[
				-2,
				44
			],
			[
				-4,
				58
			],
			[
				-2,
				25
			],
			[
				1,
				51
			],
			[
				33,
				-8
			],
			[
				22,
				-16
			],
			[
				9,
				-6
			],
			[
				3,
				-20
			],
			[
				11,
				-58
			],
			[
				19,
				-28
			],
			[
				-22,
				-18
			],
			[
				27,
				-61
			]
		],
		[
			[
				1347,
				13034
			],
			[
				-41,
				-34
			],
			[
				-49,
				0
			],
			[
				-6,
				22
			],
			[
				0,
				77
			],
			[
				27,
				9
			],
			[
				27,
				42
			],
			[
				38,
				-33
			],
			[
				2,
				-17
			],
			[
				6,
				-40
			],
			[
				-4,
				-26
			]
		],
		[
			[
				2149,
				11645
			],
			[
				-40,
				-34
			],
			[
				-49,
				-28
			],
			[
				-84,
				-14
			],
			[
				0,
				-1
			],
			[
				0,
				1
			],
			[
				47,
				51
			],
			[
				30,
				9
			],
			[
				28,
				13
			],
			[
				21,
				64
			],
			[
				13,
				43
			],
			[
				-32,
				28
			],
			[
				19,
				64
			],
			[
				-35,
				25
			],
			[
				-14,
				66
			],
			[
				39,
				-14
			],
			[
				40,
				-14
			],
			[
				31,
				-100
			],
			[
				21,
				41
			],
			[
				0,
				0
			],
			[
				39,
				-35
			],
			[
				44,
				18
			],
			[
				-1,
				-23
			],
			[
				-22,
				-82
			],
			[
				-56,
				-11
			],
			[
				-29,
				-59
			],
			[
				-10,
				-8
			]
		],
		[
			[
				1987,
				10256
			],
			[
				0,
				0
			],
			[
				3,
				0
			],
			[
				4,
				20
			],
			[
				19,
				89
			],
			[
				-83,
				-20
			],
			[
				-122,
				110
			],
			[
				-40,
				16
			],
			[
				0,
				38
			],
			[
				80,
				9
			],
			[
				66,
				-58
			],
			[
				-5,
				91
			],
			[
				-113,
				1
			],
			[
				-48,
				19
			],
			[
				38,
				26
			],
			[
				12,
				110
			],
			[
				41,
				52
			],
			[
				38,
				4
			],
			[
				25,
				74
			],
			[
				28,
				-18
			],
			[
				16,
				61
			],
			[
				9,
				75
			],
			[
				-8,
				42
			],
			[
				52,
				38
			],
			[
				32,
				23
			],
			[
				0,
				0
			],
			[
				15,
				11
			],
			[
				12,
				-7
			],
			[
				-4,
				21
			],
			[
				-14,
				77
			],
			[
				-20,
				40
			],
			[
				45,
				56
			],
			[
				47,
				24
			],
			[
				34,
				17
			],
			[
				64,
				11
			],
			[
				-15,
				76
			],
			[
				88,
				43
			],
			[
				23,
				6
			],
			[
				16,
				-105
			],
			[
				-14,
				-78
			],
			[
				13,
				-49
			],
			[
				20,
				61
			],
			[
				45,
				-53
			],
			[
				10,
				-34
			],
			[
				-26,
				-13
			],
			[
				5,
				-91
			],
			[
				-10,
				-112
			],
			[
				2,
				0
			],
			[
				48,
				0
			],
			[
				-2,
				64
			],
			[
				-2,
				107
			],
			[
				53,
				5
			],
			[
				47,
				88
			],
			[
				-35,
				75
			],
			[
				-42,
				18
			],
			[
				-24,
				56
			],
			[
				19,
				10
			],
			[
				5,
				44
			],
			[
				-55,
				-28
			],
			[
				-43,
				55
			],
			[
				33,
				54
			],
			[
				43,
				5
			],
			[
				17,
				58
			],
			[
				-32,
				15
			],
			[
				-19,
				33
			],
			[
				22,
				62
			],
			[
				36,
				6
			],
			[
				30,
				97
			],
			[
				34,
				-78
			],
			[
				-2,
				70
			],
			[
				7,
				13
			],
			[
				18,
				40
			],
			[
				55,
				31
			],
			[
				82,
				121
			],
			[
				28,
				-15
			],
			[
				-39,
				-98
			],
			[
				42,
				0
			],
			[
				21,
				-46
			],
			[
				-28,
				-262
			],
			[
				-29,
				-77
			],
			[
				22,
				-30
			],
			[
				-1,
				-49
			],
			[
				-63,
				-87
			],
			[
				47,
				-75
			],
			[
				-19,
				-46
			],
			[
				9,
				-211
			],
			[
				42,
				-121
			],
			[
				-8,
				-37
			],
			[
				-35,
				-12
			],
			[
				-22,
				-26
			],
			[
				3,
				-67
			],
			[
				-22,
				1
			],
			[
				-47,
				64
			],
			[
				4,
				-62
			],
			[
				36,
				-46
			],
			[
				1,
				-2
			],
			[
				1,
				-110
			],
			[
				-29,
				-29
			],
			[
				-28,
				2
			],
			[
				-41,
				22
			],
			[
				-8,
				3
			],
			[
				-32,
				129
			],
			[
				-32,
				-23
			],
			[
				17,
				-64
			],
			[
				0,
				-45
			],
			[
				-32,
				-81
			],
			[
				4,
				-20
			],
			[
				15,
				-76
			],
			[
				0,
				0
			]
		],
		[
			[
				3821,
				14570
			],
			[
				0,
				0
			],
			[
				21,
				-73
			],
			[
				9,
				-157
			],
			[
				-13,
				-24
			],
			[
				-9,
				-114
			],
			[
				5,
				3
			],
			[
				23,
				15
			],
			[
				-33,
				-204
			],
			[
				-47,
				-118
			],
			[
				-85,
				-83
			],
			[
				-5,
				-50
			],
			[
				-125,
				-88
			],
			[
				-35,
				125
			],
			[
				53,
				102
			],
			[
				-5,
				5
			],
			[
				-16,
				13
			],
			[
				-61,
				-56
			],
			[
				-76,
				-205
			],
			[
				-47,
				-13
			],
			[
				-11,
				133
			],
			[
				10,
				47
			],
			[
				-5,
				37
			],
			[
				-11,
				3
			],
			[
				-48,
				-55
			],
			[
				-38,
				0
			],
			[
				-3,
				0
			],
			[
				-2,
				9
			],
			[
				-16,
				76
			],
			[
				3,
				84
			],
			[
				-21,
				62
			],
			[
				-6,
				37
			],
			[
				0,
				0
			]
		],
		[
			[
				4009,
				14868
			],
			[
				47,
				50
			],
			[
				82,
				6
			],
			[
				61,
				-36
			],
			[
				69,
				-79
			],
			[
				-4,
				-145
			],
			[
				-66,
				-78
			],
			[
				6,
				-51
			],
			[
				-27,
				-49
			],
			[
				-109,
				-103
			],
			[
				-11,
				-10
			],
			[
				16,
				-26
			],
			[
				1,
				-1
			],
			[
				-1,
				-1
			],
			[
				-64,
				-77
			],
			[
				-4,
				-5
			],
			[
				-9,
				20
			],
			[
				-9,
				20
			],
			[
				19,
				81
			],
			[
				7,
				31
			],
			[
				-9,
				1
			],
			[
				-45,
				7
			],
			[
				-19,
				35
			],
			[
				-7,
				20
			],
			[
				-41,
				130
			],
			[
				-12,
				143
			],
			[
				13,
				13
			],
			[
				60,
				45
			],
			[
				56,
				59
			]
		],
		[
			[
				3969,
				13584
			],
			[
				-34,
				-48
			],
			[
				-62,
				33
			],
			[
				-79,
				-37
			],
			[
				-111,
				-29
			],
			[
				-14,
				34
			],
			[
				113,
				45
			],
			[
				95,
				93
			],
			[
				45,
				30
			],
			[
				46,
				-53
			],
			[
				1,
				-68
			]
		],
		[
			[
				3503,
				13343
			],
			[
				-41,
				-10
			],
			[
				-9,
				24
			],
			[
				52,
				52
			],
			[
				52,
				42
			],
			[
				50,
				38
			],
			[
				29,
				20
			],
			[
				20,
				-36
			],
			[
				-16,
				-73
			],
			[
				-79,
				-28
			],
			[
				-58,
				-29
			]
		],
		[
			[
				3182,
				12386
			],
			[
				19,
				28
			],
			[
				9,
				69
			],
			[
				-23,
				19
			],
			[
				0,
				26
			],
			[
				58,
				20
			],
			[
				5,
				-4
			],
			[
				58,
				-49
			],
			[
				-12,
				-73
			],
			[
				19,
				-47
			],
			[
				71,
				1
			],
			[
				46,
				-24
			],
			[
				60,
				-2
			],
			[
				108,
				-127
			],
			[
				16,
				-94
			],
			[
				-147,
				29
			],
			[
				-55,
				-225
			],
			[
				-89,
				-26
			],
			[
				-22,
				76
			],
			[
				-13,
				46
			],
			[
				39,
				100
			],
			[
				-45,
				54
			],
			[
				39,
				24
			],
			[
				8,
				81
			],
			[
				-55,
				-4
			],
			[
				-4,
				45
			],
			[
				-33,
				52
			],
			[
				-20,
				-1
			],
			[
				-15,
				-32
			],
			[
				-13,
				-30
			],
			[
				-117,
				2
			],
			[
				17,
				44
			],
			[
				-1,
				4
			],
			[
				-7,
				29
			],
			[
				-71,
				25
			],
			[
				-46,
				97
			],
			[
				71,
				33
			],
			[
				10,
				-11
			],
			[
				6,
				-27
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				-3,
				-63
			],
			[
				82,
				22
			],
			[
				12,
				-53
			],
			[
				-14,
				-23
			],
			[
				14,
				-18
			],
			[
				6,
				-8
			],
			[
				24,
				4
			],
			[
				8,
				11
			]
		],
		[
			[
				3218,
				11950
			],
			[
				29,
				-85
			],
			[
				21,
				-90
			],
			[
				-87,
				3
			],
			[
				6,
				82
			],
			[
				-30,
				4
			],
			[
				-36,
				-33
			],
			[
				-101,
				54
			],
			[
				17,
				157
			],
			[
				33,
				23
			],
			[
				148,
				-115
			]
		],
		[
			[
				3172,
				12138
			],
			[
				45,
				-58
			],
			[
				17,
				68
			],
			[
				30,
				-166
			],
			[
				-25,
				-17
			],
			[
				-30,
				49
			],
			[
				-92,
				52
			],
			[
				-28,
				67
			],
			[
				27,
				18
			],
			[
				56,
				-13
			]
		],
		[
			[
				22747,
				47760
			],
			[
				0,
				0
			],
			[
				62,
				43
			],
			[
				2,
				2
			],
			[
				6,
				176
			],
			[
				-23,
				41
			],
			[
				-67,
				123
			],
			[
				-8,
				15
			],
			[
				200,
				87
			],
			[
				18,
				-42
			],
			[
				157,
				89
			],
			[
				50,
				2
			],
			[
				14,
				89
			],
			[
				175,
				78
			],
			[
				87,
				-23
			],
			[
				30,
				-51
			],
			[
				17,
				-29
			],
			[
				72,
				4
			],
			[
				2,
				0
			],
			[
				22,
				2
			],
			[
				62,
				64
			],
			[
				28,
				66
			],
			[
				11,
				56
			],
			[
				-40,
				18
			],
			[
				-63,
				-64
			],
			[
				-37,
				-66
			],
			[
				-43,
				3
			],
			[
				-98,
				68
			],
			[
				47,
				27
			],
			[
				44,
				-5
			],
			[
				66,
				70
			],
			[
				97,
				14
			],
			[
				54,
				60
			],
			[
				57,
				13
			],
			[
				50,
				51
			],
			[
				148,
				-13
			],
			[
				11,
				55
			],
			[
				52,
				42
			],
			[
				103,
				82
			],
			[
				38,
				30
			],
			[
				32,
				76
			],
			[
				22,
				22
			],
			[
				122,
				125
			],
			[
				72,
				24
			],
			[
				48,
				56
			],
			[
				72,
				84
			],
			[
				25,
				-44
			],
			[
				29,
				8
			],
			[
				-8,
				85
			],
			[
				71,
				126
			],
			[
				37,
				58
			]
		],
		[
			[
				24672,
				49557
			],
			[
				0,
				0
			],
			[
				5,
				7
			],
			[
				83,
				127
			],
			[
				4,
				6
			],
			[
				139,
				132
			],
			[
				101,
				96
			],
			[
				45,
				17
			],
			[
				25,
				9
			],
			[
				5,
				14
			],
			[
				13,
				42
			],
			[
				-41,
				66
			],
			[
				-36,
				27
			],
			[
				-117,
				-129
			],
			[
				-142,
				-158
			],
			[
				-34,
				-37
			],
			[
				-35,
				-39
			],
			[
				-20,
				-53
			],
			[
				-75,
				-117
			],
			[
				-52,
				-42
			],
			[
				-62,
				-70
			],
			[
				-35,
				-75
			],
			[
				-120,
				-112
			],
			[
				0,
				0
			]
		],
		[
			[
				24323,
				49268
			],
			[
				-99,
				-91
			],
			[
				-123,
				-60
			],
			[
				-110,
				-95
			],
			[
				-251,
				-216
			],
			[
				-9,
				-7
			],
			[
				-43,
				-38
			],
			[
				-31,
				-6
			],
			[
				-45,
				-10
			],
			[
				-27,
				30
			],
			[
				-149,
				13
			],
			[
				-106,
				57
			],
			[
				-20,
				15
			],
			[
				-69,
				52
			],
			[
				7,
				46
			],
			[
				9,
				17
			],
			[
				40,
				71
			],
			[
				55,
				44
			],
			[
				56,
				33
			],
			[
				11,
				3
			],
			[
				40,
				11
			],
			[
				17,
				-16
			],
			[
				30,
				-31
			],
			[
				96,
				10
			],
			[
				88,
				52
			],
			[
				25,
				32
			],
			[
				-33,
				11
			],
			[
				-55,
				-11
			],
			[
				-21,
				-4
			],
			[
				-15,
				25
			],
			[
				-27,
				46
			],
			[
				-65,
				-2
			],
			[
				-38,
				-2
			],
			[
				-7,
				24
			],
			[
				-2,
				4
			],
			[
				-6,
				21
			],
			[
				17,
				10
			],
			[
				58,
				36
			],
			[
				-66,
				63
			],
			[
				-8,
				7
			],
			[
				-55,
				-6
			],
			[
				-35,
				-4
			],
			[
				-11,
				-31
			],
			[
				-135,
				-23
			],
			[
				-22,
				78
			],
			[
				51,
				2
			],
			[
				144,
				104
			],
			[
				149,
				-39
			],
			[
				48,
				-27
			],
			[
				122,
				5
			],
			[
				9,
				74
			],
			[
				-140,
				-30
			],
			[
				-144,
				43
			],
			[
				11,
				37
			],
			[
				129,
				-14
			],
			[
				-120,
				88
			],
			[
				-124,
				-85
			],
			[
				-20,
				6
			],
			[
				48,
				82
			],
			[
				-84,
				-15
			],
			[
				-50,
				-59
			],
			[
				-75,
				-15
			],
			[
				-74,
				-82
			],
			[
				-10,
				-56
			],
			[
				-50,
				-50
			],
			[
				-42,
				-2
			],
			[
				-9,
				-1
			],
			[
				-21,
				11
			],
			[
				-12,
				6
			],
			[
				235,
				268
			],
			[
				12,
				115
			],
			[
				13,
				18
			]
		],
		[
			[
				23185,
				49810
			],
			[
				0,
				0
			],
			[
				88,
				122
			],
			[
				65,
				22
			],
			[
				63,
				-21
			],
			[
				43,
				-15
			],
			[
				87,
				53
			],
			[
				-13,
				9
			],
			[
				-18,
				12
			],
			[
				2,
				4
			],
			[
				16,
				31
			],
			[
				31,
				15
			]
		],
		[
			[
				23549,
				50042
			],
			[
				0,
				0
			],
			[
				1,
				0
			],
			[
				48,
				6
			],
			[
				-8,
				73
			],
			[
				-54,
				-19
			],
			[
				0,
				0
			]
		],
		[
			[
				23536,
				50102
			],
			[
				-1,
				-1
			],
			[
				-48,
				-57
			],
			[
				-30,
				-35
			],
			[
				-3,
				-4
			],
			[
				-59,
				16
			],
			[
				2,
				4
			],
			[
				51,
				106
			],
			[
				47,
				28
			],
			[
				-10,
				19
			],
			[
				-33,
				20
			],
			[
				-5,
				3
			],
			[
				9,
				6
			],
			[
				51,
				36
			]
		],
		[
			[
				23507,
				50243
			],
			[
				0,
				0
			],
			[
				104,
				72
			],
			[
				-22,
				48
			],
			[
				-46,
				-28
			],
			[
				0,
				0
			]
		],
		[
			[
				23543,
				50335
			],
			[
				-65,
				-38
			],
			[
				-21,
				19
			],
			[
				-11,
				-13
			],
			[
				-63,
				-66
			],
			[
				-180,
				-191
			],
			[
				-58,
				-11
			],
			[
				-140,
				-25
			],
			[
				-17,
				-47
			],
			[
				-67,
				32
			],
			[
				-7,
				73
			],
			[
				0,
				1
			],
			[
				-1,
				0
			],
			[
				-46,
				14
			],
			[
				-6,
				-75
			],
			[
				23,
				-95
			],
			[
				6,
				-22
			],
			[
				102,
				-73
			],
			[
				-15,
				-92
			],
			[
				-5,
				-30
			],
			[
				-10,
				-1
			],
			[
				-27,
				-3
			],
			[
				-47,
				-68
			],
			[
				-114,
				-166
			],
			[
				-178,
				-56
			],
			[
				-193,
				-137
			],
			[
				-65,
				9
			],
			[
				-15,
				47
			],
			[
				-1,
				1
			],
			[
				8,
				7
			],
			[
				35,
				28
			],
			[
				125,
				101
			],
			[
				-40,
				23
			],
			[
				61,
				70
			],
			[
				12,
				28
			],
			[
				3,
				6
			],
			[
				-19,
				21
			],
			[
				-20,
				23
			],
			[
				3,
				6
			],
			[
				4,
				7
			],
			[
				35,
				59
			],
			[
				54,
				58
			],
			[
				-21,
				16
			],
			[
				-48,
				5
			],
			[
				77,
				78
			],
			[
				3,
				76
			],
			[
				-109,
				-15
			],
			[
				-43,
				-6
			],
			[
				-1,
				64
			],
			[
				90,
				69
			],
			[
				27,
				20
			],
			[
				-6,
				142
			],
			[
				45,
				27
			],
			[
				18,
				71
			],
			[
				13,
				51
			],
			[
				112,
				-38
			],
			[
				21,
				-126
			],
			[
				72,
				41
			],
			[
				-17,
				31
			],
			[
				-2,
				3
			],
			[
				-43,
				77
			],
			[
				10,
				4
			],
			[
				79,
				36
			],
			[
				21,
				-41
			],
			[
				0,
				-1
			],
			[
				54,
				40
			],
			[
				59,
				44
			],
			[
				11,
				49
			],
			[
				-27,
				30
			],
			[
				-15,
				-8
			],
			[
				0,
				0
			]
		],
		[
			[
				22963,
				50498
			],
			[
				-149,
				-83
			],
			[
				-14,
				-3
			],
			[
				-6,
				-2
			],
			[
				-26,
				-6
			],
			[
				-51,
				-13
			],
			[
				-33,
				23
			],
			[
				-9,
				49
			],
			[
				34,
				79
			],
			[
				30,
				70
			],
			[
				106,
				98
			],
			[
				2,
				2
			],
			[
				73,
				67
			],
			[
				167,
				111
			],
			[
				86,
				57
			],
			[
				50,
				33
			],
			[
				17,
				47
			],
			[
				-18,
				-1
			],
			[
				-59,
				-2
			],
			[
				7,
				24
			],
			[
				37,
				133
			],
			[
				-38,
				-39
			],
			[
				-18,
				-18
			],
			[
				-57,
				-33
			],
			[
				-12,
				-9
			],
			[
				-89,
				-68
			],
			[
				10,
				74
			],
			[
				-34,
				-36
			],
			[
				-34,
				-34
			],
			[
				-4,
				85
			],
			[
				52,
				29
			],
			[
				14,
				8
			],
			[
				43,
				85
			],
			[
				-156,
				-103
			],
			[
				-1,
				-15
			],
			[
				-7,
				-97
			],
			[
				-33,
				-59
			],
			[
				-130,
				-111
			],
			[
				50,
				176
			],
			[
				86,
				144
			],
			[
				0,
				1
			],
			[
				42,
				61
			],
			[
				13,
				20
			],
			[
				-4,
				9
			],
			[
				-10,
				23
			],
			[
				14,
				56
			],
			[
				10,
				38
			],
			[
				49,
				185
			],
			[
				-57,
				-55
			],
			[
				-7,
				48
			],
			[
				67,
				78
			],
			[
				-27,
				16
			],
			[
				-65,
				-73
			],
			[
				-9,
				48
			],
			[
				103,
				148
			],
			[
				83,
				76
			],
			[
				42,
				-22
			],
			[
				1,
				-1
			],
			[
				62,
				-44
			],
			[
				-2,
				-37
			],
			[
				-2,
				-205
			],
			[
				60,
				-66
			],
			[
				78,
				-84
			],
			[
				22,
				6
			],
			[
				50,
				-63
			],
			[
				178,
				-225
			],
			[
				9,
				-112
			],
			[
				-61,
				-60
			],
			[
				34,
				-234
			],
			[
				84,
				-19
			],
			[
				39,
				-86
			],
			[
				72,
				-37
			],
			[
				-11,
				-36
			],
			[
				-18,
				-60
			],
			[
				10,
				-81
			],
			[
				51,
				16
			],
			[
				40,
				-35
			],
			[
				19,
				7
			],
			[
				3,
				92
			],
			[
				-15,
				54
			],
			[
				-30,
				-68
			],
			[
				-33,
				17
			],
			[
				11,
				55
			],
			[
				13,
				69
			],
			[
				-80,
				34
			],
			[
				8,
				54
			],
			[
				-90,
				125
			],
			[
				-43,
				131
			],
			[
				18,
				32
			],
			[
				70,
				16
			],
			[
				34,
				-25
			],
			[
				-64,
				-50
			],
			[
				9,
				-42
			],
			[
				70,
				44
			],
			[
				106,
				-68
			],
			[
				9,
				43
			],
			[
				-74,
				48
			],
			[
				8,
				29
			],
			[
				93,
				-45
			],
			[
				30,
				-38
			],
			[
				28,
				-41
			],
			[
				-52,
				-226
			],
			[
				47,
				39
			],
			[
				55,
				-51
			],
			[
				27,
				16
			],
			[
				-42,
				71
			],
			[
				4,
				163
			],
			[
				38,
				2
			],
			[
				116,
				-212
			],
			[
				41,
				-47
			],
			[
				60,
				-72
			],
			[
				28,
				-43
			],
			[
				92,
				-156
			],
			[
				-25,
				152
			],
			[
				-254,
				347
			],
			[
				53,
				-9
			],
			[
				27,
				-51
			],
			[
				39,
				40
			],
			[
				-24,
				83
			],
			[
				22,
				5
			],
			[
				174,
				41
			],
			[
				149,
				34
			],
			[
				29,
				6
			],
			[
				31,
				32
			],
			[
				-7,
				18
			],
			[
				-65,
				-2
			],
			[
				-52,
				-8
			],
			[
				-20,
				-4
			],
			[
				-219,
				-35
			],
			[
				-79,
				-24
			],
			[
				-17,
				-5
			],
			[
				-2,
				1
			],
			[
				-54,
				63
			],
			[
				-14,
				15
			],
			[
				1,
				0
			],
			[
				81,
				51
			],
			[
				48,
				9
			],
			[
				49,
				34
			],
			[
				-6,
				7
			],
			[
				-6,
				6
			],
			[
				-20,
				22
			],
			[
				-50,
				-16
			],
			[
				-6,
				-2
			],
			[
				-26,
				-11
			],
			[
				-91,
				-41
			],
			[
				-7,
				-3
			],
			[
				-24,
				35
			],
			[
				-10,
				72
			],
			[
				-73,
				104
			],
			[
				-14,
				20
			],
			[
				88,
				71
			],
			[
				40,
				-17
			],
			[
				90,
				46
			],
			[
				6,
				41
			],
			[
				-24,
				-4
			],
			[
				-14,
				-3
			],
			[
				-74,
				-14
			],
			[
				-30,
				36
			],
			[
				12,
				31
			],
			[
				-7,
				19
			],
			[
				-20,
				59
			],
			[
				-21,
				57
			],
			[
				2,
				6
			],
			[
				14,
				48
			],
			[
				8,
				152
			],
			[
				-42,
				19
			],
			[
				-8,
				-75
			],
			[
				-30,
				-75
			],
			[
				2,
				-56
			],
			[
				4,
				-87
			],
			[
				0,
				-9
			],
			[
				3,
				-68
			],
			[
				-34,
				-56
			],
			[
				-11,
				-23
			],
			[
				-12,
				-25
			],
			[
				-82,
				-62
			],
			[
				-6,
				-4
			],
			[
				-17,
				-13
			],
			[
				-53,
				23
			],
			[
				-12,
				10
			],
			[
				-55,
				45
			],
			[
				37,
				51
			],
			[
				3,
				5
			],
			[
				144,
				198
			],
			[
				50,
				114
			],
			[
				12,
				84
			],
			[
				-47,
				-28
			],
			[
				-59,
				-141
			],
			[
				-88,
				-107
			],
			[
				-52,
				-64
			],
			[
				-25,
				-44
			],
			[
				-22,
				-39
			],
			[
				-64,
				42
			],
			[
				-67,
				59
			],
			[
				-8,
				17
			],
			[
				-6,
				14
			],
			[
				-17,
				36
			],
			[
				0,
				0
			]
		],
		[
			[
				23349,
				51566
			],
			[
				-8,
				17
			],
			[
				-5,
				64
			],
			[
				-4,
				48
			],
			[
				-1,
				14
			],
			[
				56,
				39
			],
			[
				41,
				66
			],
			[
				1,
				40
			],
			[
				-80,
				-70
			],
			[
				-14,
				-11
			],
			[
				-32,
				34
			],
			[
				-25,
				129
			],
			[
				-5,
				98
			],
			[
				10,
				73
			],
			[
				-53,
				11
			],
			[
				137,
				241
			],
			[
				137,
				240
			],
			[
				10,
				14
			],
			[
				55,
				75
			],
			[
				4,
				6
			],
			[
				62,
				84
			],
			[
				19,
				59
			],
			[
				50,
				32
			],
			[
				38,
				-5
			],
			[
				45,
				-51
			],
			[
				146,
				-88
			],
			[
				7,
				-76
			],
			[
				22,
				-42
			],
			[
				35,
				4
			],
			[
				-50,
				-79
			],
			[
				-50,
				-79
			],
			[
				34,
				-22
			],
			[
				57,
				89
			],
			[
				29,
				45
			],
			[
				74,
				-10
			],
			[
				33,
				-61
			],
			[
				-27,
				-24
			],
			[
				-106,
				-95
			],
			[
				38,
				-107
			],
			[
				30,
				88
			],
			[
				31,
				38
			],
			[
				22,
				7
			],
			[
				-12,
				-74
			],
			[
				-5,
				-96
			],
			[
				25,
				-2
			],
			[
				52,
				-3
			],
			[
				134,
				-8
			],
			[
				128,
				-51
			],
			[
				-15,
				-116
			],
			[
				95,
				-89
			],
			[
				15,
				-40
			],
			[
				7,
				-38
			],
			[
				52,
				26
			],
			[
				18,
				25
			],
			[
				-23,
				22
			],
			[
				-1,
				1
			],
			[
				-40,
				31
			],
			[
				-78,
				63
			],
			[
				10,
				92
			],
			[
				67,
				-34
			],
			[
				25,
				37
			],
			[
				-122,
				88
			],
			[
				-25,
				-13
			],
			[
				0,
				0
			],
			[
				-48,
				22
			],
			[
				-83,
				37
			],
			[
				-8,
				0
			],
			[
				-67,
				-7
			],
			[
				-10,
				-1
			],
			[
				-61,
				-5
			],
			[
				8,
				100
			],
			[
				2,
				37
			],
			[
				51,
				121
			],
			[
				-20,
				13
			],
			[
				-101,
				63
			],
			[
				-19,
				99
			],
			[
				-52,
				-22
			],
			[
				-3,
				70
			],
			[
				-40,
				39
			],
			[
				-108,
				105
			],
			[
				-41,
				46
			],
			[
				-22,
				26
			],
			[
				52,
				35
			],
			[
				77,
				53
			],
			[
				13,
				22
			],
			[
				53,
				109
			],
			[
				2,
				14
			]
		],
		[
			[
				21073,
				49925
			],
			[
				-27,
				-5
			],
			[
				-13,
				33
			],
			[
				-6,
				73
			],
			[
				-1,
				50
			],
			[
				10,
				22
			],
			[
				14,
				4
			],
			[
				22,
				-1
			],
			[
				17,
				-6
			],
			[
				17,
				-21
			],
			[
				-1,
				-60
			],
			[
				-12,
				-52
			],
			[
				-20,
				-37
			]
		],
		[
			[
				22296,
				49243
			],
			[
				-73,
				-23
			],
			[
				-67,
				50
			],
			[
				-89,
				8
			],
			[
				10,
				108
			],
			[
				88,
				91
			],
			[
				61,
				-4
			],
			[
				70,
				-230
			]
		],
		[
			[
				21421,
				52835
			],
			[
				-20,
				-3
			],
			[
				-37,
				6
			],
			[
				-23,
				16
			],
			[
				2,
				26
			],
			[
				13,
				21
			],
			[
				83,
				-8
			],
			[
				22,
				-22
			],
			[
				-7,
				-16
			],
			[
				-33,
				-20
			]
		],
		[
			[
				21352,
				52958
			],
			[
				-39,
				-11
			],
			[
				-36,
				25
			],
			[
				51,
				60
			],
			[
				61,
				13
			],
			[
				38,
				-5
			],
			[
				10,
				-17
			],
			[
				-1,
				-22
			],
			[
				-84,
				-43
			]
		],
		[
			[
				21025,
				53151
			],
			[
				-79,
				-82
			],
			[
				-55,
				31
			],
			[
				63,
				77
			],
			[
				71,
				-26
			]
		],
		[
			[
				22332,
				53365
			],
			[
				-50,
				-37
			],
			[
				-23,
				26
			],
			[
				-9,
				15
			],
			[
				2,
				9
			],
			[
				1,
				1
			],
			[
				10,
				19
			],
			[
				14,
				23
			],
			[
				19,
				15
			],
			[
				18,
				10
			],
			[
				14,
				-4
			],
			[
				11,
				-9
			],
			[
				4,
				-17
			],
			[
				-11,
				-51
			]
		],
		[
			[
				22482,
				53438
			],
			[
				-28,
				-18
			],
			[
				-6,
				1
			],
			[
				-16,
				13
			],
			[
				-13,
				23
			],
			[
				7,
				16
			],
			[
				21,
				25
			],
			[
				22,
				19
			],
			[
				17,
				-1
			],
			[
				21,
				-22
			],
			[
				-8,
				-38
			],
			[
				-17,
				-18
			]
		],
		[
			[
				21667,
				53800
			],
			[
				-38,
				-58
			],
			[
				-88,
				87
			],
			[
				51,
				39
			],
			[
				75,
				-68
			]
		],
		[
			[
				22268,
				52679
			],
			[
				-18,
				-7
			],
			[
				-22,
				0
			],
			[
				-36,
				14
			],
			[
				-9,
				32
			],
			[
				-3,
				25
			],
			[
				24,
				26
			],
			[
				25,
				-33
			],
			[
				27,
				-39
			],
			[
				12,
				-18
			]
		],
		[
			[
				21923,
				52672
			],
			[
				70,
				-34
			],
			[
				178,
				15
			],
			[
				109,
				-49
			],
			[
				-44,
				-12
			],
			[
				-8,
				-52
			],
			[
				42,
				-44
			],
			[
				1,
				-53
			],
			[
				-42,
				-15
			],
			[
				-26,
				38
			],
			[
				-90,
				-10
			],
			[
				59,
				-31
			],
			[
				-42,
				-40
			],
			[
				125,
				20
			],
			[
				14,
				-15
			],
			[
				16,
				-17
			],
			[
				-19,
				-62
			],
			[
				-59,
				-53
			],
			[
				-32,
				24
			],
			[
				-12,
				-119
			],
			[
				-240,
				-298
			],
			[
				-82,
				-32
			],
			[
				44,
				134
			],
			[
				-96,
				-95
			],
			[
				-43,
				38
			],
			[
				-30,
				27
			],
			[
				-7,
				46
			],
			[
				-36,
				29
			],
			[
				-76,
				1
			],
			[
				-75,
				-39
			],
			[
				-71,
				10
			],
			[
				-44,
				35
			],
			[
				113,
				190
			],
			[
				22,
				135
			],
			[
				64,
				113
			],
			[
				0,
				55
			],
			[
				37,
				48
			],
			[
				65,
				34
			],
			[
				34,
				54
			],
			[
				105,
				-27
			],
			[
				1,
				45
			],
			[
				75,
				6
			]
		],
		[
			[
				22631,
				51925
			],
			[
				-75,
				-47
			],
			[
				-20,
				36
			],
			[
				39,
				35
			],
			[
				-14,
				96
			],
			[
				38,
				82
			],
			[
				62,
				44
			],
			[
				-17,
				41
			],
			[
				43,
				30
			],
			[
				16,
				-12
			],
			[
				0,
				0
			],
			[
				27,
				-21
			],
			[
				4,
				-68
			],
			[
				-103,
				-216
			]
		],
		[
			[
				22559,
				52460
			],
			[
				-51,
				-64
			],
			[
				-144,
				-41
			],
			[
				-24,
				43
			],
			[
				-29,
				-11
			],
			[
				-1,
				23
			],
			[
				-2,
				41
			],
			[
				67,
				36
			],
			[
				65,
				76
			],
			[
				113,
				0
			],
			[
				26,
				-40
			],
			[
				3,
				-44
			],
			[
				-23,
				-18
			],
			[
				0,
				-1
			],
			[
				0,
				0
			]
		],
		[
			[
				20372,
				52081
			],
			[
				-30,
				-57
			],
			[
				-47,
				22
			],
			[
				30,
				50
			],
			[
				47,
				-15
			]
		],
		[
			[
				21393,
				52329
			],
			[
				-34,
				-8
			],
			[
				-19,
				1
			],
			[
				-41,
				50
			],
			[
				-26,
				64
			],
			[
				-1,
				51
			],
			[
				31,
				17
			],
			[
				27,
				-12
			],
			[
				94,
				-75
			],
			[
				21,
				-41
			],
			[
				-14,
				-22
			],
			[
				-38,
				-25
			]
		],
		[
			[
				22513,
				51186
			],
			[
				-62,
				-41
			],
			[
				-12,
				66
			],
			[
				67,
				56
			],
			[
				52,
				106
			],
			[
				71,
				95
			],
			[
				34,
				-18
			],
			[
				-47,
				-88
			],
			[
				-103,
				-176
			]
		],
		[
			[
				22544,
				51049
			],
			[
				-53,
				-77
			],
			[
				-21,
				25
			],
			[
				-35,
				-41
			],
			[
				-31,
				-4
			],
			[
				-15,
				74
			],
			[
				173,
				159
			],
			[
				86,
				64
			],
			[
				3,
				-95
			],
			[
				-107,
				-105
			]
		],
		[
			[
				22715,
				51062
			],
			[
				-83,
				-118
			],
			[
				-98,
				-249
			],
			[
				-32,
				-26
			],
			[
				17,
				-66
			],
			[
				-46,
				-125
			],
			[
				-75,
				21
			],
			[
				0,
				48
			],
			[
				61,
				78
			],
			[
				-17,
				44
			],
			[
				-14,
				-2
			],
			[
				-9,
				-26
			],
			[
				-83,
				-77
			],
			[
				-20,
				4
			],
			[
				-26,
				126
			],
			[
				199,
				174
			],
			[
				-24,
				-120
			],
			[
				127,
				226
			],
			[
				-53,
				-44
			],
			[
				-25,
				-9
			],
			[
				8,
				45
			],
			[
				119,
				140
			],
			[
				53,
				-5
			],
			[
				21,
				-39
			]
		],
		[
			[
				22859,
				50798
			],
			[
				-50,
				-40
			],
			[
				-40,
				1
			],
			[
				-9,
				36
			],
			[
				5,
				6
			],
			[
				6,
				8
			],
			[
				32,
				25
			],
			[
				23,
				15
			],
			[
				71,
				34
			],
			[
				8,
				-28
			],
			[
				-46,
				-57
			]
		],
		[
			[
				22213,
				50477
			],
			[
				-36,
				-40
			],
			[
				-27,
				14
			],
			[
				-7,
				7
			],
			[
				-8,
				25
			],
			[
				12,
				44
			],
			[
				17,
				44
			],
			[
				32,
				19
			],
			[
				26,
				-14
			],
			[
				22,
				-16
			],
			[
				8,
				-20
			],
			[
				-39,
				-63
			]
		],
		[
			[
				22283,
				50877
			],
			[
				-43,
				-5
			],
			[
				19,
				19
			],
			[
				51,
				50
			],
			[
				22,
				5
			],
			[
				15,
				-5
			],
			[
				11,
				-21
			],
			[
				-7,
				-19
			],
			[
				-18,
				-7
			],
			[
				-50,
				-17
			]
		],
		[
			[
				23436,
				52584
			],
			[
				-78,
				-89
			],
			[
				-108,
				-210
			],
			[
				-78,
				-31
			],
			[
				-74,
				19
			],
			[
				-13,
				32
			],
			[
				0,
				42
			],
			[
				76,
				102
			],
			[
				67,
				76
			],
			[
				42,
				-3
			],
			[
				69,
				47
			],
			[
				56,
				50
			],
			[
				-30,
				11
			],
			[
				21,
				44
			],
			[
				142,
				111
			],
			[
				12,
				-24
			],
			[
				3,
				-8
			],
			[
				-107,
				-169
			]
		],
		[
			[
				22319,
				48265
			],
			[
				0,
				0
			],
			[
				4,
				0
			],
			[
				96,
				-4
			],
			[
				107,
				-85
			],
			[
				-50,
				-55
			],
			[
				81,
				27
			],
			[
				20,
				7
			],
			[
				90,
				-12
			],
			[
				2,
				0
			],
			[
				26,
				-31
			],
			[
				25,
				-29
			],
			[
				40,
				-123
			],
			[
				-27,
				-118
			],
			[
				0,
				0
			]
		],
		[
			[
				22022,
				48323
			],
			[
				-2,
				11
			],
			[
				-71,
				-26
			],
			[
				-10,
				-9
			],
			[
				0,
				0
			]
		],
		[
			[
				22008,
				48856
			],
			[
				0,
				0
			],
			[
				53,
				38
			],
			[
				66,
				47
			],
			[
				18,
				56
			],
			[
				86,
				-39
			],
			[
				13,
				-30
			],
			[
				38,
				-84
			],
			[
				-91,
				-243
			],
			[
				-46,
				19
			],
			[
				-121,
				-91
			],
			[
				137,
				34
			],
			[
				20,
				-23
			],
			[
				-5,
				-37
			],
			[
				-48,
				-51
			],
			[
				20,
				-30
			],
			[
				81,
				64
			],
			[
				64,
				-64
			],
			[
				10,
				-62
			],
			[
				73,
				17
			],
			[
				9,
				68
			],
			[
				-44,
				123
			],
			[
				89,
				180
			],
			[
				22,
				-53
			],
			[
				-1,
				-69
			],
			[
				37,
				-22
			],
			[
				105,
				58
			],
			[
				-73,
				39
			],
			[
				-14,
				72
			],
			[
				28,
				103
			],
			[
				-24,
				188
			],
			[
				-2,
				16
			],
			[
				3,
				5
			],
			[
				15,
				32
			],
			[
				120,
				42
			],
			[
				5,
				13
			],
			[
				18,
				43
			],
			[
				115,
				72
			],
			[
				83,
				3
			],
			[
				37,
				-83
			],
			[
				27,
				-12
			],
			[
				38,
				-44
			],
			[
				7,
				-8
			],
			[
				5,
				-24
			],
			[
				27,
				-122
			],
			[
				63,
				-20
			],
			[
				3,
				-55
			],
			[
				8,
				-29
			],
			[
				-74,
				-117
			],
			[
				-116,
				-187
			],
			[
				195,
				55
			],
			[
				102,
				-40
			],
			[
				-17,
				-92
			],
			[
				-81,
				-89
			],
			[
				-199,
				-142
			],
			[
				-68,
				-25
			],
			[
				-126,
				-48
			],
			[
				-21,
				23
			],
			[
				-52,
				-13
			],
			[
				-68,
				-16
			],
			[
				-102,
				118
			],
			[
				-144,
				3
			],
			[
				-203,
				5
			],
			[
				-6,
				-5
			],
			[
				0,
				0
			]
		],
		[
			[
				23243,
				49032
			],
			[
				-26,
				-18
			],
			[
				-16,
				4
			],
			[
				-15,
				3
			],
			[
				-43,
				87
			],
			[
				-6,
				33
			],
			[
				7,
				17
			],
			[
				1,
				0
			],
			[
				6,
				15
			],
			[
				41,
				19
			],
			[
				10,
				3
			],
			[
				11,
				5
			],
			[
				16,
				3
			],
			[
				49,
				-34
			],
			[
				12,
				-8
			],
			[
				-4,
				-44
			],
			[
				-4,
				-41
			],
			[
				-39,
				-44
			]
		],
		[
			[
				23237,
				48757
			],
			[
				230,
				-53
			],
			[
				36,
				32
			],
			[
				60,
				-24
			],
			[
				-184,
				-110
			],
			[
				-127,
				75
			],
			[
				-28,
				17
			],
			[
				-109,
				63
			],
			[
				75,
				64
			],
			[
				47,
				-64
			]
		],
		[
			[
				23168,
				49450
			],
			[
				-22,
				-4
			],
			[
				-11,
				2
			],
			[
				-3,
				17
			],
			[
				0,
				14
			],
			[
				25,
				25
			],
			[
				22,
				7
			],
			[
				67,
				11
			],
			[
				43,
				0
			],
			[
				8,
				-1
			],
			[
				-10,
				-10
			],
			[
				-15,
				-11
			],
			[
				-35,
				-22
			],
			[
				-69,
				-28
			]
		],
		[
			[
				15649,
				7247
			],
			[
				-3,
				-4
			],
			[
				0,
				0
			]
		],
		[
			[
				15583,
				7233
			],
			[
				-19,
				11
			],
			[
				-20,
				107
			],
			[
				-8,
				93
			],
			[
				23,
				138
			],
			[
				6,
				32
			],
			[
				-46,
				0
			],
			[
				0,
				0
			],
			[
				-19,
				-119
			],
			[
				5,
				-49
			],
			[
				-21,
				-38
			],
			[
				-16,
				-51
			],
			[
				14,
				-53
			],
			[
				-14,
				-37
			],
			[
				-21,
				26
			],
			[
				-29,
				34
			],
			[
				4,
				39
			],
			[
				-60,
				128
			],
			[
				-28,
				-18
			],
			[
				1,
				-39
			],
			[
				-43,
				33
			],
			[
				-3,
				117
			],
			[
				-11,
				26
			],
			[
				25,
				94
			],
			[
				-36,
				39
			],
			[
				-11,
				-13
			],
			[
				-11,
				-13
			],
			[
				-3,
				-104
			],
			[
				-6,
				-99
			],
			[
				-21,
				-11
			],
			[
				-1,
				-39
			],
			[
				26,
				-42
			],
			[
				19,
				-64
			],
			[
				-21,
				-21
			],
			[
				-6,
				-6
			],
			[
				-6,
				2
			],
			[
				-74,
				25
			],
			[
				-1,
				0
			],
			[
				-37,
				22
			],
			[
				-42,
				174
			],
			[
				20,
				132
			],
			[
				-34,
				63
			],
			[
				-59,
				39
			],
			[
				-26,
				17
			],
			[
				0,
				0
			]
		],
		[
			[
				14973,
				7808
			],
			[
				-7,
				5
			],
			[
				-12,
				7
			],
			[
				-52,
				13
			],
			[
				9,
				-53
			],
			[
				-168,
				106
			],
			[
				-37,
				-4
			],
			[
				-5,
				0
			],
			[
				-7,
				-7
			],
			[
				-25,
				-23
			],
			[
				23,
				-27
			],
			[
				12,
				2
			]
		],
		[
			[
				14704,
				7827
			],
			[
				0,
				0
			],
			[
				26,
				4
			],
			[
				82,
				-38
			],
			[
				12,
				-5
			],
			[
				-7,
				-64
			],
			[
				68,
				-28
			],
			[
				7,
				-3
			],
			[
				98,
				-113
			],
			[
				32,
				-36
			],
			[
				0,
				-1
			],
			[
				9,
				-129
			],
			[
				26,
				-18
			],
			[
				16,
				-11
			],
			[
				17,
				-35
			],
			[
				-19,
				-13
			],
			[
				0,
				0
			],
			[
				1,
				-3
			],
			[
				8,
				-22
			],
			[
				4,
				-9
			],
			[
				5,
				1
			],
			[
				68,
				23
			],
			[
				10,
				4
			],
			[
				54,
				-23
			],
			[
				17,
				-7
			],
			[
				111,
				-121
			],
			[
				34,
				-113
			],
			[
				10,
				-147
			],
			[
				-1,
				2
			],
			[
				-51,
				36
			],
			[
				0,
				1
			],
			[
				-35,
				86
			],
			[
				-59,
				-37
			],
			[
				35,
				-67
			],
			[
				-18,
				-42
			],
			[
				-71,
				23
			],
			[
				-31,
				40
			],
			[
				-60,
				-46
			],
			[
				60,
				-44
			],
			[
				39,
				-12
			],
			[
				47,
				-5
			],
			[
				4,
				-53
			],
			[
				-37,
				-37
			],
			[
				-37,
				41
			],
			[
				-46,
				-36
			],
			[
				-15,
				6
			],
			[
				-8,
				30
			],
			[
				-23,
				-2
			],
			[
				-4,
				-17
			],
			[
				9,
				-54
			],
			[
				-76,
				-42
			],
			[
				22,
				-61
			],
			[
				-28,
				-51
			],
			[
				-7,
				10
			],
			[
				-27,
				66
			],
			[
				-64,
				-35
			],
			[
				19,
				-61
			],
			[
				23,
				15
			],
			[
				21,
				-3
			],
			[
				10,
				-15
			],
			[
				-6,
				-23
			],
			[
				-46,
				-35
			],
			[
				-49,
				-17
			],
			[
				-90,
				56
			],
			[
				-3,
				-35
			],
			[
				-71,
				1
			],
			[
				0,
				0
			]
		],
		[
			[
				14719,
				6503
			],
			[
				-28,
				1
			],
			[
				-30,
				18
			]
		],
		[
			[
				14661,
				6522
			],
			[
				0,
				0
			],
			[
				-80,
				47
			],
			[
				-40,
				9
			],
			[
				-2,
				-2
			],
			[
				0,
				0
			]
		],
		[
			[
				14539,
				6576
			],
			[
				-21,
				-18
			],
			[
				20,
				-25
			],
			[
				102,
				-39
			],
			[
				26,
				-26
			],
			[
				-6,
				-1
			],
			[
				-47,
				-11
			],
			[
				-30,
				-51
			],
			[
				-34,
				-81
			],
			[
				-22,
				13
			],
			[
				-28,
				-23
			],
			[
				39,
				-33
			],
			[
				-17,
				-65
			],
			[
				-16,
				3
			],
			[
				-27,
				72
			],
			[
				-31,
				64
			],
			[
				-42,
				0
			],
			[
				-91,
				-28
			],
			[
				-47,
				-26
			],
			[
				-28,
				-53
			],
			[
				9,
				-65
			],
			[
				54,
				52
			],
			[
				2,
				43
			],
			[
				13,
				14
			],
			[
				48,
				31
			],
			[
				32,
				-1
			],
			[
				11,
				-14
			],
			[
				7,
				-98
			],
			[
				-4,
				-14
			],
			[
				-23,
				-90
			],
			[
				-3,
				-12
			],
			[
				-26,
				-26
			],
			[
				-81,
				-7
			],
			[
				-63,
				-5
			],
			[
				-16,
				5
			],
			[
				-36,
				13
			],
			[
				-64,
				42
			],
			[
				-17,
				86
			],
			[
				-31,
				38
			],
			[
				-19,
				-28
			],
			[
				30,
				-45
			],
			[
				-22,
				-114
			],
			[
				-20,
				-60
			],
			[
				26,
				-37
			],
			[
				-78,
				-98
			],
			[
				45,
				29
			],
			[
				45,
				16
			],
			[
				16,
				-7
			],
			[
				-22,
				-55
			],
			[
				21,
				-39
			],
			[
				10,
				49
			],
			[
				41,
				41
			],
			[
				138,
				66
			],
			[
				106,
				20
			],
			[
				101,
				-37
			],
			[
				34,
				-32
			],
			[
				35,
				-53
			],
			[
				3,
				-37
			],
			[
				-89,
				-50
			],
			[
				-134,
				-39
			],
			[
				39,
				-44
			],
			[
				-95,
				-57
			],
			[
				-10,
				-6
			],
			[
				5,
				-7
			],
			[
				24,
				-33
			],
			[
				161,
				131
			],
			[
				0,
				-72
			],
			[
				-147,
				-107
			],
			[
				7,
				-18
			],
			[
				-70,
				-110
			],
			[
				0,
				0
			]
		],
		[
			[
				15488,
				7125
			],
			[
				-2,
				-17
			],
			[
				-5,
				-25
			],
			[
				-19,
				-7
			],
			[
				-2,
				0
			],
			[
				-4,
				9
			],
			[
				-14,
				34
			],
			[
				4,
				43
			],
			[
				8,
				23
			],
			[
				3,
				7
			],
			[
				13,
				13
			],
			[
				4,
				-1
			],
			[
				14,
				-10
			],
			[
				3,
				-5
			]
		],
		[
			[
				15387,
				7309
			],
			[
				-11,
				-23
			],
			[
				-39,
				16
			],
			[
				-11,
				17
			],
			[
				-19,
				29
			],
			[
				-4,
				5
			],
			[
				1,
				5
			],
			[
				6,
				46
			],
			[
				52,
				-34
			],
			[
				25,
				-61
			]
		],
		[
			[
				15421,
				7163
			],
			[
				-12,
				-13
			],
			[
				-17,
				13
			],
			[
				-19,
				51
			],
			[
				-8,
				19
			],
			[
				2,
				27
			],
			[
				14,
				2
			],
			[
				10,
				-5
			],
			[
				28,
				-24
			],
			[
				14,
				-18
			],
			[
				0,
				-18
			],
			[
				-12,
				-34
			]
		],
		[
			[
				15638,
				7062
			],
			[
				-13,
				-21
			],
			[
				-24,
				34
			],
			[
				-17,
				59
			],
			[
				-22,
				10
			],
			[
				-19,
				47
			],
			[
				58,
				6
			],
			[
				33,
				-48
			],
			[
				4,
				-87
			]
		],
		[
			[
				14592,
				6254
			],
			[
				-13,
				-8
			],
			[
				9,
				64
			],
			[
				9,
				27
			],
			[
				16,
				47
			],
			[
				32,
				32
			],
			[
				74,
				-15
			],
			[
				42,
				2
			],
			[
				23,
				1
			],
			[
				8,
				-33
			],
			[
				-56,
				-18
			],
			[
				-70,
				-38
			],
			[
				-37,
				-38
			],
			[
				-37,
				-23
			]
		],
		[
			[
				14730,
				6236
			],
			[
				-21,
				-8
			],
			[
				-32,
				0
			],
			[
				-31,
				-19
			],
			[
				1,
				-37
			],
			[
				4,
				-37
			],
			[
				-39,
				3
			],
			[
				-15,
				5
			],
			[
				-5,
				5
			],
			[
				-1,
				2
			],
			[
				-4,
				17
			],
			[
				3,
				20
			],
			[
				14,
				33
			],
			[
				11,
				16
			],
			[
				13,
				11
			],
			[
				54,
				36
			],
			[
				88,
				53
			],
			[
				27,
				12
			],
			[
				2,
				-53
			],
			[
				-29,
				-31
			],
			[
				-40,
				-28
			]
		],
		[
			[
				14854,
				6161
			],
			[
				-131,
				-32
			],
			[
				4,
				30
			],
			[
				54,
				55
			],
			[
				56,
				41
			],
			[
				13,
				-64
			],
			[
				4,
				-30
			]
		],
		[
			[
				14477,
				6077
			],
			[
				-17,
				-4
			],
			[
				-3,
				30
			],
			[
				0,
				10
			],
			[
				4,
				69
			],
			[
				38,
				10
			],
			[
				25,
				-8
			],
			[
				23,
				-4
			],
			[
				13,
				-58
			],
			[
				-19,
				-30
			],
			[
				-64,
				-15
			]
		],
		[
			[
				14853,
				5920
			],
			[
				-48,
				-53
			],
			[
				-27,
				15
			],
			[
				62,
				80
			],
			[
				12,
				56
			],
			[
				13,
				18
			],
			[
				59,
				81
			],
			[
				37,
				71
			],
			[
				20,
				8
			],
			[
				-1,
				-55
			],
			[
				-28,
				-58
			],
			[
				-99,
				-163
			]
		],
		[
			[
				14686,
				6064
			],
			[
				2,
				-26
			],
			[
				79,
				34
			],
			[
				-10,
				-55
			],
			[
				-34,
				-58
			],
			[
				-49,
				-22
			],
			[
				-34,
				3
			],
			[
				37,
				47
			],
			[
				-15,
				23
			],
			[
				-52,
				-27
			],
			[
				-45,
				15
			],
			[
				-20,
				-15
			],
			[
				61,
				-50
			],
			[
				-24,
				-26
			],
			[
				-15,
				6
			],
			[
				-44,
				18
			],
			[
				-81,
				103
			],
			[
				29,
				10
			],
			[
				23,
				2
			],
			[
				13,
				1
			],
			[
				58,
				1
			],
			[
				8,
				32
			],
			[
				38,
				19
			],
			[
				66,
				17
			],
			[
				30,
				-2
			],
			[
				11,
				-33
			],
			[
				-32,
				-17
			]
		],
		[
			[
				17135,
				8135
			],
			[
				-20,
				-77
			],
			[
				-43,
				-69
			],
			[
				42,
				-3
			],
			[
				21,
				-37
			],
			[
				1,
				-20
			],
			[
				2,
				-57
			],
			[
				-8,
				-3
			],
			[
				-42,
				-21
			],
			[
				-5,
				58
			],
			[
				-49,
				34
			],
			[
				-23,
				17
			],
			[
				-22,
				-11
			],
			[
				18,
				-75
			],
			[
				21,
				-30
			],
			[
				7,
				-42
			],
			[
				3,
				-20
			],
			[
				40,
				-117
			],
			[
				12,
				-91
			],
			[
				-24,
				-20
			],
			[
				8,
				-63
			],
			[
				22,
				-18
			],
			[
				-12,
				-93
			],
			[
				-29,
				-30
			],
			[
				-14,
				54
			],
			[
				12,
				11
			],
			[
				3,
				30
			],
			[
				-29,
				58
			],
			[
				-5,
				142
			],
			[
				-19,
				-6
			],
			[
				-8,
				101
			],
			[
				-24,
				50
			],
			[
				-22,
				47
			],
			[
				-10,
				-41
			],
			[
				-3,
				-33
			],
			[
				-1,
				-21
			],
			[
				36,
				-85
			],
			[
				0,
				-66
			],
			[
				24,
				-156
			],
			[
				-28,
				9
			],
			[
				29,
				-116
			],
			[
				0,
				-1
			],
			[
				0,
				0
			],
			[
				-35,
				-52
			],
			[
				-27,
				155
			],
			[
				-20,
				33
			],
			[
				20,
				58
			],
			[
				-22,
				142
			],
			[
				-25,
				-14
			],
			[
				-12,
				-7
			],
			[
				-15,
				74
			],
			[
				-10,
				104
			],
			[
				19,
				38
			],
			[
				-52,
				-2
			],
			[
				-3,
				-34
			],
			[
				13,
				-100
			],
			[
				2,
				-97
			],
			[
				-28,
				-124
			],
			[
				-7,
				1
			],
			[
				-23,
				4
			],
			[
				8,
				-17
			],
			[
				0,
				0
			]
		],
		[
			[
				16779,
				7486
			],
			[
				20,
				-42
			],
			[
				17,
				17
			],
			[
				12,
				-11
			],
			[
				1,
				-1
			],
			[
				21,
				-50
			],
			[
				-3,
				-45
			],
			[
				-1,
				-9
			],
			[
				-12,
				-96
			],
			[
				-21,
				-46
			],
			[
				-25,
				-34
			],
			[
				-33,
				-39
			],
			[
				-46,
				-20
			],
			[
				-33,
				-20
			],
			[
				-67,
				-60
			],
			[
				-37,
				33
			],
			[
				-32,
				-39
			],
			[
				-5,
				137
			],
			[
				107,
				63
			],
			[
				36,
				37
			],
			[
				-5,
				15
			],
			[
				-22,
				79
			],
			[
				-1,
				2
			],
			[
				-25,
				-8
			],
			[
				-5,
				-10
			],
			[
				-28,
				-49
			],
			[
				-86,
				-66
			],
			[
				-23,
				-61
			],
			[
				-23,
				-7
			],
			[
				-27,
				-8
			],
			[
				-26,
				-24
			],
			[
				-34,
				-31
			],
			[
				-17,
				12
			],
			[
				-9,
				26
			],
			[
				0,
				88
			],
			[
				-34,
				36
			],
			[
				-32,
				35
			],
			[
				-70,
				41
			],
			[
				0,
				0
			],
			[
				-17,
				-22
			],
			[
				6,
				-35
			],
			[
				22,
				-23
			],
			[
				4,
				-36
			],
			[
				-20,
				-26
			],
			[
				3,
				-21
			],
			[
				17,
				-37
			],
			[
				6,
				-16
			],
			[
				24,
				-14
			],
			[
				0,
				-76
			],
			[
				25,
				-25
			],
			[
				-13,
				-53
			],
			[
				-2,
				-79
			],
			[
				-6,
				-35
			],
			[
				-40,
				-3
			],
			[
				-16,
				8
			],
			[
				-6,
				15
			],
			[
				-24,
				-12
			],
			[
				-5,
				-17
			],
			[
				-11,
				-41
			],
			[
				-51,
				50
			],
			[
				-18,
				47
			],
			[
				-25,
				4
			],
			[
				-22,
				-41
			],
			[
				19,
				-44
			],
			[
				6,
				-44
			],
			[
				-36,
				-22
			],
			[
				-52,
				2
			],
			[
				-42,
				18
			],
			[
				-9,
				27
			],
			[
				-11,
				34
			],
			[
				-63,
				-23
			],
			[
				13,
				-36
			],
			[
				-62,
				12
			],
			[
				-8,
				28
			],
			[
				-49,
				30
			],
			[
				-11,
				-16
			],
			[
				14,
				-55
			],
			[
				-33,
				-54
			],
			[
				-106,
				90
			],
			[
				-13,
				41
			],
			[
				31,
				-10
			],
			[
				41,
				39
			],
			[
				-7,
				51
			],
			[
				45,
				9
			],
			[
				8,
				41
			],
			[
				-24,
				7
			],
			[
				2,
				84
			],
			[
				-31,
				65
			],
			[
				0,
				153
			],
			[
				-15,
				-23
			],
			[
				0,
				0
			]
		],
		[
			[
				15491,
				7189
			],
			[
				0,
				0
			],
			[
				0,
				-2
			],
			[
				5,
				-17
			],
			[
				-8,
				-45
			],
			[
				0,
				0
			]
		],
		[
			[
				15646,
				7243
			],
			[
				-23,
				-34
			],
			[
				-40,
				24
			],
			[
				0,
				0
			]
		],
		[
			[
				16437,
				7027
			],
			[
				-9,
				-15
			],
			[
				-44,
				27
			],
			[
				36,
				44
			],
			[
				18,
				22
			],
			[
				16,
				-5
			],
			[
				-2,
				-49
			],
			[
				-15,
				-24
			]
		],
		[
			[
				15590,
				6959
			],
			[
				-49,
				-27
			],
			[
				-23,
				47
			],
			[
				9,
				64
			],
			[
				37,
				-12
			],
			[
				29,
				-31
			],
			[
				-3,
				-41
			]
		],
		[
			[
				17329,
				8125
			],
			[
				0,
				0
			],
			[
				1,
				2
			],
			[
				1,
				0
			],
			[
				32,
				-2
			],
			[
				75,
				-64
			],
			[
				30,
				12
			],
			[
				15,
				-20
			],
			[
				5,
				-6
			],
			[
				-1,
				-72
			],
			[
				-42,
				1
			],
			[
				-6,
				4
			],
			[
				-25,
				16
			],
			[
				-22,
				-119
			],
			[
				35,
				-6
			],
			[
				5,
				19
			],
			[
				4,
				16
			],
			[
				14,
				5
			],
			[
				3,
				-7
			],
			[
				8,
				-24
			],
			[
				-5,
				-34
			],
			[
				-50,
				-53
			],
			[
				2,
				-27
			],
			[
				1,
				-23
			],
			[
				-5,
				-97
			],
			[
				-6,
				-46
			],
			[
				12,
				-29
			],
			[
				5,
				-12
			],
			[
				11,
				-98
			],
			[
				-21,
				-40
			],
			[
				-35,
				-57
			],
			[
				-32,
				13
			],
			[
				-9,
				155
			],
			[
				11,
				33
			],
			[
				1,
				4
			],
			[
				22,
				29
			],
			[
				-34,
				51
			],
			[
				-14,
				-2
			],
			[
				-22,
				-3
			],
			[
				-5,
				85
			],
			[
				0,
				1
			],
			[
				1,
				2
			],
			[
				13,
				113
			],
			[
				1,
				5
			],
			[
				-13,
				69
			],
			[
				-13,
				143
			],
			[
				12,
				19
			],
			[
				7,
				8
			]
		],
		[
			[
				17296,
				8089
			],
			[
				0,
				0
			],
			[
				33,
				36
			]
		],
		[
			[
				17443,
				8106
			],
			[
				-6,
				0
			],
			[
				-2,
				5
			]
		],
		[
			[
				17435,
				8111
			],
			[
				0,
				0
			],
			[
				-16,
				30
			],
			[
				-81,
				29
			],
			[
				-12,
				31
			],
			[
				-20,
				-22
			],
			[
				-4,
				-5
			],
			[
				-4,
				-59
			],
			[
				-29,
				0
			],
			[
				-19,
				42
			],
			[
				-14,
				55
			],
			[
				-3,
				51
			],
			[
				25,
				93
			],
			[
				-10,
				21
			],
			[
				2,
				25
			],
			[
				0,
				0
			]
		],
		[
			[
				17250,
				8402
			],
			[
				1,
				14
			],
			[
				8,
				19
			]
		],
		[
			[
				17259,
				8435
			],
			[
				0,
				0
			],
			[
				52,
				126
			],
			[
				0,
				3
			],
			[
				-1,
				229
			],
			[
				24,
				8
			],
			[
				21,
				-17
			]
		],
		[
			[
				17355,
				8784
			],
			[
				0,
				0
			],
			[
				44,
				-35
			],
			[
				17,
				-13
			]
		],
		[
			[
				17416,
				8736
			],
			[
				0,
				0
			],
			[
				13,
				-10
			],
			[
				41,
				-196
			],
			[
				1,
				-4
			],
			[
				1,
				-1
			],
			[
				54,
				-44
			],
			[
				-12,
				-136
			],
			[
				33,
				-48
			],
			[
				9,
				-12
			],
			[
				-39,
				-74
			],
			[
				-19,
				-35
			],
			[
				-32,
				-72
			],
			[
				-23,
				2
			],
			[
				0,
				0
			]
		],
		[
			[
				17430,
				7656
			],
			[
				2,
				32
			],
			[
				2,
				41
			],
			[
				18,
				56
			],
			[
				6,
				-86
			],
			[
				6,
				-89
			],
			[
				14,
				55
			],
			[
				25,
				-27
			],
			[
				14,
				-143
			],
			[
				-10,
				-78
			],
			[
				-49,
				1
			],
			[
				-29,
				218
			],
			[
				1,
				20
			]
		],
		[
			[
				17748,
				7454
			],
			[
				-18,
				-60
			],
			[
				-26,
				50
			],
			[
				3,
				25
			],
			[
				15,
				33
			],
			[
				26,
				-48
			]
		],
		[
			[
				17529,
				8629
			],
			[
				0,
				0
			],
			[
				15,
				-12
			],
			[
				11,
				-21
			],
			[
				1,
				-10
			],
			[
				0,
				0
			]
		],
		[
			[
				17556,
				8586
			],
			[
				1,
				-15
			],
			[
				2,
				-25
			],
			[
				-1,
				-6
			],
			[
				-11,
				-34
			],
			[
				-14,
				1
			],
			[
				-14,
				14
			],
			[
				-19,
				26
			],
			[
				-17,
				28
			],
			[
				-4,
				13
			],
			[
				-6,
				26
			],
			[
				3,
				18
			],
			[
				12,
				17
			],
			[
				12,
				-2
			],
			[
				24,
				-14
			],
			[
				5,
				-4
			]
		],
		[
			[
				16922,
				10646
			],
			[
				0,
				0
			],
			[
				19,
				-42
			],
			[
				1,
				-1
			],
			[
				1,
				0
			],
			[
				15,
				1
			],
			[
				33,
				3
			],
			[
				14,
				-46
			],
			[
				8,
				-23
			],
			[
				3,
				-9
			],
			[
				19,
				-60
			],
			[
				27,
				-87
			],
			[
				44,
				-53
			],
			[
				41,
				-81
			],
			[
				1,
				-4
			],
			[
				4,
				-45
			]
		],
		[
			[
				17152,
				10199
			],
			[
				0,
				0
			],
			[
				0,
				-2
			],
			[
				1,
				-7
			],
			[
				5,
				-1
			],
			[
				24,
				-6
			],
			[
				18,
				71
			],
			[
				3,
				9
			],
			[
				3,
				-8
			],
			[
				20,
				-43
			],
			[
				-2,
				-94
			],
			[
				18,
				-24
			],
			[
				1,
				-1
			],
			[
				21,
				-28
			],
			[
				10,
				-27
			]
		],
		[
			[
				17274,
				10038
			],
			[
				0,
				0
			],
			[
				23,
				-62
			],
			[
				25,
				2
			],
			[
				6,
				52
			],
			[
				37,
				27
			],
			[
				19,
				-35
			],
			[
				1,
				-3
			],
			[
				49,
				-30
			],
			[
				2,
				8
			],
			[
				5,
				21
			],
			[
				9,
				44
			],
			[
				34,
				14
			],
			[
				31,
				-27
			],
			[
				5,
				-33
			],
			[
				-43,
				-10
			],
			[
				7,
				-24
			],
			[
				39,
				-8
			],
			[
				11,
				-66
			],
			[
				27,
				-34
			],
			[
				43,
				-8
			],
			[
				-13,
				39
			],
			[
				11,
				24
			],
			[
				34,
				31
			],
			[
				10,
				-124
			],
			[
				-17,
				-46
			],
			[
				-41,
				-111
			],
			[
				-4,
				-87
			],
			[
				-38,
				-60
			],
			[
				-6,
				-8
			],
			[
				12,
				-83
			],
			[
				8,
				-59
			],
			[
				18,
				-31
			]
		],
		[
			[
				17578,
				9351
			],
			[
				0,
				0
			],
			[
				8,
				-15
			],
			[
				47,
				-82
			],
			[
				5,
				-31
			],
			[
				6,
				-42
			],
			[
				1,
				1
			],
			[
				30,
				22
			],
			[
				34,
				-18
			],
			[
				15,
				-8
			],
			[
				17,
				-39
			],
			[
				0,
				-2
			],
			[
				-1,
				-20
			],
			[
				-2,
				-27
			],
			[
				-3,
				-5
			],
			[
				-18,
				-26
			],
			[
				0,
				-67
			],
			[
				-20,
				-4
			],
			[
				-39,
				-9
			],
			[
				-2,
				-5
			],
			[
				-10,
				-40
			],
			[
				-13,
				-104
			],
			[
				21,
				-44
			],
			[
				6,
				-58
			],
			[
				-26,
				5
			],
			[
				-18,
				59
			],
			[
				-36,
				-39
			],
			[
				7,
				-33
			],
			[
				-15,
				-30
			],
			[
				-18,
				-36
			],
			[
				-55,
				25
			],
			[
				0,
				0
			]
		],
		[
			[
				17499,
				8679
			],
			[
				-1,
				0
			],
			[
				0,
				1
			]
		],
		[
			[
				17498,
				8680
			],
			[
				0,
				0
			],
			[
				7,
				36
			],
			[
				-20,
				53
			],
			[
				-33,
				77
			],
			[
				-1,
				1
			],
			[
				0,
				-1
			],
			[
				-17,
				-82
			],
			[
				-21,
				13
			],
			[
				-10,
				7
			],
			[
				-7,
				4
			],
			[
				-30,
				18
			],
			[
				-19,
				56
			],
			[
				-3,
				8
			],
			[
				-54,
				11
			],
			[
				-3,
				-4
			],
			[
				-5,
				-6
			],
			[
				-5,
				-7
			],
			[
				-2,
				-25
			],
			[
				0,
				-16
			],
			[
				1,
				-56
			],
			[
				0,
				-4
			],
			[
				0,
				0
			]
		],
		[
			[
				17276,
				8763
			],
			[
				0,
				-5
			],
			[
				-10,
				-102
			],
			[
				16,
				-26
			],
			[
				6,
				-40
			],
			[
				-11,
				-35
			],
			[
				-11,
				-34
			],
			[
				-18,
				-2
			],
			[
				-20,
				-87
			],
			[
				-30,
				25
			],
			[
				-14,
				12
			],
			[
				-53,
				-178
			],
			[
				19,
				11
			],
			[
				-1,
				-106
			],
			[
				0,
				-5
			],
			[
				-14,
				-56
			],
			[
				0,
				0
			]
		],
		[
			[
				17889,
				8359
			],
			[
				-5,
				-37
			],
			[
				-20,
				3
			],
			[
				-33,
				63
			],
			[
				-65,
				43
			],
			[
				14,
				43
			],
			[
				60,
				-20
			],
			[
				49,
				-95
			]
		],
		[
			[
				17689,
				8364
			],
			[
				18,
				-47
			],
			[
				-16,
				-40
			],
			[
				-6,
				-3
			],
			[
				-16,
				40
			],
			[
				-24,
				21
			],
			[
				-24,
				-18
			],
			[
				-4,
				42
			],
			[
				5,
				37
			],
			[
				15,
				19
			],
			[
				20,
				1
			],
			[
				11,
				-12
			],
			[
				21,
				-40
			]
		],
		[
			[
				17544,
				8086
			],
			[
				-11,
				-21
			],
			[
				-16,
				22
			],
			[
				-14,
				28
			],
			[
				0,
				1
			],
			[
				8,
				31
			],
			[
				7,
				12
			],
			[
				1,
				3
			],
			[
				17,
				15
			],
			[
				15,
				-12
			],
			[
				1,
				-9
			],
			[
				-3,
				-32
			],
			[
				-5,
				-38
			]
		],
		[
			[
				17240,
				8090
			],
			[
				14,
				-93
			],
			[
				1,
				-50
			],
			[
				-6,
				-11
			],
			[
				-15,
				-26
			],
			[
				-12,
				17
			],
			[
				-4,
				55
			],
			[
				-4,
				18
			],
			[
				-19,
				-17
			],
			[
				0,
				-40
			],
			[
				-15,
				-13
			],
			[
				-15,
				16
			],
			[
				-9,
				9
			],
			[
				3,
				41
			],
			[
				7,
				70
			],
			[
				1,
				4
			],
			[
				9,
				36
			],
			[
				24,
				30
			],
			[
				26,
				-15
			],
			[
				14,
				-31
			]
		],
		[
			[
				17354,
				10302
			],
			[
				-7,
				-49
			],
			[
				-106,
				159
			],
			[
				68,
				-42
			],
			[
				45,
				-68
			]
		],
		[
			[
				17777,
				9524
			],
			[
				-17,
				-34
			],
			[
				-41,
				28
			],
			[
				-28,
				47
			],
			[
				16,
				92
			],
			[
				60,
				-33
			],
			[
				10,
				-100
			]
		],
		[
			[
				15825,
				36438
			],
			[
				0,
				0
			],
			[
				15,
				14
			],
			[
				158,
				97
			],
			[
				36,
				43
			],
			[
				85,
				-14
			],
			[
				27,
				-4
			],
			[
				56,
				11
			],
			[
				57,
				11
			],
			[
				46,
				-16
			],
			[
				9,
				-4
			],
			[
				59,
				-141
			],
			[
				2,
				0
			],
			[
				52,
				3
			],
			[
				0,
				0
			],
			[
				27,
				25
			],
			[
				63,
				-42
			],
			[
				36,
				-11
			],
			[
				46,
				-14
			],
			[
				51,
				-60
			],
			[
				48,
				20
			],
			[
				30,
				12
			],
			[
				49,
				53
			],
			[
				1,
				1
			]
		],
		[
			[
				16778,
				36422
			],
			[
				0,
				0
			],
			[
				26,
				103
			],
			[
				32,
				7
			],
			[
				38,
				0
			],
			[
				-10,
				13
			],
			[
				-1,
				1
			]
		],
		[
			[
				16863,
				36546
			],
			[
				0,
				0
			],
			[
				-17,
				22
			],
			[
				-147,
				13
			],
			[
				-49,
				-23
			],
			[
				-65,
				15
			],
			[
				-65,
				55
			],
			[
				-22,
				-13
			],
			[
				-25,
				11
			],
			[
				-16,
				50
			],
			[
				-57,
				71
			],
			[
				-39,
				-3
			],
			[
				-42,
				99
			],
			[
				25,
				51
			],
			[
				2,
				75
			],
			[
				152,
				145
			],
			[
				74,
				-3
			],
			[
				46,
				81
			],
			[
				7,
				12
			],
			[
				62,
				20
			],
			[
				8,
				56
			],
			[
				62,
				18
			],
			[
				3,
				1
			],
			[
				88,
				29
			],
			[
				139,
				-7
			],
			[
				67,
				20
			],
			[
				138,
				-74
			],
			[
				18,
				-90
			],
			[
				12,
				-12
			],
			[
				61,
				2
			],
			[
				1,
				0
			],
			[
				62,
				44
			],
			[
				43,
				4
			],
			[
				92,
				122
			],
			[
				73,
				-35
			],
			[
				15,
				-90
			],
			[
				37,
				23
			],
			[
				48,
				-61
			],
			[
				84,
				-25
			],
			[
				2,
				0
			],
			[
				95,
				-2
			],
			[
				73,
				53
			]
		],
		[
			[
				17908,
				37200
			],
			[
				0,
				0
			],
			[
				57,
				42
			],
			[
				22,
				-33
			],
			[
				3,
				-5
			],
			[
				10,
				4
			],
			[
				74,
				33
			],
			[
				79,
				-39
			],
			[
				56,
				-7
			],
			[
				84,
				-22
			],
			[
				17,
				-5
			],
			[
				83,
				1
			],
			[
				28,
				0
			],
			[
				49,
				-19
			],
			[
				10,
				-30
			],
			[
				13,
				-38
			],
			[
				12,
				-37
			],
			[
				3,
				-8
			],
			[
				2,
				1
			],
			[
				54,
				20
			],
			[
				22,
				9
			],
			[
				-15,
				112
			],
			[
				77,
				4
			],
			[
				36,
				1
			],
			[
				6,
				1
			],
			[
				5,
				4
			],
			[
				16,
				17
			]
		],
		[
			[
				16872,
				12057
			],
			[
				-2,
				-4
			],
			[
				-21,
				-29
			],
			[
				-12,
				4
			],
			[
				-10,
				3
			],
			[
				-34,
				11
			],
			[
				-80,
				25
			],
			[
				66,
				-56
			],
			[
				1,
				0
			],
			[
				0,
				-1
			],
			[
				26,
				-21
			],
			[
				32,
				-28
			],
			[
				4,
				-1
			],
			[
				32,
				-5
			],
			[
				25,
				-5
			],
			[
				52,
				-56
			],
			[
				1,
				-63
			],
			[
				8,
				-19
			],
			[
				74,
				-78
			],
			[
				60,
				-35
			],
			[
				9,
				-1
			]
		],
		[
			[
				17103,
				11698
			],
			[
				0,
				0
			],
			[
				84,
				-14
			],
			[
				56,
				-49
			],
			[
				31,
				-33
			],
			[
				19,
				-101
			],
			[
				21,
				-16
			],
			[
				16,
				-116
			],
			[
				17,
				-39
			],
			[
				32,
				-73
			],
			[
				-1,
				-16
			],
			[
				-2,
				-72
			],
			[
				0,
				-1
			],
			[
				-1,
				-34
			],
			[
				-11,
				-83
			],
			[
				-6,
				-20
			],
			[
				-9,
				-28
			],
			[
				-27,
				-67
			],
			[
				14,
				-57
			],
			[
				38,
				-23
			],
			[
				7,
				-29
			],
			[
				-33,
				-22
			],
			[
				-23,
				-121
			],
			[
				-3,
				-40
			],
			[
				-6,
				-9
			],
			[
				0,
				0
			]
		],
		[
			[
				17316,
				10635
			],
			[
				-24,
				-36
			],
			[
				-51,
				-11
			],
			[
				-87,
				24
			],
			[
				-86,
				61
			],
			[
				-93,
				91
			],
			[
				-27,
				64
			],
			[
				-9,
				-9
			],
			[
				-26,
				-12
			],
			[
				-27,
				64
			],
			[
				-3,
				7
			],
			[
				-30,
				-7
			],
			[
				-8,
				-27
			],
			[
				35,
				-60
			],
			[
				17,
				-65
			],
			[
				3,
				-27
			],
			[
				22,
				-46
			]
		],
		[
			[
				17222,
				10546
			],
			[
				10,
				-66
			],
			[
				-32,
				0
			],
			[
				-31,
				40
			],
			[
				-15,
				28
			],
			[
				13,
				32
			],
			[
				55,
				-34
			]
		],
		[
			[
				22335,
				35467
			],
			[
				15,
				-36
			],
			[
				45,
				-114
			],
			[
				25,
				-61
			],
			[
				19,
				-47
			],
			[
				25,
				-62
			],
			[
				16,
				-38
			],
			[
				54,
				-133
			],
			[
				29,
				-73
			],
			[
				39,
				-95
			],
			[
				86,
				-217
			],
			[
				15,
				-39
			],
			[
				74,
				-186
			],
			[
				57,
				-143
			],
			[
				0,
				0
			],
			[
				-33,
				-50
			],
			[
				-26,
				-41
			],
			[
				-85,
				-133
			],
			[
				-62,
				-94
			],
			[
				0,
				0
			],
			[
				-8,
				-13
			],
			[
				-38,
				-58
			],
			[
				-113,
				-172
			],
			[
				-54,
				-83
			],
			[
				-14,
				-22
			],
			[
				0,
				0
			],
			[
				5,
				-26
			],
			[
				17,
				-98
			],
			[
				30,
				-168
			],
			[
				20,
				-115
			],
			[
				16,
				-90
			],
			[
				42,
				-236
			],
			[
				56,
				-320
			]
		],
		[
			[
				22587,
				32504
			],
			[
				-59,
				-225
			],
			[
				-15,
				-58
			],
			[
				0,
				0
			],
			[
				-37,
				-142
			],
			[
				-8,
				-28
			],
			[
				-17,
				-66
			],
			[
				-28,
				-107
			],
			[
				-2,
				-9
			],
			[
				-23,
				-87
			],
			[
				-9,
				-37
			],
			[
				-16,
				-59
			],
			[
				-28,
				-107
			],
			[
				38,
				-124
			],
			[
				63,
				-204
			],
			[
				48,
				-155
			],
			[
				108,
				-342
			],
			[
				72,
				-226
			],
			[
				49,
				-160
			],
			[
				15,
				-48
			],
			[
				41,
				-129
			],
			[
				15,
				-48
			],
			[
				61,
				-194
			],
			[
				6,
				-21
			],
			[
				53,
				-168
			],
			[
				1,
				-4
			],
			[
				28,
				-90
			]
		],
		[
			[
				18445,
				12630
			],
			[
				0,
				0
			],
			[
				22,
				25
			],
			[
				16,
				77
			],
			[
				11,
				80
			],
			[
				1,
				74
			],
			[
				-11,
				50
			],
			[
				-23,
				37
			],
			[
				-27,
				43
			],
			[
				-23,
				62
			],
			[
				2,
				93
			],
			[
				-38,
				-43
			],
			[
				-21,
				56
			],
			[
				-65,
				-24
			],
			[
				-52,
				61
			],
			[
				-11,
				14
			],
			[
				2,
				-8
			],
			[
				22,
				-88
			],
			[
				-73,
				-61
			],
			[
				-27,
				67
			],
			[
				-4,
				59
			],
			[
				14,
				35
			],
			[
				3,
				9
			],
			[
				-20,
				-15
			],
			[
				-55,
				-39
			],
			[
				0,
				0
			]
		],
		[
			[
				42414,
				76875
			],
			[
				0,
				0
			],
			[
				5,
				94
			],
			[
				-170,
				143
			],
			[
				-22,
				18
			],
			[
				-4,
				9
			],
			[
				-32,
				65
			],
			[
				79,
				3
			],
			[
				36,
				54
			],
			[
				199,
				6
			],
			[
				25,
				15
			],
			[
				23,
				15
			],
			[
				100,
				-9
			],
			[
				316,
				-28
			],
			[
				-9,
				-49
			],
			[
				-119,
				-60
			],
			[
				276,
				-63
			],
			[
				13,
				-69
			],
			[
				167,
				10
			],
			[
				-95,
				77
			],
			[
				-122,
				196
			],
			[
				-117,
				15
			],
			[
				-97,
				8
			],
			[
				-143,
				13
			],
			[
				-71,
				32
			],
			[
				-457,
				204
			],
			[
				-6,
				2
			],
			[
				-107,
				102
			],
			[
				-1,
				11
			],
			[
				-12,
				68
			],
			[
				-13,
				74
			],
			[
				-148,
				153
			],
			[
				-179,
				105
			],
			[
				-27,
				-46
			],
			[
				-92,
				45
			],
			[
				41,
				139
			],
			[
				55,
				120
			],
			[
				-13,
				37
			],
			[
				-91,
				157
			],
			[
				99,
				39
			],
			[
				57,
				7
			]
		],
		[
			[
				41758,
				78587
			],
			[
				0,
				0
			],
			[
				114,
				14
			],
			[
				85,
				30
			],
			[
				76,
				26
			],
			[
				56,
				55
			],
			[
				153,
				-7
			],
			[
				154,
				35
			],
			[
				31,
				7
			],
			[
				92,
				22
			],
			[
				58,
				-3
			],
			[
				6,
				0
			],
			[
				1,
				1
			],
			[
				47,
				23
			],
			[
				63,
				50
			],
			[
				26,
				47
			],
			[
				8,
				2
			],
			[
				49,
				11
			],
			[
				7,
				-7
			],
			[
				54,
				-52
			],
			[
				36,
				-217
			],
			[
				14,
				-86
			],
			[
				3,
				-16
			],
			[
				-80,
				-64
			],
			[
				-29,
				-20
			],
			[
				60,
				-95
			],
			[
				26,
				19
			],
			[
				79,
				60
			],
			[
				41,
				-187
			]
		],
		[
			[
				42988,
				78235
			],
			[
				0,
				0
			],
			[
				6,
				-29
			],
			[
				20,
				-93
			],
			[
				193,
				-140
			],
			[
				18,
				-13
			],
			[
				44,
				-32
			],
			[
				-28,
				-111
			],
			[
				-18,
				-67
			],
			[
				326,
				-310
			],
			[
				145,
				-42
			],
			[
				35,
				7
			],
			[
				33,
				7
			],
			[
				102,
				20
			],
			[
				295,
				-19
			],
			[
				88,
				-60
			],
			[
				78,
				-172
			],
			[
				-22,
				-61
			],
			[
				-13,
				-33
			],
			[
				-57,
				-39
			],
			[
				-93,
				-64
			],
			[
				-44,
				-69
			],
			[
				-53,
				-79
			],
			[
				-26,
				-38
			],
			[
				-19,
				-14
			],
			[
				-20,
				-14
			],
			[
				1,
				-7
			],
			[
				15,
				-109
			],
			[
				59,
				-54
			],
			[
				81,
				-20
			],
			[
				7,
				2
			],
			[
				72,
				25
			],
			[
				7,
				41
			],
			[
				144,
				37
			],
			[
				229,
				-71
			],
			[
				249,
				-78
			],
			[
				49,
				-16
			],
			[
				5,
				9
			],
			[
				15,
				29
			],
			[
				-41,
				19
			],
			[
				-130,
				63
			],
			[
				-170,
				115
			],
			[
				-53,
				128
			],
			[
				-9,
				167
			],
			[
				24,
				198
			],
			[
				-183,
				316
			],
			[
				3,
				3
			],
			[
				18,
				20
			],
			[
				35,
				39
			],
			[
				-105,
				-14
			],
			[
				-71,
				-10
			],
			[
				-104,
				48
			],
			[
				-131,
				7
			],
			[
				-170,
				-23
			],
			[
				-131,
				-11
			],
			[
				-73,
				-7
			],
			[
				-23,
				25
			],
			[
				-97,
				104
			],
			[
				-42,
				262
			],
			[
				-39,
				30
			],
			[
				-6,
				4
			],
			[
				-33,
				24
			],
			[
				-37,
				5
			],
			[
				-52,
				7
			],
			[
				-106,
				143
			],
			[
				29,
				95
			],
			[
				7,
				10
			],
			[
				45,
				62
			],
			[
				-3,
				45
			],
			[
				0,
				0
			]
		],
		[
			[
				43263,
				78432
			],
			[
				-5,
				62
			],
			[
				35,
				87
			],
			[
				8,
				18
			],
			[
				0,
				2
			],
			[
				6,
				1
			],
			[
				69,
				13
			],
			[
				108,
				134
			],
			[
				30,
				42
			],
			[
				262,
				53
			],
			[
				40,
				-91
			],
			[
				95,
				-76
			],
			[
				86,
				-107
			],
			[
				35,
				43
			],
			[
				-148,
				174
			],
			[
				-63,
				92
			],
			[
				15,
				77
			],
			[
				-46,
				13
			],
			[
				-67,
				-76
			],
			[
				-247,
				-44
			],
			[
				-85,
				-51
			],
			[
				-8,
				-66
			],
			[
				-41,
				-47
			],
			[
				-42,
				-11
			],
			[
				-9,
				-2
			],
			[
				-16,
				16
			],
			[
				-37,
				33
			],
			[
				-69,
				28
			],
			[
				-16,
				92
			],
			[
				-49,
				42
			],
			[
				-34,
				325
			],
			[
				12,
				44
			],
			[
				36,
				95
			],
			[
				107,
				147
			],
			[
				0,
				1
			],
			[
				122,
				118
			],
			[
				131,
				128
			],
			[
				10,
				22
			],
			[
				63,
				113
			],
			[
				6,
				69
			],
			[
				11,
				129
			],
			[
				63,
				49
			],
			[
				26,
				21
			],
			[
				25,
				20
			],
			[
				21,
				-30
			],
			[
				12,
				-16
			],
			[
				51,
				3
			],
			[
				23,
				1
			],
			[
				1,
				0
			],
			[
				11,
				21
			],
			[
				68,
				120
			],
			[
				230,
				104
			],
			[
				44,
				-15
			],
			[
				16,
				-6
			],
			[
				94,
				22
			],
			[
				96,
				-18
			],
			[
				66,
				7
			],
			[
				18,
				2
			],
			[
				33,
				3
			],
			[
				22,
				5
			],
			[
				83,
				56
			],
			[
				58,
				-19
			],
			[
				30,
				16
			],
			[
				118,
				65
			],
			[
				20,
				10
			],
			[
				122,
				27
			],
			[
				3,
				-3
			],
			[
				21,
				-22
			],
			[
				49,
				-2
			],
			[
				56,
				49
			],
			[
				20,
				7
			],
			[
				232,
				77
			],
			[
				112,
				-14
			],
			[
				69,
				-42
			],
			[
				1,
				-70
			],
			[
				-34,
				-101
			],
			[
				8,
				-24
			],
			[
				-64,
				-96
			],
			[
				-34,
				-51
			],
			[
				-40,
				-27
			],
			[
				1,
				-2
			],
			[
				27,
				-38
			],
			[
				43,
				-52
			],
			[
				-10,
				-97
			],
			[
				-79,
				-155
			],
			[
				-29,
				-183
			],
			[
				-36,
				-52
			],
			[
				-7,
				-9
			],
			[
				0,
				-1
			],
			[
				32,
				-55
			],
			[
				106,
				-16
			],
			[
				58,
				-42
			],
			[
				77,
				-47
			],
			[
				-3,
				-56
			],
			[
				-76,
				-102
			],
			[
				-10,
				-55
			],
			[
				26,
				-28
			],
			[
				-80,
				-190
			],
			[
				27,
				-26
			],
			[
				-72,
				-118
			],
			[
				-62,
				-71
			],
			[
				-44,
				-47
			],
			[
				-33,
				-236
			],
			[
				44,
				-91
			],
			[
				1,
				-3
			],
			[
				90,
				-49
			],
			[
				-53,
				-92
			],
			[
				-151,
				-147
			],
			[
				-141,
				-99
			],
			[
				-65,
				-119
			],
			[
				-7,
				-8
			],
			[
				-65,
				-76
			],
			[
				-11,
				-4
			],
			[
				-214,
				-74
			],
			[
				-13,
				-48
			],
			[
				230,
				37
			],
			[
				58,
				56
			],
			[
				4,
				4
			],
			[
				121,
				116
			],
			[
				100,
				94
			],
			[
				14,
				-9
			],
			[
				56,
				-38
			],
			[
				42,
				-46
			],
			[
				7,
				-66
			],
			[
				55,
				71
			],
			[
				-63,
				105
			],
			[
				210,
				298
			],
			[
				38,
				19
			],
			[
				26,
				13
			],
			[
				0,
				78
			],
			[
				-73,
				21
			],
			[
				-4,
				1
			],
			[
				2,
				8
			],
			[
				22,
				102
			],
			[
				74,
				82
			],
			[
				0,
				35
			],
			[
				-48,
				57
			],
			[
				-21,
				92
			],
			[
				102,
				127
			],
			[
				29,
				109
			],
			[
				-2,
				6
			],
			[
				-21,
				57
			],
			[
				-73,
				-6
			],
			[
				24,
				65
			],
			[
				157,
				40
			],
			[
				14,
				-12
			],
			[
				52,
				-44
			],
			[
				100,
				-2
			],
			[
				416,
				-155
			],
			[
				187,
				9
			]
		],
		[
			[
				42688,
				82097
			],
			[
				-75,
				-51
			],
			[
				-30,
				26
			],
			[
				-100,
				-160
			],
			[
				-80,
				-135
			],
			[
				-72,
				17
			],
			[
				-76,
				135
			],
			[
				72,
				113
			],
			[
				100,
				37
			],
			[
				-71,
				35
			],
			[
				-42,
				-35
			],
			[
				-77,
				22
			],
			[
				43,
				249
			],
			[
				4,
				3
			]
		],
		[
			[
				42284,
				82353
			],
			[
				0,
				0
			],
			[
				47,
				38
			],
			[
				66,
				-8
			],
			[
				43,
				18
			],
			[
				-11,
				46
			],
			[
				-48,
				18
			],
			[
				-3,
				105
			],
			[
				-13,
				71
			],
			[
				53,
				51
			],
			[
				41,
				10
			],
			[
				95,
				-81
			],
			[
				87,
				-32
			],
			[
				18,
				-68
			],
			[
				11,
				-110
			],
			[
				-22,
				-97
			],
			[
				29,
				-63
			],
			[
				48,
				10
			],
			[
				9,
				110
			],
			[
				263,
				293
			],
			[
				22,
				-20
			],
			[
				-10,
				-115
			],
			[
				63,
				-3
			],
			[
				136,
				-87
			],
			[
				19,
				-41
			],
			[
				4,
				-10
			],
			[
				-95,
				-55
			],
			[
				-4,
				-49
			],
			[
				-65,
				-70
			],
			[
				-86,
				-43
			],
			[
				-56,
				19
			],
			[
				-118,
				-29
			],
			[
				-59,
				-4
			],
			[
				-39,
				-45
			],
			[
				-21,
				-15
			],
			[
				0,
				0
			]
		],
		[
			[
				44288,
				80659
			],
			[
				-119,
				-86
			],
			[
				-91,
				-20
			],
			[
				-83,
				-54
			],
			[
				-239,
				-55
			],
			[
				-186,
				-19
			],
			[
				-88,
				37
			],
			[
				-100,
				137
			],
			[
				-29,
				40
			],
			[
				-5,
				7
			],
			[
				-1,
				3
			],
			[
				-52,
				125
			],
			[
				-36,
				16
			],
			[
				-188,
				83
			],
			[
				-37,
				49
			],
			[
				32,
				55
			],
			[
				-126,
				15
			],
			[
				-19,
				85
			],
			[
				-113,
				29
			],
			[
				-150,
				88
			],
			[
				-126,
				37
			],
			[
				-79,
				45
			],
			[
				-65,
				70
			],
			[
				13,
				130
			],
			[
				39,
				96
			],
			[
				52,
				52
			],
			[
				163,
				-64
			],
			[
				51,
				-11
			],
			[
				112,
				-95
			],
			[
				74,
				149
			],
			[
				103,
				26
			],
			[
				-3,
				24
			],
			[
				0,
				3
			],
			[
				-172,
				-5
			],
			[
				-129,
				119
			],
			[
				8,
				60
			],
			[
				0,
				0
			]
		],
		[
			[
				42699,
				81830
			],
			[
				18,
				127
			],
			[
				63,
				8
			],
			[
				40,
				23
			],
			[
				-25,
				53
			],
			[
				107,
				40
			],
			[
				190,
				-10
			],
			[
				2,
				-76
			],
			[
				51,
				0
			],
			[
				66,
				129
			],
			[
				52,
				31
			],
			[
				132,
				-81
			],
			[
				10,
				-116
			],
			[
				24,
				-10
			],
			[
				37,
				-17
			],
			[
				12,
				-7
			],
			[
				26,
				-14
			],
			[
				-25,
				81
			],
			[
				-6,
				19
			],
			[
				36,
				8
			],
			[
				29,
				7
			],
			[
				0,
				18
			],
			[
				0,
				57
			],
			[
				0,
				2
			],
			[
				-64,
				38
			],
			[
				-59,
				36
			],
			[
				-26,
				30
			],
			[
				-20,
				23
			],
			[
				-7,
				37
			],
			[
				-14,
				70
			],
			[
				68,
				79
			],
			[
				12,
				-110
			],
			[
				12,
				-8
			],
			[
				22,
				-16
			],
			[
				42,
				31
			],
			[
				24,
				56
			],
			[
				60,
				68
			],
			[
				1,
				2
			],
			[
				104,
				7
			],
			[
				21,
				-32
			],
			[
				40,
				4
			],
			[
				70,
				70
			],
			[
				104,
				7
			],
			[
				36,
				-45
			],
			[
				-96,
				-135
			],
			[
				73,
				-15
			],
			[
				46,
				74
			],
			[
				61,
				23
			],
			[
				65,
				23
			],
			[
				78,
				36
			],
			[
				-3,
				-73
			],
			[
				-37,
				-67
			],
			[
				-24,
				-45
			],
			[
				-1,
				-2
			],
			[
				-13,
				-56
			],
			[
				-9,
				-97
			],
			[
				46,
				-18
			],
			[
				7,
				-3
			],
			[
				47,
				-59
			],
			[
				-3,
				-7
			],
			[
				-21,
				-47
			],
			[
				144,
				-144
			],
			[
				16,
				-17
			],
			[
				17,
				-17
			],
			[
				25,
				2
			],
			[
				78,
				5
			],
			[
				-31,
				93
			],
			[
				2,
				17
			],
			[
				3,
				32
			],
			[
				78,
				201
			],
			[
				6,
				15
			],
			[
				24,
				6
			],
			[
				57,
				14
			],
			[
				122,
				49
			],
			[
				10,
				4
			],
			[
				10,
				-4
			],
			[
				142,
				-65
			],
			[
				5,
				-109
			],
			[
				3,
				-57
			],
			[
				22,
				-130
			],
			[
				-49,
				-106
			],
			[
				46,
				-8
			],
			[
				74,
				61
			],
			[
				-4,
				115
			],
			[
				0,
				9
			],
			[
				9,
				8
			],
			[
				95,
				83
			],
			[
				91,
				-43
			],
			[
				136,
				-142
			],
			[
				-29,
				-133
			],
			[
				-98,
				-56
			],
			[
				-13,
				-18
			],
			[
				-28,
				-40
			],
			[
				-207,
				-24
			],
			[
				-119,
				-41
			],
			[
				-27,
				-9
			],
			[
				-78,
				13
			],
			[
				-8,
				-12
			],
			[
				-19,
				-29
			],
			[
				-1,
				0
			],
			[
				1,
				-1
			],
			[
				29,
				-38
			],
			[
				45,
				-60
			],
			[
				-15,
				-94
			],
			[
				-2,
				-13
			],
			[
				-5,
				-38
			],
			[
				-59,
				-71
			],
			[
				-3,
				-2
			],
			[
				-85,
				-42
			],
			[
				-81,
				-170
			],
			[
				-94,
				-100
			],
			[
				-76,
				-178
			],
			[
				-25,
				-18
			],
			[
				-26,
				-20
			],
			[
				0,
				0
			]
		],
		[
			[
				43357,
				80468
			],
			[
				31,
				-37
			],
			[
				58,
				-105
			],
			[
				-25,
				-68
			],
			[
				-15,
				-17
			],
			[
				-86,
				-113
			],
			[
				-36,
				-59
			],
			[
				-48,
				-32
			],
			[
				-14,
				-9
			],
			[
				-76,
				12
			],
			[
				-26,
				4
			],
			[
				7,
				-42
			],
			[
				11,
				-65
			],
			[
				-92,
				-84
			],
			[
				-81,
				-26
			],
			[
				-29,
				-23
			],
			[
				-84,
				-65
			],
			[
				-38,
				-4
			],
			[
				-75,
				-8
			],
			[
				-87,
				-9
			],
			[
				-34,
				-26
			],
			[
				-31,
				-24
			],
			[
				-22,
				-1
			],
			[
				-44,
				-2
			],
			[
				16,
				-57
			],
			[
				5,
				-15
			],
			[
				-96,
				-200
			],
			[
				-5,
				-11
			],
			[
				145,
				-26
			],
			[
				33,
				49
			],
			[
				75,
				-25
			],
			[
				23,
				-115
			],
			[
				11,
				-53
			],
			[
				55,
				2
			],
			[
				-3,
				-71
			],
			[
				-75,
				13
			],
			[
				-43,
				-140
			],
			[
				-49,
				-54
			],
			[
				-31,
				-32
			],
			[
				-17,
				-20
			],
			[
				-60,
				-9
			],
			[
				-39,
				-6
			],
			[
				-138,
				-21
			],
			[
				-135,
				108
			],
			[
				-33,
				26
			],
			[
				-3,
				3
			],
			[
				-2,
				-3
			],
			[
				-4,
				-4
			],
			[
				0,
				0
			],
			[
				-145,
				-176
			],
			[
				-334,
				-49
			],
			[
				-261,
				-100
			],
			[
				-205,
				2
			],
			[
				-319,
				-74
			],
			[
				-2,
				0
			],
			[
				-55,
				20
			],
			[
				-92,
				30
			],
			[
				-64,
				98
			],
			[
				-56,
				78
			],
			[
				-58,
				51
			],
			[
				0,
				0
			],
			[
				-1,
				0
			],
			[
				-38,
				-48
			],
			[
				-4,
				-5
			],
			[
				-44,
				-10
			],
			[
				-59,
				22
			],
			[
				-55,
				2
			],
			[
				-68,
				74
			],
			[
				1,
				12
			],
			[
				-3,
				100
			],
			[
				37,
				76
			],
			[
				-3,
				37
			],
			[
				0,
				62
			],
			[
				38,
				-3
			],
			[
				56,
				-3
			],
			[
				1,
				85
			],
			[
				15,
				6
			],
			[
				45,
				18
			],
			[
				43,
				-36
			],
			[
				23,
				-21
			],
			[
				33,
				24
			],
			[
				155,
				115
			],
			[
				43,
				-8
			],
			[
				85,
				-70
			],
			[
				29,
				-23
			],
			[
				12,
				23
			],
			[
				14,
				28
			],
			[
				57,
				-28
			],
			[
				99,
				-46
			],
			[
				39,
				-76
			],
			[
				-34,
				-120
			],
			[
				37,
				-14
			],
			[
				82,
				152
			],
			[
				51,
				15
			],
			[
				123,
				83
			],
			[
				105,
				71
			],
			[
				5,
				3
			],
			[
				-19,
				25
			],
			[
				-10,
				14
			],
			[
				-251,
				-128
			],
			[
				-74,
				3
			],
			[
				-29,
				31
			],
			[
				-61,
				65
			],
			[
				-120,
				176
			],
			[
				-1,
				98
			],
			[
				-41,
				87
			],
			[
				-73,
				82
			],
			[
				13,
				67
			],
			[
				494,
				-151
			],
			[
				37,
				39
			],
			[
				95,
				35
			],
			[
				271,
				-5
			],
			[
				157,
				0
			],
			[
				80,
				-42
			],
			[
				155,
				-16
			],
			[
				10,
				28
			],
			[
				16,
				42
			],
			[
				-243,
				70
			],
			[
				-233,
				-13
			],
			[
				-66,
				33
			],
			[
				-198,
				5
			],
			[
				-86,
				-25
			],
			[
				-72,
				29
			],
			[
				11,
				192
			],
			[
				-65,
				180
			],
			[
				3,
				54
			],
			[
				228,
				119
			],
			[
				83,
				-46
			],
			[
				-51,
				-53
			],
			[
				21,
				-32
			],
			[
				160,
				42
			],
			[
				61,
				-21
			],
			[
				16,
				-208
			],
			[
				-10,
				-30
			],
			[
				69,
				-22
			],
			[
				55,
				218
			],
			[
				17,
				23
			],
			[
				64,
				22
			],
			[
				-31,
				98
			],
			[
				127,
				30
			],
			[
				30,
				44
			],
			[
				178,
				5
			],
			[
				35,
				-42
			],
			[
				-37,
				-136
			],
			[
				-19,
				-28
			],
			[
				3,
				-38
			],
			[
				38,
				-27
			],
			[
				-27,
				-24
			],
			[
				-71,
				4
			],
			[
				86,
				-212
			],
			[
				20,
				-148
			],
			[
				-20,
				-60
			],
			[
				13,
				-63
			],
			[
				4,
				-17
			],
			[
				230,
				-37
			],
			[
				66,
				36
			],
			[
				-93,
				20
			],
			[
				-96,
				29
			],
			[
				-1,
				2
			],
			[
				-19,
				62
			],
			[
				69,
				94
			],
			[
				68,
				382
			],
			[
				105,
				29
			],
			[
				-81,
				35
			],
			[
				16,
				31
			],
			[
				117,
				-17
			],
			[
				-22,
				32
			],
			[
				22,
				52
			],
			[
				8,
				17
			],
			[
				-12,
				0
			],
			[
				-139,
				0
			],
			[
				12,
				47
			],
			[
				-117,
				57
			],
			[
				-99,
				83
			],
			[
				-5,
				41
			],
			[
				91,
				-2
			],
			[
				-105,
				68
			],
			[
				-25,
				57
			],
			[
				-16,
				75
			],
			[
				105,
				64
			],
			[
				35,
				71
			],
			[
				56,
				-7
			],
			[
				65,
				-110
			],
			[
				23,
				-39
			],
			[
				6,
				-9
			],
			[
				63,
				26
			],
			[
				-69,
				112
			],
			[
				71,
				39
			],
			[
				78,
				-11
			],
			[
				100,
				-65
			],
			[
				11,
				-40
			],
			[
				12,
				-48
			],
			[
				8,
				-30
			],
			[
				-32,
				-16
			],
			[
				-83,
				-42
			],
			[
				26,
				-52
			],
			[
				123,
				61
			],
			[
				78,
				-39
			],
			[
				33,
				-54
			],
			[
				91,
				11
			],
			[
				42,
				-89
			],
			[
				4,
				-8
			],
			[
				16,
				19
			],
			[
				28,
				33
			],
			[
				35,
				2
			],
			[
				52,
				3
			],
			[
				89,
				-91
			],
			[
				54,
				-71
			],
			[
				10,
				-12
			],
			[
				32,
				-87
			]
		],
		[
			[
				43250,
				79912
			],
			[
				71,
				38
			],
			[
				19,
				-103
			],
			[
				-45,
				-121
			],
			[
				-46,
				-38
			],
			[
				-31,
				-25
			],
			[
				-2,
				-2
			],
			[
				-46,
				-139
			],
			[
				-15,
				-44
			],
			[
				-135,
				-137
			],
			[
				-40,
				64
			],
			[
				-22,
				52
			],
			[
				56,
				166
			],
			[
				-34,
				70
			],
			[
				10,
				57
			],
			[
				0,
				2
			],
			[
				96,
				71
			],
			[
				93,
				4
			],
			[
				42,
				64
			],
			[
				29,
				21
			]
		],
		[
			[
				42742,
				79495
			],
			[
				-67,
				-25
			],
			[
				-77,
				32
			],
			[
				-16,
				62
			],
			[
				-1,
				23
			],
			[
				92,
				-1
			],
			[
				61,
				48
			],
			[
				37,
				-2
			],
			[
				22,
				-4
			],
			[
				-51,
				-133
			]
		],
		[
			[
				42503,
				78791
			],
			[
				-109,
				-19
			],
			[
				-27,
				35
			],
			[
				40,
				29
			],
			[
				86,
				7
			],
			[
				44,
				-22
			],
			[
				-34,
				-30
			]
		],
		[
			[
				40008,
				79307
			],
			[
				52,
				-59
			],
			[
				-4,
				-21
			],
			[
				-26,
				-7
			],
			[
				-55,
				35
			],
			[
				-34,
				6
			],
			[
				-21,
				24
			],
			[
				5,
				23
			],
			[
				20,
				-9
			],
			[
				14,
				7
			],
			[
				13,
				25
			],
			[
				35,
				-2
			],
			[
				1,
				-22
			]
		],
		[
			[
				40349,
				79373
			],
			[
				7,
				-9
			],
			[
				15,
				7
			],
			[
				10,
				11
			],
			[
				24,
				-24
			],
			[
				-3,
				-27
			],
			[
				-13,
				-4
			],
			[
				-4,
				-1
			],
			[
				-24,
				2
			],
			[
				-32,
				21
			],
			[
				-8,
				15
			],
			[
				-43,
				12
			],
			[
				-11,
				16
			],
			[
				13,
				18
			],
			[
				37,
				-6
			],
			[
				8,
				-18
			],
			[
				24,
				-13
			]
		],
		[
			[
				40278,
				79440
			],
			[
				-83,
				-72
			],
			[
				-83,
				56
			],
			[
				-22,
				40
			],
			[
				92,
				23
			],
			[
				106,
				-17
			],
			[
				-10,
				-30
			]
		],
		[
			[
				40582,
				79718
			],
			[
				77,
				-56
			],
			[
				71,
				1
			],
			[
				43,
				-32
			],
			[
				10,
				-86
			],
			[
				-120,
				-77
			],
			[
				-113,
				-19
			],
			[
				-90,
				28
			],
			[
				3,
				27
			],
			[
				78,
				-19
			],
			[
				29,
				32
			],
			[
				-52,
				48
			],
			[
				40,
				22
			],
			[
				98,
				-13
			],
			[
				21,
				39
			],
			[
				-185,
				32
			],
			[
				-6,
				31
			],
			[
				96,
				42
			]
		],
		[
			[
				40806,
				79702
			],
			[
				-76,
				-6
			],
			[
				-36,
				57
			],
			[
				-28,
				51
			],
			[
				5,
				40
			],
			[
				26,
				23
			],
			[
				41,
				-8
			],
			[
				12,
				-67
			],
			[
				61,
				-62
			],
			[
				-5,
				-28
			]
		],
		[
			[
				40937,
				80006
			],
			[
				-47,
				2
			],
			[
				-149,
				116
			],
			[
				5,
				67
			],
			[
				185,
				78
			],
			[
				93,
				-236
			],
			[
				-87,
				-27
			]
		],
		[
			[
				40555,
				80040
			],
			[
				-42,
				-3
			],
			[
				-15,
				11
			],
			[
				-91,
				24
			],
			[
				17,
				39
			],
			[
				17,
				26
			],
			[
				51,
				17
			],
			[
				55,
				-10
			],
			[
				21,
				-24
			],
			[
				3,
				-39
			],
			[
				-16,
				-41
			]
		],
		[
			[
				40718,
				80224
			],
			[
				-66,
				-1
			],
			[
				-14,
				39
			],
			[
				-14,
				63
			],
			[
				31,
				38
			],
			[
				101,
				-55
			],
			[
				-38,
				-84
			]
		],
		[
			[
				41858,
				80899
			],
			[
				91,
				-11
			],
			[
				36,
				6
			],
			[
				78,
				-44
			],
			[
				-10,
				-27
			],
			[
				-58,
				-17
			],
			[
				29,
				-47
			],
			[
				33,
				-17
			],
			[
				-8,
				-33
			],
			[
				-62,
				-45
			],
			[
				-117,
				28
			],
			[
				-65,
				-6
			],
			[
				-94,
				-32
			],
			[
				-108,
				7
			],
			[
				-31,
				56
			],
			[
				5,
				56
			],
			[
				62,
				53
			],
			[
				109,
				25
			],
			[
				39,
				34
			],
			[
				-14,
				65
			],
			[
				42,
				-15
			],
			[
				43,
				-36
			]
		],
		[
			[
				41934,
				82050
			],
			[
				-101,
				4
			],
			[
				10,
				187
			],
			[
				103,
				2
			],
			[
				74,
				-77
			],
			[
				-58,
				-34
			],
			[
				-28,
				-82
			]
		],
		[
			[
				43770,
				83634
			],
			[
				1,
				6
			],
			[
				15,
				-7
			],
			[
				60,
				-29
			],
			[
				21,
				25
			],
			[
				16,
				19
			],
			[
				15,
				-21
			],
			[
				124,
				-166
			],
			[
				-24,
				-85
			],
			[
				-90,
				-4
			],
			[
				-8,
				-32
			],
			[
				115,
				-51
			],
			[
				7,
				-128
			],
			[
				46,
				-45
			],
			[
				-114,
				-159
			],
			[
				-7,
				-80
			],
			[
				33,
				-31
			],
			[
				-12,
				-72
			],
			[
				-93,
				-20
			],
			[
				-7,
				-72
			],
			[
				-149,
				-37
			],
			[
				-86,
				-24
			],
			[
				-60,
				37
			],
			[
				-137,
				153
			],
			[
				-153,
				85
			],
			[
				-61,
				3
			],
			[
				-7,
				41
			],
			[
				122,
				41
			],
			[
				91,
				71
			],
			[
				80,
				-18
			],
			[
				21,
				-110
			],
			[
				29,
				-26
			],
			[
				34,
				17
			],
			[
				14,
				79
			],
			[
				-3,
				49
			],
			[
				-55,
				101
			],
			[
				40,
				65
			],
			[
				183,
				4
			],
			[
				4,
				36
			],
			[
				-55,
				39
			],
			[
				-71,
				9
			],
			[
				-69,
				-12
			],
			[
				-15,
				46
			],
			[
				84,
				34
			],
			[
				-119,
				110
			],
			[
				11,
				48
			],
			[
				138,
				24
			],
			[
				70,
				-22
			],
			[
				21,
				109
			]
		],
		[
			[
				44832,
				83576
			],
			[
				9,
				34
			],
			[
				66,
				-20
			],
			[
				10,
				-19
			],
			[
				20,
				-38
			],
			[
				79,
				-22
			],
			[
				-26,
				56
			],
			[
				-29,
				63
			],
			[
				77,
				180
			],
			[
				144,
				21
			],
			[
				36,
				-33
			],
			[
				58,
				-144
			],
			[
				11,
				-104
			],
			[
				2,
				-26
			],
			[
				-4,
				-66
			],
			[
				14,
				-60
			],
			[
				42,
				30
			],
			[
				7,
				40
			],
			[
				30,
				3
			],
			[
				85,
				-30
			],
			[
				79,
				-164
			],
			[
				11,
				-55
			],
			[
				-18,
				-97
			],
			[
				12,
				-117
			],
			[
				113,
				-68
			],
			[
				35,
				38
			],
			[
				-1,
				52
			],
			[
				55,
				40
			],
			[
				13,
				77
			],
			[
				9,
				98
			],
			[
				18,
				74
			],
			[
				81,
				-78
			],
			[
				148,
				-53
			],
			[
				49,
				-69
			],
			[
				-9,
				-52
			],
			[
				-85,
				10
			],
			[
				-24,
				-94
			],
			[
				82,
				-12
			],
			[
				140,
				-230
			],
			[
				329,
				-68
			],
			[
				27,
				-51
			],
			[
				85,
				-17
			],
			[
				41,
				9
			],
			[
				26,
				-62
			],
			[
				-130,
				-63
			],
			[
				-253,
				-45
			],
			[
				-15,
				-32
			],
			[
				36,
				-33
			],
			[
				-54,
				-110
			],
			[
				-76,
				-36
			],
			[
				-112,
				-7
			],
			[
				-52,
				-21
			],
			[
				-81,
				-4
			],
			[
				-90,
				52
			],
			[
				-2,
				1
			],
			[
				-170,
				-15
			],
			[
				-145,
				18
			],
			[
				-75,
				32
			],
			[
				-46,
				60
			],
			[
				2,
				82
			],
			[
				-24,
				72
			],
			[
				-43,
				9
			],
			[
				-1,
				69
			],
			[
				71,
				-4
			],
			[
				15,
				31
			],
			[
				-54,
				171
			],
			[
				-42,
				3
			],
			[
				-86,
				88
			],
			[
				-1,
				51
			],
			[
				43,
				5
			],
			[
				12,
				39
			],
			[
				-242,
				317
			],
			[
				-210,
				60
			],
			[
				-59,
				108
			],
			[
				31,
				107
			],
			[
				6,
				19
			]
		],
		[
			[
				45423,
				83542
			],
			[
				0,
				29
			],
			[
				77,
				94
			],
			[
				82,
				2
			],
			[
				35,
				-34
			],
			[
				7,
				-103
			],
			[
				1,
				-10
			],
			[
				-46,
				-90
			],
			[
				-52,
				-20
			],
			[
				-30,
				61
			],
			[
				-54,
				24
			],
			[
				-20,
				22
			],
			[
				0,
				25
			]
		],
		[
			[
				46894,
				83450
			],
			[
				-18,
				299
			],
			[
				-90,
				137
			],
			[
				8,
				94
			],
			[
				73,
				26
			],
			[
				79,
				-89
			],
			[
				86,
				-165
			],
			[
				89,
				-63
			],
			[
				68,
				-18
			],
			[
				-40,
				-93
			],
			[
				-113,
				-98
			],
			[
				-21,
				-38
			],
			[
				-50,
				-90
			],
			[
				-28,
				-9
			],
			[
				-28,
				36
			],
			[
				-14,
				52
			],
			[
				-1,
				19
			]
		],
		[
			[
				45488,
				81769
			],
			[
				20,
				52
			],
			[
				112,
				103
			],
			[
				183,
				-49
			],
			[
				114,
				-133
			],
			[
				23,
				-49
			],
			[
				-191,
				-211
			],
			[
				-43,
				-25
			],
			[
				-67,
				-97
			],
			[
				-11,
				-35
			],
			[
				-30,
				-102
			],
			[
				-12,
				-94
			],
			[
				-30,
				-88
			],
			[
				-9,
				-29
			],
			[
				-8,
				-11
			],
			[
				-14,
				-19
			],
			[
				-53,
				-75
			],
			[
				-17,
				-25
			],
			[
				-124,
				0
			],
			[
				-102,
				27
			],
			[
				-73,
				-36
			],
			[
				-239,
				-31
			],
			[
				-191,
				-41
			],
			[
				-60,
				-27
			],
			[
				-5,
				-3
			],
			[
				-13,
				-3
			],
			[
				-51,
				-14
			],
			[
				-12,
				-3
			],
			[
				-26,
				9
			],
			[
				-53,
				19
			],
			[
				14,
				111
			],
			[
				64,
				23
			],
			[
				67,
				128
			],
			[
				55,
				106
			],
			[
				68,
				58
			],
			[
				87,
				138
			],
			[
				195,
				97
			],
			[
				31,
				-3
			],
			[
				1,
				0
			],
			[
				27,
				-3
			],
			[
				163,
				128
			],
			[
				24,
				6
			],
			[
				13,
				3
			],
			[
				145,
				124
			],
			[
				28,
				74
			]
		],
		[
			[
				46079,
				81855
			],
			[
				-51,
				-4
			],
			[
				-158,
				85
			],
			[
				-27,
				58
			],
			[
				31,
				28
			],
			[
				87,
				9
			],
			[
				51,
				-15
			],
			[
				12,
				-37
			],
			[
				81,
				-26
			],
			[
				103,
				-8
			],
			[
				29,
				-21
			],
			[
				-62,
				-63
			],
			[
				-96,
				-6
			]
		],
		[
			[
				42810,
				82526
			],
			[
				-76,
				-105
			],
			[
				-11,
				137
			],
			[
				-33,
				53
			],
			[
				-19,
				160
			],
			[
				2,
				25
			],
			[
				32,
				4
			],
			[
				109,
				-35
			],
			[
				-4,
				-239
			]
		],
		[
			[
				43387,
				82583
			],
			[
				-13,
				-60
			],
			[
				-78,
				16
			],
			[
				-11,
				-42
			],
			[
				-42,
				-17
			],
			[
				-29,
				32
			],
			[
				-8,
				86
			],
			[
				-38,
				27
			],
			[
				-21,
				123
			],
			[
				49,
				10
			],
			[
				47,
				-9
			],
			[
				30,
				-19
			],
			[
				40,
				-88
			],
			[
				74,
				-59
			]
		],
		[
			[
				45019,
				82678
			],
			[
				1,
				-71
			],
			[
				-25,
				-55
			],
			[
				-50,
				-23
			],
			[
				-97,
				24
			],
			[
				-68,
				-42
			],
			[
				-124,
				42
			],
			[
				-88,
				11
			],
			[
				-109,
				78
			],
			[
				-106,
				3
			],
			[
				-67,
				81
			],
			[
				4,
				66
			],
			[
				52,
				132
			],
			[
				51,
				40
			],
			[
				86,
				48
			],
			[
				59,
				-3
			],
			[
				98,
				-89
			],
			[
				104,
				-86
			],
			[
				196,
				-119
			],
			[
				83,
				-37
			]
		],
		[
			[
				44431,
				82253
			],
			[
				-66,
				-15
			],
			[
				-51,
				41
			],
			[
				1,
				13
			],
			[
				12,
				18
			],
			[
				13,
				39
			],
			[
				-6,
				62
			],
			[
				-4,
				50
			],
			[
				25,
				9
			],
			[
				39,
				-35
			],
			[
				34,
				-29
			],
			[
				36,
				-64
			],
			[
				7,
				-41
			],
			[
				-15,
				-44
			],
			[
				-25,
				-4
			]
		],
		[
			[
				46490,
				82969
			],
			[
				-75,
				-117
			],
			[
				-57,
				68
			],
			[
				-68,
				19
			],
			[
				-94,
				3
			],
			[
				-74,
				39
			],
			[
				-2,
				41
			],
			[
				90,
				85
			],
			[
				47,
				14
			],
			[
				40,
				-54
			],
			[
				108,
				-31
			],
			[
				85,
				-67
			]
		],
		[
			[
				42963,
				82914
			],
			[
				-28,
				-69
			],
			[
				-69,
				6
			],
			[
				-23,
				26
			],
			[
				-145,
				20
			],
			[
				-45,
				-13
			],
			[
				-34,
				31
			],
			[
				-9,
				98
			],
			[
				90,
				9
			],
			[
				44,
				59
			],
			[
				17,
				102
			],
			[
				54,
				20
			],
			[
				115,
				-17
			],
			[
				46,
				-10
			],
			[
				-4,
				-81
			],
			[
				-18,
				-24
			],
			[
				-6,
				-97
			],
			[
				15,
				-60
			]
		],
		[
			[
				43225,
				82988
			],
			[
				-51,
				-24
			],
			[
				-37,
				49
			],
			[
				-8,
				53
			],
			[
				0,
				49
			],
			[
				9,
				38
			],
			[
				42,
				36
			],
			[
				45,
				5
			],
			[
				30,
				-45
			],
			[
				5,
				-32
			],
			[
				1,
				-82
			],
			[
				-21,
				-38
			],
			[
				-15,
				-9
			]
		],
		[
			[
				17652,
				12357
			],
			[
				-1,
				-9
			],
			[
				4,
				-122
			],
			[
				2,
				-71
			],
			[
				39,
				37
			],
			[
				-7,
				-203
			],
			[
				23,
				-31
			],
			[
				1,
				-1
			],
			[
				9,
				-119
			],
			[
				-2,
				-16
			],
			[
				-1,
				-12
			],
			[
				-3,
				-29
			],
			[
				-8,
				-69
			],
			[
				21,
				-48
			],
			[
				0,
				0
			]
		],
		[
			[
				17729,
				11664
			],
			[
				2,
				-4
			],
			[
				25,
				-56
			],
			[
				13,
				37
			],
			[
				3,
				7
			],
			[
				42,
				-40
			],
			[
				56,
				-50
			],
			[
				-2,
				-34
			],
			[
				34,
				-17
			],
			[
				38,
				25
			]
		],
		[
			[
				17953,
				11520
			],
			[
				10,
				-24
			],
			[
				5,
				-44
			],
			[
				8,
				-82
			],
			[
				-7,
				-36
			],
			[
				37,
				-287
			],
			[
				7,
				-168
			],
			[
				-79,
				-118
			],
			[
				-8,
				-11
			],
			[
				-160,
				-138
			],
			[
				-24,
				-12
			],
			[
				-44,
				-20
			],
			[
				-66,
				-50
			],
			[
				-27,
				29
			],
			[
				-59,
				-54
			],
			[
				-43,
				46
			],
			[
				-43,
				-17
			],
			[
				-49,
				30
			],
			[
				-6,
				20
			],
			[
				-12,
				41
			],
			[
				-2,
				5
			],
			[
				-2,
				40
			],
			[
				21,
				42
			],
			[
				8,
				85
			],
			[
				19,
				13
			],
			[
				30,
				220
			],
			[
				8,
				78
			],
			[
				1,
				16
			],
			[
				-16,
				30
			],
			[
				-55,
				0
			],
			[
				1,
				10
			],
			[
				2,
				26
			],
			[
				76,
				43
			],
			[
				-41,
				83
			],
			[
				-6,
				119
			],
			[
				22,
				11
			],
			[
				5,
				93
			],
			[
				-30,
				43
			],
			[
				5,
				34
			],
			[
				0,
				0
			]
		],
		[
			[
				17439,
				11616
			],
			[
				5,
				42
			],
			[
				-41,
				-21
			],
			[
				-44,
				63
			],
			[
				-19,
				-19
			],
			[
				-27,
				82
			],
			[
				-59,
				96
			],
			[
				-16,
				-35
			],
			[
				-82,
				7
			],
			[
				-54,
				36
			],
			[
				-29,
				35
			],
			[
				0,
				0
			]
		],
		[
			[
				17073,
				11902
			],
			[
				-16,
				21
			],
			[
				-10,
				41
			],
			[
				11,
				53
			],
			[
				-19,
				-2
			],
			[
				-26,
				-2
			],
			[
				-1,
				76
			],
			[
				-56,
				-18
			],
			[
				-36,
				-10
			],
			[
				-29,
				8
			],
			[
				-8,
				2
			],
			[
				-11,
				-14
			],
			[
				0,
				0
			]
		],
		[
			[
				17776,
				11786
			],
			[
				18,
				-81
			],
			[
				-24,
				1
			],
			[
				-36,
				51
			],
			[
				7,
				65
			],
			[
				5,
				9
			],
			[
				18,
				-26
			],
			[
				12,
				-19
			]
		],
		[
			[
				49911,
				83397
			],
			[
				0,
				0
			],
			[
				19,
				7
			],
			[
				86,
				122
			],
			[
				17,
				-36
			],
			[
				175,
				142
			],
			[
				64,
				-49
			],
			[
				55,
				28
			],
			[
				18,
				71
			],
			[
				78,
				-1
			],
			[
				141,
				67
			],
			[
				59,
				-143
			],
			[
				-29,
				-90
			],
			[
				-16,
				-113
			],
			[
				219,
				-208
			],
			[
				7,
				126
			],
			[
				-80,
				68
			],
			[
				22,
				95
			],
			[
				50,
				31
			],
			[
				-19,
				327
			],
			[
				-45,
				67
			],
			[
				46,
				91
			],
			[
				233,
				84
			],
			[
				7,
				-74
			],
			[
				-33,
				-75
			],
			[
				-4,
				-75
			],
			[
				128,
				-155
			],
			[
				265,
				-159
			],
			[
				62,
				-76
			],
			[
				61,
				-3
			],
			[
				-32,
				-114
			],
			[
				43,
				11
			],
			[
				60,
				15
			],
			[
				65,
				-56
			],
			[
				43,
				-224
			],
			[
				14,
				-11
			],
			[
				75,
				-57
			],
			[
				51,
				-9
			],
			[
				24,
				-170
			],
			[
				68,
				-24
			],
			[
				-15,
				230
			],
			[
				-16,
				14
			],
			[
				-82,
				70
			],
			[
				-32,
				130
			],
			[
				28,
				40
			],
			[
				135,
				5
			],
			[
				7,
				44
			],
			[
				-161,
				21
			],
			[
				-124,
				120
			],
			[
				30,
				72
			],
			[
				-4,
				102
			],
			[
				158,
				99
			],
			[
				196,
				225
			],
			[
				137,
				118
			],
			[
				101,
				7
			],
			[
				94,
				-44
			],
			[
				-27,
				-123
			],
			[
				-140,
				-102
			],
			[
				-24,
				-38
			],
			[
				8,
				-53
			],
			[
				113,
				65
			],
			[
				189,
				175
			],
			[
				61,
				10
			],
			[
				64,
				-63
			],
			[
				0,
				-141
			],
			[
				-32,
				-114
			],
			[
				7,
				-151
			],
			[
				-47,
				-46
			],
			[
				20,
				-44
			],
			[
				105,
				52
			],
			[
				-8,
				193
			],
			[
				15,
				45
			],
			[
				33,
				3
			],
			[
				49,
				-30
			],
			[
				-16,
				85
			],
			[
				35,
				36
			],
			[
				121,
				9
			],
			[
				145,
				-14
			],
			[
				168,
				-45
			],
			[
				21,
				-37
			],
			[
				-92,
				-208
			],
			[
				43,
				-21
			],
			[
				-18,
				-45
			],
			[
				-36,
				-25
			],
			[
				-119,
				-82
			],
			[
				146,
				33
			],
			[
				-5,
				-134
			],
			[
				-25,
				-110
			],
			[
				-85,
				-192
			],
			[
				-19,
				-43
			],
			[
				78,
				1
			],
			[
				-3,
				-43
			],
			[
				-47,
				-36
			],
			[
				-55,
				-19
			],
			[
				-43,
				-34
			],
			[
				52,
				-52
			],
			[
				58,
				6
			],
			[
				79,
				49
			],
			[
				132,
				-26
			],
			[
				72,
				0
			],
			[
				15,
				61
			],
			[
				73,
				-20
			],
			[
				117,
				12
			],
			[
				113,
				-63
			],
			[
				112,
				-28
			],
			[
				21,
				-6
			],
			[
				68,
				-53
			],
			[
				101,
				-21
			],
			[
				-55,
				84
			],
			[
				-1,
				0
			],
			[
				-128,
				100
			],
			[
				-122,
				68
			],
			[
				-74,
				13
			],
			[
				-88,
				16
			],
			[
				-59,
				-2
			],
			[
				-187,
				-6
			],
			[
				-13,
				24
			],
			[
				-23,
				43
			],
			[
				58,
				21
			],
			[
				71,
				214
			],
			[
				-8,
				241
			],
			[
				29,
				7
			],
			[
				8,
				2
			],
			[
				1,
				8
			],
			[
				3,
				51
			],
			[
				8,
				118
			],
			[
				197,
				-30
			]
		],
		[
			[
				53570,
				83625
			],
			[
				0,
				0
			],
			[
				110,
				-17
			],
			[
				65,
				-43
			],
			[
				94,
				-15
			],
			[
				42,
				-41
			],
			[
				-20,
				-71
			],
			[
				46,
				-17
			],
			[
				87,
				43
			],
			[
				182,
				-66
			],
			[
				-31,
				-57
			],
			[
				-73,
				-48
			],
			[
				126,
				-8
			],
			[
				70,
				95
			],
			[
				99,
				3
			],
			[
				378,
				-92
			],
			[
				321,
				-2
			],
			[
				112,
				-48
			],
			[
				23,
				-12
			],
			[
				17,
				-9
			],
			[
				21,
				-51
			],
			[
				-7,
				-73
			],
			[
				-44,
				-48
			],
			[
				-29,
				-60
			],
			[
				-16,
				-33
			],
			[
				-100,
				60
			],
			[
				32,
				-109
			],
			[
				-90,
				-49
			],
			[
				-5,
				-6
			],
			[
				-17,
				-25
			],
			[
				-1,
				-43
			],
			[
				0,
				-1
			],
			[
				-128,
				-94
			],
			[
				-49,
				-14
			],
			[
				-43,
				-12
			],
			[
				109,
				-23
			],
			[
				-130,
				-70
			],
			[
				-147,
				-22
			],
			[
				-70,
				-11
			],
			[
				-76,
				-37
			],
			[
				-58,
				-28
			],
			[
				-31,
				3
			],
			[
				-111,
				13
			],
			[
				-66,
				-68
			],
			[
				-6,
				-1
			],
			[
				-117,
				-28
			],
			[
				-162,
				5
			],
			[
				-113,
				4
			],
			[
				-40,
				38
			],
			[
				-49,
				0
			],
			[
				-88,
				-63
			],
			[
				-32,
				-22
			],
			[
				-52,
				1
			],
			[
				-82,
				-38
			],
			[
				-17,
				-7
			],
			[
				0,
				-52
			],
			[
				-72,
				-33
			],
			[
				-22,
				-10
			],
			[
				-8,
				2
			],
			[
				-37,
				7
			],
			[
				-45,
				-29
			],
			[
				-81,
				-51
			],
			[
				23,
				-41
			],
			[
				45,
				-77
			],
			[
				5,
				4
			],
			[
				226,
				171
			],
			[
				75,
				58
			],
			[
				311,
				19
			],
			[
				448,
				114
			],
			[
				109,
				-1
			],
			[
				109,
				59
			],
			[
				72,
				40
			],
			[
				116,
				7
			],
			[
				241,
				75
			],
			[
				196,
				159
			],
			[
				43,
				35
			],
			[
				1,
				0
			],
			[
				91,
				74
			],
			[
				96,
				-37
			],
			[
				-5,
				-26
			],
			[
				-29,
				-27
			],
			[
				-14,
				-14
			],
			[
				15,
				-109
			],
			[
				-25,
				-239
			],
			[
				44,
				-108
			],
			[
				-60,
				-80
			],
			[
				-67,
				-38
			],
			[
				14,
				-8
			],
			[
				80,
				-50
			],
			[
				35,
				-21
			],
			[
				2,
				-1
			],
			[
				79,
				-89
			],
			[
				57,
				21
			],
			[
				44,
				56
			],
			[
				2,
				2
			],
			[
				6,
				4
			],
			[
				33,
				22
			],
			[
				7,
				5
			],
			[
				5,
				-13
			],
			[
				80,
				-212
			],
			[
				-30,
				-70
			],
			[
				28,
				-96
			],
			[
				90,
				47
			],
			[
				32,
				-35
			],
			[
				-31,
				-87
			],
			[
				-59,
				-7
			],
			[
				-137,
				-99
			],
			[
				-44,
				-6
			],
			[
				-119,
				-155
			],
			[
				62,
				-4
			],
			[
				0,
				1
			],
			[
				158,
				145
			],
			[
				72,
				6
			],
			[
				-47,
				-99
			],
			[
				42,
				-6
			],
			[
				35,
				-6
			],
			[
				15,
				35
			],
			[
				20,
				46
			],
			[
				56,
				47
			],
			[
				33,
				27
			],
			[
				82,
				-15
			],
			[
				27,
				42
			],
			[
				79,
				19
			],
			[
				80,
				78
			],
			[
				7,
				37
			],
			[
				19,
				82
			],
			[
				71,
				13
			],
			[
				62,
				11
			],
			[
				9,
				-105
			],
			[
				77,
				-8
			],
			[
				33,
				11
			],
			[
				76,
				29
			],
			[
				42,
				-40
			],
			[
				-1,
				-26
			],
			[
				-4,
				-30
			],
			[
				35,
				-7
			],
			[
				49,
				-13
			],
			[
				3,
				0
			],
			[
				51,
				74
			],
			[
				12,
				15
			],
			[
				63,
				32
			],
			[
				42,
				-9
			],
			[
				24,
				-5
			],
			[
				31,
				67
			],
			[
				8,
				17
			],
			[
				2,
				1
			],
			[
				36,
				49
			],
			[
				2,
				2
			],
			[
				46,
				54
			],
			[
				34,
				39
			],
			[
				-15,
				16
			],
			[
				-35,
				37
			],
			[
				-26,
				28
			],
			[
				-318,
				7
			],
			[
				-7,
				0
			],
			[
				-103,
				-43
			],
			[
				-29,
				13
			],
			[
				-92,
				41
			],
			[
				-179,
				81
			],
			[
				-10,
				6
			],
			[
				-99,
				61
			],
			[
				-81,
				50
			],
			[
				-37,
				73
			],
			[
				-158,
				121
			],
			[
				34,
				32
			],
			[
				141,
				19
			],
			[
				118,
				66
			],
			[
				308,
				8
			],
			[
				32,
				-20
			],
			[
				22,
				-14
			],
			[
				7,
				14
			],
			[
				29,
				63
			],
			[
				8,
				16
			],
			[
				48,
				26
			],
			[
				-3,
				27
			],
			[
				-2,
				18
			],
			[
				-11,
				5
			],
			[
				-112,
				62
			],
			[
				-1,
				1
			],
			[
				-9,
				10
			],
			[
				-111,
				130
			],
			[
				-36,
				16
			],
			[
				-45,
				25
			],
			[
				-3,
				95
			],
			[
				311,
				17
			],
			[
				-8,
				16
			],
			[
				-21,
				40
			],
			[
				-278,
				-4
			],
			[
				-208,
				116
			],
			[
				4,
				68
			],
			[
				-82,
				33
			],
			[
				108,
				35
			],
			[
				106,
				-17
			],
			[
				100,
				9
			],
			[
				143,
				52
			],
			[
				162,
				-3
			],
			[
				46,
				-1
			],
			[
				20,
				0
			],
			[
				3,
				30
			],
			[
				2,
				27
			],
			[
				82,
				27
			],
			[
				12,
				0
			],
			[
				204,
				-12
			],
			[
				-15,
				70
			],
			[
				-217,
				-9
			],
			[
				-98,
				-4
			],
			[
				-86,
				-3
			],
			[
				-141,
				-37
			],
			[
				-61,
				8
			],
			[
				-119,
				17
			],
			[
				-47,
				34
			],
			[
				-3,
				2
			],
			[
				5,
				4
			],
			[
				79,
				54
			],
			[
				17,
				11
			],
			[
				37,
				4
			],
			[
				111,
				12
			],
			[
				89,
				46
			],
			[
				163,
				-56
			],
			[
				14,
				32
			],
			[
				-146,
				80
			],
			[
				-5,
				2
			],
			[
				9,
				3
			],
			[
				241,
				70
			],
			[
				257,
				-37
			],
			[
				173,
				46
			],
			[
				54,
				57
			],
			[
				-49,
				14
			],
			[
				-52,
				-13
			],
			[
				-124,
				-30
			],
			[
				-207,
				80
			],
			[
				11,
				9
			],
			[
				123,
				92
			],
			[
				16,
				12
			],
			[
				-3,
				2
			],
			[
				-13,
				11
			],
			[
				-20,
				15
			],
			[
				-78,
				-46
			],
			[
				-82,
				-48
			],
			[
				-28,
				0
			],
			[
				-27,
				-1
			],
			[
				4,
				11
			],
			[
				35,
				94
			],
			[
				9,
				26
			],
			[
				257,
				251
			]
		],
		[
			[
				56936,
				84382
			],
			[
				0,
				0
			],
			[
				14,
				13
			],
			[
				117,
				68
			],
			[
				22,
				14
			],
			[
				-1,
				13
			],
			[
				-4,
				46
			],
			[
				128,
				74
			],
			[
				22,
				48
			],
			[
				65,
				11
			],
			[
				46,
				56
			],
			[
				133,
				88
			],
			[
				182,
				114
			],
			[
				28,
				0
			],
			[
				42,
				-1
			],
			[
				-25,
				30
			],
			[
				-25,
				30
			],
			[
				65,
				144
			],
			[
				173,
				119
			],
			[
				150,
				30
			],
			[
				143,
				59
			],
			[
				23,
				10
			],
			[
				69,
				-14
			],
			[
				176,
				34
			],
			[
				89,
				-82
			],
			[
				93,
				-50
			],
			[
				100,
				-11
			],
			[
				96,
				-35
			],
			[
				170,
				-2
			],
			[
				32,
				-32
			],
			[
				104,
				-19
			],
			[
				19,
				-50
			],
			[
				-24,
				-81
			],
			[
				115,
				-80
			],
			[
				1,
				-1
			],
			[
				38,
				9
			],
			[
				28,
				6
			],
			[
				-41,
				96
			],
			[
				-25,
				126
			],
			[
				-141,
				152
			],
			[
				-10,
				11
			],
			[
				-93,
				65
			],
			[
				-95,
				24
			],
			[
				-167,
				84
			],
			[
				-50,
				-3
			],
			[
				-71,
				21
			],
			[
				-20,
				37
			],
			[
				28,
				86
			],
			[
				95,
				92
			],
			[
				82,
				37
			],
			[
				50,
				123
			],
			[
				84,
				89
			],
			[
				93,
				-25
			],
			[
				-12,
				103
			],
			[
				2,
				157
			],
			[
				41,
				171
			],
			[
				124,
				-18
			],
			[
				-39,
				100
			],
			[
				67,
				73
			],
			[
				82,
				28
			],
			[
				46,
				-1
			],
			[
				74,
				54
			],
			[
				-23,
				-71
			],
			[
				182,
				-32
			],
			[
				86,
				13
			],
			[
				90,
				-32
			],
			[
				-1,
				-82
			],
			[
				269,
				-137
			],
			[
				17,
				-74
			],
			[
				44,
				-62
			],
			[
				70,
				-80
			],
			[
				83,
				-14
			],
			[
				1,
				0
			],
			[
				77,
				36
			],
			[
				1,
				1
			],
			[
				1,
				1
			],
			[
				81,
				53
			],
			[
				32,
				40
			],
			[
				-54,
				39
			],
			[
				13,
				60
			],
			[
				-77,
				75
			],
			[
				0,
				0
			]
		],
		[
			[
				60336,
				86356
			],
			[
				-90,
				89
			],
			[
				-105,
				157
			],
			[
				202,
				13
			],
			[
				-145,
				60
			],
			[
				-101,
				68
			],
			[
				2,
				-68
			],
			[
				-108,
				37
			],
			[
				52,
				50
			],
			[
				-101,
				30
			],
			[
				-40,
				42
			],
			[
				69,
				134
			],
			[
				-31,
				47
			],
			[
				-114,
				-67
			],
			[
				-268,
				25
			],
			[
				-166,
				38
			],
			[
				70,
				53
			],
			[
				-28,
				28
			],
			[
				-172,
				8
			],
			[
				-190,
				83
			],
			[
				86,
				256
			],
			[
				-109,
				154
			],
			[
				369,
				254
			],
			[
				110,
				-69
			],
			[
				-3,
				-135
			],
			[
				69,
				11
			],
			[
				103,
				-62
			],
			[
				-66,
				-78
			],
			[
				286,
				-139
			],
			[
				95,
				-60
			],
			[
				113,
				-94
			],
			[
				62,
				28
			],
			[
				1,
				1
			],
			[
				1,
				0
			],
			[
				31,
				28
			],
			[
				4,
				172
			],
			[
				-150,
				36
			],
			[
				39,
				144
			],
			[
				-85,
				146
			],
			[
				68,
				47
			],
			[
				221,
				-20
			],
			[
				68,
				-33
			],
			[
				107,
				43
			],
			[
				-144,
				96
			],
			[
				-343,
				102
			],
			[
				18,
				44
			],
			[
				159,
				39
			],
			[
				32,
				44
			],
			[
				-121,
				-1
			],
			[
				-79,
				21
			],
			[
				-25,
				215
			],
			[
				148,
				6
			],
			[
				138,
				40
			],
			[
				-36,
				23
			],
			[
				-161,
				-6
			],
			[
				-108,
				44
			],
			[
				41,
				32
			],
			[
				135,
				46
			],
			[
				97,
				56
			],
			[
				71,
				3
			],
			[
				140,
				3
			],
			[
				-76,
				-114
			],
			[
				-1,
				-43
			],
			[
				81,
				27
			],
			[
				124,
				127
			],
			[
				103,
				-2
			],
			[
				-46,
				-170
			],
			[
				75,
				-40
			],
			[
				-19,
				-49
			],
			[
				46,
				-43
			],
			[
				52,
				16
			],
			[
				76,
				-97
			],
			[
				1,
				-42
			],
			[
				-107,
				-27
			],
			[
				-27,
				-46
			],
			[
				121,
				-21
			],
			[
				182,
				102
			],
			[
				101,
				-78
			],
			[
				78,
				19
			],
			[
				-87,
				93
			],
			[
				117,
				193
			],
			[
				-12,
				95
			],
			[
				160,
				-20
			],
			[
				106,
				-115
			],
			[
				7,
				-47
			],
			[
				-38,
				-106
			],
			[
				-50,
				-44
			],
			[
				-233,
				-226
			],
			[
				-188,
				-124
			],
			[
				174,
				36
			],
			[
				29,
				-46
			],
			[
				140,
				-24
			],
			[
				87,
				-35
			],
			[
				34,
				11
			],
			[
				-51,
				100
			],
			[
				108,
				197
			],
			[
				205,
				117
			],
			[
				114,
				-136
			],
			[
				53,
				-39
			],
			[
				59,
				-10
			],
			[
				115,
				-220
			],
			[
				21,
				-124
			],
			[
				1,
				-120
			],
			[
				23,
				-71
			],
			[
				-19,
				-21
			],
			[
				0,
				0
			],
			[
				-34,
				-39
			],
			[
				-11,
				-98
			],
			[
				33,
				-13
			],
			[
				56,
				110
			],
			[
				36,
				-22
			],
			[
				70,
				119
			],
			[
				43,
				-18
			],
			[
				52,
				-113
			],
			[
				56,
				15
			],
			[
				-40,
				140
			],
			[
				44,
				7
			],
			[
				67,
				122
			],
			[
				-127,
				76
			],
			[
				15,
				42
			],
			[
				109,
				-49
			],
			[
				-14,
				119
			],
			[
				94,
				34
			],
			[
				19,
				44
			],
			[
				-24,
				90
			],
			[
				-64,
				87
			],
			[
				-72,
				136
			],
			[
				-97,
				41
			],
			[
				-31,
				151
			],
			[
				43,
				75
			],
			[
				64,
				23
			],
			[
				38,
				-17
			],
			[
				19,
				-65
			],
			[
				72,
				22
			],
			[
				178,
				-55
			],
			[
				27,
				-87
			],
			[
				140,
				-82
			]
		],
		[
			[
				62854,
				88248
			],
			[
				0,
				0
			],
			[
				45,
				-26
			],
			[
				13,
				-53
			],
			[
				87,
				-35
			],
			[
				19,
				-38
			],
			[
				-78,
				-106
			],
			[
				-58,
				-29
			],
			[
				-155,
				-129
			],
			[
				-136,
				-74
			],
			[
				-44,
				-59
			],
			[
				106,
				35
			],
			[
				36,
				2
			],
			[
				-26,
				-87
			],
			[
				65,
				-11
			],
			[
				49,
				100
			],
			[
				49,
				56
			],
			[
				44,
				78
			],
			[
				35,
				-16
			],
			[
				-47,
				-140
			],
			[
				31,
				-10
			],
			[
				2,
				2
			],
			[
				89,
				123
			],
			[
				227,
				232
			],
			[
				114,
				-18
			],
			[
				118,
				27
			],
			[
				3,
				-1
			],
			[
				57,
				-18
			],
			[
				15,
				-75
			],
			[
				-25,
				2
			],
			[
				-78,
				-15
			],
			[
				-3,
				-12
			],
			[
				-5,
				-18
			],
			[
				11,
				-2
			],
			[
				132,
				-32
			],
			[
				21,
				-54
			],
			[
				-28,
				-94
			],
			[
				52,
				-4
			],
			[
				44,
				42
			],
			[
				-20,
				154
			],
			[
				294,
				72
			],
			[
				123,
				-47
			],
			[
				-25,
				-54
			],
			[
				-71,
				-73
			],
			[
				-42,
				-1
			],
			[
				-46,
				-38
			],
			[
				85,
				-29
			],
			[
				178,
				60
			],
			[
				-20,
				-68
			],
			[
				-103,
				-102
			],
			[
				-61,
				-16
			],
			[
				-223,
				-147
			],
			[
				-52,
				-102
			],
			[
				7,
				-130
			],
			[
				-62,
				-40
			],
			[
				-164,
				-4
			],
			[
				-193,
				-68
			],
			[
				-87,
				-177
			],
			[
				60,
				20
			],
			[
				-10,
				-66
			],
			[
				42,
				1
			],
			[
				163,
				114
			],
			[
				58,
				-2
			],
			[
				-37,
				-187
			],
			[
				-60,
				-48
			],
			[
				-15,
				83
			],
			[
				-54,
				24
			],
			[
				-246,
				-213
			],
			[
				0,
				0
			]
		],
		[
			[
				61225,
				89028
			],
			[
				151,
				-111
			],
			[
				123,
				22
			],
			[
				-105,
				-241
			],
			[
				-125,
				-34
			],
			[
				-30,
				16
			],
			[
				13,
				23
			],
			[
				11,
				48
			],
			[
				-109,
				112
			],
			[
				35,
				120
			],
			[
				36,
				45
			]
		],
		[
			[
				60204,
				88786
			],
			[
				151,
				-80
			],
			[
				53,
				12
			],
			[
				63,
				-19
			],
			[
				-57,
				-31
			],
			[
				-78,
				-1
			],
			[
				-33,
				-1
			],
			[
				-117,
				-2
			],
			[
				-204,
				104
			],
			[
				58,
				74
			],
			[
				164,
				-56
			]
		],
		[
			[
				58549,
				88833
			],
			[
				-88,
				-87
			],
			[
				82,
				-38
			],
			[
				50,
				26
			],
			[
				278,
				-23
			],
			[
				118,
				-44
			],
			[
				-40,
				-30
			],
			[
				-115,
				16
			],
			[
				-53,
				25
			],
			[
				-145,
				-63
			],
			[
				-120,
				0
			],
			[
				38,
				-71
			],
			[
				-87,
				-71
			],
			[
				30,
				-45
			],
			[
				181,
				63
			],
			[
				275,
				-22
			],
			[
				70,
				-54
			],
			[
				-16,
				-93
			],
			[
				-185,
				-50
			],
			[
				-37,
				-74
			],
			[
				-170,
				42
			],
			[
				-29,
				-102
			],
			[
				-21,
				-22
			],
			[
				-178,
				-11
			],
			[
				-117,
				81
			],
			[
				-77,
				-10
			],
			[
				-78,
				70
			],
			[
				128,
				54
			],
			[
				-13,
				20
			],
			[
				-217,
				42
			],
			[
				-13,
				57
			],
			[
				120,
				98
			],
			[
				47,
				25
			],
			[
				201,
				3
			],
			[
				55,
				62
			],
			[
				-430,
				-15
			],
			[
				-122,
				63
			],
			[
				222,
				19
			],
			[
				5,
				24
			],
			[
				-99,
				10
			],
			[
				12,
				61
			],
			[
				150,
				-4
			],
			[
				-6,
				50
			],
			[
				-121,
				25
			],
			[
				17,
				42
			],
			[
				250,
				34
			],
			[
				21,
				-64
			],
			[
				72,
				-14
			],
			[
				-9,
				75
			],
			[
				32,
				20
			],
			[
				82,
				-23
			],
			[
				50,
				-77
			]
		],
		[
			[
				58784,
				89200
			],
			[
				-212,
				-111
			],
			[
				21,
				-51
			],
			[
				51,
				-6
			],
			[
				-124,
				-60
			],
			[
				-150,
				35
			],
			[
				-72,
				-23
			],
			[
				-50,
				-1
			],
			[
				-54,
				68
			],
			[
				-20,
				107
			],
			[
				57,
				31
			],
			[
				70,
				-27
			],
			[
				54,
				-104
			],
			[
				50,
				-6
			],
			[
				-9,
				38
			],
			[
				92,
				3
			],
			[
				-26,
				76
			],
			[
				-90,
				53
			],
			[
				139,
				61
			],
			[
				59,
				-97
			],
			[
				53,
				12
			],
			[
				21,
				44
			],
			[
				110,
				19
			],
			[
				30,
				-61
			]
		],
		[
			[
				60653,
				89377
			],
			[
				69,
				-55
			],
			[
				38,
				55
			],
			[
				150,
				13
			],
			[
				-139,
				-134
			],
			[
				91,
				-28
			],
			[
				-14,
				-27
			],
			[
				-92,
				5
			],
			[
				-104,
				-66
			],
			[
				14,
				-34
			],
			[
				62,
				-27
			],
			[
				20,
				-47
			],
			[
				-65,
				-56
			],
			[
				5,
				-93
			],
			[
				-175,
				8
			],
			[
				-38,
				54
			],
			[
				-96,
				61
			],
			[
				-100,
				43
			],
			[
				-65,
				13
			],
			[
				-43,
				73
			],
			[
				175,
				183
			],
			[
				146,
				-55
			],
			[
				-57,
				-79
			],
			[
				130,
				-26
			],
			[
				57,
				109
			],
			[
				-103,
				55
			],
			[
				-55,
				46
			],
			[
				-20,
				87
			],
			[
				214,
				-2
			],
			[
				-5,
				-76
			]
		],
		[
			[
				59195,
				87817
			],
			[
				-287,
				-140
			],
			[
				-36,
				115
			],
			[
				385,
				144
			],
			[
				-1,
				-44
			],
			[
				-61,
				-75
			]
		],
		[
			[
				57132,
				85323
			],
			[
				0,
				0
			],
			[
				25,
				-3
			],
			[
				65,
				-44
			],
			[
				25,
				-83
			],
			[
				-65,
				1
			],
			[
				49,
				-128
			],
			[
				9,
				-211
			],
			[
				-320,
				-270
			],
			[
				-54,
				-45
			],
			[
				-21,
				-18
			],
			[
				-24,
				5
			],
			[
				-188,
				36
			],
			[
				1,
				-2
			],
			[
				0,
				0
			]
		],
		[
			[
				56634,
				84561
			],
			[
				27,
				-69
			],
			[
				92,
				-40
			],
			[
				20,
				-8
			],
			[
				-90,
				-95
			],
			[
				-4,
				0
			],
			[
				-84,
				9
			],
			[
				4,
				-14
			],
			[
				16,
				-56
			],
			[
				-18,
				-14
			],
			[
				-24,
				-20
			],
			[
				-25,
				-20
			],
			[
				-117,
				-15
			],
			[
				-148,
				-19
			],
			[
				-91,
				34
			],
			[
				0,
				-92
			],
			[
				125,
				-7
			],
			[
				3,
				-1
			],
			[
				76,
				-67
			],
			[
				7,
				-52
			],
			[
				-79,
				-74
			],
			[
				-423,
				-187
			],
			[
				-143,
				-21
			],
			[
				-190,
				85
			],
			[
				-39,
				53
			],
			[
				-12,
				69
			],
			[
				13,
				73
			],
			[
				-60,
				74
			],
			[
				50,
				113
			],
			[
				104,
				94
			],
			[
				37,
				103
			],
			[
				46,
				115
			],
			[
				14,
				35
			],
			[
				-11,
				118
			],
			[
				-51,
				-88
			],
			[
				-125,
				-220
			],
			[
				-169,
				-175
			],
			[
				-9,
				-10
			],
			[
				-59,
				37
			],
			[
				-37,
				114
			],
			[
				-31,
				3
			],
			[
				-9,
				-97
			],
			[
				-48,
				4
			],
			[
				-178,
				141
			],
			[
				57,
				99
			],
			[
				-53,
				67
			],
			[
				-161,
				53
			],
			[
				-32,
				68
			]
		],
		[
			[
				54805,
				84661
			],
			[
				0,
				0
			],
			[
				-1,
				3
			],
			[
				-3,
				6
			],
			[
				14,
				7
			],
			[
				26,
				12
			],
			[
				13,
				6
			],
			[
				75,
				-87
			],
			[
				65,
				1
			],
			[
				10,
				0
			],
			[
				160,
				0
			],
			[
				36,
				21
			],
			[
				-86,
				64
			],
			[
				-114,
				5
			],
			[
				-13,
				19
			],
			[
				-35,
				52
			],
			[
				-19,
				93
			],
			[
				17,
				70
			],
			[
				2,
				8
			],
			[
				1,
				5
			],
			[
				82,
				70
			],
			[
				80,
				10
			],
			[
				1,
				-3
			],
			[
				7,
				-40
			],
			[
				44,
				11
			],
			[
				-2,
				54
			],
			[
				-1,
				27
			],
			[
				-1,
				22
			],
			[
				0,
				2
			],
			[
				15,
				10
			],
			[
				38,
				26
			],
			[
				60,
				-40
			],
			[
				53,
				7
			],
			[
				-52,
				62
			],
			[
				9,
				34
			],
			[
				9,
				38
			],
			[
				183,
				117
			],
			[
				97,
				19
			],
			[
				50,
				9
			],
			[
				118,
				-73
			],
			[
				-5,
				-35
			],
			[
				-13,
				-102
			],
			[
				84,
				-15
			],
			[
				15,
				106
			],
			[
				17,
				122
			],
			[
				134,
				-8
			],
			[
				-2,
				31
			],
			[
				-76,
				33
			],
			[
				-119,
				18
			],
			[
				-14,
				51
			],
			[
				-63,
				13
			],
			[
				6,
				67
			],
			[
				66,
				24
			],
			[
				97,
				-4
			],
			[
				102,
				-23
			],
			[
				129,
				-284
			],
			[
				-13,
				-116
			],
			[
				-59,
				-97
			],
			[
				-61,
				-102
			],
			[
				161,
				79
			],
			[
				29,
				15
			],
			[
				28,
				151
			],
			[
				6,
				122
			],
			[
				122,
				66
			],
			[
				-14,
				39
			],
			[
				-59,
				-12
			],
			[
				-62,
				-30
			],
			[
				-109,
				194
			],
			[
				99,
				12
			],
			[
				95,
				-6
			],
			[
				72,
				-94
			],
			[
				104,
				21
			],
			[
				91,
				-81
			],
			[
				43,
				43
			],
			[
				-154,
				123
			],
			[
				95,
				50
			],
			[
				128,
				36
			],
			[
				129,
				-95
			],
			[
				67,
				-124
			],
			[
				49,
				1
			],
			[
				30,
				27
			],
			[
				-65,
				93
			],
			[
				-122,
				93
			],
			[
				103,
				69
			],
			[
				-61,
				68
			],
			[
				-140,
				-19
			],
			[
				-23,
				109
			],
			[
				90,
				40
			],
			[
				20,
				65
			],
			[
				-50,
				8
			],
			[
				-167,
				-63
			],
			[
				5,
				43
			],
			[
				-104,
				43
			],
			[
				37,
				53
			],
			[
				107,
				10
			],
			[
				130,
				-11
			],
			[
				30,
				28
			],
			[
				56,
				7
			],
			[
				45,
				-20
			],
			[
				-29,
				-52
			],
			[
				80,
				-28
			],
			[
				176,
				67
			],
			[
				-49,
				-185
			],
			[
				38,
				-32
			],
			[
				57,
				13
			],
			[
				31,
				-64
			],
			[
				-35,
				-54
			],
			[
				-34,
				-50
			],
			[
				-59,
				-263
			],
			[
				-47,
				-32
			],
			[
				14,
				-56
			],
			[
				57,
				-44
			],
			[
				84,
				-33
			],
			[
				39,
				-4
			]
		],
		[
			[
				58547,
				86302
			],
			[
				0,
				0
			],
			[
				-23,
				-17
			],
			[
				138,
				7
			],
			[
				84,
				-271
			],
			[
				-62,
				-145
			],
			[
				-176,
				-133
			],
			[
				-50,
				-18
			],
			[
				-35,
				-66
			],
			[
				-51,
				-25
			],
			[
				-41,
				-38
			],
			[
				29,
				-58
			],
			[
				1,
				-38
			],
			[
				-28,
				-52
			],
			[
				-192,
				-85
			],
			[
				-100,
				-44
			],
			[
				-47,
				19
			],
			[
				-310,
				7
			],
			[
				-140,
				112
			],
			[
				-14,
				124
			],
			[
				-82,
				107
			],
			[
				-61,
				3
			],
			[
				35,
				49
			]
		],
		[
			[
				57422,
				85740
			],
			[
				0,
				0
			],
			[
				11,
				16
			],
			[
				-52,
				174
			],
			[
				-112,
				71
			],
			[
				-89,
				-33
			],
			[
				-11,
				-5
			],
			[
				-39,
				27
			],
			[
				182,
				138
			],
			[
				51,
				145
			],
			[
				-133,
				-8
			],
			[
				130,
				121
			],
			[
				50,
				10
			],
			[
				13,
				39
			],
			[
				-114,
				24
			],
			[
				-79,
				65
			],
			[
				-4,
				191
			],
			[
				150,
				267
			],
			[
				78,
				-22
			],
			[
				311,
				16
			],
			[
				37,
				-155
			],
			[
				100,
				3
			],
			[
				-28,
				-56
			],
			[
				-163,
				-83
			],
			[
				68,
				-71
			],
			[
				144,
				129
			],
			[
				398,
				-83
			],
			[
				2,
				-76
			],
			[
				59,
				11
			],
			[
				42,
				-7
			],
			[
				114,
				-99
			],
			[
				81,
				-136
			],
			[
				-72,
				-51
			]
		],
		[
			[
				53377,
				84211
			],
			[
				0,
				0
			],
			[
				8,
				23
			],
			[
				164,
				65
			],
			[
				113,
				-48
			],
			[
				103,
				-163
			],
			[
				21,
				78
			],
			[
				-98,
				194
			],
			[
				31,
				40
			],
			[
				133,
				24
			],
			[
				58,
				-141
			],
			[
				70,
				46
			],
			[
				-40,
				136
			],
			[
				137,
				23
			],
			[
				-15,
				-164
			],
			[
				40,
				-4
			],
			[
				37,
				175
			],
			[
				83,
				11
			],
			[
				57,
				-196
			],
			[
				28,
				28
			],
			[
				-1,
				184
			],
			[
				93,
				11
			]
		],
		[
			[
				54399,
				84533
			],
			[
				0,
				0
			],
			[
				23,
				3
			],
			[
				10,
				-32
			],
			[
				-9,
				-104
			],
			[
				50,
				-140
			],
			[
				-47,
				-131
			],
			[
				45,
				-22
			],
			[
				40,
				94
			],
			[
				30,
				34
			],
			[
				-23,
				250
			],
			[
				60,
				48
			],
			[
				88,
				7
			],
			[
				73,
				-92
			],
			[
				-17,
				-151
			],
			[
				7,
				-116
			],
			[
				23,
				-102
			],
			[
				65,
				12
			],
			[
				19,
				115
			],
			[
				20,
				-4
			],
			[
				73,
				-17
			],
			[
				93,
				-71
			],
			[
				-90,
				-102
			],
			[
				116,
				19
			],
			[
				89,
				96
			],
			[
				72,
				-7
			],
			[
				-158,
				-261
			],
			[
				151,
				83
			],
			[
				33,
				-53
			],
			[
				62,
				-102
			],
			[
				69,
				-113
			],
			[
				-4,
				-117
			],
			[
				-99,
				-58
			],
			[
				-15,
				4
			],
			[
				-317,
				79
			],
			[
				-70,
				-30
			],
			[
				-296,
				11
			],
			[
				-99,
				34
			],
			[
				-155,
				33
			],
			[
				-269,
				32
			],
			[
				-53,
				67
			],
			[
				-213,
				79
			],
			[
				0,
				0
			]
		],
		[
			[
				53776,
				83808
			],
			[
				-251,
				94
			],
			[
				-141,
				228
			],
			[
				-15,
				56
			],
			[
				8,
				25
			]
		],
		[
			[
				56039,
				82752
			],
			[
				-110,
				5
			],
			[
				-79,
				46
			],
			[
				-9,
				94
			],
			[
				198,
				10
			],
			[
				101,
				-41
			],
			[
				3,
				-31
			],
			[
				-106,
				-14
			],
			[
				2,
				-69
			]
		],
		[
			[
				54509,
				85648
			],
			[
				-4,
				9
			],
			[
				-4,
				-16
			]
		],
		[
			[
				54501,
				85641
			],
			[
				0,
				0
			],
			[
				-22,
				-85
			],
			[
				-9,
				-181
			],
			[
				-29,
				-73
			],
			[
				-10,
				5
			],
			[
				0,
				0
			]
		],
		[
			[
				54431,
				85307
			],
			[
				-50,
				22
			],
			[
				-15,
				182
			],
			[
				32,
				77
			],
			[
				63,
				85
			],
			[
				-128,
				-68
			],
			[
				-37,
				66
			],
			[
				-160,
				-22
			],
			[
				21,
				-131
			],
			[
				44,
				-156
			],
			[
				-51,
				-32
			],
			[
				-46,
				115
			],
			[
				-38,
				-3
			],
			[
				7,
				-107
			],
			[
				-53,
				-90
			],
			[
				-51,
				2
			],
			[
				-69,
				117
			],
			[
				18,
				-103
			],
			[
				-54,
				0
			],
			[
				-82,
				188
			],
			[
				-48,
				41
			],
			[
				-54,
				-133
			],
			[
				19,
				-147
			],
			[
				-80,
				-30
			],
			[
				-110,
				21
			],
			[
				59,
				229
			],
			[
				-61,
				-31
			],
			[
				-41,
				-70
			],
			[
				-70,
				2
			],
			[
				-10,
				-79
			],
			[
				-116,
				-68
			],
			[
				-80,
				70
			],
			[
				29,
				286
			],
			[
				-96,
				-78
			],
			[
				-78,
				-106
			],
			[
				-4,
				-71
			],
			[
				29,
				-91
			],
			[
				-14,
				-40
			],
			[
				-65,
				-14
			],
			[
				-39,
				36
			],
			[
				-125,
				6
			],
			[
				-54,
				2
			],
			[
				65,
				-82
			],
			[
				-103,
				-19
			],
			[
				-91,
				51
			],
			[
				-57,
				-23
			],
			[
				-26,
				44
			],
			[
				71,
				26
			],
			[
				62,
				1
			],
			[
				50,
				128
			],
			[
				-81,
				18
			],
			[
				63,
				124
			],
			[
				83,
				32
			],
			[
				40,
				80
			],
			[
				161,
				18
			],
			[
				105,
				132
			],
			[
				-94,
				34
			],
			[
				-84,
				-14
			],
			[
				30,
				84
			],
			[
				225,
				73
			],
			[
				69,
				74
			],
			[
				-17,
				47
			],
			[
				-187,
				-3
			],
			[
				-47,
				26
			],
			[
				-67,
				4
			],
			[
				-87,
				-36
			],
			[
				-7,
				42
			],
			[
				-81,
				-66
			],
			[
				-115,
				-29
			],
			[
				-47,
				-124
			],
			[
				-130,
				120
			],
			[
				-55,
				-110
			],
			[
				-100,
				33
			],
			[
				-52,
				138
			],
			[
				63,
				53
			],
			[
				79,
				2
			],
			[
				32,
				42
			],
			[
				11,
				63
			],
			[
				-167,
				28
			],
			[
				-47,
				7
			],
			[
				-134,
				47
			],
			[
				39,
				91
			],
			[
				116,
				105
			],
			[
				42,
				-99
			],
			[
				23,
				-43
			],
			[
				77,
				26
			],
			[
				134,
				-12
			],
			[
				22,
				-32
			],
			[
				113,
				16
			],
			[
				45,
				-28
			],
			[
				-33,
				-70
			],
			[
				85,
				-27
			],
			[
				98,
				88
			],
			[
				145,
				-45
			],
			[
				0,
				186
			],
			[
				-88,
				43
			],
			[
				-23,
				64
			],
			[
				127,
				-24
			],
			[
				55,
				-72
			],
			[
				85,
				-82
			],
			[
				137,
				-67
			],
			[
				84,
				-88
			],
			[
				129,
				-12
			],
			[
				-106,
				207
			],
			[
				13,
				29
			],
			[
				40,
				40
			],
			[
				-127,
				79
			],
			[
				39,
				137
			],
			[
				77,
				73
			],
			[
				-40,
				53
			],
			[
				98,
				-3
			],
			[
				32,
				-156
			],
			[
				215,
				-195
			],
			[
				97,
				47
			],
			[
				9,
				23
			],
			[
				-93,
				27
			],
			[
				4,
				91
			],
			[
				113,
				72
			],
			[
				-16,
				93
			],
			[
				84,
				-5
			],
			[
				28,
				-68
			],
			[
				97,
				-67
			],
			[
				52,
				38
			],
			[
				137,
				-136
			],
			[
				-10,
				-71
			],
			[
				-146,
				-24
			],
			[
				-139,
				-107
			],
			[
				59,
				-48
			],
			[
				-6,
				-107
			],
			[
				165,
				54
			],
			[
				19,
				30
			],
			[
				-94,
				22
			],
			[
				18,
				39
			],
			[
				65,
				-3
			],
			[
				71,
				-18
			],
			[
				111,
				46
			],
			[
				16,
				-218
			],
			[
				30,
				-108
			],
			[
				80,
				113
			],
			[
				-67,
				46
			],
			[
				135,
				139
			],
			[
				54,
				-59
			],
			[
				210,
				34
			],
			[
				-12,
				42
			],
			[
				-88,
				8
			],
			[
				-180,
				211
			],
			[
				117,
				95
			],
			[
				-158,
				-2
			],
			[
				-1,
				139
			],
			[
				-90,
				2
			],
			[
				-61,
				153
			],
			[
				256,
				124
			]
		],
		[
			[
				54625,
				87078
			],
			[
				0,
				0
			],
			[
				92,
				44
			],
			[
				52,
				-21
			],
			[
				-77,
				-138
			],
			[
				74,
				-74
			],
			[
				41,
				104
			],
			[
				137,
				-85
			],
			[
				-12,
				-40
			],
			[
				-81,
				-58
			],
			[
				12,
				-42
			],
			[
				94,
				20
			],
			[
				68,
				49
			],
			[
				130,
				-11
			],
			[
				-25,
				-127
			],
			[
				-156,
				-117
			],
			[
				53,
				-23
			],
			[
				102,
				24
			],
			[
				38,
				-53
			],
			[
				-1,
				-103
			],
			[
				135,
				-18
			],
			[
				32,
				-46
			],
			[
				42,
				8
			],
			[
				-70,
				188
			],
			[
				29,
				44
			],
			[
				140,
				-41
			],
			[
				30,
				28
			],
			[
				-81,
				51
			],
			[
				45,
				78
			],
			[
				-32,
				60
			],
			[
				40,
				47
			],
			[
				87,
				-2
			],
			[
				50,
				-89
			],
			[
				119,
				-24
			],
			[
				8,
				42
			],
			[
				-56,
				12
			],
			[
				-66,
				92
			],
			[
				46,
				70
			],
			[
				116,
				-43
			],
			[
				62,
				25
			],
			[
				-5,
				62
			],
			[
				-113,
				8
			],
			[
				-68,
				41
			],
			[
				-47,
				60
			],
			[
				-100,
				103
			],
			[
				-129,
				67
			],
			[
				126,
				106
			],
			[
				90,
				-72
			],
			[
				37,
				21
			],
			[
				-43,
				84
			],
			[
				-108,
				42
			],
			[
				57,
				43
			],
			[
				146,
				-63
			],
			[
				174,
				-184
			],
			[
				41,
				-4
			],
			[
				23,
				84
			],
			[
				-99,
				182
			],
			[
				36,
				64
			],
			[
				89,
				-105
			],
			[
				14,
				-16
			],
			[
				71,
				-97
			],
			[
				9,
				-73
			],
			[
				56,
				1
			],
			[
				50,
				-115
			],
			[
				92,
				-38
			],
			[
				-45,
				150
			],
			[
				43,
				7
			],
			[
				50,
				-48
			],
			[
				52,
				51
			],
			[
				-114,
				72
			],
			[
				67,
				101
			],
			[
				-74,
				90
			],
			[
				77,
				263
			],
			[
				93,
				-112
			],
			[
				99,
				-44
			],
			[
				-35,
				-115
			],
			[
				206,
				12
			],
			[
				-33,
				-68
			],
			[
				126,
				-54
			],
			[
				-138,
				5
			],
			[
				89,
				-58
			],
			[
				136,
				-55
			],
			[
				3,
				-119
			],
			[
				-246,
				50
			],
			[
				-16,
				34
			],
			[
				-124,
				-59
			],
			[
				65,
				-23
			],
			[
				182,
				-63
			],
			[
				11,
				-44
			],
			[
				-57,
				-19
			],
			[
				-121,
				33
			],
			[
				-17,
				-50
			],
			[
				26,
				-128
			],
			[
				-122,
				-84
			],
			[
				-86,
				144
			],
			[
				-49,
				-7
			],
			[
				46,
				-253
			],
			[
				-63,
				-36
			],
			[
				-49,
				72
			],
			[
				-48,
				-15
			],
			[
				-1,
				-96
			],
			[
				-126,
				17
			],
			[
				124,
				-120
			],
			[
				-92,
				-58
			],
			[
				-140,
				10
			],
			[
				-112,
				146
			],
			[
				-32,
				-49
			],
			[
				-5,
				-12
			],
			[
				-36,
				-76
			],
			[
				21,
				-6
			],
			[
				51,
				-14
			],
			[
				10,
				-26
			],
			[
				-74,
				-29
			],
			[
				-29,
				-12
			],
			[
				-18,
				-34
			],
			[
				36,
				-18
			],
			[
				8,
				-4
			],
			[
				34,
				19
			],
			[
				122,
				-8
			],
			[
				-62,
				-37
			],
			[
				-56,
				-106
			],
			[
				-11,
				-59
			],
			[
				-70,
				2
			],
			[
				-102,
				4
			],
			[
				-106,
				24
			],
			[
				-38,
				-27
			],
			[
				104,
				-60
			],
			[
				126,
				-2
			],
			[
				-128,
				-291
			],
			[
				-71,
				-66
			],
			[
				-63,
				145
			],
			[
				-64,
				56
			],
			[
				-81,
				15
			],
			[
				-19,
				-42
			],
			[
				103,
				-32
			],
			[
				-14,
				-63
			],
			[
				27,
				-77
			],
			[
				-43,
				-74
			],
			[
				-229,
				64
			],
			[
				-1,
				39
			],
			[
				-24,
				37
			],
			[
				-112,
				-84
			],
			[
				11,
				-47
			],
			[
				114,
				-5
			],
			[
				40,
				-57
			],
			[
				14,
				-47
			],
			[
				-28,
				-97
			],
			[
				-217,
				-55
			],
			[
				-33,
				79
			],
			[
				-42,
				-106
			],
			[
				-104,
				-24
			],
			[
				122,
				177
			],
			[
				-46,
				-4
			],
			[
				-162,
				-171
			],
			[
				-91,
				-28
			],
			[
				40,
				157
			],
			[
				30,
				77
			],
			[
				-60,
				-20
			],
			[
				-30,
				18
			],
			[
				-31,
				65
			],
			[
				0,
				0
			]
		],
		[
			[
				56530,
				86299
			],
			[
				-37,
				-4
			],
			[
				-8,
				13
			],
			[
				26,
				48
			],
			[
				60,
				45
			],
			[
				37,
				20
			],
			[
				56,
				-1
			],
			[
				46,
				-37
			],
			[
				23,
				-32
			],
			[
				-28,
				-27
			],
			[
				-61,
				-25
			],
			[
				-66,
				2
			],
			[
				-48,
				-2
			]
		],
		[
			[
				56418,
				85735
			],
			[
				-74,
				-3
			],
			[
				-24,
				27
			],
			[
				52,
				46
			],
			[
				75,
				64
			],
			[
				69,
				12
			],
			[
				61,
				-29
			],
			[
				8,
				-25
			],
			[
				-18,
				-23
			],
			[
				-48,
				-25
			],
			[
				-101,
				-44
			]
		],
		[
			[
				55556,
				87631
			],
			[
				14,
				-80
			],
			[
				-65,
				-27
			],
			[
				-182,
				39
			],
			[
				-75,
				45
			],
			[
				54,
				62
			],
			[
				108,
				-41
			],
			[
				65,
				24
			],
			[
				81,
				-22
			]
		],
		[
			[
				55194,
				86950
			],
			[
				-74,
				-17
			],
			[
				-33,
				37
			],
			[
				35,
				113
			],
			[
				78,
				28
			],
			[
				33,
				-35
			],
			[
				-39,
				-126
			]
		],
		[
			[
				51493,
				83662
			],
			[
				-76,
				-20
			],
			[
				-6,
				76
			],
			[
				-72,
				89
			],
			[
				58,
				422
			],
			[
				-58,
				158
			],
			[
				91,
				15
			],
			[
				-8,
				169
			],
			[
				119,
				-156
			],
			[
				159,
				-101
			],
			[
				48,
				-64
			],
			[
				-19,
				-124
			],
			[
				-67,
				-124
			],
			[
				-71,
				-225
			],
			[
				-98,
				-115
			]
		],
		[
			[
				50681,
				84145
			],
			[
				-128,
				-67
			],
			[
				-53,
				38
			],
			[
				54,
				103
			],
			[
				-106,
				55
			],
			[
				45,
				90
			],
			[
				57,
				22
			],
			[
				5,
				132
			],
			[
				75,
				11
			],
			[
				6,
				-128
			],
			[
				42,
				-69
			],
			[
				-39,
				-102
			],
			[
				73,
				-22
			],
			[
				-31,
				-63
			]
		],
		[
			[
				50442,
				83921
			],
			[
				-49,
				-3
			],
			[
				-30,
				10
			],
			[
				-27,
				64
			],
			[
				31,
				34
			],
			[
				56,
				19
			],
			[
				67,
				-14
			],
			[
				0,
				-55
			],
			[
				0,
				-46
			],
			[
				-48,
				-9
			]
		],
		[
			[
				64423,
				86388
			],
			[
				0,
				0
			],
			[
				12,
				138
			],
			[
				80,
				87
			],
			[
				-8,
				37
			],
			[
				-57,
				42
			],
			[
				99,
				152
			],
			[
				80,
				4
			],
			[
				21,
				-69
			],
			[
				60,
				-9
			],
			[
				21,
				108
			],
			[
				41,
				66
			],
			[
				36,
				97
			],
			[
				-40,
				41
			],
			[
				7,
				28
			],
			[
				137,
				70
			],
			[
				61,
				-4
			],
			[
				91,
				64
			],
			[
				10,
				10
			],
			[
				4,
				3
			],
			[
				3,
				3
			],
			[
				-32,
				35
			],
			[
				65,
				128
			],
			[
				473,
				510
			],
			[
				82,
				25
			],
			[
				35,
				70
			],
			[
				224,
				222
			],
			[
				168,
				121
			],
			[
				205,
				24
			],
			[
				103,
				91
			],
			[
				32,
				-8
			]
		],
		[
			[
				63420,
				89936
			],
			[
				-2,
				-216
			],
			[
				138,
				32
			],
			[
				31,
				80
			],
			[
				83,
				-13
			],
			[
				27,
				46
			],
			[
				124,
				-24
			],
			[
				11,
				-35
			],
			[
				-35,
				-86
			],
			[
				-75,
				-177
			],
			[
				-44,
				-16
			],
			[
				-44,
				-61
			],
			[
				120,
				-45
			],
			[
				41,
				62
			],
			[
				76,
				56
			],
			[
				56,
				23
			],
			[
				65,
				3
			],
			[
				-57,
				-70
			],
			[
				-78,
				-50
			],
			[
				15,
				-42
			],
			[
				130,
				32
			],
			[
				64,
				52
			],
			[
				46,
				80
			],
			[
				44,
				3
			],
			[
				22,
				-122
			],
			[
				37,
				-4
			],
			[
				33,
				154
			],
			[
				74,
				45
			],
			[
				48,
				-4
			],
			[
				104,
				-83
			],
			[
				46,
				-110
			],
			[
				-104,
				-109
			],
			[
				-84,
				16
			],
			[
				43,
				-68
			],
			[
				-60,
				-45
			],
			[
				-90,
				3
			],
			[
				-105,
				-19
			],
			[
				-16,
				-31
			],
			[
				-201,
				-11
			],
			[
				-14,
				-45
			],
			[
				181,
				-60
			],
			[
				1,
				-18
			],
			[
				-78,
				-96
			],
			[
				27,
				-28
			],
			[
				78,
				74
			],
			[
				95,
				-39
			],
			[
				-4,
				-40
			],
			[
				90,
				-36
			],
			[
				-26,
				-50
			],
			[
				-66,
				-13
			],
			[
				-142,
				19
			],
			[
				17,
				-93
			],
			[
				1,
				-5
			],
			[
				33,
				-1
			],
			[
				289,
				-3
			],
			[
				30,
				93
			],
			[
				83,
				-48
			],
			[
				-5,
				-30
			],
			[
				47,
				-18
			],
			[
				37,
				35
			],
			[
				15,
				80
			],
			[
				92,
				119
			],
			[
				105,
				57
			],
			[
				66,
				48
			],
			[
				195,
				27
			],
			[
				15,
				-136
			],
			[
				-31,
				-80
			],
			[
				-135,
				-152
			],
			[
				-166,
				-29
			],
			[
				26,
				-68
			],
			[
				-338,
				-143
			],
			[
				-85,
				-11
			],
			[
				-61,
				45
			],
			[
				2,
				17
			],
			[
				8,
				72
			],
			[
				3,
				29
			],
			[
				-12,
				-3
			],
			[
				-126,
				-30
			],
			[
				30,
				-47
			],
			[
				-127,
				-107
			],
			[
				-84,
				36
			],
			[
				-112,
				21
			],
			[
				-101,
				1
			],
			[
				-31,
				-22
			],
			[
				-90,
				96
			],
			[
				-51,
				22
			],
			[
				-81,
				-99
			],
			[
				-88,
				-96
			],
			[
				-14,
				-15
			],
			[
				58,
				-35
			],
			[
				17,
				11
			],
			[
				17,
				11
			],
			[
				52,
				-20
			],
			[
				38,
				-61
			],
			[
				-68,
				-13
			],
			[
				-70,
				-13
			],
			[
				-212,
				49
			],
			[
				-5,
				-72
			],
			[
				-190,
				-42
			],
			[
				-183,
				115
			],
			[
				-13,
				88
			],
			[
				-71,
				36
			],
			[
				29,
				49
			],
			[
				-248,
				118
			],
			[
				19,
				44
			],
			[
				366,
				148
			],
			[
				94,
				7
			],
			[
				-23,
				70
			],
			[
				-233,
				56
			],
			[
				-152,
				-95
			],
			[
				-312,
				-88
			],
			[
				-72,
				16
			],
			[
				-58,
				38
			],
			[
				-52,
				68
			],
			[
				-6,
				82
			],
			[
				141,
				25
			],
			[
				-134,
				42
			],
			[
				7,
				67
			],
			[
				195,
				53
			],
			[
				-11,
				47
			],
			[
				-136,
				67
			],
			[
				1,
				95
			],
			[
				134,
				-46
			],
			[
				181,
				3
			],
			[
				81,
				1
			],
			[
				77,
				-45
			],
			[
				67,
				-15
			],
			[
				36,
				20
			],
			[
				-32,
				42
			],
			[
				-20,
				110
			],
			[
				21,
				40
			],
			[
				107,
				-85
			],
			[
				46,
				14
			],
			[
				-13,
				40
			],
			[
				84,
				20
			],
			[
				122,
				-29
			],
			[
				-3,
				-93
			],
			[
				-29,
				-36
			],
			[
				64,
				7
			],
			[
				68,
				25
			],
			[
				15,
				38
			],
			[
				168,
				-69
			],
			[
				147,
				-132
			],
			[
				-18,
				-24
			],
			[
				2,
				-29
			],
			[
				96,
				34
			],
			[
				6,
				59
			],
			[
				-139,
				104
			],
			[
				-85,
				120
			],
			[
				-148,
				64
			],
			[
				-106,
				88
			],
			[
				60,
				19
			],
			[
				-152,
				75
			],
			[
				-40,
				1
			],
			[
				-26,
				57
			],
			[
				55,
				74
			],
			[
				40,
				-11
			],
			[
				-1,
				-53
			],
			[
				37,
				-34
			],
			[
				163,
				108
			],
			[
				46,
				5
			],
			[
				47,
				27
			],
			[
				40,
				81
			],
			[
				36,
				-14
			]
		],
		[
			[
				64359,
				89022
			],
			[
				-193,
				-17
			],
			[
				-20,
				48
			],
			[
				-7,
				24
			],
			[
				12,
				25
			],
			[
				169,
				7
			],
			[
				28,
				-45
			],
			[
				11,
				-42
			]
		],
		[
			[
				62528,
				89564
			],
			[
				-26,
				-17
			],
			[
				-142,
				71
			],
			[
				-69,
				24
			],
			[
				-11,
				26
			],
			[
				119,
				34
			],
			[
				93,
				-89
			],
			[
				36,
				-49
			]
		],
		[
			[
				63927,
				87043
			],
			[
				-60,
				-24
			],
			[
				-46,
				11
			],
			[
				-14,
				5
			],
			[
				-26,
				16
			],
			[
				-4,
				16
			],
			[
				7,
				15
			],
			[
				48,
				25
			],
			[
				84,
				-12
			],
			[
				21,
				-9
			],
			[
				15,
				-17
			],
			[
				-25,
				-26
			]
		],
		[
			[
				46424,
				79039
			],
			[
				0,
				0
			],
			[
				78,
				4
			],
			[
				166,
				0
			],
			[
				-66,
				35
			],
			[
				-329,
				12
			],
			[
				-56,
				19
			],
			[
				-5,
				4
			],
			[
				-102,
				78
			],
			[
				-144,
				48
			],
			[
				-9,
				3
			],
			[
				-152,
				51
			],
			[
				-71,
				155
			],
			[
				19,
				83
			],
			[
				-32,
				53
			],
			[
				-30,
				49
			],
			[
				-83,
				47
			],
			[
				4,
				84
			],
			[
				84,
				184
			],
			[
				138,
				95
			],
			[
				-29,
				142
			],
			[
				17,
				91
			],
			[
				66,
				95
			],
			[
				109,
				29
			],
			[
				103,
				264
			],
			[
				65,
				48
			],
			[
				60,
				111
			],
			[
				45,
				18
			],
			[
				-9,
				-58
			],
			[
				13,
				-87
			],
			[
				-115,
				-292
			],
			[
				6,
				-17
			],
			[
				4,
				-13
			],
			[
				-34,
				-131
			],
			[
				79,
				26
			],
			[
				39,
				14
			],
			[
				20,
				41
			],
			[
				-5,
				85
			],
			[
				-1,
				7
			],
			[
				117,
				279
			],
			[
				151,
				359
			],
			[
				0,
				1
			],
			[
				81,
				123
			],
			[
				2,
				10
			],
			[
				60,
				243
			],
			[
				5,
				17
			],
			[
				78,
				51
			],
			[
				13,
				-27
			],
			[
				16,
				-33
			],
			[
				-2,
				-140
			],
			[
				-1,
				-28
			],
			[
				-14,
				-36
			],
			[
				-22,
				-57
			],
			[
				5,
				-16
			],
			[
				1,
				0
			],
			[
				11,
				-30
			],
			[
				85,
				-233
			],
			[
				67,
				0
			],
			[
				-9,
				37
			],
			[
				-27,
				120
			],
			[
				-41,
				83
			],
			[
				-22,
				44
			],
			[
				85,
				304
			],
			[
				163,
				151
			],
			[
				-1,
				70
			],
			[
				87,
				16
			],
			[
				96,
				-85
			],
			[
				96,
				-163
			],
			[
				74,
				-280
			],
			[
				63,
				-41
			],
			[
				-25,
				-177
			],
			[
				-59,
				-79
			],
			[
				-31,
				-111
			],
			[
				-7,
				-109
			],
			[
				-55,
				-113
			],
			[
				-102,
				-296
			],
			[
				-51,
				-315
			],
			[
				-63,
				-29
			],
			[
				68,
				-41
			],
			[
				-14,
				-56
			],
			[
				-102,
				-122
			],
			[
				66,
				-16
			],
			[
				1,
				-26
			],
			[
				3,
				-113
			],
			[
				4,
				-4
			],
			[
				7,
				-6
			],
			[
				31,
				-29
			],
			[
				107,
				-32
			],
			[
				39,
				-56
			],
			[
				6,
				-2
			],
			[
				39,
				-14
			],
			[
				8,
				-3
			],
			[
				-13,
				-133
			],
			[
				-4,
				-42
			],
			[
				-75,
				-64
			],
			[
				-6,
				-6
			],
			[
				-13,
				-94
			],
			[
				-64,
				-26
			],
			[
				-47,
				19
			],
			[
				-5,
				2
			],
			[
				-10,
				-14
			],
			[
				-25,
				-37
			],
			[
				-21,
				-1
			],
			[
				-112,
				-5
			],
			[
				1,
				-12
			],
			[
				13,
				-188
			],
			[
				17,
				0
			],
			[
				137,
				-2
			],
			[
				-102,
				-74
			],
			[
				-61,
				-64
			],
			[
				-3,
				-3
			],
			[
				1,
				0
			],
			[
				55,
				-54
			],
			[
				-67,
				-60
			],
			[
				-11,
				-37
			],
			[
				-12,
				-37
			],
			[
				-3,
				-11
			],
			[
				129,
				-23
			],
			[
				-38,
				-133
			],
			[
				-21,
				-73
			],
			[
				-106,
				-72
			],
			[
				-6,
				74
			],
			[
				-9,
				114
			],
			[
				-17,
				5
			],
			[
				-25,
				7
			],
			[
				-54,
				-219
			],
			[
				-6,
				-22
			],
			[
				-13,
				-241
			]
		],
		[
			[
				46758,
				77880
			],
			[
				0,
				0
			],
			[
				-2,
				-30
			],
			[
				-37,
				-83
			],
			[
				-137,
				-94
			],
			[
				-179,
				-84
			],
			[
				-206,
				-179
			],
			[
				35,
				-46
			],
			[
				5,
				-6
			],
			[
				-32,
				-45
			],
			[
				-137,
				-192
			],
			[
				-31,
				-72
			],
			[
				-23,
				-52
			],
			[
				-25,
				-56
			],
			[
				17,
				-37
			],
			[
				63,
				-12
			],
			[
				29,
				-5
			],
			[
				-3,
				9
			],
			[
				-9,
				26
			],
			[
				80,
				28
			],
			[
				8,
				111
			],
			[
				101,
				98
			],
			[
				28,
				59
			],
			[
				67,
				127
			],
			[
				52,
				29
			],
			[
				27,
				14
			],
			[
				36,
				66
			],
			[
				233,
				155
			],
			[
				46,
				30
			],
			[
				106,
				70
			],
			[
				75,
				-51
			],
			[
				117,
				-35
			],
			[
				24,
				19
			],
			[
				10,
				8
			],
			[
				-30,
				54
			],
			[
				34,
				53
			],
			[
				-40,
				143
			],
			[
				66,
				58
			],
			[
				23,
				86
			],
			[
				114,
				141
			],
			[
				6,
				21
			]
		],
		[
			[
				47269,
				78206
			],
			[
				0,
				0
			],
			[
				61,
				248
			],
			[
				94,
				236
			],
			[
				45,
				240
			],
			[
				29,
				137
			],
			[
				56,
				34
			],
			[
				7,
				4
			],
			[
				1,
				-1
			],
			[
				66,
				-34
			],
			[
				49,
				-26
			],
			[
				190,
				-98
			],
			[
				35,
				-64
			],
			[
				1,
				-56
			],
			[
				0,
				-46
			],
			[
				0,
				-4
			],
			[
				14,
				-3
			],
			[
				32,
				-7
			],
			[
				59,
				40
			],
			[
				14,
				-6
			],
			[
				49,
				-19
			],
			[
				13,
				-5
			],
			[
				5,
				-12
			],
			[
				65,
				-152
			],
			[
				62,
				-29
			],
			[
				54,
				-12
			],
			[
				107,
				-24
			],
			[
				152,
				24
			],
			[
				80,
				-62
			],
			[
				71,
				-56
			],
			[
				58,
				-15
			],
			[
				0,
				48
			],
			[
				-123,
				138
			],
			[
				-82,
				31
			],
			[
				-77,
				-1
			],
			[
				-95,
				-17
			],
			[
				-150,
				115
			],
			[
				-97,
				99
			],
			[
				-65,
				109
			],
			[
				-14,
				80
			],
			[
				-43,
				40
			],
			[
				-24,
				22
			],
			[
				-39,
				60
			],
			[
				-12,
				17
			],
			[
				-1,
				1
			],
			[
				-91,
				34
			],
			[
				-84,
				37
			],
			[
				-65,
				182
			],
			[
				66,
				189
			],
			[
				18,
				18
			],
			[
				6,
				6
			],
			[
				39,
				38
			],
			[
				13,
				34
			],
			[
				66,
				173
			],
			[
				-10,
				111
			],
			[
				-21,
				87
			],
			[
				-42,
				46
			],
			[
				-39,
				13
			],
			[
				-29,
				10
			],
			[
				35,
				38
			],
			[
				-91,
				32
			],
			[
				0,
				1
			],
			[
				0,
				0
			]
		],
		[
			[
				47687,
				80229
			],
			[
				-3,
				41
			],
			[
				98,
				26
			],
			[
				52,
				-24
			],
			[
				2,
				-2
			],
			[
				97,
				18
			],
			[
				39,
				49
			],
			[
				103,
				28
			],
			[
				173,
				86
			],
			[
				153,
				6
			],
			[
				37,
				19
			],
			[
				66,
				70
			],
			[
				133,
				121
			],
			[
				16,
				45
			],
			[
				15,
				82
			],
			[
				8,
				41
			],
			[
				-7,
				8
			],
			[
				-37,
				45
			],
			[
				-62,
				31
			],
			[
				-18,
				67
			],
			[
				56,
				102
			],
			[
				85,
				58
			],
			[
				88,
				11
			],
			[
				70,
				56
			],
			[
				12,
				73
			],
			[
				41,
				34
			],
			[
				51,
				25
			],
			[
				103,
				29
			],
			[
				151,
				43
			],
			[
				164,
				165
			],
			[
				113,
				28
			],
			[
				64,
				-25
			],
			[
				-33,
				-109
			],
			[
				-119,
				-46
			],
			[
				-153,
				-108
			],
			[
				-211,
				-287
			],
			[
				-27,
				-38
			],
			[
				-66,
				-58
			],
			[
				-109,
				-48
			],
			[
				56,
				-42
			],
			[
				213,
				25
			],
			[
				51,
				-63
			],
			[
				22,
				-29
			],
			[
				-41,
				-4
			],
			[
				-66,
				-7
			],
			[
				-55,
				-44
			],
			[
				41,
				-89
			],
			[
				35,
				-143
			],
			[
				64,
				-26
			],
			[
				16,
				-6
			],
			[
				32,
				-38
			],
			[
				7,
				-53
			],
			[
				44,
				-23
			],
			[
				26,
				13
			],
			[
				53,
				27
			],
			[
				28,
				28
			],
			[
				65,
				64
			],
			[
				-133,
				108
			],
			[
				-18,
				52
			],
			[
				44,
				52
			],
			[
				79,
				44
			],
			[
				52,
				-6
			],
			[
				37,
				58
			],
			[
				-8,
				82
			],
			[
				-7,
				3
			],
			[
				-71,
				31
			],
			[
				10,
				59
			],
			[
				27,
				63
			],
			[
				105,
				38
			],
			[
				41,
				-9
			],
			[
				83,
				-14
			],
			[
				20,
				2
			],
			[
				92,
				27
			],
			[
				85,
				-48
			],
			[
				30,
				-83
			],
			[
				0,
				-1
			],
			[
				-82,
				-85
			],
			[
				-95,
				-122
			],
			[
				-24,
				-163
			],
			[
				48,
				-10
			],
			[
				3,
				0
			],
			[
				33,
				91
			],
			[
				180,
				148
			],
			[
				44,
				93
			],
			[
				-127,
				205
			],
			[
				-5,
				80
			],
			[
				50,
				55
			],
			[
				95,
				-40
			],
			[
				106,
				0
			],
			[
				141,
				2
			],
			[
				11,
				95
			],
			[
				-217,
				40
			],
			[
				-118,
				70
			],
			[
				-71,
				31
			],
			[
				17,
				63
			],
			[
				42,
				154
			],
			[
				25,
				100
			],
			[
				0,
				0
			]
		],
		[
			[
				49947,
				81746
			],
			[
				2,
				8
			],
			[
				21,
				47
			],
			[
				61,
				140
			],
			[
				59,
				9
			],
			[
				100,
				14
			],
			[
				80,
				51
			],
			[
				98,
				16
			],
			[
				231,
				-49
			],
			[
				53,
				-38
			],
			[
				-7,
				-55
			],
			[
				91,
				-21
			],
			[
				154,
				-117
			],
			[
				3,
				-10
			],
			[
				15,
				-48
			],
			[
				-15,
				-2
			],
			[
				-41,
				-6
			],
			[
				54,
				-89
			],
			[
				90,
				-34
			],
			[
				7,
				-3
			],
			[
				24,
				-39
			],
			[
				20,
				-34
			],
			[
				-45,
				-56
			],
			[
				9,
				-67
			],
			[
				32,
				-68
			],
			[
				95,
				-57
			],
			[
				211,
				-97
			],
			[
				131,
				-60
			],
			[
				47,
				-7
			],
			[
				78,
				-12
			],
			[
				147,
				-134
			],
			[
				-7,
				-30
			],
			[
				48,
				-59
			],
			[
				75,
				-24
			],
			[
				89,
				-8
			],
			[
				-10,
				-24
			],
			[
				-2,
				-4
			],
			[
				-28,
				-28
			],
			[
				25,
				-62
			],
			[
				18,
				-47
			],
			[
				110,
				-160
			],
			[
				11,
				-61
			],
			[
				6,
				-39
			],
			[
				180,
				-98
			],
			[
				54,
				44
			],
			[
				45,
				2
			],
			[
				20,
				-26
			],
			[
				-31,
				-32
			],
			[
				129,
				-104
			],
			[
				-56,
				-31
			],
			[
				54,
				-35
			],
			[
				-164,
				-23
			],
			[
				-91,
				27
			],
			[
				-34,
				-20
			],
			[
				155,
				-73
			],
			[
				80,
				21
			],
			[
				70,
				-19
			],
			[
				19,
				40
			],
			[
				23,
				29
			],
			[
				42,
				18
			],
			[
				109,
				-17
			],
			[
				51,
				42
			],
			[
				-5,
				38
			],
			[
				-282,
				129
			],
			[
				10,
				36
			],
			[
				93,
				-24
			],
			[
				36,
				50
			],
			[
				-58,
				34
			],
			[
				-165,
				153
			],
			[
				-160,
				136
			],
			[
				-7,
				-64
			],
			[
				-53,
				-11
			],
			[
				-164,
				154
			],
			[
				7,
				15
			],
			[
				1,
				5
			],
			[
				25,
				61
			],
			[
				10,
				-4
			],
			[
				153,
				-59
			],
			[
				120,
				26
			],
			[
				58,
				-3
			],
			[
				29,
				32
			],
			[
				13,
				15
			],
			[
				-54,
				84
			],
			[
				-39,
				15
			],
			[
				-94,
				35
			],
			[
				-132,
				20
			],
			[
				-59,
				34
			],
			[
				-39,
				78
			],
			[
				-2,
				77
			],
			[
				0,
				49
			],
			[
				-40,
				27
			],
			[
				-36,
				198
			],
			[
				32,
				51
			],
			[
				126,
				11
			],
			[
				10,
				51
			],
			[
				-5,
				3
			],
			[
				-103,
				59
			],
			[
				-7,
				4
			],
			[
				-29,
				81
			],
			[
				20,
				40
			],
			[
				51,
				16
			],
			[
				175,
				49
			],
			[
				106,
				-2
			],
			[
				74,
				-52
			],
			[
				7,
				-130
			],
			[
				-11,
				-36
			],
			[
				-21,
				-73
			],
			[
				-47,
				-37
			],
			[
				-6,
				-5
			],
			[
				68,
				-17
			],
			[
				47,
				-11
			],
			[
				10,
				-9
			],
			[
				29,
				-24
			],
			[
				14,
				23
			],
			[
				24,
				36
			],
			[
				-50,
				83
			],
			[
				30,
				232
			],
			[
				-83,
				117
			],
			[
				-25,
				50
			],
			[
				58,
				23
			],
			[
				37,
				15
			],
			[
				49,
				5
			],
			[
				31,
				4
			],
			[
				74,
				58
			],
			[
				-43,
				17
			],
			[
				0,
				0
			],
			[
				-210,
				-37
			],
			[
				-270,
				-97
			],
			[
				-142,
				-12
			],
			[
				-77,
				16
			],
			[
				-70,
				59
			],
			[
				-96,
				47
			],
			[
				-41,
				59
			],
			[
				129,
				65
			],
			[
				89,
				50
			],
			[
				52,
				54
			],
			[
				129,
				-9
			],
			[
				162,
				28
			],
			[
				124,
				68
			],
			[
				11,
				52
			],
			[
				68,
				88
			],
			[
				98,
				52
			],
			[
				42,
				135
			],
			[
				-13,
				41
			],
			[
				-51,
				-15
			],
			[
				-57,
				-143
			],
			[
				-77,
				-38
			],
			[
				-23,
				49
			],
			[
				-38,
				-16
			],
			[
				-6,
				-78
			],
			[
				-55,
				-24
			],
			[
				-35,
				-67
			],
			[
				-44,
				-20
			],
			[
				-140,
				7
			],
			[
				-155,
				-38
			],
			[
				-47,
				18
			],
			[
				-37,
				108
			],
			[
				-54,
				-24
			],
			[
				-2,
				-72
			],
			[
				66,
				-63
			],
			[
				-220,
				-95
			],
			[
				-69,
				-8
			],
			[
				-67,
				48
			],
			[
				-341,
				171
			],
			[
				37,
				108
			],
			[
				-63,
				72
			],
			[
				-61,
				-126
			],
			[
				-84,
				-15
			],
			[
				-160,
				33
			],
			[
				-74,
				37
			],
			[
				-7,
				50
			],
			[
				-33,
				91
			],
			[
				-99,
				149
			],
			[
				12,
				32
			],
			[
				112,
				20
			],
			[
				95,
				99
			],
			[
				-15,
				68
			],
			[
				-288,
				-115
			],
			[
				-132,
				-16
			],
			[
				-100,
				22
			],
			[
				-91,
				40
			],
			[
				-64,
				68
			],
			[
				7,
				90
			],
			[
				-84,
				49
			],
			[
				-7,
				17
			],
			[
				-35,
				81
			],
			[
				-43,
				-61
			],
			[
				-40,
				1
			],
			[
				13,
				138
			],
			[
				32,
				11
			]
		],
		[
			[
				52273,
				75566
			],
			[
				-20,
				25
			],
			[
				-7,
				8
			],
			[
				-110,
				129
			],
			[
				-61,
				72
			],
			[
				-45,
				53
			],
			[
				-1,
				1
			],
			[
				-2,
				1
			],
			[
				-167,
				196
			],
			[
				-118,
				153
			],
			[
				-54,
				69
			],
			[
				-61,
				79
			],
			[
				-138,
				178
			],
			[
				-88,
				128
			],
			[
				-37,
				55
			],
			[
				-69,
				99
			],
			[
				-96,
				141
			],
			[
				-124,
				27
			],
			[
				-93,
				20
			],
			[
				-76,
				17
			],
			[
				-59,
				13
			],
			[
				-30,
				7
			],
			[
				-177,
				38
			],
			[
				-229,
				55
			],
			[
				-192,
				46
			],
			[
				0,
				0
			],
			[
				-70,
				17
			]
		],
		[
			[
				50149,
				77193
			],
			[
				-42,
				-26
			],
			[
				-43,
				-27
			],
			[
				-10,
				-7
			],
			[
				-119,
				-74
			],
			[
				-337,
				-213
			],
			[
				-193,
				-181
			]
		],
		[
			[
				49405,
				76665
			],
			[
				-18,
				-16
			],
			[
				-69,
				-66
			],
			[
				-4,
				-16
			],
			[
				-19,
				-84
			],
			[
				-24,
				-107
			],
			[
				65,
				-130
			],
			[
				68,
				-136
			],
			[
				45,
				-90
			],
			[
				27,
				-119
			],
			[
				160,
				-124
			],
			[
				-86,
				-256
			],
			[
				-68,
				-204
			],
			[
				-208,
				113
			],
			[
				-302,
				165
			],
			[
				-22,
				12
			],
			[
				-141,
				79
			],
			[
				-70,
				40
			],
			[
				-34,
				19
			],
			[
				-114,
				65
			],
			[
				-37,
				20
			],
			[
				-20,
				12
			],
			[
				-1,
				0
			],
			[
				-77,
				43
			],
			[
				-34,
				-27
			],
			[
				-21,
				-17
			],
			[
				0,
				-1
			],
			[
				-95,
				-77
			],
			[
				-42,
				-34
			],
			[
				-36,
				-30
			],
			[
				-29,
				-24
			],
			[
				-39,
				-32
			],
			[
				-77,
				-62
			],
			[
				-28,
				-23
			],
			[
				-14,
				-12
			],
			[
				-3,
				-2
			],
			[
				-79,
				-65
			],
			[
				-12,
				-1
			],
			[
				-221,
				-15
			],
			[
				-6,
				0
			],
			[
				-13,
				-1
			],
			[
				-86,
				-6
			],
			[
				-3,
				0
			],
			[
				-411,
				-28
			],
			[
				-328,
				-20
			],
			[
				-75,
				-5
			],
			[
				-79,
				-5
			],
			[
				-251,
				-17
			]
		],
		[
			[
				48459,
				80660
			],
			[
				-18,
				-22
			],
			[
				-74,
				-47
			],
			[
				-116,
				-47
			],
			[
				-159,
				-84
			],
			[
				-93,
				-31
			],
			[
				-40,
				32
			],
			[
				-55,
				72
			],
			[
				-2,
				110
			],
			[
				-47,
				81
			],
			[
				-7,
				79
			],
			[
				34,
				74
			],
			[
				48,
				79
			]
		],
		[
			[
				47930,
				80956
			],
			[
				0,
				0
			],
			[
				20,
				33
			],
			[
				6,
				183
			],
			[
				79,
				74
			],
			[
				139,
				-28
			],
			[
				71,
				1
			],
			[
				253,
				67
			],
			[
				25,
				-57
			],
			[
				-73,
				-85
			],
			[
				-57,
				-31
			],
			[
				-1,
				-98
			],
			[
				-35,
				-94
			],
			[
				126,
				-116
			],
			[
				30,
				-52
			],
			[
				-25,
				-55
			],
			[
				-29,
				-38
			],
			[
				0,
				0
			]
		],
		[
			[
				47389,
				79534
			],
			[
				-53,
				-9
			],
			[
				-34,
				48
			],
			[
				-20,
				81
			],
			[
				36,
				54
			],
			[
				62,
				4
			],
			[
				58,
				-29
			],
			[
				-12,
				-61
			],
			[
				-37,
				-88
			]
		],
		[
			[
				51412,
				81815
			],
			[
				-46,
				1
			],
			[
				-48,
				62
			],
			[
				-64,
				19
			],
			[
				-119,
				53
			],
			[
				-66,
				18
			],
			[
				-87,
				18
			],
			[
				4,
				84
			],
			[
				205,
				114
			],
			[
				121,
				-61
			],
			[
				23,
				-47
			],
			[
				135,
				-65
			],
			[
				50,
				-49
			],
			[
				-5,
				-33
			],
			[
				-56,
				-29
			],
			[
				-12,
				-50
			],
			[
				-35,
				-35
			]
		],
		[
			[
				50419,
				82537
			],
			[
				-52,
				-6
			],
			[
				-161,
				35
			],
			[
				-23,
				64
			],
			[
				21,
				56
			],
			[
				89,
				15
			],
			[
				61,
				-27
			],
			[
				55,
				-56
			],
			[
				10,
				-81
			]
		],
		[
			[
				51520,
				81414
			],
			[
				3,
				-112
			],
			[
				-316,
				58
			],
			[
				-22,
				38
			],
			[
				80,
				31
			],
			[
				78,
				72
			],
			[
				137,
				-8
			],
			[
				40,
				-79
			]
		],
		[
			[
				51854,
				81168
			],
			[
				-37,
				-85
			],
			[
				-173,
				271
			],
			[
				6,
				36
			],
			[
				69,
				-12
			],
			[
				135,
				-210
			]
		],
		[
			[
				47912,
				83381
			],
			[
				41,
				46
			],
			[
				213,
				40
			],
			[
				77,
				-24
			],
			[
				49,
				3
			],
			[
				149,
				45
			],
			[
				141,
				-29
			],
			[
				21,
				-87
			],
			[
				108,
				-39
			],
			[
				2,
				-12
			],
			[
				29,
				-125
			],
			[
				-161,
				-460
			],
			[
				-38,
				-175
			],
			[
				25,
				-57
			],
			[
				51,
				-82
			],
			[
				6,
				-8
			],
			[
				79,
				-105
			],
			[
				2,
				-73
			],
			[
				-213,
				-69
			],
			[
				-225,
				30
			],
			[
				4,
				96
			],
			[
				-56,
				-3
			],
			[
				-21,
				-108
			],
			[
				-38,
				-55
			],
			[
				-138,
				-36
			],
			[
				-112,
				14
			],
			[
				7,
				54
			],
			[
				121,
				218
			],
			[
				-99,
				307
			],
			[
				-43,
				-162
			],
			[
				52,
				-123
			],
			[
				-76,
				-96
			],
			[
				-59,
				48
			],
			[
				-35,
				-20
			],
			[
				26,
				-128
			],
			[
				-108,
				-21
			],
			[
				-71,
				7
			],
			[
				-69,
				62
			],
			[
				-61,
				25
			],
			[
				-92,
				119
			],
			[
				52,
				399
			],
			[
				-32,
				53
			],
			[
				119,
				233
			],
			[
				92,
				69
			],
			[
				116,
				45
			],
			[
				66,
				-18
			],
			[
				49,
				28
			],
			[
				15,
				60
			],
			[
				-17,
				56
			],
			[
				52,
				58
			]
		],
		[
			[
				50070,
				82076
			],
			[
				-77,
				-16
			],
			[
				-98,
				103
			],
			[
				122,
				82
			],
			[
				110,
				-9
			],
			[
				19,
				-99
			],
			[
				-76,
				-61
			]
		],
		[
			[
				49245,
				81958
			],
			[
				-125,
				-51
			],
			[
				-47,
				12
			],
			[
				-7,
				22
			],
			[
				-19,
				58
			],
			[
				28,
				47
			],
			[
				67,
				42
			],
			[
				-2,
				42
			],
			[
				55,
				49
			],
			[
				21,
				106
			],
			[
				67,
				22
			],
			[
				82,
				-125
			],
			[
				-36,
				-40
			],
			[
				-31,
				-5
			],
			[
				-6,
				-18
			],
			[
				-8,
				-25
			],
			[
				49,
				-18
			],
			[
				-88,
				-118
			]
		],
		[
			[
				49085,
				81751
			],
			[
				38,
				-15
			],
			[
				110,
				53
			],
			[
				-44,
				28
			],
			[
				30,
				53
			],
			[
				55,
				-4
			],
			[
				74,
				19
			],
			[
				76,
				37
			],
			[
				12,
				-32
			],
			[
				-27,
				-22
			],
			[
				-3,
				-25
			],
			[
				96,
				39
			],
			[
				23,
				-33
			],
			[
				-95,
				-83
			],
			[
				-139,
				-14
			],
			[
				-76,
				-72
			],
			[
				-100,
				-4
			],
			[
				82,
				-48
			],
			[
				1,
				-40
			],
			[
				-95,
				-113
			],
			[
				-69,
				-28
			],
			[
				-244,
				-96
			],
			[
				-126,
				70
			],
			[
				-122,
				162
			],
			[
				16,
				128
			],
			[
				-128,
				254
			],
			[
				15,
				61
			],
			[
				36,
				28
			],
			[
				196,
				91
			],
			[
				162,
				-43
			],
			[
				1,
				-2
			],
			[
				72,
				-82
			],
			[
				42,
				-76
			],
			[
				69,
				-25
			],
			[
				4,
				-2
			],
			[
				-14,
				-48
			],
			[
				72,
				-116
			]
		],
		[
			[
				48343,
				81533
			],
			[
				-66,
				-84
			],
			[
				-95,
				38
			],
			[
				-41,
				52
			],
			[
				-10,
				50
			],
			[
				30,
				53
			],
			[
				8,
				60
			],
			[
				-15,
				75
			],
			[
				61,
				45
			],
			[
				84,
				-120
			],
			[
				57,
				-62
			],
			[
				-13,
				-107
			]
		],
		[
			[
				48938,
				82350
			],
			[
				-69,
				-30
			],
			[
				-79,
				14
			],
			[
				-149,
				186
			],
			[
				-23,
				134
			],
			[
				156,
				251
			],
			[
				65,
				42
			],
			[
				110,
				-192
			],
			[
				150,
				-201
			],
			[
				-56,
				-94
			],
			[
				-105,
				-110
			]
		],
		[
			[
				71943,
				86527
			],
			[
				0,
				0
			],
			[
				1,
				14
			],
			[
				80,
				-14
			],
			[
				106,
				-49
			],
			[
				29,
				15
			],
			[
				102,
				-26
			],
			[
				43,
				32
			],
			[
				-13,
				29
			],
			[
				-50,
				12
			],
			[
				-91,
				22
			],
			[
				-109,
				93
			],
			[
				-77,
				178
			],
			[
				152,
				166
			],
			[
				122,
				119
			],
			[
				95,
				32
			],
			[
				83,
				36
			],
			[
				14,
				29
			],
			[
				-1,
				22
			],
			[
				-34,
				51
			],
			[
				276,
				406
			],
			[
				51,
				27
			],
			[
				70,
				37
			],
			[
				139,
				100
			],
			[
				420,
				50
			],
			[
				49,
				-96
			],
			[
				182,
				24
			],
			[
				114,
				-13
			],
			[
				37,
				-49
			],
			[
				-29,
				-53
			],
			[
				1,
				-1
			],
			[
				37,
				-16
			],
			[
				88,
				-40
			],
			[
				112,
				-2
			],
			[
				89,
				33
			],
			[
				87,
				-11
			],
			[
				49,
				-38
			],
			[
				-4,
				-30
			],
			[
				19,
				-37
			],
			[
				71,
				-68
			],
			[
				-40,
				-53
			],
			[
				33,
				-46
			],
			[
				3,
				-52
			],
			[
				-51,
				-37
			],
			[
				66,
				-45
			],
			[
				119,
				-2
			],
			[
				130,
				-45
			],
			[
				88,
				-5
			],
			[
				-95,
				-155
			],
			[
				-87,
				-65
			],
			[
				-221,
				-75
			],
			[
				56,
				-32
			],
			[
				-41,
				-67
			],
			[
				51,
				-7
			],
			[
				38,
				35
			],
			[
				63,
				13
			],
			[
				65,
				-54
			],
			[
				222,
				70
			],
			[
				28,
				-43
			],
			[
				-282,
				-91
			],
			[
				-44,
				16
			],
			[
				-68,
				-58
			],
			[
				20,
				-21
			],
			[
				99,
				-46
			],
			[
				110,
				26
			],
			[
				49,
				-26
			],
			[
				-202,
				-111
			],
			[
				-201,
				-89
			],
			[
				40,
				-23
			],
			[
				43,
				14
			],
			[
				50,
				-9
			],
			[
				39,
				-22
			],
			[
				-22,
				-18
			],
			[
				-81,
				-3
			],
			[
				-44,
				-32
			],
			[
				20,
				-2
			],
			[
				118,
				-16
			],
			[
				87,
				101
			],
			[
				56,
				78
			],
			[
				140,
				93
			],
			[
				72,
				-33
			],
			[
				111,
				88
			],
			[
				186,
				-6
			],
			[
				117,
				31
			],
			[
				107,
				28
			],
			[
				154,
				72
			],
			[
				87,
				64
			],
			[
				144,
				43
			],
			[
				126,
				-39
			]
		],
		[
			[
				75711,
				86855
			],
			[
				0,
				0
			],
			[
				28,
				-8
			],
			[
				67,
				13
			],
			[
				40,
				-39
			],
			[
				-26,
				-185
			],
			[
				54,
				-36
			],
			[
				-64,
				-168
			],
			[
				-53,
				-59
			],
			[
				40,
				-30
			],
			[
				-198,
				-143
			],
			[
				-67,
				-48
			],
			[
				-56,
				-80
			],
			[
				73,
				6
			],
			[
				118,
				73
			],
			[
				72,
				24
			],
			[
				88,
				1
			],
			[
				107,
				73
			],
			[
				61,
				92
			],
			[
				113,
				129
			],
			[
				44,
				74
			],
			[
				50,
				10
			],
			[
				53,
				58
			],
			[
				23,
				60
			],
			[
				194,
				48
			],
			[
				228,
				-28
			],
			[
				48,
				-67
			],
			[
				229,
				-90
			],
			[
				89,
				-61
			],
			[
				-37,
				-59
			],
			[
				-255,
				-84
			],
			[
				-11,
				-25
			],
			[
				41,
				-25
			],
			[
				202,
				8
			],
			[
				182,
				-49
			],
			[
				108,
				-89
			],
			[
				154,
				-105
			],
			[
				-41,
				-62
			],
			[
				2,
				-76
			],
			[
				-118,
				-112
			],
			[
				-115,
				-37
			],
			[
				-48,
				4
			],
			[
				-49,
				-47
			],
			[
				35,
				-43
			],
			[
				-50,
				-32
			],
			[
				-148,
				-24
			],
			[
				-234,
				9
			],
			[
				22,
				-57
			],
			[
				172,
				-53
			],
			[
				-69,
				-26
			],
			[
				-137,
				17
			],
			[
				-74,
				-21
			],
			[
				-58,
				37
			],
			[
				-26,
				38
			],
			[
				-73,
				-21
			],
			[
				32,
				-42
			],
			[
				6,
				-7
			],
			[
				80,
				-42
			],
			[
				223,
				-54
			],
			[
				15,
				-62
			],
			[
				64,
				-21
			],
			[
				68,
				64
			],
			[
				143,
				89
			],
			[
				515,
				164
			],
			[
				193,
				25
			],
			[
				95,
				-47
			],
			[
				229,
				-47
			],
			[
				131,
				10
			],
			[
				-15,
				38
			],
			[
				73,
				33
			],
			[
				62,
				-58
			],
			[
				-77,
				-49
			],
			[
				31,
				-85
			],
			[
				-117,
				-96
			],
			[
				287,
				-151
			],
			[
				195,
				-140
			],
			[
				-2,
				-6
			]
		],
		[
			[
				78672,
				85056
			],
			[
				0,
				0
			],
			[
				-50,
				-244
			],
			[
				112,
				15
			],
			[
				32,
				-75
			],
			[
				65,
				-5
			],
			[
				4,
				-1
			],
			[
				25,
				64
			],
			[
				158,
				81
			],
			[
				59,
				-20
			],
			[
				87,
				51
			],
			[
				72,
				18
			],
			[
				88,
				-33
			],
			[
				36,
				-61
			],
			[
				-19,
				-45
			],
			[
				40,
				-41
			],
			[
				61,
				-24
			],
			[
				126,
				-199
			],
			[
				-3,
				-63
			],
			[
				-49,
				-90
			],
			[
				25,
				-48
			],
			[
				79,
				0
			],
			[
				1,
				-7
			],
			[
				7,
				-58
			],
			[
				-34,
				-23
			],
			[
				-3,
				-87
			],
			[
				49,
				-106
			],
			[
				-68,
				-104
			],
			[
				74,
				-108
			],
			[
				-23,
				-32
			],
			[
				-143,
				-27
			],
			[
				-26,
				30
			],
			[
				-50,
				4
			],
			[
				-43,
				-62
			],
			[
				-61,
				-39
			],
			[
				-48,
				23
			],
			[
				-410,
				-113
			],
			[
				-107,
				28
			],
			[
				-125,
				-31
			],
			[
				-27,
				-72
			],
			[
				-62,
				-8
			],
			[
				-74,
				43
			],
			[
				-198,
				-35
			],
			[
				-37,
				23
			],
			[
				-80,
				-23
			],
			[
				-15,
				-51
			],
			[
				-110,
				22
			],
			[
				-92,
				-101
			],
			[
				-28,
				-133
			],
			[
				-61,
				-10
			],
			[
				0,
				0
			]
		],
		[
			[
				77826,
				83279
			],
			[
				-240,
				-41
			],
			[
				-69,
				-25
			],
			[
				-50,
				-75
			],
			[
				-34,
				-51
			],
			[
				-9,
				-100
			],
			[
				84,
				-64
			],
			[
				28,
				-96
			],
			[
				-91,
				-27
			],
			[
				-135,
				-89
			],
			[
				-214,
				-44
			],
			[
				-36,
				-33
			],
			[
				-7,
				-38
			],
			[
				-46,
				-22
			],
			[
				-42,
				24
			],
			[
				-51,
				-11
			],
			[
				-104,
				-48
			],
			[
				-88,
				-82
			],
			[
				35,
				-46
			],
			[
				115,
				-4
			],
			[
				93,
				-60
			],
			[
				-221,
				-8
			],
			[
				-56,
				82
			],
			[
				-239,
				-81
			],
			[
				-211,
				-26
			],
			[
				-166,
				-30
			],
			[
				-160,
				15
			],
			[
				-120,
				72
			],
			[
				-108,
				18
			],
			[
				-120,
				19
			],
			[
				-84,
				35
			],
			[
				-206,
				46
			],
			[
				-181,
				28
			],
			[
				-38,
				-3
			],
			[
				-234,
				48
			],
			[
				-59,
				-6
			],
			[
				-44,
				-36
			],
			[
				-269,
				54
			],
			[
				-39,
				37
			],
			[
				-56,
				52
			],
			[
				-188,
				24
			],
			[
				-61,
				-19
			],
			[
				-27,
				-2
			],
			[
				-68,
				-5
			],
			[
				0,
				0
			]
		],
		[
			[
				74010,
				82661
			],
			[
				-9,
				-1
			],
			[
				-217,
				106
			],
			[
				-76,
				-5
			],
			[
				-45,
				-39
			],
			[
				-177,
				-4
			],
			[
				-131,
				77
			],
			[
				-144,
				38
			],
			[
				-79,
				66
			],
			[
				-25,
				-28
			],
			[
				-122,
				-23
			],
			[
				23,
				48
			],
			[
				-73,
				42
			],
			[
				-85,
				11
			],
			[
				-122,
				89
			],
			[
				-191,
				40
			],
			[
				-78,
				-4
			],
			[
				-63,
				31
			],
			[
				-286,
				-51
			],
			[
				47,
				-49
			],
			[
				4,
				-5
			],
			[
				24,
				-24
			],
			[
				186,
				10
			],
			[
				264,
				12
			],
			[
				78,
				-39
			],
			[
				-75,
				-61
			],
			[
				-230,
				-130
			],
			[
				-185,
				-52
			],
			[
				-73,
				-6
			],
			[
				6,
				-65
			],
			[
				167,
				-52
			],
			[
				38,
				-11
			],
			[
				20,
				-44
			],
			[
				25,
				-5
			],
			[
				35,
				-6
			],
			[
				65,
				29
			],
			[
				52,
				45
			],
			[
				129,
				-7
			],
			[
				126,
				27
			],
			[
				128,
				-39
			],
			[
				29,
				-28
			],
			[
				6,
				-53
			],
			[
				-42,
				-24
			],
			[
				-264,
				27
			],
			[
				-32,
				37
			],
			[
				-35,
				-36
			],
			[
				37,
				-27
			],
			[
				93,
				-68
			],
			[
				63,
				0
			],
			[
				130,
				-1
			],
			[
				27,
				-30
			],
			[
				190,
				10
			],
			[
				148,
				-77
			],
			[
				170,
				-17
			],
			[
				110,
				-45
			],
			[
				67,
				-12
			],
			[
				65,
				49
			],
			[
				47,
				-7
			],
			[
				0,
				-89
			],
			[
				124,
				16
			],
			[
				93,
				-92
			],
			[
				-31,
				-48
			],
			[
				-54,
				-18
			],
			[
				-54,
				-14
			],
			[
				-51,
				-58
			],
			[
				93,
				-44
			],
			[
				94,
				75
			],
			[
				115,
				-53
			],
			[
				69,
				39
			],
			[
				108,
				-40
			],
			[
				117,
				61
			]
		],
		[
			[
				74373,
				82015
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				197,
				-97
			],
			[
				30,
				26
			],
			[
				215,
				-58
			],
			[
				47,
				11
			],
			[
				84,
				-18
			],
			[
				-35,
				-67
			],
			[
				459,
				-103
			],
			[
				52,
				-91
			],
			[
				-72,
				-80
			],
			[
				-143,
				-77
			],
			[
				-114,
				-67
			],
			[
				-208,
				-83
			],
			[
				3,
				-49
			],
			[
				-61,
				-58
			],
			[
				-101,
				-7
			],
			[
				-62,
				-73
			],
			[
				-26,
				-30
			],
			[
				4,
				-4
			],
			[
				45,
				-43
			],
			[
				-17,
				-48
			],
			[
				-174,
				15
			],
			[
				-7,
				-52
			],
			[
				-2,
				-20
			],
			[
				35,
				-10
			],
			[
				71,
				-20
			],
			[
				56,
				-11
			],
			[
				57,
				-11
			],
			[
				-6,
				70
			],
			[
				5,
				1
			],
			[
				40,
				13
			],
			[
				203,
				272
			],
			[
				69,
				69
			],
			[
				232,
				-15
			],
			[
				120,
				-79
			],
			[
				127,
				-20
			],
			[
				-2,
				79
			],
			[
				68,
				13
			],
			[
				86,
				-57
			],
			[
				-22,
				-71
			],
			[
				89,
				-59
			],
			[
				4,
				-45
			],
			[
				-17,
				-139
			],
			[
				-33,
				-52
			],
			[
				108,
				-132
			],
			[
				-53,
				-43
			],
			[
				-68,
				-18
			],
			[
				54,
				-57
			],
			[
				-40,
				-37
			],
			[
				-47,
				-20
			],
			[
				-2,
				-2
			],
			[
				-95,
				-119
			],
			[
				-46,
				-112
			],
			[
				-101,
				-42
			],
			[
				-56,
				21
			],
			[
				-37,
				-37
			],
			[
				48,
				-58
			],
			[
				75,
				8
			],
			[
				-22,
				-69
			],
			[
				-20,
				-3
			],
			[
				-53,
				-8
			],
			[
				-50,
				-80
			],
			[
				-15,
				-24
			],
			[
				-112,
				-175
			],
			[
				-16,
				-26
			],
			[
				-110,
				41
			],
			[
				-9,
				4
			],
			[
				-34,
				-34
			],
			[
				-66,
				1
			],
			[
				-84,
				1
			],
			[
				-117,
				2
			],
			[
				-48,
				-4
			],
			[
				53,
				-35
			],
			[
				182,
				-14
			],
			[
				36,
				-2
			],
			[
				34,
				11
			],
			[
				73,
				25
			],
			[
				17,
				-47
			],
			[
				-58,
				-91
			],
			[
				-58,
				-91
			],
			[
				-83,
				-44
			],
			[
				28,
				-30
			],
			[
				50,
				-12
			],
			[
				52,
				18
			],
			[
				103,
				99
			],
			[
				65,
				132
			],
			[
				74,
				61
			],
			[
				30,
				13
			],
			[
				57,
				24
			],
			[
				71,
				151
			],
			[
				93,
				85
			],
			[
				85,
				8
			],
			[
				209,
				53
			],
			[
				225,
				-28
			],
			[
				66,
				-48
			],
			[
				41,
				-29
			],
			[
				31,
				56
			],
			[
				66,
				115
			],
			[
				161,
				75
			],
			[
				251,
				83
			],
			[
				68,
				-75
			],
			[
				-125,
				-214
			],
			[
				-126,
				-86
			],
			[
				-143,
				-63
			],
			[
				-75,
				-61
			],
			[
				-54,
				-6
			],
			[
				-28,
				-3
			],
			[
				-3,
				-150
			],
			[
				26,
				-61
			],
			[
				3,
				-7
			],
			[
				29,
				-15
			],
			[
				20,
				-32
			],
			[
				-8,
				-103
			],
			[
				17,
				-190
			],
			[
				37,
				-230
			],
			[
				6,
				-2
			],
			[
				50,
				-20
			],
			[
				-9,
				94
			],
			[
				-51,
				487
			],
			[
				-17,
				166
			],
			[
				28,
				13
			],
			[
				61,
				27
			],
			[
				65,
				43
			],
			[
				102,
				71
			],
			[
				43,
				29
			],
			[
				49,
				33
			],
			[
				116,
				6
			],
			[
				-35,
				-69
			],
			[
				44,
				-84
			],
			[
				35,
				-99
			],
			[
				18,
				-47
			],
			[
				30,
				-82
			],
			[
				27,
				-10
			],
			[
				23,
				-7
			],
			[
				-2,
				9
			],
			[
				-8,
				42
			],
			[
				-20,
				50
			],
			[
				-5,
				12
			],
			[
				-14,
				142
			],
			[
				45,
				67
			],
			[
				2,
				18
			],
			[
				3,
				38
			],
			[
				-55,
				35
			],
			[
				-7,
				4
			],
			[
				-33,
				163
			],
			[
				160,
				44
			],
			[
				150,
				42
			],
			[
				-21,
				115
			],
			[
				-8,
				41
			],
			[
				-115,
				117
			],
			[
				63,
				94
			],
			[
				-126,
				182
			],
			[
				49,
				152
			],
			[
				153,
				57
			],
			[
				85,
				-37
			],
			[
				96,
				14
			],
			[
				28,
				28
			],
			[
				99,
				-14
			],
			[
				97,
				-95
			],
			[
				-66,
				-73
			],
			[
				-238,
				-79
			],
			[
				7,
				-62
			],
			[
				283,
				55
			],
			[
				70,
				35
			],
			[
				61,
				-21
			],
			[
				47,
				-204
			],
			[
				-2,
				-211
			],
			[
				41,
				4
			],
			[
				25,
				-242
			],
			[
				-7,
				-188
			],
			[
				11,
				-55
			],
			[
				29,
				-148
			],
			[
				-94,
				-37
			],
			[
				-99,
				-56
			],
			[
				-124,
				-12
			],
			[
				-32,
				-25
			],
			[
				236,
				-35
			],
			[
				189,
				62
			],
			[
				38,
				67
			],
			[
				-41,
				46
			],
			[
				-26,
				230
			],
			[
				-1,
				10
			],
			[
				2,
				6
			],
			[
				22,
				58
			],
			[
				29,
				-24
			],
			[
				44,
				5
			],
			[
				-17,
				94
			],
			[
				-73,
				76
			],
			[
				-16,
				17
			],
			[
				22,
				140
			],
			[
				-63,
				143
			],
			[
				14,
				74
			],
			[
				242,
				71
			],
			[
				89,
				-79
			],
			[
				68,
				18
			],
			[
				61,
				-33
			],
			[
				77,
				-87
			],
			[
				38,
				18
			],
			[
				-33,
				94
			],
			[
				90,
				-24
			],
			[
				115,
				5
			],
			[
				-60,
				-83
			],
			[
				51,
				-49
			],
			[
				79,
				69
			],
			[
				68,
				8
			],
			[
				51,
				-24
			],
			[
				-39,
				-81
			],
			[
				-48,
				1
			],
			[
				-58,
				-31
			],
			[
				19,
				-53
			],
			[
				-30,
				-74
			],
			[
				105,
				-22
			],
			[
				30,
				72
			],
			[
				206,
				134
			],
			[
				83,
				-11
			],
			[
				26,
				-55
			],
			[
				33,
				-43
			],
			[
				32,
				-42
			],
			[
				-2,
				-25
			],
			[
				-3,
				-27
			],
			[
				0,
				-5
			],
			[
				2,
				2
			],
			[
				12,
				9
			],
			[
				7,
				6
			],
			[
				27,
				-33
			],
			[
				-8,
				-17
			],
			[
				-9,
				-18
			],
			[
				-1,
				-2
			],
			[
				2,
				0
			],
			[
				15,
				8
			],
			[
				17,
				8
			],
			[
				0,
				-37
			],
			[
				0,
				-32
			],
			[
				0,
				-9
			],
			[
				0,
				-17
			],
			[
				44,
				-24
			],
			[
				10,
				-6
			],
			[
				0,
				0
			],
			[
				0,
				-49
			],
			[
				0,
				-69
			],
			[
				0,
				0
			],
			[
				-22,
				-13
			],
			[
				-28,
				-18
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				16,
				-20
			],
			[
				44,
				-55
			],
			[
				11,
				-13
			],
			[
				14,
				-17
			],
			[
				82,
				-100
			],
			[
				2,
				-3
			],
			[
				16,
				12
			],
			[
				4,
				3
			],
			[
				11,
				-11
			],
			[
				14,
				-14
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				3,
				-39
			],
			[
				2,
				-22
			],
			[
				-8,
				3
			],
			[
				-28,
				11
			],
			[
				-2,
				-2
			],
			[
				-8,
				-12
			],
			[
				-24,
				-35
			],
			[
				-1,
				-2
			],
			[
				0,
				0
			],
			[
				12,
				-30
			],
			[
				15,
				-39
			],
			[
				0,
				-2
			],
			[
				50,
				-130
			],
			[
				1,
				-2
			],
			[
				14,
				-36
			],
			[
				3,
				-9
			],
			[
				0,
				-1
			],
			[
				-1,
				-16
			],
			[
				-7,
				-96
			],
			[
				-7,
				-95
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				-14,
				-16
			],
			[
				-19,
				-22
			],
			[
				0,
				0
			],
			[
				18,
				-102
			],
			[
				1,
				-7
			],
			[
				5,
				-28
			],
			[
				-23,
				-60
			],
			[
				-19,
				-51
			],
			[
				0,
				0
			],
			[
				-78,
				-48
			],
			[
				-54,
				-33
			],
			[
				-139,
				-85
			],
			[
				-19,
				-11
			],
			[
				-25,
				-16
			],
			[
				-20,
				-12
			],
			[
				-12,
				-7
			],
			[
				-7,
				1
			],
			[
				-5,
				0
			],
			[
				-46,
				7
			],
			[
				-84,
				12
			],
			[
				-28,
				4
			],
			[
				-45,
				6
			],
			[
				-159,
				33
			],
			[
				-181,
				5
			],
			[
				-354,
				11
			],
			[
				0,
				0
			],
			[
				-186,
				212
			],
			[
				-110,
				125
			],
			[
				-160,
				118
			],
			[
				-344,
				255
			],
			[
				-51,
				37
			],
			[
				-247,
				131
			],
			[
				-122,
				-47
			],
			[
				-64,
				-24
			],
			[
				-14,
				-6
			],
			[
				18,
				-104
			],
			[
				140,
				5
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				3,
				-17
			],
			[
				42,
				-215
			],
			[
				7,
				-19
			],
			[
				101,
				-260
			],
			[
				-36,
				-211
			],
			[
				-161,
				-136
			],
			[
				-27,
				-244
			],
			[
				9,
				-80
			],
			[
				-195,
				-231
			],
			[
				-132,
				-137
			],
			[
				-174,
				-71
			],
			[
				-45,
				7
			],
			[
				-6,
				9
			],
			[
				-15,
				21
			],
			[
				-20,
				28
			],
			[
				-16,
				22
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				-14,
				3
			],
			[
				-58,
				12
			],
			[
				-14,
				3
			],
			[
				-90,
				19
			],
			[
				-2,
				1
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				-2,
				-2
			],
			[
				-57,
				-36
			],
			[
				-33,
				-21
			],
			[
				-28,
				-17
			],
			[
				-64,
				-42
			],
			[
				-3,
				-5
			],
			[
				-19,
				-42
			],
			[
				-6,
				-13
			],
			[
				0,
				0
			],
			[
				-12,
				-3
			],
			[
				-77,
				-22
			],
			[
				-11,
				-3
			],
			[
				-56,
				-16
			],
			[
				-6,
				-2
			],
			[
				-20,
				-6
			],
			[
				-8,
				-2
			],
			[
				-1,
				0
			],
			[
				0,
				-1
			],
			[
				-35,
				-59
			],
			[
				-20,
				-45
			],
			[
				-34,
				-74
			],
			[
				-379,
				-312
			],
			[
				-104,
				3
			],
			[
				-21,
				44
			],
			[
				-1,
				2
			],
			[
				-7,
				14
			],
			[
				-7,
				15
			],
			[
				0,
				0
			],
			[
				-1,
				0
			],
			[
				-111,
				-48
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				-36,
				-4
			],
			[
				-117,
				-13
			],
			[
				-56,
				-6
			],
			[
				-61,
				36
			],
			[
				-325,
				-189
			],
			[
				-35,
				-255
			],
			[
				35,
				-85
			],
			[
				75,
				-59
			],
			[
				1,
				-62
			],
			[
				-27,
				-131
			],
			[
				-32,
				-18
			],
			[
				-24,
				-209
			],
			[
				-47,
				-72
			],
			[
				-66,
				-26
			],
			[
				28,
				-54
			],
			[
				-13,
				-26
			],
			[
				-42,
				-84
			],
			[
				0,
				0
			],
			[
				-7,
				-84
			],
			[
				-3,
				-36
			],
			[
				0,
				0
			],
			[
				0,
				-1
			],
			[
				7,
				-18
			],
			[
				4,
				-10
			],
			[
				7,
				-16
			],
			[
				-223,
				-281
			],
			[
				-15,
				-20
			],
			[
				-11,
				-13
			],
			[
				-52,
				-27
			],
			[
				-122,
				-135
			],
			[
				-22,
				-25
			],
			[
				-60,
				-86
			],
			[
				-54,
				-79
			],
			[
				0,
				-1
			],
			[
				-46,
				-30
			],
			[
				-36,
				55
			],
			[
				-8,
				11
			],
			[
				-20,
				30
			],
			[
				-1,
				2
			],
			[
				0,
				0
			],
			[
				-4,
				3
			],
			[
				-54,
				36
			],
			[
				-11,
				7
			],
			[
				-23,
				15
			],
			[
				-46,
				31
			],
			[
				-43,
				29
			],
			[
				-45,
				30
			],
			[
				-47,
				31
			],
			[
				-156,
				117
			],
			[
				-64,
				48
			],
			[
				-6,
				4
			],
			[
				-45,
				72
			],
			[
				-8,
				12
			],
			[
				-4,
				7
			],
			[
				-91,
				144
			],
			[
				15,
				79
			],
			[
				46,
				254
			],
			[
				14,
				80
			],
			[
				2,
				122
			],
			[
				1,
				147
			],
			[
				1,
				88
			],
			[
				0,
				0
			],
			[
				4,
				4
			],
			[
				175,
				176
			],
			[
				120,
				120
			],
			[
				188,
				190
			],
			[
				195,
				198
			],
			[
				151,
				152
			],
			[
				27,
				28
			],
			[
				125,
				126
			],
			[
				184,
				186
			],
			[
				72,
				113
			],
			[
				39,
				59
			],
			[
				31,
				49
			],
			[
				52,
				81
			],
			[
				34,
				53
			],
			[
				125,
				194
			],
			[
				-62,
				138
			],
			[
				-80,
				175
			],
			[
				-7,
				17
			],
			[
				-38,
				83
			],
			[
				-10,
				20
			],
			[
				-49,
				106
			],
			[
				-65,
				143
			],
			[
				-30,
				67
			],
			[
				-10,
				21
			],
			[
				-50,
				109
			],
			[
				-8,
				19
			],
			[
				-21,
				45
			],
			[
				-41,
				88
			],
			[
				-29,
				63
			],
			[
				-37,
				130
			],
			[
				-2,
				5
			],
			[
				-26,
				93
			],
			[
				-8,
				27
			],
			[
				-1,
				2
			],
			[
				-26,
				92
			],
			[
				-10,
				35
			],
			[
				-3,
				1
			],
			[
				-16,
				5
			],
			[
				-57,
				21
			],
			[
				-228,
				82
			],
			[
				-131,
				47
			],
			[
				-219,
				78
			],
			[
				-68,
				28
			],
			[
				-224,
				90
			],
			[
				-47,
				19
			],
			[
				-9,
				4
			],
			[
				-109,
				44
			],
			[
				-232,
				93
			],
			[
				-133,
				51
			],
			[
				-6,
				3
			],
			[
				-37,
				14
			],
			[
				-80,
				30
			],
			[
				-267,
				102
			],
			[
				-79,
				30
			],
			[
				-136,
				51
			],
			[
				-119,
				45
			],
			[
				-46,
				43
			],
			[
				-15,
				14
			],
			[
				-93,
				87
			],
			[
				-69,
				65
			]
		],
		[
			[
				71407,
				80851
			],
			[
				24,
				116
			],
			[
				20,
				98
			],
			[
				0,
				1
			]
		],
		[
			[
				72780,
				82785
			],
			[
				-61,
				-34
			],
			[
				-100,
				19
			],
			[
				14,
				46
			],
			[
				35,
				-8
			],
			[
				42,
				-12
			],
			[
				36,
				39
			],
			[
				51,
				-6
			],
			[
				70,
				-17
			],
			[
				-16,
				-31
			],
			[
				-71,
				4
			]
		],
		[
			[
				79763,
				84429
			],
			[
				1,
				-3
			],
			[
				44,
				45
			],
			[
				33,
				-21
			],
			[
				7,
				-97
			],
			[
				-100,
				-1
			],
			[
				-2,
				4
			],
			[
				-81,
				126
			],
			[
				-33,
				165
			],
			[
				63,
				-9
			],
			[
				68,
				-209
			]
		],
		[
			[
				79969,
				84522
			],
			[
				-44,
				-38
			],
			[
				-85,
				35
			],
			[
				-32,
				17
			],
			[
				39,
				53
			],
			[
				57,
				4
			],
			[
				65,
				-71
			]
		],
		[
			[
				69373,
				89593
			],
			[
				0,
				0
			],
			[
				13,
				-2
			],
			[
				18,
				-48
			],
			[
				127,
				-87
			],
			[
				66,
				10
			],
			[
				71,
				-25
			],
			[
				-103,
				-166
			],
			[
				34,
				-11
			],
			[
				-147,
				-148
			],
			[
				128,
				7
			],
			[
				-7,
				-84
			],
			[
				91,
				-13
			],
			[
				134,
				163
			],
			[
				61,
				-96
			],
			[
				-90,
				-110
			],
			[
				106,
				-74
			],
			[
				2,
				-1
			],
			[
				20,
				26
			],
			[
				21,
				57
			],
			[
				44,
				42
			],
			[
				55,
				12
			],
			[
				-7,
				-123
			],
			[
				347,
				347
			],
			[
				-54,
				-154
			],
			[
				5,
				-9
			],
			[
				15,
				-33
			],
			[
				30,
				-14
			],
			[
				56,
				68
			],
			[
				17,
				20
			],
			[
				39,
				74
			],
			[
				79,
				55
			],
			[
				61,
				6
			],
			[
				-20,
				-255
			],
			[
				0,
				-11
			],
			[
				53,
				-11
			],
			[
				169,
				242
			],
			[
				73,
				66
			],
			[
				107,
				25
			],
			[
				47,
				-39
			],
			[
				124,
				-31
			],
			[
				28,
				-127
			],
			[
				27,
				-119
			],
			[
				-107,
				-75
			],
			[
				-90,
				-27
			],
			[
				-74,
				7
			],
			[
				-25,
				-9
			],
			[
				42,
				-27
			],
			[
				82,
				-18
			],
			[
				-112,
				-220
			],
			[
				-18,
				-92
			],
			[
				12,
				-15
			],
			[
				64,
				128
			],
			[
				81,
				75
			],
			[
				23,
				-56
			],
			[
				-95,
				-182
			],
			[
				-39,
				-68
			],
			[
				-2,
				-35
			],
			[
				53,
				0
			],
			[
				83,
				126
			],
			[
				44,
				-33
			],
			[
				130,
				123
			],
			[
				63,
				96
			],
			[
				48,
				-17
			],
			[
				105,
				12
			],
			[
				160,
				-4
			],
			[
				87,
				-28
			],
			[
				67,
				-29
			],
			[
				193,
				-41
			],
			[
				60,
				-70
			],
			[
				16,
				-78
			],
			[
				-120,
				-367
			],
			[
				-61,
				-45
			],
			[
				-40,
				-113
			],
			[
				-150,
				-30
			],
			[
				-178,
				49
			],
			[
				-78,
				-26
			],
			[
				22,
				-28
			],
			[
				109,
				-12
			],
			[
				72,
				-30
			],
			[
				155,
				-14
			],
			[
				-159,
				-175
			],
			[
				-100,
				-6
			],
			[
				-108,
				32
			],
			[
				-32,
				-20
			],
			[
				138,
				-81
			],
			[
				-66,
				-95
			],
			[
				-55,
				-15
			],
			[
				-110,
				26
			],
			[
				-6,
				25
			],
			[
				-88,
				45
			],
			[
				-128,
				41
			],
			[
				-30,
				-28
			],
			[
				93,
				-28
			],
			[
				50,
				-60
			],
			[
				161,
				-103
			],
			[
				-269,
				-166
			],
			[
				-214,
				33
			],
			[
				-126,
				8
			],
			[
				-43,
				15
			],
			[
				25,
				67
			],
			[
				-50,
				-6
			],
			[
				-43,
				-43
			],
			[
				7,
				-51
			],
			[
				-175,
				46
			],
			[
				-40,
				97
			],
			[
				11,
				40
			],
			[
				-50,
				-6
			],
			[
				-89,
				-21
			],
			[
				-12,
				-78
			],
			[
				-100,
				-41
			],
			[
				-144,
				32
			],
			[
				-54,
				-20
			],
			[
				-126,
				11
			],
			[
				-97,
				-23
			],
			[
				-98,
				43
			],
			[
				-43,
				0
			],
			[
				-22,
				-37
			],
			[
				119,
				-50
			],
			[
				110,
				-9
			],
			[
				63,
				-17
			],
			[
				9,
				-28
			],
			[
				-77,
				-82
			],
			[
				-70,
				-36
			],
			[
				-86,
				-80
			],
			[
				-8,
				-41
			],
			[
				48,
				-8
			],
			[
				306,
				189
			],
			[
				100,
				13
			],
			[
				87,
				-8
			],
			[
				112,
				-24
			],
			[
				25,
				-26
			],
			[
				149,
				-28
			],
			[
				-5,
				-25
			],
			[
				-67,
				-91
			],
			[
				-3,
				-28
			],
			[
				51,
				18
			],
			[
				86,
				98
			],
			[
				65,
				-4
			],
			[
				93,
				-35
			],
			[
				102,
				-62
			],
			[
				30,
				-48
			],
			[
				-7,
				-23
			],
			[
				-94,
				-88
			],
			[
				-84,
				-15
			],
			[
				2,
				-41
			],
			[
				-66,
				-57
			],
			[
				-58,
				-12
			],
			[
				-60,
				-49
			],
			[
				-112,
				-24
			],
			[
				-2,
				-28
			],
			[
				-56,
				-19
			],
			[
				-101,
				-6
			],
			[
				-64,
				-42
			],
			[
				-65,
				-7
			],
			[
				-118,
				-56
			],
			[
				27,
				-28
			],
			[
				70,
				-7
			],
			[
				11,
				-37
			],
			[
				-257,
				-123
			],
			[
				-123,
				-8
			],
			[
				-89,
				-57
			],
			[
				-144,
				-24
			],
			[
				-94,
				-5
			],
			[
				-31,
				-19
			],
			[
				95,
				-50
			],
			[
				215,
				17
			],
			[
				248,
				82
			],
			[
				213,
				41
			],
			[
				125,
				72
			],
			[
				307,
				118
			],
			[
				305,
				130
			],
			[
				78,
				36
			],
			[
				108,
				132
			],
			[
				84,
				30
			],
			[
				39,
				39
			],
			[
				106,
				24
			],
			[
				18,
				-17
			]
		],
		[
			[
				75950,
				81279
			],
			[
				128,
				-63
			],
			[
				110,
				16
			],
			[
				150,
				-85
			],
			[
				91,
				-93
			],
			[
				-4,
				-162
			],
			[
				68,
				-39
			],
			[
				-29,
				-113
			],
			[
				-179,
				4
			],
			[
				-117,
				-24
			],
			[
				-11,
				-100
			],
			[
				58,
				-20
			],
			[
				56,
				65
			],
			[
				151,
				-5
			],
			[
				29,
				-37
			],
			[
				62,
				19
			],
			[
				21,
				65
			],
			[
				136,
				49
			],
			[
				59,
				-97
			],
			[
				-10,
				-40
			],
			[
				-55,
				-29
			],
			[
				-44,
				4
			],
			[
				-107,
				-42
			],
			[
				-28,
				-43
			],
			[
				-154,
				-48
			],
			[
				-183,
				-105
			],
			[
				-80,
				-57
			],
			[
				-73,
				81
			],
			[
				-70,
				-18
			],
			[
				76,
				-121
			],
			[
				-76,
				-23
			],
			[
				-156,
				12
			],
			[
				-236,
				-18
			],
			[
				81,
				137
			],
			[
				40,
				152
			],
			[
				112,
				126
			],
			[
				62,
				-41
			],
			[
				33,
				289
			],
			[
				-30,
				242
			],
			[
				5,
				126
			],
			[
				114,
				36
			]
		],
		[
			[
				76755,
				81106
			],
			[
				-82,
				-125
			],
			[
				76,
				-61
			],
			[
				-81,
				-43
			],
			[
				-116,
				12
			],
			[
				-32,
				172
			],
			[
				-17,
				41
			],
			[
				13,
				37
			],
			[
				81,
				-16
			],
			[
				59,
				-39
			],
			[
				32,
				11
			],
			[
				67,
				11
			]
		],
		[
			[
				76810,
				80387
			],
			[
				-46,
				9
			],
			[
				-4,
				45
			],
			[
				19,
				59
			],
			[
				62,
				34
			],
			[
				39,
				-14
			],
			[
				12,
				-36
			],
			[
				72,
				-67
			],
			[
				-38,
				-11
			],
			[
				-116,
				-19
			]
		],
		[
			[
				63054,
				86707
			],
			[
				-36,
				-32
			],
			[
				-75,
				10
			],
			[
				-39,
				-82
			],
			[
				-149,
				-146
			],
			[
				-196,
				-20
			],
			[
				32,
				-81
			],
			[
				-345,
				-442
			],
			[
				-114,
				-9
			],
			[
				-55,
				-167
			],
			[
				-155,
				-81
			],
			[
				-146,
				-127
			],
			[
				-118,
				-16
			],
			[
				-81,
				-125
			],
			[
				-45,
				-69
			],
			[
				60,
				11
			],
			[
				52,
				46
			],
			[
				384,
				98
			],
			[
				62,
				-54
			],
			[
				-70,
				-142
			],
			[
				-154,
				-55
			],
			[
				-128,
				15
			],
			[
				-45,
				5
			],
			[
				-91,
				31
			],
			[
				-48,
				-76
			],
			[
				-2,
				-3
			],
			[
				68,
				-112
			],
			[
				291,
				42
			],
			[
				130,
				19
			],
			[
				0,
				-2
			],
			[
				1,
				-77
			],
			[
				23,
				2
			],
			[
				100,
				12
			],
			[
				36,
				-24
			],
			[
				-138,
				-55
			],
			[
				-57,
				-128
			],
			[
				-121,
				-98
			],
			[
				-29,
				-25
			],
			[
				17,
				-13
			],
			[
				52,
				-40
			],
			[
				179,
				-25
			],
			[
				-8,
				-125
			],
			[
				-70,
				-31
			],
			[
				-58,
				40
			],
			[
				-77,
				-23
			],
			[
				13,
				103
			],
			[
				-64,
				2
			],
			[
				-26,
				1
			],
			[
				-188,
				-263
			],
			[
				-135,
				-90
			],
			[
				43,
				-16
			],
			[
				34,
				-12
			],
			[
				117,
				83
			],
			[
				71,
				-2
			],
			[
				-143,
				-115
			],
			[
				-22,
				-111
			],
			[
				-54,
				-66
			],
			[
				47,
				-34
			],
			[
				152,
				96
			],
			[
				61,
				38
			],
			[
				118,
				-48
			],
			[
				-28,
				-220
			],
			[
				-99,
				-43
			],
			[
				-26,
				10
			],
			[
				-56,
				21
			],
			[
				13,
				-85
			],
			[
				-140,
				-127
			],
			[
				-112,
				11
			],
			[
				-5,
				1
			],
			[
				-1,
				-6
			],
			[
				-14,
				-64
			],
			[
				-269,
				-143
			],
			[
				8,
				-162
			],
			[
				-64,
				-47
			],
			[
				40,
				-108
			],
			[
				9,
				-8
			],
			[
				79,
				-68
			],
			[
				-100,
				-55
			],
			[
				-74,
				-81
			],
			[
				27,
				-59
			],
			[
				3,
				-201
			],
			[
				0,
				-2
			],
			[
				4,
				-231
			],
			[
				178,
				-22
			],
			[
				59,
				-48
			],
			[
				-28,
				-104
			],
			[
				91,
				18
			],
			[
				50,
				10
			],
			[
				10,
				169
			],
			[
				-75,
				54
			],
			[
				-89,
				51
			],
			[
				28,
				189
			],
			[
				115,
				186
			],
			[
				82,
				-72
			],
			[
				99,
				97
			],
			[
				22,
				-122
			],
			[
				-101,
				-42
			],
			[
				-3,
				-90
			],
			[
				76,
				12
			],
			[
				93,
				107
			],
			[
				92,
				-36
			],
			[
				14,
				-59
			],
			[
				-64,
				-7
			],
			[
				-75,
				-72
			],
			[
				-125,
				15
			],
			[
				30,
				-45
			],
			[
				14,
				-102
			],
			[
				10,
				-83
			],
			[
				108,
				-97
			],
			[
				9,
				-2
			],
			[
				90,
				-15
			],
			[
				89,
				112
			],
			[
				55,
				24
			],
			[
				82,
				35
			],
			[
				23,
				139
			],
			[
				0,
				0
			],
			[
				3,
				17
			],
			[
				1,
				3
			],
			[
				59,
				113
			],
			[
				-28,
				46
			],
			[
				-2,
				2
			],
			[
				2,
				1
			],
			[
				77,
				57
			],
			[
				34,
				110
			],
			[
				5,
				15
			],
			[
				-14,
				56
			],
			[
				21,
				53
			],
			[
				46,
				118
			],
			[
				38,
				-31
			],
			[
				22,
				-38
			],
			[
				104,
				79
			],
			[
				131,
				184
			],
			[
				21,
				156
			],
			[
				137,
				87
			],
			[
				10,
				6
			],
			[
				49,
				31
			],
			[
				51,
				32
			],
			[
				107,
				128
			],
			[
				-15,
				-3
			],
			[
				-75,
				-13
			],
			[
				46,
				97
			],
			[
				46,
				64
			],
			[
				-177,
				-21
			],
			[
				-115,
				81
			],
			[
				-102,
				3
			],
			[
				-12,
				84
			],
			[
				122,
				70
			],
			[
				25,
				148
			],
			[
				86,
				35
			],
			[
				85,
				82
			],
			[
				14,
				122
			],
			[
				50,
				-9
			],
			[
				34,
				-76
			],
			[
				74,
				60
			],
			[
				-52,
				58
			],
			[
				29,
				42
			],
			[
				89,
				19
			],
			[
				22,
				83
			],
			[
				95,
				82
			],
			[
				9,
				120
			],
			[
				81,
				31
			],
			[
				65,
				149
			],
			[
				6,
				63
			],
			[
				110,
				82
			],
			[
				124,
				63
			],
			[
				369,
				407
			],
			[
				60,
				-12
			],
			[
				101,
				67
			],
			[
				20,
				59
			],
			[
				140,
				100
			],
			[
				25,
				17
			],
			[
				-29,
				135
			],
			[
				35,
				88
			],
			[
				93,
				132
			],
			[
				2,
				22
			]
		],
		[
			[
				66436,
				88474
			],
			[
				0,
				0
			],
			[
				72,
				-19
			],
			[
				-54,
				-41
			],
			[
				114,
				-170
			],
			[
				-78,
				-101
			],
			[
				54,
				-52
			],
			[
				39,
				-3
			],
			[
				-3,
				-65
			],
			[
				-32,
				-15
			],
			[
				-27,
				-135
			],
			[
				-131,
				-117
			],
			[
				-27,
				-60
			],
			[
				41,
				-15
			],
			[
				-13,
				-94
			],
			[
				-38,
				-35
			],
			[
				34,
				-31
			],
			[
				201,
				103
			],
			[
				1,
				-137
			],
			[
				-63,
				-4
			],
			[
				21,
				-137
			],
			[
				-107,
				-118
			],
			[
				-30,
				-92
			],
			[
				36,
				-96
			],
			[
				-21,
				-93
			],
			[
				-164,
				-134
			],
			[
				-322,
				-186
			],
			[
				-189,
				-79
			],
			[
				-159,
				-30
			],
			[
				-76,
				-102
			],
			[
				-42,
				-34
			],
			[
				-161,
				-64
			],
			[
				93,
				-29
			],
			[
				186,
				58
			],
			[
				195,
				63
			],
			[
				136,
				33
			],
			[
				67,
				-3
			],
			[
				86,
				-52
			],
			[
				15,
				-10
			],
			[
				61,
				-2
			],
			[
				-10,
				35
			],
			[
				-6,
				21
			],
			[
				-40,
				8
			],
			[
				-19,
				34
			],
			[
				97,
				8
			],
			[
				68,
				93
			],
			[
				32,
				-16
			],
			[
				17,
				-24
			],
			[
				-15,
				-55
			],
			[
				-18,
				-39
			],
			[
				-65,
				-6
			],
			[
				10,
				-58
			],
			[
				4,
				-24
			],
			[
				104,
				-62
			],
			[
				-71,
				-385
			],
			[
				-39,
				-120
			],
			[
				0,
				-100
			],
			[
				26,
				-70
			],
			[
				-173,
				-184
			],
			[
				-9,
				-10
			],
			[
				-3,
				-95
			],
			[
				-1,
				-19
			],
			[
				-3,
				-92
			],
			[
				109,
				-50
			],
			[
				-84,
				-169
			],
			[
				-86,
				-47
			],
			[
				-35,
				-101
			],
			[
				-3,
				-10
			],
			[
				-26,
				-74
			],
			[
				35,
				-80
			],
			[
				10,
				-27
			],
			[
				34,
				-90
			],
			[
				-86,
				-33
			],
			[
				-9,
				-4
			],
			[
				-5,
				-2
			],
			[
				-57,
				-135
			],
			[
				-3,
				-7
			],
			[
				-16,
				-39
			],
			[
				8,
				-56
			],
			[
				95,
				-35
			],
			[
				13,
				-5
			],
			[
				3,
				-2
			],
			[
				6,
				-2
			],
			[
				31,
				93
			],
			[
				16,
				49
			],
			[
				21,
				65
			],
			[
				116,
				69
			],
			[
				27,
				-18
			],
			[
				51,
				-35
			],
			[
				18,
				-12
			],
			[
				66,
				13
			],
			[
				-1,
				6
			],
			[
				-1,
				2
			],
			[
				-2,
				13
			],
			[
				-13,
				94
			],
			[
				-68,
				-8
			],
			[
				-66,
				41
			],
			[
				10,
				20
			],
			[
				17,
				33
			],
			[
				13,
				6
			],
			[
				31,
				16
			],
			[
				13,
				23
			],
			[
				54,
				98
			],
			[
				160,
				-109
			],
			[
				21,
				-15
			],
			[
				12,
				-8
			],
			[
				89,
				18
			],
			[
				34,
				43
			],
			[
				10,
				13
			],
			[
				1,
				1
			],
			[
				-35,
				56
			],
			[
				24,
				41
			],
			[
				96,
				8
			],
			[
				-21,
				89
			],
			[
				36,
				98
			],
			[
				-73,
				86
			],
			[
				4,
				68
			],
			[
				78,
				-5
			],
			[
				30,
				-44
			],
			[
				65,
				-12
			],
			[
				41,
				114
			],
			[
				68,
				-46
			],
			[
				-13,
				-77
			],
			[
				0,
				-3
			],
			[
				73,
				2
			],
			[
				173,
				6
			],
			[
				50,
				54
			],
			[
				50,
				-30
			],
			[
				-102,
				-138
			],
			[
				-9,
				-13
			],
			[
				3,
				-1
			],
			[
				143,
				-37
			],
			[
				31,
				42
			],
			[
				50,
				66
			],
			[
				113,
				62
			],
			[
				20,
				26
			],
			[
				85,
				-38
			],
			[
				5,
				-2
			],
			[
				8,
				-4
			],
			[
				37,
				-16
			],
			[
				0,
				-17
			],
			[
				0,
				-23
			],
			[
				57,
				-26
			],
			[
				18,
				101
			],
			[
				-4,
				3
			],
			[
				-23,
				18
			],
			[
				-27,
				22
			],
			[
				-132,
				31
			],
			[
				-43,
				48
			],
			[
				-4,
				4
			],
			[
				1,
				1
			],
			[
				7,
				60
			],
			[
				-101,
				21
			],
			[
				0,
				93
			],
			[
				-138,
				156
			],
			[
				205,
				56
			],
			[
				-29,
				106
			],
			[
				-168,
				14
			],
			[
				165,
				220
			],
			[
				6,
				7
			],
			[
				76,
				13
			],
			[
				-22,
				77
			],
			[
				65,
				24
			],
			[
				87,
				-20
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				-18,
				-32
			],
			[
				-3,
				-5
			],
			[
				78,
				-52
			],
			[
				228,
				-53
			],
			[
				47,
				11
			],
			[
				49,
				-18
			],
			[
				4,
				-1
			],
			[
				8,
				-4
			],
			[
				6,
				-4
			],
			[
				117,
				-86
			],
			[
				30,
				9
			],
			[
				1,
				0
			],
			[
				43,
				12
			],
			[
				-56,
				25
			],
			[
				-12,
				27
			],
			[
				-13,
				28
			],
			[
				-30,
				61
			],
			[
				-310,
				172
			],
			[
				-70,
				-14
			],
			[
				-103,
				109
			],
			[
				4,
				94
			],
			[
				42,
				31
			],
			[
				59,
				23
			],
			[
				18,
				3
			],
			[
				40,
				7
			],
			[
				2,
				0
			],
			[
				1,
				0
			],
			[
				15,
				19
			],
			[
				-17,
				33
			],
			[
				-131,
				24
			],
			[
				17,
				42
			],
			[
				63,
				4
			],
			[
				101,
				-49
			],
			[
				83,
				-84
			],
			[
				-15,
				81
			],
			[
				-8,
				39
			],
			[
				-57,
				28
			],
			[
				-41,
				20
			],
			[
				-148,
				35
			],
			[
				-63,
				24
			],
			[
				18,
				49
			],
			[
				47,
				8
			],
			[
				77,
				304
			],
			[
				114,
				-42
			],
			[
				187,
				2
			],
			[
				70,
				21
			],
			[
				84,
				-13
			],
			[
				116,
				-147
			],
			[
				84,
				49
			],
			[
				-10,
				87
			],
			[
				13,
				15
			],
			[
				72,
				5
			],
			[
				12,
				34
			],
			[
				-257,
				55
			],
			[
				9,
				177
			],
			[
				30,
				78
			],
			[
				-13,
				165
			],
			[
				33,
				51
			],
			[
				247,
				-5
			],
			[
				139,
				-57
			],
			[
				71,
				-60
			],
			[
				61,
				-14
			],
			[
				69,
				14
			],
			[
				61,
				-54
			],
			[
				71,
				11
			],
			[
				187,
				-38
			],
			[
				153,
				-14
			],
			[
				60,
				-4
			],
			[
				131,
				-15
			],
			[
				4,
				0
			],
			[
				2,
				3
			],
			[
				14,
				25
			],
			[
				-174,
				65
			],
			[
				-338,
				42
			],
			[
				-193,
				70
			],
			[
				-74,
				70
			],
			[
				-3,
				38
			],
			[
				182,
				44
			],
			[
				-2,
				11
			],
			[
				-8,
				48
			],
			[
				66,
				38
			],
			[
				-183,
				24
			],
			[
				-32,
				36
			],
			[
				9,
				18
			],
			[
				22,
				45
			],
			[
				7,
				12
			],
			[
				-300,
				-22
			],
			[
				156,
				169
			],
			[
				6,
				49
			],
			[
				-48,
				69
			],
			[
				-56,
				-78
			],
			[
				-14,
				-19
			],
			[
				-125,
				-111
			],
			[
				-111,
				-21
			],
			[
				-41,
				35
			],
			[
				-87,
				-25
			],
			[
				-46,
				7
			],
			[
				-51,
				64
			],
			[
				-39,
				-45
			],
			[
				-75,
				4
			],
			[
				-102,
				51
			],
			[
				-23,
				62
			],
			[
				-114,
				28
			],
			[
				-46,
				70
			],
			[
				10,
				56
			],
			[
				54,
				21
			],
			[
				64,
				290
			],
			[
				149,
				-10
			],
			[
				314,
				-234
			],
			[
				104,
				-1
			],
			[
				63,
				0
			],
			[
				-31,
				41
			],
			[
				-76,
				33
			],
			[
				-46,
				68
			],
			[
				10,
				36
			],
			[
				-120,
				184
			],
			[
				-135,
				36
			],
			[
				-67,
				68
			],
			[
				39,
				99
			],
			[
				190,
				106
			],
			[
				119,
				-74
			],
			[
				168,
				-62
			],
			[
				7,
				-74
			],
			[
				162,
				69
			],
			[
				242,
				-95
			],
			[
				16,
				-35
			],
			[
				-28,
				-188
			],
			[
				32,
				-139
			],
			[
				158,
				36
			],
			[
				-39,
				51
			],
			[
				35,
				154
			],
			[
				-19,
				55
			],
			[
				48,
				77
			],
			[
				-112,
				148
			],
			[
				-119,
				54
			],
			[
				6,
				313
			],
			[
				131,
				56
			],
			[
				28,
				64
			],
			[
				78,
				22
			],
			[
				84,
				-27
			],
			[
				35,
				-50
			],
			[
				76,
				6
			],
			[
				7,
				82
			],
			[
				-49,
				111
			],
			[
				45,
				54
			],
			[
				34,
				-5
			]
		],
		[
			[
				71268,
				86774
			],
			[
				0,
				0
			],
			[
				12,
				-10
			],
			[
				1,
				-68
			],
			[
				51,
				-132
			],
			[
				-48,
				-235
			],
			[
				-67,
				-149
			],
			[
				-159,
				-219
			],
			[
				-407,
				-303
			],
			[
				-239,
				-114
			],
			[
				-66,
				-60
			],
			[
				-89,
				-25
			],
			[
				-56,
				-50
			],
			[
				-71,
				-33
			],
			[
				-20,
				-9
			],
			[
				3,
				-27
			],
			[
				-25,
				-36
			],
			[
				-3,
				-6
			],
			[
				-19,
				-8
			],
			[
				-42,
				-17
			],
			[
				-66,
				-28
			],
			[
				-21,
				-9
			],
			[
				-67,
				-28
			],
			[
				-28,
				-12
			],
			[
				39,
				-58
			],
			[
				80,
				13
			],
			[
				-32,
				-84
			],
			[
				-15,
				-56
			],
			[
				-32,
				-102
			],
			[
				80,
				-20
			],
			[
				9,
				-75
			],
			[
				29,
				-32
			],
			[
				45,
				20
			],
			[
				-20,
				193
			],
			[
				46,
				141
			],
			[
				138,
				87
			],
			[
				63,
				57
			],
			[
				43,
				-12
			],
			[
				22,
				-6
			],
			[
				-11,
				-9
			],
			[
				-128,
				-108
			],
			[
				-64,
				-135
			],
			[
				42,
				-9
			],
			[
				171,
				223
			],
			[
				13,
				16
			],
			[
				18,
				-51
			],
			[
				-2,
				-4
			],
			[
				-17,
				-24
			],
			[
				27,
				-15
			],
			[
				6,
				-3
			],
			[
				5,
				1
			],
			[
				34,
				12
			],
			[
				40,
				41
			],
			[
				16,
				18
			],
			[
				135,
				63
			],
			[
				62,
				-14
			],
			[
				189,
				94
			],
			[
				78,
				12
			],
			[
				62,
				-24
			],
			[
				-23,
				-79
			],
			[
				-59,
				-35
			],
			[
				-5,
				-3
			],
			[
				-119,
				-9
			],
			[
				-106,
				-109
			],
			[
				-186,
				-166
			],
			[
				30,
				-149
			],
			[
				39,
				27
			],
			[
				35,
				121
			],
			[
				70,
				65
			],
			[
				109,
				103
			],
			[
				147,
				87
			],
			[
				90,
				8
			],
			[
				118,
				148
			],
			[
				139,
				-4
			],
			[
				29,
				-43
			],
			[
				146,
				76
			],
			[
				49,
				-3
			],
			[
				-1,
				-87
			],
			[
				0,
				0
			],
			[
				-12,
				-14
			],
			[
				-102,
				-125
			],
			[
				81,
				-31
			],
			[
				10,
				17
			],
			[
				105,
				56
			],
			[
				122,
				39
			],
			[
				76,
				-33
			],
			[
				3,
				-45
			],
			[
				-39,
				-47
			],
			[
				-2,
				-76
			],
			[
				111,
				-111
			],
			[
				18,
				-19
			],
			[
				51,
				20
			],
			[
				21,
				10
			],
			[
				-19,
				99
			],
			[
				-31,
				25
			],
			[
				-30,
				25
			],
			[
				18,
				35
			],
			[
				62,
				119
			],
			[
				4,
				1
			],
			[
				94,
				38
			],
			[
				18,
				43
			],
			[
				-22,
				20
			],
			[
				-45,
				5
			],
			[
				-15,
				-6
			],
			[
				-42,
				-18
			],
			[
				-133,
				28
			],
			[
				-70,
				118
			],
			[
				-144,
				105
			],
			[
				43,
				50
			],
			[
				17,
				140
			],
			[
				67,
				118
			],
			[
				93,
				71
			],
			[
				52,
				265
			],
			[
				67,
				128
			],
			[
				1,
				183
			]
		],
		[
			[
				71451,
				81066
			],
			[
				-146,
				73
			],
			[
				-90,
				45
			],
			[
				-54,
				26
			],
			[
				-145,
				71
			],
			[
				-120,
				59
			],
			[
				-52,
				61
			],
			[
				-110,
				129
			],
			[
				-123,
				144
			],
			[
				-39,
				46
			],
			[
				-63,
				74
			],
			[
				-44,
				52
			],
			[
				-4,
				5
			],
			[
				-12,
				15
			],
			[
				-7,
				9
			],
			[
				-42,
				52
			],
			[
				-32,
				41
			],
			[
				-4,
				5
			],
			[
				-4,
				63
			],
			[
				-2,
				34
			],
			[
				-16,
				177
			],
			[
				-8,
				37
			],
			[
				-29,
				143
			],
			[
				-2,
				8
			],
			[
				-9,
				46
			],
			[
				-2,
				8
			],
			[
				-2,
				1
			],
			[
				-34,
				13
			],
			[
				0,
				0
			],
			[
				-1,
				0
			],
			[
				-194,
				-42
			],
			[
				-35,
				-8
			],
			[
				-225,
				-49
			],
			[
				-6,
				-3
			],
			[
				-1,
				-1
			],
			[
				-19,
				-10
			],
			[
				-23,
				-13
			],
			[
				-113,
				-62
			],
			[
				-109,
				64
			],
			[
				-4,
				2
			],
			[
				-19,
				11
			],
			[
				-81,
				13
			],
			[
				-2,
				0
			],
			[
				-1,
				0
			],
			[
				-1,
				0
			],
			[
				-2,
				0
			],
			[
				-21,
				-3
			],
			[
				-119,
				-12
			],
			[
				-37,
				-4
			],
			[
				-31,
				-19
			],
			[
				-29,
				-18
			],
			[
				-63,
				-39
			],
			[
				-4,
				-2
			],
			[
				0,
				0
			],
			[
				-30,
				-17
			],
			[
				-1,
				-3
			],
			[
				-1,
				-2
			],
			[
				-55,
				-133
			],
			[
				-1,
				-2
			],
			[
				-45,
				-112
			],
			[
				-1,
				-1
			],
			[
				-3,
				-1
			],
			[
				-107,
				-10
			],
			[
				-16,
				-2
			],
			[
				-167,
				-16
			],
			[
				0,
				0
			],
			[
				-1,
				0
			],
			[
				0,
				-1
			],
			[
				-1,
				0
			],
			[
				-109,
				-97
			],
			[
				-1,
				-1
			],
			[
				-75,
				-67
			],
			[
				-6,
				-5
			],
			[
				-20,
				-18
			],
			[
				-5,
				0
			],
			[
				-1,
				0
			],
			[
				-133,
				-7
			],
			[
				-5,
				-3
			],
			[
				-9,
				-5
			],
			[
				-50,
				-29
			],
			[
				-2,
				-1
			],
			[
				-4,
				-2
			],
			[
				-1,
				-3
			],
			[
				-1,
				0
			],
			[
				-38,
				-53
			],
			[
				0,
				0
			],
			[
				-2,
				-3
			],
			[
				4,
				-5
			],
			[
				2,
				-3
			],
			[
				6,
				-7
			],
			[
				3,
				-3
			],
			[
				61,
				-71
			],
			[
				2,
				-2
			],
			[
				11,
				-13
			],
			[
				-4,
				-5
			],
			[
				0,
				0
			],
			[
				-29,
				-44
			],
			[
				0,
				-1
			],
			[
				-5,
				-7
			],
			[
				-47,
				-8
			],
			[
				-11,
				-1
			],
			[
				-41,
				-7
			],
			[
				-71,
				-11
			],
			[
				-69,
				-31
			],
			[
				-83,
				-38
			],
			[
				-11,
				-5
			],
			[
				-43,
				-19
			],
			[
				-14,
				-2
			],
			[
				-13,
				-2
			],
			[
				-63,
				-10
			],
			[
				-10,
				-1
			],
			[
				-9,
				-2
			],
			[
				-2,
				-2
			],
			[
				-31,
				-33
			],
			[
				-50,
				-54
			],
			[
				-4,
				-4
			],
			[
				-6,
				-6
			],
			[
				-4,
				0
			],
			[
				-1,
				0
			],
			[
				-36,
				0
			],
			[
				-73,
				1
			],
			[
				-10,
				-7
			],
			[
				-60,
				-40
			],
			[
				-3,
				-2
			],
			[
				-2,
				-1
			],
			[
				0,
				1
			],
			[
				-2,
				2
			],
			[
				-13,
				14
			],
			[
				-140,
				151
			],
			[
				-3,
				1
			],
			[
				-3,
				0
			],
			[
				-129,
				28
			],
			[
				-131,
				-47
			],
			[
				-13,
				2
			],
			[
				-2,
				0
			],
			[
				-39,
				4
			],
			[
				-2,
				0
			],
			[
				-2,
				1
			],
			[
				-1,
				0
			],
			[
				-13,
				11
			],
			[
				-33,
				29
			],
			[
				-3,
				3
			],
			[
				-7,
				5
			],
			[
				-1,
				8
			],
			[
				-1,
				3
			],
			[
				-8,
				43
			],
			[
				-1,
				5
			],
			[
				-14,
				74
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				0,
				1
			],
			[
				0,
				0
			],
			[
				-1,
				-1
			],
			[
				-71,
				-3
			],
			[
				-57,
				-3
			],
			[
				-71,
				-4
			],
			[
				-71,
				-33
			],
			[
				-9,
				-4
			],
			[
				-117,
				-54
			],
			[
				-1,
				0
			],
			[
				-3,
				-2
			],
			[
				-2,
				2
			],
			[
				0,
				0
			],
			[
				-100,
				114
			],
			[
				-13,
				14
			],
			[
				-4,
				5
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				-1,
				0
			],
			[
				-5,
				-2
			],
			[
				-9,
				-2
			],
			[
				-52,
				-16
			],
			[
				-313,
				-95
			],
			[
				-3,
				-1
			],
			[
				-6,
				-2
			],
			[
				-115,
				-11
			],
			[
				-2,
				0
			],
			[
				-59,
				-5
			],
			[
				-3,
				0
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				-4,
				-3
			],
			[
				-30,
				-14
			],
			[
				-9,
				-5
			],
			[
				-35,
				-17
			],
			[
				0,
				0
			],
			[
				-1,
				-3
			],
			[
				-1,
				-4
			],
			[
				-2,
				-12
			],
			[
				-17,
				-84
			],
			[
				0,
				-1
			],
			[
				-5,
				-24
			],
			[
				0,
				-3
			],
			[
				-2,
				-10
			],
			[
				-20,
				-16
			],
			[
				-9,
				-7
			],
			[
				-99,
				-81
			],
			[
				-10,
				-8
			],
			[
				-6,
				-5
			],
			[
				2,
				-4
			],
			[
				28,
				-72
			],
			[
				3,
				-8
			],
			[
				-4,
				-8
			],
			[
				0,
				0
			],
			[
				-43,
				-101
			],
			[
				-1,
				-4
			],
			[
				-38,
				-89
			],
			[
				-5,
				-12
			],
			[
				-7,
				-16
			],
			[
				-8,
				-5
			],
			[
				-15,
				-10
			],
			[
				-81,
				-53
			],
			[
				-19,
				-12
			],
			[
				-210,
				-137
			],
			[
				-31,
				-21
			],
			[
				-14,
				-9
			]
		],
		[
			[
				65167,
				80646
			],
			[
				-55,
				-29
			],
			[
				-2,
				-1
			],
			[
				-1,
				-1
			],
			[
				0,
				-1
			],
			[
				1,
				-3
			],
			[
				5,
				-51
			],
			[
				0,
				0
			],
			[
				8,
				-82
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				-1,
				0
			],
			[
				-24,
				-4
			],
			[
				-24,
				-5
			],
			[
				-2,
				0
			],
			[
				-42,
				-90
			],
			[
				-17,
				-4
			],
			[
				-1,
				-1
			],
			[
				-46,
				-13
			],
			[
				-3,
				0
			],
			[
				-1,
				-1
			],
			[
				0,
				-1
			],
			[
				-1,
				-1
			],
			[
				-22,
				-95
			],
			[
				-4,
				-17
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				-1,
				-1
			],
			[
				-96,
				-28
			],
			[
				-46,
				-114
			],
			[
				0,
				-2
			],
			[
				-1,
				-3
			],
			[
				-4,
				-1
			],
			[
				-1,
				-1
			],
			[
				-103,
				-50
			],
			[
				-73,
				-36
			],
			[
				-17,
				-9
			],
			[
				-14,
				-6
			],
			[
				-40,
				-20
			],
			[
				-15,
				3
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				-43,
				7
			],
			[
				-57,
				9
			],
			[
				-11,
				-7
			],
			[
				-1,
				0
			],
			[
				-32,
				-19
			],
			[
				-17,
				-19
			],
			[
				-51,
				-53
			],
			[
				-3,
				-3
			],
			[
				-32,
				-34
			],
			[
				-44,
				-47
			],
			[
				-1,
				-2
			],
			[
				-16,
				-55
			],
			[
				-1,
				-3
			],
			[
				-6,
				-22
			],
			[
				-18,
				-15
			],
			[
				-3,
				-2
			],
			[
				-5,
				-4
			],
			[
				-1,
				-1
			],
			[
				-119,
				-100
			],
			[
				-1,
				-1
			],
			[
				-7,
				-6
			],
			[
				5,
				-10
			],
			[
				0,
				0
			],
			[
				22,
				-39
			],
			[
				0,
				0
			],
			[
				1,
				-3
			],
			[
				66,
				-12
			],
			[
				8,
				-2
			],
			[
				12,
				-2
			],
			[
				8,
				-7
			],
			[
				1,
				0
			],
			[
				58,
				-46
			],
			[
				5,
				-4
			],
			[
				6,
				-5
			],
			[
				1,
				-10
			],
			[
				0,
				0
			],
			[
				10,
				-165
			],
			[
				6,
				-7
			],
			[
				8,
				-11
			],
			[
				38,
				-49
			],
			[
				0,
				0
			],
			[
				2,
				-2
			],
			[
				-7,
				-15
			],
			[
				-6,
				-12
			],
			[
				-28,
				-61
			],
			[
				-43,
				-94
			],
			[
				-26,
				-58
			],
			[
				-2,
				-5
			],
			[
				-7,
				-14
			],
			[
				-40,
				-28
			],
			[
				-51,
				-34
			],
			[
				-84,
				-57
			],
			[
				-1,
				-1
			],
			[
				-14,
				-9
			],
			[
				-92,
				-17
			],
			[
				-1,
				0
			],
			[
				-6,
				-1
			],
			[
				-1,
				-15
			],
			[
				-1,
				-1
			],
			[
				0,
				-8
			],
			[
				0,
				-1
			],
			[
				-3,
				-30
			],
			[
				6,
				-4
			],
			[
				0,
				0
			],
			[
				22,
				-18
			],
			[
				3,
				-2
			],
			[
				59,
				-47
			],
			[
				4,
				-3
			],
			[
				4,
				-3
			],
			[
				1,
				-5
			],
			[
				0,
				-2
			],
			[
				9,
				-37
			],
			[
				1,
				-7
			],
			[
				3,
				-13
			],
			[
				-61,
				-134
			],
			[
				-20,
				-43
			],
			[
				-11,
				-23
			],
			[
				0,
				0
			],
			[
				0,
				-2
			],
			[
				1,
				-3
			],
			[
				0,
				-1
			],
			[
				15,
				-31
			],
			[
				35,
				-75
			],
			[
				3,
				-7
			],
			[
				-4,
				-2
			],
			[
				-41,
				-22
			],
			[
				-39,
				-22
			],
			[
				-2,
				-1
			],
			[
				-3,
				-2
			],
			[
				-2,
				-8
			],
			[
				-5,
				-25
			],
			[
				-13,
				-62
			],
			[
				0,
				0
			],
			[
				-8,
				-39
			],
			[
				0,
				0
			],
			[
				-3,
				-5
			],
			[
				-5,
				-8
			],
			[
				-15,
				-24
			],
			[
				0,
				0
			],
			[
				-34,
				-56
			],
			[
				0,
				-6
			],
			[
				2,
				-8
			],
			[
				6,
				-41
			],
			[
				0,
				-2
			],
			[
				-3,
				-3
			],
			[
				-43,
				-32
			],
			[
				-3,
				-3
			],
			[
				3,
				-1
			],
			[
				24,
				-9
			],
			[
				37,
				-14
			],
			[
				19,
				-7
			],
			[
				4,
				-1
			],
			[
				-1,
				-2
			],
			[
				-7,
				-9
			],
			[
				-19,
				-22
			],
			[
				-9,
				-11
			],
			[
				-3,
				-4
			],
			[
				5,
				-11
			],
			[
				7,
				-15
			],
			[
				20,
				3
			],
			[
				32,
				7
			],
			[
				2,
				0
			],
			[
				3,
				0
			],
			[
				34,
				-55
			],
			[
				1,
				-2
			],
			[
				7,
				-33
			],
			[
				1,
				-2
			],
			[
				0,
				0
			],
			[
				-7,
				-4
			],
			[
				-1,
				0
			],
			[
				-28,
				-15
			],
			[
				-7,
				-12
			],
			[
				-58,
				-89
			],
			[
				-2,
				-3
			],
			[
				1,
				-2
			],
			[
				0,
				-2
			],
			[
				10,
				-53
			],
			[
				5,
				-24
			],
			[
				3,
				-13
			],
			[
				1,
				-4
			],
			[
				-3,
				-1
			],
			[
				-64,
				-24
			],
			[
				-2,
				-1
			],
			[
				-35,
				-12
			],
			[
				-2,
				0
			],
			[
				0,
				-3
			],
			[
				-13,
				-48
			],
			[
				-6,
				-25
			],
			[
				-1,
				-1
			],
			[
				-48,
				-22
			],
			[
				-5,
				-2
			],
			[
				-1,
				-83
			],
			[
				0,
				-6
			],
			[
				-56,
				-99
			],
			[
				-3,
				-6
			],
			[
				-5,
				-9
			],
			[
				6,
				-7
			],
			[
				0,
				0
			],
			[
				19,
				-26
			],
			[
				6,
				-8
			],
			[
				-27,
				-40
			],
			[
				-9,
				-14
			],
			[
				0,
				0
			],
			[
				-2,
				-3
			],
			[
				1,
				-1
			],
			[
				6,
				-11
			],
			[
				26,
				-45
			],
			[
				4,
				-7
			],
			[
				-2,
				-6
			],
			[
				-12,
				-61
			],
			[
				-3,
				-3
			],
			[
				-8,
				-6
			],
			[
				-10,
				-8
			],
			[
				-21,
				-15
			],
			[
				-1,
				-5
			],
			[
				-23,
				-95
			],
			[
				0,
				0
			],
			[
				-1,
				-1
			],
			[
				-12,
				-5
			],
			[
				-12,
				-6
			],
			[
				-29,
				-13
			],
			[
				-3,
				-1
			],
			[
				-1,
				0
			],
			[
				1,
				-6
			],
			[
				4,
				-30
			],
			[
				3,
				-25
			],
			[
				2,
				-18
			],
			[
				2,
				-20
			],
			[
				9,
				-77
			],
			[
				1,
				-6
			],
			[
				3,
				-26
			],
			[
				8,
				-63
			],
			[
				1,
				-13
			],
			[
				1,
				-3
			],
			[
				-8,
				-6
			],
			[
				-49,
				-42
			],
			[
				-4,
				-41
			],
			[
				-1,
				-10
			],
			[
				0,
				-2
			],
			[
				1,
				0
			],
			[
				0,
				-2
			],
			[
				5,
				-13
			],
			[
				34,
				-81
			],
			[
				57,
				-137
			],
			[
				1,
				-1
			],
			[
				5,
				-14
			],
			[
				1,
				-1
			],
			[
				11,
				-33
			],
			[
				14,
				-42
			],
			[
				23,
				-69
			],
			[
				0,
				-1
			],
			[
				0,
				-1
			],
			[
				-10,
				-29
			],
			[
				-25,
				-69
			],
			[
				-14,
				-39
			],
			[
				0,
				-2
			],
			[
				-18,
				-50
			],
			[
				-1,
				-3
			],
			[
				-2,
				-5
			],
			[
				3,
				-4
			],
			[
				1,
				0
			],
			[
				8,
				-10
			],
			[
				22,
				-27
			],
			[
				-2,
				-15
			],
			[
				-11,
				-82
			],
			[
				-8,
				-66
			],
			[
				0,
				0
			],
			[
				0,
				-1
			],
			[
				2,
				-5
			],
			[
				44,
				-77
			],
			[
				32,
				-54
			],
			[
				6,
				-11
			],
			[
				-1,
				-40
			],
			[
				-2,
				-37
			],
			[
				0,
				-1
			],
			[
				-3,
				-96
			],
			[
				44,
				-18
			],
			[
				16,
				-7
			],
			[
				22,
				-72
			],
			[
				-44,
				-93
			],
			[
				-3,
				-5
			],
			[
				-4,
				-2
			],
			[
				-41,
				-22
			],
			[
				-5,
				-2
			],
			[
				-4,
				-5
			],
			[
				-87,
				-117
			],
			[
				-4,
				-5
			],
			[
				-4,
				-5
			],
			[
				0,
				-3
			],
			[
				0,
				-1
			],
			[
				1,
				-20
			],
			[
				2,
				-62
			],
			[
				0,
				-8
			],
			[
				-2,
				-4
			],
			[
				-7,
				-11
			],
			[
				-52,
				-84
			],
			[
				0,
				-1
			],
			[
				-5,
				-12
			],
			[
				-34,
				-91
			],
			[
				-8,
				-22
			],
			[
				-71,
				-190
			],
			[
				-2,
				-1
			],
			[
				-4,
				-1
			],
			[
				-36,
				-15
			],
			[
				-10,
				-4
			],
			[
				-4,
				-1
			],
			[
				0,
				-1
			],
			[
				-17,
				-48
			],
			[
				-5,
				-15
			],
			[
				-1,
				0
			],
			[
				-22,
				-15
			],
			[
				-60,
				-41
			],
			[
				0,
				0
			],
			[
				-1,
				-1
			],
			[
				-1,
				0
			],
			[
				-18,
				2
			],
			[
				-92,
				7
			],
			[
				-47,
				4
			],
			[
				-38,
				4
			],
			[
				-1,
				0
			],
			[
				-3,
				0
			],
			[
				-3,
				2
			],
			[
				-88,
				67
			],
			[
				-10,
				7
			],
			[
				-3,
				3
			],
			[
				-41,
				31
			],
			[
				-13,
				10
			],
			[
				-1,
				0
			],
			[
				-1,
				0
			],
			[
				-12,
				-5
			],
			[
				-35,
				-15
			],
			[
				-16,
				-6
			],
			[
				-134,
				-56
			],
			[
				-16,
				-7
			],
			[
				-37,
				-16
			],
			[
				-1,
				0
			]
		],
		[
			[
				62566,
				74318
			],
			[
				0,
				-1
			],
			[
				-1,
				-6
			],
			[
				-1,
				-22
			],
			[
				0,
				-1
			],
			[
				-39,
				-23
			],
			[
				-177,
				-106
			],
			[
				-154,
				-92
			],
			[
				-18,
				-11
			],
			[
				-2,
				-1
			],
			[
				-87,
				-80
			],
			[
				-1,
				0
			],
			[
				-53,
				-108
			],
			[
				-8,
				-15
			],
			[
				-43,
				-52
			],
			[
				-8,
				-10
			],
			[
				-13,
				-16
			],
			[
				-102,
				-57
			],
			[
				-18,
				-10
			],
			[
				-8,
				-25
			],
			[
				-20,
				-67
			],
			[
				-72,
				-242
			],
			[
				-1,
				-5
			],
			[
				0,
				-4
			],
			[
				-1,
				-75
			],
			[
				-1,
				-52
			],
			[
				1,
				-18
			],
			[
				2,
				-11
			],
			[
				19,
				-74
			],
			[
				2,
				-5
			],
			[
				-14,
				-20
			],
			[
				-18,
				-26
			],
			[
				-12,
				-17
			],
			[
				-15,
				-22
			],
			[
				1,
				-16
			],
			[
				1,
				-7
			],
			[
				4,
				-56
			],
			[
				-3,
				-12
			],
			[
				0,
				-1
			],
			[
				-12,
				-76
			],
			[
				0,
				-1
			],
			[
				8,
				-10
			],
			[
				0,
				-1
			],
			[
				0,
				-13
			],
			[
				0,
				-1
			],
			[
				2,
				-19
			],
			[
				0,
				-4
			],
			[
				2,
				-7
			],
			[
				3,
				-11
			],
			[
				0,
				0
			],
			[
				1,
				-1
			],
			[
				1,
				-7
			],
			[
				1,
				-3
			],
			[
				0,
				-1
			],
			[
				0,
				-4
			],
			[
				0,
				0
			],
			[
				-1,
				-1
			],
			[
				-1,
				-8
			],
			[
				-1,
				-3
			],
			[
				1,
				-1
			],
			[
				3,
				-25
			],
			[
				13,
				-117
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				-9,
				-8
			],
			[
				-84,
				-67
			],
			[
				-3,
				-3
			],
			[
				-2,
				-12
			],
			[
				-1,
				-7
			],
			[
				0,
				-4
			],
			[
				-8,
				-3
			],
			[
				-16,
				-8
			],
			[
				4,
				-4
			],
			[
				2,
				-3
			],
			[
				-20,
				-15
			],
			[
				-7,
				-5
			],
			[
				-2,
				-3
			],
			[
				-3,
				-7
			],
			[
				-3,
				1
			],
			[
				-12,
				2
			],
			[
				-9,
				3
			],
			[
				0,
				0
			],
			[
				-10,
				2
			],
			[
				-1,
				1
			],
			[
				-5,
				5
			],
			[
				-15,
				17
			],
			[
				-1,
				1
			],
			[
				-1,
				0
			],
			[
				-33,
				-5
			],
			[
				-29,
				-4
			],
			[
				-27,
				-4
			],
			[
				-2,
				-7
			],
			[
				-3,
				-7
			],
			[
				-7,
				-22
			],
			[
				-4,
				-14
			],
			[
				-3,
				-6
			],
			[
				-24,
				-8
			],
			[
				-20,
				-9
			],
			[
				-5,
				0
			],
			[
				-17,
				0
			],
			[
				-23,
				8
			],
			[
				-12,
				15
			],
			[
				-2,
				3
			],
			[
				-2,
				3
			],
			[
				0,
				0
			],
			[
				-10,
				-2
			],
			[
				-13,
				-1
			],
			[
				-14,
				-3
			],
			[
				-10,
				-3
			],
			[
				-17,
				6
			],
			[
				-4,
				2
			],
			[
				-16,
				-13
			],
			[
				-1,
				0
			],
			[
				-13,
				-10
			],
			[
				-14,
				-6
			],
			[
				-18,
				-6
			],
			[
				-4,
				-3
			],
			[
				-9,
				-10
			],
			[
				0,
				-1
			],
			[
				-5,
				-2
			],
			[
				-14,
				-12
			],
			[
				-2,
				-2
			],
			[
				-7,
				-7
			],
			[
				-19,
				-9
			],
			[
				-1,
				-2
			],
			[
				-31,
				-157
			],
			[
				-1,
				-32
			],
			[
				-3,
				-49
			],
			[
				-6,
				-105
			],
			[
				-49,
				19
			],
			[
				-90,
				33
			],
			[
				-86,
				198
			],
			[
				-4,
				10
			],
			[
				-43,
				99
			],
			[
				-35,
				78
			],
			[
				-8,
				18
			],
			[
				-17,
				36
			],
			[
				0,
				0
			],
			[
				-22,
				50
			],
			[
				-7,
				15
			],
			[
				-202,
				120
			],
			[
				-11,
				6
			],
			[
				-33,
				20
			],
			[
				-53,
				31
			],
			[
				-38,
				22
			],
			[
				-191,
				112
			],
			[
				-97,
				28
			],
			[
				-202,
				57
			],
			[
				-50,
				14
			],
			[
				-75,
				21
			],
			[
				-106,
				26
			],
			[
				-95,
				23
			],
			[
				-223,
				54
			],
			[
				-74,
				18
			],
			[
				-74,
				32
			],
			[
				-81,
				35
			],
			[
				-87,
				83
			],
			[
				-42,
				41
			],
			[
				-94,
				32
			],
			[
				-16,
				5
			],
			[
				-57,
				19
			],
			[
				17,
				246
			],
			[
				-250,
				-66
			],
			[
				-183,
				212
			],
			[
				-95,
				109
			],
			[
				-102,
				19
			],
			[
				-235,
				45
			],
			[
				-174,
				-72
			],
			[
				-116,
				-49
			],
			[
				-65,
				-225
			],
			[
				-31,
				-109
			],
			[
				-37,
				-129
			],
			[
				-174,
				-308
			],
			[
				-26,
				-3
			],
			[
				-227,
				-30
			],
			[
				-132,
				-17
			],
			[
				-111,
				-14
			],
			[
				-206,
				-27
			],
			[
				-95,
				-47
			],
			[
				-58,
				-29
			],
			[
				-79,
				-39
			],
			[
				-72,
				-39
			],
			[
				-57,
				-31
			],
			[
				-9,
				-5
			],
			[
				0,
				0
			],
			[
				-3,
				-1
			],
			[
				-13,
				-7
			],
			[
				-234,
				-126
			],
			[
				-43,
				-23
			],
			[
				-30,
				-16
			],
			[
				-130,
				-70
			],
			[
				-117,
				131
			],
			[
				-81,
				92
			],
			[
				-61,
				68
			],
			[
				-25,
				29
			],
			[
				-19,
				21
			],
			[
				-38,
				44
			],
			[
				-26,
				29
			],
			[
				-106,
				-2
			],
			[
				-43,
				0
			],
			[
				-103,
				-2
			],
			[
				-22,
				0
			],
			[
				-242,
				-5
			],
			[
				-223,
				-3
			],
			[
				-49,
				22
			],
			[
				-99,
				44
			],
			[
				-19,
				9
			],
			[
				-91,
				40
			],
			[
				-17,
				8
			],
			[
				0,
				0
			],
			[
				-29,
				13
			],
			[
				-42,
				19
			],
			[
				-24,
				10
			],
			[
				-61,
				28
			],
			[
				-23,
				10
			],
			[
				-1,
				0
			],
			[
				-43,
				19
			],
			[
				-90,
				40
			],
			[
				-21,
				13
			],
			[
				-17,
				9
			],
			[
				-170,
				101
			],
			[
				-4,
				2
			],
			[
				-305,
				-119
			],
			[
				-31,
				-12
			],
			[
				-58,
				-22
			],
			[
				-90,
				-36
			],
			[
				-1,
				0
			],
			[
				-19,
				148
			],
			[
				-12,
				90
			],
			[
				-32,
				241
			],
			[
				-17,
				122
			],
			[
				-18,
				123
			],
			[
				-4,
				28
			],
			[
				-104,
				145
			],
			[
				-48,
				67
			],
			[
				-76,
				106
			],
			[
				-18,
				26
			],
			[
				-162,
				224
			],
			[
				-40,
				55
			],
			[
				-1,
				1
			],
			[
				-13,
				71
			],
			[
				-35,
				184
			],
			[
				-42,
				58
			],
			[
				-113,
				155
			],
			[
				-102,
				139
			],
			[
				-113,
				156
			],
			[
				-56,
				76
			],
			[
				-30,
				42
			],
			[
				-52,
				70
			],
			[
				-43,
				59
			],
			[
				-29,
				39
			]
		],
		[
			[
				63835,
				86402
			],
			[
				-90,
				10
			],
			[
				-48,
				99
			],
			[
				42,
				117
			],
			[
				179,
				94
			],
			[
				68,
				8
			],
			[
				-12,
				-83
			],
			[
				49,
				-31
			],
			[
				5,
				-45
			],
			[
				-92,
				-116
			],
			[
				-101,
				-53
			]
		],
		[
			[
				62147,
				83542
			],
			[
				-72,
				4
			],
			[
				64,
				214
			],
			[
				162,
				146
			],
			[
				14,
				-46
			],
			[
				80,
				-41
			],
			[
				-32,
				-144
			],
			[
				-216,
				-133
			]
		],
		[
			[
				61641,
				83395
			],
			[
				-13,
				-13
			],
			[
				-61,
				12
			],
			[
				57,
				94
			],
			[
				46,
				15
			],
			[
				40,
				-7
			],
			[
				-35,
				-58
			],
			[
				-34,
				-43
			]
		],
		[
			[
				61413,
				83404
			],
			[
				-75,
				-26
			],
			[
				-17,
				35
			],
			[
				28,
				25
			],
			[
				18,
				12
			],
			[
				71,
				35
			],
			[
				28,
				-5
			],
			[
				23,
				-6
			],
			[
				-36,
				-38
			],
			[
				-40,
				-32
			]
		],
		[
			[
				61688,
				83002
			],
			[
				-82,
				7
			],
			[
				-19,
				9
			],
			[
				23,
				42
			],
			[
				54,
				78
			],
			[
				37,
				-9
			],
			[
				20,
				-56
			],
			[
				-11,
				-36
			],
			[
				-22,
				-35
			]
		],
		[
			[
				68014,
				87197
			],
			[
				-29,
				-32
			],
			[
				-63,
				15
			],
			[
				-38,
				14
			],
			[
				-17,
				21
			],
			[
				19,
				59
			],
			[
				44,
				60
			],
			[
				37,
				22
			],
			[
				42,
				-2
			],
			[
				20,
				-24
			],
			[
				5,
				-37
			],
			[
				-20,
				-96
			]
		],
		[
			[
				67014,
				85321
			],
			[
				-71,
				-15
			],
			[
				-36,
				23
			],
			[
				0,
				33
			],
			[
				14,
				20
			],
			[
				27,
				32
			],
			[
				48,
				10
			],
			[
				53,
				3
			],
			[
				44,
				-20
			],
			[
				1,
				-50
			],
			[
				-22,
				-44
			],
			[
				-58,
				8
			]
		],
		[
			[
				66743,
				85280
			],
			[
				-18,
				-46
			],
			[
				-158,
				32
			],
			[
				-16,
				16
			],
			[
				-17,
				36
			],
			[
				43,
				24
			],
			[
				37,
				1
			],
			[
				129,
				-63
			]
		],
		[
			[
				66057,
				84717
			],
			[
				-23,
				3
			],
			[
				41,
				123
			],
			[
				115,
				103
			],
			[
				111,
				-54
			],
			[
				-150,
				-34
			],
			[
				11,
				-103
			],
			[
				-105,
				-38
			]
		],
		[
			[
				3812,
				18080
			],
			[
				0,
				0
			],
			[
				139,
				72
			],
			[
				2,
				1
			],
			[
				1,
				34
			],
			[
				-15,
				10
			],
			[
				-151,
				-70
			],
			[
				-19,
				3
			],
			[
				-72,
				12
			],
			[
				-23,
				-42
			],
			[
				0,
				0
			]
		],
		[
			[
				3713,
				18077
			],
			[
				-5,
				22
			],
			[
				32,
				-17
			]
		],
		[
			[
				21303,
				7217
			],
			[
				-3,
				-20
			],
			[
				-12,
				-104
			],
			[
				-6,
				-28
			],
			[
				-25,
				-85
			],
			[
				-5,
				-22
			],
			[
				-2,
				-10
			],
			[
				-11,
				-20
			],
			[
				-13,
				-6
			],
			[
				-1,
				-1
			],
			[
				-2,
				-1
			],
			[
				0,
				-2
			],
			[
				0,
				-1
			],
			[
				1,
				-15
			],
			[
				6,
				-4
			],
			[
				17,
				-11
			],
			[
				5,
				-49
			],
			[
				0,
				0
			],
			[
				-2,
				-2
			],
			[
				-7,
				-4
			],
			[
				-3,
				-5
			],
			[
				-11,
				-24
			],
			[
				9,
				-109
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				-23,
				-44
			],
			[
				-24,
				-57
			],
			[
				0,
				0
			],
			[
				8,
				-47
			],
			[
				0,
				0
			],
			[
				-15,
				-2
			],
			[
				-19,
				1
			],
			[
				-3,
				-4
			],
			[
				-17,
				-18
			],
			[
				0,
				0
			],
			[
				2,
				-29
			],
			[
				-20,
				-144
			],
			[
				0,
				0
			],
			[
				-46,
				12
			],
			[
				-17,
				4
			],
			[
				-4,
				-7
			],
			[
				0,
				0
			],
			[
				-6,
				-7
			],
			[
				-5,
				-8
			],
			[
				-8,
				-6
			],
			[
				-3,
				-3
			],
			[
				-7,
				-7
			],
			[
				-8,
				-7
			],
			[
				-11,
				-10
			],
			[
				-21,
				-18
			],
			[
				-9,
				-9
			],
			[
				-15,
				-15
			],
			[
				-14,
				-15
			],
			[
				-11,
				-10
			],
			[
				0,
				0
			],
			[
				-9,
				10
			],
			[
				-5,
				10
			],
			[
				-4,
				6
			],
			[
				0,
				0
			],
			[
				-21,
				20
			],
			[
				-1,
				-6
			],
			[
				-15,
				-59
			],
			[
				0,
				0
			],
			[
				-7,
				6
			],
			[
				-7,
				7
			],
			[
				-2,
				3
			],
			[
				-29,
				53
			],
			[
				-13,
				6
			],
			[
				-4,
				-7
			],
			[
				-20,
				-27
			],
			[
				-16,
				-50
			],
			[
				-3,
				-44
			],
			[
				-5,
				-19
			],
			[
				-1,
				0
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				-2,
				0
			],
			[
				-4,
				8
			],
			[
				0,
				0
			],
			[
				-2,
				0
			],
			[
				-1,
				0
			],
			[
				-23,
				-11
			],
			[
				-25,
				17
			],
			[
				0,
				0
			],
			[
				-16,
				25
			],
			[
				-38,
				43
			],
			[
				-1,
				-1
			],
			[
				-6,
				-2
			],
			[
				-19,
				1
			],
			[
				-4,
				7
			],
			[
				-3,
				4
			],
			[
				-19,
				5
			],
			[
				-67,
				-12
			],
			[
				-10,
				-9
			],
			[
				-4,
				12
			],
			[
				1,
				180
			],
			[
				22,
				114
			],
			[
				0,
				0
			],
			[
				-3,
				29
			],
			[
				-2,
				23
			],
			[
				-2,
				24
			],
			[
				0,
				0
			],
			[
				-5,
				54
			],
			[
				0,
				0
			],
			[
				8,
				140
			],
			[
				-16,
				53
			],
			[
				-10,
				32
			],
			[
				3,
				2
			],
			[
				5,
				3
			],
			[
				0,
				0
			],
			[
				5,
				11
			],
			[
				3,
				2
			],
			[
				3,
				0
			],
			[
				2,
				3
			],
			[
				3,
				4
			],
			[
				0,
				0
			],
			[
				3,
				-22
			],
			[
				18,
				-15
			],
			[
				6,
				28
			],
			[
				0,
				20
			],
			[
				0,
				15
			],
			[
				-19,
				46
			],
			[
				-2,
				5
			],
			[
				-43,
				89
			],
			[
				-4,
				14
			],
			[
				-25,
				74
			],
			[
				-21,
				69
			],
			[
				-28,
				14
			],
			[
				-13,
				47
			],
			[
				27,
				49
			],
			[
				11,
				41
			],
			[
				9,
				35
			],
			[
				-20,
				13
			],
			[
				-17,
				10
			],
			[
				-5,
				-84
			],
			[
				-26,
				-2
			],
			[
				-17,
				20
			],
			[
				0,
				27
			],
			[
				17,
				5
			],
			[
				-15,
				76
			],
			[
				-19,
				-23
			],
			[
				-14,
				21
			],
			[
				-8,
				22
			],
			[
				-25,
				137
			],
			[
				-29,
				7
			],
			[
				-4,
				43
			],
			[
				36,
				52
			],
			[
				0,
				9
			],
			[
				2,
				29
			],
			[
				-44,
				13
			],
			[
				-3,
				1
			],
			[
				-14,
				4
			],
			[
				-24,
				2
			],
			[
				-16,
				-7
			],
			[
				-35,
				-15
			],
			[
				-24,
				14
			],
			[
				-36,
				-8
			],
			[
				-56,
				-44
			],
			[
				-20,
				-15
			],
			[
				-54,
				-46
			],
			[
				-19,
				-9
			],
			[
				-9,
				-4
			],
			[
				-32,
				-16
			],
			[
				-23,
				-11
			],
			[
				-87,
				-41
			],
			[
				-54,
				6
			],
			[
				0,
				0
			],
			[
				-19,
				12
			],
			[
				8,
				32
			],
			[
				19,
				64
			],
			[
				9,
				22
			],
			[
				17,
				41
			],
			[
				50,
				121
			],
			[
				-3,
				10
			],
			[
				0,
				0
			]
		],
		[
			[
				23151,
				47326
			],
			[
				0,
				0
			],
			[
				9,
				-2
			],
			[
				147,
				-38
			],
			[
				108,
				-119
			],
			[
				62,
				-68
			],
			[
				39,
				-43
			],
			[
				35,
				24
			],
			[
				-42,
				53
			],
			[
				-29,
				37
			],
			[
				-35,
				44
			],
			[
				0,
				0
			]
		],
		[
			[
				29188,
				48647
			],
			[
				-98,
				-157
			],
			[
				-144,
				-231
			],
			[
				-57,
				-91
			],
			[
				-151,
				-246
			],
			[
				-141,
				-231
			],
			[
				-26,
				-44
			],
			[
				-19,
				-31
			],
			[
				-20,
				-35
			],
			[
				-23,
				-39
			],
			[
				-21,
				-36
			],
			[
				-50,
				-85
			],
			[
				-28,
				-49
			],
			[
				-30,
				-54
			],
			[
				-10,
				-18
			],
			[
				-18,
				-33
			],
			[
				-7,
				-12
			],
			[
				0,
				0
			],
			[
				-40,
				-72
			],
			[
				-54,
				-96
			],
			[
				0,
				0
			],
			[
				-53,
				-96
			],
			[
				-37,
				-68
			],
			[
				-2,
				-2
			],
			[
				-21,
				-39
			],
			[
				-140,
				-256
			]
		],
		[
			[
				27998,
				46626
			],
			[
				-45,
				-81
			],
			[
				-33,
				-60
			],
			[
				-97,
				-175
			],
			[
				-54,
				-100
			],
			[
				0,
				0
			],
			[
				-115,
				-210
			],
			[
				-42,
				-79
			],
			[
				-26,
				-47
			],
			[
				0,
				-1
			],
			[
				-112,
				-203
			],
			[
				-155,
				-280
			],
			[
				-2,
				-4
			],
			[
				-42,
				-112
			],
			[
				-25,
				-65
			],
			[
				-59,
				-156
			],
			[
				-14,
				-36
			],
			[
				-14,
				-37
			],
			[
				16,
				-11
			],
			[
				48,
				-34
			],
			[
				75,
				-53
			],
			[
				152,
				-107
			],
			[
				109,
				-75
			],
			[
				79,
				-55
			],
			[
				83,
				-58
			],
			[
				55,
				-38
			],
			[
				47,
				-33
			],
			[
				50,
				-34
			],
			[
				165,
				-55
			],
			[
				329,
				-111
			],
			[
				46,
				-16
			],
			[
				45,
				-15
			],
			[
				0,
				0
			],
			[
				2,
				-3
			],
			[
				69,
				-85
			],
			[
				15,
				-19
			],
			[
				0,
				0
			],
			[
				3,
				-30
			],
			[
				8,
				-110
			],
			[
				2,
				-19
			],
			[
				2,
				-28
			],
			[
				12,
				-166
			],
			[
				7,
				-85
			],
			[
				0,
				0
			],
			[
				13,
				-176
			],
			[
				30,
				-391
			],
			[
				16,
				-209
			],
			[
				11,
				-176
			],
			[
				14,
				-229
			],
			[
				13,
				-202
			],
			[
				-17,
				-38
			],
			[
				-32,
				-73
			],
			[
				-49,
				-111
			],
			[
				-29,
				-67
			],
			[
				-10,
				-21
			],
			[
				-8,
				-19
			],
			[
				-43,
				-97
			],
			[
				-73,
				-167
			],
			[
				-52,
				-116
			],
			[
				0,
				0
			],
			[
				-69,
				-154
			],
			[
				-10,
				-23
			],
			[
				-2,
				-4
			],
			[
				-43,
				-96
			],
			[
				-66,
				-142
			],
			[
				0,
				0
			],
			[
				-69,
				-146
			],
			[
				0,
				0
			],
			[
				-155,
				53
			],
			[
				-83,
				28
			],
			[
				-47,
				16
			],
			[
				-92,
				32
			],
			[
				-104,
				36
			],
			[
				-8,
				3
			],
			[
				-3,
				1
			],
			[
				-265,
				91
			],
			[
				-3,
				1
			],
			[
				-163,
				40
			],
			[
				-107,
				26
			],
			[
				-152,
				37
			],
			[
				-114,
				28
			],
			[
				-211,
				43
			],
			[
				-55,
				11
			],
			[
				-96,
				19
			],
			[
				-118,
				23
			],
			[
				-53,
				12
			],
			[
				-188,
				41
			],
			[
				-263,
				54
			]
		],
		[
			[
				25827,
				41678
			],
			[
				-82,
				-24
			],
			[
				-26,
				-8
			],
			[
				-24,
				-7
			],
			[
				-67,
				-20
			],
			[
				-115,
				-34
			],
			[
				-44,
				-14
			],
			[
				-23,
				-6
			],
			[
				-2,
				-1
			],
			[
				-230,
				-68
			],
			[
				-26,
				-8
			],
			[
				-3,
				-1
			],
			[
				-143,
				-42
			],
			[
				-69,
				-20
			],
			[
				-3,
				-2
			],
			[
				-80,
				-61
			],
			[
				-106,
				-82
			],
			[
				-93,
				-72
			],
			[
				0,
				0
			],
			[
				-75,
				-59
			],
			[
				-120,
				-93
			],
			[
				-32,
				-25
			],
			[
				-29,
				-23
			],
			[
				-69,
				-53
			],
			[
				-100,
				-78
			],
			[
				-26,
				-21
			],
			[
				-3,
				-3
			]
		],
		[
			[
				40644,
				71914
			],
			[
				0,
				0
			],
			[
				-5,
				-57
			],
			[
				0,
				-1
			],
			[
				-9,
				-117
			],
			[
				0,
				-1
			],
			[
				-3,
				-41
			],
			[
				0,
				0
			],
			[
				-8,
				-101
			],
			[
				0,
				0
			],
			[
				-1,
				-8
			],
			[
				0,
				0
			],
			[
				0,
				-1
			],
			[
				-3,
				-34
			],
			[
				-11,
				-123
			],
			[
				-6,
				-74
			],
			[
				-12,
				-131
			],
			[
				-3,
				-31
			],
			[
				-1,
				-11
			],
			[
				0,
				-1
			],
			[
				0,
				-2
			],
			[
				-3,
				-34
			],
			[
				-4,
				-38
			],
			[
				0,
				0
			],
			[
				-1,
				-21
			],
			[
				-5,
				-61
			],
			[
				19,
				-217
			],
			[
				0,
				0
			],
			[
				22,
				-229
			],
			[
				15,
				-131
			],
			[
				10,
				-82
			],
			[
				12,
				-101
			],
			[
				11,
				-103
			],
			[
				8,
				-73
			],
			[
				7,
				-60
			],
			[
				10,
				-73
			],
			[
				6,
				-55
			],
			[
				1,
				-9
			],
			[
				0,
				-6
			],
			[
				8,
				-72
			],
			[
				0,
				0
			],
			[
				22,
				-200
			],
			[
				-37,
				-79
			],
			[
				-37,
				-81
			],
			[
				-1,
				0
			],
			[
				-3,
				-7
			],
			[
				0,
				0
			],
			[
				-3,
				-7
			],
			[
				-86,
				-184
			],
			[
				0,
				0
			],
			[
				-47,
				-92
			],
			[
				0,
				0
			],
			[
				-54,
				-107
			],
			[
				-30,
				-60
			],
			[
				-38,
				-76
			],
			[
				0,
				0
			],
			[
				0,
				-1
			],
			[
				-16,
				-31
			],
			[
				-60,
				-124
			],
			[
				0,
				0
			],
			[
				-26,
				-54
			],
			[
				0,
				-1
			],
			[
				-37,
				-74
			],
			[
				-25,
				-52
			],
			[
				-35,
				-72
			],
			[
				-28,
				-57
			],
			[
				-32,
				-67
			],
			[
				-102,
				-209
			],
			[
				0,
				0
			],
			[
				-10,
				-20
			],
			[
				-46,
				-97
			],
			[
				-5,
				-10
			],
			[
				-89,
				59
			],
			[
				-66,
				44
			],
			[
				-103,
				68
			],
			[
				-39,
				27
			],
			[
				-6,
				3
			],
			[
				-29,
				19
			],
			[
				-111,
				74
			],
			[
				-122,
				81
			],
			[
				-39,
				26
			],
			[
				-105,
				69
			],
			[
				-76,
				37
			],
			[
				-7,
				4
			],
			[
				-114,
				55
			],
			[
				-161,
				78
			],
			[
				-152,
				74
			],
			[
				-165,
				77
			],
			[
				-112,
				51
			],
			[
				-4,
				2
			],
			[
				-143,
				66
			],
			[
				-3,
				2
			],
			[
				-5,
				2
			],
			[
				-14,
				7
			],
			[
				-199,
				92
			],
			[
				0,
				0
			]
		],
		[
			[
				38098,
				69070
			],
			[
				-87,
				-117
			],
			[
				-20,
				-31
			],
			[
				-15,
				-25
			],
			[
				-98,
				-156
			],
			[
				0,
				0
			],
			[
				-48,
				-78
			],
			[
				0,
				0
			],
			[
				-34,
				-55
			],
			[
				-2,
				-3
			]
		],
		[
			[
				37794,
				68605
			],
			[
				-211,
				-136
			],
			[
				-86,
				-56
			],
			[
				-105,
				-69
			],
			[
				-46,
				-31
			],
			[
				-53,
				-35
			],
			[
				-175,
				-117
			],
			[
				-8,
				-6
			],
			[
				-1,
				0
			],
			[
				-29,
				-21
			],
			[
				-108,
				-76
			],
			[
				0,
				-1
			],
			[
				-225,
				-168
			],
			[
				-23,
				-17
			],
			[
				-120,
				-88
			],
			[
				-144,
				-106
			],
			[
				-14,
				-47
			],
			[
				-12,
				-40
			],
			[
				-15,
				-51
			],
			[
				-63,
				-219
			],
			[
				-19,
				-65
			],
			[
				-15,
				-50
			],
			[
				-38,
				-131
			],
			[
				-3,
				-9
			],
			[
				0,
				0
			],
			[
				-31,
				-100
			],
			[
				-47,
				-148
			],
			[
				0,
				0
			],
			[
				-45,
				-143
			],
			[
				-24,
				-82
			],
			[
				-24,
				-82
			],
			[
				-14,
				-45
			],
			[
				0,
				0
			],
			[
				-50,
				-172
			],
			[
				-61,
				-211
			],
			[
				0,
				0
			],
			[
				-73,
				-223
			]
		],
		[
			[
				34111,
				69797
			],
			[
				0,
				0
			],
			[
				-3,
				26
			],
			[
				-6,
				11
			],
			[
				-47,
				85
			],
			[
				-6,
				98
			],
			[
				106,
				56
			],
			[
				71,
				-20
			],
			[
				145,
				-41
			],
			[
				21,
				-6
			],
			[
				2,
				-26
			],
			[
				5,
				-50
			],
			[
				5,
				-53
			],
			[
				-25,
				-74
			],
			[
				-6,
				-17
			],
			[
				27,
				14
			],
			[
				32,
				16
			],
			[
				26,
				-25
			],
			[
				0,
				0
			],
			[
				60,
				-56
			],
			[
				35,
				-55
			],
			[
				-123,
				-50
			],
			[
				-33,
				-50
			],
			[
				-89,
				-6
			],
			[
				-11,
				-35
			],
			[
				73,
				-68
			],
			[
				30,
				26
			],
			[
				13,
				11
			],
			[
				8,
				-2
			],
			[
				88,
				-32
			],
			[
				40,
				80
			],
			[
				32,
				63
			],
			[
				36,
				-37
			],
			[
				41,
				-42
			],
			[
				12,
				-169
			],
			[
				-49,
				-56
			],
			[
				-22,
				-117
			],
			[
				-41,
				-95
			],
			[
				18,
				-18
			],
			[
				15,
				-16
			],
			[
				-15,
				-46
			],
			[
				-45,
				-137
			],
			[
				51,
				-27
			],
			[
				-153,
				-275
			],
			[
				61,
				8
			],
			[
				0,
				0
			],
			[
				74,
				-69
			],
			[
				6,
				-5
			],
			[
				47,
				-54
			],
			[
				17,
				-20
			],
			[
				50,
				11
			],
			[
				16,
				3
			],
			[
				3,
				-6
			],
			[
				35,
				-77
			],
			[
				40,
				-98
			],
			[
				3,
				-5
			],
			[
				134,
				-215
			],
			[
				13,
				-55
			],
			[
				-67,
				-211
			],
			[
				-50,
				-159
			],
			[
				56,
				-87
			],
			[
				85,
				-32
			],
			[
				73,
				42
			],
			[
				42,
				-62
			],
			[
				110,
				-127
			],
			[
				89,
				-8
			],
			[
				34,
				-4
			],
			[
				26,
				-40
			],
			[
				49,
				-74
			],
			[
				330,
				-254
			],
			[
				45,
				31
			],
			[
				38,
				22
			],
			[
				6,
				4
			],
			[
				-120,
				40
			],
			[
				-114,
				83
			],
			[
				2,
				55
			],
			[
				82,
				79
			],
			[
				-26,
				7
			],
			[
				-144,
				38
			],
			[
				-30,
				49
			],
			[
				-99,
				61
			],
			[
				-220,
				65
			],
			[
				-68,
				84
			],
			[
				-94,
				6
			],
			[
				15,
				42
			],
			[
				16,
				46
			],
			[
				46,
				128
			],
			[
				57,
				165
			],
			[
				4,
				8
			],
			[
				-49,
				118
			],
			[
				-13,
				30
			],
			[
				72,
				-1
			],
			[
				1,
				36
			],
			[
				-49,
				33
			],
			[
				-231,
				152
			],
			[
				-21,
				45
			],
			[
				69,
				6
			],
			[
				56,
				14
			],
			[
				-10,
				102
			],
			[
				99,
				-75
			],
			[
				51,
				5
			],
			[
				139,
				-298
			],
			[
				38,
				-81
			],
			[
				77,
				-75
			],
			[
				223,
				-306
			],
			[
				86,
				-20
			],
			[
				-71,
				114
			],
			[
				34,
				113
			],
			[
				73,
				23
			],
			[
				-27,
				26
			],
			[
				-215,
				-9
			],
			[
				-189,
				311
			],
			[
				-21,
				34
			],
			[
				-10,
				49
			],
			[
				-24,
				114
			],
			[
				-1,
				9
			],
			[
				11,
				-1
			],
			[
				106,
				-6
			],
			[
				38,
				-69
			],
			[
				46,
				-17
			],
			[
				19,
				82
			],
			[
				94,
				-93
			],
			[
				24,
				-84
			],
			[
				3,
				-9
			],
			[
				65,
				-179
			],
			[
				4,
				-11
			],
			[
				28,
				-36
			],
			[
				89,
				-11
			],
			[
				96,
				-12
			],
			[
				3,
				6
			],
			[
				39,
				85
			],
			[
				-145,
				-9
			],
			[
				-63,
				126
			],
			[
				-30,
				61
			],
			[
				99,
				36
			],
			[
				48,
				67
			],
			[
				21,
				31
			],
			[
				-7,
				32
			],
			[
				-95,
				-8
			],
			[
				-41,
				25
			],
			[
				-203,
				55
			],
			[
				-84,
				-25
			],
			[
				-32,
				19
			],
			[
				-11,
				7
			],
			[
				0,
				9
			],
			[
				11,
				148
			],
			[
				96,
				84
			],
			[
				27,
				102
			],
			[
				104,
				4
			],
			[
				-2,
				42
			],
			[
				-1,
				36
			],
			[
				23,
				16
			],
			[
				35,
				25
			],
			[
				4,
				71
			],
			[
				1,
				26
			],
			[
				9,
				0
			],
			[
				44,
				1
			],
			[
				18,
				0
			],
			[
				0,
				-1
			],
			[
				110,
				-191
			],
			[
				117,
				-85
			],
			[
				246,
				-8
			],
			[
				19,
				-73
			],
			[
				48,
				-43
			],
			[
				96,
				71
			],
			[
				-73,
				10
			],
			[
				-55,
				62
			],
			[
				93,
				7
			],
			[
				93,
				-27
			],
			[
				60,
				60
			],
			[
				-333,
				3
			],
			[
				-10,
				0
			],
			[
				-30,
				8
			],
			[
				-129,
				36
			],
			[
				-22,
				18
			],
			[
				-53,
				45
			],
			[
				-2,
				10
			],
			[
				-8,
				39
			],
			[
				-12,
				61
			],
			[
				-3,
				13
			],
			[
				-121,
				76
			],
			[
				-127,
				-31
			],
			[
				-14,
				-12
			],
			[
				-21,
				-19
			],
			[
				-34,
				-30
			],
			[
				-8,
				-59
			],
			[
				-1,
				-9
			],
			[
				-171,
				-137
			],
			[
				-36,
				8
			],
			[
				-40,
				9
			],
			[
				-2,
				2
			],
			[
				-179,
				161
			],
			[
				62,
				5
			],
			[
				6,
				56
			],
			[
				-10,
				7
			],
			[
				-2,
				1
			],
			[
				-39,
				28
			],
			[
				-113,
				13
			],
			[
				-31,
				25
			],
			[
				20,
				17
			],
			[
				90,
				75
			],
			[
				61,
				-63
			],
			[
				17,
				-18
			],
			[
				121,
				19
			],
			[
				1,
				144
			],
			[
				85,
				43
			],
			[
				101,
				-199
			],
			[
				47,
				-3
			],
			[
				5,
				177
			],
			[
				-115,
				41
			],
			[
				8,
				47
			],
			[
				0,
				0
			],
			[
				2,
				0
			],
			[
				206,
				-10
			],
			[
				38,
				-73
			],
			[
				49,
				13
			],
			[
				-18,
				116
			],
			[
				0,
				4
			],
			[
				-3,
				16
			],
			[
				-158,
				34
			],
			[
				-7,
				2
			],
			[
				-1,
				4
			],
			[
				-10,
				29
			],
			[
				-24,
				25
			],
			[
				-47,
				3
			],
			[
				-2,
				31
			],
			[
				50,
				3
			],
			[
				83,
				-21
			],
			[
				34,
				-30
			],
			[
				176,
				-67
			],
			[
				124,
				-95
			],
			[
				126,
				-3
			],
			[
				52,
				47
			],
			[
				-74,
				2
			],
			[
				-63,
				29
			],
			[
				-211,
				100
			],
			[
				-45,
				21
			],
			[
				8,
				104
			],
			[
				-41,
				43
			],
			[
				38,
				112
			],
			[
				-73,
				-36
			],
			[
				-21,
				-49
			],
			[
				11,
				-40
			],
			[
				-255,
				3
			],
			[
				-72,
				-7
			],
			[
				-49,
				-4
			],
			[
				-165,
				-97
			],
			[
				-3,
				0
			],
			[
				-55,
				-1
			],
			[
				-7,
				0
			],
			[
				-1,
				16
			],
			[
				-3,
				22
			],
			[
				-42,
				-3
			],
			[
				-54,
				-4
			],
			[
				-26,
				-22
			],
			[
				-37,
				1
			],
			[
				-3,
				86
			],
			[
				-12,
				28
			],
			[
				-18,
				41
			],
			[
				119,
				27
			],
			[
				34,
				-38
			],
			[
				2,
				-3
			],
			[
				102,
				23
			],
			[
				85,
				41
			],
			[
				24,
				32
			],
			[
				64,
				12
			],
			[
				54,
				-23
			],
			[
				51,
				5
			],
			[
				6,
				1
			],
			[
				-1,
				4
			],
			[
				-34,
				160
			],
			[
				-1,
				0
			],
			[
				-63,
				12
			],
			[
				-24,
				-43
			],
			[
				-95,
				-43
			],
			[
				-71,
				19
			],
			[
				-13,
				69
			],
			[
				-152,
				64
			],
			[
				-205,
				30
			],
			[
				-6,
				45
			]
		],
		[
			[
				34664,
				70248
			],
			[
				0,
				0
			],
			[
				-1,
				4
			],
			[
				94,
				199
			],
			[
				99,
				8
			],
			[
				67,
				76
			],
			[
				80,
				-14
			],
			[
				-1,
				-42
			],
			[
				-44,
				7
			],
			[
				-1,
				-55
			],
			[
				76,
				-55
			],
			[
				78,
				16
			],
			[
				-7,
				49
			],
			[
				170,
				-65
			],
			[
				-27,
				-59
			],
			[
				84,
				-42
			],
			[
				22,
				-11
			],
			[
				13,
				17
			],
			[
				12,
				16
			],
			[
				-60,
				74
			],
			[
				13,
				26
			],
			[
				270,
				-124
			],
			[
				-91,
				-38
			],
			[
				-24,
				-11
			],
			[
				62,
				-9
			],
			[
				88,
				-14
			],
			[
				26,
				10
			],
			[
				17,
				7
			],
			[
				93,
				-41
			],
			[
				106,
				-85
			],
			[
				74,
				-96
			],
			[
				6,
				-59
			],
			[
				0,
				-2
			],
			[
				3,
				-1
			],
			[
				90,
				-50
			],
			[
				41,
				-88
			],
			[
				-42,
				-163
			],
			[
				51,
				-7
			],
			[
				158,
				-88
			],
			[
				176,
				-196
			],
			[
				243,
				-46
			],
			[
				23,
				21
			],
			[
				-33,
				46
			],
			[
				-180,
				65
			],
			[
				-9,
				23
			],
			[
				-18,
				45
			],
			[
				-235,
				151
			],
			[
				-47,
				61
			],
			[
				-32,
				43
			],
			[
				40,
				14
			],
			[
				1,
				19
			],
			[
				0,
				4
			],
			[
				1,
				43
			],
			[
				-28,
				50
			],
			[
				-77,
				58
			],
			[
				-34,
				26
			],
			[
				36,
				28
			],
			[
				66,
				52
			],
			[
				-13,
				57
			],
			[
				-8,
				10
			],
			[
				-9,
				12
			],
			[
				-38,
				50
			],
			[
				-2,
				3
			],
			[
				-356,
				108
			],
			[
				-116,
				35
			],
			[
				-20,
				6
			],
			[
				-11,
				62
			],
			[
				-62,
				-12
			],
			[
				-62,
				6
			],
			[
				-127,
				57
			],
			[
				-39,
				17
			],
			[
				-25,
				11
			],
			[
				18,
				7
			],
			[
				34,
				12
			],
			[
				-40,
				54
			],
			[
				-25,
				16
			],
			[
				-76,
				-26
			],
			[
				-33,
				-11
			],
			[
				-72,
				42
			],
			[
				64,
				61
			],
			[
				-69,
				45
			],
			[
				-21,
				47
			],
			[
				30,
				99
			],
			[
				297,
				81
			],
			[
				87,
				-41
			],
			[
				22,
				66
			],
			[
				133,
				55
			],
			[
				9,
				35
			],
			[
				80,
				40
			],
			[
				13,
				6
			],
			[
				95,
				-15
			],
			[
				30,
				28
			],
			[
				81,
				30
			],
			[
				64,
				-26
			],
			[
				37,
				63
			],
			[
				142,
				-1
			],
			[
				73,
				-110
			],
			[
				3,
				-4
			],
			[
				4,
				4
			],
			[
				89,
				91
			],
			[
				105,
				22
			],
			[
				97,
				-16
			],
			[
				66,
				-39
			],
			[
				-35,
				-76
			],
			[
				75,
				16
			],
			[
				54,
				-39
			],
			[
				81,
				-10
			],
			[
				64,
				-28
			],
			[
				94,
				-43
			],
			[
				20,
				-122
			],
			[
				-81,
				-98
			],
			[
				-120,
				-85
			],
			[
				21,
				-30
			],
			[
				80,
				14
			],
			[
				250,
				93
			],
			[
				164,
				36
			],
			[
				6,
				-29
			],
			[
				63,
				7
			],
			[
				34,
				54
			],
			[
				-26,
				83
			],
			[
				21,
				42
			],
			[
				83,
				11
			]
		],
		[
			[
				37449,
				70878
			],
			[
				0,
				0
			],
			[
				101,
				13
			],
			[
				33,
				-30
			],
			[
				65,
				71
			],
			[
				163,
				6
			],
			[
				106,
				-138
			],
			[
				37,
				-12
			],
			[
				1,
				-8
			],
			[
				6,
				-61
			],
			[
				30,
				-66
			],
			[
				-56,
				-64
			],
			[
				20,
				-180
			],
			[
				41,
				-48
			],
			[
				7,
				-9
			],
			[
				250,
				-179
			],
			[
				17,
				-111
			],
			[
				-20,
				-128
			],
			[
				-71,
				-80
			],
			[
				11,
				-59
			],
			[
				3,
				-19
			],
			[
				82,
				-98
			],
			[
				-80,
				-86
			],
			[
				13,
				-36
			],
			[
				146,
				115
			],
			[
				-15,
				52
			],
			[
				-76,
				72
			],
			[
				50,
				132
			],
			[
				30,
				101
			],
			[
				86,
				-80
			],
			[
				46,
				77
			],
			[
				5,
				8
			],
			[
				-47,
				123
			],
			[
				-125,
				126
			],
			[
				-134,
				115
			],
			[
				-20,
				-1
			],
			[
				-30,
				-2
			],
			[
				-92,
				70
			],
			[
				34,
				14
			],
			[
				37,
				15
			],
			[
				-30,
				54
			],
			[
				-2,
				5
			],
			[
				6,
				32
			],
			[
				13,
				62
			],
			[
				-86,
				140
			],
			[
				0,
				2
			],
			[
				0,
				5
			],
			[
				0,
				155
			],
			[
				57,
				45
			],
			[
				83,
				1
			],
			[
				14,
				0
			],
			[
				-1,
				6
			],
			[
				-11,
				121
			],
			[
				28,
				7
			],
			[
				134,
				32
			],
			[
				156,
				-76
			],
			[
				1,
				0
			],
			[
				43,
				-64
			],
			[
				8,
				-11
			],
			[
				44,
				-20
			],
			[
				417,
				-190
			],
			[
				10,
				2
			],
			[
				49,
				15
			],
			[
				15,
				35
			],
			[
				1,
				2
			],
			[
				-2,
				1
			],
			[
				-321,
				126
			],
			[
				-38,
				18
			],
			[
				-128,
				59
			],
			[
				-15,
				6
			],
			[
				-24,
				12
			],
			[
				-2,
				1
			],
			[
				1,
				1
			],
			[
				23,
				51
			],
			[
				-13,
				32
			],
			[
				-21,
				40
			],
			[
				-105,
				-8
			],
			[
				-11,
				41
			],
			[
				49,
				67
			],
			[
				53,
				16
			],
			[
				27,
				-17
			],
			[
				50,
				10
			],
			[
				0,
				0
			],
			[
				42,
				13
			],
			[
				76,
				25
			],
			[
				198,
				5
			],
			[
				199,
				-63
			],
			[
				59,
				22
			],
			[
				188,
				-96
			],
			[
				4,
				3
			],
			[
				8,
				6
			],
			[
				37,
				29
			],
			[
				1,
				1
			],
			[
				150,
				-129
			],
			[
				108,
				-68
			],
			[
				5,
				-3
			],
			[
				8,
				-2
			],
			[
				77,
				-22
			],
			[
				80,
				41
			],
			[
				-5,
				6
			],
			[
				-16,
				22
			],
			[
				-139,
				24
			],
			[
				-79,
				44
			],
			[
				-49,
				58
			],
			[
				-20,
				24
			],
			[
				-89,
				64
			],
			[
				-17,
				14
			],
			[
				-24,
				21
			],
			[
				-50,
				65
			],
			[
				-105,
				24
			],
			[
				-53,
				62
			],
			[
				-116,
				6
			],
			[
				-178,
				-30
			],
			[
				-128,
				-36
			],
			[
				-76,
				-13
			],
			[
				15,
				105
			],
			[
				124,
				91
			],
			[
				65,
				48
			],
			[
				5,
				47
			],
			[
				72,
				80
			],
			[
				-6,
				53
			],
			[
				-1,
				10
			],
			[
				36,
				61
			],
			[
				-32,
				64
			],
			[
				-52,
				24
			],
			[
				-47,
				-23
			],
			[
				-50,
				-37
			],
			[
				-8,
				-6
			],
			[
				-54,
				-61
			],
			[
				-137,
				-33
			],
			[
				-78,
				-20
			],
			[
				-196,
				-175
			],
			[
				-19,
				-16
			],
			[
				-102,
				-85
			],
			[
				0,
				0
			]
		],
		[
			[
				38206,
				71553
			],
			[
				-66,
				-56
			],
			[
				-145,
				-78
			],
			[
				-481,
				-80
			],
			[
				-178,
				-4
			],
			[
				-11,
				0
			],
			[
				-13,
				17
			],
			[
				-13,
				19
			],
			[
				-5,
				7
			],
			[
				63,
				57
			],
			[
				76,
				69
			],
			[
				122,
				19
			],
			[
				12,
				49
			],
			[
				-101,
				65
			],
			[
				-4,
				27
			],
			[
				-4,
				32
			],
			[
				0,
				0
			],
			[
				-158,
				50
			],
			[
				-44,
				14
			],
			[
				-7,
				55
			],
			[
				-3,
				28
			],
			[
				-13,
				-6
			],
			[
				-41,
				-17
			],
			[
				-62,
				-25
			],
			[
				-82,
				-34
			],
			[
				0,
				-74
			],
			[
				-9,
				-12
			],
			[
				-33,
				-43
			],
			[
				-102,
				-134
			],
			[
				-54,
				-40
			],
			[
				-242,
				-16
			],
			[
				-72,
				-38
			],
			[
				-296,
				-53
			],
			[
				-48,
				125
			],
			[
				-21,
				-49
			],
			[
				-20,
				-48
			],
			[
				-220,
				-46
			],
			[
				0,
				0
			]
		],
		[
			[
				35931,
				71333
			],
			[
				-18,
				-4
			],
			[
				-133,
				2
			],
			[
				30,
				72
			],
			[
				24,
				59
			],
			[
				-16,
				101
			],
			[
				-3,
				21
			],
			[
				-4,
				28
			],
			[
				-56,
				31
			],
			[
				-8,
				4
			],
			[
				-108,
				60
			],
			[
				-46,
				25
			],
			[
				67,
				78
			],
			[
				-14,
				68
			],
			[
				-15,
				69
			],
			[
				125,
				35
			],
			[
				-1,
				42
			],
			[
				52,
				46
			],
			[
				95,
				-20
			],
			[
				40,
				-55
			],
			[
				41,
				-57
			]
		],
		[
			[
				35612,
				72056
			],
			[
				-160,
				77
			],
			[
				-129,
				-9
			],
			[
				-139,
				-9
			],
			[
				-11,
				-48
			],
			[
				-80,
				-8
			],
			[
				-21,
				-3
			],
			[
				-13,
				-1
			],
			[
				-70,
				52
			],
			[
				-93,
				-41
			],
			[
				-22,
				-10
			],
			[
				-73,
				-108
			],
			[
				-65,
				-65
			],
			[
				-7,
				-7
			],
			[
				-37,
				-3
			],
			[
				-42,
				-3
			],
			[
				-8,
				85
			],
			[
				-31,
				56
			],
			[
				-98,
				46
			],
			[
				-21,
				-33
			],
			[
				88,
				-50
			],
			[
				-3,
				-52
			]
		],
		[
			[
				35557,
				71708
			],
			[
				195,
				-160
			],
			[
				9,
				-7
			],
			[
				17,
				-98
			],
			[
				-116,
				7
			],
			[
				-10,
				-2
			],
			[
				-131,
				-22
			],
			[
				-17,
				-60
			],
			[
				68,
				-7
			],
			[
				63,
				-79
			],
			[
				-19,
				-39
			],
			[
				-97,
				-84
			],
			[
				-96,
				-36
			],
			[
				-47,
				10
			],
			[
				-7,
				2
			],
			[
				-45,
				10
			],
			[
				-85,
				8
			],
			[
				-23,
				-29
			],
			[
				-100,
				-24
			],
			[
				-76,
				38
			],
			[
				-5,
				3
			],
			[
				-52,
				-61
			],
			[
				-76,
				-36
			],
			[
				-70,
				-32
			],
			[
				-13,
				-31
			],
			[
				-131,
				-80
			],
			[
				-83,
				-5
			],
			[
				-62,
				100
			],
			[
				16,
				51
			],
			[
				-90,
				-3
			],
			[
				-11,
				51
			],
			[
				111,
				89
			],
			[
				35,
				-30
			],
			[
				2,
				-2
			],
			[
				0,
				5
			],
			[
				5,
				99
			],
			[
				35,
				25
			],
			[
				5,
				3
			],
			[
				45,
				-1
			],
			[
				110,
				-1
			],
			[
				120,
				-2
			],
			[
				53,
				28
			],
			[
				-13,
				28
			],
			[
				-79,
				-9
			],
			[
				-89,
				5
			],
			[
				-28,
				1
			],
			[
				-110,
				-9
			],
			[
				-6,
				-1
			],
			[
				-39,
				-3
			],
			[
				-27,
				29
			],
			[
				39,
				136
			],
			[
				36,
				10
			],
			[
				25,
				7
			],
			[
				17,
				4
			],
			[
				-10,
				21
			],
			[
				-3,
				5
			],
			[
				-18,
				35
			],
			[
				-4,
				69
			],
			[
				28,
				16
			],
			[
				13,
				8
			],
			[
				40,
				1
			],
			[
				8,
				0
			],
			[
				3,
				11
			],
			[
				13,
				52
			],
			[
				16,
				65
			],
			[
				1,
				5
			],
			[
				4,
				1
			],
			[
				96,
				29
			],
			[
				31,
				108
			],
			[
				5,
				34
			],
			[
				74,
				27
			],
			[
				2,
				0
			],
			[
				111,
				-13
			],
			[
				84,
				41
			],
			[
				0,
				0
			],
			[
				74,
				35
			],
			[
				74,
				-16
			],
			[
				20,
				-4
			],
			[
				22,
				-5
			],
			[
				84,
				-73
			],
			[
				47,
				-46
			],
			[
				57,
				-55
			],
			[
				-9,
				-55
			],
			[
				-41,
				-46
			],
			[
				-13,
				-14
			],
			[
				38,
				-32
			]
		],
		[
			[
				37137,
				71672
			],
			[
				0,
				0
			],
			[
				23,
				-33
			],
			[
				22,
				-53
			],
			[
				-6,
				-14
			],
			[
				-32,
				-32
			],
			[
				-27,
				-19
			],
			[
				-49,
				-13
			],
			[
				-47,
				-3
			],
			[
				-32,
				6
			],
			[
				3,
				28
			],
			[
				53,
				85
			],
			[
				20,
				20
			],
			[
				19,
				19
			],
			[
				28,
				10
			],
			[
				19,
				7
			],
			[
				6,
				-8
			]
		],
		[
			[
				34538,
				70539
			],
			[
				-147,
				-35
			],
			[
				-36,
				44
			],
			[
				43,
				68
			],
			[
				78,
				59
			],
			[
				73,
				25
			],
			[
				117,
				-4
			],
			[
				73,
				-20
			],
			[
				44,
				-53
			],
			[
				-25,
				-57
			],
			[
				-220,
				-27
			]
		],
		[
			[
				35272,
				69572
			],
			[
				-13,
				-2
			],
			[
				-18,
				14
			],
			[
				0,
				0
			],
			[
				-12,
				20
			],
			[
				-2,
				4
			],
			[
				-2,
				21
			],
			[
				30,
				23
			],
			[
				62,
				27
			],
			[
				26,
				2
			],
			[
				10,
				-9
			],
			[
				6,
				-6
			],
			[
				14,
				-32
			],
			[
				-34,
				-37
			],
			[
				-22,
				-12
			],
			[
				-39,
				-12
			],
			[
				-6,
				-1
			]
		],
		[
			[
				34846,
				68786
			],
			[
				217,
				127
			],
			[
				151,
				-130
			],
			[
				-39,
				-237
			],
			[
				-130,
				17
			],
			[
				-25,
				65
			],
			[
				-87,
				-7
			],
			[
				-78,
				30
			],
			[
				-48,
				18
			],
			[
				-43,
				-17
			],
			[
				0,
				67
			],
			[
				77,
				65
			],
			[
				5,
				2
			]
		],
		[
			[
				18088,
				13194
			],
			[
				-4,
				-3
			],
			[
				0,
				-1
			],
			[
				-43,
				-200
			],
			[
				-78,
				-50
			],
			[
				-30,
				102
			],
			[
				57,
				93
			],
			[
				-51,
				-26
			],
			[
				-73,
				-74
			],
			[
				-121,
				-7
			],
			[
				-1,
				0
			],
			[
				-32,
				-31
			]
		],
		[
			[
				17712,
				12997
			],
			[
				0,
				0
			],
			[
				-32,
				-31
			],
			[
				-22,
				-158
			],
			[
				-33,
				-3
			],
			[
				5,
				-73
			],
			[
				-67,
				-48
			],
			[
				13,
				-42
			],
			[
				77,
				55
			],
			[
				-5,
				-42
			],
			[
				-67,
				-83
			],
			[
				30,
				-15
			],
			[
				8,
				-66
			],
			[
				41,
				-40
			],
			[
				-8,
				-94
			],
			[
				0,
				0
			]
		],
		[
			[
				17804,
				12814
			],
			[
				-28,
				-40
			],
			[
				-40,
				6
			],
			[
				-12,
				27
			],
			[
				7,
				10
			],
			[
				72,
				60
			],
			[
				14,
				-21
			],
			[
				-13,
				-42
			]
		],
		[
			[
				17767,
				12869
			],
			[
				-71,
				-45
			],
			[
				1,
				65
			],
			[
				3,
				44
			],
			[
				11,
				30
			],
			[
				39,
				26
			],
			[
				23,
				-39
			],
			[
				20,
				-34
			],
			[
				-31,
				-33
			],
			[
				5,
				-14
			]
		],
		[
			[
				17887,
				12837
			],
			[
				-34,
				-14
			],
			[
				-34,
				80
			],
			[
				18,
				37
			],
			[
				43,
				16
			],
			[
				37,
				-35
			],
			[
				-11,
				-34
			],
			[
				22,
				-7
			],
			[
				-41,
				-43
			]
		],
		[
			[
				22420,
				57958
			],
			[
				-27,
				-17
			],
			[
				-14,
				1
			],
			[
				-16,
				11
			],
			[
				0,
				38
			],
			[
				30,
				60
			],
			[
				31,
				38
			],
			[
				37,
				11
			],
			[
				29,
				-15
			],
			[
				3,
				-21
			],
			[
				0,
				-4
			],
			[
				1,
				-4
			],
			[
				-41,
				-69
			],
			[
				-33,
				-29
			]
		],
		[
			[
				22350,
				58156
			],
			[
				26,
				-56
			],
			[
				-37,
				-62
			],
			[
				-67,
				-51
			],
			[
				-42,
				33
			],
			[
				50,
				20
			],
			[
				-3,
				27
			],
			[
				-63,
				-21
			],
			[
				-41,
				23
			],
			[
				-3,
				10
			],
			[
				10,
				10
			],
			[
				21,
				12
			],
			[
				14,
				-1
			],
			[
				69,
				8
			],
			[
				13,
				14
			],
			[
				-1,
				7
			],
			[
				6,
				29
			],
			[
				48,
				-2
			]
		],
		[
			[
				22915,
				58311
			],
			[
				-14,
				-2
			],
			[
				-35,
				3
			],
			[
				-26,
				15
			],
			[
				30,
				21
			],
			[
				45,
				14
			],
			[
				20,
				-2
			],
			[
				11,
				-12
			],
			[
				0,
				-5
			],
			[
				-13,
				-21
			],
			[
				-18,
				-11
			]
		],
		[
			[
				22950,
				58641
			],
			[
				-52,
				-51
			],
			[
				-76,
				21
			],
			[
				80,
				46
			],
			[
				48,
				-16
			]
		],
		[
			[
				25771,
				56721
			],
			[
				-178,
				-18
			],
			[
				-66,
				28
			],
			[
				31,
				37
			],
			[
				68,
				6
			],
			[
				43,
				74
			],
			[
				19,
				32
			],
			[
				-35,
				35
			],
			[
				-30,
				6
			],
			[
				-24,
				-39
			],
			[
				-75,
				-38
			],
			[
				-23,
				-12
			],
			[
				-11,
				-68
			],
			[
				-168,
				74
			],
			[
				-131,
				58
			],
			[
				7,
				59
			],
			[
				-5,
				10
			],
			[
				-29,
				50
			],
			[
				-5,
				9
			],
			[
				3,
				4
			],
			[
				41,
				65
			],
			[
				2,
				5
			],
			[
				23,
				10
			],
			[
				220,
				101
			],
			[
				32,
				44
			],
			[
				8,
				11
			],
			[
				41,
				18
			],
			[
				21,
				9
			],
			[
				39,
				58
			],
			[
				4,
				6
			],
			[
				1,
				1
			],
			[
				70,
				28
			],
			[
				1,
				66
			],
			[
				-17,
				42
			],
			[
				-32,
				84
			],
			[
				28,
				38
			],
			[
				5,
				6
			],
			[
				3,
				4
			],
			[
				-9,
				5
			],
			[
				-51,
				27
			],
			[
				-135,
				73
			],
			[
				-7,
				35
			],
			[
				-9,
				44
			],
			[
				96,
				-34
			],
			[
				124,
				13
			],
			[
				25,
				3
			],
			[
				6,
				18
			],
			[
				-42,
				36
			],
			[
				-150,
				34
			],
			[
				-7,
				81
			],
			[
				-5,
				66
			],
			[
				-95,
				-14
			],
			[
				-71,
				-11
			],
			[
				-42,
				47
			],
			[
				-7,
				63
			],
			[
				-157,
				93
			],
			[
				2,
				7
			],
			[
				0,
				0
			]
		],
		[
			[
				25118,
				58210
			],
			[
				11,
				47
			],
			[
				46,
				20
			],
			[
				88,
				-27
			],
			[
				202,
				130
			],
			[
				105,
				15
			],
			[
				-6,
				-76
			],
			[
				-1,
				-9
			],
			[
				156,
				-87
			],
			[
				108,
				-61
			],
			[
				15,
				-102
			],
			[
				6,
				-64
			],
			[
				28,
				-19
			],
			[
				0,
				0
			],
			[
				33,
				8
			],
			[
				32,
				-72
			],
			[
				-38,
				-128
			],
			[
				-5,
				-2
			],
			[
				-67,
				-20
			],
			[
				6,
				-37
			],
			[
				107,
				10
			],
			[
				20,
				-53
			],
			[
				47,
				19
			],
			[
				234,
				97
			],
			[
				211,
				50
			],
			[
				9,
				32
			],
			[
				-120,
				-23
			],
			[
				-142,
				10
			],
			[
				-90,
				-42
			],
			[
				-29,
				-14
			],
			[
				-15,
				-7
			],
			[
				-19,
				6
			],
			[
				-64,
				21
			],
			[
				51,
				33
			],
			[
				-8,
				36
			],
			[
				-11,
				54
			],
			[
				79,
				90
			],
			[
				33,
				37
			],
			[
				-15,
				7
			],
			[
				-10,
				4
			],
			[
				-2,
				1
			],
			[
				-28,
				11
			],
			[
				-9,
				11
			],
			[
				-27,
				31
			],
			[
				-68,
				87
			],
			[
				28,
				22
			],
			[
				60,
				-20
			],
			[
				140,
				20
			],
			[
				6,
				60
			],
			[
				45,
				33
			],
			[
				74,
				-31
			],
			[
				147,
				13
			],
			[
				38,
				40
			],
			[
				141,
				-9
			],
			[
				195,
				-14
			],
			[
				109,
				-47
			],
			[
				87,
				-52
			],
			[
				67,
				-65
			],
			[
				34,
				-13
			],
			[
				58,
				-23
			],
			[
				-17,
				135
			],
			[
				-42,
				29
			],
			[
				-109,
				35
			],
			[
				-107,
				54
			],
			[
				-65,
				34
			],
			[
				-162,
				21
			],
			[
				-83,
				10
			],
			[
				0,
				1
			],
			[
				104,
				154
			],
			[
				82,
				-4
			],
			[
				79,
				93
			],
			[
				49,
				7
			],
			[
				146,
				22
			],
			[
				97,
				14
			],
			[
				177,
				-15
			],
			[
				53,
				60
			],
			[
				-89,
				27
			],
			[
				-235,
				-19
			],
			[
				-112,
				-8
			],
			[
				-41,
				-10
			],
			[
				-47,
				-11
			],
			[
				-164,
				-87
			],
			[
				-22,
				-12
			],
			[
				-132,
				-188
			],
			[
				-67,
				-33
			],
			[
				-275,
				6
			],
			[
				-147,
				-84
			],
			[
				-204,
				63
			],
			[
				-54,
				-13
			],
			[
				-63,
				81
			],
			[
				80,
				54
			],
			[
				22,
				153
			],
			[
				83,
				-16
			],
			[
				26,
				37
			],
			[
				-81,
				65
			],
			[
				90,
				90
			],
			[
				57,
				-86
			],
			[
				39,
				44
			],
			[
				-49,
				53
			],
			[
				5,
				5
			],
			[
				21,
				20
			],
			[
				97,
				-46
			],
			[
				-36,
				72
			],
			[
				78,
				-4
			],
			[
				134,
				-8
			],
			[
				6,
				-1
			],
			[
				3,
				7
			],
			[
				10,
				30
			],
			[
				-140,
				39
			],
			[
				-38,
				10
			],
			[
				-91,
				3
			],
			[
				-50,
				-37
			],
			[
				-149,
				-38
			],
			[
				-97,
				133
			],
			[
				-82,
				38
			],
			[
				35,
				43
			],
			[
				60,
				48
			],
			[
				85,
				38
			],
			[
				30,
				-37
			],
			[
				76,
				-22
			],
			[
				137,
				8
			],
			[
				26,
				2
			],
			[
				69,
				-23
			],
			[
				23,
				12
			],
			[
				38,
				20
			],
			[
				34,
				-5
			],
			[
				2,
				-62
			],
			[
				-1,
				-4
			],
			[
				-19,
				-71
			],
			[
				41,
				-22
			],
			[
				14,
				-8
			],
			[
				29,
				9
			],
			[
				-29,
				55
			],
			[
				14,
				42
			],
			[
				65,
				-43
			],
			[
				58,
				51
			],
			[
				197,
				-15
			],
			[
				95,
				-24
			],
			[
				6,
				-2
			],
			[
				-4,
				-3
			],
			[
				-42,
				-31
			],
			[
				28,
				-30
			],
			[
				34,
				-7
			],
			[
				12,
				-2
			],
			[
				75,
				-16
			],
			[
				21,
				42
			],
			[
				-36,
				19
			],
			[
				-16,
				9
			],
			[
				-29,
				70
			],
			[
				-10,
				23
			],
			[
				-125,
				67
			],
			[
				-95,
				-14
			],
			[
				-13,
				-2
			],
			[
				-3,
				8
			],
			[
				-19,
				52
			],
			[
				-124,
				28
			],
			[
				19,
				43
			],
			[
				-81,
				-27
			],
			[
				-294,
				35
			],
			[
				-7,
				1
			],
			[
				-41,
				53
			],
			[
				-9,
				13
			],
			[
				66,
				18
			],
			[
				-22,
				8
			],
			[
				-30,
				10
			],
			[
				-64,
				18
			],
			[
				13,
				15
			],
			[
				20,
				22
			],
			[
				-83,
				23
			],
			[
				-5,
				-19
			],
			[
				-7,
				-24
			],
			[
				-48,
				11
			],
			[
				-15,
				36
			],
			[
				33,
				31
			],
			[
				56,
				14
			],
			[
				114,
				27
			],
			[
				124,
				-21
			],
			[
				168,
				27
			]
		],
		[
			[
				24237,
				58596
			],
			[
				0,
				-32
			],
			[
				-47,
				-122
			],
			[
				-79,
				-70
			],
			[
				-103,
				39
			],
			[
				7,
				87
			],
			[
				113,
				39
			],
			[
				-106,
				30
			],
			[
				0,
				0
			]
		],
		[
			[
				24022,
				58567
			],
			[
				-12,
				4
			],
			[
				68,
				177
			],
			[
				74,
				36
			],
			[
				47,
				-64
			],
			[
				-82,
				-31
			],
			[
				9,
				-35
			],
			[
				113,
				27
			],
			[
				-2,
				-85
			],
			[
				0,
				0
			]
		],
		[
			[
				24843,
				58289
			],
			[
				0,
				0
			],
			[
				-7,
				-53
			],
			[
				-214,
				-85
			],
			[
				-8,
				75
			],
			[
				-12,
				10
			],
			[
				0,
				0
			]
		],
		[
			[
				24602,
				58236
			],
			[
				-36,
				31
			],
			[
				8,
				71
			],
			[
				81,
				27
			],
			[
				-69,
				16
			],
			[
				-1,
				37
			],
			[
				128,
				34
			],
			[
				71,
				53
			],
			[
				31,
				-106
			],
			[
				-65,
				-21
			],
			[
				99,
				-35
			],
			[
				-6,
				-54
			]
		],
		[
			[
				24891,
				57924
			],
			[
				-48,
				-3
			],
			[
				-19,
				5
			],
			[
				-25,
				18
			],
			[
				17,
				30
			],
			[
				81,
				39
			],
			[
				34,
				-13
			],
			[
				-13,
				-55
			],
			[
				-27,
				-21
			]
		],
		[
			[
				25118,
				57820
			],
			[
				3,
				-70
			],
			[
				-65,
				-149
			],
			[
				-9,
				-137
			],
			[
				11,
				-56
			],
			[
				-35,
				-76
			],
			[
				-78,
				-27
			],
			[
				-42,
				47
			],
			[
				3,
				233
			],
			[
				56,
				7
			],
			[
				74,
				94
			],
			[
				-81,
				88
			],
			[
				66,
				9
			],
			[
				30,
				-35
			],
			[
				40,
				60
			],
			[
				27,
				12
			]
		],
		[
			[
				25293,
				57248
			],
			[
				-59,
				-27
			],
			[
				-5,
				2
			],
			[
				-36,
				19
			],
			[
				16,
				200
			],
			[
				85,
				105
			],
			[
				60,
				74
			],
			[
				23,
				-6
			],
			[
				33,
				-8
			],
			[
				15,
				-4
			],
			[
				35,
				-9
			],
			[
				61,
				-55
			],
			[
				39,
				-130
			],
			[
				-53,
				-83
			],
			[
				-156,
				-52
			],
			[
				-58,
				-26
			]
		],
		[
			[
				24761,
				57189
			],
			[
				-60,
				-32
			],
			[
				-112,
				106
			],
			[
				18,
				45
			],
			[
				72,
				14
			],
			[
				47,
				44
			],
			[
				97,
				-19
			],
			[
				12,
				-66
			],
			[
				10,
				-81
			],
			[
				-84,
				-11
			]
		],
		[
			[
				24859,
				57581
			],
			[
				-4,
				-197
			],
			[
				-74,
				23
			],
			[
				-63,
				47
			],
			[
				-48,
				105
			],
			[
				16,
				132
			],
			[
				146,
				59
			],
			[
				82,
				7
			],
			[
				-31,
				-69
			],
			[
				46,
				-32
			],
			[
				-70,
				-75
			]
		],
		[
			[
				24012,
				56911
			],
			[
				-196,
				-102
			],
			[
				-9,
				38
			],
			[
				114,
				113
			],
			[
				120,
				83
			],
			[
				71,
				-7
			],
			[
				-17,
				-52
			],
			[
				-83,
				-73
			]
		],
		[
			[
				23941,
				57033
			],
			[
				-136,
				-89
			],
			[
				-7,
				54
			],
			[
				75,
				72
			],
			[
				23,
				36
			],
			[
				65,
				77
			],
			[
				67,
				-14
			],
			[
				1,
				0
			],
			[
				0,
				0
			],
			[
				-11,
				-66
			],
			[
				-77,
				-70
			]
		],
		[
			[
				23269,
				57074
			],
			[
				-27,
				-33
			],
			[
				-13,
				28
			],
			[
				-26,
				-20
			],
			[
				-114,
				18
			],
			[
				42,
				110
			],
			[
				85,
				25
			],
			[
				74,
				-44
			],
			[
				0,
				0
			],
			[
				2,
				-1
			],
			[
				-23,
				-83
			]
		],
		[
			[
				23777,
				57099
			],
			[
				-21,
				-3
			],
			[
				-19,
				24
			],
			[
				2,
				44
			],
			[
				4,
				20
			],
			[
				10,
				44
			],
			[
				13,
				21
			],
			[
				25,
				27
			],
			[
				43,
				29
			],
			[
				73,
				-20
			],
			[
				-3,
				-30
			],
			[
				-59,
				-74
			],
			[
				-68,
				-82
			]
		],
		[
			[
				23876,
				58369
			],
			[
				-18,
				-16
			],
			[
				-24,
				1
			],
			[
				-16,
				7
			],
			[
				-10,
				20
			],
			[
				-12,
				30
			],
			[
				-1,
				16
			],
			[
				12,
				5
			],
			[
				10,
				3
			],
			[
				28,
				6
			],
			[
				32,
				6
			],
			[
				6,
				-7
			],
			[
				4,
				-44
			],
			[
				-11,
				-27
			]
		],
		[
			[
				25581,
				59854
			],
			[
				0,
				0
			],
			[
				20,
				-6
			],
			[
				-29,
				-76
			],
			[
				-48,
				-3
			],
			[
				-15,
				12
			],
			[
				20,
				48
			],
			[
				0,
				0
			]
		],
		[
			[
				24462,
				60119
			],
			[
				39,
				-78
			],
			[
				-108,
				20
			],
			[
				69,
				58
			]
		],
		[
			[
				25622,
				59698
			],
			[
				-13,
				-4
			],
			[
				-14,
				1
			],
			[
				-10,
				15
			],
			[
				6,
				21
			],
			[
				60,
				40
			],
			[
				30,
				-9
			],
			[
				32,
				-23
			],
			[
				-3,
				-28
			],
			[
				-76,
				-11
			],
			[
				-12,
				-2
			]
		],
		[
			[
				25421,
				59100
			],
			[
				-78,
				-24
			],
			[
				-15,
				42
			],
			[
				67,
				29
			],
			[
				-18,
				35
			],
			[
				-62,
				5
			],
			[
				-12,
				75
			],
			[
				24,
				71
			],
			[
				74,
				4
			],
			[
				34,
				81
			],
			[
				46,
				-46
			],
			[
				12,
				-79
			],
			[
				-42,
				-184
			],
			[
				-30,
				-9
			]
		],
		[
			[
				25241,
				59051
			],
			[
				-102,
				-7
			],
			[
				-25,
				6
			],
			[
				-18,
				16
			],
			[
				-5,
				18
			],
			[
				28,
				32
			],
			[
				93,
				0
			],
			[
				64,
				-1
			],
			[
				16,
				-37
			],
			[
				-51,
				-27
			]
		],
		[
			[
				25137,
				59290
			],
			[
				-174,
				-15
			],
			[
				33,
				53
			],
			[
				133,
				23
			],
			[
				8,
				-61
			]
		],
		[
			[
				25322,
				58721
			],
			[
				-92,
				-31
			],
			[
				-72,
				103
			],
			[
				5,
				66
			],
			[
				70,
				147
			],
			[
				134,
				25
			],
			[
				2,
				-63
			],
			[
				-13,
				-51
			],
			[
				-34,
				-196
			]
		],
		[
			[
				24946,
				58576
			],
			[
				-19,
				-2
			],
			[
				-27,
				13
			],
			[
				-18,
				25
			],
			[
				-1,
				25
			],
			[
				14,
				36
			],
			[
				10,
				18
			],
			[
				31,
				2
			],
			[
				19,
				-2
			],
			[
				60,
				-26
			],
			[
				-22,
				-69
			],
			[
				-47,
				-20
			]
		],
		[
			[
				25583,
				58679
			],
			[
				-54,
				-89
			],
			[
				-54,
				81
			],
			[
				17,
				36
			],
			[
				-32,
				128
			],
			[
				80,
				69
			],
			[
				56,
				-47
			],
			[
				-23,
				-40
			],
			[
				10,
				-138
			]
		],
		[
			[
				25377,
				58478
			],
			[
				-115,
				-64
			],
			[
				-94,
				30
			],
			[
				32,
				118
			],
			[
				109,
				97
			],
			[
				42,
				-6
			],
			[
				38,
				-95
			],
			[
				-12,
				-80
			]
		],
		[
			[
				24715,
				58774
			],
			[
				-3,
				-33
			],
			[
				-46,
				13
			],
			[
				-14,
				11
			],
			[
				-13,
				22
			],
			[
				0,
				26
			],
			[
				8,
				19
			],
			[
				19,
				7
			],
			[
				19,
				2
			],
			[
				12,
				-4
			],
			[
				11,
				-9
			],
			[
				7,
				-12
			],
			[
				3,
				-20
			],
			[
				-3,
				-22
			]
		],
		[
			[
				23648,
				59821
			],
			[
				-100,
				-71
			],
			[
				-36,
				52
			],
			[
				86,
				83
			],
			[
				57,
				-34
			],
			[
				-7,
				-30
			]
		],
		[
			[
				23896,
				59191
			],
			[
				-52,
				-69
			],
			[
				-62,
				4
			],
			[
				39,
				62
			],
			[
				75,
				3
			]
		],
		[
			[
				23994,
				53198
			],
			[
				0,
				0
			],
			[
				22,
				109
			],
			[
				95,
				39
			],
			[
				12,
				35
			],
			[
				76,
				-7
			],
			[
				45,
				-215
			],
			[
				86,
				-51
			],
			[
				21,
				61
			],
			[
				-93,
				104
			],
			[
				9,
				49
			],
			[
				75,
				-47
			],
			[
				33,
				38
			],
			[
				-16,
				12
			],
			[
				-81,
				65
			],
			[
				-9,
				7
			],
			[
				-1,
				15
			],
			[
				-2,
				121
			],
			[
				-25,
				55
			],
			[
				-11,
				-75
			],
			[
				-13,
				-93
			],
			[
				-31,
				-5
			],
			[
				-9,
				42
			],
			[
				-32,
				-3
			],
			[
				-3,
				0
			],
			[
				-72,
				-7
			],
			[
				-37,
				-58
			],
			[
				-22,
				-2
			],
			[
				-28,
				63
			],
			[
				21,
				150
			],
			[
				67,
				39
			],
			[
				29,
				193
			],
			[
				17,
				28
			],
			[
				-4,
				92
			],
			[
				30,
				76
			],
			[
				38,
				78
			],
			[
				86,
				78
			],
			[
				68,
				36
			],
			[
				-19,
				-50
			],
			[
				18,
				-8
			],
			[
				68,
				102
			],
			[
				5,
				3
			],
			[
				146,
				93
			],
			[
				34,
				21
			],
			[
				6,
				4
			],
			[
				26,
				51
			],
			[
				100,
				39
			],
			[
				76,
				-18
			],
			[
				-3,
				-102
			],
			[
				17,
				10
			],
			[
				31,
				17
			],
			[
				56,
				-21
			],
			[
				55,
				-116
			],
			[
				60,
				-12
			],
			[
				-7,
				-64
			],
			[
				12,
				-5
			],
			[
				20,
				-9
			],
			[
				36,
				-18
			],
			[
				100,
				3
			],
			[
				98,
				3
			],
			[
				9,
				-8
			],
			[
				60,
				-53
			],
			[
				13,
				-120
			],
			[
				55,
				-66
			],
			[
				65,
				-18
			],
			[
				2,
				-1
			],
			[
				99,
				62
			],
			[
				40,
				-166
			],
			[
				136,
				-283
			],
			[
				40,
				-17
			],
			[
				-5,
				17
			],
			[
				-24,
				74
			],
			[
				-9,
				123
			],
			[
				-3,
				44
			],
			[
				-14,
				14
			],
			[
				-43,
				43
			],
			[
				-9,
				45
			],
			[
				-18,
				88
			],
			[
				16,
				42
			],
			[
				-2,
				65
			],
			[
				-84,
				70
			],
			[
				6,
				134
			],
			[
				-25,
				26
			],
			[
				-9,
				9
			],
			[
				-84,
				-77
			],
			[
				-100,
				27
			],
			[
				6,
				34
			],
			[
				-47,
				39
			],
			[
				-87,
				-16
			],
			[
				-104,
				18
			],
			[
				-44,
				36
			],
			[
				-46,
				72
			],
			[
				-59,
				41
			],
			[
				-97,
				6
			],
			[
				0,
				0
			]
		],
		[
			[
				26960,
				55805
			],
			[
				-29,
				-37
			],
			[
				-84,
				-120
			],
			[
				-28,
				-79
			],
			[
				-7,
				-173
			],
			[
				33,
				-46
			],
			[
				34,
				14
			],
			[
				20,
				124
			],
			[
				35,
				77
			],
			[
				60,
				84
			],
			[
				135,
				97
			],
			[
				96,
				-13
			]
		],
		[
			[
				30021,
				53707
			],
			[
				17,
				-83
			],
			[
				53,
				-260
			],
			[
				-2,
				-6
			],
			[
				-24,
				-71
			],
			[
				-21,
				-60
			],
			[
				-1,
				-2
			],
			[
				-27,
				-82
			],
			[
				0,
				0
			],
			[
				-63,
				-186
			],
			[
				-3,
				-10
			],
			[
				0,
				0
			],
			[
				-58,
				-174
			],
			[
				0,
				0
			],
			[
				-34,
				-104
			],
			[
				-20,
				-61
			],
			[
				-8,
				-78
			],
			[
				-12,
				-113
			],
			[
				-15,
				-153
			],
			[
				0,
				0
			],
			[
				-26,
				-254
			],
			[
				0,
				0
			],
			[
				-22,
				-195
			],
			[
				-10,
				-98
			],
			[
				-14,
				-127
			],
			[
				-9,
				-84
			],
			[
				0,
				0
			],
			[
				-13,
				-120
			],
			[
				1,
				-91
			],
			[
				1,
				-90
			],
			[
				2,
				-207
			],
			[
				1,
				-36
			],
			[
				0,
				-31
			],
			[
				0,
				-1
			],
			[
				0,
				-46
			],
			[
				1,
				-20
			],
			[
				0,
				-3
			],
			[
				0,
				-37
			],
			[
				0,
				-1
			],
			[
				0,
				-22
			],
			[
				1,
				-107
			],
			[
				0,
				0
			],
			[
				3,
				-311
			],
			[
				2,
				-60
			],
			[
				0,
				-4
			],
			[
				1,
				-42
			],
			[
				2,
				-53
			],
			[
				0,
				-4
			],
			[
				9,
				-274
			],
			[
				0,
				0
			],
			[
				-97,
				-107
			],
			[
				-69,
				-75
			],
			[
				-45,
				-50
			],
			[
				-76,
				-83
			],
			[
				0,
				0
			],
			[
				-68,
				-74
			],
			[
				-31,
				-34
			],
			[
				-31,
				-163
			],
			[
				0,
				0
			],
			[
				-11,
				-60
			],
			[
				0,
				0
			],
			[
				-28,
				-144
			],
			[
				-36,
				-208
			],
			[
				-4,
				-21
			],
			[
				-22,
				-124
			],
			[
				-27,
				-156
			]
		],
		[
			[
				32828,
				58443
			],
			[
				-27,
				-25
			],
			[
				-22,
				-20
			],
			[
				-199,
				-186
			],
			[
				-57,
				-68
			],
			[
				-2,
				-2
			],
			[
				-164,
				-200
			],
			[
				0,
				0
			],
			[
				27,
				-103
			],
			[
				68,
				-266
			],
			[
				65,
				-258
			],
			[
				28,
				-121
			],
			[
				8,
				-36
			],
			[
				35,
				-162
			],
			[
				62,
				-282
			],
			[
				21,
				-99
			],
			[
				10,
				-47
			],
			[
				-103,
				-64
			],
			[
				-77,
				-49
			],
			[
				-75,
				-46
			],
			[
				-164,
				-103
			],
			[
				-121,
				-76
			],
			[
				-230,
				-154
			],
			[
				-51,
				-35
			],
			[
				-51,
				-34
			],
			[
				-207,
				-135
			],
			[
				-272,
				-180
			],
			[
				-3,
				-1
			],
			[
				-219,
				-21
			],
			[
				-137,
				-13
			],
			[
				-26,
				-3
			],
			[
				-136,
				-15
			],
			[
				-121,
				-10
			],
			[
				-58,
				-5
			],
			[
				-66,
				-6
			],
			[
				-117,
				-10
			],
			[
				-129,
				-12
			],
			[
				-51,
				-4
			],
			[
				-84,
				-8
			],
			[
				-137,
				-11
			],
			[
				-27,
				-3
			],
			[
				-1,
				0
			],
			[
				-31,
				-2
			],
			[
				-1,
				-1
			],
			[
				-49,
				-4
			],
			[
				-134,
				-12
			],
			[
				-41,
				-3
			],
			[
				0,
				0
			],
			[
				14,
				-95
			],
			[
				23,
				-157
			]
		],
		[
			[
				29799,
				55296
			],
			[
				3,
				-20
			],
			[
				0,
				-1
			],
			[
				1,
				-3
			],
			[
				20,
				-151
			],
			[
				5,
				-36
			],
			[
				1,
				-3
			],
			[
				8,
				-62
			],
			[
				13,
				-90
			],
			[
				0,
				0
			],
			[
				16,
				-134
			],
			[
				20,
				-133
			],
			[
				30,
				-194
			],
			[
				0,
				0
			],
			[
				17,
				-111
			],
			[
				0,
				0
			],
			[
				18,
				-204
			],
			[
				0,
				0
			],
			[
				4,
				-42
			],
			[
				0,
				-4
			],
			[
				2,
				-27
			],
			[
				2,
				-13
			],
			[
				8,
				-94
			],
			[
				4,
				-20
			],
			[
				25,
				-122
			],
			[
				25,
				-125
			],
			[
				0,
				0
			]
		],
		[
			[
				27225,
				55733
			],
			[
				0,
				0
			],
			[
				24,
				-3
			],
			[
				94,
				14
			],
			[
				72,
				57
			],
			[
				33,
				12
			],
			[
				121,
				-87
			],
			[
				2,
				-2
			],
			[
				33,
				-24
			],
			[
				42,
				-97
			],
			[
				52,
				80
			],
			[
				32,
				73
			],
			[
				1,
				3
			],
			[
				-101,
				92
			],
			[
				-31,
				29
			],
			[
				-14,
				12
			],
			[
				-13,
				13
			],
			[
				-66,
				11
			],
			[
				-43,
				7
			],
			[
				-193,
				-75
			],
			[
				-21,
				-8
			],
			[
				-1,
				2
			],
			[
				-50,
				109
			],
			[
				-147,
				-84
			],
			[
				-7,
				-5
			],
			[
				0,
				6
			],
			[
				13,
				98
			],
			[
				39,
				42
			],
			[
				53,
				58
			],
			[
				7,
				7
			],
			[
				-11,
				4
			],
			[
				-59,
				19
			],
			[
				15,
				27
			],
			[
				16,
				30
			],
			[
				-17,
				3
			],
			[
				-86,
				5
			],
			[
				-10,
				8
			],
			[
				-9,
				7
			],
			[
				0,
				11
			],
			[
				129,
				47
			],
			[
				12,
				-10
			],
			[
				47,
				-41
			],
			[
				25,
				34
			],
			[
				-31,
				19
			],
			[
				176,
				57
			],
			[
				137,
				15
			],
			[
				20,
				2
			],
			[
				72,
				-17
			],
			[
				59,
				-28
			],
			[
				22,
				-11
			],
			[
				1,
				-11
			],
			[
				0,
				-27
			],
			[
				-52,
				-56
			],
			[
				-102,
				-107
			],
			[
				-25,
				-92
			],
			[
				31,
				-8
			],
			[
				36,
				-9
			],
			[
				5,
				22
			],
			[
				20,
				94
			],
			[
				178,
				113
			],
			[
				82,
				38
			]
		],
		[
			[
				27837,
				56211
			],
			[
				0,
				0
			],
			[
				264,
				122
			],
			[
				17,
				8
			],
			[
				13,
				6
			],
			[
				-8,
				27
			],
			[
				-17,
				58
			],
			[
				48,
				71
			],
			[
				2,
				3
			],
			[
				141,
				15
			],
			[
				2,
				1
			],
			[
				1,
				1
			],
			[
				16,
				20
			],
			[
				17,
				22
			],
			[
				13,
				53
			],
			[
				60,
				7
			],
			[
				55,
				13
			],
			[
				9,
				4
			],
			[
				121,
				88
			],
			[
				-15,
				64
			],
			[
				34,
				48
			],
			[
				39,
				55
			],
			[
				9,
				50
			],
			[
				-80,
				20
			],
			[
				-16,
				-60
			],
			[
				-82,
				-48
			],
			[
				-215,
				-127
			],
			[
				-73,
				28
			],
			[
				-175,
				-48
			],
			[
				-80,
				-96
			],
			[
				-16,
				-128
			],
			[
				-94,
				37
			],
			[
				-84,
				-19
			],
			[
				-113,
				14
			],
			[
				-205,
				-120
			],
			[
				3,
				62
			],
			[
				23,
				34
			],
			[
				69,
				20
			],
			[
				-12,
				126
			],
			[
				-72,
				6
			],
			[
				28,
				-111
			],
			[
				-96,
				-29
			],
			[
				14,
				-102
			],
			[
				-333,
				-130
			],
			[
				-129,
				103
			],
			[
				14,
				82
			],
			[
				189,
				154
			],
			[
				-185,
				14
			],
			[
				-40,
				-11
			],
			[
				-7,
				-29
			],
			[
				-23,
				-97
			],
			[
				-131,
				-80
			],
			[
				-66,
				-22
			],
			[
				-36,
				-12
			],
			[
				-54,
				-64
			],
			[
				-241,
				-55
			],
			[
				-55,
				84
			],
			[
				-137,
				9
			],
			[
				0,
				0
			]
		],
		[
			[
				26148,
				56352
			],
			[
				-6,
				1
			],
			[
				-216,
				-212
			],
			[
				-256,
				-166
			],
			[
				-68,
				-28
			],
			[
				-302,
				-123
			],
			[
				-54,
				23
			],
			[
				-29,
				100
			],
			[
				3,
				67
			],
			[
				0,
				0
			],
			[
				55,
				13
			],
			[
				219,
				218
			],
			[
				57,
				36
			],
			[
				162,
				100
			],
			[
				37,
				24
			],
			[
				-6,
				25
			],
			[
				-1,
				5
			],
			[
				-205,
				-97
			],
			[
				57,
				81
			],
			[
				197,
				126
			],
			[
				34,
				13
			],
			[
				65,
				26
			],
			[
				64,
				-10
			],
			[
				112,
				53
			]
		],
		[
			[
				26067,
				56627
			],
			[
				0,
				0
			],
			[
				92,
				44
			],
			[
				188,
				45
			],
			[
				92,
				-14
			],
			[
				110,
				-4
			],
			[
				93,
				16
			],
			[
				54,
				26
			],
			[
				175,
				-24
			],
			[
				13,
				-2
			],
			[
				1,
				15
			],
			[
				1,
				4
			],
			[
				1,
				16
			],
			[
				-180,
				80
			],
			[
				-168,
				-6
			],
			[
				-58,
				64
			],
			[
				94,
				45
			],
			[
				81,
				61
			],
			[
				-89,
				-9
			],
			[
				-83,
				39
			],
			[
				0,
				0
			],
			[
				-10,
				-14
			],
			[
				-33,
				-48
			],
			[
				-30,
				-30
			],
			[
				-54,
				-3
			],
			[
				-43,
				-2
			],
			[
				-17,
				-1
			],
			[
				-9,
				-28
			],
			[
				-8,
				-23
			],
			[
				-377,
				-140
			],
			[
				-132,
				-13
			],
			[
				0,
				0
			]
		],
		[
			[
				24520,
				56101
			],
			[
				-1,
				0
			],
			[
				-51,
				59
			],
			[
				-59,
				36
			],
			[
				47,
				122
			],
			[
				-175,
				8
			],
			[
				69,
				77
			],
			[
				-7,
				52
			],
			[
				129,
				92
			],
			[
				30,
				30
			],
			[
				81,
				82
			],
			[
				44,
				-30
			],
			[
				50,
				9
			],
			[
				133,
				11
			],
			[
				7,
				-61
			],
			[
				50,
				-28
			],
			[
				-10,
				-236
			],
			[
				-87,
				-82
			],
			[
				-140,
				-177
			],
			[
				-21,
				17
			],
			[
				94,
				146
			],
			[
				-20,
				11
			],
			[
				-109,
				-142
			],
			[
				-54,
				4
			]
		],
		[
			[
				25437,
				56596
			],
			[
				82,
				10
			],
			[
				183,
				-22
			],
			[
				1,
				-3
			],
			[
				9,
				-18
			],
			[
				-62,
				-40
			],
			[
				-167,
				-108
			],
			[
				-311,
				-202
			],
			[
				-153,
				-24
			],
			[
				-65,
				26
			],
			[
				-8,
				3
			],
			[
				8,
				7
			],
			[
				83,
				85
			],
			[
				99,
				182
			],
			[
				105,
				61
			],
			[
				42,
				-24
			],
			[
				17,
				8
			],
			[
				100,
				54
			],
			[
				37,
				5
			]
		],
		[
			[
				25095,
				55862
			],
			[
				-274,
				-115
			],
			[
				-95,
				35
			],
			[
				84,
				89
			],
			[
				-10,
				85
			],
			[
				131,
				109
			],
			[
				148,
				32
			],
			[
				16,
				-235
			]
		],
		[
			[
				26645,
				56214
			],
			[
				0,
				0
			],
			[
				70,
				4
			],
			[
				33,
				66
			],
			[
				5,
				10
			],
			[
				4,
				-1
			],
			[
				181,
				-54
			],
			[
				12,
				-110
			],
			[
				-24,
				-63
			],
			[
				-70,
				1
			],
			[
				-8,
				0
			],
			[
				-28,
				-26
			],
			[
				-123,
				-83
			],
			[
				1,
				-1
			],
			[
				20,
				-13
			],
			[
				58,
				8
			],
			[
				243,
				61
			],
			[
				7,
				1
			],
			[
				0,
				-2
			],
			[
				-25,
				-114
			],
			[
				-12,
				-57
			],
			[
				-2,
				-2
			],
			[
				-27,
				-34
			],
			[
				0,
				0
			]
		],
		[
			[
				35912,
				65860
			],
			[
				-97,
				-187
			],
			[
				-20,
				-39
			],
			[
				-25,
				-48
			],
			[
				-25,
				-49
			],
			[
				0,
				0
			],
			[
				-18,
				-36
			],
			[
				-12,
				-19
			],
			[
				-143,
				-222
			],
			[
				-54,
				-85
			],
			[
				-55,
				-86
			]
		],
		[
			[
				35463,
				65089
			],
			[
				-85,
				-9
			],
			[
				0,
				0
			],
			[
				-282,
				-32
			],
			[
				-121,
				-18
			],
			[
				-264,
				-42
			],
			[
				-80,
				-223
			],
			[
				0,
				0
			],
			[
				-56,
				-153
			],
			[
				-5,
				-15
			],
			[
				-34,
				-96
			],
			[
				-1,
				-1
			],
			[
				-30,
				-83
			],
			[
				0,
				0
			],
			[
				29,
				-45
			],
			[
				159,
				-255
			],
			[
				32,
				-53
			],
			[
				52,
				-83
			],
			[
				0,
				0
			],
			[
				95,
				-155
			],
			[
				0,
				0
			],
			[
				160,
				-264
			],
			[
				85,
				-140
			],
			[
				21,
				-34
			],
			[
				91,
				-151
			]
		],
		[
			[
				35229,
				63237
			],
			[
				107,
				-185
			],
			[
				117,
				-203
			],
			[
				0,
				0
			],
			[
				-8,
				-167
			],
			[
				-4,
				-54
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				-3,
				-55
			],
			[
				-3,
				-45
			],
			[
				-6,
				-141
			],
			[
				0,
				-2
			],
			[
				-5,
				-113
			],
			[
				-3,
				-72
			],
			[
				0,
				0
			],
			[
				-2,
				-52
			],
			[
				-6,
				-122
			],
			[
				-4,
				-103
			],
			[
				-5,
				-160
			],
			[
				-70,
				-52
			],
			[
				-5,
				-4
			],
			[
				-86,
				-63
			],
			[
				-85,
				-63
			]
		],
		[
			[
				35158,
				61581
			],
			[
				-38,
				-28
			],
			[
				-48,
				-34
			],
			[
				-143,
				-104
			],
			[
				-109,
				-80
			],
			[
				-32,
				-33
			],
			[
				0,
				0
			],
			[
				-106,
				-108
			],
			[
				-58,
				-59
			],
			[
				-147,
				-150
			],
			[
				-126,
				-128
			],
			[
				-136,
				-267
			],
			[
				-111,
				-190
			],
			[
				0,
				0
			],
			[
				-83,
				-141
			],
			[
				-1,
				-2
			],
			[
				-11,
				-19
			],
			[
				-55,
				-94
			],
			[
				0,
				-1
			],
			[
				0,
				0
			],
			[
				-2,
				-3
			],
			[
				-99,
				-162
			],
			[
				0,
				0
			],
			[
				-36,
				-59
			],
			[
				-6,
				-10
			],
			[
				-29,
				-48
			],
			[
				-12,
				-19
			],
			[
				-14,
				-22
			],
			[
				-101,
				-167
			],
			[
				-23,
				-39
			],
			[
				-54,
				-90
			],
			[
				-42,
				-73
			],
			[
				0,
				0
			],
			[
				-98,
				-166
			],
			[
				-29,
				-49
			],
			[
				-29,
				-50
			],
			[
				-37,
				-63
			],
			[
				-22,
				-38
			],
			[
				-113,
				-195
			],
			[
				0,
				0
			],
			[
				-21,
				-37
			],
			[
				0,
				0
			],
			[
				-31,
				-52
			],
			[
				-63,
				-109
			],
			[
				-135,
				-127
			],
			[
				-62,
				-58
			],
			[
				-20,
				-19
			],
			[
				-48,
				-45
			]
		],
		[
			[
				26334,
				59644
			],
			[
				0,
				0
			],
			[
				9,
				1
			],
			[
				69,
				-16
			],
			[
				62,
				-30
			],
			[
				89,
				15
			],
			[
				52,
				-70
			],
			[
				0,
				0
			],
			[
				65,
				12
			],
			[
				41,
				30
			],
			[
				20,
				-1
			],
			[
				27,
				-2
			],
			[
				11,
				0
			],
			[
				10,
				-1
			],
			[
				-2,
				-92
			],
			[
				0,
				-1
			],
			[
				-1,
				-51
			],
			[
				118,
				-61
			],
			[
				19,
				-3
			],
			[
				56,
				-8
			],
			[
				144,
				33
			],
			[
				99,
				3
			],
			[
				68,
				2
			],
			[
				49,
				2
			],
			[
				1,
				7
			],
			[
				5,
				34
			],
			[
				1,
				7
			],
			[
				2,
				13
			],
			[
				-61,
				33
			],
			[
				-22,
				12
			],
			[
				106,
				26
			],
			[
				253,
				17
			],
			[
				286,
				41
			],
			[
				0,
				19
			],
			[
				-411,
				17
			],
			[
				-128,
				-19
			],
			[
				-90,
				-51
			],
			[
				-62,
				15
			],
			[
				-1,
				-54
			],
			[
				-50,
				-25
			],
			[
				-3,
				-2
			],
			[
				-52,
				-5
			],
			[
				-15,
				6
			],
			[
				-30,
				11
			],
			[
				-7,
				3
			],
			[
				-5,
				-3
			],
			[
				-20,
				-13
			],
			[
				-32,
				-19
			],
			[
				-76,
				5
			],
			[
				-8,
				12
			],
			[
				-62,
				84
			],
			[
				-2,
				80
			],
			[
				25,
				49
			],
			[
				7,
				15
			],
			[
				-43,
				61
			],
			[
				-7,
				9
			],
			[
				136,
				33
			],
			[
				9,
				-1
			],
			[
				280,
				-30
			],
			[
				169,
				-26
			],
			[
				57,
				24
			],
			[
				-207,
				52
			],
			[
				-110,
				28
			],
			[
				-128,
				32
			],
			[
				-63,
				-13
			],
			[
				-183,
				-37
			],
			[
				19,
				27
			],
			[
				22,
				30
			],
			[
				-107,
				21
			],
			[
				38,
				62
			],
			[
				-80,
				27
			],
			[
				16,
				98
			],
			[
				322,
				12
			],
			[
				48,
				38
			],
			[
				232,
				17
			],
			[
				50,
				-55
			],
			[
				124,
				-10
			],
			[
				134,
				-46
			],
			[
				48,
				-17
			],
			[
				543,
				15
			],
			[
				-4,
				5
			],
			[
				-53,
				70
			],
			[
				-111,
				17
			],
			[
				-116,
				-18
			],
			[
				-249,
				12
			],
			[
				-99,
				64
			],
			[
				-73,
				46
			],
			[
				-73,
				47
			],
			[
				23,
				7
			],
			[
				52,
				16
			],
			[
				-47,
				63
			],
			[
				-29,
				-1
			],
			[
				-81,
				-74
			],
			[
				-28,
				-25
			],
			[
				-116,
				4
			],
			[
				25,
				13
			],
			[
				104,
				56
			],
			[
				-24,
				41
			],
			[
				-24,
				40
			],
			[
				65,
				42
			],
			[
				-19,
				48
			],
			[
				-13,
				33
			],
			[
				-4,
				10
			],
			[
				-71,
				26
			],
			[
				-69,
				36
			],
			[
				-25,
				61
			],
			[
				-3,
				26
			],
			[
				-4,
				45
			],
			[
				-47,
				46
			],
			[
				-142,
				-6
			],
			[
				-37,
				-1
			],
			[
				-71,
				-50
			],
			[
				-47,
				24
			],
			[
				37,
				157
			],
			[
				0,
				48
			],
			[
				-56,
				17
			],
			[
				-40,
				-25
			],
			[
				-49,
				17
			],
			[
				-30,
				97
			],
			[
				54,
				44
			],
			[
				124,
				-8
			],
			[
				32,
				-48
			],
			[
				-57,
				-39
			],
			[
				63,
				-30
			],
			[
				156,
				107
			],
			[
				41,
				-5
			]
		],
		[
			[
				27072,
				61127
			],
			[
				0,
				0
			],
			[
				127,
				-18
			],
			[
				67,
				-9
			],
			[
				111,
				-15
			],
			[
				7,
				-1
			],
			[
				202,
				91
			],
			[
				23,
				11
			],
			[
				-29,
				66
			],
			[
				-158,
				-21
			],
			[
				-57,
				60
			],
			[
				75,
				38
			],
			[
				117,
				1
			],
			[
				84,
				29
			],
			[
				49,
				-18
			],
			[
				102,
				2
			],
			[
				26,
				44
			],
			[
				-30,
				34
			],
			[
				33,
				44
			],
			[
				42,
				2
			],
			[
				51,
				2
			],
			[
				65,
				44
			],
			[
				208,
				5
			],
			[
				6,
				1
			],
			[
				22,
				-46
			],
			[
				-1,
				-1
			],
			[
				-118,
				-127
			],
			[
				-54,
				-106
			],
			[
				-53,
				-8
			],
			[
				-98,
				36
			],
			[
				33,
				-64
			],
			[
				-2,
				-110
			],
			[
				115,
				36
			],
			[
				69,
				115
			],
			[
				47,
				77
			],
			[
				91,
				47
			],
			[
				1,
				-50
			],
			[
				-45,
				-56
			],
			[
				-5,
				-6
			],
			[
				45,
				-53
			],
			[
				78,
				134
			],
			[
				-27,
				42
			],
			[
				-1,
				1
			],
			[
				2,
				0
			],
			[
				86,
				-6
			],
			[
				16,
				26
			],
			[
				-65,
				116
			],
			[
				-47,
				64
			],
			[
				-25,
				92
			],
			[
				13,
				123
			],
			[
				26,
				-20
			],
			[
				31,
				-25
			],
			[
				-3,
				135
			],
			[
				0,
				30
			],
			[
				35,
				95
			],
			[
				40,
				-59
			],
			[
				24,
				-34
			],
			[
				16,
				-24
			],
			[
				39,
				-26
			],
			[
				31,
				-21
			],
			[
				48,
				-123
			],
			[
				5,
				-20
			],
			[
				22,
				-154
			],
			[
				42,
				-48
			],
			[
				4,
				-78
			],
			[
				25,
				37
			],
			[
				22,
				33
			],
			[
				30,
				-32
			],
			[
				-7,
				-43
			],
			[
				-9,
				-52
			],
			[
				51,
				57
			],
			[
				14,
				16
			],
			[
				15,
				-13
			],
			[
				24,
				-21
			],
			[
				59,
				-9
			],
			[
				77,
				61
			],
			[
				-36,
				34
			],
			[
				-4,
				4
			],
			[
				13,
				18
			],
			[
				71,
				102
			],
			[
				33,
				86
			],
			[
				25,
				124
			],
			[
				-43,
				30
			],
			[
				-9,
				6
			],
			[
				-2,
				8
			],
			[
				-1,
				3
			],
			[
				-15,
				45
			],
			[
				-2,
				5
			],
			[
				-57,
				2
			],
			[
				12,
				58
			],
			[
				65,
				-21
			],
			[
				14,
				-4
			],
			[
				54,
				24
			],
			[
				13,
				-11
			],
			[
				71,
				-62
			],
			[
				143,
				73
			],
			[
				20,
				1
			]
		],
		[
			[
				29296,
				61982
			],
			[
				0,
				0
			],
			[
				98,
				8
			],
			[
				105,
				7
			],
			[
				18,
				-27
			],
			[
				12,
				-17
			],
			[
				125,
				-68
			],
			[
				15,
				-46
			],
			[
				105,
				7
			],
			[
				36,
				49
			],
			[
				69,
				-78
			],
			[
				39,
				-11
			],
			[
				8,
				-2
			],
			[
				3,
				-9
			],
			[
				35,
				-120
			],
			[
				46,
				-20
			],
			[
				34,
				18
			],
			[
				15,
				7
			],
			[
				-37,
				58
			],
			[
				27,
				68
			],
			[
				-3,
				5
			],
			[
				-32,
				62
			],
			[
				-43,
				61
			],
			[
				-47,
				13
			],
			[
				-8,
				2
			],
			[
				-13,
				4
			],
			[
				-51,
				-14
			],
			[
				-56,
				7
			],
			[
				-14,
				26
			],
			[
				-70,
				-3
			],
			[
				-32,
				-44
			],
			[
				-114,
				63
			],
			[
				-18,
				10
			],
			[
				6,
				55
			],
			[
				-53,
				23
			],
			[
				-72,
				31
			],
			[
				-26,
				-8
			],
			[
				-16,
				-5
			],
			[
				-78,
				-48
			],
			[
				-32,
				-20
			],
			[
				0,
				0
			]
		],
		[
			[
				29277,
				62026
			],
			[
				-41,
				-25
			],
			[
				-62,
				-19
			],
			[
				10,
				40
			],
			[
				0,
				0
			],
			[
				-51,
				49
			],
			[
				-16,
				14
			],
			[
				-62,
				-37
			],
			[
				-97,
				-1
			],
			[
				-8,
				43
			],
			[
				84,
				35
			],
			[
				8,
				81
			],
			[
				67,
				-60
			],
			[
				30,
				173
			],
			[
				21,
				32
			],
			[
				73,
				109
			],
			[
				-52,
				32
			],
			[
				-4,
				20
			],
			[
				0,
				0
			]
		],
		[
			[
				29177,
				62512
			],
			[
				-1,
				5
			],
			[
				-5,
				26
			],
			[
				9,
				17
			],
			[
				36,
				73
			],
			[
				1,
				2
			],
			[
				6,
				2
			],
			[
				94,
				25
			],
			[
				10,
				-17
			],
			[
				70,
				9
			],
			[
				129,
				125
			],
			[
				134,
				20
			],
			[
				-9,
				-47
			],
			[
				-49,
				-59
			],
			[
				127,
				10
			],
			[
				199,
				-30
			],
			[
				-3,
				54
			],
			[
				0,
				5
			],
			[
				65,
				40
			],
			[
				27,
				6
			],
			[
				62,
				14
			],
			[
				5,
				-7
			],
			[
				29,
				-49
			],
			[
				28,
				-48
			],
			[
				201,
				-14
			],
			[
				37,
				44
			],
			[
				19,
				24
			],
			[
				-152,
				3
			],
			[
				-22,
				48
			],
			[
				-60,
				-40
			],
			[
				-56,
				71
			],
			[
				-1,
				1
			],
			[
				-45,
				20
			],
			[
				-50,
				-9
			],
			[
				-165,
				-30
			],
			[
				-85,
				42
			],
			[
				77,
				43
			],
			[
				78,
				22
			],
			[
				147,
				42
			],
			[
				6,
				2
			],
			[
				16,
				4
			],
			[
				90,
				-11
			],
			[
				38,
				-4
			],
			[
				48,
				-38
			],
			[
				68,
				-9
			],
			[
				70,
				28
			],
			[
				21,
				9
			],
			[
				50,
				76
			],
			[
				139,
				72
			],
			[
				79,
				5
			],
			[
				56,
				-78
			],
			[
				48,
				4
			],
			[
				134,
				9
			],
			[
				217,
				131
			],
			[
				13,
				-64
			],
			[
				80,
				-7
			],
			[
				-191,
				-133
			],
			[
				25,
				-95
			],
			[
				1,
				-2
			],
			[
				-159,
				-181
			],
			[
				-37,
				-49
			],
			[
				5,
				-74
			],
			[
				77,
				-55
			],
			[
				29,
				-9
			],
			[
				30,
				23
			],
			[
				44,
				-16
			],
			[
				-7,
				-57
			],
			[
				31,
				-103
			],
			[
				51,
				-78
			],
			[
				86,
				26
			],
			[
				-79,
				236
			],
			[
				-63,
				35
			],
			[
				-85,
				9
			],
			[
				-19,
				29
			],
			[
				77,
				178
			],
			[
				45,
				36
			],
			[
				22,
				31
			],
			[
				3,
				3
			],
			[
				43,
				17
			],
			[
				84,
				51
			],
			[
				50,
				101
			],
			[
				-67,
				18
			],
			[
				48,
				42
			],
			[
				118,
				-16
			],
			[
				96,
				9
			],
			[
				96,
				-49
			],
			[
				31,
				-124
			],
			[
				79,
				-9
			],
			[
				101,
				39
			],
			[
				47,
				42
			],
			[
				36,
				-2
			],
			[
				105,
				-73
			],
			[
				35,
				-71
			],
			[
				77,
				-20
			],
			[
				19,
				-30
			],
			[
				190,
				-17
			]
		],
		[
			[
				32311,
				62746
			],
			[
				0,
				0
			],
			[
				80,
				-7
			],
			[
				49,
				-37
			],
			[
				-10,
				-57
			],
			[
				53,
				-44
			],
			[
				-45,
				-81
			],
			[
				-69,
				-186
			],
			[
				11,
				-28
			],
			[
				64,
				73
			],
			[
				32,
				-2
			],
			[
				-15,
				-45
			],
			[
				-82,
				-167
			],
			[
				109,
				-28
			],
			[
				9,
				-2
			],
			[
				28,
				30
			],
			[
				27,
				-26
			],
			[
				47,
				-46
			],
			[
				40,
				28
			],
			[
				-12,
				40
			],
			[
				-33,
				28
			],
			[
				-4,
				3
			],
			[
				-44,
				13
			],
			[
				-12,
				31
			],
			[
				46,
				25
			],
			[
				11,
				5
			],
			[
				-23,
				55
			],
			[
				-9,
				22
			],
			[
				2,
				14
			],
			[
				20,
				114
			],
			[
				35,
				15
			],
			[
				50,
				98
			],
			[
				-21,
				35
			],
			[
				27,
				86
			],
			[
				-4,
				5
			],
			[
				-40,
				61
			],
			[
				-4,
				2
			],
			[
				0,
				0
			]
		],
		[
			[
				32624,
				62773
			],
			[
				-12,
				7
			],
			[
				-59,
				32
			],
			[
				-21,
				63
			],
			[
				-58,
				37
			],
			[
				-43,
				-3
			],
			[
				-18,
				-2
			],
			[
				2,
				5
			],
			[
				19,
				60
			],
			[
				-56,
				-12
			],
			[
				-28,
				-18
			],
			[
				-74,
				29
			],
			[
				216,
				148
			],
			[
				6,
				0
			],
			[
				7,
				0
			],
			[
				16,
				0
			],
			[
				18,
				-24
			],
			[
				18,
				-26
			],
			[
				-12,
				-6
			],
			[
				-44,
				-21
			],
			[
				19,
				-41
			],
			[
				109,
				11
			],
			[
				40,
				22
			],
			[
				38,
				20
			],
			[
				-4,
				57
			],
			[
				-15,
				20
			],
			[
				-63,
				-4
			],
			[
				-38,
				-13
			],
			[
				-30,
				32
			],
			[
				-2,
				2
			],
			[
				-17,
				36
			],
			[
				-2,
				2
			],
			[
				-16,
				41
			],
			[
				-44,
				7
			],
			[
				-66,
				-19
			],
			[
				-28,
				-8
			],
			[
				-100,
				-65
			],
			[
				-70,
				-85
			],
			[
				-100,
				-51
			],
			[
				-55,
				36
			],
			[
				-111,
				5
			],
			[
				112,
				79
			],
			[
				112,
				-19
			],
			[
				83,
				47
			],
			[
				30,
				43
			],
			[
				-15,
				49
			],
			[
				-45,
				23
			],
			[
				-46,
				-13
			],
			[
				-14,
				1
			],
			[
				-239,
				22
			],
			[
				-22,
				-71
			],
			[
				-161,
				-27
			],
			[
				-74,
				57
			],
			[
				-99,
				76
			],
			[
				-227,
				-25
			],
			[
				-2,
				43
			],
			[
				116,
				52
			],
			[
				36,
				-30
			],
			[
				89,
				59
			],
			[
				116,
				4
			],
			[
				43,
				24
			],
			[
				53,
				61
			],
			[
				17,
				20
			],
			[
				17,
				20
			],
			[
				80,
				-7
			],
			[
				91,
				68
			],
			[
				8,
				30
			],
			[
				-13,
				117
			],
			[
				7,
				34
			],
			[
				-51,
				23
			],
			[
				-26,
				-16
			],
			[
				-8,
				-4
			],
			[
				2,
				-10
			],
			[
				5,
				-46
			],
			[
				-7,
				-18
			],
			[
				-33,
				-8
			],
			[
				-37,
				-8
			],
			[
				-27,
				-76
			],
			[
				-16,
				-23
			],
			[
				-43,
				-63
			],
			[
				-3,
				-5
			],
			[
				-45,
				-64
			],
			[
				-63,
				-9
			],
			[
				24,
				57
			],
			[
				25,
				59
			],
			[
				34,
				104
			],
			[
				-38,
				14
			],
			[
				-1,
				0
			],
			[
				-2,
				0
			],
			[
				-132,
				-49
			],
			[
				-99,
				-9
			],
			[
				-60,
				-3
			],
			[
				0,
				0
			]
		],
		[
			[
				31398,
				63630
			],
			[
				-66,
				-2
			],
			[
				-123,
				-107
			],
			[
				-19,
				-19
			],
			[
				-5,
				-31
			],
			[
				41,
				0
			],
			[
				57,
				-7
			],
			[
				-28,
				-31
			],
			[
				-68,
				-13
			],
			[
				-43,
				40
			],
			[
				-140,
				-25
			],
			[
				-101,
				40
			],
			[
				-47,
				1
			],
			[
				-50,
				2
			],
			[
				-142,
				-23
			],
			[
				-72,
				-39
			],
			[
				113,
				-8
			],
			[
				87,
				-2
			],
			[
				17,
				-13
			],
			[
				12,
				-10
			],
			[
				-43,
				-60
			],
			[
				-43,
				-45
			],
			[
				-55,
				-11
			],
			[
				-73,
				-14
			],
			[
				-100,
				-65
			],
			[
				-116,
				-93
			],
			[
				-18,
				11
			],
			[
				-41,
				25
			],
			[
				-40,
				24
			],
			[
				-5,
				40
			],
			[
				89,
				50
			],
			[
				-13,
				150
			],
			[
				7,
				70
			],
			[
				43,
				43
			],
			[
				2,
				62
			],
			[
				0,
				5
			],
			[
				-22,
				9
			],
			[
				-9,
				-14
			],
			[
				-27,
				-40
			],
			[
				-10,
				-6
			],
			[
				-127,
				-69
			],
			[
				-30,
				-5
			],
			[
				-162,
				-27
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				79,
				-26
			],
			[
				-81,
				-44
			],
			[
				-127,
				-33
			],
			[
				-24,
				16
			],
			[
				-80,
				1
			],
			[
				-189,
				-26
			],
			[
				-103,
				-43
			],
			[
				-44,
				20
			],
			[
				-143,
				-62
			],
			[
				-153,
				-55
			],
			[
				16,
				63
			],
			[
				-39,
				26
			],
			[
				87,
				24
			],
			[
				104,
				86
			],
			[
				46,
				22
			],
			[
				45,
				22
			],
			[
				-4,
				8
			],
			[
				-11,
				28
			],
			[
				-47,
				16
			],
			[
				46,
				104
			],
			[
				104,
				-24
			],
			[
				17,
				14
			],
			[
				102,
				81
			],
			[
				50,
				99
			],
			[
				5,
				12
			],
			[
				10,
				6
			],
			[
				221,
				142
			],
			[
				4,
				44
			],
			[
				3,
				26
			],
			[
				104,
				61
			],
			[
				82,
				48
			],
			[
				1,
				5
			],
			[
				28,
				104
			],
			[
				-35,
				24
			],
			[
				-56,
				-49
			],
			[
				-99,
				42
			],
			[
				35,
				49
			],
			[
				120,
				-5
			],
			[
				34,
				177
			],
			[
				131,
				57
			],
			[
				74,
				-41
			],
			[
				2,
				-1
			],
			[
				19,
				5
			],
			[
				73,
				25
			],
			[
				-7,
				-29
			],
			[
				-25,
				-27
			],
			[
				93,
				21
			],
			[
				1,
				0
			],
			[
				96,
				4
			],
			[
				14,
				49
			],
			[
				45,
				-16
			],
			[
				8,
				-3
			],
			[
				141,
				-50
			],
			[
				25,
				-34
			],
			[
				-19,
				-57
			],
			[
				-34,
				-102
			],
			[
				-97,
				-142
			],
			[
				88,
				19
			],
			[
				24,
				-34
			],
			[
				31,
				22
			],
			[
				-15,
				79
			],
			[
				145,
				225
			],
			[
				116,
				-16
			],
			[
				78,
				119
			],
			[
				28,
				3
			],
			[
				220,
				26
			],
			[
				-16,
				41
			],
			[
				-200,
				-12
			],
			[
				-129,
				-56
			],
			[
				-237,
				67
			],
			[
				-111,
				31
			],
			[
				-91,
				-25
			],
			[
				-60,
				-28
			],
			[
				-29,
				-13
			],
			[
				-3,
				-2
			],
			[
				-119,
				7
			],
			[
				0,
				0
			],
			[
				-45,
				9
			],
			[
				-23,
				4
			],
			[
				-72,
				70
			],
			[
				-80,
				75
			],
			[
				15,
				29
			],
			[
				233,
				205
			],
			[
				75,
				76
			],
			[
				45,
				22
			],
			[
				470,
				341
			],
			[
				369,
				116
			],
			[
				64,
				-12
			],
			[
				56,
				-31
			],
			[
				99,
				-146
			],
			[
				71,
				6
			],
			[
				14,
				-62
			],
			[
				-29,
				-73
			],
			[
				-28,
				-24
			],
			[
				-156,
				6
			],
			[
				-155,
				196
			],
			[
				-42,
				38
			],
			[
				-53,
				-2
			],
			[
				-30,
				-88
			],
			[
				25,
				-44
			],
			[
				53,
				7
			],
			[
				33,
				-21
			],
			[
				4,
				-90
			],
			[
				109,
				-65
			],
			[
				28,
				-16
			],
			[
				7,
				-19
			],
			[
				-139,
				-91
			],
			[
				-65,
				-102
			],
			[
				-188,
				-26
			],
			[
				-57,
				-32
			],
			[
				35,
				-9
			],
			[
				115,
				-28
			],
			[
				6,
				2
			],
			[
				53,
				12
			],
			[
				28,
				7
			],
			[
				13,
				13
			],
			[
				36,
				41
			],
			[
				35,
				36
			],
			[
				25,
				26
			],
			[
				2,
				2
			],
			[
				29,
				31
			],
			[
				5,
				4
			],
			[
				0,
				1
			],
			[
				1,
				1
			],
			[
				2,
				0
			],
			[
				79,
				-4
			],
			[
				12,
				-1
			],
			[
				46,
				31
			],
			[
				6,
				4
			],
			[
				21,
				14
			],
			[
				2,
				1
			],
			[
				126,
				84
			],
			[
				17,
				11
			],
			[
				49,
				-2
			]
		],
		[
			[
				31747,
				65071
			],
			[
				0,
				0
			],
			[
				46,
				-3
			],
			[
				27,
				-2
			],
			[
				8,
				0
			],
			[
				0,
				-10
			],
			[
				0,
				-6
			],
			[
				0,
				-60
			],
			[
				-1,
				-25
			],
			[
				1,
				0
			],
			[
				115,
				-43
			],
			[
				0,
				-3
			],
			[
				0,
				0
			],
			[
				-3,
				-29
			],
			[
				-160,
				-43
			],
			[
				-35,
				5
			],
			[
				-45,
				6
			],
			[
				-50,
				-69
			],
			[
				19,
				-9
			],
			[
				78,
				-35
			],
			[
				3,
				-18
			],
			[
				4,
				-31
			],
			[
				-32,
				-57
			],
			[
				-112,
				-56
			],
			[
				32,
				-76
			],
			[
				-20,
				-99
			],
			[
				44,
				-9
			],
			[
				29,
				150
			],
			[
				115,
				47
			],
			[
				11,
				13
			],
			[
				24,
				27
			],
			[
				21,
				24
			],
			[
				23,
				26
			],
			[
				13,
				15
			],
			[
				2,
				1
			],
			[
				-1,
				2
			],
			[
				-10,
				28
			],
			[
				-13,
				36
			],
			[
				63,
				64
			],
			[
				5,
				5
			],
			[
				1,
				0
			],
			[
				34,
				1
			],
			[
				25,
				0
			],
			[
				52,
				-4
			],
			[
				35,
				63
			],
			[
				37,
				-6
			],
			[
				1,
				0
			],
			[
				5,
				-1
			],
			[
				32,
				-5
			],
			[
				4,
				-1
			],
			[
				5,
				-1
			],
			[
				0,
				0
			],
			[
				108,
				-18
			],
			[
				6,
				-1
			],
			[
				134,
				-23
			],
			[
				148,
				-50
			],
			[
				33,
				-49
			],
			[
				38,
				-19
			],
			[
				6,
				0
			],
			[
				2,
				-16
			],
			[
				5,
				-26
			],
			[
				6,
				-37
			],
			[
				-7,
				-76
			],
			[
				-9,
				-87
			],
			[
				58,
				-52
			],
			[
				73,
				-50
			],
			[
				64,
				-145
			],
			[
				17,
				-257
			],
			[
				79,
				36
			],
			[
				40,
				-12
			],
			[
				0,
				-2
			],
			[
				-2,
				-105
			],
			[
				-2,
				-60
			],
			[
				15,
				-8
			],
			[
				9,
				-5
			],
			[
				7,
				7
			],
			[
				20,
				21
			],
			[
				53,
				57
			],
			[
				55,
				60
			],
			[
				-12,
				27
			],
			[
				-41,
				4
			],
			[
				-22,
				2
			],
			[
				-5,
				18
			],
			[
				-46,
				169
			],
			[
				132,
				32
			],
			[
				29,
				-20
			],
			[
				56,
				-21
			],
			[
				5,
				6
			],
			[
				22,
				21
			],
			[
				-13,
				6
			],
			[
				-60,
				28
			],
			[
				69,
				45
			],
			[
				9,
				27
			],
			[
				11,
				29
			],
			[
				127,
				98
			],
			[
				-80,
				-2
			],
			[
				-110,
				-64
			],
			[
				9,
				-42
			],
			[
				3,
				-10
			],
			[
				-72,
				-55
			],
			[
				-161,
				-26
			],
			[
				-42,
				25
			],
			[
				-90,
				178
			],
			[
				-61,
				16
			],
			[
				-2,
				1
			],
			[
				0,
				1
			],
			[
				-13,
				132
			],
			[
				115,
				24
			],
			[
				91,
				80
			],
			[
				-98,
				-28
			],
			[
				-70,
				30
			],
			[
				13,
				72
			],
			[
				144,
				208
			],
			[
				97,
				74
			],
			[
				107,
				83
			],
			[
				17,
				12
			],
			[
				79,
				72
			],
			[
				255,
				74
			],
			[
				132,
				61
			],
			[
				111,
				-4
			],
			[
				128,
				45
			],
			[
				8,
				2
			],
			[
				-72,
				48
			],
			[
				155,
				56
			],
			[
				-93,
				10
			],
			[
				-119,
				-31
			],
			[
				-11,
				-37
			],
			[
				-180,
				-31
			],
			[
				-23,
				-45
			],
			[
				-133,
				-22
			],
			[
				-69,
				-18
			],
			[
				-131,
				-33
			],
			[
				-185,
				-133
			],
			[
				-53,
				-46
			],
			[
				-154,
				-141
			],
			[
				-57,
				-49
			],
			[
				-70,
				67
			],
			[
				-64,
				38
			],
			[
				-27,
				61
			],
			[
				-93,
				-36
			],
			[
				-84,
				12
			],
			[
				-57,
				37
			],
			[
				-92,
				-30
			],
			[
				-219,
				38
			],
			[
				-183,
				92
			],
			[
				-29,
				72
			],
			[
				44,
				153
			],
			[
				-48,
				47
			],
			[
				77,
				9
			],
			[
				-67,
				51
			],
			[
				31,
				34
			],
			[
				83,
				7
			],
			[
				-17,
				44
			],
			[
				-36,
				7
			],
			[
				21,
				23
			],
			[
				192,
				30
			],
			[
				263,
				-145
			],
			[
				97,
				-17
			],
			[
				29,
				-88
			],
			[
				19,
				-59
			],
			[
				25,
				56
			],
			[
				19,
				42
			],
			[
				-54,
				98
			],
			[
				-16,
				30
			],
			[
				-100,
				1
			],
			[
				-49,
				29
			],
			[
				-252,
				150
			],
			[
				-31,
				18
			],
			[
				-60,
				17
			],
			[
				-8,
				-10
			],
			[
				-48,
				-62
			],
			[
				-76,
				-30
			],
			[
				-92,
				0
			],
			[
				-73,
				33
			],
			[
				0,
				0
			]
		],
		[
			[
				31736,
				65743
			],
			[
				-31,
				14
			],
			[
				218,
				365
			],
			[
				34,
				8
			],
			[
				103,
				26
			],
			[
				136,
				-32
			],
			[
				42,
				37
			],
			[
				6,
				5
			],
			[
				-22,
				41
			],
			[
				-94,
				2
			],
			[
				-111,
				3
			],
			[
				-48,
				17
			],
			[
				-2,
				1
			],
			[
				4,
				5
			],
			[
				36,
				41
			],
			[
				6,
				66
			],
			[
				0,
				1
			],
			[
				60,
				25
			],
			[
				38,
				85
			],
			[
				43,
				24
			],
			[
				8,
				4
			],
			[
				107,
				-47
			],
			[
				163,
				-130
			],
			[
				-10,
				-47
			],
			[
				43,
				-14
			],
			[
				151,
				-52
			],
			[
				1,
				0
			],
			[
				191,
				-98
			],
			[
				33,
				11
			],
			[
				-78,
				93
			],
			[
				-30,
				35
			],
			[
				125,
				52
			],
			[
				7,
				3
			],
			[
				249,
				-162
			],
			[
				70,
				-1
			],
			[
				6,
				33
			],
			[
				-56,
				28
			],
			[
				-52,
				26
			],
			[
				-35,
				33
			],
			[
				-103,
				93
			],
			[
				-19,
				7
			],
			[
				-56,
				19
			],
			[
				-221,
				-31
			],
			[
				-83,
				107
			],
			[
				-119,
				101
			],
			[
				12,
				41
			],
			[
				51,
				28
			],
			[
				47,
				-9
			],
			[
				276,
				90
			],
			[
				236,
				-48
			],
			[
				7,
				-6
			]
		],
		[
			[
				33075,
				66636
			],
			[
				0,
				0
			],
			[
				178,
				-158
			],
			[
				115,
				-54
			],
			[
				34,
				1
			],
			[
				98,
				2
			],
			[
				9,
				-123
			],
			[
				35,
				-49
			],
			[
				22,
				-30
			],
			[
				165,
				-131
			],
			[
				64,
				200
			],
			[
				-112,
				-36
			],
			[
				-98,
				63
			],
			[
				17,
				133
			],
			[
				-22,
				49
			],
			[
				-39,
				23
			],
			[
				-62,
				1
			],
			[
				-61,
				23
			],
			[
				-31,
				24
			],
			[
				0,
				0
			]
		],
		[
			[
				33387,
				66574
			],
			[
				-173,
				137
			],
			[
				0,
				0
			],
			[
				-126,
				42
			],
			[
				-25,
				25
			],
			[
				-1,
				0
			],
			[
				-56,
				1
			],
			[
				-63,
				-1
			],
			[
				-185,
				76
			],
			[
				-25,
				11
			],
			[
				-144,
				74
			],
			[
				-56,
				30
			],
			[
				-66,
				76
			],
			[
				22,
				83
			],
			[
				26,
				-59
			],
			[
				35,
				37
			],
			[
				28,
				30
			],
			[
				10,
				98
			],
			[
				-19,
				40
			],
			[
				-66,
				126
			],
			[
				8,
				-159
			],
			[
				-70,
				-50
			],
			[
				-63,
				212
			],
			[
				-36,
				-30
			],
			[
				17,
				-205
			],
			[
				56,
				-31
			],
			[
				-59,
				-218
			],
			[
				-203,
				-80
			],
			[
				-58,
				-85
			],
			[
				-115,
				-67
			],
			[
				-48,
				-52
			],
			[
				-117,
				-36
			],
			[
				-9,
				-26
			],
			[
				-10,
				-29
			],
			[
				40,
				-34
			],
			[
				8,
				-28
			],
			[
				-120,
				-135
			],
			[
				-43,
				-24
			],
			[
				-20,
				26
			],
			[
				-2,
				-2
			],
			[
				-55,
				-53
			],
			[
				-39,
				-37
			],
			[
				-6,
				3
			],
			[
				-33,
				19
			],
			[
				-124,
				-126
			],
			[
				-16,
				-16
			],
			[
				-172,
				-74
			],
			[
				-9,
				1
			],
			[
				-29,
				6
			],
			[
				-51,
				-40
			],
			[
				-65,
				-50
			],
			[
				-103,
				-22
			],
			[
				-156,
				-34
			],
			[
				-85,
				3
			],
			[
				-84,
				3
			],
			[
				-123,
				18
			],
			[
				56,
				32
			],
			[
				8,
				5
			],
			[
				-91,
				10
			],
			[
				-66,
				8
			],
			[
				6,
				58
			],
			[
				168,
				91
			],
			[
				96,
				34
			],
			[
				76,
				27
			],
			[
				81,
				30
			],
			[
				58,
				48
			],
			[
				7,
				35
			],
			[
				-33,
				30
			],
			[
				-5,
				5
			],
			[
				-258,
				-33
			],
			[
				31,
				44
			],
			[
				-8,
				37
			],
			[
				-83,
				-35
			],
			[
				-52,
				14
			],
			[
				35,
				49
			],
			[
				46,
				48
			],
			[
				192,
				-10
			],
			[
				117,
				-6
			],
			[
				258,
				102
			],
			[
				184,
				-48
			],
			[
				45,
				31
			],
			[
				89,
				10
			],
			[
				28,
				3
			],
			[
				55,
				28
			],
			[
				104,
				54
			],
			[
				-47,
				1
			],
			[
				-65,
				2
			],
			[
				-61,
				2
			],
			[
				-118,
				-18
			],
			[
				-99,
				-15
			],
			[
				49,
				85
			],
			[
				1,
				0
			],
			[
				-2,
				0
			],
			[
				-115,
				-17
			],
			[
				10,
				60
			],
			[
				113,
				54
			],
			[
				20,
				10
			],
			[
				21,
				34
			],
			[
				-12,
				12
			],
			[
				-213,
				-47
			],
			[
				-269,
				-74
			],
			[
				-174,
				-44
			],
			[
				-11,
				46
			],
			[
				122,
				49
			],
			[
				38,
				15
			],
			[
				-121,
				24
			],
			[
				34,
				110
			],
			[
				-23,
				7
			],
			[
				-1,
				0
			],
			[
				-112,
				-85
			],
			[
				-66,
				2
			],
			[
				-62,
				51
			],
			[
				71,
				143
			],
			[
				7,
				16
			],
			[
				-10,
				10
			],
			[
				-29,
				28
			],
			[
				25,
				14
			],
			[
				23,
				14
			],
			[
				21,
				-22
			],
			[
				48,
				16
			],
			[
				2,
				24
			],
			[
				-22,
				19
			],
			[
				-6,
				7
			],
			[
				47,
				41
			],
			[
				15,
				-9
			],
			[
				11,
				-7
			],
			[
				62,
				-38
			],
			[
				94,
				-59
			],
			[
				35,
				14
			],
			[
				25,
				10
			],
			[
				-10,
				16
			],
			[
				-28,
				43
			],
			[
				61,
				18
			],
			[
				146,
				40
			],
			[
				348,
				101
			],
			[
				29,
				-46
			],
			[
				30,
				-48
			],
			[
				46,
				5
			],
			[
				0,
				7
			],
			[
				2,
				57
			],
			[
				0,
				16
			],
			[
				103,
				24
			],
			[
				-93,
				48
			],
			[
				-78,
				-14
			],
			[
				-351,
				-62
			],
			[
				-62,
				-10
			],
			[
				-128,
				-20
			],
			[
				-154,
				-25
			],
			[
				-67,
				31
			],
			[
				194,
				57
			],
			[
				-43,
				55
			],
			[
				64,
				61
			],
			[
				44,
				19
			],
			[
				248,
				108
			],
			[
				164,
				20
			],
			[
				14,
				2
			],
			[
				117,
				-7
			],
			[
				-14,
				-30
			],
			[
				-8,
				-18
			],
			[
				147,
				-54
			],
			[
				132,
				34
			],
			[
				37,
				11
			],
			[
				116,
				37
			],
			[
				-89,
				-87
			],
			[
				144,
				4
			],
			[
				7,
				-37
			],
			[
				-130,
				-104
			],
			[
				-39,
				-27
			],
			[
				-47,
				-102
			],
			[
				-4,
				-8
			],
			[
				51,
				9
			],
			[
				13,
				12
			],
			[
				59,
				55
			],
			[
				178,
				165
			],
			[
				-5,
				74
			],
			[
				37,
				33
			],
			[
				74,
				64
			],
			[
				38,
				33
			],
			[
				102,
				15
			],
			[
				-99,
				-87
			],
			[
				27,
				-32
			],
			[
				70,
				42
			],
			[
				190,
				115
			],
			[
				42,
				15
			],
			[
				290,
				99
			],
			[
				57,
				-7
			],
			[
				27,
				-31
			],
			[
				-38,
				-53
			],
			[
				-62,
				-86
			],
			[
				39,
				-10
			],
			[
				11,
				-3
			],
			[
				62,
				72
			],
			[
				23,
				26
			],
			[
				39,
				46
			],
			[
				29,
				32
			],
			[
				1,
				67
			],
			[
				64,
				12
			],
			[
				108,
				-7
			],
			[
				-13,
				67
			],
			[
				234,
				65
			],
			[
				37,
				-2
			]
		],
		[
			[
				33442,
				68049
			],
			[
				0,
				0
			],
			[
				122,
				-8
			],
			[
				59,
				-29
			],
			[
				57,
				-62
			],
			[
				105,
				-269
			],
			[
				57,
				-13
			],
			[
				66,
				54
			],
			[
				-15,
				48
			],
			[
				-11,
				32
			],
			[
				-1,
				6
			],
			[
				8,
				61
			],
			[
				51,
				73
			],
			[
				89,
				73
			],
			[
				6,
				5
			],
			[
				-11,
				4
			],
			[
				-34,
				14
			],
			[
				-98,
				38
			],
			[
				40,
				41
			],
			[
				19,
				20
			],
			[
				75,
				-52
			],
			[
				25,
				-17
			],
			[
				36,
				37
			],
			[
				90,
				-6
			],
			[
				-81,
				56
			],
			[
				-14,
				52
			],
			[
				66,
				6
			],
			[
				60,
				-10
			],
			[
				-7,
				51
			],
			[
				-82,
				-9
			],
			[
				-41,
				61
			],
			[
				85,
				19
			],
			[
				1,
				29
			],
			[
				-64,
				69
			],
			[
				-91,
				66
			],
			[
				-198,
				23
			],
			[
				-41,
				75
			],
			[
				-34,
				54
			],
			[
				-75,
				-24
			],
			[
				0,
				-25
			],
			[
				-50,
				3
			],
			[
				-44,
				50
			],
			[
				-68,
				-87
			],
			[
				76,
				-21
			],
			[
				83,
				22
			],
			[
				54,
				-28
			],
			[
				-18,
				-29
			],
			[
				-149,
				-14
			],
			[
				-35,
				4
			],
			[
				-47,
				6
			],
			[
				-84,
				55
			],
			[
				-16,
				21
			],
			[
				-6,
				8
			],
			[
				-134,
				1
			],
			[
				-103,
				2
			],
			[
				-5,
				1
			],
			[
				-27,
				1
			],
			[
				-44,
				2
			],
			[
				-54,
				-18
			],
			[
				-18,
				-6
			],
			[
				2,
				33
			],
			[
				4,
				90
			],
			[
				-19,
				12
			],
			[
				-25,
				16
			],
			[
				21,
				9
			],
			[
				61,
				28
			],
			[
				-71,
				48
			],
			[
				-101,
				67
			],
			[
				-10,
				7
			],
			[
				-50,
				48
			],
			[
				3,
				-34
			],
			[
				2,
				-22
			],
			[
				9,
				-109
			],
			[
				4,
				-50
			],
			[
				-15,
				-9
			],
			[
				-223,
				-129
			],
			[
				-149,
				-37
			],
			[
				22,
				-45
			],
			[
				-82,
				1
			],
			[
				-1,
				1
			],
			[
				-36,
				52
			],
			[
				-44,
				-18
			],
			[
				29,
				-55
			],
			[
				19,
				-9
			],
			[
				60,
				-28
			],
			[
				52,
				25
			],
			[
				77,
				-14
			],
			[
				25,
				-29
			],
			[
				13,
				-31
			],
			[
				4,
				-12
			],
			[
				-55,
				-51
			],
			[
				-3,
				-40
			],
			[
				-28,
				-50
			],
			[
				-34,
				39
			],
			[
				-106,
				38
			],
			[
				44,
				34
			],
			[
				-8,
				51
			],
			[
				-1,
				5
			],
			[
				-128,
				-43
			],
			[
				-6,
				-2
			],
			[
				-5,
				-2
			],
			[
				-8,
				4
			],
			[
				-71,
				36
			],
			[
				-84,
				178
			],
			[
				-4,
				66
			],
			[
				0,
				49
			],
			[
				59,
				31
			],
			[
				87,
				-19
			],
			[
				84,
				10
			],
			[
				-123,
				81
			],
			[
				-5,
				4
			],
			[
				20,
				40
			],
			[
				36,
				10
			],
			[
				2,
				1
			],
			[
				1,
				3
			],
			[
				27,
				64
			],
			[
				-20,
				23
			],
			[
				35,
				44
			],
			[
				85,
				22
			],
			[
				51,
				43
			],
			[
				29,
				24
			],
			[
				-3,
				13
			],
			[
				-21,
				88
			],
			[
				63,
				69
			],
			[
				193,
				68
			],
			[
				122,
				-21
			],
			[
				-14,
				-71
			],
			[
				-10,
				-52
			],
			[
				-48,
				-29
			],
			[
				12,
				-87
			],
			[
				69,
				-45
			],
			[
				41,
				35
			],
			[
				-37,
				57
			],
			[
				33,
				84
			],
			[
				75,
				-31
			],
			[
				92,
				28
			],
			[
				-23,
				27
			],
			[
				7,
				76
			],
			[
				45,
				9
			],
			[
				29,
				-52
			],
			[
				65,
				-7
			],
			[
				-12,
				228
			],
			[
				0,
				3
			],
			[
				-92,
				43
			],
			[
				98,
				55
			],
			[
				145,
				-37
			],
			[
				-7,
				-48
			],
			[
				-2,
				-15
			],
			[
				42,
				-52
			],
			[
				26,
				43
			],
			[
				67,
				-19
			],
			[
				26,
				-85
			],
			[
				1,
				-23
			],
			[
				1,
				-40
			],
			[
				-23,
				-11
			],
			[
				-12,
				-7
			],
			[
				-47,
				37
			],
			[
				-45,
				-7
			],
			[
				4,
				-35
			],
			[
				94,
				-48
			],
			[
				26,
				-131
			],
			[
				-2,
				-7
			],
			[
				-22,
				-64
			],
			[
				-16,
				-13
			],
			[
				-8,
				-6
			],
			[
				-13,
				-10
			],
			[
				-120,
				15
			],
			[
				-126,
				43
			],
			[
				-55,
				19
			],
			[
				-23,
				-34
			],
			[
				47,
				-38
			],
			[
				25,
				-12
			],
			[
				67,
				-31
			],
			[
				-30,
				-34
			],
			[
				-5,
				-6
			],
			[
				17,
				-13
			],
			[
				37,
				-28
			],
			[
				-53,
				-40
			],
			[
				-46,
				-36
			],
			[
				-14,
				-11
			],
			[
				27,
				-49
			],
			[
				5,
				1
			],
			[
				39,
				5
			],
			[
				0,
				-33
			],
			[
				-20,
				-32
			],
			[
				49,
				-22
			],
			[
				41,
				32
			],
			[
				2,
				1
			],
			[
				13,
				74
			],
			[
				-36,
				35
			],
			[
				-6,
				5
			],
			[
				4,
				5
			],
			[
				14,
				21
			],
			[
				23,
				31
			],
			[
				18,
				26
			],
			[
				27,
				-2
			],
			[
				120,
				-10
			],
			[
				67,
				-4
			],
			[
				-37,
				77
			],
			[
				101,
				66
			],
			[
				17,
				-56
			],
			[
				121,
				-24
			],
			[
				-12,
				38
			],
			[
				-19,
				61
			],
			[
				8,
				6
			],
			[
				50,
				45
			],
			[
				46,
				-23
			],
			[
				23,
				-11
			],
			[
				11,
				-5
			],
			[
				52,
				17
			],
			[
				28,
				55
			],
			[
				11,
				21
			],
			[
				26,
				19
			],
			[
				52,
				38
			],
			[
				-21,
				11
			],
			[
				-51,
				26
			],
			[
				39,
				22
			],
			[
				14,
				9
			],
			[
				-21,
				21
			],
			[
				-20,
				19
			],
			[
				62,
				16
			],
			[
				6,
				-9
			],
			[
				18,
				-25
			],
			[
				91,
				17
			],
			[
				8,
				29
			],
			[
				-26,
				10
			],
			[
				-20,
				8
			],
			[
				-31,
				12
			],
			[
				-60,
				-5
			],
			[
				-8,
				-1
			],
			[
				-4,
				2
			],
			[
				-40,
				17
			],
			[
				-26,
				11
			],
			[
				12,
				12
			],
			[
				14,
				15
			],
			[
				35,
				6
			],
			[
				1,
				34
			],
			[
				-105,
				36
			],
			[
				-4,
				1
			],
			[
				0,
				5
			],
			[
				-6,
				146
			],
			[
				81,
				64
			],
			[
				27,
				-14
			],
			[
				23,
				-12
			],
			[
				0,
				-5
			],
			[
				-3,
				-48
			],
			[
				105,
				-6
			],
			[
				91,
				52
			],
			[
				13,
				34
			],
			[
				-12,
				111
			]
		],
		[
			[
				32076,
				68042
			],
			[
				-313,
				1
			],
			[
				15,
				63
			],
			[
				-7,
				54
			],
			[
				-27,
				7
			],
			[
				-40,
				74
			],
			[
				21,
				40
			],
			[
				29,
				49
			],
			[
				57,
				47
			],
			[
				22,
				51
			],
			[
				53,
				18
			],
			[
				-15,
				60
			],
			[
				28,
				80
			],
			[
				54,
				-120
			],
			[
				17,
				-92
			],
			[
				57,
				-136
			],
			[
				62,
				-40
			],
			[
				35,
				-128
			],
			[
				-48,
				-28
			]
		],
		[
			[
				31552,
				68078
			],
			[
				52,
				-83
			],
			[
				12,
				-19
			],
			[
				81,
				-23
			],
			[
				48,
				-14
			],
			[
				63,
				-5
			],
			[
				124,
				-7
			],
			[
				-49,
				-113
			],
			[
				-5,
				-13
			],
			[
				41,
				31
			],
			[
				18,
				13
			],
			[
				45,
				33
			],
			[
				-14,
				-98
			],
			[
				158,
				60
			],
			[
				-93,
				25
			],
			[
				86,
				43
			],
			[
				35,
				-21
			],
			[
				38,
				-50
			],
			[
				-34,
				-41
			],
			[
				-192,
				-115
			],
			[
				7,
				48
			],
			[
				-204,
				-45
			],
			[
				-10,
				-8
			],
			[
				-22,
				-17
			],
			[
				-144,
				-6
			],
			[
				29,
				42
			],
			[
				-98,
				22
			],
			[
				-17,
				3
			],
			[
				-15,
				-5
			],
			[
				-56,
				-19
			],
			[
				-125,
				-3
			],
			[
				-22,
				37
			],
			[
				-148,
				-46
			],
			[
				-29,
				30
			],
			[
				29,
				61
			],
			[
				-22,
				67
			],
			[
				-36,
				61
			],
			[
				0,
				31
			],
			[
				36,
				12
			],
			[
				4,
				0
			],
			[
				61,
				2
			],
			[
				-1,
				9
			],
			[
				-6,
				62
			],
			[
				-65,
				25
			],
			[
				86,
				49
			],
			[
				104,
				-21
			],
			[
				40,
				-44
			],
			[
				58,
				7
			],
			[
				19,
				45
			],
			[
				-36,
				27
			],
			[
				10,
				30
			],
			[
				41,
				20
			],
			[
				96,
				76
			],
			[
				0,
				61
			],
			[
				72,
				-79
			],
			[
				-87,
				-80
			],
			[
				37,
				-57
			]
		],
		[
			[
				30617,
				67729
			],
			[
				-72,
				-68
			],
			[
				-65,
				64
			],
			[
				71,
				43
			],
			[
				66,
				-39
			]
		],
		[
			[
				30241,
				66934
			],
			[
				-33,
				-26
			],
			[
				-48,
				13
			],
			[
				61,
				63
			],
			[
				54,
				14
			],
			[
				82,
				44
			],
			[
				-28,
				-90
			],
			[
				-88,
				-18
			]
		],
		[
			[
				31497,
				65839
			],
			[
				-71,
				-30
			],
			[
				-38,
				27
			],
			[
				-141,
				-44
			],
			[
				35,
				100
			],
			[
				93,
				23
			],
			[
				-40,
				28
			],
			[
				235,
				57
			],
			[
				42,
				-28
			],
			[
				-115,
				-133
			]
		],
		[
			[
				28840,
				62515
			],
			[
				5,
				14
			],
			[
				62,
				165
			],
			[
				138,
				111
			],
			[
				68,
				-79
			],
			[
				-62,
				-92
			],
			[
				28,
				-135
			],
			[
				-104,
				-97
			],
			[
				17,
				-57
			],
			[
				-3,
				-5
			],
			[
				-100,
				-151
			],
			[
				-23,
				-16
			],
			[
				-32,
				-22
			],
			[
				4,
				-85
			],
			[
				29,
				-19
			],
			[
				4,
				-3
			],
			[
				-15,
				-151
			],
			[
				62,
				-17
			],
			[
				-1,
				-11
			],
			[
				-24,
				-143
			],
			[
				-12,
				-105
			],
			[
				-5,
				-37
			],
			[
				-43,
				-65
			],
			[
				-44,
				-20
			],
			[
				-19,
				-8
			],
			[
				-10,
				-5
			],
			[
				-66,
				64
			],
			[
				-38,
				80
			],
			[
				0,
				2
			],
			[
				15,
				122
			],
			[
				-47,
				56
			],
			[
				-14,
				101
			],
			[
				-62,
				59
			],
			[
				-74,
				-1
			],
			[
				-109,
				123
			],
			[
				-20,
				-11
			],
			[
				-70,
				-40
			],
			[
				-5,
				-2
			],
			[
				-11,
				13
			],
			[
				-29,
				36
			],
			[
				16,
				81
			],
			[
				3,
				35
			],
			[
				103,
				74
			],
			[
				-18,
				114
			],
			[
				50,
				76
			],
			[
				-6,
				59
			],
			[
				62,
				49
			],
			[
				49,
				-93
			],
			[
				51,
				-8
			],
			[
				17,
				-57
			],
			[
				64,
				-12
			],
			[
				27,
				-76
			],
			[
				16,
				-46
			],
			[
				134,
				107
			],
			[
				42,
				128
			]
		],
		[
			[
				28212,
				62498
			],
			[
				-14,
				-4
			],
			[
				-33,
				17
			],
			[
				-20,
				12
			],
			[
				-13,
				26
			],
			[
				10,
				30
			],
			[
				13,
				16
			],
			[
				30,
				8
			],
			[
				38,
				8
			],
			[
				38,
				-16
			],
			[
				4,
				-25
			],
			[
				1,
				-23
			],
			[
				-14,
				-30
			],
			[
				-15,
				-12
			],
			[
				-25,
				-7
			]
		],
		[
			[
				28090,
				62318
			],
			[
				-43,
				-35
			],
			[
				-30,
				12
			],
			[
				-29,
				22
			],
			[
				3,
				16
			],
			[
				9,
				31
			],
			[
				14,
				11
			],
			[
				27,
				32
			],
			[
				15,
				31
			],
			[
				8,
				22
			],
			[
				37,
				44
			],
			[
				104,
				-59
			],
			[
				-95,
				-68
			],
			[
				-2,
				-2
			],
			[
				-18,
				-57
			]
		],
		[
			[
				27997,
				62181
			],
			[
				-82,
				-44
			],
			[
				-209,
				21
			],
			[
				18,
				154
			],
			[
				140,
				-41
			],
			[
				133,
				-90
			]
		],
		[
			[
				27533,
				62576
			],
			[
				40,
				-30
			],
			[
				59,
				18
			],
			[
				6,
				2
			],
			[
				18,
				-8
			],
			[
				27,
				-16
			],
			[
				-14,
				-19
			],
			[
				-35,
				-21
			],
			[
				-40,
				-16
			],
			[
				-28,
				1
			],
			[
				-131,
				16
			],
			[
				-1,
				25
			],
			[
				21,
				22
			],
			[
				33,
				12
			],
			[
				45,
				14
			]
		],
		[
			[
				27614,
				62678
			],
			[
				-4,
				-2
			],
			[
				-43,
				0
			],
			[
				-14,
				17
			],
			[
				-10,
				20
			],
			[
				5,
				11
			],
			[
				19,
				21
			],
			[
				9,
				4
			],
			[
				55,
				-18
			],
			[
				1,
				-22
			],
			[
				-18,
				-31
			]
		],
		[
			[
				27736,
				62012
			],
			[
				75,
				-66
			],
			[
				-10,
				-74
			],
			[
				-47,
				6
			],
			[
				-158,
				-76
			],
			[
				-62,
				-1
			],
			[
				-76,
				-44
			],
			[
				-28,
				18
			],
			[
				91,
				93
			],
			[
				-78,
				48
			],
			[
				63,
				86
			],
			[
				69,
				-10
			],
			[
				94,
				48
			],
			[
				67,
				-28
			]
		],
		[
			[
				28106,
				61595
			],
			[
				-165,
				-56
			],
			[
				33,
				56
			],
			[
				48,
				25
			],
			[
				15,
				43
			],
			[
				-47,
				6
			],
			[
				47,
				111
			],
			[
				25,
				81
			],
			[
				34,
				-9
			],
			[
				-15,
				-207
			],
			[
				25,
				-50
			]
		],
		[
			[
				27148,
				61747
			],
			[
				-155,
				-77
			],
			[
				-20,
				44
			],
			[
				187,
				120
			],
			[
				48,
				-30
			],
			[
				-60,
				-57
			]
		],
		[
			[
				30432,
				65458
			],
			[
				-22,
				-2
			],
			[
				-19,
				5
			],
			[
				-29,
				12
			],
			[
				-17,
				11
			],
			[
				5,
				23
			],
			[
				20,
				22
			],
			[
				30,
				25
			],
			[
				45,
				17
			],
			[
				34,
				-13
			],
			[
				-6,
				-58
			],
			[
				-20,
				-26
			],
			[
				-21,
				-16
			]
		],
		[
			[
				30282,
				65217
			],
			[
				-43,
				-15
			],
			[
				-20,
				8
			],
			[
				-18,
				15
			],
			[
				-37,
				67
			],
			[
				36,
				15
			],
			[
				93,
				23
			],
			[
				20,
				-14
			],
			[
				9,
				-24
			],
			[
				4,
				-21
			],
			[
				-10,
				-35
			],
			[
				-34,
				-19
			]
		],
		[
			[
				29439,
				64403
			],
			[
				-63,
				-86
			],
			[
				96,
				26
			],
			[
				-99,
				-218
			],
			[
				-56,
				10
			],
			[
				-120,
				-59
			],
			[
				-36,
				19
			],
			[
				-91,
				-43
			],
			[
				-41,
				-44
			],
			[
				-77,
				-13
			],
			[
				-104,
				8
			],
			[
				40,
				81
			],
			[
				115,
				68
			],
			[
				18,
				72
			],
			[
				81,
				90
			],
			[
				233,
				157
			],
			[
				47,
				-1
			],
			[
				57,
				-67
			]
		],
		[
			[
				27928,
				64166
			],
			[
				-51,
				-31
			],
			[
				-34,
				6
			],
			[
				8,
				15
			],
			[
				37,
				30
			],
			[
				17,
				15
			],
			[
				13,
				2
			],
			[
				46,
				1
			],
			[
				-36,
				-38
			]
		],
		[
			[
				27825,
				64202
			],
			[
				-59,
				-43
			],
			[
				-3,
				38
			],
			[
				18,
				42
			],
			[
				36,
				32
			],
			[
				83,
				73
			],
			[
				33,
				10
			],
			[
				18,
				-13
			],
			[
				0,
				-21
			],
			[
				-19,
				-39
			],
			[
				-47,
				-44
			],
			[
				-31,
				-19
			],
			[
				-29,
				-16
			]
		],
		[
			[
				28106,
				64325
			],
			[
				-71,
				-22
			],
			[
				-8,
				28
			],
			[
				25,
				42
			],
			[
				35,
				46
			],
			[
				24,
				16
			],
			[
				39,
				7
			],
			[
				34,
				-26
			],
			[
				-35,
				-66
			],
			[
				-43,
				-25
			]
		],
		[
			[
				27417,
				63556
			],
			[
				-22,
				-85
			],
			[
				-86,
				13
			],
			[
				32,
				106
			],
			[
				35,
				-4
			],
			[
				41,
				-30
			]
		],
		[
			[
				29153,
				63375
			],
			[
				-86,
				-1
			],
			[
				11,
				54
			],
			[
				42,
				7
			],
			[
				142,
				120
			],
			[
				17,
				-47
			],
			[
				-126,
				-133
			]
		],
		[
			[
				28268,
				63364
			],
			[
				-152,
				-100
			],
			[
				-146,
				-57
			],
			[
				-22,
				43
			],
			[
				105,
				32
			],
			[
				13,
				43
			],
			[
				-98,
				-14
			],
			[
				-1,
				37
			],
			[
				98,
				19
			],
			[
				55,
				56
			],
			[
				164,
				-16
			],
			[
				-16,
				-43
			]
		],
		[
			[
				30073,
				63114
			],
			[
				104,
				-49
			],
			[
				137,
				25
			],
			[
				34,
				-10
			],
			[
				38,
				-12
			],
			[
				-18,
				-46
			],
			[
				-27,
				-31
			],
			[
				-151,
				9
			],
			[
				-106,
				6
			],
			[
				-21,
				29
			],
			[
				-8,
				11
			],
			[
				18,
				68
			]
		],
		[
			[
				30026,
				63012
			],
			[
				0,
				0
			],
			[
				14,
				-34
			],
			[
				0,
				0
			],
			[
				-167,
				-38
			],
			[
				-306,
				-106
			],
			[
				-36,
				-16
			],
			[
				-89,
				-39
			],
			[
				-102,
				-71
			],
			[
				-50,
				33
			],
			[
				-11,
				149
			],
			[
				426,
				184
			],
			[
				33,
				-17
			],
			[
				258,
				21
			],
			[
				30,
				-66
			]
		],
		[
			[
				31853,
				65570
			],
			[
				-35,
				-33
			],
			[
				-45,
				9
			],
			[
				-86,
				8
			],
			[
				-70,
				53
			],
			[
				28,
				49
			],
			[
				107,
				0
			],
			[
				61,
				-49
			],
			[
				40,
				-37
			]
		],
		[
			[
				25529,
				59829
			],
			[
				9,
				21
			],
			[
				27,
				9
			],
			[
				16,
				-5
			]
		],
		[
			[
				25669,
				61538
			],
			[
				-127,
				-22
			],
			[
				-34,
				64
			],
			[
				41,
				49
			],
			[
				53,
				1
			],
			[
				67,
				-92
			]
		],
		[
			[
				26560,
				60987
			],
			[
				42,
				-27
			],
			[
				3,
				0
			],
			[
				27,
				-26
			],
			[
				3,
				-23
			],
			[
				-12,
				-30
			],
			[
				-35,
				-30
			],
			[
				-51,
				-27
			],
			[
				-18,
				-6
			],
			[
				-25,
				12
			],
			[
				8,
				22
			],
			[
				11,
				26
			],
			[
				-27,
				59
			],
			[
				-48,
				-3
			],
			[
				-30,
				24
			],
			[
				52,
				50
			],
			[
				79,
				31
			],
			[
				21,
				-52
			]
		],
		[
			[
				26421,
				60762
			],
			[
				-61,
				-14
			],
			[
				-29,
				26
			],
			[
				2,
				32
			],
			[
				101,
				78
			],
			[
				30,
				-11
			],
			[
				-8,
				-76
			],
			[
				-35,
				-35
			]
		],
		[
			[
				27010,
				60603
			],
			[
				-81,
				-78
			],
			[
				-26,
				106
			],
			[
				36,
				54
			],
			[
				11,
				15
			],
			[
				5,
				1
			],
			[
				98,
				22
			],
			[
				51,
				-54
			],
			[
				-20,
				-40
			],
			[
				-13,
				-25
			],
			[
				-32,
				0
			],
			[
				-29,
				-1
			]
		],
		[
			[
				27188,
				60341
			],
			[
				-41,
				-19
			],
			[
				-96,
				17
			],
			[
				-35,
				57
			],
			[
				-1,
				3
			],
			[
				12,
				15
			],
			[
				81,
				97
			],
			[
				123,
				45
			],
			[
				28,
				-30
			],
			[
				-40,
				-31
			],
			[
				27,
				-46
			],
			[
				9,
				-15
			],
			[
				-23,
				-32
			],
			[
				-44,
				-61
			]
		],
		[
			[
				26481,
				60396
			],
			[
				261,
				19
			],
			[
				185,
				-54
			],
			[
				-64,
				-61
			],
			[
				-213,
				-50
			],
			[
				-145,
				-33
			],
			[
				5,
				43
			],
			[
				-68,
				-2
			],
			[
				15,
				-42
			],
			[
				-238,
				-51
			],
			[
				-7,
				66
			],
			[
				72,
				109
			],
			[
				82,
				4
			],
			[
				30,
				33
			],
			[
				42,
				16
			],
			[
				43,
				3
			]
		],
		[
			[
				25780,
				60175
			],
			[
				63,
				-19
			],
			[
				59,
				16
			],
			[
				6,
				-88
			],
			[
				-76,
				-18
			],
			[
				-72,
				35
			],
			[
				20,
				74
			]
		],
		[
			[
				25466,
				60081
			],
			[
				-96,
				-9
			],
			[
				68,
				109
			],
			[
				44,
				-45
			],
			[
				-16,
				-55
			]
		],
		[
			[
				26586,
				60583
			],
			[
				-33,
				-18
			],
			[
				-28,
				7
			],
			[
				-11,
				12
			],
			[
				5,
				15
			],
			[
				6,
				13
			],
			[
				24,
				22
			],
			[
				38,
				20
			],
			[
				33,
				1
			],
			[
				18,
				-10
			],
			[
				-3,
				-25
			],
			[
				-17,
				-15
			],
			[
				-32,
				-22
			]
		],
		[
			[
				26547,
				59987
			],
			[
				-23,
				-17
			],
			[
				-100,
				14
			],
			[
				-32,
				27
			],
			[
				25,
				44
			],
			[
				91,
				23
			],
			[
				51,
				-11
			],
			[
				10,
				-2
			],
			[
				24,
				-32
			],
			[
				-3,
				-5
			],
			[
				-3,
				-8
			],
			[
				-40,
				-33
			]
		],
		[
			[
				26324,
				59970
			],
			[
				10,
				-28
			],
			[
				120,
				0
			],
			[
				176,
				-1
			],
			[
				-12,
				-87
			],
			[
				-144,
				-57
			],
			[
				-73,
				-28
			],
			[
				-42,
				29
			],
			[
				-88,
				-51
			],
			[
				-102,
				-2
			],
			[
				-57,
				28
			],
			[
				-89,
				-30
			],
			[
				-5,
				-2
			],
			[
				-8,
				13
			],
			[
				-9,
				14
			],
			[
				-26,
				39
			],
			[
				184,
				118
			],
			[
				63,
				40
			],
			[
				14,
				38
			],
			[
				76,
				-1
			],
			[
				12,
				-32
			]
		],
		[
			[
				26824,
				59747
			],
			[
				10,
				-42
			],
			[
				-1,
				-2
			],
			[
				-2,
				-12
			],
			[
				-1,
				0
			],
			[
				-79,
				-22
			],
			[
				-30,
				-5
			],
			[
				-4,
				-1
			],
			[
				-51,
				-1
			],
			[
				-36,
				7
			],
			[
				-25,
				13
			],
			[
				14,
				36
			],
			[
				55,
				17
			],
			[
				70,
				-6
			],
			[
				74,
				17
			],
			[
				6,
				1
			]
		],
		[
			[
				32969,
				68191
			],
			[
				-55,
				5
			],
			[
				-14,
				31
			],
			[
				-51,
				12
			],
			[
				-29,
				-36
			],
			[
				-136,
				44
			],
			[
				-6,
				11
			],
			[
				-29,
				54
			],
			[
				112,
				-16
			],
			[
				20,
				83
			],
			[
				45,
				26
			],
			[
				57,
				-9
			],
			[
				90,
				51
			],
			[
				152,
				34
			],
			[
				21,
				-4
			],
			[
				18,
				-4
			],
			[
				58,
				-13
			],
			[
				49,
				57
			],
			[
				30,
				-33
			],
			[
				4,
				-1
			],
			[
				212,
				-50
			],
			[
				17,
				31
			],
			[
				364,
				-27
			],
			[
				155,
				-204
			],
			[
				-184,
				-86
			],
			[
				-19,
				-9
			],
			[
				-27,
				-4
			],
			[
				-9,
				-2
			],
			[
				-65,
				19
			],
			[
				-173,
				69
			],
			[
				-93,
				77
			],
			[
				-2,
				2
			],
			[
				-79,
				90
			],
			[
				-50,
				-2
			],
			[
				-24,
				-18
			],
			[
				-2,
				-2
			],
			[
				-24,
				-17
			],
			[
				-13,
				-65
			],
			[
				26,
				-2
			],
			[
				10,
				0
			],
			[
				66,
				23
			],
			[
				7,
				-54
			],
			[
				-70,
				-3
			],
			[
				-54,
				-44
			],
			[
				-58,
				-24
			],
			[
				-72,
				-5
			],
			[
				-175,
				15
			]
		],
		[
			[
				32690,
				68118
			],
			[
				-21,
				-9
			],
			[
				-42,
				3
			],
			[
				-66,
				11
			],
			[
				-23,
				17
			],
			[
				9,
				27
			],
			[
				13,
				17
			],
			[
				38,
				28
			],
			[
				37,
				-16
			],
			[
				68,
				-42
			],
			[
				-13,
				-36
			]
		],
		[
			[
				33770,
				69359
			],
			[
				-11,
				-44
			],
			[
				-29,
				1
			],
			[
				-41,
				2
			],
			[
				-10,
				-29
			],
			[
				50,
				-21
			],
			[
				-1,
				-45
			],
			[
				-40,
				1
			],
			[
				-6,
				-36
			],
			[
				46,
				-1
			],
			[
				14,
				0
			],
			[
				-14,
				-32
			],
			[
				-22,
				-50
			],
			[
				-52,
				0
			],
			[
				-47,
				64
			],
			[
				-59,
				3
			],
			[
				-30,
				2
			],
			[
				-52,
				50
			],
			[
				76,
				70
			],
			[
				66,
				61
			],
			[
				13,
				4
			],
			[
				37,
				13
			],
			[
				30,
				-3
			],
			[
				43,
				-5
			],
			[
				39,
				-5
			]
		],
		[
			[
				24113,
				65904
			],
			[
				-30,
				32
			],
			[
				-50,
				-2
			],
			[
				-41,
				-25
			],
			[
				-3,
				-98
			],
			[
				23,
				-24
			],
			[
				-49,
				-20
			],
			[
				-36,
				-1
			],
			[
				-42,
				157
			],
			[
				125,
				53
			],
			[
				81,
				113
			],
			[
				14,
				7
			],
			[
				174,
				91
			],
			[
				86,
				-16
			],
			[
				-87,
				-131
			],
			[
				98,
				-125
			],
			[
				-21,
				-25
			],
			[
				-16,
				14
			],
			[
				-43,
				39
			],
			[
				13,
				-122
			],
			[
				-13,
				-49
			],
			[
				-80,
				211
			],
			[
				-57,
				10
			],
			[
				-21,
				-19
			],
			[
				18,
				-72
			],
			[
				-28,
				-13
			],
			[
				-15,
				15
			]
		],
		[
			[
				25183,
				68559
			],
			[
				0,
				0
			],
			[
				8,
				14
			],
			[
				47,
				1
			],
			[
				13,
				43
			],
			[
				-16,
				35
			],
			[
				75,
				46
			],
			[
				22,
				74
			],
			[
				37,
				13
			],
			[
				65,
				-32
			],
			[
				50,
				52
			],
			[
				-36,
				44
			],
			[
				-44,
				172
			],
			[
				47,
				13
			],
			[
				53,
				-39
			],
			[
				48,
				41
			],
			[
				57,
				4
			],
			[
				11,
				-31
			],
			[
				-17,
				-80
			],
			[
				51,
				-21
			],
			[
				18,
				36
			],
			[
				94,
				13
			],
			[
				-14,
				-114
			],
			[
				-57,
				1
			],
			[
				-24,
				-69
			],
			[
				-81,
				-20
			],
			[
				-25,
				-81
			],
			[
				1,
				-20
			],
			[
				37,
				1
			],
			[
				21,
				49
			],
			[
				56,
				22
			],
			[
				7,
				-37
			],
			[
				-33,
				-62
			],
			[
				-95,
				-38
			],
			[
				-23,
				-45
			],
			[
				-62,
				-4
			],
			[
				-13,
				-54
			],
			[
				-117,
				20
			],
			[
				20,
				-49
			],
			[
				82,
				-20
			],
			[
				-1,
				-36
			],
			[
				68,
				25
			],
			[
				157,
				153
			],
			[
				39,
				-199
			],
			[
				13,
				-68
			],
			[
				9,
				-43
			],
			[
				-26,
				-74
			],
			[
				45,
				-67
			],
			[
				-5,
				-42
			],
			[
				-39,
				-44
			],
			[
				0,
				0
			]
		],
		[
			[
				25706,
				68042
			],
			[
				-103,
				-117
			],
			[
				-24,
				6
			],
			[
				-38,
				9
			],
			[
				-11,
				103
			],
			[
				-51,
				5
			],
			[
				-10,
				-103
			],
			[
				-72,
				-21
			],
			[
				-64,
				81
			],
			[
				-9,
				61
			],
			[
				-65,
				113
			],
			[
				3,
				38
			],
			[
				-35,
				1
			],
			[
				-17,
				-85
			],
			[
				46,
				-72
			],
			[
				15,
				-86
			],
			[
				-35,
				5
			],
			[
				-74,
				-30
			],
			[
				-43,
				-81
			],
			[
				94,
				46
			],
			[
				182,
				-63
			],
			[
				99,
				27
			],
			[
				-5,
				-22
			],
			[
				-31,
				-126
			],
			[
				-129,
				-141
			],
			[
				-1,
				-2
			],
			[
				-11,
				-107
			],
			[
				-30,
				-24
			],
			[
				-77,
				44
			],
			[
				-80,
				-86
			],
			[
				-72,
				-24
			],
			[
				-36,
				18
			],
			[
				-53,
				-40
			],
			[
				10,
				-41
			],
			[
				-89,
				5
			],
			[
				-14,
				-36
			],
			[
				36,
				-22
			],
			[
				-106,
				-181
			],
			[
				-81,
				-12
			],
			[
				-108,
				-12
			],
			[
				-40,
				112
			],
			[
				144,
				45
			],
			[
				-40,
				56
			],
			[
				54,
				15
			],
			[
				44,
				89
			],
			[
				-40,
				59
			],
			[
				39,
				80
			],
			[
				-53,
				59
			],
			[
				24,
				33
			],
			[
				70,
				65
			],
			[
				65,
				37
			],
			[
				48,
				332
			],
			[
				54,
				75
			],
			[
				80,
				-10
			],
			[
				9,
				146
			],
			[
				-34,
				50
			],
			[
				57,
				55
			],
			[
				-33,
				97
			],
			[
				37,
				1
			],
			[
				46,
				-41
			],
			[
				-1,
				71
			],
			[
				36,
				63
			]
		],
		[
			[
				26157,
				69423
			],
			[
				142,
				-44
			],
			[
				60,
				6
			],
			[
				162,
				-117
			],
			[
				35,
				-3
			],
			[
				8,
				-26
			],
			[
				9,
				-27
			],
			[
				-68,
				-55
			],
			[
				16,
				-55
			],
			[
				-82,
				-145
			],
			[
				23,
				-61
			],
			[
				-13,
				-110
			],
			[
				-30,
				-70
			],
			[
				-46,
				-25
			],
			[
				18,
				-106
			],
			[
				-12,
				-94
			],
			[
				-38,
				-43
			],
			[
				-50,
				10
			],
			[
				-27,
				67
			],
			[
				-134,
				-202
			],
			[
				-153,
				-67
			],
			[
				4,
				266
			],
			[
				-27,
				59
			],
			[
				-28,
				120
			],
			[
				-58,
				-8
			],
			[
				41,
				-169
			],
			[
				-66,
				-248
			],
			[
				-45,
				23
			],
			[
				-13,
				87
			],
			[
				-34,
				-6
			],
			[
				-3,
				18
			],
			[
				-29,
				200
			],
			[
				67,
				124
			],
			[
				-6,
				42
			],
			[
				106,
				28
			],
			[
				-9,
				73
			],
			[
				25,
				122
			],
			[
				145,
				-16
			],
			[
				56,
				58
			],
			[
				61,
				-73
			],
			[
				-81,
				-158
			],
			[
				142,
				-39
			],
			[
				-2,
				300
			],
			[
				-146,
				79
			],
			[
				50,
				64
			],
			[
				30,
				221
			]
		],
		[
			[
				30991,
				70486
			],
			[
				-219,
				-174
			],
			[
				-106,
				-93
			],
			[
				-79,
				-65
			],
			[
				-193,
				-113
			],
			[
				-23,
				119
			],
			[
				75,
				251
			],
			[
				164,
				85
			],
			[
				-13,
				28
			],
			[
				-99,
				-18
			],
			[
				-54,
				58
			],
			[
				14,
				92
			],
			[
				-118,
				54
			],
			[
				-7,
				3
			],
			[
				38,
				-94
			],
			[
				-5,
				-93
			],
			[
				-52,
				-38
			],
			[
				59,
				-47
			],
			[
				6,
				-5
			],
			[
				-14,
				-37
			],
			[
				-70,
				-193
			],
			[
				-11,
				-31
			],
			[
				-96,
				19
			],
			[
				-74,
				14
			],
			[
				-11,
				-8
			],
			[
				-23,
				-14
			],
			[
				0,
				-40
			],
			[
				86,
				-15
			],
			[
				7,
				-1
			],
			[
				13,
				7
			],
			[
				13,
				7
			],
			[
				70,
				-28
			],
			[
				-12,
				-113
			],
			[
				-42,
				-12
			],
			[
				-21,
				45
			],
			[
				-4,
				9
			],
			[
				-21,
				42
			],
			[
				-75,
				-96
			],
			[
				49,
				-21
			],
			[
				10,
				-4
			],
			[
				76,
				-31
			],
			[
				-20,
				-68
			],
			[
				-90,
				-2
			],
			[
				-19,
				56
			],
			[
				-3,
				7
			],
			[
				-17,
				-1
			],
			[
				-116,
				-16
			],
			[
				-65,
				-81
			],
			[
				0,
				0
			],
			[
				-1,
				1
			],
			[
				-48,
				41
			],
			[
				0,
				1
			],
			[
				-1,
				-1
			],
			[
				-21,
				-7
			],
			[
				-22,
				-59
			],
			[
				-99,
				-96
			],
			[
				-103,
				-42
			],
			[
				-117,
				37
			],
			[
				-61,
				19
			],
			[
				-12,
				-20
			],
			[
				-32,
				-51
			],
			[
				48,
				-56
			],
			[
				-106,
				-41
			],
			[
				-84,
				134
			],
			[
				-29,
				0
			],
			[
				17,
				-171
			],
			[
				-174,
				-39
			],
			[
				-129,
				-68
			],
			[
				-46,
				8
			],
			[
				-49,
				9
			],
			[
				-1,
				49
			],
			[
				21,
				15
			],
			[
				87,
				60
			],
			[
				-1,
				30
			],
			[
				-69,
				-5
			],
			[
				-18,
				-2
			],
			[
				35,
				86
			],
			[
				-41,
				84
			],
			[
				10,
				106
			],
			[
				88,
				37
			],
			[
				114,
				47
			],
			[
				7,
				3
			],
			[
				5,
				-1
			],
			[
				98,
				-9
			],
			[
				101,
				73
			],
			[
				79,
				25
			],
			[
				22,
				49
			],
			[
				-295,
				-89
			],
			[
				-12,
				-4
			],
			[
				-6,
				-2
			],
			[
				-30,
				55
			],
			[
				2,
				3
			],
			[
				62,
				120
			],
			[
				125,
				-22
			],
			[
				44,
				-7
			],
			[
				3,
				50
			],
			[
				-10,
				4
			],
			[
				-107,
				48
			],
			[
				-3,
				217
			],
			[
				73,
				143
			],
			[
				87,
				0
			],
			[
				83,
				-64
			],
			[
				21,
				-86
			],
			[
				18,
				-73
			],
			[
				29,
				7
			],
			[
				-1,
				85
			],
			[
				88,
				7
			],
			[
				-1,
				17
			],
			[
				-8,
				135
			],
			[
				43,
				19
			],
			[
				31,
				-103
			],
			[
				6,
				-45
			],
			[
				10,
				-65
			],
			[
				17,
				16
			],
			[
				84,
				76
			],
			[
				-2,
				7
			],
			[
				-36,
				97
			],
			[
				14,
				55
			],
			[
				-103,
				78
			],
			[
				11,
				-50
			],
			[
				5,
				-23
			],
			[
				-66,
				-13
			],
			[
				-45,
				49
			],
			[
				28,
				110
			],
			[
				-99,
				9
			],
			[
				16,
				76
			],
			[
				23,
				37
			],
			[
				184,
				19
			],
			[
				102,
				68
			],
			[
				31,
				-39
			],
			[
				28,
				-34
			],
			[
				30,
				-91
			],
			[
				21,
				-12
			],
			[
				2,
				-2
			],
			[
				31,
				-19
			],
			[
				35,
				12
			]
		],
		[
			[
				31965,
				70672
			],
			[
				-55,
				-108
			],
			[
				-2,
				-3
			],
			[
				-88,
				-30
			],
			[
				-8,
				-3
			],
			[
				-42,
				-120
			],
			[
				-45,
				23
			],
			[
				-7,
				3
			],
			[
				3,
				7
			],
			[
				26,
				45
			],
			[
				-52,
				2
			],
			[
				-66,
				-14
			],
			[
				-14,
				-73
			],
			[
				-20,
				-69
			],
			[
				-47,
				-24
			],
			[
				-118,
				25
			],
			[
				-51,
				4
			],
			[
				-48,
				-8
			],
			[
				-39,
				-7
			],
			[
				-57,
				-9
			],
			[
				-70,
				44
			],
			[
				2,
				42
			],
			[
				60,
				71
			],
			[
				55,
				64
			],
			[
				47,
				26
			]
		],
		[
			[
				30693,
				70152
			],
			[
				140,
				151
			],
			[
				123,
				65
			],
			[
				59,
				2
			],
			[
				19,
				-21
			],
			[
				69,
				-76
			],
			[
				-3,
				-28
			],
			[
				-5,
				-52
			],
			[
				-204,
				-6
			],
			[
				-21,
				-41
			],
			[
				161,
				-20
			],
			[
				-44,
				-127
			],
			[
				-13,
				-37
			],
			[
				-49,
				-44
			],
			[
				-32,
				45
			],
			[
				-16,
				22
			],
			[
				-13,
				-49
			],
			[
				-30,
				-116
			],
			[
				-73,
				43
			],
			[
				-36,
				-31
			],
			[
				-107,
				59
			],
			[
				-11,
				124
			],
			[
				60,
				80
			],
			[
				17,
				47
			],
			[
				9,
				10
			]
		],
		[
			[
				31195,
				70200
			],
			[
				47,
				73
			],
			[
				142,
				28
			],
			[
				113,
				-16
			],
			[
				20,
				-44
			],
			[
				-42,
				-38
			],
			[
				-60,
				-2
			],
			[
				-22,
				-33
			],
			[
				-28,
				-42
			],
			[
				-40,
				-7
			],
			[
				-63,
				-48
			],
			[
				-109,
				62
			],
			[
				42,
				67
			]
		],
		[
			[
				30705,
				69739
			],
			[
				13,
				-41
			],
			[
				-43,
				-59
			],
			[
				-52,
				22
			],
			[
				-6,
				51
			],
			[
				-37,
				-60
			],
			[
				-15,
				-78
			],
			[
				-114,
				-23
			],
			[
				-93,
				62
			],
			[
				47,
				56
			],
			[
				30,
				96
			],
			[
				90,
				5
			],
			[
				180,
				-31
			]
		],
		[
			[
				30258,
				69306
			],
			[
				-43,
				-11
			],
			[
				-36,
				22
			],
			[
				-14,
				63
			],
			[
				10,
				17
			],
			[
				10,
				13
			],
			[
				7,
				8
			],
			[
				125,
				16
			],
			[
				16,
				-26
			],
			[
				-29,
				-68
			],
			[
				-46,
				-34
			]
		],
		[
			[
				28651,
				70605
			],
			[
				22,
				4
			],
			[
				59,
				-88
			],
			[
				89,
				-61
			],
			[
				7,
				-5
			],
			[
				12,
				3
			],
			[
				61,
				16
			],
			[
				131,
				-179
			],
			[
				-2,
				-75
			],
			[
				-77,
				-160
			],
			[
				-2,
				-4
			],
			[
				-137,
				-45
			],
			[
				-76,
				75
			],
			[
				-91,
				91
			],
			[
				-17,
				17
			],
			[
				61,
				186
			],
			[
				-135,
				-64
			],
			[
				-128,
				12
			],
			[
				-53,
				79
			],
			[
				-9,
				13
			],
			[
				4,
				18
			],
			[
				6,
				33
			],
			[
				2,
				6
			],
			[
				6,
				1
			],
			[
				53,
				0
			],
			[
				63,
				-39
			],
			[
				1,
				2
			],
			[
				18,
				29
			],
			[
				-87,
				91
			],
			[
				21,
				43
			],
			[
				67,
				-21
			],
			[
				89,
				15
			],
			[
				42,
				7
			]
		],
		[
			[
				27645,
				69325
			],
			[
				148,
				1
			],
			[
				-20,
				-29
			],
			[
				-22,
				3
			],
			[
				-28,
				-91
			],
			[
				38,
				-17
			],
			[
				28,
				-57
			],
			[
				0,
				-1
			],
			[
				-8,
				-45
			],
			[
				-78,
				15
			],
			[
				-93,
				-62
			],
			[
				-62,
				23
			],
			[
				-43,
				163
			],
			[
				-11,
				34
			],
			[
				-13,
				45
			],
			[
				-58,
				5
			],
			[
				9,
				-99
			],
			[
				1,
				-11
			],
			[
				-19,
				-128
			],
			[
				-65,
				5
			],
			[
				-16,
				-73
			],
			[
				67,
				-10
			],
			[
				-18,
				-74
			],
			[
				9,
				-60
			],
			[
				-77,
				-61
			],
			[
				-26,
				75
			],
			[
				-187,
				-48
			],
			[
				69,
				106
			],
			[
				-94,
				-24
			],
			[
				-17,
				78
			],
			[
				84,
				39
			],
			[
				-42,
				78
			],
			[
				5,
				9
			],
			[
				23,
				44
			],
			[
				-23,
				4
			],
			[
				-24,
				4
			],
			[
				-61,
				-37
			],
			[
				-31,
				62
			],
			[
				15,
				37
			],
			[
				3,
				8
			],
			[
				-40,
				-14
			],
			[
				-7,
				-3
			],
			[
				-1,
				-6
			],
			[
				-1,
				-9
			],
			[
				-10,
				-56
			],
			[
				-55,
				-10
			],
			[
				-17,
				21
			],
			[
				-12,
				14
			],
			[
				-1,
				2
			],
			[
				-1,
				-2
			],
			[
				-10,
				-28
			],
			[
				-5,
				-59
			],
			[
				93,
				-16
			],
			[
				-4,
				-29
			],
			[
				-45,
				-12
			],
			[
				-13,
				-40
			],
			[
				77,
				-17
			],
			[
				2,
				-86
			],
			[
				-33,
				-50
			],
			[
				-72,
				-6
			],
			[
				-1,
				-66
			],
			[
				-60,
				-16
			],
			[
				5,
				-39
			],
			[
				-97,
				-64
			],
			[
				-50,
				42
			],
			[
				29,
				24
			],
			[
				-102,
				113
			],
			[
				17,
				97
			],
			[
				26,
				22
			],
			[
				27,
				105
			],
			[
				-12,
				56
			],
			[
				67,
				84
			],
			[
				121,
				35
			],
			[
				-2,
				3
			],
			[
				-27,
				53
			],
			[
				24,
				19
			],
			[
				95,
				74
			],
			[
				85,
				67
			],
			[
				37,
				76
			],
			[
				-30,
				12
			],
			[
				-80,
				-59
			],
			[
				-36,
				-56
			],
			[
				-106,
				-86
			],
			[
				-15,
				-12
			],
			[
				-99,
				-47
			],
			[
				-28,
				20
			],
			[
				-24,
				16
			],
			[
				63,
				93
			],
			[
				115,
				14
			],
			[
				44,
				34
			],
			[
				-125,
				7
			],
			[
				-119,
				8
			],
			[
				90,
				58
			],
			[
				70,
				-23
			],
			[
				58,
				82
			],
			[
				-38,
				48
			],
			[
				-115,
				-17
			],
			[
				-19,
				65
			],
			[
				80,
				54
			],
			[
				62,
				55
			],
			[
				156,
				56
			],
			[
				217,
				13
			],
			[
				38,
				33
			],
			[
				-181,
				26
			],
			[
				-39,
				3
			],
			[
				-33,
				26
			],
			[
				-215,
				3
			],
			[
				98,
				112
			],
			[
				76,
				17
			],
			[
				47,
				25
			],
			[
				-60,
				100
			],
			[
				115,
				45
			],
			[
				167,
				135
			],
			[
				89,
				9
			],
			[
				67,
				-60
			],
			[
				48,
				-98
			],
			[
				-11,
				-40
			],
			[
				4,
				-32
			],
			[
				206,
				-121
			],
			[
				38,
				-22
			],
			[
				-64,
				-56
			],
			[
				45,
				-66
			],
			[
				159,
				45
			],
			[
				14,
				43
			],
			[
				-136,
				108
			],
			[
				-102,
				82
			],
			[
				-69,
				-23
			],
			[
				-21,
				35
			],
			[
				15,
				56
			],
			[
				32,
				40
			],
			[
				78,
				-30
			],
			[
				41,
				-57
			],
			[
				114,
				79
			],
			[
				-43,
				57
			],
			[
				86,
				12
			],
			[
				-1,
				45
			],
			[
				54,
				40
			],
			[
				23,
				67
			],
			[
				101,
				-7
			],
			[
				25,
				48
			],
			[
				-20,
				55
			],
			[
				95,
				32
			],
			[
				141,
				-9
			],
			[
				12,
				-86
			],
			[
				76,
				-113
			],
			[
				-3,
				-75
			],
			[
				-34,
				-56
			],
			[
				19,
				-64
			],
			[
				37,
				-8
			],
			[
				-19,
				-44
			],
			[
				-82,
				-6
			],
			[
				-62,
				-42
			],
			[
				-8,
				-5
			],
			[
				-47,
				-10
			],
			[
				-15,
				17
			],
			[
				3,
				9
			],
			[
				6,
				29
			],
			[
				-91,
				120
			],
			[
				-72,
				-12
			],
			[
				-16,
				-29
			],
			[
				-13,
				-24
			],
			[
				50,
				-9
			],
			[
				27,
				-5
			],
			[
				23,
				-30
			],
			[
				11,
				-15
			],
			[
				26,
				-32
			],
			[
				4,
				-7
			],
			[
				13,
				-26
			],
			[
				-21,
				-48
			],
			[
				14,
				-16
			],
			[
				18,
				-19
			],
			[
				46,
				67
			],
			[
				4,
				5
			],
			[
				46,
				12
			],
			[
				26,
				6
			],
			[
				88,
				-63
			],
			[
				80,
				67
			],
			[
				19,
				53
			],
			[
				107,
				70
			],
			[
				113,
				-10
			],
			[
				107,
				-124
			],
			[
				49,
				-57
			],
			[
				-158,
				-118
			],
			[
				24,
				-134
			],
			[
				-42,
				-80
			],
			[
				-35,
				20
			],
			[
				18,
				71
			],
			[
				-30,
				34
			],
			[
				-59,
				-28
			],
			[
				-68,
				-160
			],
			[
				-122,
				-85
			],
			[
				-56,
				75
			],
			[
				-45,
				8
			],
			[
				-27,
				-52
			],
			[
				-29,
				-7
			],
			[
				-16,
				31
			],
			[
				-32,
				-27
			],
			[
				-70,
				-75
			],
			[
				-66,
				3
			],
			[
				-22,
				24
			],
			[
				5,
				110
			],
			[
				-83,
				-23
			],
			[
				-113,
				-31
			],
			[
				39,
				-35
			],
			[
				51,
				-7
			],
			[
				46,
				-7
			],
			[
				-14,
				-43
			],
			[
				-40,
				10
			],
			[
				-48,
				-111
			],
			[
				-167,
				-2
			],
			[
				-4,
				-46
			],
			[
				-1,
				-18
			],
			[
				91,
				1
			]
		],
		[
			[
				27902,
				70565
			],
			[
				-16,
				-28
			],
			[
				-18,
				-11
			],
			[
				-41,
				-18
			],
			[
				-33,
				5
			],
			[
				-25,
				12
			],
			[
				-19,
				15
			],
			[
				0,
				8
			],
			[
				5,
				5
			],
			[
				34,
				11
			],
			[
				20,
				-6
			],
			[
				39,
				3
			],
			[
				15,
				26
			],
			[
				24,
				27
			],
			[
				20,
				-26
			],
			[
				-5,
				-23
			]
		],
		[
			[
				22550,
				64963
			],
			[
				-146,
				-48
			],
			[
				33,
				44
			],
			[
				-43,
				4
			],
			[
				52,
				88
			],
			[
				-9,
				36
			],
			[
				49,
				8
			],
			[
				23,
				-36
			],
			[
				79,
				-21
			],
			[
				-38,
				-75
			]
		],
		[
			[
				22031,
				64630
			],
			[
				-56,
				-140
			],
			[
				-56,
				8
			],
			[
				-36,
				37
			],
			[
				71,
				86
			],
			[
				34,
				26
			],
			[
				43,
				-17
			]
		],
		[
			[
				30687,
				73096
			],
			[
				-33,
				32
			],
			[
				-35,
				-41
			],
			[
				-13,
				-36
			],
			[
				-3,
				-7
			],
			[
				-57,
				-157
			],
			[
				8,
				-117
			],
			[
				-177,
				-23
			],
			[
				-8,
				51
			],
			[
				56,
				80
			],
			[
				-30,
				49
			],
			[
				-45,
				-30
			],
			[
				10,
				134
			],
			[
				-55,
				-53
			],
			[
				-19,
				135
			],
			[
				-43,
				-7
			],
			[
				-9,
				-104
			],
			[
				26,
				-58
			],
			[
				-26,
				-78
			],
			[
				-5,
				-13
			],
			[
				-2,
				-7
			],
			[
				5,
				-48
			],
			[
				-29,
				-73
			],
			[
				-67,
				6
			],
			[
				-52,
				36
			],
			[
				-43,
				-26
			],
			[
				23,
				-46
			],
			[
				80,
				-25
			],
			[
				2,
				-19
			],
			[
				6,
				-54
			],
			[
				-97,
				-113
			],
			[
				-31,
				15
			],
			[
				-17,
				9
			],
			[
				-20,
				-58
			],
			[
				-50,
				6
			],
			[
				7,
				38
			],
			[
				-61,
				-3
			],
			[
				-4,
				-48
			],
			[
				-83,
				-94
			],
			[
				-25,
				44
			],
			[
				-76,
				-49
			],
			[
				-11,
				20
			],
			[
				-30,
				55
			],
			[
				-45,
				-56
			],
			[
				-32,
				9
			],
			[
				29,
				51
			],
			[
				-16,
				24
			],
			[
				-89,
				-65
			],
			[
				44,
				83
			],
			[
				-50,
				2
			],
			[
				-28,
				28
			],
			[
				73,
				54
			],
			[
				7,
				5
			],
			[
				-15,
				32
			],
			[
				-18,
				37
			],
			[
				3,
				112
			],
			[
				85,
				50
			],
			[
				9,
				144
			],
			[
				-68,
				-51
			],
			[
				-52,
				-92
			],
			[
				-98,
				1
			],
			[
				-15,
				67
			],
			[
				89,
				23
			],
			[
				-60,
				38
			],
			[
				-75,
				0
			],
			[
				-15,
				23
			],
			[
				118,
				88
			],
			[
				142,
				-30
			],
			[
				7,
				25
			],
			[
				-94,
				56
			],
			[
				32,
				94
			],
			[
				152,
				79
			],
			[
				138,
				-20
			],
			[
				148,
				39
			],
			[
				-30,
				47
			],
			[
				-114,
				-28
			],
			[
				-32,
				64
			],
			[
				-134,
				-3
			],
			[
				-54,
				33
			],
			[
				25,
				45
			],
			[
				-96,
				-21
			],
			[
				-6,
				72
			],
			[
				37,
				13
			],
			[
				7,
				79
			],
			[
				179,
				33
			],
			[
				107,
				149
			],
			[
				-34,
				58
			],
			[
				66,
				27
			],
			[
				100,
				-138
			],
			[
				-16,
				-350
			],
			[
				54,
				-60
			],
			[
				15,
				-17
			],
			[
				1,
				-67
			],
			[
				85,
				50
			],
			[
				21,
				13
			],
			[
				10,
				44
			],
			[
				-107,
				13
			],
			[
				-32,
				89
			],
			[
				88,
				239
			],
			[
				-61,
				103
			],
			[
				29,
				147
			],
			[
				67,
				43
			],
			[
				180,
				-11
			],
			[
				-6,
				-318
			],
			[
				-66,
				-147
			],
			[
				82,
				-6
			],
			[
				-12,
				-58
			],
			[
				-8,
				-38
			],
			[
				-2,
				-7
			],
			[
				8,
				3
			],
			[
				36,
				15
			],
			[
				45,
				19
			],
			[
				90,
				133
			],
			[
				2,
				4
			]
		],
		[
			[
				30484,
				73535
			],
			[
				0,
				0
			],
			[
				19,
				40
			],
			[
				117,
				14
			],
			[
				41,
				5
			],
			[
				38,
				33
			],
			[
				134,
				33
			],
			[
				8,
				1
			],
			[
				9,
				-7
			],
			[
				38,
				-28
			],
			[
				17,
				-14
			],
			[
				-3,
				-3
			],
			[
				-107,
				-125
			],
			[
				67,
				6
			],
			[
				37,
				-201
			],
			[
				38,
				30
			],
			[
				2,
				29
			],
			[
				14,
				146
			],
			[
				6,
				64
			],
			[
				59,
				42
			],
			[
				3,
				0
			],
			[
				167,
				-51
			],
			[
				-200,
				155
			],
			[
				0,
				0
			],
			[
				0,
				37
			],
			[
				30,
				46
			],
			[
				61,
				-1
			],
			[
				29,
				-1
			],
			[
				42,
				25
			],
			[
				-55,
				22
			],
			[
				-85,
				59
			],
			[
				-93,
				123
			],
			[
				13,
				47
			],
			[
				49,
				16
			],
			[
				145,
				81
			],
			[
				0,
				0
			],
			[
				37,
				-16
			],
			[
				32,
				-13
			],
			[
				-1,
				-21
			],
			[
				-1,
				-26
			],
			[
				44,
				-54
			],
			[
				33,
				-25
			],
			[
				5,
				-287
			],
			[
				59,
				-36
			],
			[
				1,
				3
			],
			[
				2,
				45
			],
			[
				2,
				29
			],
			[
				7,
				110
			],
			[
				3,
				51
			],
			[
				-15,
				183
			],
			[
				120,
				-6
			],
			[
				49,
				-36
			],
			[
				46,
				-64
			],
			[
				39,
				-52
			],
			[
				8,
				-105
			],
			[
				60,
				-33
			],
			[
				7,
				-3
			],
			[
				22,
				-10
			],
			[
				3,
				56
			],
			[
				-18,
				12
			],
			[
				-13,
				10
			],
			[
				0,
				50
			],
			[
				0,
				134
			],
			[
				-15,
				4
			],
			[
				-85,
				23
			],
			[
				-2,
				7
			],
			[
				-6,
				32
			],
			[
				-44,
				36
			],
			[
				-7,
				2
			],
			[
				-93,
				29
			],
			[
				59,
				29
			],
			[
				34,
				130
			],
			[
				-29,
				25
			],
			[
				-111,
				-83
			],
			[
				-36,
				43
			],
			[
				67,
				54
			],
			[
				-54,
				54
			],
			[
				67,
				22
			],
			[
				73,
				-49
			],
			[
				21,
				31
			],
			[
				-146,
				104
			],
			[
				9,
				67
			],
			[
				-70,
				37
			],
			[
				-37,
				0
			],
			[
				-15,
				53
			],
			[
				49,
				22
			],
			[
				-29,
				99
			],
			[
				55,
				168
			],
			[
				-68,
				42
			],
			[
				42,
				48
			],
			[
				125,
				-14
			],
			[
				96,
				79
			],
			[
				13,
				49
			],
			[
				162,
				16
			],
			[
				95,
				-56
			],
			[
				13,
				-61
			],
			[
				-24,
				-144
			],
			[
				39,
				-27
			],
			[
				-60,
				-41
			],
			[
				-26,
				21
			],
			[
				-7,
				-6
			],
			[
				-129,
				-120
			],
			[
				30,
				-37
			],
			[
				35,
				-7
			],
			[
				10,
				-2
			],
			[
				4,
				20
			],
			[
				4,
				23
			],
			[
				23,
				13
			],
			[
				76,
				41
			],
			[
				31,
				-32
			],
			[
				-10,
				-8
			],
			[
				-42,
				-37
			],
			[
				55,
				-67
			],
			[
				54,
				-16
			],
			[
				16,
				-52
			],
			[
				-123,
				18
			],
			[
				17,
				-78
			],
			[
				67,
				19
			],
			[
				52,
				-33
			],
			[
				113,
				-72
			],
			[
				14,
				64
			],
			[
				91,
				-16
			],
			[
				44,
				25
			],
			[
				44,
				-37
			],
			[
				-120,
				-73
			],
			[
				8,
				-46
			],
			[
				1,
				-9
			],
			[
				8,
				1
			],
			[
				42,
				6
			],
			[
				-5,
				-87
			],
			[
				-6,
				-84
			],
			[
				-19,
				-66
			],
			[
				-62,
				-65
			],
			[
				-8,
				-86
			],
			[
				0,
				-2
			],
			[
				-38,
				-72
			],
			[
				-28,
				-54
			],
			[
				34,
				2
			],
			[
				10,
				11
			]
		],
		[
			[
				32003,
				73884
			],
			[
				0,
				0
			],
			[
				50,
				53
			],
			[
				10,
				10
			],
			[
				34,
				104
			],
			[
				29,
				-2
			],
			[
				24,
				23
			],
			[
				44,
				42
			],
			[
				5,
				47
			],
			[
				40,
				29
			],
			[
				44,
				-116
			],
			[
				23,
				12
			],
			[
				0,
				0
			],
			[
				90,
				2
			],
			[
				4,
				-90
			],
			[
				-19,
				-47
			],
			[
				-12,
				-30
			],
			[
				-42,
				-65
			],
			[
				-16,
				-79
			],
			[
				29,
				-2
			],
			[
				12,
				0
			],
			[
				-3,
				-43
			],
			[
				-26,
				-29
			],
			[
				-137,
				-18
			],
			[
				-50,
				24
			],
			[
				-2,
				1
			],
			[
				-108,
				-13
			],
			[
				0,
				-38
			],
			[
				0,
				-11
			],
			[
				74,
				-10
			],
			[
				25,
				-24
			],
			[
				22,
				-20
			],
			[
				23,
				-21
			],
			[
				-45,
				-43
			],
			[
				-3,
				-78
			],
			[
				-78,
				-33
			],
			[
				-34,
				-15
			],
			[
				299,
				-64
			],
			[
				11,
				-3
			],
			[
				119,
				-83
			],
			[
				22,
				-179
			],
			[
				3,
				-21
			],
			[
				11,
				-92
			],
			[
				-146,
				-169
			],
			[
				-106,
				-60
			],
			[
				-21,
				-12
			],
			[
				-122,
				-69
			],
			[
				-89,
				-80
			],
			[
				-119,
				-11
			],
			[
				-48,
				-35
			],
			[
				0,
				0
			]
		],
		[
			[
				31824,
				72526
			],
			[
				-36,
				-27
			],
			[
				-63,
				-68
			],
			[
				-83,
				15
			],
			[
				-50,
				-32
			],
			[
				-114,
				-71
			],
			[
				-28,
				-19
			],
			[
				-16,
				-21
			],
			[
				-65,
				-90
			],
			[
				-58,
				-15
			],
			[
				-82,
				26
			],
			[
				-50,
				15
			],
			[
				-87,
				28
			],
			[
				-1,
				0
			],
			[
				0,
				0
			],
			[
				-141,
				-31
			],
			[
				-121,
				16
			],
			[
				-56,
				8
			],
			[
				-4,
				102
			],
			[
				-1,
				29
			],
			[
				97,
				-21
			],
			[
				7,
				-1
			],
			[
				-4,
				5
			],
			[
				-62,
				99
			],
			[
				-112,
				-9
			],
			[
				-37,
				31
			],
			[
				22,
				73
			],
			[
				-18,
				29
			],
			[
				-78,
				-34
			],
			[
				-8,
				60
			],
			[
				154,
				75
			],
			[
				41,
				19
			],
			[
				15,
				-53
			],
			[
				122,
				41
			],
			[
				17,
				6
			],
			[
				75,
				60
			],
			[
				23,
				19
			],
			[
				28,
				23
			],
			[
				170,
				36
			],
			[
				91,
				11
			],
			[
				35,
				4
			]
		],
		[
			[
				31346,
				72864
			],
			[
				0,
				0
			],
			[
				74,
				9
			],
			[
				-48,
				86
			],
			[
				89,
				78
			],
			[
				0,
				1
			],
			[
				61,
				79
			],
			[
				72,
				-45
			],
			[
				104,
				-66
			],
			[
				32,
				-8
			],
			[
				2,
				1
			],
			[
				31,
				27
			],
			[
				-84,
				35
			],
			[
				-36,
				27
			],
			[
				23,
				22
			],
			[
				11,
				40
			],
			[
				-77,
				96
			],
			[
				30,
				171
			],
			[
				-224,
				19
			],
			[
				-32,
				14
			],
			[
				-93,
				40
			],
			[
				0,
				0
			]
		],
		[
			[
				31281,
				73490
			],
			[
				-2,
				1
			],
			[
				-14,
				-13
			],
			[
				3,
				-2
			]
		],
		[
			[
				31268,
				73476
			],
			[
				0,
				0
			],
			[
				41,
				-34
			],
			[
				56,
				-56
			],
			[
				7,
				-60
			],
			[
				2,
				-1
			],
			[
				107,
				-33
			],
			[
				-30,
				-48
			],
			[
				-77,
				23
			],
			[
				-4,
				1
			],
			[
				-23,
				-58
			],
			[
				-23,
				-55
			],
			[
				-25,
				-51
			],
			[
				-79,
				-71
			],
			[
				-28,
				-16
			],
			[
				-24,
				28
			],
			[
				-38,
				220
			],
			[
				-62,
				35
			],
			[
				0,
				0
			]
		],
		[
			[
				31068,
				73300
			],
			[
				-12,
				7
			],
			[
				-18,
				-20
			]
		],
		[
			[
				31038,
				73287
			],
			[
				0,
				0
			],
			[
				-19,
				-22
			],
			[
				59,
				-31
			],
			[
				23,
				-19
			],
			[
				-16,
				-76
			],
			[
				-53,
				-15
			],
			[
				-35,
				-49
			],
			[
				33,
				-107
			],
			[
				-56,
				-49
			],
			[
				-142,
				-29
			],
			[
				-23,
				125
			],
			[
				-30,
				-14
			],
			[
				-5,
				-113
			],
			[
				-116,
				-102
			],
			[
				-47,
				105
			],
			[
				89,
				192
			],
			[
				-13,
				13
			],
			[
				0,
				0
			]
		],
		[
			[
				31329,
				70560
			],
			[
				0,
				0
			],
			[
				37,
				20
			],
			[
				8,
				22
			],
			[
				47,
				135
			],
			[
				106,
				189
			],
			[
				4,
				7
			],
			[
				19,
				5
			],
			[
				71,
				17
			],
			[
				1,
				0
			],
			[
				0,
				0
			],
			[
				-15,
				12
			],
			[
				-40,
				33
			],
			[
				11,
				13
			],
			[
				211,
				237
			],
			[
				34,
				39
			],
			[
				-14,
				40
			],
			[
				-6,
				15
			],
			[
				16,
				25
			],
			[
				42,
				62
			],
			[
				8,
				13
			],
			[
				5,
				2
			],
			[
				51,
				14
			],
			[
				88,
				-30
			],
			[
				45,
				29
			],
			[
				145,
				-56
			],
			[
				33,
				20
			],
			[
				181,
				3
			],
			[
				-8,
				39
			],
			[
				-4,
				20
			],
			[
				-236,
				-22
			],
			[
				-176,
				63
			],
			[
				-90,
				112
			],
			[
				-35,
				44
			],
			[
				30,
				20
			],
			[
				50,
				-27
			],
			[
				16,
				31
			],
			[
				-34,
				43
			],
			[
				-9,
				11
			],
			[
				74,
				43
			],
			[
				9,
				6
			],
			[
				7,
				-15
			],
			[
				23,
				-45
			],
			[
				5,
				-12
			],
			[
				35,
				-82
			],
			[
				123,
				-21
			],
			[
				96,
				0
			],
			[
				33,
				59
			],
			[
				-60,
				10
			],
			[
				-154,
				-2
			],
			[
				-15,
				48
			],
			[
				-14,
				42
			],
			[
				-30,
				29
			],
			[
				-54,
				53
			],
			[
				-251,
				17
			],
			[
				47,
				75
			],
			[
				53,
				87
			],
			[
				-7,
				125
			],
			[
				160,
				25
			],
			[
				25,
				4
			],
			[
				27,
				-12
			],
			[
				98,
				-43
			],
			[
				55,
				10
			]
		],
		[
			[
				32206,
				72161
			],
			[
				0,
				0
			],
			[
				12,
				2
			],
			[
				-66,
				129
			],
			[
				73,
				34
			],
			[
				54,
				33
			],
			[
				6,
				-3
			],
			[
				60,
				-28
			],
			[
				116,
				158
			],
			[
				4,
				6
			],
			[
				4,
				-2
			],
			[
				30,
				-16
			],
			[
				25,
				-13
			],
			[
				25,
				-73
			],
			[
				99,
				-9
			],
			[
				-13,
				51
			],
			[
				-103,
				80
			],
			[
				-7,
				6
			],
			[
				-8,
				6
			],
			[
				74,
				36
			],
			[
				15,
				-5
			],
			[
				89,
				-34
			],
			[
				85,
				17
			],
			[
				77,
				9
			],
			[
				29,
				28
			],
			[
				43,
				-4
			],
			[
				26,
				-141
			],
			[
				163,
				28
			],
			[
				-10,
				35
			],
			[
				-94,
				6
			],
			[
				-62,
				107
			],
			[
				-100,
				21
			],
			[
				-85,
				18
			],
			[
				-26,
				6
			],
			[
				-64,
				86
			],
			[
				-6,
				6
			],
			[
				-57,
				59
			],
			[
				30,
				32
			],
			[
				13,
				13
			],
			[
				-8,
				17
			],
			[
				-40,
				77
			],
			[
				-65,
				126
			],
			[
				-2,
				9
			],
			[
				-12,
				77
			],
			[
				60,
				73
			],
			[
				187,
				-49
			],
			[
				11,
				-3
			],
			[
				13,
				4
			],
			[
				286,
				93
			],
			[
				16,
				5
			],
			[
				1,
				-4
			],
			[
				58,
				-117
			],
			[
				162,
				-155
			],
			[
				23,
				43
			],
			[
				-170,
				228
			],
			[
				-11,
				14
			],
			[
				24,
				14
			],
			[
				23,
				14
			],
			[
				-112,
				35
			],
			[
				-29,
				-8
			],
			[
				-38,
				-10
			],
			[
				-28,
				-29
			],
			[
				-166,
				-32
			],
			[
				-39,
				-49
			],
			[
				-4,
				7
			],
			[
				-70,
				117
			],
			[
				-4,
				6
			],
			[
				-60,
				26
			],
			[
				-39,
				17
			],
			[
				-11,
				53
			],
			[
				0,
				2
			],
			[
				-8,
				41
			],
			[
				43,
				36
			],
			[
				11,
				9
			],
			[
				31,
				66
			],
			[
				0,
				0
			],
			[
				-74,
				35
			],
			[
				-21,
				183
			],
			[
				38,
				18
			],
			[
				119,
				-13
			],
			[
				19,
				-18
			],
			[
				70,
				-67
			],
			[
				-10,
				79
			],
			[
				-2,
				18
			],
			[
				81,
				51
			],
			[
				206,
				-64
			],
			[
				85,
				-26
			],
			[
				57,
				15
			],
			[
				-15,
				14
			]
		],
		[
			[
				33243,
				73823
			],
			[
				0,
				0
			],
			[
				-55,
				49
			],
			[
				-9,
				7
			],
			[
				11,
				37
			],
			[
				-91,
				18
			],
			[
				-100,
				55
			],
			[
				-38,
				48
			],
			[
				-23,
				14
			],
			[
				-47,
				27
			],
			[
				-3,
				12
			],
			[
				-14,
				49
			],
			[
				35,
				36
			],
			[
				4,
				4
			],
			[
				25,
				106
			],
			[
				8,
				13
			],
			[
				13,
				19
			],
			[
				12,
				-8
			],
			[
				47,
				-31
			],
			[
				18,
				9
			],
			[
				34,
				18
			],
			[
				-9,
				67
			],
			[
				-3,
				16
			],
			[
				7,
				131
			],
			[
				78,
				159
			],
			[
				-60,
				64
			],
			[
				127,
				36
			],
			[
				177,
				49
			],
			[
				8,
				50
			],
			[
				50,
				-5
			],
			[
				-12,
				-63
			],
			[
				9,
				-7
			],
			[
				53,
				-39
			],
			[
				49,
				45
			],
			[
				1,
				2
			],
			[
				1,
				-1
			],
			[
				40,
				-56
			],
			[
				40,
				29
			],
			[
				29,
				20
			],
			[
				91,
				24
			],
			[
				16,
				9
			]
		],
		[
			[
				33762,
				74835
			],
			[
				0,
				0
			],
			[
				32,
				20
			],
			[
				120,
				-2
			],
			[
				46,
				-39
			],
			[
				16,
				-108
			],
			[
				-17,
				-90
			],
			[
				43,
				-174
			],
			[
				103,
				-74
			],
			[
				6,
				-50
			],
			[
				-44,
				-120
			],
			[
				-44,
				-29
			],
			[
				-1,
				-2
			],
			[
				-74,
				-203
			],
			[
				-24,
				-145
			],
			[
				-28,
				-165
			],
			[
				-69,
				-112
			],
			[
				-60,
				-24
			],
			[
				-19,
				-48
			],
			[
				-39,
				-61
			],
			[
				-5,
				-7
			],
			[
				-52,
				-59
			],
			[
				-62,
				-31
			],
			[
				-16,
				-47
			],
			[
				141,
				46
			],
			[
				42,
				30
			],
			[
				3,
				47
			],
			[
				88,
				53
			],
			[
				62,
				66
			],
			[
				93,
				15
			],
			[
				23,
				27
			],
			[
				43,
				53
			],
			[
				6,
				37
			],
			[
				22,
				51
			],
			[
				64,
				-33
			],
			[
				8,
				-4
			],
			[
				37,
				11
			],
			[
				7,
				2
			],
			[
				2,
				-14
			],
			[
				19,
				-133
			],
			[
				1,
				-130
			]
		],
		[
			[
				34577,
				71922
			],
			[
				0,
				0
			],
			[
				-2,
				-48
			],
			[
				-29,
				-53
			],
			[
				34,
				-13
			],
			[
				41,
				-15
			],
			[
				-14,
				-60
			],
			[
				-57,
				13
			],
			[
				-8,
				1
			],
			[
				-4,
				-21
			],
			[
				-22,
				-115
			],
			[
				-8,
				-41
			],
			[
				-7,
				-18
			],
			[
				-35,
				-86
			],
			[
				-1,
				-3
			],
			[
				-5,
				0
			],
			[
				-45,
				-5
			],
			[
				-51,
				-38
			],
			[
				0,
				0
			],
			[
				-104,
				-114
			],
			[
				5,
				-109
			],
			[
				-65,
				-79
			],
			[
				-1,
				-1
			],
			[
				30,
				-29
			],
			[
				3,
				-40
			],
			[
				-54,
				-26
			],
			[
				-302,
				-171
			],
			[
				-52,
				16
			],
			[
				54,
				272
			],
			[
				26,
				35
			],
			[
				-34,
				52
			],
			[
				5,
				37
			],
			[
				37,
				31
			],
			[
				2,
				2
			],
			[
				4,
				42
			],
			[
				5,
				48
			],
			[
				3,
				26
			],
			[
				-20,
				31
			],
			[
				-14,
				23
			],
			[
				-9,
				235
			],
			[
				-34,
				34
			],
			[
				-18,
				19
			],
			[
				-7,
				-19
			],
			[
				-17,
				-48
			],
			[
				39,
				-280
			],
			[
				2,
				-13
			],
			[
				-5,
				-97
			],
			[
				-3,
				-6
			],
			[
				-13,
				-21
			],
			[
				-35,
				-59
			],
			[
				-30,
				18
			],
			[
				-3,
				2
			],
			[
				-91,
				54
			],
			[
				-28,
				86
			],
			[
				-80,
				37
			],
			[
				76,
				-177
			],
			[
				81,
				-38
			],
			[
				20,
				-9
			],
			[
				14,
				-6
			],
			[
				-26,
				-46
			],
			[
				16,
				-103
			],
			[
				-114,
				-26
			],
			[
				-55,
				60
			],
			[
				-3,
				3
			],
			[
				9,
				162
			],
			[
				-20,
				-2
			],
			[
				-22,
				-2
			],
			[
				-11,
				-43
			],
			[
				-22,
				-90
			],
			[
				-38,
				-31
			],
			[
				-18,
				-51
			],
			[
				25,
				-47
			],
			[
				37,
				-11
			],
			[
				-11,
				-78
			],
			[
				-111,
				-1
			],
			[
				0,
				-3
			],
			[
				-7,
				-31
			],
			[
				-31,
				-24
			],
			[
				-22,
				21
			],
			[
				-5,
				4
			],
			[
				-35,
				0
			],
			[
				-70,
				1
			],
			[
				-3,
				-40
			],
			[
				78,
				-21
			],
			[
				17,
				-5
			],
			[
				35,
				3
			],
			[
				60,
				4
			],
			[
				-19,
				-40
			],
			[
				-2,
				-3
			],
			[
				-8,
				-31
			],
			[
				-5,
				-22
			],
			[
				14,
				-51
			],
			[
				-40,
				-14
			],
			[
				-30,
				-10
			],
			[
				-1,
				-10
			],
			[
				-3,
				-59
			],
			[
				-114,
				-17
			],
			[
				-28,
				-4
			],
			[
				10,
				-24
			],
			[
				48,
				-108
			],
			[
				-103,
				-41
			],
			[
				-152,
				17
			],
			[
				-42,
				25
			],
			[
				-18,
				11
			],
			[
				38,
				59
			],
			[
				61,
				11
			],
			[
				-7,
				53
			],
			[
				-146,
				7
			],
			[
				-99,
				4
			],
			[
				-6,
				74
			],
			[
				-5,
				64
			],
			[
				-78,
				-1
			],
			[
				-26,
				-85
			],
			[
				-62,
				14
			],
			[
				-69,
				30
			],
			[
				-46,
				20
			],
			[
				-3,
				11
			],
			[
				-9,
				31
			],
			[
				-52,
				-7
			],
			[
				-20,
				-57
			],
			[
				-1,
				-2
			],
			[
				-18,
				-10
			],
			[
				-42,
				-24
			],
			[
				-98,
				39
			],
			[
				-29,
				116
			],
			[
				52,
				12
			],
			[
				58,
				-43
			],
			[
				1,
				104
			],
			[
				155,
				206
			],
			[
				89,
				12
			],
			[
				188,
				191
			],
			[
				-17,
				44
			],
			[
				120,
				156
			],
			[
				46,
				59
			],
			[
				74,
				68
			],
			[
				6,
				4
			],
			[
				80,
				30
			],
			[
				16,
				6
			],
			[
				-10,
				9
			],
			[
				-5,
				5
			],
			[
				-58,
				54
			],
			[
				0,
				28
			],
			[
				1,
				35
			],
			[
				0,
				4
			],
			[
				-17,
				13
			],
			[
				-15,
				11
			],
			[
				-93,
				69
			],
			[
				-44,
				-12
			],
			[
				-8,
				-31
			],
			[
				25,
				-28
			],
			[
				20,
				-9
			],
			[
				55,
				-23
			],
			[
				28,
				-20
			],
			[
				0,
				-2
			],
			[
				-3,
				-25
			],
			[
				-19,
				-40
			],
			[
				-12,
				-24
			],
			[
				-110,
				-146
			],
			[
				-62,
				-13
			],
			[
				-8,
				-2
			],
			[
				-8,
				-20
			],
			[
				18,
				-26
			],
			[
				4,
				-5
			],
			[
				-1,
				-2
			],
			[
				-8,
				-10
			],
			[
				-10,
				-13
			],
			[
				-29,
				-37
			],
			[
				-6,
				1
			],
			[
				-24,
				6
			],
			[
				-50,
				-81
			],
			[
				-11,
				-19
			],
			[
				-76,
				-61
			],
			[
				-108,
				-86
			],
			[
				-13,
				-10
			],
			[
				-9,
				24
			],
			[
				-28,
				76
			],
			[
				-43,
				-2
			],
			[
				6,
				-109
			],
			[
				1,
				-15
			],
			[
				-34,
				-40
			],
			[
				-33,
				-37
			],
			[
				-12,
				-14
			],
			[
				-33,
				3
			],
			[
				-34,
				4
			],
			[
				-47,
				-51
			],
			[
				-142,
				-155
			],
			[
				-4,
				0
			],
			[
				-222,
				38
			],
			[
				-10,
				-69
			],
			[
				160,
				11
			],
			[
				49,
				-44
			],
			[
				9,
				-8
			],
			[
				-9,
				-17
			],
			[
				-5,
				-9
			],
			[
				0,
				0
			]
		],
		[
			[
				29930,
				70852
			],
			[
				0,
				0
			],
			[
				21,
				8
			],
			[
				3,
				1
			],
			[
				19,
				7
			],
			[
				0,
				55
			],
			[
				-32,
				27
			],
			[
				-39,
				34
			],
			[
				-13,
				65
			],
			[
				-88,
				41
			],
			[
				67,
				56
			],
			[
				130,
				41
			],
			[
				32,
				31
			],
			[
				139,
				23
			],
			[
				76,
				-49
			],
			[
				36,
				-117
			],
			[
				-27,
				-35
			],
			[
				-18,
				-23
			],
			[
				74,
				-99
			],
			[
				30,
				6
			],
			[
				10,
				9
			],
			[
				19,
				16
			],
			[
				-23,
				49
			],
			[
				0,
				0
			],
			[
				-19,
				132
			],
			[
				-3,
				26
			],
			[
				7,
				29
			],
			[
				1,
				3
			],
			[
				13,
				54
			],
			[
				110,
				25
			],
			[
				133,
				-36
			],
			[
				108,
				-30
			],
			[
				24,
				-7
			],
			[
				13,
				-42
			],
			[
				17,
				-55
			],
			[
				-58,
				-147
			],
			[
				-73,
				-67
			],
			[
				-8,
				-37
			],
			[
				55,
				-13
			],
			[
				11,
				9
			],
			[
				138,
				117
			],
			[
				78,
				-46
			],
			[
				4,
				50
			],
			[
				-66,
				128
			],
			[
				0,
				36
			],
			[
				41,
				70
			],
			[
				10,
				16
			],
			[
				7,
				37
			],
			[
				-7,
				45
			],
			[
				0,
				6
			],
			[
				-15,
				101
			],
			[
				66,
				0
			],
			[
				3,
				-91
			],
			[
				206,
				-6
			],
			[
				43,
				-71
			],
			[
				26,
				3
			],
			[
				17,
				1
			],
			[
				2,
				1
			],
			[
				-23,
				106
			],
			[
				94,
				21
			],
			[
				15,
				-43
			],
			[
				21,
				-6
			],
			[
				23,
				24
			],
			[
				14,
				49
			],
			[
				8,
				24
			],
			[
				94,
				0
			],
			[
				31,
				0
			],
			[
				88,
				19
			],
			[
				88,
				1
			],
			[
				10,
				46
			],
			[
				96,
				11
			],
			[
				-2,
				-22
			],
			[
				-4,
				-52
			],
			[
				-2,
				-28
			],
			[
				-4,
				-8
			],
			[
				-67,
				-108
			],
			[
				-22,
				-22
			],
			[
				-58,
				-60
			],
			[
				-21,
				-73
			],
			[
				-69,
				-73
			],
			[
				-69,
				-72
			],
			[
				-15,
				-73
			],
			[
				-85,
				-98
			],
			[
				-73,
				-33
			],
			[
				-68,
				106
			],
			[
				-15,
				-106
			],
			[
				-195,
				-42
			],
			[
				167,
				0
			],
			[
				-72,
				-142
			],
			[
				-124,
				-99
			],
			[
				0,
				0
			]
		],
		[
			[
				31017,
				71750
			],
			[
				-16,
				-18
			],
			[
				-68,
				-58
			],
			[
				-57,
				-25
			],
			[
				-46,
				22
			],
			[
				-80,
				-4
			],
			[
				-132,
				4
			],
			[
				-1,
				0
			],
			[
				-119,
				-7
			],
			[
				-45,
				36
			],
			[
				-22,
				-79
			],
			[
				-88,
				61
			],
			[
				47,
				59
			],
			[
				-6,
				8
			],
			[
				-50,
				57
			],
			[
				-5,
				6
			],
			[
				-4,
				4
			],
			[
				-41,
				27
			],
			[
				-40,
				-5
			],
			[
				-31,
				100
			],
			[
				-60,
				11
			],
			[
				-36,
				69
			],
			[
				-68,
				-3
			],
			[
				-3,
				93
			],
			[
				75,
				76
			],
			[
				105,
				69
			],
			[
				13,
				3
			],
			[
				73,
				11
			],
			[
				20,
				-57
			],
			[
				114,
				-18
			],
			[
				151,
				5
			],
			[
				81,
				-24
			],
			[
				20,
				-31
			],
			[
				73,
				-13
			],
			[
				-2,
				18
			],
			[
				40,
				26
			],
			[
				7,
				5
			],
			[
				71,
				-40
			],
			[
				66,
				2
			],
			[
				5,
				-21
			],
			[
				5,
				-21
			],
			[
				5,
				-22
			],
			[
				149,
				-16
			],
			[
				75,
				7
			],
			[
				20,
				-24
			],
			[
				15,
				-18
			],
			[
				-2,
				-18
			],
			[
				-3,
				-25
			],
			[
				-7,
				-59
			],
			[
				-23,
				-40
			],
			[
				-95,
				-38
			],
			[
				-80,
				-95
			]
		],
		[
			[
				31824,
				71527
			],
			[
				-188,
				-23
			],
			[
				-13,
				8
			],
			[
				-11,
				20
			],
			[
				-2,
				30
			],
			[
				24,
				22
			],
			[
				60,
				21
			],
			[
				60,
				9
			],
			[
				53,
				-23
			],
			[
				25,
				-38
			],
			[
				-8,
				-26
			]
		],
		[
			[
				32032,
				70348
			],
			[
				-51,
				-31
			],
			[
				0,
				12
			],
			[
				12,
				41
			],
			[
				21,
				43
			],
			[
				22,
				31
			],
			[
				72,
				52
			],
			[
				77,
				-14
			],
			[
				13,
				-33
			],
			[
				-8,
				-29
			],
			[
				-26,
				-11
			],
			[
				-35,
				-5
			],
			[
				-41,
				-9
			],
			[
				-30,
				-22
			],
			[
				-26,
				-25
			]
		],
		[
			[
				33809,
				76497
			],
			[
				-12,
				70
			],
			[
				-38,
				25
			],
			[
				72,
				39
			],
			[
				-2,
				50
			],
			[
				-76,
				21
			],
			[
				54,
				43
			],
			[
				-16,
				64
			],
			[
				66,
				-25
			],
			[
				45,
				76
			],
			[
				160,
				73
			],
			[
				3,
				0
			],
			[
				57,
				10
			],
			[
				32,
				59
			],
			[
				57,
				54
			],
			[
				-4,
				48
			],
			[
				81,
				-24
			],
			[
				127,
				54
			],
			[
				52,
				62
			],
			[
				79,
				6
			],
			[
				41,
				78
			],
			[
				42,
				-7
			],
			[
				16,
				-3
			],
			[
				-17,
				-78
			],
			[
				14,
				-50
			],
			[
				62,
				-50
			],
			[
				62,
				-84
			],
			[
				-1,
				-12
			],
			[
				-11,
				-150
			],
			[
				-83,
				-73
			],
			[
				-75,
				-43
			],
			[
				-30,
				-144
			],
			[
				-40,
				-53
			],
			[
				7,
				-43
			],
			[
				28,
				-16
			],
			[
				-20,
				-58
			],
			[
				-8,
				-25
			],
			[
				-43,
				-48
			],
			[
				22,
				-75
			],
			[
				37,
				-12
			],
			[
				-64,
				-156
			],
			[
				-1,
				-1
			],
			[
				-93,
				-97
			],
			[
				-110,
				-49
			],
			[
				-22,
				-9
			],
			[
				-19,
				-31
			],
			[
				-24,
				-39
			],
			[
				-75,
				-56
			],
			[
				-41,
				-95
			],
			[
				-4,
				-11
			],
			[
				-6,
				-14
			],
			[
				-93,
				-54
			],
			[
				-35,
				-96
			],
			[
				-45,
				-122
			],
			[
				-54,
				-29
			],
			[
				-72,
				-85
			],
			[
				63,
				-25
			],
			[
				-6,
				-41
			],
			[
				-70,
				-2
			],
			[
				-89,
				-86
			],
			[
				-110,
				-6
			],
			[
				-31,
				-2
			],
			[
				-39,
				-53
			],
			[
				-6,
				-9
			],
			[
				-16,
				-9
			],
			[
				-18,
				-10
			],
			[
				-208,
				-114
			],
			[
				-71,
				7
			],
			[
				-35,
				-108
			],
			[
				-32,
				-13
			],
			[
				-12,
				-5
			],
			[
				-32,
				45
			],
			[
				28,
				111
			],
			[
				4,
				29
			],
			[
				2,
				7
			],
			[
				-83,
				53
			],
			[
				-7,
				1
			],
			[
				-1,
				0
			],
			[
				-106,
				18
			],
			[
				-60,
				25
			],
			[
				-21,
				-34
			],
			[
				67,
				-70
			],
			[
				88,
				-21
			],
			[
				41,
				-57
			],
			[
				-11,
				-52
			],
			[
				-77,
				-344
			],
			[
				-93,
				-162
			],
			[
				-170,
				-188
			],
			[
				-137,
				77
			],
			[
				-69,
				123
			],
			[
				30,
				53
			],
			[
				51,
				88
			],
			[
				-12,
				151
			],
			[
				-7,
				74
			],
			[
				1,
				19
			],
			[
				1,
				97
			],
			[
				-44,
				29
			],
			[
				61,
				120
			],
			[
				34,
				4
			],
			[
				34,
				67
			],
			[
				-28,
				48
			],
			[
				0,
				43
			],
			[
				53,
				42
			],
			[
				31,
				-1
			],
			[
				26,
				-1
			],
			[
				50,
				75
			],
			[
				-17,
				61
			],
			[
				57,
				64
			],
			[
				34,
				103
			],
			[
				81,
				76
			],
			[
				2,
				2
			],
			[
				-1,
				1
			],
			[
				-49,
				65
			],
			[
				64,
				105
			],
			[
				85,
				28
			],
			[
				54,
				45
			],
			[
				-41,
				21
			],
			[
				88,
				68
			],
			[
				23,
				18
			],
			[
				57,
				-3
			],
			[
				43,
				-2
			],
			[
				0,
				53
			],
			[
				111,
				5
			],
			[
				7,
				0
			],
			[
				35,
				38
			],
			[
				25,
				27
			],
			[
				9,
				-7
			],
			[
				44,
				-37
			],
			[
				55,
				40
			],
			[
				154,
				113
			],
			[
				6,
				198
			],
			[
				50,
				16
			],
			[
				55,
				18
			],
			[
				29,
				39
			],
			[
				-6,
				37
			]
		],
		[
			[
				30546,
				73840
			],
			[
				-69,
				-51
			],
			[
				-67,
				28
			],
			[
				2,
				43
			],
			[
				37,
				32
			],
			[
				50,
				87
			],
			[
				-54,
				38
			],
			[
				85,
				64
			],
			[
				54,
				-74
			],
			[
				-10,
				-36
			],
			[
				-38,
				-36
			],
			[
				10,
				-95
			]
		],
		[
			[
				30511,
				73630
			],
			[
				-138,
				-39
			],
			[
				79,
				130
			],
			[
				113,
				75
			],
			[
				57,
				-101
			],
			[
				-111,
				-65
			]
		],
		[
			[
				30768,
				73740
			],
			[
				-74,
				-32
			],
			[
				-36,
				16
			],
			[
				12,
				76
			],
			[
				-85,
				32
			],
			[
				15,
				107
			],
			[
				81,
				9
			],
			[
				60,
				6
			],
			[
				19,
				-5
			],
			[
				-15,
				-126
			],
			[
				41,
				-11
			],
			[
				-18,
				-72
			]
		],
		[
			[
				30984,
				74551
			],
			[
				72,
				-2
			],
			[
				36,
				41
			],
			[
				49,
				-8
			],
			[
				19,
				-89
			],
			[
				62,
				-90
			],
			[
				5,
				-83
			],
			[
				-49,
				-68
			],
			[
				-70,
				-40
			],
			[
				-103,
				13
			],
			[
				-124,
				-25
			],
			[
				-37,
				47
			],
			[
				5,
				30
			],
			[
				-67,
				13
			],
			[
				-36,
				-18
			],
			[
				-31,
				18
			],
			[
				46,
				121
			],
			[
				54,
				68
			],
			[
				-33,
				20
			],
			[
				-35,
				47
			],
			[
				71,
				18
			],
			[
				-11,
				56
			],
			[
				93,
				20
			],
			[
				84,
				-89
			]
		],
		[
			[
				32107,
				74795
			],
			[
				13,
				-81
			],
			[
				-25,
				-26
			],
			[
				-46,
				-48
			],
			[
				8,
				-34
			],
			[
				-58,
				-4
			],
			[
				-8,
				6
			],
			[
				-117,
				91
			],
			[
				40,
				63
			],
			[
				42,
				-43
			],
			[
				39,
				89
			],
			[
				112,
				-13
			]
		],
		[
			[
				38392,
				74526
			],
			[
				87,
				-141
			],
			[
				56,
				-62
			],
			[
				94,
				-27
			],
			[
				16,
				-5
			],
			[
				66,
				-66
			],
			[
				-87,
				-143
			],
			[
				-111,
				-55
			],
			[
				-283,
				-224
			],
			[
				-186,
				-115
			],
			[
				-108,
				-4
			],
			[
				-41,
				-1
			],
			[
				-4,
				4
			],
			[
				-88,
				75
			],
			[
				-9,
				31
			],
			[
				-5,
				15
			],
			[
				-22,
				72
			],
			[
				27,
				37
			],
			[
				12,
				15
			],
			[
				-10,
				20
			],
			[
				-113,
				225
			],
			[
				-93,
				183
			],
			[
				-46,
				82
			],
			[
				48,
				30
			],
			[
				9,
				96
			],
			[
				178,
				-61
			],
			[
				-1,
				-20
			],
			[
				-5,
				-71
			],
			[
				77,
				-110
			],
			[
				111,
				-116
			],
			[
				156,
				-85
			],
			[
				27,
				49
			],
			[
				-204,
				135
			],
			[
				-116,
				190
			],
			[
				2,
				2
			],
			[
				46,
				77
			],
			[
				102,
				38
			],
			[
				244,
				-44
			],
			[
				144,
				-10
			],
			[
				21,
				-1
			],
			[
				9,
				-15
			]
		],
		[
			[
				36975,
				73548
			],
			[
				27,
				-5
			],
			[
				10,
				104
			],
			[
				2,
				17
			],
			[
				27,
				63
			],
			[
				61,
				136
			],
			[
				74,
				112
			],
			[
				20,
				31
			],
			[
				57,
				69
			],
			[
				75,
				93
			],
			[
				23,
				-12
			],
			[
				41,
				-21
			],
			[
				1,
				-28
			],
			[
				0,
				-2
			],
			[
				2,
				-22
			],
			[
				-13,
				-53
			],
			[
				81,
				-50
			],
			[
				33,
				-61
			],
			[
				-1,
				-90
			],
			[
				101,
				-110
			],
			[
				102,
				-77
			],
			[
				85,
				13
			],
			[
				12,
				-77
			],
			[
				6,
				-44
			],
			[
				-45,
				-84
			],
			[
				-67,
				-23
			],
			[
				-33,
				-49
			],
			[
				-42,
				-9
			],
			[
				-163,
				-34
			],
			[
				-236,
				-16
			],
			[
				-294,
				-114
			],
			[
				-65,
				0
			],
			[
				-63,
				-1
			],
			[
				-1,
				0
			],
			[
				-33,
				-4
			],
			[
				-30,
				14
			],
			[
				-6,
				21
			],
			[
				49,
				36
			],
			[
				2,
				1
			],
			[
				42,
				98
			],
			[
				3,
				8
			],
			[
				13,
				133
			],
			[
				103,
				45
			],
			[
				40,
				-8
			]
		],
		[
			[
				35983,
				71938
			],
			[
				0,
				0
			],
			[
				9,
				-12
			],
			[
				97,
				-38
			],
			[
				41,
				24
			],
			[
				-3,
				138
			],
			[
				66,
				16
			],
			[
				12,
				53
			],
			[
				-27,
				28
			],
			[
				-18,
				-22
			],
			[
				-6,
				-5
			],
			[
				-13,
				-13
			],
			[
				-33,
				-5
			],
			[
				-183,
				130
			],
			[
				18,
				121
			],
			[
				11,
				70
			],
			[
				3,
				18
			],
			[
				52,
				94
			],
			[
				2,
				3
			],
			[
				3,
				6
			],
			[
				72,
				97
			],
			[
				219,
				66
			],
			[
				13,
				-5
			],
			[
				74,
				-25
			],
			[
				12,
				-5
			],
			[
				4,
				13
			],
			[
				-8,
				92
			],
			[
				-2,
				18
			],
			[
				20,
				26
			],
			[
				4,
				5
			],
			[
				59,
				26
			],
			[
				63,
				28
			],
			[
				104,
				45
			],
			[
				140,
				17
			],
			[
				1,
				-1
			],
			[
				42,
				-22
			],
			[
				63,
				-32
			],
			[
				55,
				28
			],
			[
				49,
				53
			],
			[
				21,
				22
			],
			[
				109,
				126
			],
			[
				2,
				3
			],
			[
				63,
				4
			],
			[
				84,
				6
			],
			[
				63,
				5
			],
			[
				34,
				2
			],
			[
				5,
				-9
			],
			[
				17,
				-38
			],
			[
				-5,
				-22
			],
			[
				-15,
				-69
			],
			[
				104,
				-140
			],
			[
				86,
				-30
			],
			[
				19,
				-7
			],
			[
				50,
				-125
			],
			[
				18,
				-44
			],
			[
				26,
				-2
			],
			[
				93,
				-6
			],
			[
				45,
				31
			],
			[
				2,
				1
			],
			[
				55,
				63
			],
			[
				6,
				6
			],
			[
				-161,
				66
			],
			[
				-101,
				40
			],
			[
				-8,
				4
			],
			[
				-58,
				84
			],
			[
				26,
				133
			],
			[
				29,
				41
			],
			[
				10,
				16
			],
			[
				197,
				41
			],
			[
				1,
				1
			]
		],
		[
			[
				37815,
				73171
			],
			[
				0,
				0
			],
			[
				89,
				39
			],
			[
				74,
				32
			],
			[
				55,
				25
			],
			[
				95,
				3
			],
			[
				26,
				-63
			],
			[
				77,
				9
			],
			[
				47,
				-35
			],
			[
				176,
				46
			],
			[
				55,
				-49
			],
			[
				44,
				-84
			],
			[
				2,
				-53
			],
			[
				-25,
				-44
			],
			[
				42,
				-78
			],
			[
				80,
				-18
			],
			[
				92,
				-21
			],
			[
				110,
				-1
			],
			[
				54,
				40
			],
			[
				7,
				5
			],
			[
				99,
				3
			],
			[
				244,
				-105
			],
			[
				53,
				35
			],
			[
				-71,
				64
			],
			[
				-94,
				35
			],
			[
				-78,
				27
			],
			[
				-83,
				14
			],
			[
				-59,
				-2
			],
			[
				-44,
				-32
			],
			[
				-4,
				-2
			],
			[
				-178,
				66
			],
			[
				-38,
				79
			],
			[
				-3,
				6
			],
			[
				5,
				29
			],
			[
				10,
				60
			],
			[
				-7,
				14
			],
			[
				-21,
				46
			],
			[
				-95,
				57
			],
			[
				-124,
				31
			],
			[
				-69,
				-50
			],
			[
				-140,
				-22
			],
			[
				-28,
				52
			],
			[
				-176,
				73
			],
			[
				20,
				109
			],
			[
				157,
				56
			],
			[
				236,
				156
			],
			[
				92,
				94
			],
			[
				117,
				20
			]
		],
		[
			[
				38636,
				73837
			],
			[
				0,
				0
			],
			[
				25,
				4
			],
			[
				37,
				-14
			],
			[
				82,
				-33
			],
			[
				226,
				-148
			],
			[
				188,
				-72
			],
			[
				90,
				6
			],
			[
				149,
				-23
			],
			[
				68,
				-30
			],
			[
				142,
				-174
			],
			[
				32,
				5
			],
			[
				-8,
				54
			],
			[
				-16,
				119
			],
			[
				-81,
				105
			],
			[
				-106,
				28
			],
			[
				-237,
				8
			],
			[
				-72,
				34
			],
			[
				-87,
				48
			],
			[
				0,
				0
			]
		],
		[
			[
				39068,
				73754
			],
			[
				-212,
				119
			],
			[
				-154,
				38
			],
			[
				-21,
				6
			],
			[
				4,
				42
			],
			[
				20,
				17
			],
			[
				414,
				353
			],
			[
				147,
				31
			],
			[
				70,
				-16
			],
			[
				20,
				51
			],
			[
				65,
				-11
			],
			[
				25,
				-55
			],
			[
				-31,
				-46
			],
			[
				-92,
				-29
			],
			[
				124,
				-60
			],
			[
				42,
				9
			],
			[
				158,
				-39
			],
			[
				37,
				-31
			],
			[
				134,
				18
			],
			[
				-1,
				12
			],
			[
				-2,
				28
			],
			[
				-53,
				23
			],
			[
				-43,
				64
			],
			[
				-125,
				142
			],
			[
				-97,
				37
			],
			[
				-40,
				16
			],
			[
				-35,
				-30
			],
			[
				-1,
				-1
			],
			[
				0,
				1
			],
			[
				-45,
				17
			],
			[
				0,
				54
			],
			[
				48,
				27
			],
			[
				-2,
				29
			],
			[
				-1,
				27
			],
			[
				-1,
				12
			],
			[
				-62,
				9
			],
			[
				-51,
				-13
			],
			[
				-70,
				-19
			],
			[
				-34,
				-21
			],
			[
				-39,
				-26
			],
			[
				-173,
				-48
			],
			[
				-145,
				-40
			],
			[
				-108,
				-55
			],
			[
				-13,
				-7
			],
			[
				-79,
				-41
			],
			[
				-11,
				-6
			],
			[
				-33,
				88
			],
			[
				0,
				0
			]
		],
		[
			[
				34235,
				73389
			],
			[
				0,
				0
			],
			[
				0,
				-114
			],
			[
				-37,
				-178
			],
			[
				-136,
				-188
			],
			[
				-82,
				-54
			],
			[
				-20,
				-23
			],
			[
				-33,
				-38
			],
			[
				-22,
				-24
			],
			[
				-18,
				-21
			],
			[
				30,
				-32
			],
			[
				2,
				-2
			],
			[
				-1,
				-1
			],
			[
				-9,
				-7
			],
			[
				-24,
				-21
			],
			[
				-73,
				8
			],
			[
				-66,
				-15
			],
			[
				-128,
				-63
			],
			[
				-55,
				-47
			],
			[
				-21,
				-55
			],
			[
				-2,
				-6
			],
			[
				13,
				-86
			],
			[
				44,
				-71
			],
			[
				1,
				-3
			],
			[
				1,
				-4
			],
			[
				4,
				-27
			],
			[
				32,
				-210
			],
			[
				-11,
				-4
			],
			[
				-78,
				-31
			],
			[
				-68,
				12
			],
			[
				1,
				-27
			],
			[
				3,
				-40
			],
			[
				-75,
				-85
			],
			[
				-10,
				-12
			],
			[
				57,
				-39
			],
			[
				122,
				153
			],
			[
				52,
				17
			],
			[
				49,
				15
			],
			[
				17,
				21
			],
			[
				22,
				26
			],
			[
				-11,
				63
			],
			[
				-24,
				142
			],
			[
				26,
				31
			],
			[
				-21,
				43
			],
			[
				-38,
				76
			],
			[
				108,
				46
			],
			[
				67,
				68
			],
			[
				54,
				0
			],
			[
				68,
				-1
			],
			[
				-43,
				45
			],
			[
				82,
				35
			],
			[
				160,
				123
			],
			[
				78,
				72
			],
			[
				173,
				-36
			],
			[
				19,
				-83
			],
			[
				3,
				-91
			],
			[
				-31,
				-37
			],
			[
				40,
				-19
			],
			[
				58,
				6
			],
			[
				26,
				47
			],
			[
				-4,
				47
			],
			[
				-35,
				33
			],
			[
				7,
				71
			],
			[
				3,
				30
			],
			[
				-96,
				62
			],
			[
				-56,
				2
			],
			[
				-22,
				31
			],
			[
				1,
				34
			],
			[
				76,
				83
			],
			[
				17,
				149
			],
			[
				-18,
				39
			],
			[
				9,
				58
			],
			[
				53,
				63
			],
			[
				37,
				11
			],
			[
				216,
				-88
			],
			[
				100,
				-14
			],
			[
				52,
				19
			],
			[
				116,
				3
			],
			[
				14,
				-22
			],
			[
				48,
				-72
			],
			[
				31,
				-10
			],
			[
				60,
				-78
			],
			[
				22,
				43
			],
			[
				-67,
				109
			],
			[
				-20,
				34
			],
			[
				-91,
				149
			],
			[
				-104,
				46
			],
			[
				-136,
				29
			],
			[
				-114,
				102
			],
			[
				-63,
				93
			],
			[
				-52,
				122
			],
			[
				-6,
				39
			],
			[
				21,
				24
			],
			[
				27,
				1
			],
			[
				22,
				1
			],
			[
				28,
				68
			],
			[
				24,
				56
			],
			[
				3,
				8
			],
			[
				41,
				3
			],
			[
				58,
				5
			],
			[
				11,
				13
			],
			[
				41,
				50
			],
			[
				54,
				65
			],
			[
				1,
				1
			],
			[
				23,
				-3
			],
			[
				121,
				-15
			]
		],
		[
			[
				34963,
				74137
			],
			[
				0,
				0
			],
			[
				61,
				-8
			],
			[
				31,
				-29
			],
			[
				25,
				-23
			],
			[
				4,
				-41
			],
			[
				5,
				-47
			],
			[
				44,
				-44
			],
			[
				70,
				-36
			],
			[
				44,
				15
			],
			[
				20,
				7
			],
			[
				-102,
				264
			],
			[
				-18,
				46
			],
			[
				-79,
				43
			],
			[
				-80,
				43
			],
			[
				-13,
				79
			],
			[
				22,
				84
			],
			[
				9,
				35
			],
			[
				55,
				-3
			],
			[
				-9,
				-43
			],
			[
				102,
				-166
			],
			[
				128,
				-58
			],
			[
				183,
				-147
			],
			[
				103,
				-47
			],
			[
				3,
				2
			],
			[
				43,
				27
			],
			[
				13,
				8
			],
			[
				24,
				14
			],
			[
				2,
				2
			],
			[
				53,
				-33
			],
			[
				10,
				-6
			],
			[
				0,
				0
			],
			[
				0,
				-1
			],
			[
				22,
				-82
			],
			[
				-6,
				-27
			],
			[
				-22,
				-101
			],
			[
				69,
				-18
			],
			[
				45,
				-12
			],
			[
				113,
				136
			],
			[
				91,
				-2
			],
			[
				-3,
				-77
			],
			[
				-70,
				-19
			],
			[
				-68,
				-78
			],
			[
				-10,
				-64
			],
			[
				-11,
				-74
			],
			[
				-8,
				-53
			],
			[
				44,
				-6
			],
			[
				16,
				86
			],
			[
				47,
				15
			],
			[
				88,
				-11
			],
			[
				-31,
				-144
			],
			[
				-37,
				-29
			],
			[
				-49,
				17
			],
			[
				-15,
				-76
			],
			[
				50,
				-47
			],
			[
				-46,
				-62
			],
			[
				41,
				-21
			],
			[
				12,
				-42
			],
			[
				3,
				-11
			],
			[
				1,
				-4
			],
			[
				-93,
				-88
			],
			[
				-32,
				-29
			],
			[
				109,
				4
			],
			[
				6,
				45
			],
			[
				24,
				21
			],
			[
				38,
				34
			],
			[
				-2,
				-20
			],
			[
				-18,
				-180
			],
			[
				-111,
				-94
			],
			[
				-48,
				-41
			],
			[
				167,
				-28
			],
			[
				34,
				-64
			],
			[
				-27,
				-98
			],
			[
				-5,
				-19
			],
			[
				-46,
				-83
			],
			[
				-37,
				-66
			],
			[
				-61,
				-108
			],
			[
				-24,
				-9
			],
			[
				-23,
				-8
			],
			[
				-3,
				-1
			],
			[
				-94,
				-26
			],
			[
				31,
				-54
			],
			[
				-18,
				-106
			],
			[
				-3,
				-14
			],
			[
				-3,
				-20
			],
			[
				9,
				-5
			],
			[
				11,
				-6
			],
			[
				37,
				-21
			],
			[
				-27,
				-67
			],
			[
				-151,
				-66
			],
			[
				-2,
				1
			],
			[
				-8,
				4
			],
			[
				0,
				0
			]
		],
		[
			[
				34227,
				73983
			],
			[
				-98,
				-112
			],
			[
				12,
				93
			],
			[
				2,
				77
			],
			[
				82,
				71
			],
			[
				45,
				97
			],
			[
				59,
				-44
			],
			[
				-8,
				-61
			],
			[
				-94,
				-121
			]
		],
		[
			[
				34548,
				73531
			],
			[
				73,
				-67
			],
			[
				31,
				2
			],
			[
				92,
				-58
			],
			[
				20,
				-61
			],
			[
				-29,
				-11
			],
			[
				-221,
				87
			],
			[
				-106,
				139
			],
			[
				41,
				83
			],
			[
				99,
				-114
			]
		],
		[
			[
				35761,
				75351
			],
			[
				-44,
				-23
			],
			[
				-23,
				3
			],
			[
				-30,
				15
			],
			[
				-15,
				37
			],
			[
				40,
				55
			],
			[
				54,
				7
			],
			[
				51,
				-36
			],
			[
				-3,
				-25
			],
			[
				-30,
				-33
			]
		],
		[
			[
				35985,
				75002
			],
			[
				-10,
				-56
			],
			[
				-50,
				-19
			],
			[
				-110,
				70
			],
			[
				-110,
				-19
			],
			[
				-42,
				-35
			],
			[
				-115,
				86
			],
			[
				35,
				49
			],
			[
				66,
				34
			],
			[
				7,
				63
			],
			[
				116,
				39
			],
			[
				-33,
				29
			],
			[
				30,
				43
			],
			[
				32,
				19
			],
			[
				97,
				1
			],
			[
				25,
				-12
			],
			[
				-12,
				-74
			],
			[
				-28,
				-42
			],
			[
				-55,
				-107
			],
			[
				140,
				-10
			],
			[
				17,
				-59
			]
		],
		[
			[
				35470,
				74398
			],
			[
				-83,
				62
			],
			[
				-66,
				56
			],
			[
				-29,
				121
			],
			[
				-145,
				97
			],
			[
				-61,
				6
			],
			[
				-81,
				50
			],
			[
				17,
				92
			],
			[
				48,
				97
			],
			[
				46,
				48
			],
			[
				105,
				-33
			],
			[
				47,
				-3
			],
			[
				96,
				-5
			],
			[
				161,
				-156
			],
			[
				162,
				-40
			],
			[
				66,
				46
			],
			[
				41,
				-66
			],
			[
				118,
				-77
			],
			[
				61,
				10
			],
			[
				-35,
				64
			],
			[
				8,
				78
			],
			[
				81,
				23
			],
			[
				78,
				-78
			],
			[
				-4,
				-47
			],
			[
				-21,
				-28
			],
			[
				-10,
				-12
			],
			[
				-1,
				-2
			],
			[
				1,
				-1
			],
			[
				100,
				-80
			],
			[
				-53,
				-65
			],
			[
				-17,
				-21
			],
			[
				-11,
				-113
			],
			[
				-1,
				-16
			],
			[
				39,
				-4
			],
			[
				49,
				-6
			],
			[
				-2,
				-36
			],
			[
				-235,
				-137
			],
			[
				-42,
				10
			],
			[
				-151,
				38
			],
			[
				-94,
				-2
			],
			[
				-9,
				0
			],
			[
				-94,
				44
			],
			[
				-35,
				16
			],
			[
				-7,
				4
			],
			[
				0,
				7
			],
			[
				1,
				31
			],
			[
				-38,
				28
			]
		],
		[
			[
				36267,
				74810
			],
			[
				6,
				1
			],
			[
				10,
				25
			],
			[
				15,
				38
			],
			[
				7,
				0
			],
			[
				49,
				1
			],
			[
				51,
				1
			],
			[
				52,
				-40
			],
			[
				72,
				-55
			],
			[
				-131,
				-105
			],
			[
				-19,
				-16
			],
			[
				-109,
				-76
			],
			[
				-32,
				39
			],
			[
				25,
				58
			],
			[
				-49,
				3
			],
			[
				-13,
				0
			],
			[
				-3,
				13
			],
			[
				-13,
				58
			],
			[
				11,
				33
			],
			[
				71,
				22
			]
		],
		[
			[
				36347,
				74142
			],
			[
				-77,
				-40
			],
			[
				4,
				59
			],
			[
				15,
				53
			],
			[
				41,
				2
			],
			[
				114,
				1
			],
			[
				-97,
				-75
			]
		],
		[
			[
				36322,
				74265
			],
			[
				-37,
				-1
			],
			[
				-14,
				36
			],
			[
				13,
				59
			],
			[
				19,
				18
			],
			[
				95,
				6
			],
			[
				10,
				-25
			],
			[
				-52,
				-71
			],
			[
				-34,
				-22
			]
		],
		[
			[
				37646,
				77816
			],
			[
				0,
				0
			],
			[
				36,
				66
			],
			[
				39,
				5
			],
			[
				89,
				11
			],
			[
				77,
				10
			],
			[
				39,
				-7
			],
			[
				129,
				-23
			],
			[
				4,
				-27
			],
			[
				3,
				-18
			],
			[
				8,
				-41
			],
			[
				135,
				-59
			],
			[
				11,
				-9
			],
			[
				118,
				-87
			],
			[
				106,
				-94
			],
			[
				15,
				18
			],
			[
				6,
				7
			],
			[
				6,
				36
			],
			[
				13,
				52
			],
			[
				9,
				37
			],
			[
				-51,
				33
			],
			[
				-139,
				20
			],
			[
				-124,
				60
			],
			[
				-27,
				14
			],
			[
				25,
				5
			],
			[
				20,
				4
			],
			[
				45,
				8
			],
			[
				-12,
				12
			],
			[
				-42,
				41
			],
			[
				-50,
				49
			],
			[
				57,
				36
			],
			[
				91,
				-88
			],
			[
				225,
				42
			],
			[
				2,
				1
			],
			[
				2,
				42
			],
			[
				130,
				14
			],
			[
				79,
				-29
			],
			[
				15,
				-6
			],
			[
				2,
				52
			],
			[
				-125,
				71
			],
			[
				-40,
				1
			],
			[
				-42,
				2
			],
			[
				-54,
				-25
			],
			[
				-57,
				-28
			],
			[
				-265,
				62
			],
			[
				-157,
				77
			],
			[
				-3,
				2
			],
			[
				-19,
				36
			],
			[
				-18,
				37
			],
			[
				-114,
				225
			],
			[
				77,
				47
			],
			[
				205,
				-156
			],
			[
				57,
				-125
			],
			[
				42,
				-33
			],
			[
				37,
				-28
			],
			[
				8,
				5
			],
			[
				42,
				27
			],
			[
				-73,
				94
			],
			[
				14,
				121
			],
			[
				171,
				-88
			],
			[
				47,
				41
			],
			[
				-46,
				67
			],
			[
				-119,
				89
			],
			[
				-142,
				200
			],
			[
				-1,
				42
			],
			[
				61,
				-14
			],
			[
				297,
				-136
			],
			[
				64,
				-30
			],
			[
				115,
				-1
			],
			[
				24,
				-43
			],
			[
				10,
				-17
			],
			[
				5,
				-7
			],
			[
				-24,
				-62
			],
			[
				-16,
				-42
			],
			[
				32,
				-37
			],
			[
				57,
				73
			],
			[
				29,
				37
			],
			[
				41,
				-37
			],
			[
				74,
				-64
			],
			[
				4,
				-4
			],
			[
				-5,
				-15
			],
			[
				-23,
				-67
			],
			[
				18,
				-15
			],
			[
				106,
				-83
			],
			[
				224,
				37
			],
			[
				46,
				7
			],
			[
				2,
				25
			],
			[
				-34,
				15
			],
			[
				-93,
				41
			],
			[
				-101,
				102
			],
			[
				-60,
				114
			],
			[
				-72,
				80
			],
			[
				-46,
				51
			],
			[
				-152,
				74
			],
			[
				8,
				51
			],
			[
				-106,
				181
			],
			[
				73,
				65
			],
			[
				-7,
				63
			],
			[
				-22,
				50
			],
			[
				17,
				0
			]
		],
		[
			[
				38708,
				79158
			],
			[
				0,
				0
			],
			[
				71,
				-1
			],
			[
				21,
				-65
			],
			[
				66,
				-59
			],
			[
				47,
				-69
			],
			[
				47,
				-17
			],
			[
				45,
				-17
			],
			[
				59,
				-101
			],
			[
				23,
				-115
			],
			[
				66,
				-61
			],
			[
				-7,
				-133
			],
			[
				96,
				-142
			],
			[
				71,
				-7
			],
			[
				-47,
				94
			],
			[
				-29,
				111
			],
			[
				135,
				-28
			],
			[
				21,
				52
			],
			[
				-102,
				45
			],
			[
				-5,
				102
			],
			[
				-14,
				26
			],
			[
				-17,
				-5
			],
			[
				-3,
				-22
			],
			[
				-37,
				47
			],
			[
				7,
				14
			],
			[
				26,
				-19
			],
			[
				17,
				3
			],
			[
				-26,
				178
			],
			[
				-54,
				92
			],
			[
				-53,
				89
			],
			[
				77,
				-47
			],
			[
				58,
				-9
			],
			[
				65,
				44
			],
			[
				147,
				-285
			],
			[
				41,
				-79
			],
			[
				110,
				-83
			],
			[
				0,
				41
			],
			[
				-1,
				128
			],
			[
				80,
				116
			],
			[
				49,
				-7
			],
			[
				69,
				-62
			],
			[
				20,
				18
			],
			[
				-36,
				95
			],
			[
				61,
				13
			],
			[
				59,
				-48
			],
			[
				15,
				-95
			],
			[
				44,
				-13
			],
			[
				46,
				-105
			],
			[
				-4,
				-2
			],
			[
				-31,
				-21
			],
			[
				-12,
				-65
			],
			[
				27,
				-16
			],
			[
				13,
				-58
			],
			[
				-53,
				-57
			],
			[
				1,
				-23
			],
			[
				1,
				-18
			],
			[
				-133,
				-51
			],
			[
				-49,
				-97
			],
			[
				42,
				-110
			],
			[
				-49,
				-54
			],
			[
				-86,
				23
			],
			[
				-3,
				-47
			],
			[
				98,
				-51
			],
			[
				98,
				-15
			],
			[
				49,
				120
			],
			[
				-16,
				80
			],
			[
				-10,
				56
			],
			[
				46,
				18
			],
			[
				26,
				69
			],
			[
				63,
				25
			],
			[
				46,
				111
			],
			[
				48,
				34
			],
			[
				83,
				-50
			],
			[
				242,
				-175
			],
			[
				-103,
				-101
			],
			[
				-96,
				-13
			],
			[
				46,
				-62
			],
			[
				-83,
				-145
			],
			[
				-71,
				-20
			],
			[
				-59,
				-107
			],
			[
				-2,
				-3
			],
			[
				-1,
				-2
			],
			[
				62,
				-113
			],
			[
				18,
				-2
			],
			[
				1,
				0
			],
			[
				81,
				-11
			],
			[
				-3,
				32
			],
			[
				-15,
				13
			],
			[
				-7,
				6
			],
			[
				1,
				10
			],
			[
				7,
				58
			],
			[
				1,
				15
			],
			[
				61,
				121
			],
			[
				15,
				6
			],
			[
				27,
				12
			],
			[
				26,
				11
			],
			[
				6,
				-6
			],
			[
				89,
				-81
			],
			[
				31,
				-29
			],
			[
				-1,
				-1
			],
			[
				-56,
				-136
			],
			[
				-47,
				-30
			],
			[
				-3,
				-16
			],
			[
				-11,
				-50
			],
			[
				50,
				12
			],
			[
				20,
				5
			],
			[
				-29,
				-226
			],
			[
				49,
				-4
			],
			[
				12,
				11
			],
			[
				19,
				17
			],
			[
				37,
				-40
			],
			[
				-58,
				-72
			],
			[
				-68,
				16
			],
			[
				-2,
				0
			],
			[
				-320,
				-84
			],
			[
				-8,
				-2
			],
			[
				-42,
				-30
			],
			[
				-45,
				-131
			],
			[
				-31,
				15
			],
			[
				-20,
				11
			],
			[
				-59,
				-20
			],
			[
				59,
				-114
			],
			[
				34,
				16
			],
			[
				9,
				4
			],
			[
				11,
				-34
			],
			[
				23,
				-68
			],
			[
				0,
				0
			],
			[
				-26,
				-28
			],
			[
				-75,
				-67
			],
			[
				19,
				-35
			],
			[
				72,
				39
			],
			[
				10,
				5
			],
			[
				70,
				-18
			],
			[
				-3,
				-78
			],
			[
				-2,
				-29
			],
			[
				62,
				-6
			],
			[
				-1,
				-1
			],
			[
				-3,
				-14
			],
			[
				-16,
				-77
			],
			[
				-2,
				-10
			],
			[
				-77,
				-47
			],
			[
				-5,
				-1
			],
			[
				-76,
				-11
			],
			[
				-101,
				-15
			],
			[
				-44,
				-6
			],
			[
				8,
				-15
			],
			[
				1,
				0
			],
			[
				20,
				-34
			],
			[
				103,
				-51
			],
			[
				66,
				-1
			],
			[
				5,
				-19
			],
			[
				18,
				-74
			],
			[
				9,
				-35
			],
			[
				57,
				-15
			],
			[
				55,
				40
			],
			[
				112,
				-33
			],
			[
				3,
				-30
			],
			[
				-148,
				-96
			],
			[
				-366,
				-117
			],
			[
				0,
				0
			]
		],
		[
			[
				39773,
				76157
			],
			[
				-27,
				-8
			],
			[
				-327,
				77
			],
			[
				-208,
				-124
			],
			[
				-74,
				-24
			],
			[
				-41,
				-13
			],
			[
				-2,
				11
			],
			[
				-11,
				41
			],
			[
				10,
				36
			],
			[
				-39,
				13
			],
			[
				-101,
				-19
			],
			[
				-97,
				1
			],
			[
				-43,
				-24
			],
			[
				-106,
				-60
			],
			[
				-16,
				32
			],
			[
				-3,
				7
			],
			[
				4,
				6
			],
			[
				35,
				45
			],
			[
				91,
				62
			],
			[
				27,
				18
			],
			[
				10,
				51
			],
			[
				-34,
				-11
			],
			[
				-38,
				-13
			],
			[
				-44,
				1
			],
			[
				-9,
				0
			],
			[
				0,
				3
			],
			[
				-6,
				40
			],
			[
				101,
				54
			],
			[
				62,
				34
			],
			[
				-29,
				55
			],
			[
				-28,
				-1
			],
			[
				-59,
				-1
			],
			[
				-30,
				37
			],
			[
				-161,
				-114
			],
			[
				-6,
				-77
			],
			[
				-82,
				-58
			],
			[
				-9,
				-34
			],
			[
				-9,
				-36
			],
			[
				-2,
				-8
			],
			[
				-31,
				-31
			],
			[
				-99,
				-97
			],
			[
				-8,
				-8
			],
			[
				-122,
				-17
			],
			[
				2,
				-9
			],
			[
				8,
				-40
			],
			[
				7,
				-39
			],
			[
				-48,
				-28
			],
			[
				-113,
				-60
			],
			[
				-39,
				-89
			],
			[
				-103,
				-67
			],
			[
				-22,
				-3
			],
			[
				-112,
				-16
			],
			[
				-11,
				-27
			],
			[
				89,
				-43
			],
			[
				-69,
				-79
			],
			[
				-22,
				-25
			],
			[
				-5,
				-5
			],
			[
				-19,
				-52
			],
			[
				11,
				-18
			],
			[
				2,
				-3
			],
			[
				24,
				-38
			],
			[
				22,
				0
			],
			[
				14,
				54
			],
			[
				15,
				11
			],
			[
				21,
				16
			],
			[
				11,
				-4
			],
			[
				3,
				-1
			],
			[
				35,
				-10
			],
			[
				4,
				-15
			],
			[
				2,
				-11
			],
			[
				30,
				-111
			],
			[
				-8,
				-49
			],
			[
				-40,
				-26
			],
			[
				-71,
				6
			],
			[
				-114,
				-55
			],
			[
				-201,
				-49
			],
			[
				-136,
				-1
			],
			[
				-21,
				62
			],
			[
				29,
				33
			],
			[
				29,
				33
			],
			[
				-19,
				48
			],
			[
				-37,
				10
			],
			[
				-18,
				5
			],
			[
				10,
				22
			],
			[
				7,
				16
			],
			[
				54,
				-16
			],
			[
				116,
				5
			],
			[
				56,
				25
			],
			[
				-23,
				71
			],
			[
				-71,
				-3
			],
			[
				-27,
				-31
			],
			[
				-62,
				-30
			],
			[
				-36,
				39
			],
			[
				-10,
				11
			],
			[
				47,
				25
			],
			[
				99,
				53
			],
			[
				59,
				31
			],
			[
				23,
				-2
			],
			[
				48,
				-4
			],
			[
				39,
				34
			],
			[
				68,
				62
			],
			[
				10,
				8
			],
			[
				-31,
				21
			],
			[
				-28,
				-7
			],
			[
				-44,
				-12
			],
			[
				-188,
				-51
			],
			[
				-162,
				-45
			],
			[
				-10,
				57
			],
			[
				0,
				5
			],
			[
				-13,
				1
			],
			[
				-58,
				7
			],
			[
				-74,
				-18
			],
			[
				-32,
				-22
			],
			[
				-18,
				-49
			],
			[
				-5,
				-2
			],
			[
				-81,
				-31
			],
			[
				-95,
				-37
			],
			[
				-86,
				-5
			],
			[
				-158,
				-11
			],
			[
				-8,
				0
			],
			[
				-14,
				8
			],
			[
				-50,
				29
			],
			[
				71,
				40
			],
			[
				33,
				19
			],
			[
				-23,
				6
			],
			[
				-67,
				18
			],
			[
				-12,
				186
			],
			[
				50,
				82
			],
			[
				51,
				101
			],
			[
				125,
				-31
			],
			[
				48,
				-41
			],
			[
				92,
				-42
			],
			[
				35,
				-11
			],
			[
				8,
				65
			],
			[
				-53,
				69
			],
			[
				5,
				47
			],
			[
				115,
				47
			],
			[
				102,
				-9
			],
			[
				56,
				84
			],
			[
				99,
				-88
			],
			[
				177,
				33
			],
			[
				2,
				43
			],
			[
				-91,
				32
			],
			[
				46,
				82
			],
			[
				-30,
				39
			],
			[
				105,
				-12
			],
			[
				201,
				102
			],
			[
				57,
				30
			],
			[
				73,
				36
			],
			[
				19,
				10
			],
			[
				-16,
				17
			],
			[
				0,
				0
			]
		],
		[
			[
				37872,
				76416
			],
			[
				-11,
				13
			],
			[
				-1,
				0
			],
			[
				-224,
				-85
			],
			[
				-111,
				-43
			],
			[
				-65,
				6
			],
			[
				-34,
				23
			],
			[
				-46,
				31
			],
			[
				-173,
				5
			],
			[
				-51,
				28
			],
			[
				-27,
				14
			],
			[
				-105,
				25
			],
			[
				-22,
				1
			],
			[
				-83,
				-20
			],
			[
				16,
				72
			],
			[
				95,
				-20
			],
			[
				7,
				-1
			],
			[
				38,
				26
			],
			[
				-11,
				21
			],
			[
				-4,
				7
			],
			[
				-118,
				53
			],
			[
				-48,
				22
			],
			[
				-13,
				6
			],
			[
				39,
				34
			],
			[
				45,
				38
			],
			[
				0,
				0
			],
			[
				7,
				1
			],
			[
				259,
				26
			],
			[
				7,
				9
			],
			[
				18,
				24
			],
			[
				35,
				-17
			],
			[
				190,
				-90
			],
			[
				68,
				-12
			],
			[
				34,
				-4
			],
			[
				59,
				23
			],
			[
				19,
				131
			],
			[
				1,
				4
			],
			[
				-6,
				-3
			],
			[
				-67,
				-36
			],
			[
				-40,
				60
			],
			[
				16,
				37
			],
			[
				26,
				59
			],
			[
				18,
				41
			],
			[
				30,
				15
			],
			[
				152,
				77
			],
			[
				-46,
				33
			],
			[
				-19,
				-8
			],
			[
				-172,
				-70
			],
			[
				-20,
				-9
			],
			[
				-40,
				-73
			],
			[
				-17,
				-30
			],
			[
				-69,
				-16
			],
			[
				-130,
				77
			],
			[
				27,
				28
			],
			[
				111,
				0
			],
			[
				13,
				-1
			],
			[
				-8,
				37
			],
			[
				-63,
				10
			],
			[
				-49,
				7
			],
			[
				-43,
				7
			],
			[
				-150,
				-59
			],
			[
				-24,
				63
			],
			[
				226,
				124
			],
			[
				-17,
				21
			],
			[
				-21,
				-1
			],
			[
				-58,
				-4
			],
			[
				-89,
				-44
			],
			[
				-121,
				-15
			],
			[
				-73,
				102
			],
			[
				20,
				31
			],
			[
				52,
				19
			],
			[
				122,
				-3
			],
			[
				111,
				64
			],
			[
				155,
				10
			],
			[
				34,
				-28
			],
			[
				163,
				-131
			],
			[
				47,
				17
			],
			[
				-101,
				82
			],
			[
				20,
				55
			],
			[
				151,
				65
			],
			[
				-14,
				7
			],
			[
				-61,
				27
			],
			[
				-69,
				-34
			],
			[
				-39,
				-19
			],
			[
				-78,
				11
			],
			[
				-138,
				116
			],
			[
				34,
				59
			],
			[
				107,
				-21
			],
			[
				4,
				0
			],
			[
				273,
				-64
			],
			[
				17,
				36
			],
			[
				-370,
				100
			],
			[
				-71,
				0
			],
			[
				-54,
				-24
			],
			[
				-33,
				-48
			],
			[
				-334,
				29
			],
			[
				-39,
				88
			],
			[
				139,
				-30
			],
			[
				61,
				67
			],
			[
				-43,
				51
			],
			[
				59,
				23
			],
			[
				3,
				76
			],
			[
				68,
				-6
			],
			[
				71,
				-76
			],
			[
				91,
				13
			],
			[
				0,
				3
			],
			[
				22,
				39
			],
			[
				125,
				4
			],
			[
				43,
				-100
			],
			[
				81,
				-29
			],
			[
				78,
				141
			]
		],
		[
			[
				36971,
				75241
			],
			[
				-30,
				-11
			],
			[
				-45,
				15
			],
			[
				5,
				30
			],
			[
				31,
				33
			],
			[
				24,
				20
			],
			[
				38,
				-1
			],
			[
				36,
				-18
			],
			[
				-12,
				-38
			],
			[
				-47,
				-30
			]
		],
		[
			[
				38602,
				74430
			],
			[
				-8,
				23
			],
			[
				3,
				14
			],
			[
				3,
				15
			],
			[
				10,
				40
			],
			[
				46,
				38
			],
			[
				54,
				44
			],
			[
				-8,
				21
			],
			[
				-40,
				117
			],
			[
				4,
				2
			],
			[
				79,
				35
			],
			[
				4,
				1
			],
			[
				14,
				6
			],
			[
				25,
				-1
			],
			[
				50,
				-4
			],
			[
				82,
				-13
			],
			[
				11,
				19
			],
			[
				2,
				3
			],
			[
				21,
				37
			],
			[
				-49,
				25
			],
			[
				0,
				0
			],
			[
				-8,
				102
			],
			[
				0,
				2
			],
			[
				-85,
				-19
			],
			[
				-59,
				-4
			],
			[
				-43,
				-2
			],
			[
				-25,
				116
			],
			[
				44,
				-8
			],
			[
				31,
				36
			],
			[
				85,
				100
			],
			[
				61,
				117
			],
			[
				129,
				66
			],
			[
				305,
				301
			],
			[
				-133,
				68
			],
			[
				-77,
				-20
			],
			[
				53,
				102
			],
			[
				266,
				79
			],
			[
				72,
				-37
			],
			[
				101,
				10
			],
			[
				120,
				77
			],
			[
				87,
				2
			],
			[
				116,
				47
			],
			[
				14,
				10
			]
		],
		[
			[
				39959,
				75997
			],
			[
				0,
				0
			],
			[
				96,
				67
			],
			[
				61,
				0
			],
			[
				105,
				42
			],
			[
				220,
				-27
			],
			[
				-9,
				-100
			],
			[
				215,
				72
			],
			[
				14,
				5
			],
			[
				23,
				-22
			],
			[
				17,
				-16
			],
			[
				40,
				-38
			],
			[
				61,
				-70
			],
			[
				59,
				40
			],
			[
				-66,
				71
			],
			[
				-5,
				6
			],
			[
				-47,
				28
			],
			[
				-36,
				22
			],
			[
				14,
				69
			],
			[
				-104,
				0
			],
			[
				-5,
				31
			],
			[
				-5,
				28
			],
			[
				-93,
				-57
			],
			[
				-44,
				52
			],
			[
				39,
				73
			],
			[
				-91,
				26
			],
			[
				31,
				153
			],
			[
				11,
				28
			],
			[
				0,
				0
			]
		],
		[
			[
				40460,
				76480
			],
			[
				3,
				7
			],
			[
				60,
				146
			],
			[
				0,
				2
			],
			[
				-1,
				0
			],
			[
				-123,
				34
			],
			[
				-108,
				-21
			],
			[
				-47,
				-34
			],
			[
				-63,
				-2
			],
			[
				10,
				75
			],
			[
				6,
				8
			],
			[
				39,
				53
			],
			[
				24,
				33
			],
			[
				-2,
				37
			],
			[
				-3,
				54
			],
			[
				-33,
				44
			],
			[
				-6,
				7
			],
			[
				36,
				192
			],
			[
				-13,
				41
			],
			[
				-5,
				16
			],
			[
				8,
				3
			],
			[
				189,
				66
			],
			[
				73,
				137
			],
			[
				5,
				10
			],
			[
				16,
				5
			],
			[
				52,
				15
			],
			[
				5,
				26
			],
			[
				22,
				113
			],
			[
				-48,
				91
			],
			[
				-6,
				12
			],
			[
				8,
				8
			],
			[
				25,
				27
			],
			[
				30,
				2
			],
			[
				14,
				1
			],
			[
				38,
				2
			],
			[
				103,
				6
			],
			[
				25,
				30
			],
			[
				2,
				36
			],
			[
				-74,
				40
			],
			[
				15,
				41
			],
			[
				24,
				64
			],
			[
				-5,
				72
			],
			[
				-1,
				30
			],
			[
				-75,
				130
			],
			[
				-16,
				29
			],
			[
				55,
				69
			],
			[
				9,
				11
			],
			[
				3,
				-1
			],
			[
				105,
				-50
			],
			[
				127,
				62
			],
			[
				11,
				95
			],
			[
				194,
				-7
			],
			[
				8,
				-47
			],
			[
				127,
				-51
			],
			[
				87,
				-164
			],
			[
				-41,
				-282
			],
			[
				-36,
				-39
			],
			[
				-19,
				-89
			],
			[
				-29,
				-38
			],
			[
				-43,
				-39
			],
			[
				-7,
				-49
			],
			[
				0,
				0
			],
			[
				24,
				-1
			],
			[
				12,
				42
			],
			[
				31,
				18
			],
			[
				21,
				38
			],
			[
				47,
				39
			],
			[
				40,
				18
			],
			[
				50,
				70
			],
			[
				287,
				-137
			],
			[
				32,
				-56
			],
			[
				-4,
				-43
			],
			[
				-20,
				-183
			],
			[
				-4,
				-34
			],
			[
				43,
				-62
			],
			[
				-25,
				-168
			],
			[
				0,
				0
			]
		],
		[
			[
				41748,
				77090
			],
			[
				-10,
				-63
			],
			[
				19,
				-42
			],
			[
				24,
				-54
			],
			[
				-8,
				-60
			],
			[
				-4,
				-24
			],
			[
				-59,
				-112
			],
			[
				0,
				-132
			],
			[
				21,
				-22
			],
			[
				19,
				12
			],
			[
				51,
				96
			],
			[
				0,
				23
			],
			[
				-2,
				63
			],
			[
				42,
				63
			],
			[
				37,
				112
			],
			[
				-5,
				74
			],
			[
				25,
				51
			],
			[
				3,
				4
			],
			[
				0,
				24
			],
			[
				0,
				1
			],
			[
				5,
				120
			],
			[
				-23,
				60
			],
			[
				-3,
				11
			],
			[
				-16,
				44
			],
			[
				8,
				85
			],
			[
				22,
				45
			],
			[
				0,
				1
			],
			[
				3,
				2
			],
			[
				74,
				31
			],
			[
				52,
				-82
			],
			[
				19,
				-32
			],
			[
				-26,
				-63
			],
			[
				-35,
				-81
			],
			[
				112,
				-127
			],
			[
				71,
				-53
			],
			[
				97,
				-73
			],
			[
				89,
				-67
			],
			[
				-10,
				-124
			],
			[
				70,
				6
			],
			[
				4,
				68
			]
		],
		[
			[
				46474,
				75381
			],
			[
				0,
				0
			],
			[
				146,
				-162
			],
			[
				36,
				-41
			],
			[
				1,
				-1
			],
			[
				31,
				-35
			],
			[
				34,
				-39
			],
			[
				139,
				-160
			],
			[
				150,
				-172
			],
			[
				75,
				-77
			],
			[
				132,
				-127
			],
			[
				2,
				-21
			],
			[
				6,
				-68
			],
			[
				13,
				-136
			],
			[
				0,
				0
			],
			[
				25,
				-255
			],
			[
				4,
				-39
			],
			[
				8,
				-65
			],
			[
				10,
				-88
			],
			[
				16,
				-137
			],
			[
				4,
				-34
			],
			[
				0,
				0
			],
			[
				-59,
				-133
			],
			[
				0,
				0
			],
			[
				-46,
				-104
			],
			[
				0,
				0
			],
			[
				-82,
				-186
			],
			[
				-82,
				-193
			],
			[
				-42,
				-100
			],
			[
				-49,
				-117
			],
			[
				-41,
				-96
			],
			[
				-125,
				-139
			],
			[
				-234,
				-264
			],
			[
				-23,
				-25
			],
			[
				-72,
				-81
			],
			[
				-183,
				-119
			],
			[
				0,
				-1
			],
			[
				-163,
				-106
			],
			[
				0,
				0
			]
		],
		[
			[
				46105,
				72060
			],
			[
				70,
				-48
			],
			[
				48,
				-34
			],
			[
				46,
				-31
			],
			[
				30,
				-21
			],
			[
				73,
				-51
			],
			[
				60,
				-27
			],
			[
				62,
				-28
			],
			[
				223,
				-100
			],
			[
				259,
				-117
			],
			[
				0,
				0
			],
			[
				-218,
				-199
			],
			[
				0,
				0
			],
			[
				-131,
				-121
			],
			[
				-63,
				-59
			],
			[
				-58,
				-55
			],
			[
				0,
				0
			],
			[
				-17,
				-16
			],
			[
				-82,
				-78
			],
			[
				-10,
				-9
			],
			[
				-70,
				-66
			],
			[
				-100,
				-96
			],
			[
				-22,
				-28
			],
			[
				-41,
				-53
			],
			[
				-8,
				-9
			],
			[
				-72,
				-93
			],
			[
				-28,
				-36
			],
			[
				-128,
				52
			],
			[
				-91,
				37
			],
			[
				-71,
				28
			],
			[
				-130,
				52
			],
			[
				-3,
				1
			],
			[
				-6,
				3
			],
			[
				-135,
				54
			],
			[
				-80,
				31
			],
			[
				-164,
				64
			],
			[
				-299,
				116
			],
			[
				-160,
				62
			],
			[
				-59,
				23
			],
			[
				-18,
				7
			],
			[
				-7,
				2
			],
			[
				-72,
				28
			],
			[
				-47,
				19
			],
			[
				-245,
				93
			],
			[
				-26,
				10
			],
			[
				-226,
				87
			],
			[
				-17,
				7
			],
			[
				-95,
				36
			],
			[
				-161,
				61
			],
			[
				-115,
				44
			],
			[
				-148,
				56
			],
			[
				-53,
				21
			],
			[
				-125,
				47
			],
			[
				-145,
				55
			],
			[
				-247,
				-15
			],
			[
				-89,
				-5
			],
			[
				-129,
				-8
			],
			[
				-169,
				-10
			],
			[
				-100,
				-6
			],
			[
				-51,
				-4
			],
			[
				-8,
				-1
			],
			[
				-108,
				-8
			],
			[
				-80,
				-5
			],
			[
				-43,
				-2
			],
			[
				-69,
				-4
			],
			[
				0,
				0
			],
			[
				-207,
				176
			],
			[
				-202,
				161
			],
			[
				-60,
				43
			],
			[
				-81,
				58
			],
			[
				-59,
				43
			],
			[
				-41,
				29
			],
			[
				0,
				0
			],
			[
				-222,
				-82
			],
			[
				-65,
				-24
			],
			[
				-32,
				-12
			],
			[
				-148,
				-54
			],
			[
				-74,
				-26
			],
			[
				-88,
				-33
			],
			[
				-1,
				0
			],
			[
				-40,
				-14
			],
			[
				-1,
				-1
			],
			[
				-14,
				-5
			],
			[
				-158,
				-58
			]
		],
		[
			[
				38789,
				75657
			],
			[
				211,
				61
			],
			[
				2,
				0
			],
			[
				21,
				-41
			],
			[
				-61,
				-19
			],
			[
				-45,
				-14
			],
			[
				-3,
				-4
			],
			[
				-17,
				-27
			],
			[
				21,
				-50
			],
			[
				-3,
				-59
			],
			[
				-39,
				-47
			],
			[
				-17,
				-21
			],
			[
				-2,
				-5
			],
			[
				-26,
				-68
			],
			[
				-59,
				-41
			],
			[
				0,
				0
			],
			[
				-57,
				3
			],
			[
				-16,
				1
			],
			[
				-38,
				-25
			],
			[
				-22,
				-36
			],
			[
				-47,
				-77
			],
			[
				-95,
				-155
			],
			[
				-4,
				-7
			],
			[
				-36,
				-9
			],
			[
				-27,
				-7
			],
			[
				-10,
				-8
			],
			[
				-42,
				-36
			],
			[
				-84,
				57
			],
			[
				-18,
				44
			],
			[
				68,
				70
			],
			[
				-28,
				113
			],
			[
				-5,
				22
			],
			[
				-2,
				8
			],
			[
				72,
				84
			],
			[
				41,
				147
			],
			[
				63,
				98
			],
			[
				4,
				2
			],
			[
				51,
				22
			],
			[
				31,
				14
			],
			[
				148,
				22
			],
			[
				0,
				0
			],
			[
				51,
				-18
			],
			[
				19,
				6
			]
		],
		[
			[
				18703,
				39115
			],
			[
				-155,
				-74
			],
			[
				-57,
				5
			],
			[
				-82,
				-37
			],
			[
				-42,
				-34
			],
			[
				-75,
				-21
			],
			[
				-100,
				-88
			],
			[
				-17,
				-15
			],
			[
				-72,
				-34
			],
			[
				-59,
				0
			],
			[
				-61,
				-67
			],
			[
				0,
				-6
			],
			[
				-1,
				-64
			],
			[
				-1,
				-40
			],
			[
				-4,
				-4
			],
			[
				-116,
				-123
			],
			[
				-23,
				-25
			],
			[
				-21,
				-5
			],
			[
				-32,
				-9
			],
			[
				-36,
				-10
			],
			[
				-28,
				-31
			],
			[
				-38,
				-44
			],
			[
				-10,
				-11
			],
			[
				-27,
				-15
			],
			[
				-115,
				-61
			],
			[
				-3,
				-2
			],
			[
				0,
				-20
			],
			[
				0,
				-16
			],
			[
				-50,
				-18
			],
			[
				-67,
				-25
			],
			[
				-4,
				-119
			],
			[
				-189,
				31
			],
			[
				-153,
				-133
			],
			[
				-215,
				11
			],
			[
				-72,
				-46
			],
			[
				1,
				-63
			],
			[
				-82,
				-71
			],
			[
				-39,
				-27
			],
			[
				0,
				0
			]
		],
		[
			[
				16658,
				37804
			],
			[
				-37,
				-25
			],
			[
				-20,
				-44
			],
			[
				-39,
				-49
			],
			[
				-44,
				-55
			],
			[
				-65,
				-43
			],
			[
				-94,
				-9
			],
			[
				-64,
				-19
			],
			[
				-5,
				2
			],
			[
				-90,
				24
			],
			[
				-76,
				-55
			],
			[
				-23,
				5
			],
			[
				9,
				61
			],
			[
				-63,
				13
			],
			[
				-18,
				-7
			],
			[
				-36,
				-13
			],
			[
				-49,
				49
			],
			[
				-73,
				231
			],
			[
				21,
				22
			],
			[
				11,
				19
			],
			[
				9,
				16
			],
			[
				-9,
				35
			],
			[
				-28,
				36
			],
			[
				-42,
				55
			],
			[
				-1,
				45
			],
			[
				18,
				35
			],
			[
				31,
				9
			],
			[
				40,
				42
			],
			[
				0,
				0
			],
			[
				-14,
				73
			],
			[
				0,
				1
			],
			[
				-3,
				1
			],
			[
				-5,
				1
			],
			[
				-30,
				-4
			],
			[
				-77,
				-31
			],
			[
				-84,
				-11
			],
			[
				-3,
				0
			],
			[
				-7,
				9
			],
			[
				-50,
				71
			],
			[
				7,
				46
			],
			[
				-37,
				27
			],
			[
				-16,
				11
			],
			[
				-37,
				121
			],
			[
				76,
				43
			],
			[
				82,
				53
			],
			[
				-3,
				0
			],
			[
				-53,
				13
			],
			[
				-46,
				23
			],
			[
				18,
				36
			],
			[
				-16,
				21
			],
			[
				-65,
				1
			],
			[
				-10,
				40
			],
			[
				49,
				24
			],
			[
				30,
				41
			],
			[
				-20,
				39
			],
			[
				-17,
				50
			],
			[
				26,
				27
			],
			[
				34,
				18
			],
			[
				49,
				-9
			],
			[
				23,
				-28
			],
			[
				-3,
				-34
			],
			[
				18,
				-11
			],
			[
				4,
				-3
			],
			[
				16,
				19
			],
			[
				22,
				25
			],
			[
				-13,
				29
			],
			[
				43,
				47
			],
			[
				89,
				37
			],
			[
				11,
				-31
			],
			[
				123,
				-10
			],
			[
				-10,
				46
			],
			[
				-64,
				38
			],
			[
				49,
				49
			],
			[
				77,
				37
			],
			[
				-4,
				-87
			],
			[
				89,
				38
			],
			[
				24,
				27
			],
			[
				17,
				6
			],
			[
				44,
				15
			],
			[
				80,
				39
			],
			[
				42,
				26
			],
			[
				16,
				67
			],
			[
				149,
				88
			],
			[
				-158,
				-26
			],
			[
				-28,
				-49
			],
			[
				-51,
				-24
			],
			[
				-36,
				-48
			],
			[
				-79,
				-15
			],
			[
				0,
				-1
			],
			[
				0,
				1
			],
			[
				15,
				68
			],
			[
				54,
				49
			],
			[
				20,
				70
			],
			[
				98,
				34
			],
			[
				-14,
				46
			],
			[
				68,
				48
			],
			[
				75,
				15
			],
			[
				3,
				33
			],
			[
				0,
				0
			]
		],
		[
			[
				16508,
				39549
			],
			[
				0,
				1
			],
			[
				2,
				16
			],
			[
				-54,
				-13
			],
			[
				-112,
				-54
			],
			[
				-101,
				-91
			],
			[
				-69,
				-5
			],
			[
				-86,
				-42
			],
			[
				-8,
				-4
			],
			[
				-21,
				0
			],
			[
				-113,
				-3
			],
			[
				-46,
				-48
			],
			[
				-26,
				-27
			],
			[
				-33,
				-8
			],
			[
				-33,
				-9
			],
			[
				-39,
				-34
			],
			[
				0,
				0
			],
			[
				22,
				-41
			],
			[
				-98,
				-71
			],
			[
				-21,
				34
			],
			[
				-33,
				-5
			],
			[
				-25,
				-38
			],
			[
				-40,
				-29
			],
			[
				0,
				0
			]
		],
		[
			[
				15574,
				39078
			],
			[
				-17,
				-14
			],
			[
				-95,
				-46
			],
			[
				-67,
				-5
			],
			[
				-28,
				-52
			],
			[
				-195,
				47
			],
			[
				-44,
				-59
			],
			[
				15,
				-47
			],
			[
				-1,
				-11
			],
			[
				-8,
				-77
			],
			[
				-82,
				17
			],
			[
				-132,
				-26
			],
			[
				-75,
				-115
			],
			[
				-5,
				-9
			],
			[
				-1,
				-1
			],
			[
				-1,
				0
			],
			[
				-64,
				43
			],
			[
				93,
				162
			],
			[
				6,
				84
			],
			[
				-7,
				80
			],
			[
				-70,
				28
			],
			[
				-6,
				49
			],
			[
				84,
				25
			],
			[
				126,
				24
			],
			[
				12,
				37
			],
			[
				142,
				39
			],
			[
				51,
				69
			]
		],
		[
			[
				15205,
				39320
			],
			[
				0,
				0
			],
			[
				28,
				39
			],
			[
				81,
				23
			],
			[
				60,
				5
			],
			[
				71,
				35
			],
			[
				107,
				-19
			],
			[
				15,
				14
			],
			[
				3,
				4
			],
			[
				-2,
				2
			],
			[
				-27,
				36
			],
			[
				-130,
				-7
			],
			[
				-121,
				-43
			],
			[
				-311,
				-35
			],
			[
				-21,
				25
			],
			[
				-74,
				12
			],
			[
				-54,
				80
			],
			[
				75,
				91
			],
			[
				66,
				28
			],
			[
				1,
				63
			],
			[
				146,
				58
			],
			[
				-9,
				36
			],
			[
				64,
				25
			],
			[
				3,
				39
			],
			[
				-45,
				5
			],
			[
				-75,
				-44
			],
			[
				-42,
				-13
			],
			[
				31,
				87
			],
			[
				102,
				31
			],
			[
				30,
				75
			],
			[
				154,
				47
			],
			[
				-24,
				32
			],
			[
				108,
				65
			],
			[
				24,
				-68
			],
			[
				114,
				41
			],
			[
				3,
				23
			],
			[
				38,
				5
			],
			[
				4,
				-47
			],
			[
				-55,
				-106
			],
			[
				-6,
				-12
			],
			[
				-303,
				-100
			],
			[
				-3,
				-71
			],
			[
				99,
				39
			],
			[
				25,
				10
			],
			[
				95,
				-10
			],
			[
				36,
				50
			],
			[
				79,
				23
			],
			[
				27,
				26
			],
			[
				9,
				8
			],
			[
				0,
				31
			],
			[
				0,
				49
			],
			[
				49,
				20
			],
			[
				24,
				-33
			],
			[
				0,
				-27
			],
			[
				24,
				0
			],
			[
				44,
				58
			],
			[
				17,
				1
			],
			[
				28,
				3
			],
			[
				10,
				0
			],
			[
				7,
				1
			],
			[
				3,
				57
			],
			[
				4,
				64
			],
			[
				-26,
				0
			],
			[
				-15,
				1
			],
			[
				6,
				-68
			],
			[
				-52,
				-22
			],
			[
				-88,
				109
			],
			[
				184,
				135
			],
			[
				46,
				14
			],
			[
				52,
				16
			],
			[
				25,
				-46
			],
			[
				50,
				45
			],
			[
				31,
				-20
			],
			[
				-97,
				-87
			],
			[
				23,
				-57
			],
			[
				125,
				102
			]
		],
		[
			[
				16075,
				40273
			],
			[
				0,
				0
			],
			[
				170,
				139
			],
			[
				245,
				100
			],
			[
				-4,
				25
			],
			[
				130,
				32
			],
			[
				8,
				39
			],
			[
				88,
				23
			],
			[
				-3,
				-50
			],
			[
				15,
				-33
			],
			[
				46,
				-31
			],
			[
				21,
				-5
			],
			[
				27,
				18
			],
			[
				-7,
				66
			],
			[
				-1,
				8
			],
			[
				-50,
				-13
			],
			[
				6,
				91
			],
			[
				62,
				1
			],
			[
				-7,
				65
			],
			[
				-1,
				5
			],
			[
				-10,
				-6
			],
			[
				-101,
				-55
			],
			[
				17,
				67
			],
			[
				-55,
				-22
			],
			[
				-97,
				-73
			],
			[
				-104,
				-38
			],
			[
				-21,
				54
			],
			[
				-7,
				15
			],
			[
				17,
				48
			],
			[
				182,
				133
			],
			[
				176,
				149
			],
			[
				-66,
				-14
			],
			[
				-284,
				-222
			],
			[
				-13,
				-10
			],
			[
				-65,
				16
			],
			[
				8,
				6
			],
			[
				119,
				92
			],
			[
				-76,
				-15
			],
			[
				-153,
				-110
			],
			[
				-3,
				-2
			],
			[
				0,
				2
			],
			[
				10,
				31
			],
			[
				-97,
				10
			],
			[
				28,
				-36
			],
			[
				-95,
				-47
			],
			[
				-41,
				-20
			],
			[
				-73,
				-22
			],
			[
				-10,
				70
			],
			[
				86,
				113
			],
			[
				57,
				0
			],
			[
				9,
				0
			],
			[
				1,
				16
			],
			[
				4,
				85
			],
			[
				-39,
				8
			],
			[
				-1,
				41
			],
			[
				22,
				13
			],
			[
				74,
				-52
			],
			[
				80,
				-56
			],
			[
				18,
				28
			],
			[
				-20,
				33
			],
			[
				-56,
				30
			],
			[
				-31,
				17
			],
			[
				-43,
				45
			],
			[
				-3,
				87
			],
			[
				43,
				43
			],
			[
				34,
				15
			],
			[
				72,
				-91
			],
			[
				5,
				-7
			],
			[
				27,
				58
			],
			[
				-9,
				6
			],
			[
				-49,
				34
			],
			[
				-29,
				57
			],
			[
				46,
				13
			],
			[
				32,
				9
			],
			[
				59,
				77
			],
			[
				-66,
				31
			],
			[
				-124,
				183
			],
			[
				60,
				-13
			],
			[
				-37,
				121
			],
			[
				138,
				57
			],
			[
				177,
				-163
			],
			[
				36,
				-34
			],
			[
				37,
				18
			],
			[
				67,
				32
			]
		],
		[
			[
				16683,
				41608
			],
			[
				0,
				0
			],
			[
				154,
				76
			],
			[
				80,
				39
			],
			[
				-5,
				93
			],
			[
				-142,
				-81
			],
			[
				-35,
				-15
			],
			[
				-61,
				16
			],
			[
				-123,
				47
			],
			[
				-37,
				58
			],
			[
				1,
				73
			],
			[
				105,
				111
			],
			[
				45,
				42
			],
			[
				41,
				27
			],
			[
				5,
				-3
			],
			[
				101,
				-72
			],
			[
				22,
				18
			],
			[
				-23,
				55
			],
			[
				-19,
				47
			],
			[
				28,
				85
			],
			[
				-58,
				54
			],
			[
				-28,
				-29
			],
			[
				-15,
				35
			],
			[
				23,
				115
			],
			[
				42,
				33
			],
			[
				49,
				-21
			],
			[
				19,
				-32
			],
			[
				52,
				-88
			],
			[
				51,
				-1
			],
			[
				-56,
				119
			],
			[
				-8,
				17
			],
			[
				56,
				4
			],
			[
				46,
				4
			],
			[
				18,
				-39
			],
			[
				-10,
				-57
			],
			[
				54,
				-41
			],
			[
				20,
				107
			],
			[
				-37,
				33
			],
			[
				14,
				31
			],
			[
				2,
				6
			],
			[
				147,
				-50
			],
			[
				12,
				-8
			],
			[
				38,
				-26
			],
			[
				8,
				-58
			],
			[
				-34,
				-83
			],
			[
				17,
				-1
			],
			[
				34,
				-2
			],
			[
				13,
				32
			],
			[
				38,
				95
			],
			[
				10,
				27
			],
			[
				-32,
				34
			],
			[
				-127,
				68
			],
			[
				-24,
				13
			],
			[
				-125,
				52
			],
			[
				-16,
				7
			],
			[
				-40,
				51
			],
			[
				71,
				88
			],
			[
				80,
				-1
			],
			[
				101,
				81
			],
			[
				-66,
				58
			],
			[
				97,
				116
			],
			[
				84,
				-139
			],
			[
				6,
				-11
			]
		],
		[
			[
				17346,
				42817
			],
			[
				0,
				0
			],
			[
				33,
				-53
			],
			[
				49,
				3
			],
			[
				-15,
				53
			],
			[
				-20,
				27
			],
			[
				-51,
				69
			],
			[
				35,
				40
			],
			[
				-25,
				50
			],
			[
				16,
				42
			],
			[
				93,
				13
			],
			[
				0,
				-12
			],
			[
				1,
				-80
			],
			[
				46,
				-44
			],
			[
				45,
				27
			],
			[
				-54,
				62
			],
			[
				8,
				46
			],
			[
				45,
				-7
			],
			[
				75,
				-60
			],
			[
				43,
				61
			],
			[
				2,
				36
			],
			[
				2,
				20
			],
			[
				-28,
				-12
			],
			[
				-61,
				-25
			],
			[
				-52,
				30
			],
			[
				-28,
				17
			],
			[
				29,
				62
			],
			[
				-47,
				55
			],
			[
				19,
				44
			],
			[
				57,
				4
			],
			[
				-58,
				63
			],
			[
				-15,
				88
			],
			[
				57,
				-14
			],
			[
				65,
				47
			],
			[
				235,
				-199
			],
			[
				5,
				-4
			],
			[
				48,
				27
			],
			[
				-33,
				31
			],
			[
				-34,
				32
			],
			[
				-78,
				44
			],
			[
				-61,
				63
			],
			[
				-8,
				114
			],
			[
				180,
				-33
			],
			[
				29,
				-5
			],
			[
				50,
				-98
			],
			[
				54,
				-35
			],
			[
				4,
				-53
			],
			[
				53,
				33
			],
			[
				47,
				66
			],
			[
				94,
				4
			],
			[
				3,
				39
			],
			[
				-83,
				19
			],
			[
				-45,
				-30
			],
			[
				-58,
				16
			],
			[
				-30,
				19
			],
			[
				55,
				45
			],
			[
				-24,
				67
			],
			[
				-3,
				2
			],
			[
				-48,
				38
			],
			[
				-92,
				-23
			],
			[
				-26,
				35
			],
			[
				51,
				37
			],
			[
				-57,
				51
			],
			[
				-192,
				-44
			],
			[
				5,
				-41
			],
			[
				-41,
				-12
			],
			[
				-105,
				131
			],
			[
				182,
				144
			]
		],
		[
			[
				17979,
				43715
			],
			[
				1,
				-3
			],
			[
				1,
				0
			]
		],
		[
			[
				15758,
				40301
			],
			[
				-136,
				-91
			],
			[
				-24,
				16
			],
			[
				3,
				39
			],
			[
				21,
				31
			],
			[
				64,
				47
			],
			[
				55,
				11
			],
			[
				17,
				-53
			]
		],
		[
			[
				14344,
				39589
			],
			[
				-59,
				-12
			],
			[
				14,
				151
			],
			[
				21,
				54
			],
			[
				65,
				67
			],
			[
				26,
				18
			],
			[
				64,
				-60
			],
			[
				-8,
				-75
			],
			[
				-41,
				-86
			],
			[
				-52,
				-36
			],
			[
				-30,
				-21
			]
		],
		[
			[
				17072,
				42751
			],
			[
				-51,
				-26
			],
			[
				-52,
				81
			],
			[
				8,
				17
			],
			[
				25,
				35
			],
			[
				27,
				15
			],
			[
				25,
				4
			],
			[
				34,
				-22
			],
			[
				9,
				-37
			],
			[
				-25,
				-67
			]
		],
		[
			[
				16934,
				42678
			],
			[
				-28,
				-3
			],
			[
				-31,
				26
			],
			[
				-13,
				39
			],
			[
				7,
				44
			],
			[
				28,
				20
			],
			[
				18,
				2
			],
			[
				24,
				-12
			],
			[
				10,
				-19
			],
			[
				1,
				-9
			],
			[
				1,
				-15
			],
			[
				-3,
				-45
			],
			[
				-14,
				-28
			]
		],
		[
			[
				16285,
				42269
			],
			[
				-135,
				-100
			],
			[
				14,
				66
			],
			[
				11,
				54
			],
			[
				15,
				35
			],
			[
				54,
				62
			],
			[
				31,
				-42
			],
			[
				17,
				-49
			],
			[
				-7,
				-26
			]
		],
		[
			[
				14434,
				38792
			],
			[
				-6,
				-52
			],
			[
				17,
				-80
			],
			[
				51,
				-2
			],
			[
				25,
				-47
			],
			[
				-16,
				-33
			],
			[
				-32,
				-17
			],
			[
				-48,
				21
			],
			[
				-59,
				67
			],
			[
				35,
				12
			],
			[
				4,
				25
			],
			[
				-50,
				49
			],
			[
				-37,
				-16
			],
			[
				3,
				-48
			],
			[
				-36,
				-15
			],
			[
				-37,
				97
			],
			[
				51,
				61
			],
			[
				27,
				54
			],
			[
				63,
				55
			],
			[
				5,
				-43
			],
			[
				59,
				-48
			],
			[
				-19,
				-40
			]
		],
		[
			[
				14787,
				38640
			],
			[
				32,
				-22
			],
			[
				-66,
				-62
			],
			[
				-74,
				1
			],
			[
				-34,
				18
			],
			[
				-5,
				50
			],
			[
				58,
				-5
			],
			[
				73,
				32
			],
			[
				16,
				-12
			]
		],
		[
			[
				17468,
				43270
			],
			[
				-41,
				-26
			],
			[
				-88,
				36
			],
			[
				-16,
				32
			],
			[
				-2,
				7
			],
			[
				1,
				16
			],
			[
				1,
				12
			],
			[
				10,
				9
			],
			[
				22,
				5
			],
			[
				42,
				2
			],
			[
				26,
				-7
			],
			[
				22,
				-14
			],
			[
				28,
				-23
			],
			[
				3,
				-26
			],
			[
				-8,
				-23
			]
		],
		[
			[
				17324,
				43214
			],
			[
				-53,
				-30
			],
			[
				-40,
				22
			],
			[
				-39,
				27
			],
			[
				-19,
				36
			],
			[
				24,
				30
			],
			[
				32,
				19
			],
			[
				12,
				-9
			],
			[
				58,
				-45
			],
			[
				9,
				-13
			],
			[
				16,
				-37
			]
		],
		[
			[
				17093,
				43005
			],
			[
				-95,
				-63
			],
			[
				-31,
				12
			],
			[
				-17,
				23
			],
			[
				6,
				59
			],
			[
				22,
				57
			],
			[
				50,
				8
			],
			[
				58,
				-47
			],
			[
				7,
				-49
			]
		],
		[
			[
				16292,
				41369
			],
			[
				-17,
				-11
			],
			[
				-5,
				-2
			],
			[
				-57,
				2
			],
			[
				-48,
				-50
			],
			[
				-79,
				-37
			],
			[
				-11,
				34
			],
			[
				-68,
				13
			],
			[
				-38,
				48
			],
			[
				24,
				24
			],
			[
				-11,
				32
			],
			[
				-39,
				15
			],
			[
				40,
				102
			],
			[
				129,
				56
			],
			[
				165,
				-186
			],
			[
				27,
				-33
			],
			[
				-12,
				-7
			]
		],
		[
			[
				15859,
				41375
			],
			[
				14,
				-95
			],
			[
				31,
				7
			],
			[
				35,
				-43
			],
			[
				38,
				-48
			],
			[
				34,
				-60
			],
			[
				1,
				-37
			],
			[
				-57,
				-47
			],
			[
				-18,
				8
			],
			[
				-37,
				-34
			],
			[
				-44,
				-33
			],
			[
				-39,
				11
			],
			[
				-53,
				44
			],
			[
				5,
				42
			],
			[
				53,
				69
			],
			[
				-34,
				33
			],
			[
				-97,
				-21
			],
			[
				-28,
				66
			],
			[
				48,
				59
			],
			[
				71,
				-29
			],
			[
				21,
				30
			],
			[
				-15,
				59
			],
			[
				33,
				24
			],
			[
				38,
				-5
			]
		],
		[
			[
				16129,
				40533
			],
			[
				97,
				74
			],
			[
				90,
				48
			],
			[
				41,
				22
			],
			[
				20,
				-4
			],
			[
				43,
				-9
			],
			[
				3,
				-10
			],
			[
				11,
				-35
			],
			[
				-4,
				-53
			],
			[
				-7,
				-25
			],
			[
				-113,
				-61
			],
			[
				-24,
				14
			],
			[
				-4,
				50
			],
			[
				-114,
				-60
			],
			[
				-22,
				-12
			],
			[
				16,
				-37
			],
			[
				-109,
				-84
			],
			[
				-65,
				43
			],
			[
				58,
				56
			],
			[
				-32,
				23
			],
			[
				15,
				28
			],
			[
				49,
				-7
			],
			[
				51,
				39
			]
		],
		[
			[
				15998,
				40560
			],
			[
				-47,
				-81
			],
			[
				-68,
				-3
			],
			[
				-12,
				72
			],
			[
				32,
				38
			],
			[
				30,
				20
			],
			[
				17,
				0
			],
			[
				36,
				-1
			],
			[
				25,
				-17
			],
			[
				-3,
				-11
			],
			[
				-10,
				-17
			]
		],
		[
			[
				5413,
				29669
			],
			[
				-14,
				50
			],
			[
				-102,
				140
			],
			[
				70,
				72
			],
			[
				-8,
				17
			],
			[
				-21,
				39
			],
			[
				-24,
				48
			],
			[
				43,
				53
			],
			[
				132,
				58
			],
			[
				27,
				-24
			],
			[
				76,
				23
			],
			[
				162,
				-66
			],
			[
				1,
				-47
			],
			[
				2,
				-128
			],
			[
				56,
				-68
			],
			[
				9,
				-119
			],
			[
				43,
				-32
			],
			[
				-3,
				63
			],
			[
				-3,
				86
			],
			[
				-50,
				90
			],
			[
				-4,
				7
			],
			[
				17,
				92
			],
			[
				15,
				81
			],
			[
				-2,
				39
			],
			[
				-66,
				40
			],
			[
				-39,
				3
			],
			[
				9,
				28
			],
			[
				0,
				0
			],
			[
				51,
				23
			],
			[
				126,
				106
			],
			[
				93,
				30
			],
			[
				123,
				53
			],
			[
				106,
				64
			],
			[
				96,
				-23
			],
			[
				-9,
				-92
			],
			[
				139,
				-37
			],
			[
				62,
				46
			],
			[
				63,
				-16
			],
			[
				58,
				-7
			],
			[
				36,
				-5
			],
			[
				50,
				-39
			]
		],
		[
			[
				6733,
				30317
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				40,
				-31
			],
			[
				-12,
				-25
			],
			[
				77,
				-38
			],
			[
				4,
				-33
			],
			[
				-38,
				-45
			],
			[
				-56,
				-140
			],
			[
				42,
				-82
			],
			[
				-15,
				-15
			],
			[
				0,
				0
			]
		],
		[
			[
				6775,
				29908
			],
			[
				-10,
				-11
			],
			[
				40,
				-102
			],
			[
				51,
				-32
			],
			[
				0,
				-140
			],
			[
				109,
				-110
			],
			[
				0,
				0
			],
			[
				32,
				-124
			],
			[
				40,
				-30
			],
			[
				87,
				5
			],
			[
				4,
				-36
			],
			[
				-28,
				-66
			],
			[
				18,
				-53
			],
			[
				6,
				-147
			],
			[
				-12,
				-189
			],
			[
				34,
				-105
			],
			[
				10,
				-115
			],
			[
				-12,
				-37
			],
			[
				-33,
				-34
			],
			[
				-43,
				-21
			],
			[
				-65,
				-78
			],
			[
				-92,
				-157
			],
			[
				-13,
				-88
			],
			[
				-198,
				-227
			],
			[
				-1,
				-2
			],
			[
				9,
				-12
			],
			[
				0,
				-2
			],
			[
				19,
				-25
			],
			[
				110,
				88
			],
			[
				27,
				22
			],
			[
				13,
				14
			],
			[
				40,
				45
			],
			[
				144,
				-80
			],
			[
				67,
				-67
			],
			[
				169,
				10
			],
			[
				100,
				57
			],
			[
				75,
				125
			],
			[
				52,
				11
			],
			[
				113,
				-43
			],
			[
				57,
				-78
			],
			[
				24,
				24
			],
			[
				0,
				0
			],
			[
				6,
				5
			],
			[
				-47,
				86
			],
			[
				-119,
				75
			],
			[
				-102,
				-11
			],
			[
				-67,
				-108
			],
			[
				-54,
				-64
			],
			[
				-24,
				-4
			],
			[
				-108,
				-16
			],
			[
				-10,
				-1
			],
			[
				-39,
				18
			],
			[
				-67,
				72
			],
			[
				-101,
				55
			],
			[
				75,
				178
			],
			[
				152,
				159
			],
			[
				19,
				136
			],
			[
				-23,
				136
			],
			[
				10,
				45
			]
		],
		[
			[
				7219,
				28859
			],
			[
				0,
				0
			],
			[
				13,
				56
			],
			[
				-27,
				273
			],
			[
				1,
				88
			],
			[
				34,
				36
			],
			[
				99,
				4
			],
			[
				80,
				-24
			],
			[
				45,
				8
			],
			[
				33,
				23
			],
			[
				122,
				-122
			],
			[
				6,
				-7
			],
			[
				65,
				8
			],
			[
				67,
				-14
			],
			[
				29,
				-54
			],
			[
				34,
				35
			],
			[
				0,
				55
			],
			[
				76,
				125
			],
			[
				131,
				-15
			],
			[
				40,
				34
			],
			[
				29,
				-7
			],
			[
				6,
				-38
			],
			[
				57,
				-64
			],
			[
				37,
				-13
			],
			[
				86,
				-126
			],
			[
				29,
				-44
			],
			[
				34,
				-74
			],
			[
				53,
				6
			],
			[
				-38,
				77
			],
			[
				34,
				-5
			],
			[
				7,
				48
			],
			[
				-43,
				35
			],
			[
				-159,
				164
			],
			[
				-17,
				49
			],
			[
				-42,
				35
			],
			[
				-108,
				16
			],
			[
				-74,
				-30
			],
			[
				-58,
				42
			],
			[
				-16,
				-1
			],
			[
				-12,
				0
			],
			[
				-30,
				-2
			],
			[
				-83,
				-71
			],
			[
				-65,
				-19
			],
			[
				-28,
				3
			],
			[
				-33,
				4
			],
			[
				-80,
				68
			],
			[
				-8,
				3
			],
			[
				0,
				0
			]
		],
		[
			[
				7545,
				29424
			],
			[
				-70,
				17
			],
			[
				-92,
				-26
			],
			[
				-21,
				56
			],
			[
				-72,
				42
			],
			[
				-161,
				-4
			],
			[
				-16,
				7
			],
			[
				-43,
				17
			],
			[
				-70,
				108
			],
			[
				-31,
				101
			],
			[
				0,
				0
			]
		],
		[
			[
				6969,
				29742
			],
			[
				-67,
				224
			],
			[
				95,
				-6
			],
			[
				53,
				13
			],
			[
				0,
				5
			],
			[
				9,
				50
			],
			[
				-85,
				21
			],
			[
				-45,
				266
			],
			[
				-109,
				89
			],
			[
				0,
				0
			]
		],
		[
			[
				6820,
				30404
			],
			[
				-65,
				53
			],
			[
				18,
				24
			],
			[
				-56,
				66
			],
			[
				-80,
				11
			],
			[
				-42,
				-24
			],
			[
				-61,
				25
			],
			[
				-117,
				-20
			],
			[
				2,
				51
			],
			[
				109,
				35
			],
			[
				9,
				72
			],
			[
				-323,
				-52
			],
			[
				-16,
				46
			],
			[
				0,
				0
			]
		],
		[
			[
				3418,
				29428
			],
			[
				-15,
				1
			],
			[
				0,
				6
			]
		],
		[
			[
				3403,
				29435
			],
			[
				0,
				0
			],
			[
				3,
				28
			],
			[
				46,
				9
			],
			[
				-10,
				72
			],
			[
				30,
				31
			],
			[
				-32,
				33
			],
			[
				-32,
				-14
			],
			[
				-28,
				16
			],
			[
				48,
				41
			],
			[
				146,
				31
			],
			[
				41,
				-87
			],
			[
				-12,
				-39
			],
			[
				-92,
				-56
			],
			[
				-25,
				-72
			],
			[
				-68,
				0
			],
			[
				0,
				0
			]
		],
		[
			[
				3568,
				29361
			],
			[
				2,
				-20
			],
			[
				3,
				-29
			],
			[
				-25,
				-75
			],
			[
				-105,
				-105
			],
			[
				4,
				-76
			],
			[
				68,
				0
			],
			[
				7,
				-97
			],
			[
				-31,
				-19
			],
			[
				-35,
				-64
			],
			[
				-40,
				-37
			],
			[
				0,
				0
			]
		],
		[
			[
				3416,
				28839
			],
			[
				-39,
				-36
			],
			[
				-135,
				-12
			],
			[
				-253,
				-83
			],
			[
				-100,
				-33
			],
			[
				-84,
				52
			],
			[
				-22,
				75
			],
			[
				-7,
				21
			],
			[
				-105,
				123
			],
			[
				29,
				63
			],
			[
				130,
				-78
			],
			[
				44,
				29
			],
			[
				152,
				-72
			],
			[
				1,
				45
			],
			[
				-99,
				60
			],
			[
				-119,
				19
			],
			[
				-136,
				89
			],
			[
				1,
				69
			],
			[
				60,
				7
			],
			[
				65,
				-39
			],
			[
				28,
				31
			],
			[
				-68,
				43
			],
			[
				-41,
				63
			],
			[
				11,
				82
			],
			[
				13,
				13
			]
		],
		[
			[
				2742,
				29370
			],
			[
				0,
				0
			],
			[
				46,
				49
			],
			[
				131,
				9
			],
			[
				58,
				-15
			],
			[
				36,
				41
			],
			[
				103,
				-24
			],
			[
				20,
				43
			],
			[
				81,
				-57
			],
			[
				7,
				82
			],
			[
				0,
				1
			],
			[
				65,
				2
			],
			[
				49,
				-22
			],
			[
				-37,
				-61
			],
			[
				-24,
				-60
			],
			[
				10,
				-29
			],
			[
				63,
				36
			],
			[
				112,
				23
			],
			[
				73,
				-12
			]
		],
		[
			[
				3535,
				29376
			],
			[
				0,
				0
			],
			[
				32,
				-5
			],
			[
				1,
				-10
			],
			[
				0,
				0
			]
		],
		[
			[
				2955,
				30170
			],
			[
				58,
				-18
			],
			[
				47,
				34
			],
			[
				6,
				-61
			],
			[
				-52,
				-68
			],
			[
				-67,
				-2
			],
			[
				-32,
				-29
			],
			[
				-30,
				22
			],
			[
				34,
				36
			],
			[
				-83,
				96
			],
			[
				-3,
				53
			],
			[
				92,
				-19
			],
			[
				30,
				-44
			]
		],
		[
			[
				3233,
				29910
			],
			[
				11,
				-67
			],
			[
				30,
				16
			],
			[
				6,
				41
			],
			[
				34,
				11
			],
			[
				12,
				-40
			],
			[
				-10,
				-99
			],
			[
				-25,
				-10
			],
			[
				-29,
				-72
			],
			[
				9,
				-27
			],
			[
				27,
				9
			],
			[
				1,
				-51
			],
			[
				-64,
				-26
			],
			[
				-43,
				3
			],
			[
				-71,
				4
			],
			[
				-49,
				13
			],
			[
				15,
				33
			],
			[
				51,
				19
			],
			[
				9,
				4
			],
			[
				14,
				86
			],
			[
				-73,
				71
			],
			[
				19,
				27
			],
			[
				16,
				21
			],
			[
				110,
				34
			]
		],
		[
			[
				3052,
				29587
			],
			[
				-36,
				-14
			],
			[
				-33,
				26
			],
			[
				-96,
				52
			],
			[
				8,
				52
			],
			[
				64,
				34
			],
			[
				47,
				25
			],
			[
				80,
				12
			],
			[
				24,
				-83
			],
			[
				-6,
				-3
			],
			[
				-86,
				-55
			],
			[
				34,
				-46
			]
		],
		[
			[
				2623,
				29639
			],
			[
				-87,
				-60
			],
			[
				-24,
				16
			],
			[
				-3,
				37
			],
			[
				15,
				5
			],
			[
				5,
				21
			],
			[
				-26,
				25
			],
			[
				66,
				54
			],
			[
				53,
				-65
			],
			[
				1,
				-33
			]
		],
		[
			[
				2766,
				29863
			],
			[
				55,
				-27
			],
			[
				35,
				34
			],
			[
				42,
				-100
			],
			[
				-4,
				-17
			],
			[
				-4,
				-17
			],
			[
				-115,
				-42
			],
			[
				-59,
				-25
			],
			[
				-55,
				-6
			],
			[
				-18,
				59
			],
			[
				-42,
				29
			],
			[
				45,
				34
			],
			[
				9,
				45
			],
			[
				-20,
				31
			],
			[
				-42,
				17
			],
			[
				-24,
				26
			],
			[
				188,
				60
			],
			[
				-13,
				-71
			],
			[
				22,
				-30
			]
		],
		[
			[
				2977,
				29995
			],
			[
				22,
				-64
			],
			[
				28,
				6
			],
			[
				80,
				23
			],
			[
				-3,
				-61
			],
			[
				-16,
				-6
			],
			[
				-61,
				-25
			],
			[
				-53,
				-4
			],
			[
				-35,
				19
			],
			[
				-19,
				42
			],
			[
				6,
				9
			],
			[
				51,
				61
			]
		],
		[
			[
				2553,
				27496
			],
			[
				0,
				0
			],
			[
				4,
				3
			],
			[
				77,
				208
			],
			[
				32,
				21
			],
			[
				-23,
				94
			],
			[
				5,
				110
			],
			[
				73,
				11
			],
			[
				32,
				-50
			],
			[
				1,
				0
			],
			[
				42,
				-20
			],
			[
				13,
				11
			],
			[
				36,
				32
			],
			[
				31,
				-40
			],
			[
				26,
				-116
			],
			[
				21,
				-12
			],
			[
				20,
				16
			],
			[
				-16,
				71
			],
			[
				25,
				17
			],
			[
				-13,
				63
			],
			[
				-45,
				55
			],
			[
				-93,
				17
			],
			[
				-17,
				82
			],
			[
				-67,
				27
			],
			[
				-184,
				11
			],
			[
				-70,
				-22
			],
			[
				-73,
				27
			],
			[
				-11,
				76
			],
			[
				-88,
				106
			],
			[
				102,
				190
			],
			[
				-4,
				113
			],
			[
				78,
				114
			],
			[
				54,
				15
			],
			[
				24,
				50
			],
			[
				0,
				1
			],
			[
				7,
				-6
			],
			[
				82,
				-77
			],
			[
				118,
				-138
			],
			[
				86,
				-25
			],
			[
				85,
				17
			],
			[
				75,
				48
			],
			[
				13,
				-28
			],
			[
				0,
				-1
			],
			[
				100,
				-219
			],
			[
				-8,
				-131
			],
			[
				83,
				-116
			],
			[
				71,
				-99
			],
			[
				53,
				20
			],
			[
				17,
				40
			],
			[
				-56,
				64
			],
			[
				-112,
				127
			],
			[
				20,
				88
			],
			[
				-79,
				241
			],
			[
				-6,
				19
			],
			[
				119,
				-35
			],
			[
				73,
				20
			],
			[
				20,
				52
			],
			[
				94,
				6
			],
			[
				85,
				50
			],
			[
				1,
				19
			],
			[
				4,
				45
			],
			[
				56,
				-6
			],
			[
				4,
				-1
			],
			[
				11,
				5
			],
			[
				53,
				24
			]
		],
		[
			[
				3614,
				28780
			],
			[
				0,
				0
			],
			[
				31,
				14
			],
			[
				22,
				-16
			],
			[
				25,
				-19
			],
			[
				35,
				14
			],
			[
				19,
				8
			],
			[
				88,
				-90
			],
			[
				88,
				-168
			],
			[
				1,
				-2
			],
			[
				17,
				-32
			],
			[
				-48,
				-146
			],
			[
				29,
				-96
			],
			[
				-31,
				-131
			],
			[
				-167,
				-368
			],
			[
				-5,
				-10
			],
			[
				-104,
				-229
			],
			[
				40,
				-62
			],
			[
				96,
				213
			],
			[
				47,
				39
			],
			[
				109,
				254
			],
			[
				54,
				73
			],
			[
				41,
				93
			],
			[
				11,
				140
			],
			[
				-34,
				79
			],
			[
				16,
				27
			],
			[
				44,
				13
			],
			[
				57,
				-2
			],
			[
				24,
				-15
			],
			[
				35,
				-75
			],
			[
				32,
				-68
			],
			[
				7,
				-15
			],
			[
				33,
				-42
			],
			[
				62,
				-22
			],
			[
				52,
				-50
			],
			[
				20,
				-58
			],
			[
				-62,
				-147
			],
			[
				-12,
				-6
			],
			[
				-39,
				-18
			],
			[
				-60,
				-135
			],
			[
				33,
				3
			],
			[
				37,
				30
			],
			[
				1,
				1
			],
			[
				30,
				78
			],
			[
				15,
				-16
			],
			[
				26,
				-28
			],
			[
				4,
				-5
			],
			[
				1,
				3
			],
			[
				29,
				107
			],
			[
				71,
				49
			],
			[
				43,
				-5
			],
			[
				72,
				-8
			],
			[
				23,
				16
			],
			[
				56,
				41
			],
			[
				93,
				-61
			],
			[
				14,
				-10
			],
			[
				5,
				3
			],
			[
				43,
				26
			],
			[
				47,
				-68
			],
			[
				3,
				-5
			],
			[
				6,
				0
			],
			[
				67,
				-5
			],
			[
				18,
				76
			],
			[
				64,
				-52
			],
			[
				-20,
				-45
			],
			[
				64,
				-44
			],
			[
				1,
				0
			],
			[
				0,
				0
			],
			[
				20,
				97
			],
			[
				-25,
				54
			],
			[
				-3,
				7
			],
			[
				-9,
				-1
			],
			[
				-46,
				0
			],
			[
				-27,
				35
			],
			[
				-99,
				-19
			],
			[
				1,
				39
			],
			[
				-96,
				-14
			],
			[
				-43,
				51
			],
			[
				-72,
				35
			],
			[
				-91,
				-49
			],
			[
				-27,
				9
			],
			[
				-5,
				53
			],
			[
				-28,
				38
			],
			[
				-10,
				12
			],
			[
				-26,
				32
			],
			[
				-29,
				25
			],
			[
				-71,
				69
			],
			[
				-31,
				30
			],
			[
				-3,
				37
			],
			[
				-3,
				32
			],
			[
				-49,
				55
			],
			[
				-56,
				63
			],
			[
				-91,
				58
			],
			[
				-76,
				161
			],
			[
				-63,
				29
			],
			[
				-33,
				41
			],
			[
				42,
				24
			],
			[
				-83,
				87
			],
			[
				-19,
				19
			],
			[
				66,
				42
			]
		],
		[
			[
				3948,
				28957
			],
			[
				0,
				0
			],
			[
				47,
				30
			],
			[
				51,
				-29
			],
			[
				23,
				-132
			],
			[
				81,
				-72
			],
			[
				63,
				31
			],
			[
				114,
				-79
			],
			[
				67,
				-12
			],
			[
				50,
				3
			],
			[
				2,
				0
			],
			[
				1,
				0
			],
			[
				14,
				84
			],
			[
				-115,
				30
			],
			[
				-84,
				41
			],
			[
				-58,
				14
			],
			[
				-76,
				11
			],
			[
				-27,
				150
			],
			[
				-55,
				60
			],
			[
				-45,
				3
			],
			[
				-8,
				14
			],
			[
				-13,
				19
			],
			[
				-2,
				3
			],
			[
				43,
				65
			],
			[
				27,
				64
			],
			[
				57,
				16
			],
			[
				104,
				88
			],
			[
				579,
				488
			],
			[
				1,
				0
			],
			[
				106,
				22
			],
			[
				1,
				1
			],
			[
				89,
				48
			],
			[
				43,
				23
			],
			[
				15,
				27
			],
			[
				17,
				-3
			],
			[
				22,
				-4
			],
			[
				1,
				0
			],
			[
				55,
				-11
			],
			[
				10,
				-135
			],
			[
				78,
				-114
			],
			[
				60,
				-94
			],
			[
				37,
				-127
			],
			[
				36,
				-99
			],
			[
				-8,
				-78
			],
			[
				26,
				-112
			],
			[
				127,
				-78
			],
			[
				66,
				-212
			],
			[
				-51,
				-38
			],
			[
				4,
				-20
			],
			[
				8,
				-43
			],
			[
				57,
				16
			],
			[
				14,
				-57
			],
			[
				58,
				-102
			],
			[
				34,
				-18
			],
			[
				13,
				-6
			],
			[
				32,
				-70
			],
			[
				27,
				-54
			],
			[
				72,
				-101
			],
			[
				-12,
				-78
			],
			[
				-89,
				-64
			],
			[
				-15,
				-118
			],
			[
				43,
				-8
			],
			[
				10,
				71
			],
			[
				41,
				40
			],
			[
				62,
				-5
			],
			[
				53,
				81
			],
			[
				-2,
				66
			],
			[
				-68,
				165
			],
			[
				-97,
				174
			],
			[
				78,
				38
			],
			[
				49,
				24
			],
			[
				100,
				-37
			],
			[
				34,
				-29
			],
			[
				26,
				-21
			],
			[
				7,
				34
			],
			[
				-37,
				55
			],
			[
				-90,
				30
			],
			[
				-56,
				33
			],
			[
				-185,
				-43
			],
			[
				-1,
				-1
			],
			[
				-1,
				0
			],
			[
				0,
				1
			],
			[
				20,
				44
			],
			[
				-29,
				110
			],
			[
				-33,
				90
			],
			[
				-45,
				122
			],
			[
				-10,
				28
			],
			[
				-79,
				76
			],
			[
				-26,
				124
			],
			[
				-57,
				121
			],
			[
				5,
				56
			],
			[
				-21,
				82
			],
			[
				0,
				0
			]
		],
		[
			[
				3955,
				30304
			],
			[
				0,
				0
			],
			[
				61,
				-6
			],
			[
				77,
				-13
			],
			[
				19,
				-77
			],
			[
				-3,
				-54
			],
			[
				54,
				-96
			],
			[
				22,
				-15
			],
			[
				10,
				-56
			],
			[
				-19,
				-51
			],
			[
				0,
				-1
			],
			[
				18,
				-20
			],
			[
				16,
				-5
			],
			[
				106,
				-33
			],
			[
				9,
				-66
			],
			[
				46,
				7
			],
			[
				54,
				-11
			],
			[
				-208,
				-197
			],
			[
				-37,
				-35
			],
			[
				-251,
				-222
			],
			[
				0,
				-19
			],
			[
				1,
				-22
			],
			[
				0,
				0
			]
		],
		[
			[
				3930,
				29312
			],
			[
				0,
				-8
			],
			[
				-53,
				-45
			],
			[
				-38,
				-111
			],
			[
				-38,
				-21
			],
			[
				-13,
				-6
			],
			[
				-18,
				-1
			],
			[
				-87,
				-4
			],
			[
				-160,
				-1
			],
			[
				75,
				89
			],
			[
				58,
				11
			],
			[
				42,
				60
			],
			[
				-41,
				109
			],
			[
				-17,
				15
			],
			[
				-15,
				12
			],
			[
				-38,
				45
			],
			[
				51,
				21
			],
			[
				6,
				88
			],
			[
				39,
				47
			],
			[
				-41,
				99
			],
			[
				-19,
				45
			],
			[
				-11,
				-4
			],
			[
				-58,
				-26
			],
			[
				8,
				96
			],
			[
				-18,
				18
			],
			[
				-9,
				140
			],
			[
				24,
				24
			],
			[
				74,
				148
			],
			[
				46,
				67
			],
			[
				92,
				56
			],
			[
				164,
				31
			],
			[
				20,
				-2
			]
		],
		[
			[
				2156,
				28897
			],
			[
				41,
				-1
			],
			[
				35,
				43
			],
			[
				106,
				-94
			],
			[
				6,
				-79
			],
			[
				-35,
				-43
			],
			[
				-141,
				90
			],
			[
				-28,
				18
			],
			[
				-39,
				12
			],
			[
				16,
				69
			],
			[
				21,
				5
			],
			[
				12,
				-20
			],
			[
				6,
				0
			]
		],
		[
			[
				2388,
				29235
			],
			[
				54,
				-20
			],
			[
				59,
				18
			],
			[
				24,
				-14
			],
			[
				9,
				-60
			],
			[
				-14,
				-32
			],
			[
				-77,
				37
			],
			[
				-16,
				-14
			],
			[
				55,
				-54
			],
			[
				68,
				-9
			],
			[
				12,
				-36
			],
			[
				-21,
				-37
			],
			[
				-32,
				6
			],
			[
				-25,
				37
			],
			[
				-37,
				-31
			],
			[
				-137,
				43
			],
			[
				-12,
				74
			],
			[
				-46,
				26
			],
			[
				61,
				59
			],
			[
				75,
				7
			]
		],
		[
			[
				3722,
				28993
			],
			[
				-68,
				-24
			],
			[
				2,
				41
			],
			[
				41,
				51
			],
			[
				19,
				16
			],
			[
				22,
				14
			],
			[
				14,
				5
			],
			[
				21,
				3
			],
			[
				12,
				1
			],
			[
				39,
				4
			],
			[
				-7,
				-37
			],
			[
				-13,
				-22
			],
			[
				-33,
				-27
			],
			[
				-14,
				-11
			],
			[
				-16,
				-6
			],
			[
				-19,
				-8
			]
		],
		[
			[
				9535,
				35113
			],
			[
				18,
				26
			],
			[
				81,
				23
			],
			[
				66,
				-52
			],
			[
				20,
				-43
			],
			[
				10,
				-23
			],
			[
				1,
				-59
			],
			[
				0,
				-3
			],
			[
				-67,
				-23
			],
			[
				-71,
				-11
			],
			[
				-8,
				-1
			],
			[
				-103,
				-16
			],
			[
				-86,
				21
			],
			[
				-31,
				-14
			],
			[
				-18,
				47
			],
			[
				29,
				16
			],
			[
				79,
				43
			],
			[
				80,
				69
			]
		],
		[
			[
				9279,
				34952
			],
			[
				-17,
				-6
			],
			[
				5,
				32
			],
			[
				-79,
				39
			],
			[
				42,
				54
			],
			[
				-43,
				13
			],
			[
				18,
				13
			],
			[
				33,
				24
			],
			[
				105,
				18
			],
			[
				37,
				-99
			],
			[
				-22,
				-10
			],
			[
				-25,
				-11
			],
			[
				-19,
				-27
			],
			[
				-3,
				-19
			],
			[
				-2,
				-11
			],
			[
				-30,
				-10
			]
		],
		[
			[
				9603,
				34915
			],
			[
				76,
				19
			],
			[
				7,
				-2
			],
			[
				120,
				-28
			],
			[
				7,
				-1
			],
			[
				-4,
				-83
			],
			[
				-28,
				-90
			],
			[
				7,
				-68
			],
			[
				-33,
				-68
			],
			[
				-55,
				-62
			],
			[
				-125,
				-95
			],
			[
				4,
				-17
			],
			[
				3,
				-13
			],
			[
				-58,
				-31
			],
			[
				-5,
				-3
			],
			[
				-107,
				30
			],
			[
				-30,
				8
			],
			[
				-40,
				-17
			],
			[
				-12,
				-5
			],
			[
				-10,
				18
			],
			[
				-16,
				28
			],
			[
				-50,
				12
			],
			[
				-45,
				10
			],
			[
				-7,
				24
			],
			[
				16,
				13
			],
			[
				10,
				8
			],
			[
				-6,
				34
			],
			[
				-11,
				61
			],
			[
				17,
				5
			],
			[
				23,
				7
			],
			[
				20,
				-78
			],
			[
				16,
				4
			],
			[
				6,
				79
			],
			[
				-5,
				7
			],
			[
				-52,
				82
			],
			[
				19,
				86
			],
			[
				118,
				56
			],
			[
				36,
				-47
			],
			[
				77,
				5
			],
			[
				13,
				86
			],
			[
				86,
				22
			],
			[
				18,
				4
			]
		],
		[
			[
				10021,
				37318
			],
			[
				60,
				50
			],
			[
				57,
				47
			],
			[
				47,
				-53
			],
			[
				164,
				-6
			],
			[
				50,
				63
			],
			[
				35,
				-31
			],
			[
				31,
				-28
			],
			[
				82,
				-95
			],
			[
				28,
				-72
			],
			[
				40,
				-47
			],
			[
				11,
				-199
			],
			[
				61,
				-38
			],
			[
				41,
				-2
			],
			[
				9,
				-146
			],
			[
				-57,
				-139
			],
			[
				-128,
				1
			],
			[
				-14,
				-39
			],
			[
				81,
				0
			],
			[
				8,
				-34
			],
			[
				-179,
				-24
			],
			[
				-12,
				-2
			],
			[
				-56,
				-8
			],
			[
				20,
				-6
			],
			[
				41,
				-13
			],
			[
				59,
				-40
			],
			[
				-96,
				-11
			],
			[
				-23,
				20
			],
			[
				-51,
				5
			],
			[
				-17,
				-33
			],
			[
				-48,
				2
			],
			[
				-4,
				0
			],
			[
				-35,
				8
			],
			[
				-69,
				15
			],
			[
				5,
				-12
			],
			[
				7,
				-22
			],
			[
				-140,
				6
			],
			[
				-35,
				34
			],
			[
				6,
				8
			],
			[
				19,
				31
			],
			[
				-85,
				44
			],
			[
				0,
				51
			],
			[
				270,
				-77
			],
			[
				8,
				32
			],
			[
				-88,
				31
			],
			[
				-161,
				57
			],
			[
				-53,
				19
			],
			[
				-31,
				-46
			],
			[
				-114,
				39
			],
			[
				-50,
				16
			],
			[
				-4,
				36
			],
			[
				-57,
				24
			],
			[
				6,
				-70
			],
			[
				-91,
				-1
			],
			[
				31,
				71
			],
			[
				-97,
				-34
			],
			[
				-37,
				106
			],
			[
				144,
				163
			],
			[
				-147,
				27
			],
			[
				312,
				226
			],
			[
				15,
				-61
			],
			[
				39,
				-31
			],
			[
				10,
				97
			],
			[
				61,
				7
			],
			[
				14,
				-53
			],
			[
				2,
				0
			],
			[
				34,
				-4
			],
			[
				-1,
				20
			],
			[
				-3,
				58
			],
			[
				31,
				26
			],
			[
				44,
				37
			]
		],
		[
			[
				10500,
				36133
			],
			[
				-75,
				-24
			],
			[
				19,
				57
			],
			[
				20,
				2
			],
			[
				37,
				31
			],
			[
				24,
				20
			],
			[
				76,
				97
			],
			[
				59,
				33
			],
			[
				83,
				88
			],
			[
				34,
				-34
			],
			[
				16,
				-56
			],
			[
				-23,
				-31
			],
			[
				-38,
				-32
			],
			[
				-76,
				-29
			],
			[
				-10,
				-25
			],
			[
				-20,
				-11
			],
			[
				-28,
				-14
			],
			[
				-42,
				-22
			],
			[
				-25,
				-15
			],
			[
				-13,
				-9
			],
			[
				-18,
				-26
			]
		],
		[
			[
				10344,
				36174
			],
			[
				-143,
				-39
			],
			[
				-7,
				21
			],
			[
				48,
				65
			],
			[
				47,
				36
			],
			[
				85,
				12
			],
			[
				18,
				19
			],
			[
				16,
				3
			],
			[
				46,
				9
			],
			[
				-22,
				-29
			],
			[
				-62,
				-80
			],
			[
				-26,
				-17
			]
		],
		[
			[
				10276,
				36401
			],
			[
				5,
				-63
			],
			[
				0,
				-2
			],
			[
				-37,
				2
			],
			[
				-37,
				-13
			],
			[
				-73,
				-45
			],
			[
				-59,
				18
			],
			[
				-9,
				65
			],
			[
				36,
				-8
			],
			[
				26,
				-13
			],
			[
				14,
				9
			],
			[
				19,
				28
			],
			[
				12,
				20
			],
			[
				3,
				3
			],
			[
				32,
				15
			],
			[
				46,
				-11
			],
			[
				22,
				-5
			]
		],
		[
			[
				9731,
				36465
			],
			[
				-41,
				-17
			],
			[
				-31,
				37
			],
			[
				-27,
				62
			],
			[
				13,
				44
			],
			[
				9,
				22
			],
			[
				72,
				3
			],
			[
				35,
				-1
			],
			[
				82,
				-31
			],
			[
				14,
				-36
			],
			[
				-73,
				-37
			],
			[
				-23,
				-29
			],
			[
				-30,
				-17
			]
		],
		[
			[
				11058,
				32741
			],
			[
				0,
				0
			],
			[
				9,
				-55
			],
			[
				39,
				-56
			],
			[
				68,
				-16
			],
			[
				19,
				-34
			],
			[
				80,
				-29
			],
			[
				48,
				-51
			],
			[
				42,
				-94
			],
			[
				20,
				-100
			],
			[
				2,
				-1
			],
			[
				38,
				6
			],
			[
				0,
				85
			],
			[
				77,
				-21
			],
			[
				39,
				-25
			],
			[
				70,
				-51
			],
			[
				27,
				10
			],
			[
				10,
				-58
			],
			[
				-4,
				-58
			],
			[
				38,
				-171
			],
			[
				21,
				-43
			],
			[
				2,
				1
			],
			[
				70,
				27
			],
			[
				-24,
				22
			],
			[
				3,
				27
			],
			[
				33,
				12
			],
			[
				4,
				1
			],
			[
				20,
				69
			],
			[
				-20,
				162
			],
			[
				-33,
				68
			],
			[
				-47,
				47
			],
			[
				-253,
				155
			],
			[
				-24,
				43
			],
			[
				-85,
				56
			],
			[
				-205,
				115
			],
			[
				-6,
				13
			],
			[
				0,
				0
			]
		],
		[
			[
				11136,
				32797
			],
			[
				-47,
				89
			],
			[
				-225,
				34
			],
			[
				-72,
				88
			],
			[
				-94,
				39
			],
			[
				-36,
				73
			],
			[
				-17,
				70
			],
			[
				-26,
				12
			],
			[
				-27,
				45
			],
			[
				25,
				74
			],
			[
				-45,
				157
			],
			[
				51,
				57
			],
			[
				64,
				21
			],
			[
				45,
				38
			],
			[
				-1,
				4
			],
			[
				-5,
				36
			],
			[
				-80,
				-14
			],
			[
				-56,
				-10
			],
			[
				10,
				39
			],
			[
				-64,
				206
			],
			[
				-129,
				98
			],
			[
				-131,
				98
			],
			[
				-84,
				160
			],
			[
				-87,
				16
			],
			[
				-14,
				71
			],
			[
				11,
				11
			],
			[
				15,
				17
			],
			[
				-9,
				115
			],
			[
				-59,
				55
			],
			[
				-39,
				-31
			],
			[
				-45,
				-108
			],
			[
				49,
				-3
			],
			[
				45,
				56
			],
			[
				30,
				-36
			],
			[
				-23,
				-55
			],
			[
				-7,
				-18
			],
			[
				-42,
				-13
			],
			[
				-45,
				-74
			],
			[
				-179,
				-67
			],
			[
				-3,
				13
			],
			[
				-15,
				78
			],
			[
				37,
				69
			],
			[
				-37,
				80
			],
			[
				97,
				118
			],
			[
				121,
				-7
			],
			[
				57,
				56
			],
			[
				-10,
				80
			],
			[
				-7,
				67
			],
			[
				-8,
				68
			],
			[
				28,
				56
			],
			[
				280,
				150
			],
			[
				21,
				-7
			],
			[
				57,
				-20
			],
			[
				34,
				-13
			],
			[
				11,
				-105
			],
			[
				48,
				-2
			],
			[
				24,
				-41
			],
			[
				12,
				-57
			],
			[
				4,
				-35
			],
			[
				-39,
				-36
			],
			[
				-11,
				-80
			],
			[
				-1,
				-3
			],
			[
				-112,
				-13
			],
			[
				-26,
				-31
			],
			[
				26,
				-15
			],
			[
				127,
				16
			],
			[
				12,
				-79
			],
			[
				61,
				-60
			],
			[
				64,
				-2
			],
			[
				46,
				-95
			],
			[
				164,
				-69
			],
			[
				40,
				-36
			],
			[
				0,
				-1
			],
			[
				-6,
				-55
			],
			[
				-41,
				-38
			],
			[
				33,
				-62
			],
			[
				69,
				73
			],
			[
				77,
				-40
			],
			[
				44,
				-44
			],
			[
				56,
				-57
			],
			[
				-2,
				-38
			],
			[
				-65,
				-60
			],
			[
				-42,
				-75
			],
			[
				-35,
				-65
			],
			[
				18,
				-48
			],
			[
				68,
				-51
			],
			[
				1,
				-3
			],
			[
				41,
				-65
			],
			[
				22,
				-80
			],
			[
				-111,
				-192
			],
			[
				50,
				6
			],
			[
				160,
				151
			],
			[
				119,
				-99
			]
		],
		[
			[
				11351,
				33349
			],
			[
				0,
				0
			],
			[
				31,
				-26
			],
			[
				36,
				-77
			],
			[
				86,
				-83
			],
			[
				76,
				8
			],
			[
				41,
				-67
			],
			[
				55,
				8
			],
			[
				10,
				63
			],
			[
				-19,
				70
			],
			[
				-105,
				72
			],
			[
				-73,
				33
			],
			[
				-44,
				72
			],
			[
				-41,
				25
			],
			[
				-51,
				93
			],
			[
				17,
				14
			],
			[
				52,
				-44
			],
			[
				80,
				-80
			],
			[
				92,
				-30
			],
			[
				8,
				-11
			],
			[
				61,
				-81
			],
			[
				105,
				-16
			],
			[
				97,
				32
			],
			[
				6,
				-3
			],
			[
				33,
				-20
			],
			[
				-2,
				-26
			],
			[
				-2,
				-19
			],
			[
				12,
				-16
			],
			[
				46,
				-61
			],
			[
				7,
				-19
			],
			[
				12,
				-40
			],
			[
				2,
				-1
			]
		],
		[
			[
				11979,
				33119
			],
			[
				0,
				0
			],
			[
				58,
				-62
			],
			[
				37,
				6
			],
			[
				13,
				2
			],
			[
				82,
				-48
			],
			[
				49,
				-40
			],
			[
				13,
				76
			],
			[
				0,
				2
			],
			[
				-139,
				79
			],
			[
				-12,
				2
			],
			[
				-52,
				-1
			],
			[
				-24,
				55
			],
			[
				8,
				103
			],
			[
				1,
				15
			],
			[
				-49,
				91
			],
			[
				-39,
				37
			],
			[
				-29,
				4
			],
			[
				-150,
				-47
			],
			[
				-17,
				22
			],
			[
				28,
				15
			],
			[
				-13,
				27
			],
			[
				-44,
				1
			],
			[
				-11,
				0
			],
			[
				-55,
				53
			],
			[
				-27,
				31
			],
			[
				-69,
				15
			],
			[
				-39,
				65
			],
			[
				1,
				72
			],
			[
				-35,
				42
			],
			[
				-47,
				24
			],
			[
				-42,
				150
			],
			[
				174,
				49
			],
			[
				104,
				-26
			],
			[
				455,
				92
			],
			[
				-4,
				21
			],
			[
				-10,
				66
			],
			[
				-6,
				20
			],
			[
				-7,
				28
			],
			[
				-88,
				-1
			],
			[
				-34,
				0
			],
			[
				-60,
				-7
			],
			[
				-72,
				-30
			],
			[
				-13,
				-19
			],
			[
				-7,
				-10
			],
			[
				-94,
				-34
			],
			[
				0,
				-20
			],
			[
				-61,
				-37
			],
			[
				-31,
				3
			],
			[
				-31,
				23
			],
			[
				-72,
				-7
			],
			[
				11,
				52
			],
			[
				1,
				1
			],
			[
				69,
				93
			],
			[
				92,
				41
			],
			[
				218,
				152
			],
			[
				-93,
				-1
			],
			[
				-239,
				-156
			],
			[
				-197,
				-145
			],
			[
				-1,
				-1
			],
			[
				-151,
				-53
			],
			[
				-20,
				36
			],
			[
				-50,
				94
			],
			[
				-72,
				46
			],
			[
				76,
				95
			],
			[
				48,
				7
			],
			[
				232,
				-7
			],
			[
				165,
				62
			],
			[
				-3,
				13
			],
			[
				-2,
				13
			],
			[
				-68,
				11
			],
			[
				-2,
				1
			],
			[
				-107,
				-50
			],
			[
				-158,
				-4
			],
			[
				-106,
				42
			],
			[
				-16,
				-26
			],
			[
				-99,
				-61
			],
			[
				-151,
				77
			],
			[
				0,
				0
			]
		],
		[
			[
				10896,
				34353
			],
			[
				-115,
				58
			],
			[
				-11,
				44
			],
			[
				60,
				109
			],
			[
				-15,
				105
			],
			[
				-5,
				6
			],
			[
				-43,
				47
			],
			[
				-20,
				22
			],
			[
				-51,
				12
			],
			[
				-43,
				69
			],
			[
				-1,
				42
			],
			[
				15,
				19
			],
			[
				-23,
				44
			],
			[
				-48,
				11
			],
			[
				-5,
				122
			],
			[
				39,
				37
			],
			[
				47,
				1
			],
			[
				51,
				59
			],
			[
				64,
				13
			],
			[
				62,
				-93
			],
			[
				40,
				-105
			],
			[
				66,
				-73
			],
			[
				26,
				12
			],
			[
				45,
				-20
			],
			[
				11,
				-34
			],
			[
				-65,
				-60
			],
			[
				-16,
				-42
			],
			[
				22,
				-38
			],
			[
				109,
				28
			],
			[
				57,
				43
			],
			[
				-49,
				2
			],
			[
				-16,
				36
			],
			[
				16,
				40
			],
			[
				-41,
				64
			],
			[
				38,
				31
			],
			[
				-41,
				42
			],
			[
				-114,
				21
			],
			[
				-98,
				152
			],
			[
				17,
				35
			],
			[
				84,
				16
			],
			[
				98,
				-16
			],
			[
				85,
				24
			],
			[
				-2,
				-38
			],
			[
				106,
				-80
			],
			[
				100,
				20
			],
			[
				84,
				53
			],
			[
				6,
				-21
			],
			[
				7,
				-24
			],
			[
				60,
				13
			],
			[
				32,
				-35
			],
			[
				65,
				31
			],
			[
				32,
				15
			],
			[
				0,
				-11
			],
			[
				0,
				-22
			],
			[
				29,
				-28
			],
			[
				31,
				-4
			],
			[
				35,
				35
			],
			[
				5,
				0
			],
			[
				26,
				3
			],
			[
				76,
				-97
			],
			[
				74,
				-5
			],
			[
				66,
				-178
			],
			[
				50,
				16
			],
			[
				-5,
				107
			],
			[
				-2,
				22
			],
			[
				-33,
				42
			],
			[
				-34,
				42
			],
			[
				-70,
				4
			],
			[
				-2,
				0
			],
			[
				-52,
				53
			],
			[
				15,
				73
			],
			[
				-14,
				15
			],
			[
				-4,
				5
			],
			[
				-10,
				11
			],
			[
				-26,
				46
			],
			[
				75,
				61
			],
			[
				137,
				24
			],
			[
				81,
				14
			],
			[
				22,
				19
			],
			[
				36,
				31
			],
			[
				189,
				35
			],
			[
				41,
				-23
			],
			[
				68,
				14
			]
		],
		[
			[
				8875,
				34514
			],
			[
				-71,
				36
			],
			[
				83,
				37
			],
			[
				62,
				46
			],
			[
				86,
				68
			],
			[
				-5,
				24
			],
			[
				-49,
				-19
			],
			[
				-30,
				19
			],
			[
				-13,
				60
			],
			[
				66,
				6
			],
			[
				-6,
				73
			],
			[
				-36,
				29
			],
			[
				-55,
				0
			],
			[
				2,
				91
			],
			[
				137,
				27
			],
			[
				5,
				1
			],
			[
				62,
				-8
			],
			[
				8,
				-35
			],
			[
				-39,
				-33
			],
			[
				-5,
				-45
			],
			[
				57,
				-22
			],
			[
				-19,
				-42
			],
			[
				0,
				0
			],
			[
				-10,
				-22
			],
			[
				-8,
				-101
			],
			[
				51,
				-12
			],
			[
				-31,
				-54
			],
			[
				-95,
				-51
			],
			[
				65,
				6
			],
			[
				41,
				6
			],
			[
				0,
				-6
			],
			[
				10,
				-195
			],
			[
				15,
				-36
			],
			[
				16,
				-7
			],
			[
				47,
				-21
			],
			[
				26,
				-11
			],
			[
				9,
				-10
			],
			[
				46,
				-50
			],
			[
				-8,
				-16
			],
			[
				-3,
				-6
			],
			[
				-27,
				-51
			],
			[
				-27,
				-23
			],
			[
				-61,
				-50
			],
			[
				-81,
				-37
			],
			[
				-67,
				-32
			],
			[
				-56,
				-55
			],
			[
				-116,
				-81
			],
			[
				-29,
				-20
			],
			[
				-105,
				-78
			],
			[
				-133,
				-33
			],
			[
				-6,
				104
			],
			[
				-45,
				58
			],
			[
				-207,
				73
			],
			[
				-126,
				44
			],
			[
				-35,
				51
			],
			[
				57,
				78
			],
			[
				84,
				62
			],
			[
				63,
				46
			],
			[
				24,
				17
			],
			[
				79,
				17
			],
			[
				37,
				49
			],
			[
				-37,
				8
			],
			[
				-70,
				-32
			],
			[
				-43,
				46
			],
			[
				20,
				33
			],
			[
				100,
				12
			],
			[
				15,
				27
			],
			[
				-112,
				10
			],
			[
				12,
				81
			],
			[
				220,
				71
			],
			[
				32,
				-11
			],
			[
				19,
				-45
			],
			[
				-129,
				-46
			],
			[
				26,
				-50
			],
			[
				82,
				45
			],
			[
				96,
				0
			],
			[
				27,
				-43
			],
			[
				-4,
				-38
			],
			[
				29,
				-41
			],
			[
				31,
				-3
			],
			[
				0,
				-1
			],
			[
				-11,
				-118
			],
			[
				60,
				41
			],
			[
				3,
				188
			]
		],
		[
			[
				8886,
				34647
			],
			[
				-10,
				-9
			],
			[
				-90,
				17
			],
			[
				-2,
				22
			],
			[
				-6,
				83
			],
			[
				34,
				21
			],
			[
				44,
				15
			],
			[
				25,
				8
			],
			[
				18,
				-10
			],
			[
				9,
				-28
			],
			[
				5,
				-32
			],
			[
				-2,
				-24
			],
			[
				-4,
				-19
			],
			[
				-5,
				-19
			],
			[
				-16,
				-25
			]
		],
		[
			[
				7927,
				34103
			],
			[
				0,
				0
			],
			[
				38,
				-20
			],
			[
				26,
				28
			],
			[
				-53,
				49
			],
			[
				49,
				32
			],
			[
				8,
				5
			],
			[
				37,
				24
			],
			[
				47,
				-65
			],
			[
				-23,
				-129
			],
			[
				55,
				15
			],
			[
				126,
				-46
			],
			[
				21,
				-55
			],
			[
				95,
				-13
			],
			[
				7,
				-45
			],
			[
				48,
				-62
			],
			[
				38,
				-22
			],
			[
				21,
				-72
			],
			[
				12,
				-42
			],
			[
				-24,
				-98
			],
			[
				-46,
				6
			],
			[
				-9,
				1
			],
			[
				1,
				-12
			],
			[
				1,
				-21
			],
			[
				2,
				-21
			],
			[
				81,
				18
			],
			[
				33,
				-20
			],
			[
				25,
				28
			],
			[
				19,
				21
			],
			[
				56,
				1
			],
			[
				51,
				6
			],
			[
				48,
				27
			],
			[
				3,
				3
			],
			[
				88,
				94
			],
			[
				38,
				-4
			],
			[
				37,
				-3
			],
			[
				15,
				26
			]
		],
		[
			[
				8898,
				33737
			],
			[
				0,
				0
			],
			[
				1,
				2
			],
			[
				12,
				20
			],
			[
				-26,
				19
			],
			[
				-15,
				11
			],
			[
				101,
				74
			],
			[
				189,
				137
			],
			[
				109,
				22
			],
			[
				157,
				-50
			],
			[
				64,
				-21
			],
			[
				-130,
				-116
			],
			[
				-2,
				-2
			],
			[
				-112,
				-129
			],
			[
				-116,
				-191
			],
			[
				40,
				1
			],
			[
				10,
				0
			],
			[
				97,
				113
			],
			[
				98,
				50
			],
			[
				149,
				134
			],
			[
				75,
				50
			],
			[
				38,
				26
			],
			[
				19,
				-19
			],
			[
				18,
				-19
			],
			[
				1,
				-1
			],
			[
				4,
				1
			],
			[
				26,
				6
			],
			[
				1,
				1
			],
			[
				1,
				1
			],
			[
				5,
				17
			],
			[
				6,
				23
			],
			[
				55,
				45
			],
			[
				99,
				27
			],
			[
				62,
				-9
			],
			[
				103,
				71
			],
			[
				96,
				-32
			],
			[
				51,
				-21
			],
			[
				32,
				14
			],
			[
				5,
				2
			],
			[
				2,
				-6
			],
			[
				11,
				-53
			],
			[
				0,
				-2
			],
			[
				8,
				-35
			],
			[
				30,
				0
			],
			[
				39,
				-1
			],
			[
				15,
				-34
			],
			[
				13,
				-77
			],
			[
				99,
				-55
			],
			[
				-17,
				-42
			],
			[
				-4,
				-12
			],
			[
				11,
				1
			],
			[
				47,
				4
			],
			[
				-93,
				-218
			],
			[
				68,
				-9
			],
			[
				-13,
				-48
			],
			[
				15,
				-147
			],
			[
				28,
				-73
			]
		],
		[
			[
				7842,
				34235
			],
			[
				0,
				0
			],
			[
				2,
				1
			],
			[
				163,
				49
			],
			[
				-16,
				-23
			],
			[
				-29,
				-42
			],
			[
				-1,
				-2
			],
			[
				-43,
				-25
			],
			[
				-73,
				-42
			],
			[
				0,
				0
			]
		],
		[
			[
				11739,
				35193
			],
			[
				-86,
				-15
			],
			[
				-27,
				32
			],
			[
				-1,
				1
			],
			[
				67,
				47
			],
			[
				35,
				12
			],
			[
				15,
				17
			],
			[
				15,
				-9
			],
			[
				6,
				-20
			],
			[
				-5,
				-24
			],
			[
				-11,
				-40
			],
			[
				-8,
				-1
			]
		],
		[
			[
				12630,
				35589
			],
			[
				-25,
				-5
			],
			[
				-265,
				-47
			],
			[
				-1,
				0
			],
			[
				-2,
				-1
			],
			[
				-12,
				1
			],
			[
				-133,
				3
			],
			[
				-33,
				34
			],
			[
				-91,
				-67
			],
			[
				-76,
				-1
			],
			[
				-53,
				37
			],
			[
				19,
				53
			],
			[
				-16,
				35
			],
			[
				-58,
				-46
			],
			[
				23,
				75
			],
			[
				-29,
				8
			],
			[
				-1,
				88
			],
			[
				-35,
				62
			],
			[
				-67,
				49
			],
			[
				27,
				31
			],
			[
				-23,
				48
			],
			[
				-72,
				6
			],
			[
				0,
				74
			],
			[
				0,
				12
			],
			[
				-27,
				51
			],
			[
				-46,
				11
			],
			[
				-28,
				6
			],
			[
				12,
				95
			],
			[
				1,
				7
			],
			[
				28,
				-2
			],
			[
				2,
				-2
			],
			[
				16,
				-27
			],
			[
				48,
				21
			],
			[
				6,
				2
			],
			[
				1,
				17
			],
			[
				2,
				34
			],
			[
				-30,
				21
			],
			[
				77,
				37
			],
			[
				77,
				30
			],
			[
				69,
				-4
			],
			[
				33,
				14
			],
			[
				53,
				21
			],
			[
				17,
				14
			],
			[
				15,
				13
			],
			[
				9,
				-2
			],
			[
				66,
				-15
			],
			[
				18,
				44
			],
			[
				51,
				18
			],
			[
				70,
				3
			],
			[
				31,
				34
			],
			[
				43,
				4
			],
			[
				62,
				15
			],
			[
				49,
				45
			],
			[
				122,
				23
			],
			[
				36,
				1
			],
			[
				32,
				1
			],
			[
				30,
				1
			],
			[
				0,
				59
			],
			[
				-39,
				-10
			],
			[
				-234,
				-47
			],
			[
				-49,
				6
			],
			[
				-77,
				12
			],
			[
				-14,
				78
			],
			[
				-5,
				11
			],
			[
				-32,
				65
			],
			[
				-29,
				16
			],
			[
				-26,
				15
			],
			[
				-8,
				32
			],
			[
				-13,
				56
			],
			[
				-32,
				8
			],
			[
				-26,
				7
			],
			[
				2,
				27
			],
			[
				5,
				64
			],
			[
				38,
				55
			],
			[
				102,
				19
			],
			[
				45,
				20
			],
			[
				31,
				-37
			],
			[
				11,
				3
			],
			[
				9,
				3
			],
			[
				38,
				11
			],
			[
				-3,
				8
			],
			[
				-14,
				39
			],
			[
				65,
				26
			]
		],
		[
			[
				11782,
				36864
			],
			[
				41,
				15
			],
			[
				73,
				5
			],
			[
				26,
				-66
			],
			[
				1,
				-2
			],
			[
				2,
				1
			],
			[
				45,
				7
			],
			[
				10,
				28
			],
			[
				26,
				5
			],
			[
				54,
				-50
			],
			[
				44,
				-97
			],
			[
				19,
				-41
			],
			[
				79,
				2
			],
			[
				1,
				-7
			],
			[
				4,
				-39
			],
			[
				-21,
				-18
			],
			[
				12,
				-61
			],
			[
				47,
				-11
			],
			[
				3,
				-1
			],
			[
				-54,
				-50
			],
			[
				-151,
				-41
			],
			[
				-44,
				-12
			],
			[
				-15,
				-15
			],
			[
				-18,
				-18
			],
			[
				-26,
				-5
			],
			[
				-12,
				-3
			],
			[
				-122,
				-22
			],
			[
				4,
				44
			],
			[
				35,
				19
			],
			[
				2,
				21
			],
			[
				-14,
				53
			],
			[
				-56,
				52
			],
			[
				-72,
				13
			],
			[
				-18,
				-47
			],
			[
				45,
				-6
			],
			[
				38,
				-93
			],
			[
				-38,
				-22
			],
			[
				-101,
				25
			],
			[
				-88,
				26
			],
			[
				-76,
				87
			],
			[
				149,
				66
			],
			[
				42,
				-35
			],
			[
				28,
				31
			],
			[
				-16,
				34
			],
			[
				-69,
				15
			],
			[
				54,
				32
			],
			[
				-1,
				31
			],
			[
				-31,
				19
			],
			[
				-1,
				48
			],
			[
				55,
				46
			],
			[
				105,
				37
			]
		],
		[
			[
				11349,
				36429
			],
			[
				18,
				-1
			],
			[
				-1,
				62
			],
			[
				106,
				2
			],
			[
				29,
				-59
			],
			[
				66,
				-12
			],
			[
				-1,
				-36
			],
			[
				-25,
				-55
			],
			[
				-1,
				-3
			],
			[
				-64,
				-33
			],
			[
				-37,
				7
			],
			[
				0,
				0
			],
			[
				-2,
				0
			],
			[
				-91,
				-29
			],
			[
				-3,
				15
			],
			[
				-1,
				6
			],
			[
				-61,
				-16
			],
			[
				-21,
				-5
			],
			[
				-38,
				20
			],
			[
				-28,
				34
			],
			[
				72,
				107
			],
			[
				83,
				-4
			]
		],
		[
			[
				11212,
				35328
			],
			[
				-33,
				3
			],
			[
				-26,
				16
			],
			[
				-65,
				165
			],
			[
				-127,
				150
			],
			[
				-10,
				-12
			],
			[
				-4,
				-5
			],
			[
				-40,
				50
			],
			[
				2,
				8
			],
			[
				10,
				36
			],
			[
				-23,
				51
			],
			[
				-11,
				25
			],
			[
				68,
				46
			],
			[
				25,
				17
			],
			[
				-10,
				12
			],
			[
				-32,
				43
			],
			[
				-53,
				54
			],
			[
				-40,
				35
			],
			[
				147,
				53
			],
			[
				45,
				-48
			],
			[
				12,
				-54
			],
			[
				38,
				-11
			],
			[
				71,
				21
			],
			[
				68,
				83
			],
			[
				44,
				-67
			],
			[
				1,
				-6
			],
			[
				19,
				-93
			],
			[
				-1,
				-64
			],
			[
				-16,
				-44
			],
			[
				7,
				-87
			],
			[
				26,
				-81
			],
			[
				35,
				19
			],
			[
				28,
				82
			],
			[
				-21,
				71
			],
			[
				-25,
				21
			],
			[
				1,
				133
			],
			[
				-13,
				36
			],
			[
				-2,
				5
			],
			[
				-8,
				25
			],
			[
				-22,
				37
			],
			[
				72,
				65
			],
			[
				122,
				39
			],
			[
				63,
				-108
			],
			[
				27,
				-79
			],
			[
				5,
				-48
			],
			[
				7,
				-89
			],
			[
				57,
				-39
			],
			[
				6,
				-47
			],
			[
				79,
				25
			],
			[
				50,
				-30
			],
			[
				18,
				-139
			],
			[
				44,
				-18
			],
			[
				10,
				-86
			],
			[
				24,
				-42
			],
			[
				-65,
				-44
			],
			[
				-65,
				-42
			],
			[
				0,
				0
			],
			[
				-50,
				-8
			],
			[
				-34,
				-43
			],
			[
				-96,
				-23
			],
			[
				-2,
				-1
			],
			[
				-44,
				20
			],
			[
				-14,
				9
			],
			[
				-51,
				35
			],
			[
				-6,
				4
			],
			[
				-42,
				-55
			],
			[
				-82,
				8
			],
			[
				-98,
				11
			]
		],
		[
			[
				10982,
				35333
			],
			[
				-26,
				5
			],
			[
				-65,
				-16
			],
			[
				-66,
				-32
			],
			[
				-86,
				-4
			],
			[
				-45,
				46
			],
			[
				2,
				53
			],
			[
				0,
				2
			],
			[
				-44,
				174
			],
			[
				-12,
				49
			],
			[
				-3,
				11
			],
			[
				-19,
				28
			],
			[
				-16,
				25
			],
			[
				74,
				57
			],
			[
				51,
				19
			],
			[
				17,
				6
			],
			[
				65,
				24
			],
			[
				4,
				-9
			],
			[
				1,
				-1
			],
			[
				52,
				-129
			],
			[
				55,
				-76
			],
			[
				51,
				-3
			],
			[
				77,
				-112
			],
			[
				25,
				-24
			],
			[
				23,
				-80
			],
			[
				-80,
				-19
			],
			[
				-35,
				6
			]
		],
		[
			[
				10614,
				35277
			],
			[
				-126,
				-10
			],
			[
				-101,
				-69
			],
			[
				-101,
				11
			],
			[
				-69,
				-25
			],
			[
				-99,
				12
			],
			[
				-119,
				19
			],
			[
				-23,
				51
			],
			[
				-37,
				83
			],
			[
				-99,
				68
			],
			[
				64,
				69
			],
			[
				181,
				70
			],
			[
				-10,
				35
			],
			[
				-96,
				-16
			],
			[
				142,
				89
			],
			[
				73,
				-57
			],
			[
				42,
				88
			],
			[
				33,
				48
			],
			[
				137,
				71
			],
			[
				87,
				22
			],
			[
				15,
				-33
			],
			[
				50,
				-109
			],
			[
				22,
				-65
			],
			[
				3,
				-9
			],
			[
				9,
				-27
			],
			[
				51,
				-164
			],
			[
				-1,
				-4
			],
			[
				-6,
				-106
			],
			[
				48,
				-37
			],
			[
				-70,
				-5
			]
		],
		[
			[
				9940,
				35262
			],
			[
				-37,
				-11
			],
			[
				-73,
				0
			],
			[
				-67,
				33
			],
			[
				-26,
				30
			],
			[
				8,
				25
			],
			[
				19,
				14
			],
			[
				19,
				9
			],
			[
				71,
				1
			],
			[
				32,
				-16
			],
			[
				56,
				-63
			],
			[
				-1,
				-16
			],
			[
				-1,
				-6
			]
		],
		[
			[
				10735,
				35782
			],
			[
				-93,
				-26
			],
			[
				-37,
				38
			],
			[
				-31,
				45
			],
			[
				38,
				29
			],
			[
				-9,
				28
			],
			[
				31,
				27
			],
			[
				70,
				-5
			],
			[
				68,
				-99
			],
			[
				-37,
				-37
			]
		],
		[
			[
				11712,
				35810
			],
			[
				-48,
				-23
			],
			[
				-21,
				42
			],
			[
				-25,
				27
			],
			[
				-26,
				37
			],
			[
				-3,
				35
			],
			[
				-2,
				11
			],
			[
				34,
				56
			],
			[
				3,
				1
			],
			[
				34,
				9
			],
			[
				28,
				-72
			],
			[
				-21,
				-33
			],
			[
				22,
				-64
			],
			[
				22,
				-15
			],
			[
				3,
				-11
			]
		],
		[
			[
				9663,
				34030
			],
			[
				-121,
				-40
			],
			[
				-72,
				56
			],
			[
				-4,
				3
			],
			[
				30,
				74
			],
			[
				7,
				7
			],
			[
				19,
				17
			],
			[
				12,
				11
			],
			[
				94,
				35
			],
			[
				5,
				2
			],
			[
				39,
				-39
			],
			[
				53,
				-57
			],
			[
				8,
				-8
			],
			[
				-70,
				-61
			]
		],
		[
			[
				7845,
				34151
			],
			[
				-7,
				-4
			],
			[
				89,
				-44
			]
		],
		[
			[
				10480,
				33187
			],
			[
				0,
				0
			],
			[
				11,
				-28
			],
			[
				46,
				-165
			],
			[
				105,
				-76
			],
			[
				-7,
				-48
			],
			[
				98,
				-28
			],
			[
				20,
				-27
			],
			[
				100,
				-65
			],
			[
				54,
				-30
			],
			[
				63,
				-4
			],
			[
				5,
				36
			],
			[
				81,
				0
			],
			[
				2,
				-11
			]
		],
		[
			[
				6151,
				31755
			],
			[
				0,
				0
			],
			[
				51,
				24
			],
			[
				5,
				2
			],
			[
				56,
				30
			],
			[
				70,
				39
			],
			[
				82,
				24
			],
			[
				80,
				-16
			],
			[
				58,
				-46
			],
			[
				18,
				-64
			],
			[
				164,
				-163
			],
			[
				70,
				-91
			],
			[
				43,
				-81
			],
			[
				-11,
				-86
			],
			[
				49,
				44
			],
			[
				14,
				46
			],
			[
				-48,
				81
			],
			[
				25,
				76
			],
			[
				40,
				17
			],
			[
				-28,
				112
			],
			[
				-58,
				30
			],
			[
				-5,
				82
			],
			[
				166,
				50
			],
			[
				91,
				-19
			],
			[
				86,
				16
			],
			[
				77,
				14
			],
			[
				52,
				-18
			],
			[
				57,
				12
			],
			[
				2,
				-14
			],
			[
				11,
				-76
			],
			[
				-21,
				-14
			],
			[
				-6,
				-4
			],
			[
				4,
				-16
			],
			[
				11,
				-56
			],
			[
				-11,
				3
			],
			[
				-32,
				8
			],
			[
				-8,
				2
			],
			[
				-2,
				-1
			],
			[
				-122,
				-55
			],
			[
				-9,
				-45
			],
			[
				166,
				21
			],
			[
				40,
				26
			],
			[
				2,
				1
			],
			[
				1,
				-8
			],
			[
				11,
				-59
			],
			[
				40,
				-224
			],
			[
				43,
				-25
			],
			[
				-6,
				-50
			],
			[
				31,
				-78
			],
			[
				-29,
				-95
			],
			[
				24,
				-17
			],
			[
				-10,
				-88
			],
			[
				37,
				-40
			],
			[
				32,
				102
			],
			[
				-6,
				52
			],
			[
				0,
				83
			],
			[
				18,
				67
			],
			[
				-12,
				91
			],
			[
				-22,
				15
			],
			[
				-43,
				73
			],
			[
				-2,
				89
			],
			[
				64,
				63
			],
			[
				-9,
				82
			],
			[
				63,
				30
			],
			[
				33,
				-47
			],
			[
				63,
				-10
			],
			[
				51,
				-57
			]
		],
		[
			[
				7752,
				31599
			],
			[
				0,
				0
			],
			[
				19,
				-21
			],
			[
				37,
				-11
			],
			[
				34,
				22
			],
			[
				32,
				69
			],
			[
				88,
				-104
			],
			[
				128,
				-18
			],
			[
				16,
				40
			],
			[
				83,
				-25
			],
			[
				56,
				-241
			],
			[
				45,
				-41
			],
			[
				66,
				-34
			],
			[
				54,
				-71
			],
			[
				18,
				-82
			],
			[
				2,
				-6
			],
			[
				22,
				-41
			],
			[
				80,
				26
			],
			[
				8,
				67
			],
			[
				76,
				-31
			],
			[
				20,
				-42
			],
			[
				50,
				-9
			],
			[
				62,
				-244
			],
			[
				1,
				-7
			],
			[
				4,
				1
			],
			[
				55,
				8
			],
			[
				0,
				1
			],
			[
				0,
				0
			],
			[
				-18,
				236
			],
			[
				91,
				64
			],
			[
				17,
				-11
			],
			[
				53,
				23
			],
			[
				41,
				17
			],
			[
				99,
				14
			],
			[
				12,
				57
			],
			[
				0,
				5
			],
			[
				6,
				43
			],
			[
				64,
				36
			],
			[
				104,
				-9
			],
			[
				5,
				0
			],
			[
				76,
				-7
			],
			[
				13,
				3
			],
			[
				95,
				32
			],
			[
				5,
				1
			],
			[
				-13,
				34
			],
			[
				-91,
				-4
			],
			[
				-50,
				54
			],
			[
				-215,
				-54
			],
			[
				-27,
				-32
			],
			[
				-69,
				-29
			],
			[
				-246,
				-94
			],
			[
				-15,
				23
			],
			[
				-7,
				10
			],
			[
				-77,
				26
			],
			[
				-73,
				25
			],
			[
				-55,
				-2
			],
			[
				-43,
				39
			],
			[
				-10,
				39
			],
			[
				40,
				47
			],
			[
				-11,
				5
			],
			[
				-26,
				11
			],
			[
				-39,
				-18
			],
			[
				-43,
				28
			],
			[
				-46,
				70
			],
			[
				-4,
				14
			],
			[
				-14,
				50
			],
			[
				-40,
				149
			],
			[
				9,
				5
			],
			[
				74,
				37
			],
			[
				98,
				12
			],
			[
				11,
				28
			],
			[
				1,
				2
			],
			[
				4,
				0
			],
			[
				23,
				-2
			],
			[
				28,
				-2
			],
			[
				55,
				-45
			],
			[
				1,
				-118
			],
			[
				28,
				-12
			],
			[
				1,
				-8
			],
			[
				12,
				-57
			],
			[
				1,
				-7
			],
			[
				-19,
				-138
			],
			[
				51,
				18
			],
			[
				6,
				33
			],
			[
				20,
				-33
			],
			[
				-5,
				-51
			],
			[
				-2,
				-32
			],
			[
				29,
				-10
			],
			[
				14,
				53
			],
			[
				10,
				79
			],
			[
				-1,
				33
			],
			[
				-7,
				136
			],
			[
				0,
				14
			],
			[
				-15,
				14
			],
			[
				-92,
				90
			],
			[
				-21,
				187
			],
			[
				0,
				0
			],
			[
				34,
				12
			],
			[
				12,
				5
			],
			[
				35,
				13
			],
			[
				30,
				26
			],
			[
				40,
				36
			],
			[
				150,
				24
			],
			[
				43,
				57
			],
			[
				12,
				14
			],
			[
				15,
				20
			],
			[
				18,
				4
			],
			[
				176,
				36
			],
			[
				66,
				57
			],
			[
				5,
				2
			],
			[
				85,
				39
			]
		],
		[
			[
				9332,
				32271
			],
			[
				0,
				0
			],
			[
				278,
				127
			],
			[
				110,
				22
			],
			[
				109,
				-17
			],
			[
				12,
				-2
			],
			[
				30,
				-40
			],
			[
				18,
				-25
			],
			[
				6,
				0
			],
			[
				2,
				0
			],
			[
				42,
				1
			],
			[
				-29,
				107
			],
			[
				19,
				10
			],
			[
				5,
				4
			],
			[
				49,
				27
			],
			[
				33,
				-7
			],
			[
				98,
				-19
			],
			[
				102,
				-78
			],
			[
				16,
				-39
			],
			[
				145,
				-100
			],
			[
				21,
				14
			],
			[
				4,
				2
			],
			[
				3,
				-10
			],
			[
				29,
				-85
			],
			[
				26,
				18
			],
			[
				6,
				4
			],
			[
				9,
				-29
			],
			[
				11,
				-64
			],
			[
				5,
				-2
			],
			[
				59,
				-25
			],
			[
				1,
				-1
			],
			[
				2,
				9
			],
			[
				5,
				25
			],
			[
				-8,
				114
			],
			[
				-20,
				41
			],
			[
				-16,
				33
			],
			[
				-17,
				4
			],
			[
				-12,
				2
			],
			[
				-34,
				39
			],
			[
				-2,
				11
			],
			[
				-6,
				42
			],
			[
				-113,
				57
			],
			[
				-23,
				-7
			],
			[
				-22,
				-7
			],
			[
				-15,
				24
			],
			[
				-13,
				20
			],
			[
				-54,
				21
			],
			[
				-1,
				0
			],
			[
				-29,
				32
			],
			[
				0,
				15
			],
			[
				1,
				20
			],
			[
				0,
				10
			],
			[
				151,
				89
			],
			[
				2,
				43
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				-85,
				-19
			],
			[
				-221,
				-49
			],
			[
				-117,
				27
			],
			[
				-780,
				-332
			],
			[
				0,
				0
			]
		],
		[
			[
				9124,
				32328
			],
			[
				-340,
				-146
			],
			[
				-171,
				-95
			],
			[
				-46,
				-5
			],
			[
				-72,
				-6
			],
			[
				-32,
				-3
			],
			[
				-11,
				36
			],
			[
				-15,
				49
			],
			[
				-54,
				-25
			],
			[
				-32,
				-14
			],
			[
				-185,
				-1
			],
			[
				-15,
				60
			],
			[
				84,
				38
			],
			[
				25,
				12
			],
			[
				38,
				-17
			],
			[
				67,
				23
			],
			[
				-8,
				57
			],
			[
				-3,
				23
			],
			[
				-64,
				5
			],
			[
				70,
				57
			],
			[
				-137,
				20
			],
			[
				-21,
				3
			],
			[
				-1,
				14
			],
			[
				-1,
				6
			],
			[
				-1,
				18
			],
			[
				12,
				4
			],
			[
				140,
				48
			],
			[
				107,
				74
			],
			[
				264,
				104
			],
			[
				173,
				47
			],
			[
				252,
				-4
			],
			[
				127,
				95
			],
			[
				-157,
				-49
			],
			[
				7,
				60
			],
			[
				-42,
				0
			],
			[
				-61,
				-1
			],
			[
				-5,
				-2
			],
			[
				-20,
				-10
			],
			[
				-22,
				-11
			],
			[
				-142,
				-28
			],
			[
				-4,
				-1
			],
			[
				-1,
				0
			],
			[
				-79,
				-27
			],
			[
				-30,
				-1
			],
			[
				-85,
				-3
			],
			[
				-14,
				-12
			],
			[
				-158,
				-67
			],
			[
				-222,
				-53
			],
			[
				-309,
				-109
			],
			[
				-42,
				-14
			],
			[
				-18,
				-3
			],
			[
				-264,
				-43
			],
			[
				-1,
				-1
			],
			[
				-68,
				-18
			],
			[
				-242,
				-28
			],
			[
				-46,
				-28
			],
			[
				-91,
				-16
			],
			[
				-107,
				6
			],
			[
				-12,
				27
			],
			[
				-23,
				51
			],
			[
				18,
				9
			],
			[
				29,
				15
			],
			[
				14,
				86
			]
		],
		[
			[
				7077,
				32534
			],
			[
				0,
				0
			],
			[
				8,
				52
			],
			[
				-23,
				44
			],
			[
				-40,
				75
			],
			[
				-9,
				16
			],
			[
				42,
				35
			],
			[
				4,
				3
			]
		],
		[
			[
				7059,
				32759
			],
			[
				0,
				0
			],
			[
				10,
				9
			],
			[
				-13,
				15
			],
			[
				-21,
				22
			],
			[
				11,
				39
			],
			[
				12,
				11
			],
			[
				99,
				90
			],
			[
				-6,
				37
			],
			[
				64,
				36
			],
			[
				94,
				48
			],
			[
				73,
				7
			],
			[
				55,
				-48
			],
			[
				-97,
				-19
			],
			[
				1,
				-43
			],
			[
				64,
				19
			],
			[
				15,
				-29
			],
			[
				86,
				28
			],
			[
				42,
				7
			],
			[
				22,
				4
			],
			[
				14,
				-84
			],
			[
				54,
				-26
			],
			[
				62,
				-1
			],
			[
				64,
				28
			],
			[
				30,
				-16
			],
			[
				10,
				-5
			],
			[
				22,
				48
			],
			[
				-45,
				12
			],
			[
				-46,
				-12
			],
			[
				-63,
				29
			],
			[
				-33,
				29
			],
			[
				0,
				22
			],
			[
				88,
				78
			],
			[
				-60,
				-3
			],
			[
				-98,
				47
			],
			[
				63,
				36
			],
			[
				-5,
				24
			],
			[
				-105,
				13
			],
			[
				-107,
				-26
			],
			[
				-129,
				-74
			],
			[
				-77,
				16
			],
			[
				-86,
				-11
			],
			[
				-37,
				-27
			],
			[
				-17,
				44
			],
			[
				66,
				57
			],
			[
				-10,
				70
			],
			[
				-57,
				11
			],
			[
				20,
				81
			],
			[
				-91,
				12
			],
			[
				42,
				148
			],
			[
				-41,
				-6
			],
			[
				-41,
				-38
			],
			[
				-31,
				23
			],
			[
				55,
				37
			],
			[
				-44,
				7
			],
			[
				-17,
				3
			],
			[
				-49,
				28
			],
			[
				-50,
				-2
			],
			[
				-25,
				45
			],
			[
				41,
				25
			],
			[
				30,
				-2
			],
			[
				67,
				52
			],
			[
				45,
				47
			],
			[
				189,
				178
			],
			[
				121,
				126
			],
			[
				82,
				-88
			],
			[
				34,
				17
			],
			[
				-51,
				72
			],
			[
				60,
				106
			],
			[
				54,
				-41
			],
			[
				2,
				-1
			],
			[
				24,
				8
			],
			[
				70,
				24
			],
			[
				-2,
				67
			],
			[
				42,
				-4
			],
			[
				23,
				-24
			],
			[
				106,
				13
			],
			[
				35,
				29
			],
			[
				47,
				14
			],
			[
				27,
				8
			]
		],
		[
			[
				6805,
				33194
			],
			[
				67,
				50
			],
			[
				63,
				7
			],
			[
				71,
				-54
			],
			[
				-48,
				-98
			],
			[
				24,
				-69
			],
			[
				-64,
				-61
			],
			[
				-45,
				-6
			],
			[
				-60,
				25
			],
			[
				-53,
				-22
			],
			[
				11,
				-29
			],
			[
				87,
				-9
			],
			[
				-50,
				-28
			],
			[
				-4,
				-40
			],
			[
				15,
				-41
			],
			[
				59,
				5
			],
			[
				-18,
				-85
			],
			[
				-12,
				-57
			],
			[
				-90,
				26
			],
			[
				-72,
				36
			],
			[
				15,
				35
			],
			[
				-79,
				14
			],
			[
				6,
				37
			],
			[
				-63,
				21
			],
			[
				-37,
				12
			],
			[
				18,
				31
			],
			[
				-140,
				-14
			],
			[
				-11,
				28
			],
			[
				0,
				1
			],
			[
				-1,
				17
			],
			[
				51,
				20
			],
			[
				-21,
				43
			],
			[
				60,
				6
			],
			[
				17,
				-26
			],
			[
				38,
				14
			],
			[
				9,
				17
			],
			[
				9,
				18
			],
			[
				-6,
				30
			],
			[
				-9,
				7
			],
			[
				-116,
				92
			],
			[
				68,
				38
			],
			[
				20,
				11
			],
			[
				11,
				7
			],
			[
				38,
				21
			],
			[
				0,
				-32
			],
			[
				0,
				-11
			],
			[
				20,
				6
			],
			[
				44,
				13
			],
			[
				52,
				-109
			],
			[
				62,
				12
			],
			[
				2,
				44
			],
			[
				62,
				47
			]
		],
		[
			[
				8051,
				32353
			],
			[
				-88,
				-27
			],
			[
				-36,
				20
			],
			[
				-32,
				40
			],
			[
				45,
				20
			],
			[
				31,
				7
			],
			[
				17,
				4
			],
			[
				31,
				6
			],
			[
				25,
				1
			],
			[
				48,
				1
			],
			[
				16,
				-11
			],
			[
				44,
				-29
			],
			[
				-101,
				-32
			],
			[
				0,
				0
			]
		],
		[
			[
				7806,
				32250
			],
			[
				-100,
				-24
			],
			[
				-3,
				44
			],
			[
				18,
				61
			],
			[
				72,
				33
			],
			[
				32,
				11
			],
			[
				16,
				-38
			],
			[
				27,
				-23
			],
			[
				42,
				-10
			],
			[
				-17,
				-22
			],
			[
				-87,
				-32
			]
		],
		[
			[
				8100,
				31831
			],
			[
				-28,
				-9
			],
			[
				-8,
				4
			],
			[
				-14,
				9
			],
			[
				-130,
				-9
			],
			[
				-18,
				-1
			],
			[
				-17,
				5
			],
			[
				-66,
				18
			],
			[
				-53,
				80
			],
			[
				45,
				73
			],
			[
				75,
				18
			],
			[
				15,
				27
			],
			[
				98,
				-17
			],
			[
				54,
				-65
			],
			[
				146,
				-2
			],
			[
				50,
				-37
			],
			[
				20,
				-14
			],
			[
				-13,
				-29
			],
			[
				-72,
				-23
			],
			[
				-84,
				-28
			]
		],
		[
			[
				6180,
				31932
			],
			[
				-27,
				-14
			],
			[
				-27,
				72
			],
			[
				-39,
				105
			],
			[
				53,
				56
			],
			[
				43,
				16
			],
			[
				14,
				28
			],
			[
				-75,
				110
			],
			[
				51,
				31
			],
			[
				16,
				33
			],
			[
				-58,
				9
			],
			[
				30,
				37
			],
			[
				87,
				47
			],
			[
				75,
				-43
			],
			[
				-11,
				-38
			],
			[
				-32,
				-66
			],
			[
				-31,
				-82
			],
			[
				3,
				-6
			],
			[
				11,
				-21
			],
			[
				33,
				4
			],
			[
				15,
				31
			],
			[
				7,
				55
			],
			[
				5,
				40
			],
			[
				51,
				51
			],
			[
				37,
				18
			],
			[
				180,
				18
			],
			[
				184,
				86
			],
			[
				82,
				13
			],
			[
				5,
				-12
			],
			[
				18,
				-44
			],
			[
				27,
				-150
			],
			[
				4,
				-17
			],
			[
				4,
				-56
			],
			[
				-49,
				-35
			],
			[
				-293,
				-135
			],
			[
				-39,
				10
			],
			[
				-111,
				-32
			],
			[
				-20,
				-6
			],
			[
				-61,
				-18
			],
			[
				-50,
				-42
			],
			[
				-112,
				-53
			]
		],
		[
			[
				6012,
				31989
			],
			[
				14,
				-5
			],
			[
				25,
				10
			],
			[
				24,
				-5
			],
			[
				1,
				-7
			],
			[
				15,
				-63
			],
			[
				-37,
				-29
			],
			[
				-84,
				-19
			],
			[
				-15,
				5
			],
			[
				-39,
				-1
			],
			[
				-77,
				-45
			],
			[
				-41,
				14
			],
			[
				-1,
				15
			],
			[
				0,
				20
			],
			[
				16,
				59
			],
			[
				64,
				59
			],
			[
				-6,
				43
			],
			[
				39,
				20
			],
			[
				9,
				36
			],
			[
				5,
				34
			],
			[
				15,
				20
			],
			[
				19,
				15
			],
			[
				17,
				7
			],
			[
				17,
				6
			],
			[
				13,
				4
			],
			[
				18,
				-2
			],
			[
				7,
				-23
			],
			[
				-17,
				-85
			],
			[
				-1,
				-83
			]
		],
		[
			[
				6771,
				31966
			],
			[
				-38,
				-12
			],
			[
				-24,
				4
			],
			[
				-1,
				28
			],
			[
				32,
				28
			],
			[
				23,
				17
			],
			[
				34,
				15
			],
			[
				40,
				14
			],
			[
				24,
				-1
			],
			[
				20,
				-4
			],
			[
				14,
				-20
			],
			[
				-35,
				-35
			],
			[
				-27,
				-6
			],
			[
				-33,
				-7
			],
			[
				-29,
				-21
			]
		],
		[
			[
				5670,
				31771
			],
			[
				-22,
				-6
			],
			[
				-13,
				22
			],
			[
				21,
				34
			],
			[
				38,
				40
			],
			[
				27,
				10
			],
			[
				18,
				-2
			],
			[
				20,
				-19
			],
			[
				0,
				-20
			],
			[
				-15,
				-18
			],
			[
				-1,
				0
			],
			[
				-10,
				-12
			],
			[
				-28,
				-16
			],
			[
				-33,
				-13
			],
			[
				-2,
				0
			]
		],
		[
			[
				7509,
				33032
			],
			[
				-24,
				-8
			],
			[
				-18,
				6
			],
			[
				-6,
				11
			],
			[
				2,
				21
			],
			[
				8,
				10
			],
			[
				8,
				8
			],
			[
				30,
				11
			],
			[
				26,
				7
			],
			[
				9,
				1
			],
			[
				16,
				-6
			],
			[
				2,
				-15
			],
			[
				0,
				-11
			],
			[
				-3,
				-13
			],
			[
				-26,
				-15
			],
			[
				-24,
				-7
			]
		],
		[
			[
				2889,
				21164
			],
			[
				0,
				0
			],
			[
				4,
				6
			],
			[
				23,
				-18
			],
			[
				147,
				-156
			],
			[
				67,
				15
			],
			[
				-189,
				180
			],
			[
				54,
				60
			],
			[
				7,
				32
			],
			[
				90,
				46
			],
			[
				7,
				-37
			],
			[
				-11,
				-37
			],
			[
				111,
				9
			],
			[
				82,
				12
			],
			[
				121,
				75
			],
			[
				2,
				68
			],
			[
				89,
				57
			],
			[
				62,
				-57
			],
			[
				-13,
				-237
			],
			[
				-56,
				-89
			],
			[
				-15,
				-136
			],
			[
				38,
				-9
			],
			[
				4,
				41
			],
			[
				8,
				95
			],
			[
				1,
				2
			],
			[
				68,
				53
			],
			[
				2,
				2
			],
			[
				2,
				7
			],
			[
				10,
				44
			],
			[
				7,
				32
			],
			[
				10,
				44
			],
			[
				23,
				12
			],
			[
				50,
				-32
			],
			[
				18,
				-11
			],
			[
				21,
				46
			],
			[
				-5,
				4
			],
			[
				-80,
				77
			],
			[
				105,
				49
			],
			[
				8,
				73
			],
			[
				228,
				-4
			],
			[
				62,
				-1
			],
			[
				12,
				-11
			],
			[
				125,
				-119
			],
			[
				25,
				-25
			],
			[
				11,
				11
			],
			[
				47,
				43
			],
			[
				70,
				-46
			],
			[
				81,
				42
			],
			[
				43,
				21
			],
			[
				22,
				11
			],
			[
				11,
				-1
			],
			[
				114,
				-11
			]
		],
		[
			[
				4612,
				21396
			],
			[
				0,
				0
			],
			[
				42,
				-4
			],
			[
				91,
				-105
			],
			[
				172,
				8
			],
			[
				146,
				-146
			],
			[
				-58,
				-177
			],
			[
				-18,
				-53
			],
			[
				-96,
				-52
			],
			[
				59,
				-34
			],
			[
				81,
				56
			],
			[
				11,
				67
			],
			[
				15,
				23
			],
			[
				71,
				115
			],
			[
				198,
				-14
			],
			[
				-1,
				-62
			],
			[
				-1,
				-50
			],
			[
				-36,
				-101
			],
			[
				-45,
				-67
			],
			[
				6,
				-71
			],
			[
				-105,
				-44
			],
			[
				6,
				-51
			],
			[
				34,
				-5
			],
			[
				20,
				33
			],
			[
				104,
				-18
			],
			[
				38,
				12
			],
			[
				-50,
				102
			],
			[
				66,
				118
			],
			[
				28,
				152
			],
			[
				10,
				54
			],
			[
				72,
				77
			],
			[
				140,
				14
			],
			[
				108,
				143
			],
			[
				100,
				-33
			],
			[
				12,
				-68
			],
			[
				33,
				10
			],
			[
				50,
				246
			],
			[
				65,
				184
			],
			[
				10,
				134
			],
			[
				19,
				9
			],
			[
				6,
				2
			],
			[
				10,
				5
			],
			[
				8,
				3
			],
			[
				30,
				-54
			],
			[
				28,
				-50
			],
			[
				5,
				-8
			],
			[
				41,
				-27
			],
			[
				61,
				-40
			],
			[
				111,
				9
			],
			[
				38,
				-5
			],
			[
				53,
				-7
			],
			[
				5,
				-7
			],
			[
				21,
				-34
			],
			[
				95,
				-5
			],
			[
				34,
				29
			],
			[
				5,
				3
			],
			[
				16,
				-2
			],
			[
				70,
				-8
			],
			[
				9,
				-1
			],
			[
				9,
				-14
			],
			[
				38,
				-62
			],
			[
				30,
				-112
			],
			[
				-10,
				-106
			],
			[
				8,
				-73
			],
			[
				25,
				-15
			],
			[
				90,
				-55
			],
			[
				33,
				-45
			],
			[
				56,
				2
			],
			[
				4,
				48
			],
			[
				3,
				38
			],
			[
				27,
				-10
			],
			[
				10,
				-3
			],
			[
				51,
				-17
			],
			[
				24,
				-48
			],
			[
				10,
				-20
			],
			[
				10,
				-8
			],
			[
				52,
				-44
			],
			[
				12,
				-70
			],
			[
				-8,
				-38
			],
			[
				-5,
				-22
			],
			[
				22,
				-107
			],
			[
				10,
				-24
			]
		],
		[
			[
				7156,
				20796
			],
			[
				0,
				0
			],
			[
				19,
				-43
			],
			[
				13,
				-24
			],
			[
				-2,
				-65
			],
			[
				21,
				-69
			],
			[
				-34,
				-70
			],
			[
				-28,
				-57
			],
			[
				-244,
				-141
			],
			[
				-10,
				-66
			],
			[
				-106,
				-52
			],
			[
				-75,
				-67
			],
			[
				-22,
				-164
			],
			[
				-47,
				-145
			],
			[
				-16,
				-47
			],
			[
				-6,
				-19
			],
			[
				14,
				21
			],
			[
				95,
				144
			],
			[
				19,
				168
			],
			[
				19,
				33
			],
			[
				131,
				73
			],
			[
				146,
				149
			],
			[
				47,
				-18
			],
			[
				112,
				87
			],
			[
				44,
				95
			],
			[
				140,
				-221
			],
			[
				42,
				-27
			],
			[
				119,
				-76
			],
			[
				25,
				-175
			],
			[
				-88,
				-263
			],
			[
				-32,
				-74
			],
			[
				-2,
				-4
			],
			[
				17,
				-27
			],
			[
				62,
				53
			],
			[
				88,
				234
			],
			[
				40,
				12
			],
			[
				37,
				119
			],
			[
				-6,
				113
			],
			[
				-32,
				88
			],
			[
				-59,
				29
			],
			[
				-115,
				11
			],
			[
				-121,
				130
			],
			[
				-38,
				113
			],
			[
				-4,
				72
			],
			[
				-44,
				81
			],
			[
				4,
				50
			],
			[
				-48,
				76
			],
			[
				-23,
				97
			],
			[
				41,
				83
			],
			[
				-1,
				2
			]
		],
		[
			[
				7248,
				21015
			],
			[
				0,
				0
			],
			[
				-34,
				162
			],
			[
				-33,
				25
			],
			[
				33,
				79
			],
			[
				14,
				33
			],
			[
				75,
				52
			],
			[
				46,
				-36
			],
			[
				170,
				29
			],
			[
				60,
				48
			],
			[
				100,
				-9
			],
			[
				82,
				18
			],
			[
				54,
				101
			],
			[
				15,
				89
			],
			[
				66,
				-20
			],
			[
				198,
				-159
			],
			[
				85,
				38
			],
			[
				75,
				-29
			],
			[
				8,
				-18
			],
			[
				24,
				-52
			],
			[
				88,
				-65
			],
			[
				15,
				6
			],
			[
				24,
				6
			],
			[
				46,
				6
			],
			[
				28,
				-25
			],
			[
				10,
				-2
			],
			[
				25,
				-7
			],
			[
				2,
				-1
			],
			[
				1,
				0
			],
			[
				1,
				1
			],
			[
				8,
				13
			],
			[
				-6,
				15
			],
			[
				-8,
				24
			],
			[
				-48,
				37
			],
			[
				-89,
				-6
			],
			[
				-11,
				65
			],
			[
				-14,
				78
			],
			[
				-56,
				54
			],
			[
				-72,
				37
			],
			[
				13,
				5
			],
			[
				134,
				52
			],
			[
				44,
				56
			],
			[
				54,
				93
			],
			[
				46,
				6
			],
			[
				7,
				1
			],
			[
				12,
				9
			],
			[
				23,
				20
			]
		],
		[
			[
				8563,
				21844
			],
			[
				0,
				0
			],
			[
				24,
				20
			],
			[
				81,
				48
			],
			[
				174,
				22
			],
			[
				87,
				-23
			],
			[
				31,
				11
			],
			[
				16,
				6
			],
			[
				77,
				74
			],
			[
				13,
				58
			],
			[
				21,
				70
			],
			[
				48,
				-37
			],
			[
				77,
				16
			],
			[
				34,
				45
			],
			[
				-8,
				43
			],
			[
				-26,
				15
			],
			[
				-10,
				6
			],
			[
				-45,
				-28
			],
			[
				-94,
				67
			],
			[
				-53,
				-78
			],
			[
				-19,
				-117
			],
			[
				-248,
				-36
			],
			[
				-132,
				4
			],
			[
				-56,
				-47
			],
			[
				-151,
				-27
			],
			[
				-100,
				47
			],
			[
				0,
				0
			]
		],
		[
			[
				8304,
				22003
			],
			[
				-16,
				7
			],
			[
				-42,
				403
			],
			[
				-53,
				45
			],
			[
				-23,
				66
			],
			[
				-125,
				88
			],
			[
				-2,
				31
			],
			[
				0,
				6
			],
			[
				144,
				84
			],
			[
				72,
				85
			],
			[
				40,
				79
			],
			[
				-13,
				131
			],
			[
				95,
				203
			],
			[
				43,
				63
			],
			[
				126,
				65
			],
			[
				40,
				207
			],
			[
				52,
				99
			],
			[
				84,
				17
			],
			[
				167,
				186
			],
			[
				17,
				64
			],
			[
				-17,
				23
			],
			[
				-16,
				23
			],
			[
				-14,
				21
			],
			[
				-19,
				-38
			],
			[
				-28,
				-59
			],
			[
				-50,
				-62
			],
			[
				-144,
				-141
			],
			[
				-173,
				-89
			],
			[
				-29,
				-200
			],
			[
				-90,
				-41
			],
			[
				-2,
				-1
			],
			[
				-12,
				-10
			],
			[
				-92,
				-77
			],
			[
				-37,
				-79
			],
			[
				-69,
				65
			],
			[
				-76,
				21
			],
			[
				-58,
				53
			],
			[
				-12,
				11
			],
			[
				-15,
				9
			],
			[
				2,
				-31
			],
			[
				1,
				-13
			],
			[
				3,
				-33
			],
			[
				35,
				-63
			],
			[
				2,
				-2
			],
			[
				132,
				-105
			],
			[
				23,
				-159
			],
			[
				-82,
				-120
			],
			[
				-30,
				-13
			],
			[
				-141,
				-144
			],
			[
				-58,
				-17
			],
			[
				3,
				-5
			],
			[
				75,
				-125
			],
			[
				65,
				-66
			],
			[
				109,
				-42
			],
			[
				29,
				-104
			],
			[
				7,
				-156
			],
			[
				14,
				-130
			],
			[
				26,
				-98
			],
			[
				54,
				-53
			],
			[
				50,
				-33
			],
			[
				0,
				0
			]
		],
		[
			[
				8276,
				21849
			],
			[
				17,
				-11
			],
			[
				-94,
				-97
			],
			[
				-64,
				-29
			],
			[
				-22,
				-19
			],
			[
				-22,
				-19
			],
			[
				-145,
				41
			],
			[
				-59,
				42
			],
			[
				-9,
				28
			],
			[
				24,
				28
			],
			[
				-52,
				32
			],
			[
				-1,
				0
			],
			[
				-34,
				1
			],
			[
				12,
				-30
			],
			[
				14,
				-45
			],
			[
				-88,
				-25
			],
			[
				-77,
				4
			],
			[
				-54,
				-72
			],
			[
				9,
				-100
			],
			[
				-45,
				-8
			],
			[
				-36,
				20
			],
			[
				-207,
				-70
			],
			[
				-49,
				27
			],
			[
				-180,
				-92
			],
			[
				-24,
				-128
			],
			[
				-28,
				5
			],
			[
				-49,
				40
			],
			[
				-77,
				6
			],
			[
				-6,
				25
			],
			[
				7,
				67
			],
			[
				-54,
				96
			],
			[
				97,
				84
			],
			[
				41,
				-5
			],
			[
				15,
				-27
			],
			[
				44,
				2
			],
			[
				166,
				270
			],
			[
				72,
				23
			],
			[
				16,
				38
			],
			[
				119,
				18
			],
			[
				158,
				-15
			],
			[
				7,
				44
			],
			[
				-151,
				34
			],
			[
				-6,
				29
			],
			[
				15,
				76
			],
			[
				7,
				26
			],
			[
				33,
				126
			],
			[
				77,
				19
			],
			[
				35,
				66
			],
			[
				-26,
				61
			],
			[
				-26,
				-59
			],
			[
				-48,
				-7
			],
			[
				-73,
				-62
			],
			[
				-6,
				-5
			],
			[
				0,
				-3
			],
			[
				-5,
				-67
			],
			[
				-2,
				-23
			],
			[
				-7,
				-30
			],
			[
				-9,
				-33
			],
			[
				-7,
				-29
			],
			[
				-30,
				-60
			],
			[
				-13,
				-8
			],
			[
				-26,
				-17
			],
			[
				-4,
				-3
			],
			[
				-4,
				-1
			],
			[
				-66,
				-15
			],
			[
				-3,
				-18
			],
			[
				-6,
				-32
			],
			[
				-102,
				-55
			],
			[
				-10,
				-70
			],
			[
				-61,
				-71
			],
			[
				-26,
				-76
			],
			[
				-236,
				10
			],
			[
				-64,
				90
			],
			[
				-9,
				-2
			],
			[
				0,
				0
			]
		],
		[
			[
				6759,
				21789
			],
			[
				-48,
				-6
			],
			[
				-10,
				9
			],
			[
				-79,
				79
			],
			[
				-77,
				-8
			],
			[
				-254,
				-26
			],
			[
				-55,
				12
			],
			[
				-46,
				113
			],
			[
				-195,
				71
			],
			[
				-112,
				-18
			],
			[
				-1,
				23
			],
			[
				-1,
				56
			],
			[
				-10,
				15
			],
			[
				0,
				0
			]
		],
		[
			[
				5871,
				22109
			],
			[
				-26,
				44
			],
			[
				21,
				88
			],
			[
				111,
				69
			],
			[
				7,
				10
			]
		],
		[
			[
				5984,
				22320
			],
			[
				0,
				0
			],
			[
				63,
				99
			],
			[
				41,
				38
			]
		],
		[
			[
				6088,
				22457
			],
			[
				0,
				0
			],
			[
				46,
				43
			],
			[
				11,
				36
			],
			[
				-8,
				110
			],
			[
				119,
				245
			],
			[
				45,
				31
			],
			[
				33,
				77
			],
			[
				42,
				363
			],
			[
				-7,
				109
			],
			[
				-63,
				-89
			],
			[
				2,
				-44
			],
			[
				2,
				-41
			],
			[
				-49,
				-302
			],
			[
				-86,
				-91
			],
			[
				-90,
				-180
			],
			[
				-26,
				-178
			],
			[
				-64,
				-58
			],
			[
				0,
				0
			]
		],
		[
			[
				5995,
				22488
			],
			[
				-180,
				-162
			],
			[
				-21,
				100
			],
			[
				-5,
				202
			],
			[
				-21,
				34
			],
			[
				-20,
				-22
			],
			[
				-22,
				-179
			],
			[
				-15,
				-5
			],
			[
				-26,
				-8
			],
			[
				-56,
				44
			],
			[
				-35,
				-14
			],
			[
				54,
				-64
			],
			[
				60,
				-26
			],
			[
				7,
				-3
			],
			[
				40,
				-94
			],
			[
				6,
				-45
			],
			[
				-24,
				-75
			],
			[
				22,
				-37
			],
			[
				21,
				-54
			],
			[
				12,
				-33
			],
			[
				-71,
				17
			],
			[
				-150,
				72
			],
			[
				13,
				-66
			],
			[
				120,
				-44
			],
			[
				-24,
				-98
			],
			[
				6,
				-41
			],
			[
				17,
				-104
			],
			[
				12,
				-9
			],
			[
				7,
				-6
			],
			[
				15,
				-83
			],
			[
				-14,
				-23
			],
			[
				-10,
				-16
			],
			[
				9,
				-55
			],
			[
				7,
				-46
			],
			[
				-58,
				-16
			],
			[
				-103,
				-28
			],
			[
				-42,
				-12
			],
			[
				-20,
				-25
			],
			[
				0,
				-29
			],
			[
				15,
				-47
			],
			[
				-77,
				-16
			],
			[
				-61,
				1
			],
			[
				-2,
				1
			],
			[
				-49,
				33
			],
			[
				-87,
				-44
			],
			[
				-21,
				-10
			],
			[
				-14,
				11
			],
			[
				-46,
				34
			],
			[
				-172,
				131
			],
			[
				-82,
				-23
			],
			[
				-6,
				8
			],
			[
				-149,
				193
			],
			[
				-43,
				18
			],
			[
				57,
				137
			],
			[
				8,
				20
			],
			[
				-19,
				5
			],
			[
				-1,
				0
			],
			[
				-20,
				5
			],
			[
				-16,
				-23
			],
			[
				-41,
				-57
			],
			[
				-45,
				-118
			],
			[
				-53,
				-2
			],
			[
				-72,
				-42
			],
			[
				-27,
				9
			],
			[
				0,
				0
			]
		],
		[
			[
				4483,
				21659
			],
			[
				-33,
				9
			],
			[
				-63,
				-18
			],
			[
				-19,
				-28
			],
			[
				-105,
				-24
			],
			[
				-44,
				47
			],
			[
				-46,
				31
			],
			[
				-52,
				14
			],
			[
				-13,
				40
			],
			[
				64,
				77
			],
			[
				56,
				3
			],
			[
				78,
				54
			],
			[
				33,
				98
			],
			[
				-14,
				108
			],
			[
				-8,
				1
			],
			[
				-44,
				4
			],
			[
				-32,
				-150
			],
			[
				-144,
				-61
			],
			[
				-37,
				-58
			],
			[
				-23,
				-35
			],
			[
				-8,
				-12
			],
			[
				-148,
				-54
			],
			[
				-84,
				8
			],
			[
				-87,
				-23
			],
			[
				-32,
				36
			],
			[
				-32,
				13
			],
			[
				-57,
				-34
			],
			[
				-33,
				29
			],
			[
				-16,
				162
			],
			[
				40,
				106
			],
			[
				2,
				5
			],
			[
				-3,
				1
			],
			[
				-24,
				10
			],
			[
				-15,
				7
			],
			[
				-67,
				-108
			],
			[
				24,
				-143
			],
			[
				-4,
				-83
			],
			[
				0,
				-1
			],
			[
				-92,
				11
			],
			[
				0,
				1
			],
			[
				-42,
				44
			],
			[
				-94,
				-2
			],
			[
				-24,
				-37
			],
			[
				22,
				-50
			],
			[
				-4,
				-59
			],
			[
				-57,
				-56
			],
			[
				-42,
				17
			],
			[
				-21,
				9
			],
			[
				-34,
				37
			],
			[
				-63,
				11
			],
			[
				-35,
				-53
			],
			[
				-5,
				-1
			],
			[
				-15,
				-2
			],
			[
				-22,
				15
			],
			[
				0,
				1
			],
			[
				-5,
				23
			],
			[
				-7,
				29
			],
			[
				-19,
				13
			],
			[
				-13,
				-54
			],
			[
				-3,
				-13
			],
			[
				-44,
				-47
			],
			[
				-25,
				-56
			],
			[
				-134,
				-117
			],
			[
				-60,
				-53
			],
			[
				-5,
				-4
			],
			[
				-6,
				2
			],
			[
				-34,
				11
			],
			[
				-11,
				4
			],
			[
				-3,
				1
			],
			[
				-262,
				-221
			],
			[
				-45,
				-7
			],
			[
				0,
				0
			]
		],
		[
			[
				2768,
				23067
			],
			[
				0,
				0
			],
			[
				0,
				-1
			],
			[
				187,
				43
			],
			[
				64,
				15
			],
			[
				45,
				-69
			],
			[
				45,
				3
			],
			[
				-2,
				53
			],
			[
				-1,
				1
			],
			[
				-2,
				1
			],
			[
				-56,
				53
			],
			[
				-3,
				1
			],
			[
				-58,
				7
			],
			[
				-34,
				-23
			],
			[
				-4,
				0
			],
			[
				-155,
				-20
			],
			[
				-38,
				18
			],
			[
				-85,
				40
			],
			[
				-29,
				2
			],
			[
				-131,
				8
			],
			[
				-38,
				-15
			],
			[
				-34,
				4
			],
			[
				-40,
				38
			],
			[
				-71,
				-7
			],
			[
				0,
				0
			]
		],
		[
			[
				2696,
				23598
			],
			[
				0,
				0
			],
			[
				2,
				1
			],
			[
				139,
				15
			],
			[
				-76,
				24
			],
			[
				0,
				0
			],
			[
				0,
				40
			],
			[
				72,
				-2
			],
			[
				41,
				37
			],
			[
				7,
				6
			],
			[
				82,
				-20
			],
			[
				6,
				-2
			],
			[
				24,
				7
			],
			[
				64,
				72
			],
			[
				7,
				9
			],
			[
				8,
				9
			],
			[
				-1,
				14
			],
			[
				-3,
				48
			],
			[
				41,
				-1
			],
			[
				25,
				0
			],
			[
				35,
				39
			],
			[
				0,
				1
			],
			[
				-10,
				46
			],
			[
				63,
				21
			],
			[
				64,
				-3
			],
			[
				63,
				-4
			],
			[
				32,
				-44
			],
			[
				57,
				-5
			],
			[
				36,
				-25
			],
			[
				2,
				-24
			],
			[
				2,
				-63
			],
			[
				114,
				-81
			],
			[
				19,
				5
			],
			[
				18,
				5
			],
			[
				23,
				6
			],
			[
				-46,
				37
			],
			[
				-88,
				71
			],
			[
				10,
				90
			],
			[
				1,
				4
			],
			[
				-37,
				28
			],
			[
				-33,
				24
			],
			[
				-9,
				5
			],
			[
				-46,
				22
			],
			[
				0,
				0
			]
		],
		[
			[
				3404,
				24010
			],
			[
				-32,
				15
			],
			[
				-115,
				7
			],
			[
				-17,
				15
			],
			[
				0,
				1
			],
			[
				-12,
				11
			],
			[
				-244,
				-156
			],
			[
				-12,
				-46
			],
			[
				-3,
				-13
			],
			[
				-1,
				-3
			],
			[
				-6,
				-22
			],
			[
				-28,
				-13
			],
			[
				-69,
				-30
			],
			[
				-5,
				-2
			],
			[
				-26,
				6
			],
			[
				-10,
				2
			],
			[
				-18,
				-10
			],
			[
				-43,
				-22
			],
			[
				-39,
				19
			],
			[
				-36,
				-38
			],
			[
				-56,
				-13
			],
			[
				-107,
				-22
			],
			[
				-42,
				54
			],
			[
				-29,
				13
			],
			[
				-32,
				2
			],
			[
				-9,
				42
			],
			[
				-1,
				7
			],
			[
				6,
				2
			],
			[
				34,
				8
			],
			[
				8,
				3
			],
			[
				7,
				-10
			],
			[
				26,
				-34
			],
			[
				21,
				-10
			],
			[
				-1,
				22
			],
			[
				-1,
				51
			],
			[
				-24,
				32
			],
			[
				7,
				19
			],
			[
				32,
				-2
			],
			[
				11,
				0
			],
			[
				32,
				20
			],
			[
				19,
				35
			],
			[
				0,
				24
			],
			[
				-95,
				-8
			],
			[
				-9,
				-11
			],
			[
				-21,
				-25
			],
			[
				-63,
				-6
			],
			[
				-39,
				13
			],
			[
				-16,
				5
			],
			[
				-8,
				3
			],
			[
				-10,
				-1
			],
			[
				-90,
				-8
			],
			[
				-30,
				-3
			],
			[
				-53,
				-13
			],
			[
				-15,
				5
			],
			[
				-104,
				29
			],
			[
				-16,
				5
			],
			[
				-16,
				10
			],
			[
				-15,
				9
			],
			[
				-20,
				15
			],
			[
				-31,
				1
			],
			[
				-10,
				1
			],
			[
				-3,
				-2
			],
			[
				-7,
				-4
			],
			[
				-15,
				-9
			],
			[
				-10,
				2
			],
			[
				-22,
				3
			],
			[
				-10,
				2
			],
			[
				0,
				0
			]
		],
		[
			[
				1861,
				23987
			],
			[
				-47,
				7
			],
			[
				-14,
				34
			],
			[
				-68,
				29
			],
			[
				3,
				6
			],
			[
				12,
				25
			],
			[
				-41,
				-3
			],
			[
				-3,
				0
			],
			[
				-25,
				4
			],
			[
				-27,
				4
			],
			[
				-63,
				32
			],
			[
				13,
				45
			],
			[
				5,
				-1
			],
			[
				30,
				-2
			],
			[
				-25,
				24
			],
			[
				-51,
				49
			],
			[
				62,
				-1
			],
			[
				0,
				74
			],
			[
				-16,
				24
			],
			[
				-4,
				43
			],
			[
				-1,
				13
			],
			[
				12,
				-2
			],
			[
				113,
				-16
			],
			[
				66,
				-79
			],
			[
				177,
				-19
			],
			[
				14,
				27
			],
			[
				-16,
				15
			],
			[
				-49,
				42
			],
			[
				131,
				-35
			],
			[
				38,
				41
			],
			[
				25,
				25
			],
			[
				14,
				-5
			],
			[
				141,
				-55
			],
			[
				9,
				33
			],
			[
				-122,
				65
			],
			[
				-21,
				11
			],
			[
				-59,
				-30
			],
			[
				-108,
				70
			],
			[
				-28,
				-2
			],
			[
				-26,
				-2
			],
			[
				-50,
				35
			],
			[
				9,
				7
			],
			[
				21,
				18
			],
			[
				-81,
				20
			],
			[
				-44,
				32
			],
			[
				-68,
				-21
			],
			[
				-15,
				-4
			],
			[
				-7,
				8
			],
			[
				-66,
				79
			],
			[
				-2,
				2
			],
			[
				8,
				3
			],
			[
				85,
				30
			],
			[
				97,
				-20
			],
			[
				-5,
				13
			],
			[
				-15,
				35
			],
			[
				36,
				18
			],
			[
				160,
				2
			],
			[
				20,
				-3
			],
			[
				171,
				-38
			],
			[
				109,
				-50
			],
			[
				-145,
				-70
			],
			[
				-10,
				71
			],
			[
				-61,
				17
			],
			[
				-46,
				-26
			],
			[
				69,
				-18
			],
			[
				1,
				-63
			],
			[
				62,
				-50
			],
			[
				17,
				36
			],
			[
				150,
				-26
			],
			[
				125,
				-22
			],
			[
				14,
				-2
			],
			[
				-12,
				19
			],
			[
				4,
				37
			],
			[
				31,
				64
			],
			[
				-24,
				29
			],
			[
				-89,
				17
			],
			[
				8,
				13
			],
			[
				-17,
				10
			],
			[
				-105,
				65
			],
			[
				-25,
				6
			],
			[
				-133,
				30
			],
			[
				-60,
				-17
			],
			[
				-6,
				-2
			],
			[
				-76,
				12
			],
			[
				-177,
				-11
			],
			[
				-205,
				-52
			],
			[
				-190,
				-37
			],
			[
				-22,
				-26
			],
			[
				-148,
				-23
			],
			[
				-21,
				-46
			],
			[
				-83,
				-38
			],
			[
				-26,
				18
			],
			[
				-18,
				76
			],
			[
				10,
				39
			],
			[
				25,
				27
			],
			[
				22,
				-16
			],
			[
				173,
				37
			],
			[
				-32,
				18
			],
			[
				48,
				25
			],
			[
				172,
				2
			],
			[
				20,
				-28
			],
			[
				136,
				33
			],
			[
				41,
				32
			],
			[
				234,
				14
			],
			[
				130,
				80
			],
			[
				1,
				1
			],
			[
				95,
				-1
			],
			[
				42,
				-25
			],
			[
				47,
				28
			],
			[
				42,
				25
			],
			[
				72,
				61
			],
			[
				-244,
				-20
			],
			[
				-85,
				-27
			],
			[
				-3,
				-1
			],
			[
				-77,
				-69
			],
			[
				-60,
				17
			],
			[
				-124,
				-15
			],
			[
				51,
				58
			],
			[
				-148,
				-15
			],
			[
				-18,
				-1
			],
			[
				-27,
				-21
			],
			[
				-64,
				-3
			],
			[
				-14,
				5
			],
			[
				-46,
				16
			],
			[
				-67,
				32
			],
			[
				-40,
				16
			],
			[
				-98,
				-24
			],
			[
				-76,
				-18
			],
			[
				-5,
				-5
			],
			[
				-20,
				-15
			],
			[
				-126,
				-26
			],
			[
				28,
				66
			],
			[
				28,
				88
			],
			[
				-20,
				43
			],
			[
				-51,
				44
			],
			[
				-36,
				57
			],
			[
				-11,
				90
			],
			[
				25,
				83
			],
			[
				25,
				4
			],
			[
				-4,
				16
			]
		],
		[
			[
				680,
				25386
			],
			[
				51,
				-31
			],
			[
				2,
				-119
			],
			[
				32,
				26
			],
			[
				10,
				-125
			],
			[
				-11,
				-58
			],
			[
				-21,
				24
			],
			[
				-9,
				48
			],
			[
				-17,
				8
			],
			[
				-29,
				-32
			],
			[
				-8,
				-51
			],
			[
				-24,
				-13
			],
			[
				-35,
				42
			],
			[
				-30,
				44
			],
			[
				-26,
				65
			],
			[
				-15,
				52
			],
			[
				52,
				123
			],
			[
				39,
				-11
			],
			[
				8,
				39
			],
			[
				-20,
				8
			],
			[
				63,
				65
			],
			[
				44,
				-45
			],
			[
				-12,
				-38
			],
			[
				-44,
				-21
			]
		],
		[
			[
				514,
				24952
			],
			[
				-12,
				-27
			],
			[
				-33,
				16
			],
			[
				-26,
				-11
			],
			[
				-39,
				37
			],
			[
				-11,
				34
			],
			[
				31,
				41
			],
			[
				39,
				40
			],
			[
				43,
				-35
			],
			[
				8,
				-95
			]
		],
		[
			[
				1420,
				24867
			],
			[
				-63,
				-30
			],
			[
				-41,
				13
			],
			[
				-10,
				35
			],
			[
				3,
				20
			],
			[
				26,
				6
			],
			[
				61,
				-18
			],
			[
				24,
				-26
			]
		],
		[
			[
				723,
				24750
			],
			[
				32,
				-79
			],
			[
				-10,
				-37
			],
			[
				-146,
				-23
			],
			[
				-81,
				-32
			],
			[
				-93,
				3
			],
			[
				48,
				64
			],
			[
				52,
				16
			],
			[
				25,
				67
			],
			[
				83,
				-18
			],
			[
				-24,
				70
			],
			[
				114,
				-31
			]
		],
		[
			[
				383,
				24374
			],
			[
				-47,
				-10
			],
			[
				-6,
				13
			],
			[
				-58,
				-4
			],
			[
				3,
				48
			],
			[
				41,
				12
			],
			[
				34,
				48
			],
			[
				37,
				-27
			],
			[
				12,
				-52
			],
			[
				-16,
				-28
			]
		],
		[
			[
				656,
				24527
			],
			[
				43,
				-9
			],
			[
				39,
				-25
			],
			[
				9,
				-23
			],
			[
				-47,
				-17
			],
			[
				-105,
				-29
			],
			[
				-53,
				-5
			],
			[
				-76,
				-24
			],
			[
				-34,
				35
			],
			[
				17,
				41
			],
			[
				82,
				5
			],
			[
				17,
				32
			],
			[
				80,
				2
			],
			[
				28,
				17
			]
		],
		[
			[
				1527,
				24570
			],
			[
				20,
				-49
			],
			[
				-40,
				-4
			],
			[
				-87,
				15
			],
			[
				-1,
				24
			],
			[
				15,
				14
			],
			[
				93,
				0
			]
		],
		[
			[
				1585,
				24336
			],
			[
				-15,
				-32
			],
			[
				-59,
				0
			],
			[
				-68,
				29
			],
			[
				-35,
				37
			],
			[
				-47,
				1
			],
			[
				-98,
				42
			],
			[
				-13,
				53
			],
			[
				54,
				53
			],
			[
				73,
				1
			],
			[
				60,
				-53
			],
			[
				66,
				-32
			],
			[
				54,
				-52
			],
			[
				28,
				-47
			]
		],
		[
			[
				867,
				24259
			],
			[
				137,
				-161
			],
			[
				44,
				45
			],
			[
				8,
				-70
			],
			[
				-83,
				-59
			],
			[
				-127,
				95
			],
			[
				12,
				32
			],
			[
				-38,
				68
			],
			[
				47,
				50
			]
		],
		[
			[
				1411,
				23993
			],
			[
				41,
				-8
			],
			[
				8,
				14
			],
			[
				59,
				-12
			],
			[
				34,
				-46
			],
			[
				-21,
				-15
			],
			[
				-63,
				21
			],
			[
				-28,
				-16
			],
			[
				11,
				-42
			],
			[
				-36,
				-46
			],
			[
				-39,
				-11
			],
			[
				-14,
				20
			],
			[
				-128,
				-13
			],
			[
				15,
				47
			],
			[
				-17,
				116
			],
			[
				59,
				49
			],
			[
				31,
				-66
			],
			[
				37,
				-2
			],
			[
				16,
				24
			],
			[
				-6,
				28
			],
			[
				-26,
				30
			],
			[
				74,
				-2
			],
			[
				-7,
				-70
			]
		],
		[
			[
				2434,
				23727
			],
			[
				0,
				0
			],
			[
				5,
				0
			],
			[
				12,
				-9
			],
			[
				0,
				0
			]
		],
		[
			[
				22627,
				38264
			],
			[
				26,
				-108
			],
			[
				73,
				-300
			],
			[
				28,
				-116
			],
			[
				64,
				-261
			],
			[
				-61,
				-127
			],
			[
				-5,
				-10
			],
			[
				-3,
				-7
			],
			[
				-14,
				-29
			],
			[
				-41,
				-87
			],
			[
				-96,
				-202
			],
			[
				-126,
				-280
			],
			[
				-43,
				-95
			],
			[
				-49,
				-88
			],
			[
				-18,
				-32
			],
			[
				-4,
				-7
			],
			[
				-3,
				-5
			],
			[
				-4,
				-8
			],
			[
				-49,
				-85
			],
			[
				-1,
				-3
			],
			[
				-23,
				-40
			],
			[
				-48,
				-86
			],
			[
				-131,
				-234
			],
			[
				0,
				0
			],
			[
				19,
				-49
			],
			[
				53,
				-133
			],
			[
				77,
				-190
			],
			[
				21,
				-51
			],
			[
				49,
				-121
			],
			[
				17,
				-43
			]
		],
		[
			[
				18711,
				37206
			],
			[
				0,
				0
			],
			[
				35,
				35
			],
			[
				1,
				1
			],
			[
				5,
				5
			],
			[
				1,
				0
			],
			[
				21,
				3
			],
			[
				21,
				3
			],
			[
				4,
				1
			],
			[
				27,
				4
			],
			[
				32,
				6
			],
			[
				21,
				4
			],
			[
				2,
				9
			],
			[
				4,
				14
			],
			[
				4,
				13
			],
			[
				0,
				0
			],
			[
				0,
				1
			],
			[
				0,
				15
			],
			[
				1,
				81
			],
			[
				0,
				10
			],
			[
				-5,
				4
			],
			[
				-34,
				29
			],
			[
				-40,
				-60
			],
			[
				-17,
				77
			],
			[
				-29,
				-1
			],
			[
				-51,
				0
			],
			[
				-33,
				-38
			],
			[
				-90,
				12
			],
			[
				-100,
				91
			],
			[
				-8,
				46
			],
			[
				-58,
				72
			],
			[
				3,
				82
			],
			[
				2,
				34
			],
			[
				49,
				126
			],
			[
				115,
				23
			],
			[
				12,
				-2
			],
			[
				59,
				-9
			],
			[
				64,
				29
			],
			[
				42,
				2
			],
			[
				74,
				5
			],
			[
				8,
				11
			],
			[
				38,
				45
			],
			[
				70,
				51
			],
			[
				0,
				0
			]
		],
		[
			[
				18863,
				38377
			],
			[
				-13,
				0
			],
			[
				-49,
				-23
			],
			[
				-82,
				-62
			],
			[
				-21,
				-35
			],
			[
				-121,
				-49
			],
			[
				41,
				-6
			],
			[
				-1,
				-20
			],
			[
				-85,
				-22
			],
			[
				-12,
				-13
			],
			[
				-50,
				-59
			],
			[
				-67,
				-4
			],
			[
				6,
				39
			],
			[
				-37,
				6
			],
			[
				-51,
				-73
			],
			[
				-38,
				-7
			],
			[
				-78,
				-112
			],
			[
				-108,
				-52
			],
			[
				-60,
				68
			],
			[
				54,
				19
			],
			[
				8,
				53
			],
			[
				57,
				-13
			],
			[
				18,
				73
			],
			[
				12,
				92
			],
			[
				7,
				7
			],
			[
				70,
				73
			],
			[
				4,
				93
			],
			[
				29,
				74
			],
			[
				30,
				20
			],
			[
				56,
				15
			],
			[
				41,
				50
			],
			[
				76,
				53
			],
			[
				9,
				-34
			],
			[
				65,
				-2
			],
			[
				63,
				33
			],
			[
				55,
				4
			],
			[
				32,
				54
			],
			[
				11,
				68
			],
			[
				39,
				14
			],
			[
				27,
				63
			],
			[
				29,
				38
			]
		],
		[
			[
				18035,
				38147
			],
			[
				-41,
				-51
			],
			[
				-29,
				5
			],
			[
				-33,
				-47
			],
			[
				-23,
				24
			],
			[
				38,
				83
			],
			[
				59,
				45
			],
			[
				17,
				11
			],
			[
				32,
				11
			],
			[
				7,
				-20
			],
			[
				-3,
				-20
			],
			[
				-24,
				-41
			]
		],
		[
			[
				4717,
				5965
			],
			[
				-107,
				-6
			],
			[
				-71,
				76
			],
			[
				-96,
				101
			],
			[
				-47,
				131
			],
			[
				-46,
				44
			],
			[
				47,
				39
			],
			[
				-1,
				87
			],
			[
				-1,
				23
			],
			[
				56,
				64
			],
			[
				-12,
				24
			],
			[
				0,
				1
			],
			[
				16,
				45
			],
			[
				36,
				18
			],
			[
				2,
				1
			],
			[
				32,
				28
			],
			[
				5,
				16
			],
			[
				5,
				23
			],
			[
				62,
				23
			],
			[
				47,
				46
			],
			[
				26,
				44
			],
			[
				91,
				52
			],
			[
				36,
				46
			],
			[
				68,
				53
			],
			[
				71,
				39
			],
			[
				8,
				4
			],
			[
				52,
				-14
			],
			[
				76,
				29
			],
			[
				115,
				14
			],
			[
				11,
				1
			],
			[
				428,
				170
			],
			[
				61,
				-6
			],
			[
				344,
				152
			],
			[
				0,
				4
			],
			[
				-2,
				24
			],
			[
				0,
				11
			],
			[
				-351,
				-109
			],
			[
				-82,
				1
			],
			[
				-389,
				-124
			],
			[
				-78,
				-32
			],
			[
				-60,
				-9
			],
			[
				-144,
				-23
			],
			[
				-31,
				-5
			],
			[
				-29,
				-24
			],
			[
				-162,
				-133
			],
			[
				-121,
				-126
			],
			[
				-73,
				-83
			],
			[
				-122,
				-110
			],
			[
				0,
				-3
			],
			[
				-6,
				-97
			],
			[
				-7,
				-7
			],
			[
				-45,
				-48
			],
			[
				-4,
				-56
			],
			[
				-9,
				-28
			],
			[
				0,
				0
			],
			[
				-5,
				-18
			],
			[
				-4,
				5
			],
			[
				-29,
				35
			],
			[
				-24,
				67
			],
			[
				-24,
				66
			],
			[
				-26,
				25
			],
			[
				-32,
				-14
			],
			[
				-73,
				162
			],
			[
				-14,
				53
			],
			[
				0,
				0
			]
		],
		[
			[
				4085,
				6737
			],
			[
				-8,
				29
			],
			[
				37,
				64
			],
			[
				29,
				93
			],
			[
				111,
				66
			],
			[
				103,
				-102
			],
			[
				-31,
				80
			],
			[
				-37,
				57
			],
			[
				-55,
				34
			],
			[
				0,
				0
			],
			[
				-22,
				28
			],
			[
				-44,
				55
			],
			[
				-28,
				9
			],
			[
				-31,
				-9
			],
			[
				-23,
				-6
			],
			[
				-26,
				-8
			],
			[
				-57,
				23
			],
			[
				-29,
				-28
			],
			[
				-35,
				18
			],
			[
				-80,
				148
			],
			[
				-28,
				50
			],
			[
				-12,
				95
			],
			[
				-12,
				-11
			],
			[
				-4,
				-3
			],
			[
				-29,
				11
			],
			[
				-1,
				2
			],
			[
				-17,
				58
			],
			[
				-3,
				74
			],
			[
				202,
				208
			],
			[
				86,
				47
			],
			[
				45,
				-37
			],
			[
				57,
				-13
			],
			[
				63,
				5
			],
			[
				60,
				41
			],
			[
				-8,
				40
			],
			[
				46,
				36
			],
			[
				33,
				-26
			],
			[
				36,
				10
			],
			[
				-26,
				20
			],
			[
				17,
				40
			],
			[
				59,
				7
			],
			[
				100,
				-13
			]
		],
		[
			[
				4523,
				7929
			],
			[
				0,
				0
			],
			[
				59,
				-8
			],
			[
				30,
				17
			],
			[
				-16,
				36
			],
			[
				-14,
				32
			],
			[
				-105,
				-5
			],
			[
				-50,
				-28
			],
			[
				-33,
				11
			],
			[
				1,
				35
			],
			[
				-26,
				11
			],
			[
				-48,
				-60
			],
			[
				-92,
				-47
			],
			[
				-73,
				45
			],
			[
				88,
				181
			],
			[
				-4,
				43
			],
			[
				24,
				23
			],
			[
				20,
				-16
			],
			[
				11,
				12
			],
			[
				3,
				91
			],
			[
				85,
				33
			],
			[
				0,
				50
			],
			[
				4,
				53
			],
			[
				23,
				50
			],
			[
				27,
				-37
			],
			[
				44,
				33
			],
			[
				5,
				15
			],
			[
				22,
				61
			],
			[
				75,
				21
			],
			[
				40,
				10
			],
			[
				5,
				25
			],
			[
				2,
				9
			],
			[
				-13,
				51
			],
			[
				5,
				7
			],
			[
				47,
				64
			],
			[
				63,
				27
			],
			[
				2,
				1
			],
			[
				19,
				31
			],
			[
				54,
				11
			],
			[
				42,
				8
			],
			[
				50,
				-5
			],
			[
				33,
				40
			],
			[
				4,
				2
			],
			[
				81,
				35
			],
			[
				28,
				-44
			],
			[
				26,
				-25
			],
			[
				14,
				11
			],
			[
				-24,
				93
			],
			[
				67,
				48
			],
			[
				91,
				66
			],
			[
				129,
				68
			],
			[
				25,
				3
			],
			[
				169,
				17
			],
			[
				44,
				-7
			],
			[
				60,
				14
			],
			[
				-69,
				36
			],
			[
				-97,
				17
			],
			[
				-39,
				-21
			],
			[
				-45,
				23
			],
			[
				-29,
				4
			],
			[
				-42,
				-18
			],
			[
				-81,
				-1
			],
			[
				-80,
				-25
			],
			[
				-27,
				-9
			],
			[
				-16,
				-49
			],
			[
				-40,
				-53
			],
			[
				-62,
				-41
			],
			[
				-151,
				-78
			],
			[
				-51,
				-26
			],
			[
				-94,
				-48
			],
			[
				-69,
				-15
			],
			[
				-62,
				-64
			],
			[
				-22,
				-5
			],
			[
				-18,
				-4
			],
			[
				-35,
				101
			],
			[
				-30,
				11
			],
			[
				-37,
				54
			],
			[
				-14,
				38
			],
			[
				-5,
				60
			],
			[
				0,
				2
			],
			[
				-2,
				16
			],
			[
				32,
				34
			],
			[
				19,
				5
			],
			[
				13,
				4
			],
			[
				29,
				-11
			],
			[
				79,
				-10
			],
			[
				4,
				2
			],
			[
				35,
				22
			],
			[
				55,
				7
			],
			[
				108,
				16
			]
		],
		[
			[
				4803,
				9115
			],
			[
				0,
				0
			],
			[
				37,
				5
			],
			[
				26,
				-16
			],
			[
				3,
				-7
			],
			[
				8,
				-17
			]
		],
		[
			[
				4877,
				9080
			],
			[
				0,
				0
			],
			[
				29,
				-59
			],
			[
				4,
				61
			]
		],
		[
			[
				4910,
				9082
			],
			[
				0,
				0
			],
			[
				0,
				11
			],
			[
				-14,
				51
			],
			[
				-7,
				28
			],
			[
				-3,
				11
			],
			[
				-59,
				81
			],
			[
				-23,
				94
			],
			[
				-1,
				4
			],
			[
				-16,
				22
			],
			[
				-25,
				33
			],
			[
				-18,
				-48
			],
			[
				12,
				-31
			],
			[
				14,
				-36
			],
			[
				34,
				-75
			],
			[
				-32,
				-39
			],
			[
				-45,
				-2
			],
			[
				-40,
				-23
			],
			[
				-26,
				-14
			],
			[
				2,
				18
			],
			[
				3,
				29
			],
			[
				12,
				45
			],
			[
				3,
				11
			],
			[
				41,
				27
			],
			[
				11,
				33
			],
			[
				-47,
				24
			],
			[
				-17,
				-18
			],
			[
				-10,
				-11
			],
			[
				-42,
				-159
			],
			[
				-4,
				-13
			],
			[
				-8,
				-1
			],
			[
				-87,
				-5
			],
			[
				-24,
				-2
			],
			[
				-103,
				58
			],
			[
				-11,
				88
			],
			[
				0,
				2
			],
			[
				13,
				114
			],
			[
				59,
				119
			],
			[
				-26,
				5
			],
			[
				-36,
				-55
			],
			[
				-59,
				-101
			],
			[
				-2,
				-32
			],
			[
				24,
				-2
			],
			[
				-2,
				-49
			],
			[
				0,
				-1
			],
			[
				-22,
				-41
			],
			[
				-125,
				19
			],
			[
				-13,
				21
			],
			[
				0,
				1
			],
			[
				-32,
				4
			],
			[
				-17,
				29
			],
			[
				1,
				35
			],
			[
				18,
				57
			],
			[
				37,
				44
			],
			[
				9,
				14
			],
			[
				23,
				60
			],
			[
				5,
				41
			],
			[
				42,
				56
			],
			[
				32,
				-4
			],
			[
				11,
				-1
			],
			[
				18,
				25
			],
			[
				26,
				34
			],
			[
				29,
				9
			],
			[
				50,
				16
			],
			[
				54,
				22
			],
			[
				14,
				18
			],
			[
				-17,
				40
			],
			[
				4,
				45
			],
			[
				98,
				44
			],
			[
				11,
				-4
			],
			[
				16,
				-7
			],
			[
				76,
				135
			],
			[
				31,
				31
			],
			[
				6,
				-25
			],
			[
				-19,
				-167
			],
			[
				139,
				361
			],
			[
				-28,
				54
			],
			[
				1,
				32
			],
			[
				0,
				15
			],
			[
				1,
				27
			],
			[
				26,
				72
			],
			[
				45,
				42
			],
			[
				79,
				32
			],
			[
				81,
				39
			],
			[
				93,
				32
			],
			[
				78,
				28
			],
			[
				38,
				17
			],
			[
				38,
				50
			],
			[
				81,
				26
			],
			[
				111,
				74
			],
			[
				105,
				9
			],
			[
				40,
				-14
			],
			[
				148,
				50
			],
			[
				-82,
				27
			],
			[
				-99,
				-11
			],
			[
				-78,
				-4
			],
			[
				-44,
				18
			],
			[
				-95,
				-23
			],
			[
				-39,
				-40
			],
			[
				-88,
				-31
			],
			[
				-72,
				3
			],
			[
				-32,
				-25
			],
			[
				1,
				-36
			],
			[
				-109,
				-59
			],
			[
				-81,
				-28
			],
			[
				-37,
				-39
			],
			[
				-40,
				1
			],
			[
				77,
				242
			],
			[
				4,
				30
			],
			[
				41,
				40
			],
			[
				13,
				23
			]
		],
		[
			[
				4936,
				10839
			],
			[
				-28,
				-35
			],
			[
				-22,
				-52
			],
			[
				5,
				-107
			],
			[
				-31,
				-34
			],
			[
				-17,
				-74
			],
			[
				-104,
				-94
			],
			[
				-34,
				-53
			],
			[
				-9,
				-104
			],
			[
				9,
				-3
			],
			[
				25,
				-10
			],
			[
				12,
				-60
			],
			[
				-105,
				-139
			],
			[
				-43,
				-109
			],
			[
				-29,
				-73
			],
			[
				-66,
				-10
			],
			[
				-44,
				-40
			],
			[
				-8,
				-93
			],
			[
				-23,
				-4
			],
			[
				-23,
				23
			],
			[
				-6,
				6
			],
			[
				-26,
				5
			],
			[
				-28,
				5
			],
			[
				-5,
				-18
			],
			[
				-5,
				-17
			],
			[
				-40,
				-1
			],
			[
				-37,
				0
			],
			[
				4,
				-13
			],
			[
				5,
				-17
			],
			[
				-14,
				-31
			],
			[
				-29,
				-3
			],
			[
				-35,
				22
			],
			[
				-12,
				7
			],
			[
				-9,
				77
			],
			[
				-59,
				-39
			],
			[
				-3,
				-51
			],
			[
				38,
				30
			],
			[
				13,
				-65
			],
			[
				-1,
				-38
			],
			[
				-2,
				-45
			],
			[
				-7,
				-10
			],
			[
				-7,
				-9
			],
			[
				-12,
				-16
			],
			[
				-27,
				10
			],
			[
				-19,
				7
			],
			[
				-4,
				2
			],
			[
				-42,
				-85
			],
			[
				-25,
				-51
			],
			[
				1,
				-2
			],
			[
				16,
				-40
			],
			[
				-64,
				-16
			],
			[
				-1,
				0
			],
			[
				0,
				0
			],
			[
				-44,
				62
			],
			[
				-18,
				93
			],
			[
				0,
				0
			],
			[
				3,
				47
			],
			[
				-28,
				103
			],
			[
				-24,
				29
			],
			[
				-10,
				12
			],
			[
				-10,
				142
			],
			[
				0,
				14
			],
			[
				-2,
				52
			],
			[
				39,
				33
			],
			[
				-37,
				84
			],
			[
				53,
				33
			],
			[
				25,
				-16
			],
			[
				5,
				-28
			],
			[
				89,
				-25
			],
			[
				86,
				41
			],
			[
				41,
				-25
			],
			[
				117,
				70
			],
			[
				320,
				108
			],
			[
				3,
				0
			],
			[
				84,
				12
			],
			[
				19,
				2
			],
			[
				4,
				38
			],
			[
				2,
				18
			],
			[
				-56,
				21
			],
			[
				0,
				0
			]
		],
		[
			[
				3993,
				9234
			],
			[
				-26,
				-7
			],
			[
				-21,
				8
			],
			[
				-10,
				43
			],
			[
				-3,
				22
			],
			[
				16,
				12
			],
			[
				41,
				1
			],
			[
				22,
				-2
			],
			[
				17,
				-8
			],
			[
				10,
				-11
			],
			[
				-5,
				-46
			],
			[
				-41,
				-12
			]
		],
		[
			[
				3982,
				6824
			],
			[
				-58,
				-9
			],
			[
				-85,
				49
			],
			[
				-45,
				51
			],
			[
				2,
				31
			],
			[
				31,
				23
			],
			[
				36,
				-3
			],
			[
				37,
				-21
			],
			[
				37,
				-28
			],
			[
				41,
				-47
			],
			[
				5,
				-5
			],
			[
				0,
				-4
			],
			[
				-1,
				-37
			]
		],
		[
			[
				4062,
				6803
			],
			[
				-16,
				-31
			],
			[
				-17,
				35
			],
			[
				-20,
				6
			],
			[
				-3,
				35
			],
			[
				-1,
				27
			],
			[
				0,
				27
			],
			[
				19,
				38
			],
			[
				29,
				-2
			],
			[
				15,
				-7
			],
			[
				29,
				-57
			],
			[
				-35,
				-71
			]
		],
		[
			[
				4283,
				8967
			],
			[
				0,
				0
			],
			[
				33,
				-36
			],
			[
				60,
				-55
			],
			[
				20,
				-41
			],
			[
				4,
				-9
			],
			[
				6,
				-58
			],
			[
				-2,
				-4
			],
			[
				-8,
				-26
			],
			[
				-5,
				-16
			],
			[
				-16,
				-22
			],
			[
				0,
				0
			],
			[
				-8,
				-10
			],
			[
				-19,
				-5
			],
			[
				-14,
				-3
			],
			[
				-43,
				-34
			],
			[
				-40,
				-31
			],
			[
				-48,
				-7
			],
			[
				-38,
				-5
			],
			[
				-55,
				-13
			],
			[
				-26,
				-13
			],
			[
				0,
				0
			]
		],
		[
			[
				4084,
				8579
			],
			[
				-108,
				-58
			],
			[
				-97,
				13
			],
			[
				37,
				45
			],
			[
				-33,
				54
			],
			[
				-23,
				76
			],
			[
				-7,
				60
			],
			[
				2,
				70
			],
			[
				24,
				44
			],
			[
				43,
				-11
			],
			[
				9,
				59
			],
			[
				94,
				51
			],
			[
				31,
				-20
			],
			[
				136,
				22
			],
			[
				31,
				29
			],
			[
				25,
				-1
			],
			[
				13,
				0
			],
			[
				7,
				-18
			],
			[
				6,
				-18
			],
			[
				9,
				-9
			]
		],
		[
			[
				4363,
				8575
			],
			[
				14,
				0
			],
			[
				18,
				-32
			],
			[
				-9,
				-48
			],
			[
				-71,
				-96
			],
			[
				-57,
				-53
			],
			[
				-16,
				-44
			],
			[
				-22,
				-58
			],
			[
				-38,
				-6
			],
			[
				5,
				29
			],
			[
				-14,
				13
			],
			[
				-24,
				-21
			],
			[
				-10,
				-35
			],
			[
				-31,
				11
			],
			[
				-13,
				46
			],
			[
				48,
				45
			],
			[
				-35,
				27
			],
			[
				-27,
				0
			],
			[
				-18,
				21
			],
			[
				10,
				46
			],
			[
				17,
				42
			],
			[
				60,
				12
			],
			[
				66,
				-1
			],
			[
				53,
				39
			],
			[
				-3,
				47
			],
			[
				0,
				3
			],
			[
				28,
				10
			],
			[
				44,
				2
			],
			[
				25,
				1
			]
		],
		[
			[
				3609,
				8501
			],
			[
				-32,
				-9
			],
			[
				-61,
				14
			],
			[
				-24,
				15
			],
			[
				2,
				38
			],
			[
				12,
				24
			],
			[
				20,
				0
			],
			[
				29,
				-5
			],
			[
				46,
				-11
			],
			[
				23,
				-11
			],
			[
				15,
				-10
			],
			[
				5,
				-6
			],
			[
				-5,
				-16
			],
			[
				-10,
				-15
			],
			[
				-20,
				-8
			]
		],
		[
			[
				3604,
				8792
			],
			[
				-3,
				-50
			],
			[
				-57,
				-42
			],
			[
				-52,
				-63
			],
			[
				-48,
				47
			],
			[
				32,
				86
			],
			[
				34,
				23
			],
			[
				35,
				-28
			],
			[
				15,
				62
			],
			[
				20,
				10
			],
			[
				24,
				-45
			]
		],
		[
			[
				3731,
				8710
			],
			[
				-48,
				-21
			],
			[
				-38,
				6
			],
			[
				-19,
				110
			],
			[
				49,
				90
			],
			[
				40,
				-35
			],
			[
				33,
				-58
			],
			[
				-7,
				-37
			],
			[
				-10,
				-55
			]
		],
		[
			[
				3716,
				8159
			],
			[
				2,
				-52
			],
			[
				-45,
				-12
			],
			[
				-15,
				-4
			],
			[
				-2,
				-6
			],
			[
				-48,
				-138
			],
			[
				-42,
				-16
			],
			[
				-18,
				30
			],
			[
				-6,
				-2
			],
			[
				-54,
				-24
			],
			[
				-11,
				-5
			],
			[
				-47,
				41
			],
			[
				-30,
				100
			],
			[
				1,
				97
			],
			[
				24,
				23
			],
			[
				49,
				-86
			],
			[
				40,
				20
			],
			[
				-25,
				116
			],
			[
				34,
				7
			],
			[
				10,
				86
			],
			[
				38,
				28
			],
			[
				54,
				-36
			],
			[
				2,
				-21
			],
			[
				47,
				-45
			],
			[
				37,
				-1
			],
			[
				5,
				-100
			]
		],
		[
			[
				3944,
				7937
			],
			[
				-16,
				-55
			],
			[
				-56,
				-41
			],
			[
				-115,
				-87
			],
			[
				3,
				66
			],
			[
				-21,
				-34
			],
			[
				-24,
				3
			],
			[
				-6,
				53
			],
			[
				17,
				40
			],
			[
				64,
				-17
			],
			[
				-6,
				60
			],
			[
				-5,
				47
			],
			[
				19,
				60
			],
			[
				68,
				42
			],
			[
				12,
				86
			],
			[
				1,
				1
			],
			[
				3,
				-1
			],
			[
				46,
				-9
			],
			[
				11,
				-50
			],
			[
				-47,
				-56
			],
			[
				52,
				-108
			]
		],
		[
			[
				3656,
				7690
			],
			[
				-38,
				-18
			],
			[
				-19,
				-2
			],
			[
				-14,
				7
			],
			[
				-96,
				52
			],
			[
				-6,
				10
			],
			[
				-11,
				34
			],
			[
				0,
				1
			],
			[
				4,
				10
			],
			[
				14,
				13
			],
			[
				4,
				3
			],
			[
				140,
				-40
			],
			[
				31,
				-15
			],
			[
				2,
				-37
			],
			[
				-11,
				-18
			]
		],
		[
			[
				3905,
				8297
			],
			[
				-18,
				30
			],
			[
				-41,
				50
			],
			[
				42,
				33
			],
			[
				23,
				13
			],
			[
				27,
				-11
			],
			[
				15,
				-59
			],
			[
				7,
				-25
			],
			[
				44,
				-24
			],
			[
				7,
				-109
			],
			[
				-45,
				6
			],
			[
				-13,
				18
			],
			[
				-10,
				16
			],
			[
				-16,
				24
			],
			[
				-22,
				38
			]
		],
		[
			[
				3633,
				3449
			],
			[
				-5,
				1
			],
			[
				-65,
				13
			],
			[
				-53,
				31
			],
			[
				-63,
				35
			],
			[
				-15,
				57
			],
			[
				48,
				19
			],
			[
				-16,
				88
			],
			[
				-34,
				27
			],
			[
				-43,
				65
			],
			[
				-71,
				42
			],
			[
				-44,
				3
			],
			[
				-81,
				-9
			],
			[
				-149,
				144
			],
			[
				-40,
				201
			],
			[
				-43,
				65
			],
			[
				-29,
				81
			],
			[
				-85,
				175
			],
			[
				-9,
				55
			],
			[
				-40,
				62
			],
			[
				-62,
				49
			],
			[
				-28,
				103
			],
			[
				-1,
				2
			],
			[
				23,
				98
			],
			[
				-2,
				43
			],
			[
				0,
				0
			]
		],
		[
			[
				2726,
				4899
			],
			[
				0,
				2
			],
			[
				-93,
				118
			],
			[
				9,
				60
			],
			[
				-11,
				55
			],
			[
				-28,
				119
			],
			[
				-55,
				51
			],
			[
				36,
				89
			],
			[
				97,
				96
			],
			[
				42,
				128
			],
			[
				-5,
				85
			],
			[
				0,
				1
			],
			[
				-19,
				68
			],
			[
				35,
				62
			]
		],
		[
			[
				2734,
				5833
			],
			[
				0,
				0
			],
			[
				19,
				35
			],
			[
				16,
				76
			],
			[
				-51,
				36
			],
			[
				14,
				60
			],
			[
				25,
				4
			],
			[
				37,
				87
			],
			[
				95,
				34
			],
			[
				-6,
				79
			],
			[
				-67,
				49
			],
			[
				-8,
				79
			],
			[
				4,
				55
			],
			[
				24,
				24
			],
			[
				33,
				-4
			],
			[
				19,
				22
			],
			[
				18,
				20
			],
			[
				-21,
				34
			],
			[
				-1,
				0
			],
			[
				-13,
				-18
			],
			[
				-24,
				-10
			],
			[
				-48,
				28
			],
			[
				-29,
				73
			],
			[
				18,
				57
			],
			[
				15,
				40
			],
			[
				31,
				36
			],
			[
				66,
				-41
			],
			[
				10,
				-6
			],
			[
				-13,
				-38
			],
			[
				25,
				-45
			],
			[
				30,
				-9
			],
			[
				9,
				-43
			],
			[
				0,
				-31
			],
			[
				-6,
				-117
			],
			[
				-28,
				-52
			],
			[
				50,
				-23
			],
			[
				8,
				-41
			],
			[
				33,
				12
			],
			[
				-10,
				50
			],
			[
				32,
				34
			],
			[
				20,
				1
			],
			[
				18,
				28
			],
			[
				65,
				100
			],
			[
				-22,
				39
			],
			[
				0,
				0
			]
		],
		[
			[
				3121,
				6547
			],
			[
				-26,
				47
			],
			[
				-76,
				-73
			],
			[
				-17,
				11
			],
			[
				0,
				0
			]
		],
		[
			[
				3002,
				6532
			],
			[
				-12,
				7
			],
			[
				0,
				15
			]
		],
		[
			[
				2990,
				6554
			],
			[
				0,
				0
			],
			[
				0,
				43
			],
			[
				-16,
				59
			],
			[
				-6,
				22
			],
			[
				-56,
				45
			],
			[
				-30,
				24
			],
			[
				-31,
				32
			],
			[
				36,
				26
			],
			[
				29,
				24
			],
			[
				-1,
				2
			]
		],
		[
			[
				2915,
				6831
			],
			[
				0,
				0
			],
			[
				-21,
				62
			],
			[
				-21,
				-6
			],
			[
				-98,
				-31
			],
			[
				-14,
				46
			],
			[
				25,
				35
			],
			[
				0,
				88
			],
			[
				-7,
				75
			],
			[
				19,
				12
			],
			[
				49,
				-12
			],
			[
				13,
				29
			],
			[
				-55,
				61
			],
			[
				26,
				48
			],
			[
				57,
				-39
			],
			[
				6,
				-49
			],
			[
				25,
				-8
			],
			[
				37,
				-10
			],
			[
				14,
				-16
			],
			[
				28,
				-31
			],
			[
				7,
				-9
			],
			[
				26,
				4
			],
			[
				24,
				-18
			],
			[
				18,
				-47
			],
			[
				-22,
				-28
			],
			[
				15,
				-2
			]
		],
		[
			[
				3066,
				6985
			],
			[
				0,
				0
			],
			[
				64,
				-9
			],
			[
				106,
				-118
			],
			[
				45,
				-39
			],
			[
				40,
				-17
			],
			[
				6,
				-2
			],
			[
				48,
				-20
			],
			[
				17,
				-31
			],
			[
				-5,
				-49
			],
			[
				-58,
				-41
			],
			[
				-8,
				-6
			],
			[
				12,
				-12
			],
			[
				12,
				-13
			],
			[
				9,
				-57
			],
			[
				-2,
				-62
			],
			[
				-19,
				-46
			],
			[
				-21,
				-14
			],
			[
				-16,
				-35
			],
			[
				11,
				-54
			],
			[
				32,
				-70
			],
			[
				-1,
				-52
			],
			[
				-5,
				-25
			],
			[
				0,
				0
			]
		],
		[
			[
				3333,
				6213
			],
			[
				-16,
				-83
			],
			[
				7,
				-42
			],
			[
				0,
				-44
			],
			[
				-18,
				-65
			],
			[
				38,
				26
			],
			[
				20,
				90
			],
			[
				17,
				37
			],
			[
				33,
				70
			],
			[
				-9,
				74
			],
			[
				6,
				88
			],
			[
				8,
				129
			],
			[
				31,
				81
			],
			[
				30,
				-22
			],
			[
				6,
				-37
			],
			[
				56,
				-38
			],
			[
				82,
				41
			],
			[
				5,
				2
			],
			[
				18,
				74
			],
			[
				-17,
				20
			],
			[
				-3,
				42
			],
			[
				19,
				34
			],
			[
				29,
				43
			],
			[
				31,
				25
			],
			[
				62,
				12
			],
			[
				15,
				-53
			],
			[
				103,
				-84
			],
			[
				5,
				47
			],
			[
				58,
				-33
			],
			[
				77,
				-92
			],
			[
				14,
				-54
			],
			[
				-15,
				-31
			],
			[
				-22,
				7
			],
			[
				-18,
				-47
			],
			[
				2,
				-83
			],
			[
				0,
				-13
			],
			[
				77,
				-43
			],
			[
				10,
				-6
			],
			[
				5,
				-3
			],
			[
				38,
				44
			],
			[
				67,
				-49
			],
			[
				31,
				-23
			],
			[
				33,
				25
			],
			[
				7,
				-10
			],
			[
				133,
				-190
			]
		],
		[
			[
				4388,
				6079
			],
			[
				0,
				0
			],
			[
				65,
				-93
			],
			[
				39,
				19
			],
			[
				53,
				-88
			],
			[
				69,
				-52
			],
			[
				18,
				10
			],
			[
				16,
				40
			],
			[
				169,
				2
			],
			[
				112,
				-23
			],
			[
				2,
				26
			],
			[
				1,
				28
			],
			[
				-103,
				24
			],
			[
				-112,
				-7
			],
			[
				0,
				0
			]
		],
		[
			[
				3256,
				7230
			],
			[
				-29,
				-11
			],
			[
				-32,
				-18
			],
			[
				-39,
				29
			],
			[
				-24,
				55
			],
			[
				16,
				29
			],
			[
				38,
				-16
			],
			[
				4,
				-30
			],
			[
				55,
				3
			]
		],
		[
			[
				3245,
				7271
			],
			[
				0,
				0
			],
			[
				5,
				1
			],
			[
				20,
				51
			],
			[
				140,
				5
			],
			[
				1,
				-55
			],
			[
				-80,
				-37
			],
			[
				-44,
				7
			],
			[
				-31,
				-13
			],
			[
				0,
				0
			]
		],
		[
			[
				3124,
				7520
			],
			[
				17,
				-10
			],
			[
				41,
				-24
			],
			[
				22,
				-53
			],
			[
				-39,
				-48
			],
			[
				-63,
				29
			],
			[
				-25,
				12
			],
			[
				32,
				42
			],
			[
				-25,
				39
			],
			[
				-58,
				-53
			],
			[
				-20,
				34
			],
			[
				-65,
				17
			],
			[
				-36,
				60
			],
			[
				8,
				96
			],
			[
				60,
				12
			],
			[
				46,
				-30
			],
			[
				6,
				-34
			],
			[
				84,
				-34
			],
			[
				15,
				-55
			]
		],
		[
			[
				2901,
				7705
			],
			[
				-23,
				-103
			],
			[
				-34,
				-45
			],
			[
				-27,
				-4
			],
			[
				-30,
				43
			],
			[
				-5,
				69
			],
			[
				27,
				-18
			],
			[
				24,
				4
			],
			[
				-35,
				45
			],
			[
				-3,
				6
			],
			[
				52,
				24
			],
			[
				33,
				-1
			],
			[
				21,
				-20
			]
		],
		[
			[
				2947,
				7872
			],
			[
				21,
				-16
			],
			[
				4,
				1
			],
			[
				45,
				11
			],
			[
				124,
				-45
			],
			[
				41,
				-46
			],
			[
				51,
				72
			],
			[
				97,
				-13
			],
			[
				63,
				-47
			],
			[
				11,
				-9
			],
			[
				0,
				-1
			],
			[
				27,
				-69
			],
			[
				-5,
				-23
			],
			[
				-7,
				-121
			],
			[
				14,
				-55
			],
			[
				-78,
				-58
			],
			[
				-76,
				33
			],
			[
				-24,
				47
			],
			[
				-70,
				59
			],
			[
				-5,
				4
			],
			[
				11,
				56
			],
			[
				-82,
				-5
			],
			[
				-102,
				73
			],
			[
				-61,
				47
			],
			[
				-49,
				35
			],
			[
				-79,
				-26
			],
			[
				-37,
				55
			],
			[
				43,
				36
			],
			[
				42,
				-22
			],
			[
				-30,
				74
			],
			[
				22,
				13
			],
			[
				38,
				24
			],
			[
				20,
				-61
			],
			[
				31,
				-23
			]
		],
		[
			[
				3084,
				7260
			],
			[
				-39,
				-48
			],
			[
				-20,
				12
			],
			[
				-25,
				-20
			],
			[
				-21,
				40
			],
			[
				-10,
				19
			],
			[
				-10,
				40
			],
			[
				9,
				34
			],
			[
				52,
				-20
			],
			[
				52,
				-20
			],
			[
				19,
				-10
			],
			[
				-7,
				-27
			]
		],
		[
			[
				2620,
				6370
			],
			[
				-24,
				-4
			],
			[
				-18,
				10
			],
			[
				-19,
				53
			],
			[
				36,
				46
			],
			[
				23,
				2
			],
			[
				29,
				-6
			],
			[
				11,
				-30
			],
			[
				-6,
				-26
			],
			[
				-15,
				-21
			],
			[
				-17,
				-24
			]
		],
		[
			[
				3323,
				7010
			],
			[
				19,
				-84
			],
			[
				-52,
				4
			],
			[
				14,
				-37
			],
			[
				-5,
				-18
			],
			[
				-1,
				-5
			],
			[
				-25,
				-2
			],
			[
				-25,
				22
			],
			[
				-30,
				46
			],
			[
				-9,
				47
			],
			[
				36,
				65
			],
			[
				45,
				9
			],
			[
				57,
				12
			],
			[
				-24,
				-59
			]
		],
		[
			[
				2272,
				7464
			],
			[
				34,
				-5
			],
			[
				41,
				18
			],
			[
				-11,
				-94
			],
			[
				-42,
				18
			],
			[
				-42,
				-18
			],
			[
				7,
				89
			],
			[
				13,
				-8
			]
		],
		[
			[
				3580,
				6568
			],
			[
				-3,
				-3
			],
			[
				-20,
				-1
			],
			[
				-21,
				20
			],
			[
				-9,
				15
			],
			[
				-13,
				21
			],
			[
				2,
				68
			],
			[
				15,
				31
			],
			[
				21,
				12
			],
			[
				12,
				-1
			],
			[
				16,
				-11
			],
			[
				21,
				-52
			],
			[
				4,
				-48
			],
			[
				-11,
				-35
			],
			[
				-14,
				-16
			]
		],
		[
			[
				4167,
				6343
			],
			[
				0,
				-3
			],
			[
				-22,
				6
			],
			[
				-69,
				33
			],
			[
				-29,
				72
			],
			[
				13,
				26
			],
			[
				39,
				-6
			],
			[
				19,
				-10
			],
			[
				19,
				-10
			],
			[
				18,
				-18
			],
			[
				8,
				-22
			],
			[
				5,
				-28
			],
			[
				-1,
				-40
			]
		],
		[
			[
				2289,
				21087
			],
			[
				-33,
				-5
			],
			[
				-1,
				46
			],
			[
				-45,
				96
			],
			[
				-90,
				66
			],
			[
				-3,
				108
			],
			[
				13,
				74
			],
			[
				-20,
				79
			],
			[
				-33,
				-56
			],
			[
				-11,
				-58
			],
			[
				-92,
				-57
			],
			[
				-35,
				-22
			],
			[
				-3,
				6
			],
			[
				-9,
				17
			],
			[
				-28,
				58
			],
			[
				-11,
				-62
			],
			[
				-54,
				-57
			],
			[
				-6,
				-7
			],
			[
				-39,
				8
			],
			[
				-33,
				7
			],
			[
				-14,
				67
			],
			[
				18,
				25
			],
			[
				-2,
				38
			],
			[
				0,
				6
			],
			[
				-84,
				56
			],
			[
				-8,
				81
			],
			[
				57,
				1
			],
			[
				81,
				-18
			],
			[
				20,
				-42
			],
			[
				27,
				-29
			],
			[
				19,
				-21
			],
			[
				79,
				42
			],
			[
				-193,
				155
			],
			[
				-35,
				28
			],
			[
				-43,
				-2
			],
			[
				-44,
				-35
			],
			[
				-17,
				-69
			],
			[
				-38,
				-4
			],
			[
				-69,
				44
			],
			[
				-100,
				84
			],
			[
				-81,
				2
			],
			[
				-25,
				18
			],
			[
				0,
				19
			],
			[
				-1,
				39
			],
			[
				32,
				99
			],
			[
				33,
				65
			],
			[
				118,
				18
			],
			[
				33,
				5
			],
			[
				117,
				-61
			],
			[
				105,
				-66
			],
			[
				61,
				-65
			],
			[
				49,
				-53
			],
			[
				117,
				19
			],
			[
				4,
				0
			],
			[
				-1,
				17
			],
			[
				0,
				17
			],
			[
				-109,
				34
			],
			[
				-26,
				78
			],
			[
				88,
				-24
			],
			[
				55,
				-53
			],
			[
				41,
				38
			],
			[
				-116,
				95
			],
			[
				-42,
				25
			],
			[
				-237,
				142
			],
			[
				-257,
				-32
			],
			[
				-107,
				-13
			],
			[
				-146,
				4
			],
			[
				-20,
				32
			],
			[
				58,
				37
			],
			[
				18,
				36
			],
			[
				159,
				11
			],
			[
				10,
				1
			],
			[
				9,
				-38
			],
			[
				30,
				7
			],
			[
				26,
				89
			],
			[
				-8,
				43
			],
			[
				-25,
				49
			],
			[
				-18,
				-32
			],
			[
				-6,
				-81
			],
			[
				-31,
				-2
			],
			[
				-119,
				-10
			],
			[
				-98,
				17
			],
			[
				-2,
				28
			],
			[
				0,
				0
			]
		],
		[
			[
				1098,
				22289
			],
			[
				-1,
				7
			],
			[
				25,
				15
			],
			[
				1,
				1
			],
			[
				41,
				42
			],
			[
				-2,
				67
			],
			[
				-10,
				43
			],
			[
				-49,
				-37
			],
			[
				-16,
				-77
			],
			[
				-26,
				-29
			],
			[
				-47,
				59
			],
			[
				-6,
				86
			],
			[
				6,
				77
			],
			[
				150,
				9
			],
			[
				70,
				-6
			],
			[
				2,
				43
			],
			[
				-64,
				0
			],
			[
				-8,
				30
			],
			[
				95,
				25
			],
			[
				-6,
				39
			],
			[
				65,
				-51
			],
			[
				18,
				0
			],
			[
				34,
				2
			],
			[
				46,
				1
			],
			[
				19,
				0
			],
			[
				29,
				-57
			],
			[
				29,
				14
			],
			[
				32,
				32
			],
			[
				0,
				26
			],
			[
				-56,
				4
			],
			[
				-5,
				58
			],
			[
				20,
				52
			],
			[
				43,
				5
			],
			[
				26,
				-61
			],
			[
				18,
				-5
			],
			[
				32,
				-11
			],
			[
				36,
				-11
			],
			[
				55,
				-16
			],
			[
				60,
				21
			],
			[
				-12,
				45
			],
			[
				-14,
				3
			],
			[
				-33,
				7
			],
			[
				-16,
				17
			],
			[
				0,
				1
			],
			[
				54,
				79
			],
			[
				-6,
				26
			],
			[
				-29,
				1
			],
			[
				-27,
				1
			],
			[
				5,
				94
			],
			[
				80,
				-11
			],
			[
				26,
				35
			],
			[
				21,
				-1
			],
			[
				108,
				-5
			],
			[
				74,
				-85
			],
			[
				87,
				-100
			],
			[
				6,
				-6
			],
			[
				66,
				-19
			],
			[
				-62,
				119
			],
			[
				-122,
				114
			],
			[
				-10,
				32
			],
			[
				45,
				8
			],
			[
				31,
				-47
			],
			[
				63,
				10
			],
			[
				57,
				-8
			],
			[
				52,
				40
			],
			[
				-12,
				31
			],
			[
				84,
				23
			],
			[
				25,
				7
			],
			[
				6,
				2
			],
			[
				-1,
				5
			],
			[
				-12,
				35
			],
			[
				68,
				24
			],
			[
				38,
				-9
			],
			[
				10,
				-21
			],
			[
				93,
				-3
			],
			[
				21,
				17
			],
			[
				162,
				-19
			],
			[
				80,
				-29
			],
			[
				8,
				-32
			]
		],
		[
			[
				1022,
				22280
			],
			[
				-31,
				-6
			],
			[
				-17,
				0
			],
			[
				-59,
				5
			],
			[
				22,
				35
			],
			[
				-5,
				48
			],
			[
				-17,
				13
			],
			[
				42,
				16
			],
			[
				24,
				-9
			],
			[
				11,
				-12
			],
			[
				26,
				-56
			],
			[
				7,
				-19
			],
			[
				-3,
				-15
			]
		],
		[
			[
				1258,
				21859
			],
			[
				13,
				-86
			],
			[
				-59,
				15
			],
			[
				-39,
				36
			],
			[
				-33,
				73
			],
			[
				-2,
				66
			],
			[
				77,
				-2
			],
			[
				66,
				-30
			],
			[
				-23,
				-72
			]
		],
		[
			[
				2451,
				23718
			],
			[
				31,
				-24
			],
			[
				-9,
				-30
			],
			[
				-42,
				-7
			],
			[
				54,
				-12
			],
			[
				186,
				-43
			],
			[
				7,
				-2
			],
			[
				11,
				-2
			],
			[
				7,
				0
			]
		],
		[
			[
				2328,
				23219
			],
			[
				-48,
				-5
			],
			[
				-32,
				-63
			],
			[
				-232,
				-11
			],
			[
				-76,
				-22
			],
			[
				1,
				-20
			],
			[
				0,
				-15
			],
			[
				-95,
				-11
			],
			[
				-206,
				-22
			],
			[
				-5,
				-6
			],
			[
				-34,
				-47
			],
			[
				0,
				0
			],
			[
				-17,
				-128
			],
			[
				-28,
				9
			],
			[
				-54,
				-22
			],
			[
				-101,
				-22
			],
			[
				-50,
				-43
			],
			[
				-47,
				5
			],
			[
				-14,
				116
			],
			[
				119,
				0
			],
			[
				2,
				103
			],
			[
				0,
				8
			],
			[
				-1,
				79
			],
			[
				0,
				12
			],
			[
				-3,
				0
			],
			[
				-35,
				-6
			],
			[
				-2,
				-135
			],
			[
				0,
				-28
			],
			[
				-44,
				-4
			],
			[
				-34,
				13
			],
			[
				-14,
				20
			],
			[
				0,
				0
			],
			[
				-16,
				-16
			],
			[
				-39,
				7
			],
			[
				-44,
				104
			],
			[
				-24,
				116
			],
			[
				26,
				45
			],
			[
				-4,
				55
			],
			[
				52,
				13
			],
			[
				9,
				46
			],
			[
				112,
				-15
			],
			[
				25,
				-163
			],
			[
				21,
				25
			],
			[
				1,
				1
			],
			[
				-1,
				13
			],
			[
				-4,
				200
			],
			[
				186,
				113
			],
			[
				-13,
				24
			],
			[
				-114,
				-43
			],
			[
				-106,
				3
			],
			[
				-119,
				-87
			],
			[
				-125,
				-56
			],
			[
				-39,
				6
			],
			[
				-63,
				77
			],
			[
				85,
				94
			],
			[
				141,
				61
			],
			[
				70,
				68
			],
			[
				151,
				34
			],
			[
				336,
				3
			],
			[
				5,
				0
			],
			[
				-1,
				6
			],
			[
				-7,
				40
			],
			[
				29,
				45
			],
			[
				4,
				7
			],
			[
				-33,
				47
			],
			[
				-3,
				5
			],
			[
				3,
				12
			],
			[
				7,
				23
			],
			[
				77,
				-7
			],
			[
				19,
				-2
			],
			[
				7,
				-16
			],
			[
				5,
				-13
			],
			[
				15,
				-24
			],
			[
				30,
				-16
			],
			[
				27,
				-15
			],
			[
				48,
				-26
			],
			[
				75,
				-24
			],
			[
				40,
				-13
			],
			[
				9,
				9
			],
			[
				11,
				12
			],
			[
				2,
				3
			],
			[
				9,
				-2
			],
			[
				57,
				-12
			],
			[
				9,
				19
			],
			[
				-152,
				85
			],
			[
				-18,
				10
			],
			[
				53,
				4
			],
			[
				14,
				1
			],
			[
				22,
				2
			],
			[
				35,
				2
			],
			[
				12,
				-5
			],
			[
				16,
				-8
			],
			[
				107,
				-8
			],
			[
				27,
				-2
			],
			[
				11,
				-76
			],
			[
				14,
				-23
			],
			[
				11,
				-18
			],
			[
				56,
				3
			]
		],
		[
			[
				962,
				23108
			],
			[
				76,
				10
			],
			[
				17,
				91
			],
			[
				60,
				-37
			],
			[
				24,
				-74
			],
			[
				17,
				-93
			],
			[
				-26,
				-24
			],
			[
				12,
				-94
			],
			[
				33,
				-48
			],
			[
				-30,
				-32
			],
			[
				-37,
				-19
			],
			[
				-50,
				-15
			],
			[
				-49,
				20
			],
			[
				-34,
				-16
			],
			[
				-30,
				-50
			],
			[
				-9,
				-1
			],
			[
				-14,
				-1
			],
			[
				-1,
				2
			],
			[
				-35,
				50
			],
			[
				47,
				3
			],
			[
				-62,
				88
			],
			[
				-56,
				29
			],
			[
				-55,
				-3
			],
			[
				-33,
				16
			],
			[
				-20,
				57
			],
			[
				8,
				62
			],
			[
				46,
				-10
			],
			[
				71,
				112
			],
			[
				-45,
				15
			],
			[
				2,
				38
			],
			[
				83,
				24
			],
			[
				40,
				-64
			],
			[
				50,
				-36
			]
		],
		[
			[
				292,
				22689
			],
			[
				4,
				-17
			],
			[
				4,
				-17
			],
			[
				21,
				-23
			],
			[
				53,
				-9
			],
			[
				35,
				-16
			],
			[
				-6,
				-61
			],
			[
				-23,
				-15
			],
			[
				-21,
				27
			],
			[
				-29,
				13
			],
			[
				-26,
				9
			],
			[
				-13,
				-18
			],
			[
				-72,
				-8
			],
			[
				-54,
				2
			],
			[
				-36,
				114
			],
			[
				69,
				3
			],
			[
				10,
				111
			],
			[
				65,
				-36
			],
			[
				19,
				-59
			]
		],
		[
			[
				456,
				22789
			],
			[
				-9,
				-22
			],
			[
				-52,
				-7
			],
			[
				-18,
				-23
			],
			[
				-30,
				-3
			],
			[
				-29,
				53
			],
			[
				-2,
				64
			],
			[
				30,
				19
			],
			[
				75,
				-24
			],
			[
				18,
				-22
			],
			[
				17,
				-35
			]
		],
		[
			[
				602,
				22898
			],
			[
				-32,
				-11
			],
			[
				-22,
				31
			],
			[
				-6,
				36
			],
			[
				6,
				62
			],
			[
				28,
				23
			],
			[
				39,
				15
			],
			[
				40,
				-9
			],
			[
				4,
				-77
			],
			[
				-16,
				-20
			],
			[
				-41,
				-50
			]
		],
		[
			[
				1496,
				19503
			],
			[
				-1,
				0
			],
			[
				-55,
				-54
			],
			[
				-5,
				-5
			],
			[
				-29,
				48
			],
			[
				-23,
				-43
			],
			[
				-108,
				84
			],
			[
				7,
				26
			],
			[
				7,
				23
			],
			[
				-21,
				35
			],
			[
				-6,
				10
			],
			[
				0,
				0
			],
			[
				-16,
				117
			],
			[
				-3,
				7
			],
			[
				-30,
				92
			],
			[
				-36,
				52
			],
			[
				0,
				107
			],
			[
				6,
				68
			],
			[
				-2,
				55
			],
			[
				-44,
				2
			],
			[
				-49,
				158
			],
			[
				6,
				70
			],
			[
				2,
				20
			],
			[
				60,
				-10
			],
			[
				32,
				-5
			],
			[
				30,
				-40
			],
			[
				79,
				-9
			],
			[
				26,
				20
			],
			[
				114,
				-11
			],
			[
				-6,
				-284
			],
			[
				-18,
				-117
			],
			[
				8,
				-30
			],
			[
				5,
				-21
			],
			[
				1,
				-107
			],
			[
				52,
				22
			],
			[
				-20,
				98
			],
			[
				3,
				35
			],
			[
				2,
				197
			],
			[
				17,
				88
			],
			[
				-11,
				87
			],
			[
				3,
				64
			],
			[
				72,
				30
			],
			[
				89,
				-18
			],
			[
				81,
				-17
			],
			[
				77,
				7
			],
			[
				95,
				47
			],
			[
				105,
				91
			],
			[
				47,
				-11
			],
			[
				2,
				29
			],
			[
				0,
				2
			],
			[
				1,
				25
			],
			[
				-34,
				5
			],
			[
				-23,
				4
			],
			[
				-7,
				-5
			],
			[
				-58,
				-49
			],
			[
				-103,
				-85
			],
			[
				-90,
				-24
			],
			[
				-55,
				1
			],
			[
				-15,
				1
			],
			[
				-4,
				3
			],
			[
				-2,
				3
			],
			[
				-19,
				23
			],
			[
				0,
				31
			],
			[
				0,
				20
			],
			[
				-29,
				60
			],
			[
				29,
				30
			],
			[
				3,
				2
			],
			[
				0,
				9
			],
			[
				-2,
				89
			],
			[
				-34,
				-17
			],
			[
				-30,
				-87
			],
			[
				-3,
				-115
			],
			[
				-9,
				-4
			],
			[
				-78,
				-37
			],
			[
				-56,
				-27
			],
			[
				-25,
				17
			],
			[
				-25,
				17
			],
			[
				-3,
				2
			],
			[
				-29,
				21
			],
			[
				12,
				45
			],
			[
				-12,
				18
			],
			[
				-9,
				-3
			],
			[
				-38,
				-9
			],
			[
				-82,
				-8
			],
			[
				-14,
				-2
			],
			[
				-17,
				55
			],
			[
				3,
				70
			],
			[
				-29,
				86
			],
			[
				43,
				46
			],
			[
				-7,
				25
			],
			[
				-30,
				11
			],
			[
				2,
				22
			],
			[
				63,
				-11
			],
			[
				-4,
				39
			],
			[
				-75,
				21
			],
			[
				65,
				118
			],
			[
				-21,
				28
			],
			[
				10,
				37
			],
			[
				88,
				28
			],
			[
				28,
				43
			],
			[
				74,
				17
			],
			[
				109,
				-9
			],
			[
				50,
				77
			],
			[
				22,
				-78
			],
			[
				59,
				-13
			],
			[
				4,
				12
			],
			[
				4,
				10
			],
			[
				10,
				30
			],
			[
				41,
				11
			],
			[
				88,
				-88
			],
			[
				57,
				1
			],
			[
				33,
				1
			],
			[
				91,
				-2
			],
			[
				25,
				-43
			],
			[
				-11,
				-57
			],
			[
				-6,
				-30
			],
			[
				48,
				3
			],
			[
				47,
				-48
			],
			[
				-33,
				-39
			],
			[
				12,
				-22
			],
			[
				76,
				8
			],
			[
				54,
				6
			],
			[
				30,
				-16
			],
			[
				102,
				-54
			],
			[
				39,
				35
			],
			[
				51,
				-21
			],
			[
				81,
				47
			],
			[
				-17,
				-110
			],
			[
				29,
				-35
			],
			[
				7,
				-53
			],
			[
				5,
				-38
			],
			[
				8,
				-56
			],
			[
				26,
				-14
			],
			[
				6,
				57
			],
			[
				2,
				18
			],
			[
				-1,
				2
			],
			[
				0,
				8
			],
			[
				-7,
				74
			],
			[
				10,
				24
			],
			[
				4,
				9
			],
			[
				15,
				36
			],
			[
				0,
				0
			],
			[
				0,
				2
			],
			[
				-38,
				182
			],
			[
				39,
				53
			],
			[
				38,
				-6
			],
			[
				3,
				-1
			],
			[
				16,
				52
			],
			[
				20,
				21
			],
			[
				131,
				-8
			],
			[
				91,
				77
			],
			[
				28,
				48
			]
		],
		[
			[
				530,
				20048
			],
			[
				-9,
				-8
			],
			[
				-69,
				-6
			],
			[
				-7,
				26
			],
			[
				-14,
				35
			],
			[
				-17,
				9
			],
			[
				2,
				9
			],
			[
				5,
				10
			],
			[
				20,
				17
			],
			[
				82,
				-11
			],
			[
				9,
				-52
			],
			[
				1,
				-18
			],
			[
				-3,
				-11
			]
		],
		[
			[
				1058,
				20243
			],
			[
				83,
				-249
			],
			[
				-2,
				-217
			],
			[
				34,
				-162
			],
			[
				10,
				-46
			],
			[
				-63,
				-11
			],
			[
				-45,
				-1
			],
			[
				-58,
				15
			],
			[
				-41,
				91
			],
			[
				1,
				118
			],
			[
				24,
				33
			],
			[
				-5,
				33
			],
			[
				-35,
				70
			],
			[
				-1,
				64
			],
			[
				-1,
				47
			],
			[
				-16,
				102
			],
			[
				-12,
				67
			],
			[
				29,
				27
			],
			[
				56,
				-48
			],
			[
				20,
				19
			],
			[
				6,
				43
			],
			[
				16,
				5
			]
		],
		[
			[
				641,
				20006
			],
			[
				44,
				-3
			],
			[
				32,
				28
			],
			[
				67,
				-80
			],
			[
				5,
				-16
			],
			[
				61,
				-200
			],
			[
				-51,
				-38
			],
			[
				70,
				1
			],
			[
				-9,
				-84
			],
			[
				-152,
				56
			],
			[
				-24,
				84
			],
			[
				28,
				49
			],
			[
				-19,
				90
			],
			[
				-34,
				-1
			],
			[
				0,
				-69
			],
			[
				-49,
				65
			],
			[
				-9,
				-26
			],
			[
				-42,
				28
			],
			[
				2,
				76
			],
			[
				6,
				41
			],
			[
				26,
				0
			],
			[
				48,
				-1
			]
		],
		[
			[
				925,
				19992
			],
			[
				9,
				-67
			],
			[
				-31,
				-3
			],
			[
				6,
				-42
			],
			[
				34,
				0
			],
			[
				9,
				-45
			],
			[
				-69,
				1
			],
			[
				-35,
				130
			],
			[
				-14,
				49
			],
			[
				-49,
				29
			],
			[
				-1,
				129
			],
			[
				66,
				5
			],
			[
				6,
				-42
			],
			[
				57,
				-46
			],
			[
				12,
				-98
			]
		],
		[
			[
				685,
				20083
			],
			[
				2,
				-39
			],
			[
				-60,
				9
			],
			[
				-34,
				6
			],
			[
				-17,
				3
			],
			[
				-20,
				4
			],
			[
				-6,
				70
			],
			[
				9,
				3
			],
			[
				9,
				2
			],
			[
				40,
				11
			],
			[
				19,
				2
			],
			[
				13,
				-7
			],
			[
				15,
				-15
			],
			[
				30,
				-49
			]
		],
		[
			[
				616,
				19684
			],
			[
				-15,
				-3
			],
			[
				-10,
				9
			],
			[
				-9,
				14
			],
			[
				-9,
				22
			],
			[
				-7,
				25
			],
			[
				0,
				6
			],
			[
				8,
				5
			],
			[
				17,
				3
			],
			[
				18,
				-4
			],
			[
				42,
				-33
			],
			[
				13,
				-13
			],
			[
				-20,
				-24
			],
			[
				-28,
				-7
			]
		],
		[
			[
				509,
				19708
			],
			[
				8,
				-14
			],
			[
				-2,
				-25
			],
			[
				-38,
				11
			],
			[
				-14,
				4
			],
			[
				-22,
				4
			],
			[
				-11,
				-4
			],
			[
				-15,
				5
			],
			[
				-6,
				27
			],
			[
				4,
				13
			],
			[
				26,
				32
			],
			[
				36,
				-21
			],
			[
				16,
				-13
			],
			[
				18,
				-19
			]
		],
		[
			[
				943,
				20568
			],
			[
				39,
				-29
			],
			[
				17,
				10
			],
			[
				-3,
				24
			],
			[
				3,
				74
			],
			[
				3,
				22
			],
			[
				28,
				30
			],
			[
				28,
				4
			],
			[
				49,
				-30
			],
			[
				20,
				-96
			],
			[
				1,
				-36
			],
			[
				14,
				-17
			],
			[
				24,
				-52
			],
			[
				12,
				-52
			],
			[
				-37,
				1
			],
			[
				-4,
				17
			],
			[
				-68,
				6
			],
			[
				-37,
				-15
			],
			[
				-79,
				-13
			],
			[
				-33,
				-4
			],
			[
				-60,
				19
			],
			[
				5,
				86
			],
			[
				-26,
				38
			],
			[
				18,
				123
			],
			[
				87,
				24
			],
			[
				15,
				-44
			],
			[
				9,
				-37
			],
			[
				-25,
				-53
			]
		],
		[
			[
				669,
				20512
			],
			[
				-9,
				-57
			],
			[
				-30,
				8
			],
			[
				-59,
				-35
			],
			[
				-55,
				20
			],
			[
				-11,
				38
			],
			[
				55,
				5
			],
			[
				12,
				25
			],
			[
				-18,
				28
			],
			[
				95,
				3
			],
			[
				20,
				-35
			]
		],
		[
			[
				455,
				21932
			],
			[
				-11,
				-27
			],
			[
				-56,
				31
			],
			[
				-97,
				70
			],
			[
				6,
				39
			],
			[
				-19,
				30
			],
			[
				-24,
				45
			],
			[
				32,
				28
			],
			[
				66,
				-53
			],
			[
				30,
				-35
			],
			[
				28,
				-35
			],
			[
				30,
				-49
			],
			[
				15,
				-44
			]
		],
		[
			[
				874,
				21814
			],
			[
				36,
				-324
			],
			[
				20,
				48
			],
			[
				-20,
				358
			],
			[
				34,
				-41
			],
			[
				17,
				-46
			],
			[
				42,
				-18
			],
			[
				-17,
				66
			],
			[
				-37,
				46
			],
			[
				-26,
				73
			],
			[
				15,
				29
			],
			[
				135,
				-32
			],
			[
				16,
				-69
			],
			[
				-23,
				-58
			],
			[
				-3,
				-54
			],
			[
				43,
				-21
			],
			[
				13,
				-110
			],
			[
				20,
				-187
			],
			[
				6,
				-60
			],
			[
				-31,
				-137
			],
			[
				-144,
				-100
			],
			[
				-30,
				-21
			],
			[
				-48,
				-66
			],
			[
				-11,
				-107
			],
			[
				-42,
				-16
			],
			[
				17,
				57
			],
			[
				-30,
				75
			],
			[
				6,
				66
			],
			[
				-16,
				113
			],
			[
				-51,
				36
			],
			[
				0,
				-67
			],
			[
				-108,
				-126
			],
			[
				-13,
				-149
			],
			[
				-26,
				-63
			],
			[
				-60,
				48
			],
			[
				-16,
				42
			],
			[
				19,
				54
			],
			[
				4,
				12
			],
			[
				30,
				10
			],
			[
				-39,
				107
			],
			[
				13,
				161
			],
			[
				-15,
				44
			],
			[
				2,
				87
			],
			[
				-19,
				151
			],
			[
				-44,
				33
			],
			[
				101,
				73
			],
			[
				42,
				-89
			],
			[
				9,
				84
			],
			[
				8,
				73
			],
			[
				70,
				-60
			],
			[
				7,
				-86
			],
			[
				18,
				-77
			],
			[
				57,
				-184
			],
			[
				4,
				152
			],
			[
				-25,
				65
			],
			[
				-33,
				148
			],
			[
				34,
				58
			],
			[
				-10,
				42
			],
			[
				-21,
				17
			],
			[
				-29,
				78
			],
			[
				1,
				91
			],
			[
				75,
				13
			],
			[
				84,
				-106
			],
			[
				-22,
				-64
			],
			[
				-23,
				-9
			],
			[
				5,
				-48
			],
			[
				29,
				-15
			]
		],
		[
			[
				1363,
				21470
			],
			[
				-16,
				-78
			],
			[
				-76,
				2
			],
			[
				-96,
				34
			],
			[
				-4,
				116
			],
			[
				-26,
				106
			],
			[
				16,
				18
			],
			[
				-19,
				104
			],
			[
				110,
				-62
			],
			[
				18,
				-69
			],
			[
				68,
				-101
			],
			[
				25,
				-70
			]
		],
		[
			[
				790,
				20923
			],
			[
				-88,
				-57
			],
			[
				-22,
				38
			],
			[
				16,
				199
			],
			[
				25,
				38
			],
			[
				36,
				-32
			],
			[
				33,
				-186
			]
		],
		[
			[
				447,
				21266
			],
			[
				6,
				-95
			],
			[
				35,
				17
			],
			[
				13,
				114
			],
			[
				19,
				-93
			],
			[
				11,
				-67
			],
			[
				9,
				-63
			],
			[
				-13,
				-11
			],
			[
				-14,
				-12
			],
			[
				-10,
				-140
			],
			[
				-39,
				67
			],
			[
				-58,
				10
			],
			[
				29,
				-84
			],
			[
				-9,
				-70
			],
			[
				-20,
				3
			],
			[
				13,
				-89
			],
			[
				-31,
				5
			],
			[
				-41,
				123
			],
			[
				16,
				78
			],
			[
				-9,
				87
			],
			[
				-14,
				137
			],
			[
				3,
				110
			],
			[
				91,
				6
			],
			[
				13,
				-33
			]
		],
		[
			[
				180,
				21072
			],
			[
				2,
				-39
			],
			[
				36,
				6
			],
			[
				8,
				-48
			],
			[
				-9,
				-30
			],
			[
				-30,
				23
			],
			[
				6,
				-63
			],
			[
				40,
				-56
			],
			[
				62,
				-47
			],
			[
				-26,
				-243
			],
			[
				-30,
				-16
			],
			[
				-49,
				-54
			],
			[
				-1,
				60
			],
			[
				-20,
				4
			],
			[
				44,
				130
			],
			[
				-2,
				71
			],
			[
				-35,
				43
			],
			[
				13,
				-94
			],
			[
				-32,
				-37
			],
			[
				-18,
				-114
			],
			[
				-33,
				3
			],
			[
				-33,
				43
			],
			[
				-2,
				67
			],
			[
				-44,
				64
			],
			[
				-27,
				95
			],
			[
				16,
				32
			],
			[
				-4,
				46
			],
			[
				-11,
				59
			],
			[
				51,
				-21
			],
			[
				-31,
				69
			],
			[
				96,
				128
			],
			[
				53,
				56
			],
			[
				29,
				-95
			],
			[
				-19,
				-42
			]
		],
		[
			[
				314,
				20890
			],
			[
				-21,
				-19
			],
			[
				-23,
				172
			],
			[
				-18,
				113
			],
			[
				28,
				61
			],
			[
				18,
				16
			],
			[
				15,
				-59
			],
			[
				18,
				-129
			],
			[
				0,
				-4
			],
			[
				-6,
				-97
			],
			[
				-3,
				-32
			],
			[
				-8,
				-22
			]
		],
		[
			[
				176,
				21257
			],
			[
				-44,
				-35
			],
			[
				-6,
				15
			],
			[
				-6,
				55
			],
			[
				8,
				35
			],
			[
				13,
				15
			],
			[
				15,
				3
			],
			[
				31,
				-42
			],
			[
				6,
				-19
			],
			[
				-17,
				-27
			]
		],
		[
			[
				264,
				21341
			],
			[
				-59,
				-17
			],
			[
				-30,
				44
			],
			[
				26,
				49
			],
			[
				26,
				45
			],
			[
				28,
				16
			],
			[
				17,
				-13
			],
			[
				5,
				-32
			],
			[
				0,
				-54
			],
			[
				-13,
				-38
			]
		],
		[
			[
				519,
				21546
			],
			[
				0,
				-120
			],
			[
				-117,
				31
			],
			[
				-49,
				45
			],
			[
				64,
				25
			],
			[
				-28,
				84
			],
			[
				64,
				-18
			],
			[
				66,
				-47
			]
		],
		[
			[
				722,
				21839
			],
			[
				-3,
				-58
			],
			[
				-79,
				69
			],
			[
				5,
				59
			],
			[
				47,
				-32
			],
			[
				18,
				-17
			],
			[
				12,
				-21
			]
		],
		[
			[
				617,
				22016
			],
			[
				-28,
				-65
			],
			[
				-43,
				59
			],
			[
				-7,
				29
			],
			[
				-5,
				46
			],
			[
				-1,
				9
			],
			[
				33,
				31
			],
			[
				30,
				-22
			],
			[
				16,
				-47
			],
			[
				5,
				-40
			]
		],
		[
			[
				9127,
				397
			],
			[
				21,
				-57
			],
			[
				-22,
				-25
			],
			[
				-11,
				21
			],
			[
				-41,
				14
			],
			[
				40,
				-79
			],
			[
				-110,
				39
			],
			[
				-21,
				62
			],
			[
				9,
				86
			],
			[
				33,
				26
			],
			[
				-82,
				-5
			],
			[
				23,
				-193
			],
			[
				34,
				-26
			],
			[
				-20,
				-23
			],
			[
				-69,
				19
			],
			[
				-20,
				-16
			],
			[
				11,
				-52
			],
			[
				-36,
				-4
			],
			[
				-28,
				54
			],
			[
				-71,
				7
			],
			[
				-99,
				-26
			],
			[
				-43,
				3
			],
			[
				-19,
				2
			],
			[
				2,
				8
			],
			[
				11,
				81
			],
			[
				-73,
				4
			],
			[
				-69,
				3
			],
			[
				-35,
				-16
			],
			[
				-5,
				-29
			],
			[
				-24,
				1
			],
			[
				-14,
				21
			],
			[
				-1,
				2
			],
			[
				0,
				14
			],
			[
				-2,
				42
			],
			[
				-1,
				13
			],
			[
				12,
				23
			],
			[
				8,
				15
			],
			[
				30,
				15
			],
			[
				-31,
				23
			],
			[
				0,
				0
			],
			[
				-44,
				45
			],
			[
				-29,
				-6
			],
			[
				0,
				0
			],
			[
				44,
				-61
			],
			[
				-10,
				-30
			],
			[
				-28,
				-7
			],
			[
				-19,
				-27
			],
			[
				37,
				-17
			],
			[
				4,
				-31
			],
			[
				-19,
				-57
			],
			[
				-22,
				-24
			],
			[
				-75,
				78
			],
			[
				-30,
				-3
			],
			[
				-65,
				62
			],
			[
				-41,
				2
			],
			[
				-10,
				67
			],
			[
				-37,
				43
			],
			[
				0,
				0
			]
		],
		[
			[
				8070,
				478
			],
			[
				-8,
				10
			],
			[
				0,
				-130
			],
			[
				-124,
				14
			],
			[
				-4,
				105
			],
			[
				28,
				53
			],
			[
				-22,
				44
			],
			[
				-31,
				-61
			],
			[
				-32,
				-11
			],
			[
				-37,
				-20
			],
			[
				-21,
				-32
			],
			[
				-36,
				-41
			],
			[
				-47,
				-20
			],
			[
				-26,
				63
			],
			[
				-11,
				64
			],
			[
				-21,
				6
			],
			[
				-28,
				9
			],
			[
				-10,
				46
			],
			[
				-12,
				-61
			],
			[
				-11,
				-57
			],
			[
				-10,
				24
			],
			[
				-35,
				2
			],
			[
				-10,
				-38
			],
			[
				-25,
				1
			],
			[
				-12,
				28
			],
			[
				-26,
				-10
			],
			[
				-19,
				-28
			],
			[
				6,
				-48
			],
			[
				-18,
				-33
			],
			[
				-16,
				28
			],
			[
				-9,
				53
			],
			[
				-18,
				-7
			],
			[
				-2,
				-54
			],
			[
				33,
				-89
			],
			[
				-18,
				-63
			],
			[
				-26,
				-32
			],
			[
				-70,
				-90
			],
			[
				-65,
				-18
			],
			[
				-9,
				-44
			],
			[
				-56,
				55
			],
			[
				-25,
				58
			],
			[
				24,
				55
			],
			[
				-2,
				60
			],
			[
				9,
				66
			],
			[
				36,
				56
			],
			[
				27,
				44
			],
			[
				17,
				40
			],
			[
				115,
				84
			],
			[
				47,
				50
			],
			[
				52,
				38
			],
			[
				34,
				1
			],
			[
				2,
				-19
			],
			[
				-21,
				-81
			],
			[
				27,
				-19
			],
			[
				20,
				63
			],
			[
				52,
				224
			],
			[
				-7,
				11
			],
			[
				9,
				52
			],
			[
				37,
				37
			],
			[
				9,
				37
			],
			[
				-3,
				44
			],
			[
				0,
				0
			]
		],
		[
			[
				8761,
				123
			],
			[
				-24,
				-79
			],
			[
				-28,
				-44
			],
			[
				-39,
				8
			],
			[
				-3,
				30
			],
			[
				-24,
				-13
			],
			[
				-43,
				98
			],
			[
				-1,
				34
			],
			[
				23,
				34
			],
			[
				75,
				-9
			],
			[
				64,
				-59
			]
		],
		[
			[
				8231,
				251
			],
			[
				7,
				-32
			],
			[
				-40,
				1
			],
			[
				74,
				-96
			],
			[
				-59,
				6
			],
			[
				-43,
				53
			],
			[
				-29,
				-47
			],
			[
				-35,
				0
			],
			[
				-20,
				38
			],
			[
				62,
				32
			],
			[
				-24,
				37
			],
			[
				-4,
				76
			],
			[
				48,
				-5
			],
			[
				63,
				-63
			]
		],
		[
			[
				7180,
				293
			],
			[
				0,
				0
			],
			[
				1,
				-8
			],
			[
				-4,
				-16
			],
			[
				-1,
				0
			],
			[
				0,
				0
			]
		],
		[
			[
				7550,
				693
			],
			[
				0,
				0
			],
			[
				-3,
				-8
			],
			[
				-24,
				-17
			],
			[
				-26,
				3
			],
			[
				0,
				0
			]
		],
		[
			[
				7905,
				482
			],
			[
				5,
				-125
			],
			[
				-35,
				20
			],
			[
				-15,
				63
			],
			[
				45,
				42
			]
		],
		[
			[
				11448,
				2179
			],
			[
				-16,
				-30
			],
			[
				-39,
				-69
			],
			[
				-44,
				-92
			],
			[
				37,
				15
			],
			[
				15,
				-7
			],
			[
				27,
				-111
			],
			[
				-15,
				-39
			],
			[
				-39,
				-11
			],
			[
				-38,
				21
			],
			[
				-14,
				8
			],
			[
				6,
				13
			],
			[
				6,
				15
			],
			[
				-9,
				26
			],
			[
				-34,
				1
			],
			[
				-12,
				-44
			],
			[
				-43,
				-77
			],
			[
				-35,
				-13
			],
			[
				-15,
				-33
			],
			[
				-8,
				-10
			],
			[
				-90,
				-117
			],
			[
				-55,
				31
			],
			[
				-69,
				-27
			],
			[
				51,
				-62
			],
			[
				-135,
				15
			],
			[
				-14,
				-37
			],
			[
				110,
				-52
			],
			[
				-16,
				45
			],
			[
				52,
				-14
			],
			[
				28,
				-28
			],
			[
				-56,
				-58
			],
			[
				-38,
				-112
			],
			[
				-17,
				-48
			],
			[
				-55,
				-38
			],
			[
				-27,
				17
			],
			[
				3,
				25
			],
			[
				6,
				49
			],
			[
				-13,
				7
			],
			[
				-22,
				11
			],
			[
				-33,
				39
			],
			[
				22,
				7
			],
			[
				10,
				28
			],
			[
				-99,
				48
			],
			[
				-7,
				-36
			],
			[
				45,
				-77
			],
			[
				51,
				-43
			],
			[
				13,
				-12
			],
			[
				-6,
				-74
			],
			[
				37,
				-77
			],
			[
				24,
				1
			],
			[
				17,
				-58
			],
			[
				-20,
				-29
			],
			[
				-24,
				-32
			],
			[
				-47,
				-19
			],
			[
				-26,
				-10
			],
			[
				-10,
				-46
			],
			[
				-20,
				-4
			],
			[
				-15,
				33
			],
			[
				0,
				52
			],
			[
				2,
				67
			],
			[
				-21,
				40
			],
			[
				13,
				99
			],
			[
				6,
				19
			],
			[
				10,
				30
			],
			[
				-50,
				12
			],
			[
				-20,
				-11
			],
			[
				2,
				-42
			],
			[
				17,
				-16
			],
			[
				2,
				-1
			],
			[
				-15,
				-56
			],
			[
				-13,
				-35
			],
			[
				0,
				0
			]
		],
		[
			[
				10666,
				1146
			],
			[
				-4,
				-10
			],
			[
				-14,
				-33
			],
			[
				15,
				-43
			],
			[
				-30,
				-15
			],
			[
				-16,
				23
			],
			[
				-51,
				-15
			],
			[
				44,
				-32
			],
			[
				0,
				-27
			],
			[
				-28,
				-80
			],
			[
				-49,
				-24
			],
			[
				-14,
				47
			],
			[
				-4,
				74
			],
			[
				-25,
				10
			],
			[
				5,
				-95
			],
			[
				-35,
				11
			],
			[
				-81,
				75
			],
			[
				-2,
				78
			],
			[
				-29,
				-68
			],
			[
				-30,
				-24
			],
			[
				-24,
				15
			],
			[
				29,
				84
			],
			[
				15,
				44
			],
			[
				-12,
				19
			],
			[
				-32,
				-44
			],
			[
				-33,
				66
			],
			[
				15,
				61
			],
			[
				29,
				45
			],
			[
				2,
				3
			],
			[
				38,
				27
			],
			[
				22,
				77
			],
			[
				13,
				53
			],
			[
				-13,
				23
			],
			[
				-23,
				37
			],
			[
				-20,
				66
			],
			[
				-22,
				72
			],
			[
				-84,
				146
			],
			[
				-32,
				-31
			],
			[
				69,
				-103
			],
			[
				11,
				-17
			],
			[
				15,
				-87
			],
			[
				-34,
				-15
			],
			[
				-22,
				-10
			],
			[
				7,
				-12
			],
			[
				34,
				-54
			],
			[
				5,
				-42
			],
			[
				-2,
				0
			],
			[
				-39,
				-5
			],
			[
				1,
				-4
			],
			[
				14,
				-37
			],
			[
				19,
				-79
			],
			[
				1,
				-5
			],
			[
				-21,
				-34
			],
			[
				-40,
				-9
			],
			[
				25,
				-51
			],
			[
				-4,
				-30
			],
			[
				-59,
				-16
			],
			[
				-20,
				22
			],
			[
				0,
				0
			],
			[
				-6,
				6
			],
			[
				0,
				0
			],
			[
				-23,
				-25
			],
			[
				44,
				-75
			],
			[
				-43,
				-20
			],
			[
				-38,
				106
			],
			[
				-75,
				-59
			],
			[
				50,
				-36
			],
			[
				-3,
				-25
			],
			[
				-66,
				-88
			],
			[
				-3,
				-4
			],
			[
				2,
				1
			],
			[
				30,
				10
			],
			[
				15,
				-5
			],
			[
				23,
				-69
			],
			[
				0,
				-50
			],
			[
				-6,
				-40
			],
			[
				-5,
				-30
			],
			[
				-70,
				-76
			],
			[
				-2,
				1
			],
			[
				-12,
				4
			],
			[
				-9,
				4
			],
			[
				-9,
				32
			],
			[
				-15,
				52
			],
			[
				11,
				82
			],
			[
				-15,
				7
			],
			[
				-29,
				-114
			],
			[
				0,
				0
			]
		],
		[
			[
				9892,
				762
			],
			[
				-8,
				-33
			],
			[
				-15,
				-59
			],
			[
				-10,
				-4
			],
			[
				-11,
				-5
			],
			[
				-14,
				-6
			],
			[
				-35,
				13
			],
			[
				-1,
				0
			],
			[
				-47,
				11
			],
			[
				-4,
				0
			],
			[
				-58,
				-18
			],
			[
				-15,
				34
			],
			[
				-39,
				-3
			],
			[
				-5,
				-72
			],
			[
				-66,
				9
			],
			[
				17,
				105
			],
			[
				-60,
				-7
			],
			[
				-32,
				-89
			],
			[
				-26,
				-2
			],
			[
				10,
				87
			],
			[
				-51,
				-40
			],
			[
				-36,
				-5
			],
			[
				-27,
				-10
			],
			[
				-38,
				-34
			],
			[
				-3,
				-54
			],
			[
				-44,
				-40
			],
			[
				-51,
				74
			],
			[
				-3,
				37
			],
			[
				-46,
				0
			],
			[
				66,
				-131
			],
			[
				-80,
				-6
			],
			[
				-1,
				-35
			],
			[
				-81,
				49
			],
			[
				21,
				-71
			],
			[
				44,
				-7
			],
			[
				16,
				-21
			],
			[
				-32,
				-31
			],
			[
				0,
				-1
			],
			[
				0,
				0
			]
		],
		[
			[
				10487,
				892
			],
			[
				-15,
				-119
			],
			[
				-26,
				4
			],
			[
				-26,
				115
			],
			[
				7,
				28
			],
			[
				60,
				-28
			]
		],
		[
			[
				10138,
				692
			],
			[
				9,
				-58
			],
			[
				-32,
				-29
			],
			[
				-33,
				0
			],
			[
				-37,
				36
			],
			[
				-14,
				-51
			],
			[
				-24,
				33
			],
			[
				-7,
				32
			],
			[
				25,
				59
			],
			[
				35,
				18
			],
			[
				20,
				-49
			],
			[
				11,
				34
			],
			[
				9,
				25
			],
			[
				-14,
				38
			],
			[
				12,
				38
			],
			[
				83,
				-67
			],
			[
				-4,
				-41
			],
			[
				-39,
				-18
			]
		],
		[
			[
				10150,
				902
			],
			[
				-39,
				-6
			],
			[
				-19,
				24
			],
			[
				-17,
				40
			],
			[
				-3,
				26
			],
			[
				12,
				22
			],
			[
				13,
				0
			],
			[
				62,
				-25
			],
			[
				13,
				-31
			],
			[
				4,
				-17
			],
			[
				-5,
				-14
			],
			[
				-21,
				-19
			]
		],
		[
			[
				11479,
				1877
			],
			[
				-18,
				8
			],
			[
				-9,
				25
			]
		],
		[
			[
				11305,
				1646
			],
			[
				-19,
				-61
			],
			[
				-21,
				18
			],
			[
				-19,
				-27
			],
			[
				7,
				-39
			],
			[
				-53,
				-42
			],
			[
				-48,
				12
			],
			[
				-9,
				39
			],
			[
				-45,
				42
			],
			[
				18,
				27
			],
			[
				94,
				104
			],
			[
				29,
				4
			],
			[
				29,
				-26
			],
			[
				30,
				-30
			],
			[
				7,
				-21
			]
		],
		[
			[
				9337,
				320
			],
			[
				-3,
				-69
			],
			[
				-66,
				17
			],
			[
				4,
				52
			],
			[
				32,
				17
			],
			[
				33,
				-17
			]
		],
		[
			[
				5375,
				2149
			],
			[
				-7,
				10
			],
			[
				-166,
				-86
			],
			[
				-103,
				81
			],
			[
				-39,
				84
			],
			[
				91,
				162
			],
			[
				-53,
				-46
			],
			[
				-58,
				-57
			],
			[
				-71,
				24
			],
			[
				-12,
				4
			],
			[
				-74,
				45
			],
			[
				-11,
				144
			],
			[
				-27,
				-137
			],
			[
				-54,
				10
			],
			[
				-48,
				33
			],
			[
				-3,
				21
			],
			[
				-4,
				23
			],
			[
				-36,
				10
			],
			[
				-15,
				-27
			],
			[
				-88,
				44
			],
			[
				-172,
				123
			],
			[
				0,
				0
			]
		],
		[
			[
				4425,
				2614
			],
			[
				-34,
				24
			],
			[
				-25,
				48
			],
			[
				28,
				20
			],
			[
				-89,
				17
			],
			[
				-27,
				79
			],
			[
				-38,
				-71
			],
			[
				-80,
				99
			],
			[
				-20,
				92
			],
			[
				-37,
				65
			],
			[
				46,
				42
			],
			[
				9,
				8
			],
			[
				-22,
				68
			],
			[
				-7,
				-2
			],
			[
				-14,
				-4
			],
			[
				2,
				-46
			],
			[
				-34,
				-13
			],
			[
				-20,
				199
			],
			[
				-21,
				91
			],
			[
				-1,
				3
			],
			[
				-4,
				21
			],
			[
				39,
				-18
			],
			[
				-7,
				73
			],
			[
				-2,
				21
			],
			[
				-9,
				-16
			],
			[
				-13,
				-25
			],
			[
				-123,
				-7
			],
			[
				-21,
				-1
			],
			[
				-185,
				-41
			],
			[
				-45,
				57
			],
			[
				58,
				31
			],
			[
				-96,
				21
			],
			[
				0,
				0
			]
		],
		[
			[
				4012,
				3316
			],
			[
				12,
				-16
			],
			[
				15,
				-114
			],
			[
				-5,
				-50
			],
			[
				0,
				-41
			],
			[
				23,
				-36
			],
			[
				-46,
				-95
			],
			[
				-93,
				99
			],
			[
				-18,
				67
			],
			[
				-13,
				89
			],
			[
				-15,
				52
			],
			[
				-40,
				11
			],
			[
				-33,
				-38
			],
			[
				13,
				-47
			],
			[
				9,
				-44
			],
			[
				-16,
				-65
			],
			[
				-45,
				-25
			],
			[
				-44,
				13
			],
			[
				-9,
				20
			],
			[
				47,
				95
			],
			[
				0,
				81
			],
			[
				71,
				46
			],
			[
				23,
				15
			],
			[
				136,
				22
			],
			[
				28,
				-39
			]
		],
		[
			[
				2437,
				10384
			],
			[
				24,
				-118
			],
			[
				30,
				56
			],
			[
				-1,
				10
			]
		],
		[
			[
				2490,
				10332
			],
			[
				0,
				0
			],
			[
				-4,
				47
			],
			[
				-3,
				96
			],
			[
				26,
				24
			],
			[
				31,
				-10
			],
			[
				23,
				-26
			],
			[
				42,
				33
			],
			[
				20,
				16
			],
			[
				7,
				25
			],
			[
				27,
				95
			],
			[
				22,
				14
			],
			[
				50,
				-74
			],
			[
				-19,
				102
			],
			[
				43,
				70
			],
			[
				0,
				0
			],
			[
				28,
				40
			],
			[
				3,
				90
			],
			[
				-15,
				36
			],
			[
				5,
				50
			],
			[
				20,
				28
			],
			[
				42,
				18
			],
			[
				-6,
				30
			],
			[
				-55,
				-11
			],
			[
				-2,
				2
			],
			[
				-30,
				49
			],
			[
				-3,
				37
			],
			[
				14,
				32
			],
			[
				-4,
				44
			],
			[
				-10,
				27
			],
			[
				1,
				52
			],
			[
				22,
				26
			],
			[
				5,
				32
			],
			[
				-29,
				25
			],
			[
				5,
				48
			],
			[
				28,
				114
			],
			[
				7,
				9
			],
			[
				70,
				84
			],
			[
				14,
				50
			],
			[
				55,
				-3
			],
			[
				8,
				-37
			],
			[
				0,
				0
			],
			[
				65,
				-74
			],
			[
				91,
				-35
			],
			[
				-4,
				31
			],
			[
				42,
				0
			],
			[
				53,
				-43
			],
			[
				35,
				6
			],
			[
				82,
				-62
			],
			[
				1,
				-1
			],
			[
				1,
				0
			],
			[
				103,
				-30
			],
			[
				40,
				-97
			],
			[
				15,
				-78
			],
			[
				4,
				-17
			],
			[
				-38,
				-80
			],
			[
				-23,
				-14
			],
			[
				-25,
				-14
			],
			[
				-45,
				-10
			],
			[
				-21,
				-37
			],
			[
				194,
				29
			],
			[
				38,
				29
			],
			[
				12,
				28
			],
			[
				-52,
				56
			],
			[
				-18,
				95
			],
			[
				-13,
				64
			],
			[
				97,
				21
			]
		],
		[
			[
				4620,
				10292
			],
			[
				-50,
				18
			],
			[
				-6,
				-48
			],
			[
				-4,
				-1
			],
			[
				-279,
				-48
			],
			[
				-38,
				28
			],
			[
				-100,
				-14
			],
			[
				-34,
				26
			],
			[
				-59,
				-27
			],
			[
				-89,
				-5
			],
			[
				-94,
				-10
			],
			[
				-46,
				-3
			],
			[
				-38,
				19
			],
			[
				-32,
				35
			],
			[
				10,
				9
			],
			[
				39,
				36
			],
			[
				-8,
				60
			],
			[
				-64,
				-4
			],
			[
				-36,
				65
			],
			[
				0,
				7
			],
			[
				-5,
				99
			],
			[
				14,
				65
			],
			[
				-6,
				80
			],
			[
				-27,
				15
			],
			[
				-20,
				-3
			],
			[
				-14,
				-8
			],
			[
				-13,
				-25
			],
			[
				-12,
				-112
			],
			[
				-26,
				16
			],
			[
				-21,
				6
			],
			[
				-28,
				-38
			],
			[
				54,
				-112
			],
			[
				7,
				-48
			],
			[
				41,
				-65
			],
			[
				25,
				-143
			],
			[
				-58,
				-63
			],
			[
				-103,
				-53
			],
			[
				-96,
				-82
			],
			[
				-21,
				24
			],
			[
				-26,
				140
			],
			[
				-49,
				102
			],
			[
				-32,
				-7
			],
			[
				35,
				-93
			],
			[
				-19,
				-66
			],
			[
				46,
				-50
			],
			[
				0,
				-92
			],
			[
				-143,
				-149
			],
			[
				0,
				0
			]
		],
		[
			[
				3195,
				9773
			],
			[
				-7,
				-7
			],
			[
				-49,
				-15
			],
			[
				6,
				-61
			],
			[
				85,
				63
			],
			[
				23,
				6
			],
			[
				86,
				72
			],
			[
				22,
				-17
			],
			[
				43,
				65
			],
			[
				79,
				35
			],
			[
				131,
				50
			],
			[
				12,
				-58
			],
			[
				-4,
				-41
			],
			[
				46,
				-138
			],
			[
				29,
				-60
			],
			[
				36,
				-19
			],
			[
				46,
				-73
			],
			[
				-19,
				-101
			],
			[
				2,
				-96
			],
			[
				-47,
				-104
			],
			[
				-10,
				52
			],
			[
				-40,
				12
			],
			[
				-8,
				-2
			],
			[
				-55,
				-17
			],
			[
				-51,
				-86
			],
			[
				-24,
				116
			],
			[
				-2,
				7
			],
			[
				-13,
				-2
			],
			[
				-35,
				-4
			],
			[
				16,
				-60
			],
			[
				-10,
				-68
			],
			[
				-34,
				-30
			],
			[
				-10,
				54
			],
			[
				-43,
				24
			],
			[
				-39,
				-42
			],
			[
				-40,
				103
			],
			[
				-16,
				-72
			],
			[
				23,
				-29
			],
			[
				-55,
				-96
			],
			[
				-104,
				-102
			],
			[
				-25,
				14
			],
			[
				-77,
				-102
			],
			[
				-1,
				-139
			],
			[
				-36,
				-38
			],
			[
				-4,
				-4
			],
			[
				-7,
				11
			],
			[
				-33,
				56
			],
			[
				48,
				106
			],
			[
				-24,
				16
			],
			[
				16,
				103
			],
			[
				-2,
				46
			],
			[
				-4,
				67
			],
			[
				13,
				43
			],
			[
				12,
				-17
			],
			[
				14,
				-19
			],
			[
				78,
				19
			],
			[
				17,
				36
			],
			[
				-71,
				73
			],
			[
				-16,
				16
			],
			[
				6,
				55
			],
			[
				1,
				18
			],
			[
				-73,
				216
			],
			[
				-12,
				80
			],
			[
				-1,
				65
			],
			[
				-5,
				42
			],
			[
				-6,
				42
			],
			[
				-15,
				121
			],
			[
				-18,
				140
			]
		],
		[
			[
				2940,
				10098
			],
			[
				0,
				0
			],
			[
				-4,
				34
			],
			[
				-14,
				64
			],
			[
				8,
				143
			],
			[
				25,
				4
			],
			[
				10,
				-16
			],
			[
				29,
				24
			],
			[
				-16,
				53
			],
			[
				-10,
				14
			],
			[
				-28,
				-24
			],
			[
				-78,
				-11
			],
			[
				-14,
				25
			],
			[
				-36,
				-17
			],
			[
				-12,
				-22
			],
			[
				-31,
				-55
			],
			[
				-18,
				-90
			],
			[
				-56,
				-16
			],
			[
				-23,
				-169
			],
			[
				-38,
				-20
			],
			[
				-84,
				60
			],
			[
				0,
				0
			]
		],
		[
			[
				2550,
				10079
			],
			[
				-70,
				49
			],
			[
				-10,
				-192
			],
			[
				32,
				59
			],
			[
				116,
				-92
			],
			[
				75,
				55
			],
			[
				27,
				91
			],
			[
				41,
				7
			],
			[
				2,
				128
			],
			[
				90,
				43
			],
			[
				18,
				-41
			],
			[
				-18,
				-90
			],
			[
				56,
				-58
			],
			[
				11,
				-104
			],
			[
				18,
				-162
			],
			[
				-26,
				21
			],
			[
				-48,
				23
			],
			[
				-23,
				-35
			],
			[
				21,
				-39
			],
			[
				50,
				8
			],
			[
				32,
				-37
			],
			[
				4,
				-32
			],
			[
				12,
				-76
			],
			[
				-29,
				-29
			],
			[
				-25,
				-19
			],
			[
				5,
				-64
			],
			[
				19,
				-95
			],
			[
				-4,
				-83
			],
			[
				-4,
				-91
			],
			[
				-47,
				-43
			],
			[
				-26,
				-145
			],
			[
				-34,
				-44
			],
			[
				-44,
				-105
			],
			[
				-43,
				-57
			],
			[
				-17,
				29
			],
			[
				-21,
				5
			],
			[
				-21,
				5
			],
			[
				-30,
				-38
			],
			[
				-52,
				27
			],
			[
				-51,
				2
			],
			[
				-35,
				18
			],
			[
				-11,
				6
			],
			[
				-11,
				72
			],
			[
				14,
				22
			],
			[
				-19,
				131
			],
			[
				-4,
				21
			],
			[
				-9,
				43
			],
			[
				26,
				-22
			],
			[
				68,
				65
			],
			[
				-32,
				37
			],
			[
				-41,
				-58
			],
			[
				-25,
				38
			],
			[
				16,
				61
			],
			[
				35,
				166
			],
			[
				0,
				71
			],
			[
				10,
				125
			],
			[
				-20,
				28
			],
			[
				-20,
				-24
			],
			[
				-19,
				-114
			],
			[
				12,
				-94
			],
			[
				-24,
				-53
			],
			[
				-2,
				-83
			],
			[
				-24,
				-31
			],
			[
				12,
				-135
			],
			[
				1,
				-12
			],
			[
				22,
				-146
			],
			[
				-97,
				8
			],
			[
				-29,
				-38
			],
			[
				-74,
				168
			],
			[
				-9,
				77
			],
			[
				7,
				83
			],
			[
				6,
				28
			],
			[
				-33,
				218
			],
			[
				10,
				30
			],
			[
				22,
				20
			],
			[
				10,
				-30
			],
			[
				27,
				7
			],
			[
				0,
				44
			],
			[
				-31,
				24
			],
			[
				-33,
				104
			],
			[
				7,
				131
			],
			[
				-24,
				-11
			],
			[
				-24,
				-67
			],
			[
				0,
				0
			]
		],
		[
			[
				2191,
				9788
			],
			[
				-8,
				-21
			],
			[
				18,
				-71
			],
			[
				9,
				-74
			],
			[
				-38,
				-55
			],
			[
				6,
				-93
			],
			[
				16,
				-64
			],
			[
				10,
				-121
			],
			[
				-76,
				-60
			],
			[
				-51,
				14
			],
			[
				-9,
				16
			],
			[
				-38,
				98
			],
			[
				-2,
				47
			],
			[
				-41,
				78
			],
			[
				-6,
				71
			],
			[
				-3,
				39
			],
			[
				-4,
				12
			],
			[
				0,
				0
			]
		],
		[
			[
				1974,
				9604
			],
			[
				-16,
				45
			],
			[
				-24,
				16
			],
			[
				-27,
				87
			],
			[
				-38,
				69
			],
			[
				-26,
				47
			],
			[
				8,
				23
			],
			[
				-23,
				42
			],
			[
				-36,
				4
			],
			[
				-2,
				33
			],
			[
				-1,
				20
			],
			[
				23,
				31
			],
			[
				-34,
				86
			],
			[
				14,
				33
			],
			[
				38,
				42
			],
			[
				-62,
				3
			],
			[
				-24,
				219
			],
			[
				65,
				6
			],
			[
				89,
				-108
			],
			[
				-21,
				-46
			],
			[
				104,
				0
			],
			[
				6,
				0
			]
		],
		[
			[
				5033,
				10858
			],
			[
				0,
				0
			],
			[
				53,
				101
			],
			[
				-3,
				174
			],
			[
				-3,
				90
			],
			[
				11,
				33
			],
			[
				35,
				3
			],
			[
				51,
				63
			],
			[
				12,
				44
			],
			[
				-30,
				29
			],
			[
				-2,
				2
			],
			[
				-39,
				8
			],
			[
				-15,
				-31
			],
			[
				-61,
				-13
			],
			[
				-29,
				-21
			],
			[
				-8,
				-18
			],
			[
				-34,
				-78
			],
			[
				-12,
				-60
			],
			[
				16,
				-74
			],
			[
				-22,
				-41
			],
			[
				1,
				-49
			],
			[
				50,
				-13
			],
			[
				5,
				-91
			],
			[
				-47,
				-45
			],
			[
				-26,
				-32
			],
			[
				0,
				0
			]
		],
		[
			[
				771,
				8999
			],
			[
				-46,
				-12
			],
			[
				-47,
				18
			],
			[
				-41,
				58
			],
			[
				19,
				63
			],
			[
				46,
				37
			],
			[
				61,
				4
			],
			[
				40,
				-26
			],
			[
				13,
				-89
			],
			[
				-45,
				-53
			]
		],
		[
			[
				2502,
				8274
			],
			[
				2,
				-5
			],
			[
				-26,
				-33
			],
			[
				-15,
				-26
			],
			[
				-17,
				-64
			],
			[
				-18,
				-65
			],
			[
				-67,
				24
			],
			[
				39,
				31
			],
			[
				-54,
				94
			],
			[
				-15,
				15
			],
			[
				-89,
				94
			],
			[
				-33,
				-3
			],
			[
				-7,
				119
			],
			[
				5,
				76
			],
			[
				15,
				34
			],
			[
				25,
				2
			],
			[
				15,
				31
			],
			[
				-35,
				19
			],
			[
				24,
				55
			],
			[
				45,
				-44
			],
			[
				32,
				28
			],
			[
				64,
				-89
			],
			[
				56,
				-40
			],
			[
				7,
				-67
			],
			[
				2,
				-5
			],
			[
				47,
				-105
			],
			[
				-25,
				-8
			],
			[
				23,
				-68
			]
		],
		[
			[
				2274,
				8236
			],
			[
				42,
				-55
			],
			[
				-52,
				-2
			],
			[
				27,
				-94
			],
			[
				-30,
				-11
			],
			[
				-46,
				66
			],
			[
				-4,
				85
			],
			[
				-3,
				61
			],
			[
				20,
				10
			],
			[
				46,
				-60
			]
		],
		[
			[
				2591,
				8460
			],
			[
				-57,
				-53
			],
			[
				-55,
				102
			],
			[
				-3,
				8
			],
			[
				-36,
				102
			],
			[
				-14,
				83
			],
			[
				34,
				41
			],
			[
				-10,
				49
			],
			[
				19,
				47
			],
			[
				8,
				-6
			],
			[
				34,
				-29
			],
			[
				21,
				-42
			],
			[
				-2,
				-49
			],
			[
				-23,
				-18
			],
			[
				-2,
				-37
			],
			[
				31,
				-67
			],
			[
				51,
				-37
			],
			[
				4,
				-94
			]
		],
		[
			[
				2019,
				8193
			],
			[
				-10,
				-88
			],
			[
				-20,
				5
			],
			[
				-20,
				-80
			],
			[
				6,
				-47
			],
			[
				-22,
				-39
			],
			[
				-16,
				57
			],
			[
				-30,
				5
			],
			[
				3,
				-43
			],
			[
				-7,
				1
			],
			[
				-13,
				2
			],
			[
				-43,
				6
			],
			[
				-26,
				-33
			],
			[
				-26,
				9
			],
			[
				-36,
				75
			],
			[
				-19,
				-4
			],
			[
				-10,
				-30
			],
			[
				-36,
				-24
			],
			[
				-38,
				18
			],
			[
				-6,
				34
			],
			[
				0,
				103
			],
			[
				4,
				10
			],
			[
				8,
				20
			],
			[
				-20,
				41
			],
			[
				-40,
				8
			],
			[
				-4,
				100
			],
			[
				-10,
				40
			],
			[
				-13,
				42
			],
			[
				12,
				48
			],
			[
				31,
				32
			],
			[
				-31,
				87
			],
			[
				48,
				31
			],
			[
				-6,
				50
			],
			[
				19,
				20
			],
			[
				17,
				19
			],
			[
				-17,
				38
			],
			[
				-33,
				-13
			],
			[
				3,
				65
			],
			[
				15,
				52
			],
			[
				19,
				14
			],
			[
				-17,
				38
			],
			[
				4,
				56
			],
			[
				29,
				12
			],
			[
				-4,
				-43
			],
			[
				41,
				47
			],
			[
				-1,
				65
			],
			[
				15,
				42
			],
			[
				95,
				-113
			],
			[
				26,
				-31
			],
			[
				26,
				40
			],
			[
				-155,
				177
			],
			[
				-31,
				48
			],
			[
				-31,
				101
			],
			[
				-12,
				61
			],
			[
				36,
				2
			],
			[
				-29,
				59
			],
			[
				20,
				13
			],
			[
				61,
				-57
			],
			[
				14,
				23
			],
			[
				-25,
				98
			],
			[
				36,
				2
			],
			[
				25,
				-41
			],
			[
				19,
				4
			],
			[
				55,
				56
			],
			[
				-50,
				49
			],
			[
				-21,
				-37
			],
			[
				-41,
				85
			],
			[
				-2,
				142
			],
			[
				41,
				-15
			],
			[
				4,
				42
			],
			[
				7,
				45
			],
			[
				110,
				-120
			],
			[
				51,
				-99
			],
			[
				4,
				-31
			],
			[
				5,
				-41
			],
			[
				-33,
				-10
			],
			[
				-11,
				-59
			],
			[
				16,
				-29
			],
			[
				17,
				25
			],
			[
				26,
				-15
			],
			[
				-2,
				-19
			],
			[
				-27,
				-80
			],
			[
				-29,
				11
			],
			[
				1,
				-51
			],
			[
				51,
				-30
			],
			[
				7,
				-43
			],
			[
				31,
				-40
			],
			[
				27,
				25
			],
			[
				23,
				-74
			],
			[
				-13,
				-40
			],
			[
				-32,
				3
			],
			[
				-6,
				22
			],
			[
				-49,
				-10
			],
			[
				-15,
				-3
			],
			[
				7,
				-37
			],
			[
				9,
				-2
			],
			[
				45,
				-7
			],
			[
				16,
				-42
			],
			[
				6,
				-52
			],
			[
				18,
				-40
			],
			[
				30,
				-66
			],
			[
				-17,
				-333
			],
			[
				-12,
				-38
			],
			[
				-21,
				-181
			],
			[
				4,
				-47
			],
			[
				-5,
				-48
			]
		],
		[
			[
				1600,
				9604
			],
			[
				4,
				-32
			],
			[
				-25,
				7
			],
			[
				-26,
				-5
			],
			[
				-1,
				-33
			],
			[
				-47,
				15
			],
			[
				6,
				45
			],
			[
				7,
				36
			],
			[
				27,
				94
			],
			[
				18,
				1
			],
			[
				32,
				-92
			],
			[
				5,
				-36
			]
		],
		[
			[
				2169,
				8973
			],
			[
				15,
				-33
			],
			[
				31,
				74
			],
			[
				17,
				-93
			],
			[
				-40,
				-56
			],
			[
				-31,
				33
			],
			[
				-1,
				-65
			],
			[
				-27,
				-20
			],
			[
				-42,
				193
			],
			[
				-8,
				151
			],
			[
				70,
				56
			],
			[
				67,
				-26
			],
			[
				7,
				-42
			],
			[
				-58,
				-172
			]
		],
		[
			[
				2338,
				8866
			],
			[
				-28,
				-35
			],
			[
				-24,
				17
			],
			[
				-29,
				15
			],
			[
				-3,
				47
			],
			[
				5,
				20
			],
			[
				9,
				27
			],
			[
				15,
				1
			],
			[
				14,
				-15
			],
			[
				27,
				-39
			],
			[
				14,
				-38
			]
		],
		[
			[
				1368,
				9944
			],
			[
				-45,
				-26
			],
			[
				-40,
				61
			],
			[
				25,
				53
			],
			[
				46,
				-23
			],
			[
				14,
				-65
			]
		],
		[
			[
				14232,
				5407
			],
			[
				-9,
				-16
			],
			[
				-41,
				-71
			],
			[
				-47,
				-20
			],
			[
				-67,
				-31
			],
			[
				-74,
				-40
			],
			[
				-83,
				16
			],
			[
				-7,
				22
			],
			[
				-2,
				9
			],
			[
				-33,
				-1
			],
			[
				1,
				-37
			],
			[
				-23,
				-5
			],
			[
				-101,
				34
			],
			[
				-29,
				-31
			],
			[
				-18,
				0
			],
			[
				-13,
				48
			],
			[
				-43,
				-53
			],
			[
				-103,
				3
			],
			[
				-65,
				51
			],
			[
				-6,
				5
			],
			[
				-9,
				0
			],
			[
				-71,
				-4
			],
			[
				-23,
				72
			],
			[
				-17,
				-11
			],
			[
				-19,
				-13
			],
			[
				6,
				-14
			],
			[
				11,
				-27
			],
			[
				43,
				-53
			],
			[
				-84,
				-109
			],
			[
				62,
				-17
			],
			[
				60,
				6
			],
			[
				44,
				-30
			],
			[
				34,
				-14
			],
			[
				7,
				0
			],
			[
				4,
				0
			],
			[
				175,
				-12
			],
			[
				13,
				-7
			],
			[
				25,
				-1
			],
			[
				12,
				21
			],
			[
				-21,
				35
			],
			[
				-100,
				0
			],
			[
				-165,
				57
			],
			[
				-40,
				37
			],
			[
				16,
				28
			],
			[
				24,
				7
			],
			[
				47,
				-13
			],
			[
				44,
				-28
			],
			[
				87,
				-18
			],
			[
				79,
				19
			],
			[
				110,
				6
			],
			[
				-30,
				-38
			],
			[
				-39,
				-69
			],
			[
				57,
				36
			],
			[
				52,
				8
			],
			[
				6,
				-37
			],
			[
				-13,
				-42
			],
			[
				0,
				-1
			],
			[
				-38,
				-75
			],
			[
				-207,
				-59
			],
			[
				-88,
				-15
			],
			[
				-18,
				20
			],
			[
				-35,
				0
			],
			[
				-29,
				-68
			],
			[
				304,
				49
			],
			[
				79,
				-49
			],
			[
				-43,
				-57
			],
			[
				-12,
				-48
			],
			[
				-25,
				-47
			],
			[
				-60,
				-34
			],
			[
				-50,
				-18
			],
			[
				0,
				0
			]
		],
		[
			[
				13634,
				4663
			],
			[
				-5,
				-1
			],
			[
				2,
				3
			]
		],
		[
			[
				13631,
				4665
			],
			[
				0,
				0
			],
			[
				24,
				39
			],
			[
				-26,
				17
			],
			[
				-128,
				-96
			],
			[
				0,
				0
			]
		],
		[
			[
				13501,
				4625
			],
			[
				-15,
				-11
			],
			[
				66,
				-11
			],
			[
				-22,
				-35
			],
			[
				-41,
				-16
			],
			[
				-60,
				-61
			],
			[
				-68,
				-26
			],
			[
				3,
				-33
			],
			[
				-35,
				-25
			],
			[
				-103,
				-59
			],
			[
				4,
				62
			],
			[
				-6,
				-2
			],
			[
				-26,
				-8
			],
			[
				0,
				-9
			],
			[
				3,
				-31
			],
			[
				-13,
				-38
			],
			[
				-26,
				-45
			],
			[
				7,
				-26
			],
			[
				-45,
				-56
			],
			[
				-8,
				-11
			],
			[
				-19,
				-3
			],
			[
				-35,
				22
			],
			[
				-11,
				75
			],
			[
				-3,
				20
			],
			[
				-11,
				-3
			],
			[
				-23,
				-7
			],
			[
				-37,
				44
			],
			[
				1,
				35
			],
			[
				8,
				10
			],
			[
				1,
				3
			],
			[
				1,
				3
			],
			[
				9,
				53
			],
			[
				-26,
				-14
			],
			[
				-9,
				-5
			],
			[
				-28,
				-14
			],
			[
				3,
				-34
			],
			[
				23,
				-100
			],
			[
				-35,
				-104
			],
			[
				-4,
				-13
			],
			[
				-16,
				7
			],
			[
				-9,
				-75
			],
			[
				38,
				32
			]
		],
		[
			[
				12934,
				4116
			],
			[
				0,
				0
			],
			[
				0,
				1
			],
			[
				0,
				0
			]
		],
		[
			[
				12934,
				4117
			],
			[
				1,
				0
			],
			[
				7,
				7
			],
			[
				33,
				67
			],
			[
				11,
				23
			],
			[
				32,
				21
			],
			[
				21,
				-55
			],
			[
				-1,
				-6
			],
			[
				-2,
				-11
			]
		],
		[
			[
				13036,
				4163
			],
			[
				0,
				0
			],
			[
				-11,
				-63
			],
			[
				-22,
				-40
			],
			[
				31,
				-43
			],
			[
				-42,
				-92
			],
			[
				-201,
				-174
			],
			[
				-13,
				-105
			],
			[
				-8,
				-70
			],
			[
				-41,
				-17
			],
			[
				-8,
				36
			],
			[
				-24,
				-21
			],
			[
				-11,
				-62
			],
			[
				-63,
				-59
			],
			[
				-33,
				-32
			],
			[
				-10,
				-6
			],
			[
				-10,
				-6
			],
			[
				-43,
				-23
			],
			[
				-7,
				-10
			],
			[
				-8,
				-15
			],
			[
				-54,
				-33
			],
			[
				-12,
				-21
			],
			[
				-21,
				-8
			],
			[
				-33,
				-15
			],
			[
				-21,
				-26
			],
			[
				-30,
				-36
			],
			[
				-69,
				-44
			],
			[
				-12,
				-42
			],
			[
				2,
				-3
			],
			[
				29,
				-42
			],
			[
				0,
				-15
			],
			[
				0,
				-27
			],
			[
				0,
				-4
			],
			[
				-24,
				-79
			],
			[
				-13,
				-39
			],
			[
				0,
				-2
			],
			[
				0,
				0
			]
		],
		[
			[
				12254,
				2925
			],
			[
				-22,
				-70
			],
			[
				32,
				-9
			],
			[
				52,
				13
			],
			[
				-42,
				-97
			],
			[
				-28,
				-39
			],
			[
				-12,
				-11
			],
			[
				-46,
				-40
			],
			[
				-34,
				45
			],
			[
				-24,
				-27
			],
			[
				19,
				-42
			],
			[
				-2,
				-23
			],
			[
				-3,
				-27
			],
			[
				-25,
				1
			],
			[
				-24,
				0
			],
			[
				-26,
				-81
			],
			[
				-43,
				-12
			],
			[
				-36,
				-4
			],
			[
				30,
				-52
			],
			[
				-52,
				-23
			],
			[
				-9,
				-4
			],
			[
				-11,
				23
			],
			[
				-6,
				13
			],
			[
				1,
				29
			],
			[
				34,
				102
			],
			[
				17,
				29
			],
			[
				3,
				30
			],
			[
				-4,
				2
			],
			[
				-12,
				7
			],
			[
				-26,
				-12
			],
			[
				-1,
				-2
			],
			[
				-2,
				-8
			],
			[
				-109,
				-323
			],
			[
				-7,
				-21
			],
			[
				-74,
				-91
			],
			[
				-27,
				-26
			],
			[
				-20,
				-13
			],
			[
				-18,
				5
			],
			[
				-34,
				67
			],
			[
				17,
				-85
			],
			[
				-84,
				-72
			],
			[
				2,
				-36
			],
			[
				87,
				55
			],
			[
				43,
				47
			],
			[
				14,
				-20
			],
			[
				-23,
				-103
			],
			[
				-49,
				-73
			],
			[
				8,
				61
			],
			[
				-45,
				-59
			],
			[
				-19,
				18
			],
			[
				-100,
				-16
			],
			[
				-76,
				47
			],
			[
				-11,
				44
			],
			[
				16,
				102
			],
			[
				6,
				36
			],
			[
				-1,
				-1
			],
			[
				0,
				0
			]
		],
		[
			[
				13357,
				4326
			],
			[
				-41,
				-9
			],
			[
				-24,
				8
			],
			[
				11,
				21
			],
			[
				32,
				19
			],
			[
				28,
				19
			],
			[
				57,
				33
			],
			[
				46,
				48
			],
			[
				25,
				0
			],
			[
				18,
				-11
			],
			[
				-1,
				-15
			],
			[
				-27,
				-27
			],
			[
				-22,
				-24
			],
			[
				-33,
				-19
			],
			[
				-21,
				-3
			],
			[
				-48,
				-40
			]
		],
		[
			[
				13282,
				4122
			],
			[
				-51,
				-16
			],
			[
				-2,
				14
			],
			[
				-3,
				25
			],
			[
				33,
				92
			],
			[
				15,
				12
			],
			[
				52,
				26
			],
			[
				57,
				-6
			],
			[
				-53,
				-91
			],
			[
				-45,
				-52
			],
			[
				-3,
				-4
			]
		],
		[
			[
				13194,
				4120
			],
			[
				-5,
				-19
			],
			[
				2,
				-20
			],
			[
				3,
				-25
			],
			[
				-37,
				-22
			],
			[
				-22,
				31
			],
			[
				-6,
				39
			],
			[
				0,
				15
			],
			[
				0,
				7
			],
			[
				10,
				53
			],
			[
				0,
				0
			],
			[
				11,
				17
			],
			[
				55,
				41
			],
			[
				27,
				10
			],
			[
				-15,
				-57
			],
			[
				-12,
				-30
			],
			[
				-11,
				-40
			]
		],
		[
			[
				11452,
				1910
			],
			[
				0,
				0
			],
			[
				-22,
				56
			],
			[
				110,
				-63
			],
			[
				-24,
				-41
			],
			[
				-37,
				15
			],
			[
				0,
				0
			]
		],
		[
			[
				13135,
				3966
			],
			[
				-80,
				-9
			],
			[
				13,
				28
			],
			[
				-9,
				75
			],
			[
				-5,
				47
			],
			[
				9,
				44
			],
			[
				4,
				17
			],
			[
				14,
				-19
			],
			[
				11,
				-16
			],
			[
				27,
				-98
			],
			[
				-5,
				-29
			],
			[
				21,
				-40
			]
		],
		[
			[
				13036,
				3771
			],
			[
				-45,
				-40
			],
			[
				-29,
				-26
			],
			[
				-2,
				14
			],
			[
				-7,
				38
			],
			[
				-54,
				-47
			],
			[
				-6,
				-18
			],
			[
				-2,
				-10
			],
			[
				-8,
				6
			],
			[
				-22,
				15
			],
			[
				-22,
				31
			],
			[
				132,
				107
			],
			[
				66,
				79
			],
			[
				71,
				4
			],
			[
				-54,
				-94
			],
			[
				-18,
				-59
			]
		],
		[
			[
				12620,
				3370
			],
			[
				24,
				14
			],
			[
				37,
				66
			],
			[
				62,
				68
			],
			[
				22,
				16
			],
			[
				47,
				35
			],
			[
				86,
				64
			],
			[
				28,
				16
			],
			[
				31,
				14
			],
			[
				26,
				3
			],
			[
				-16,
				-50
			],
			[
				-31,
				-28
			],
			[
				-43,
				-70
			],
			[
				-29,
				-81
			],
			[
				-45,
				-48
			],
			[
				-89,
				-41
			],
			[
				89,
				-4
			],
			[
				-14,
				-45
			],
			[
				-54,
				-67
			],
			[
				-55,
				-33
			],
			[
				-43,
				-49
			],
			[
				-45,
				-33
			],
			[
				-11,
				27
			],
			[
				53,
				85
			],
			[
				-41,
				-17
			],
			[
				-24,
				-16
			],
			[
				-30,
				-47
			],
			[
				-1,
				0
			],
			[
				-45,
				3
			],
			[
				-26,
				43
			],
			[
				-2,
				92
			],
			[
				-11,
				16
			],
			[
				16,
				11
			],
			[
				18,
				1
			],
			[
				9,
				-9
			],
			[
				3,
				-3
			],
			[
				6,
				8
			],
			[
				23,
				32
			],
			[
				58,
				21
			],
			[
				17,
				6
			]
		],
		[
			[
				12473,
				3126
			],
			[
				-20,
				-70
			],
			[
				-30,
				1
			],
			[
				-19,
				-7
			],
			[
				-15,
				-6
			],
			[
				-26,
				-29
			],
			[
				-32,
				48
			],
			[
				-1,
				1
			],
			[
				-10,
				25
			],
			[
				-25,
				61
			],
			[
				19,
				2
			],
			[
				31,
				4
			],
			[
				31,
				47
			],
			[
				25,
				39
			],
			[
				43,
				31
			],
			[
				35,
				-111
			],
			[
				-6,
				-36
			]
		],
		[
			[
				12422,
				35476
			],
			[
				0,
				0
			],
			[
				117,
				25
			],
			[
				33,
				17
			],
			[
				47,
				26
			],
			[
				173,
				9
			],
			[
				153,
				7
			],
			[
				128,
				35
			],
			[
				16,
				50
			],
			[
				-237,
				-27
			],
			[
				-208,
				-27
			],
			[
				-14,
				-2
			],
			[
				0,
				0
			]
		],
		[
			[
				12397,
				37115
			],
			[
				0,
				0
			],
			[
				24,
				9
			],
			[
				67,
				7
			],
			[
				2,
				-20
			],
			[
				91,
				31
			],
			[
				52,
				-6
			],
			[
				9,
				-13
			],
			[
				5,
				-8
			],
			[
				27,
				5
			],
			[
				23,
				5
			],
			[
				34,
				10
			],
			[
				33,
				-41
			],
			[
				5,
				-29
			],
			[
				-22,
				-31
			],
			[
				-3,
				-55
			],
			[
				0,
				-2
			],
			[
				2,
				-1
			],
			[
				26,
				-10
			],
			[
				32,
				-97
			],
			[
				46,
				-8
			],
			[
				4,
				60
			],
			[
				-76,
				85
			],
			[
				29,
				41
			],
			[
				40,
				-47
			],
			[
				52,
				34
			],
			[
				-33,
				21
			],
			[
				61,
				74
			],
			[
				22,
				-22
			],
			[
				43,
				-42
			],
			[
				17,
				-22
			],
			[
				-10,
				-49
			],
			[
				32,
				-19
			],
			[
				61,
				15
			],
			[
				42,
				9
			],
			[
				68,
				33
			],
			[
				-37,
				31
			],
			[
				-59,
				-10
			],
			[
				-22,
				24
			],
			[
				-12,
				13
			],
			[
				10,
				7
			],
			[
				48,
				34
			],
			[
				-5,
				24
			],
			[
				-52,
				42
			],
			[
				-20,
				16
			],
			[
				17,
				11
			],
			[
				63,
				42
			],
			[
				-14,
				112
			],
			[
				80,
				1
			],
			[
				19,
				-122
			],
			[
				92,
				6
			],
			[
				5,
				-30
			],
			[
				105,
				-4
			],
			[
				-24,
				-95
			],
			[
				36,
				-54
			],
			[
				54,
				0
			],
			[
				50,
				1
			],
			[
				17,
				-32
			],
			[
				12,
				-34
			],
			[
				13,
				-35
			],
			[
				19,
				-75
			],
			[
				-23,
				-58
			],
			[
				4,
				-66
			],
			[
				82,
				17
			],
			[
				10,
				-43
			],
			[
				-145,
				-96
			],
			[
				-35,
				-89
			],
			[
				55,
				-17
			],
			[
				2,
				0
			],
			[
				-121,
				-163
			],
			[
				-26,
				-119
			],
			[
				-1,
				-62
			],
			[
				22,
				-42
			],
			[
				73,
				72
			],
			[
				16,
				15
			],
			[
				16,
				27
			],
			[
				-11,
				50
			],
			[
				52,
				67
			],
			[
				27,
				0
			],
			[
				8,
				0
			],
			[
				46,
				14
			],
			[
				40,
				34
			],
			[
				16,
				42
			],
			[
				44,
				52
			],
			[
				2,
				3
			],
			[
				49,
				-32
			]
		],
		[
			[
				13799,
				36511
			],
			[
				0,
				0
			],
			[
				17,
				-11
			],
			[
				15,
				-9
			],
			[
				28,
				-18
			],
			[
				-3,
				38
			],
			[
				-6,
				66
			],
			[
				-1,
				11
			],
			[
				92,
				9
			],
			[
				74,
				86
			],
			[
				95,
				3
			],
			[
				63,
				10
			],
			[
				58,
				-10
			],
			[
				40,
				34
			],
			[
				88,
				8
			],
			[
				189,
				95
			],
			[
				64,
				55
			],
			[
				31,
				26
			],
			[
				-26,
				29
			],
			[
				-9,
				-6
			],
			[
				-97,
				-66
			],
			[
				-177,
				-59
			],
			[
				-84,
				-28
			],
			[
				-8,
				-3
			],
			[
				-121,
				-17
			],
			[
				-20,
				18
			],
			[
				-191,
				-49
			],
			[
				-65,
				12
			],
			[
				-20,
				25
			],
			[
				26,
				75
			],
			[
				-17,
				50
			],
			[
				-17,
				-37
			],
			[
				-39,
				-15
			],
			[
				-61,
				74
			],
			[
				-5,
				13
			],
			[
				-1,
				2
			],
			[
				-24,
				56
			],
			[
				-23,
				60
			],
			[
				36,
				103
			],
			[
				15,
				7
			],
			[
				70,
				34
			],
			[
				20,
				-32
			],
			[
				14,
				-23
			],
			[
				28,
				72
			],
			[
				62,
				-21
			],
			[
				38,
				54
			],
			[
				44,
				-58
			],
			[
				52,
				23
			],
			[
				11,
				29
			],
			[
				154,
				54
			],
			[
				16,
				-21
			],
			[
				25,
				0
			],
			[
				27,
				19
			],
			[
				68,
				44
			],
			[
				26,
				17
			],
			[
				99,
				66
			],
			[
				129,
				-26
			],
			[
				17,
				-30
			],
			[
				24,
				11
			],
			[
				0,
				31
			],
			[
				-21,
				27
			],
			[
				11,
				32
			],
			[
				16,
				64
			],
			[
				-75,
				-18
			],
			[
				-60,
				-43
			],
			[
				-53,
				-13
			],
			[
				-127,
				-78
			],
			[
				-2,
				26
			],
			[
				-9,
				-2
			],
			[
				-39,
				-8
			],
			[
				-4,
				-1
			],
			[
				-1,
				0
			],
			[
				-37,
				-41
			],
			[
				-7,
				-7
			],
			[
				-70,
				0
			],
			[
				-2,
				40
			],
			[
				23,
				44
			],
			[
				-17,
				32
			],
			[
				-24,
				9
			],
			[
				-31,
				9
			],
			[
				-25,
				27
			],
			[
				-7,
				16
			],
			[
				-3,
				8
			],
			[
				-3,
				2
			],
			[
				-16,
				14
			],
			[
				-65,
				65
			],
			[
				-2,
				2
			],
			[
				-3,
				2
			],
			[
				-2,
				0
			],
			[
				-25,
				-8
			],
			[
				1,
				-23
			],
			[
				18,
				-87
			],
			[
				28,
				-1
			],
			[
				22,
				-1
			],
			[
				-40,
				-50
			],
			[
				-8,
				-10
			],
			[
				2,
				-6
			],
			[
				9,
				-24
			],
			[
				74,
				16
			],
			[
				58,
				-19
			],
			[
				0,
				-21
			],
			[
				0,
				-53
			],
			[
				-84,
				-47
			],
			[
				-44,
				66
			],
			[
				-63,
				-25
			],
			[
				-63,
				-34
			],
			[
				-60,
				10
			],
			[
				4,
				49
			],
			[
				-58,
				1
			],
			[
				-98,
				23
			],
			[
				22,
				49
			],
			[
				-34,
				103
			],
			[
				-44,
				23
			],
			[
				-26,
				14
			],
			[
				80,
				51
			],
			[
				27,
				18
			],
			[
				58,
				37
			],
			[
				25,
				47
			],
			[
				23,
				45
			],
			[
				48,
				9
			],
			[
				61,
				-100
			],
			[
				5,
				-8
			],
			[
				-6,
				-29
			],
			[
				-13,
				-57
			],
			[
				40,
				10
			],
			[
				20,
				57
			],
			[
				25,
				72
			],
			[
				-35,
				-16
			],
			[
				-3,
				-1
			],
			[
				-6,
				11
			],
			[
				-22,
				40
			],
			[
				-30,
				56
			],
			[
				140,
				37
			],
			[
				4,
				-42
			],
			[
				5,
				-54
			],
			[
				75,
				54
			],
			[
				10,
				75
			],
			[
				116,
				132
			],
			[
				114,
				17
			],
			[
				-36,
				-264
			],
			[
				72,
				-125
			],
			[
				44,
				28
			],
			[
				-45,
				158
			],
			[
				53,
				69
			],
			[
				43,
				9
			],
			[
				0,
				5
			],
			[
				7,
				56
			],
			[
				13,
				64
			],
			[
				8,
				15
			],
			[
				12,
				24
			],
			[
				2,
				4
			],
			[
				37,
				7
			],
			[
				26,
				43
			],
			[
				28,
				28
			],
			[
				45,
				-53
			],
			[
				9,
				-11
			],
			[
				55,
				24
			],
			[
				42,
				19
			],
			[
				20,
				-10
			],
			[
				8,
				-3
			],
			[
				9,
				-5
			],
			[
				19,
				-23
			]
		],
		[
			[
				14807,
				38064
			],
			[
				0,
				0
			],
			[
				19,
				-23
			],
			[
				2,
				-14
			],
			[
				0,
				0
			]
		],
		[
			[
				14828,
				38027
			],
			[
				5,
				-46
			],
			[
				3,
				-19
			]
		],
		[
			[
				14836,
				37962
			],
			[
				0,
				0
			],
			[
				6,
				-28
			],
			[
				20,
				-98
			],
			[
				41,
				16
			],
			[
				-36,
				205
			],
			[
				-34,
				37
			],
			[
				-13,
				14
			],
			[
				3,
				10
			],
			[
				20,
				64
			],
			[
				-57,
				17
			],
			[
				-12,
				4
			],
			[
				-69,
				-31
			],
			[
				-83,
				-4
			],
			[
				69,
				48
			],
			[
				18,
				65
			],
			[
				16,
				35
			],
			[
				60,
				21
			],
			[
				39,
				14
			],
			[
				17,
				6
			],
			[
				109,
				101
			],
			[
				136,
				0
			],
			[
				2,
				0
			],
			[
				122,
				97
			],
			[
				0,
				0
			],
			[
				104,
				56
			],
			[
				86,
				9
			],
			[
				-35,
				-142
			],
			[
				-42,
				-39
			],
			[
				-30,
				-28
			],
			[
				42,
				4
			],
			[
				26,
				2
			],
			[
				39,
				-85
			],
			[
				31,
				-89
			],
			[
				-21,
				-54
			],
			[
				41,
				-19
			],
			[
				48,
				-23
			],
			[
				17,
				-59
			],
			[
				-2,
				-18
			],
			[
				-5,
				-25
			],
			[
				38,
				-16
			],
			[
				25,
				-11
			],
			[
				33,
				-44
			],
			[
				36,
				-76
			],
			[
				-2,
				-27
			],
			[
				-20,
				-64
			],
			[
				-42,
				-31
			],
			[
				-16,
				-37
			],
			[
				-4,
				-9
			],
			[
				2,
				-2
			],
			[
				70,
				-52
			],
			[
				45,
				-21
			],
			[
				23,
				-20
			],
			[
				-5,
				-40
			],
			[
				-9,
				-75
			],
			[
				67,
				-32
			],
			[
				107,
				-63
			],
			[
				3,
				-1
			],
			[
				9,
				-64
			],
			[
				48,
				0
			],
			[
				12,
				0
			],
			[
				3,
				-46
			],
			[
				44,
				-22
			]
		],
		[
			[
				15976,
				37292
			],
			[
				0,
				0
			],
			[
				105,
				-55
			],
			[
				-16,
				-98
			],
			[
				-41,
				-181
			],
			[
				-53,
				-194
			],
			[
				-79,
				-113
			],
			[
				-22,
				-57
			],
			[
				-76,
				-28
			],
			[
				-157,
				-122
			],
			[
				-44,
				-35
			],
			[
				28,
				-46
			],
			[
				42,
				14
			],
			[
				70,
				-21
			],
			[
				30,
				28
			],
			[
				62,
				54
			]
		],
		[
			[
				14105,
				38080
			],
			[
				-46,
				-22
			],
			[
				-50,
				20
			],
			[
				8,
				71
			],
			[
				71,
				49
			],
			[
				167,
				39
			],
			[
				-51,
				-74
			],
			[
				-71,
				-20
			],
			[
				-28,
				-63
			]
		],
		[
			[
				13628,
				37633
			],
			[
				-36,
				-30
			],
			[
				-50,
				-42
			],
			[
				8,
				-63
			],
			[
				-103,
				-3
			],
			[
				-23,
				83
			],
			[
				41,
				36
			],
			[
				15,
				12
			],
			[
				43,
				-13
			],
			[
				87,
				39
			],
			[
				18,
				-19
			]
		],
		[
			[
				12886,
				37252
			],
			[
				-4,
				-25
			],
			[
				60,
				6
			],
			[
				9,
				-24
			],
			[
				-74,
				-50
			],
			[
				-66,
				55
			],
			[
				-62,
				6
			],
			[
				37,
				59
			],
			[
				154,
				39
			],
			[
				9,
				-29
			],
			[
				-63,
				-37
			]
		],
		[
			[
				4272,
				30345
			],
			[
				-7,
				60
			],
			[
				153,
				-8
			],
			[
				227,
				14
			],
			[
				2,
				31
			],
			[
				82,
				43
			],
			[
				78,
				-46
			],
			[
				-1,
				-20
			],
			[
				0,
				-2
			],
			[
				-2,
				-34
			],
			[
				54,
				35
			],
			[
				16,
				11
			],
			[
				9,
				5
			],
			[
				91,
				-45
			],
			[
				-38,
				-47
			],
			[
				-5,
				-7
			],
			[
				-9,
				-24
			],
			[
				-5,
				-14
			],
			[
				29,
				3
			],
			[
				34,
				3
			],
			[
				15,
				41
			],
			[
				7,
				1
			],
			[
				145,
				2
			],
			[
				4,
				-2
			],
			[
				33,
				-22
			],
			[
				7,
				-54
			],
			[
				-110,
				-33
			],
			[
				-28,
				-9
			],
			[
				-3,
				-28
			],
			[
				0,
				-7
			],
			[
				-73,
				-27
			],
			[
				-153,
				-13
			],
			[
				-173,
				-54
			],
			[
				-58,
				1
			],
			[
				0,
				0
			],
			[
				-164,
				48
			],
			[
				-117,
				98
			],
			[
				-38,
				81
			],
			[
				-2,
				19
			]
		],
		[
			[
				4445,
				31342
			],
			[
				47,
				-128
			],
			[
				-23,
				-38
			],
			[
				-12,
				-21
			],
			[
				14,
				-40
			],
			[
				17,
				-50
			],
			[
				-2,
				-37
			],
			[
				-25,
				17
			],
			[
				-19,
				13
			],
			[
				-75,
				129
			],
			[
				-92,
				-36
			],
			[
				14,
				-53
			],
			[
				-144,
				-42
			],
			[
				3,
				34
			],
			[
				56,
				19
			],
			[
				-17,
				17
			],
			[
				-52,
				6
			],
			[
				-23,
				34
			],
			[
				23,
				22
			],
			[
				36,
				0
			],
			[
				113,
				119
			],
			[
				51,
				-24
			],
			[
				59,
				12
			],
			[
				-12,
				47
			],
			[
				-49,
				46
			],
			[
				-3,
				24
			],
			[
				88,
				22
			],
			[
				60,
				-25
			],
			[
				-33,
				-67
			]
		],
		[
			[
				4503,
				30820
			],
			[
				-39,
				-35
			],
			[
				-71,
				23
			],
			[
				-5,
				56
			],
			[
				-14,
				140
			],
			[
				62,
				11
			],
			[
				1,
				-1
			],
			[
				72,
				-44
			],
			[
				-23,
				-82
			],
			[
				11,
				-42
			],
			[
				6,
				-26
			]
		],
		[
			[
				4213,
				30622
			],
			[
				-29,
				-46
			],
			[
				-28,
				25
			],
			[
				-46,
				2
			],
			[
				-56,
				-24
			],
			[
				-65,
				-21
			],
			[
				-56,
				5
			],
			[
				-47,
				24
			],
			[
				32,
				67
			],
			[
				64,
				61
			],
			[
				-11,
				38
			],
			[
				23,
				6
			],
			[
				34,
				-44
			],
			[
				79,
				-15
			],
			[
				104,
				11
			],
			[
				7,
				-14
			],
			[
				9,
				-20
			],
			[
				-14,
				-55
			]
		],
		[
			[
				4286,
				30928
			],
			[
				2,
				-52
			],
			[
				1,
				-28
			],
			[
				-11,
				-28
			],
			[
				-26,
				-15
			],
			[
				-21,
				-4
			],
			[
				-18,
				-5
			],
			[
				-31,
				17
			],
			[
				-26,
				76
			],
			[
				56,
				8
			],
			[
				21,
				-19
			],
			[
				53,
				50
			]
		],
		[
			[
				6198,
				30691
			],
			[
				-1,
				4
			],
			[
				24,
				41
			],
			[
				-41,
				-20
			],
			[
				-75,
				-103
			],
			[
				-55,
				-41
			],
			[
				-49,
				-22
			],
			[
				-17,
				24
			],
			[
				-56,
				11
			],
			[
				-23,
				-46
			],
			[
				-20,
				-43
			],
			[
				-85,
				-40
			],
			[
				-47,
				-40
			],
			[
				0,
				0
			]
		],
		[
			[
				5753,
				30416
			],
			[
				-54,
				-45
			],
			[
				-83,
				-20
			],
			[
				-65,
				-16
			],
			[
				-172,
				16
			],
			[
				-92,
				-86
			],
			[
				-40,
				16
			],
			[
				40,
				44
			],
			[
				-15,
				22
			],
			[
				-51,
				15
			],
			[
				-52,
				15
			],
			[
				-39,
				11
			],
			[
				27,
				23
			],
			[
				-2,
				31
			],
			[
				-35,
				50
			],
			[
				31,
				40
			],
			[
				-103,
				23
			],
			[
				-85,
				-5
			],
			[
				-27,
				-17
			],
			[
				-88,
				-7
			],
			[
				-76,
				82
			],
			[
				53,
				6
			],
			[
				382,
				43
			],
			[
				2,
				11
			],
			[
				8,
				46
			],
			[
				80,
				3
			],
			[
				9,
				32
			],
			[
				64,
				16
			],
			[
				39,
				4
			]
		],
		[
			[
				5409,
				30769
			],
			[
				0,
				0
			],
			[
				42,
				5
			],
			[
				73,
				75
			],
			[
				23,
				-30
			],
			[
				71,
				-8
			],
			[
				0,
				33
			],
			[
				47,
				33
			],
			[
				0,
				-33
			],
			[
				52,
				-42
			],
			[
				96,
				-7
			],
			[
				63,
				42
			],
			[
				36,
				-50
			],
			[
				39,
				24
			],
			[
				2,
				1
			],
			[
				32,
				-6
			],
			[
				2,
				-42
			],
			[
				43,
				-61
			],
			[
				46,
				-14
			],
			[
				44,
				26
			],
			[
				-28,
				32
			],
			[
				164,
				15
			],
			[
				-22,
				44
			],
			[
				-96,
				20
			],
			[
				-61,
				12
			],
			[
				-101,
				6
			],
			[
				-26,
				1
			],
			[
				-48,
				54
			],
			[
				44,
				31
			],
			[
				22,
				15
			],
			[
				-21,
				15
			],
			[
				-23,
				15
			],
			[
				-240,
				-55
			],
			[
				-14,
				13
			],
			[
				-150,
				-25
			],
			[
				-23,
				24
			],
			[
				78,
				44
			],
			[
				83,
				23
			]
		],
		[
			[
				5658,
				30999
			],
			[
				0,
				0
			],
			[
				13,
				3
			],
			[
				53,
				-8
			],
			[
				78,
				13
			],
			[
				53,
				25
			],
			[
				-32,
				72
			],
			[
				-113,
				1
			],
			[
				-218,
				-58
			],
			[
				-52,
				-14
			],
			[
				-123,
				9
			],
			[
				-113,
				11
			],
			[
				-85,
				-25
			],
			[
				-262,
				-11
			],
			[
				15,
				36
			],
			[
				41,
				8
			],
			[
				37,
				40
			],
			[
				-8,
				15
			],
			[
				-29,
				35
			],
			[
				6,
				93
			],
			[
				-25,
				85
			],
			[
				-38,
				44
			],
			[
				85,
				73
			],
			[
				6,
				4
			],
			[
				57,
				48
			],
			[
				94,
				97
			],
			[
				142,
				-66
			],
			[
				170,
				64
			],
			[
				10,
				-49
			],
			[
				11,
				-52
			],
			[
				13,
				-63
			],
			[
				0,
				-3
			],
			[
				1,
				-145
			],
			[
				30,
				-2
			],
			[
				34,
				103
			],
			[
				-45,
				215
			],
			[
				114,
				13
			],
			[
				90,
				9
			],
			[
				133,
				50
			],
			[
				8,
				-208
			],
			[
				64,
				-15
			],
			[
				41,
				-10
			],
			[
				16,
				-43
			],
			[
				-26,
				-63
			],
			[
				-10,
				-86
			],
			[
				38,
				-42
			],
			[
				14,
				5
			],
			[
				-3,
				74
			],
			[
				31,
				28
			],
			[
				-2,
				99
			],
			[
				24,
				32
			],
			[
				-8,
				92
			],
			[
				-59,
				31
			],
			[
				35,
				79
			],
			[
				30,
				67
			],
			[
				50,
				2
			],
			[
				24,
				-166
			],
			[
				50,
				-32
			],
			[
				-32,
				212
			],
			[
				65,
				30
			]
		],
		[
			[
				4519,
				31765
			],
			[
				50,
				-23
			],
			[
				57,
				20
			],
			[
				125,
				-136
			],
			[
				-3,
				-100
			],
			[
				-42,
				-32
			],
			[
				-170,
				104
			],
			[
				-65,
				130
			],
			[
				48,
				37
			]
		],
		[
			[
				4694,
				32037
			],
			[
				85,
				-115
			],
			[
				33,
				16
			],
			[
				33,
				-89
			],
			[
				68,
				-80
			],
			[
				0,
				-25
			],
			[
				-1,
				-41
			],
			[
				-54,
				-7
			],
			[
				-130,
				142
			],
			[
				-54,
				26
			],
			[
				-50,
				8
			],
			[
				-53,
				82
			],
			[
				31,
				119
			],
			[
				92,
				-36
			]
		],
		[
			[
				4782,
				32137
			],
			[
				108,
				-46
			],
			[
				27,
				19
			],
			[
				161,
				-78
			],
			[
				60,
				-72
			],
			[
				-5,
				-53
			],
			[
				-37,
				-58
			],
			[
				-43,
				-2
			],
			[
				-126,
				72
			],
			[
				-54,
				63
			],
			[
				4,
				31
			],
			[
				-76,
				50
			],
			[
				-25,
				1
			],
			[
				6,
				73
			]
		],
		[
			[
				5332,
				32262
			],
			[
				42,
				-14
			],
			[
				14,
				-72
			],
			[
				-18,
				-53
			],
			[
				-60,
				-30
			],
			[
				-81,
				17
			],
			[
				-52,
				56
			],
			[
				-83,
				11
			],
			[
				-56,
				35
			],
			[
				57,
				21
			],
			[
				61,
				-13
			],
			[
				72,
				36
			],
			[
				104,
				6
			]
		],
		[
			[
				5469,
				32358
			],
			[
				-9,
				-6
			],
			[
				-39,
				1
			],
			[
				-42,
				66
			],
			[
				-18,
				74
			],
			[
				66,
				29
			],
			[
				7,
				3
			],
			[
				2,
				34
			],
			[
				0,
				10
			],
			[
				-47,
				13
			],
			[
				-67,
				32
			],
			[
				34,
				42
			],
			[
				78,
				50
			],
			[
				-11,
				32
			],
			[
				40,
				36
			],
			[
				27,
				-2
			],
			[
				19,
				-1
			],
			[
				8,
				-22
			],
			[
				-1,
				-33
			],
			[
				-13,
				-81
			],
			[
				41,
				-92
			],
			[
				16,
				-9
			],
			[
				-65,
				-157
			],
			[
				-26,
				-19
			]
		],
		[
			[
				4576,
				30533
			],
			[
				-54,
				-17
			],
			[
				-40,
				3
			],
			[
				-70,
				-15
			],
			[
				-40,
				-1
			],
			[
				-27,
				23
			],
			[
				13,
				84
			],
			[
				42,
				15
			],
			[
				33,
				-11
			],
			[
				4,
				-31
			],
			[
				64,
				-15
			],
			[
				18,
				-4
			],
			[
				36,
				3
			],
			[
				48,
				-2
			],
			[
				-11,
				-14
			],
			[
				-16,
				-18
			]
		],
		[
			[
				4881,
				30679
			],
			[
				-8,
				-32
			],
			[
				-22,
				-9
			],
			[
				-32,
				14
			],
			[
				-68,
				-21
			],
			[
				-120,
				-37
			],
			[
				10,
				26
			],
			[
				-169,
				-12
			],
			[
				-16,
				28
			],
			[
				22,
				16
			],
			[
				72,
				16
			],
			[
				76,
				16
			],
			[
				22,
				5
			],
			[
				195,
				9
			],
			[
				38,
				-19
			]
		],
		[
			[
				5111,
				30864
			],
			[
				35,
				1
			],
			[
				54,
				14
			],
			[
				241,
				67
			],
			[
				16,
				-32
			],
			[
				-29,
				-39
			],
			[
				-94,
				-28
			],
			[
				-64,
				-33
			],
			[
				-51,
				-48
			],
			[
				-29,
				34
			],
			[
				-55,
				-12
			],
			[
				-214,
				-46
			],
			[
				-158,
				44
			],
			[
				-112,
				-34
			],
			[
				-21,
				-3
			],
			[
				-18,
				-2
			],
			[
				-24,
				9
			],
			[
				11,
				16
			],
			[
				32,
				46
			],
			[
				154,
				27
			],
			[
				21,
				67
			],
			[
				223,
				21
			],
			[
				7,
				-39
			],
			[
				34,
				-31
			],
			[
				41,
				1
			]
		],
		[
			[
				5105,
				30379
			],
			[
				-47,
				-10
			],
			[
				-39,
				0
			],
			[
				-13,
				20
			],
			[
				-24,
				33
			],
			[
				-58,
				36
			],
			[
				68,
				7
			],
			[
				84,
				-28
			],
			[
				15,
				-9
			],
			[
				9,
				-22
			],
			[
				5,
				-27
			]
		],
		[
			[
				5866,
				30883
			],
			[
				-71,
				-19
			],
			[
				-42,
				16
			],
			[
				-2,
				27
			],
			[
				29,
				8
			],
			[
				44,
				1
			],
			[
				22,
				-5
			],
			[
				21,
				-6
			],
			[
				3,
				-11
			],
			[
				-4,
				-11
			]
		],
		[
			[
				22943,
				29666
			],
			[
				7,
				-20
			],
			[
				3,
				-11
			],
			[
				15,
				-46
			],
			[
				31,
				-102
			],
			[
				16,
				-51
			],
			[
				63,
				-202
			],
			[
				-29,
				-219
			],
			[
				-13,
				-91
			],
			[
				-23,
				-174
			],
			[
				0,
				-1
			],
			[
				-20,
				-163
			],
			[
				-1,
				-12
			],
			[
				-11,
				-92
			],
			[
				-12,
				-93
			],
			[
				-6,
				-50
			],
			[
				0,
				0
			],
			[
				0,
				-3
			],
			[
				-8,
				-56
			],
			[
				-41,
				-277
			],
			[
				-1,
				-3
			],
			[
				-9,
				-70
			],
			[
				-12,
				-92
			],
			[
				0,
				0
			],
			[
				-16,
				-133
			],
			[
				-1,
				-1
			],
			[
				-22,
				-173
			],
			[
				-12,
				-96
			],
			[
				-10,
				-80
			],
			[
				-11,
				-89
			],
			[
				-28,
				-217
			],
			[
				-10,
				-83
			],
			[
				-22,
				-170
			],
			[
				0,
				0
			],
			[
				-2,
				-17
			],
			[
				-1,
				-5
			],
			[
				-11,
				-85
			],
			[
				-13,
				-105
			],
			[
				-4,
				-30
			],
			[
				-2,
				-19
			],
			[
				-1,
				0
			],
			[
				-15,
				-118
			],
			[
				-11,
				-80
			],
			[
				-7,
				-52
			],
			[
				-10,
				-80
			],
			[
				-15,
				-115
			],
			[
				-6,
				-44
			],
			[
				0,
				0
			],
			[
				-8,
				-56
			],
			[
				-23,
				-167
			],
			[
				-6,
				-39
			],
			[
				-14,
				-108
			],
			[
				-20,
				-144
			],
			[
				58,
				-80
			],
			[
				64,
				-86
			],
			[
				10,
				-15
			],
			[
				37,
				-51
			],
			[
				83,
				-112
			],
			[
				0,
				0
			],
			[
				76,
				-105
			],
			[
				0,
				0
			],
			[
				88,
				-120
			]
		],
		[
			[
				23007,
				24963
			],
			[
				118,
				-104
			],
			[
				33,
				-29
			],
			[
				46,
				-41
			],
			[
				67,
				-99
			],
			[
				53,
				-79
			],
			[
				37,
				-55
			],
			[
				6,
				-8
			],
			[
				74,
				-111
			],
			[
				0,
				0
			],
			[
				23,
				8
			],
			[
				58,
				20
			],
			[
				40,
				2
			],
			[
				90,
				2
			],
			[
				7,
				1
			],
			[
				0,
				0
			],
			[
				34,
				1
			],
			[
				1,
				0
			],
			[
				92,
				2
			],
			[
				14,
				1
			],
			[
				92,
				2
			],
			[
				97,
				-152
			],
			[
				32,
				-51
			],
			[
				28,
				-43
			],
			[
				100,
				-160
			],
			[
				80,
				-126
			],
			[
				85,
				-134
			],
			[
				41,
				-65
			],
			[
				2,
				-3
			],
			[
				15,
				-23
			],
			[
				47,
				-73
			],
			[
				37,
				-57
			],
			[
				42,
				-66
			],
			[
				0,
				0
			],
			[
				40,
				-64
			],
			[
				65,
				-101
			],
			[
				26,
				-44
			],
			[
				32,
				-52
			],
			[
				57,
				-94
			],
			[
				16,
				-27
			],
			[
				67,
				-110
			],
			[
				-31,
				-191
			],
			[
				-12,
				-76
			],
			[
				-10,
				-62
			],
			[
				-14,
				-81
			],
			[
				-11,
				-64
			],
			[
				0,
				0
			],
			[
				-23,
				-134
			],
			[
				-1,
				-2
			],
			[
				-2,
				-12
			],
			[
				-3,
				-18
			],
			[
				-4,
				-22
			],
			[
				0,
				-5
			],
			[
				-31,
				-96
			],
			[
				0,
				0
			],
			[
				-6,
				-20
			],
			[
				-44,
				-142
			],
			[
				-51,
				-160
			],
			[
				-23,
				-35
			],
			[
				-41,
				-59
			],
			[
				-51,
				-74
			],
			[
				-1,
				-2
			],
			[
				-34,
				-49
			],
			[
				-53,
				-78
			],
			[
				-48,
				-69
			],
			[
				-5,
				-40
			],
			[
				-13,
				-99
			],
			[
				-19,
				-146
			],
			[
				-22,
				-169
			],
			[
				-8,
				-60
			],
			[
				-6,
				-45
			],
			[
				-4,
				-11
			],
			[
				-19,
				-13
			],
			[
				-12,
				-8
			],
			[
				-2,
				-2
			],
			[
				-6,
				-8
			],
			[
				-33,
				-16
			],
			[
				-18,
				-4
			],
			[
				-64,
				-19
			],
			[
				-54,
				-17
			],
			[
				0,
				0
			],
			[
				-24,
				-2
			],
			[
				-7,
				0
			],
			[
				-1,
				0
			],
			[
				-2,
				0
			],
			[
				0,
				0
			],
			[
				-7,
				2
			],
			[
				-3,
				1
			],
			[
				-2,
				0
			],
			[
				-1,
				0
			],
			[
				0,
				0
			],
			[
				-1,
				0
			],
			[
				-125,
				12
			],
			[
				-43,
				4
			],
			[
				-52,
				5
			],
			[
				-108,
				11
			],
			[
				-56,
				-3
			],
			[
				-65,
				-3
			],
			[
				-73,
				-25
			],
			[
				-78,
				-27
			],
			[
				-4,
				-2
			],
			[
				-51,
				-17
			],
			[
				0,
				0
			],
			[
				-5,
				-2
			],
			[
				-29,
				-10
			],
			[
				-78,
				-28
			],
			[
				-58,
				-20
			],
			[
				-27,
				-10
			],
			[
				-58,
				-20
			],
			[
				-64,
				-20
			],
			[
				-56,
				-17
			],
			[
				-23,
				-7
			],
			[
				0,
				0
			],
			[
				-22,
				-12
			],
			[
				-48,
				-40
			]
		],
		[
			[
				7671,
				997
			],
			[
				-2,
				28
			],
			[
				0,
				14
			],
			[
				-4,
				53
			],
			[
				-26,
				15
			],
			[
				7,
				-109
			],
			[
				-4,
				-59
			],
			[
				-16,
				2
			],
			[
				-18,
				-18
			],
			[
				-27,
				-41
			],
			[
				-30,
				-70
			],
			[
				14,
				-58
			],
			[
				-15,
				-61
			]
		],
		[
			[
				7497,
				671
			],
			[
				-14,
				1
			],
			[
				-37,
				51
			],
			[
				-29,
				11
			],
			[
				9,
				-88
			],
			[
				-29,
				-6
			],
			[
				2,
				36
			],
			[
				-14,
				16
			],
			[
				-16,
				-69
			],
			[
				-32,
				-45
			],
			[
				-26,
				-8
			],
			[
				-19,
				4
			],
			[
				-39,
				-8
			],
			[
				-26,
				-63
			],
			[
				-76,
				-91
			],
			[
				-99,
				-39
			],
			[
				-12,
				82
			],
			[
				-6,
				44
			],
			[
				21,
				14
			],
			[
				61,
				40
			],
			[
				20,
				28
			],
			[
				4,
				63
			],
			[
				-20,
				44
			],
			[
				25,
				63
			],
			[
				56,
				85
			],
			[
				79,
				119
			],
			[
				7,
				37
			],
			[
				-8,
				7
			],
			[
				-19,
				16
			],
			[
				-24,
				-6
			],
			[
				0,
				-1
			],
			[
				-1,
				-37
			],
			[
				-45,
				-42
			],
			[
				-20,
				-76
			],
			[
				-36,
				-56
			],
			[
				-37,
				-84
			],
			[
				-32,
				-51
			],
			[
				0,
				0
			]
		],
		[
			[
				7065,
				662
			],
			[
				-4,
				-7
			],
			[
				-41,
				1
			],
			[
				12,
				-97
			],
			[
				-50,
				-45
			],
			[
				-63,
				6
			],
			[
				-13,
				75
			],
			[
				54,
				50
			],
			[
				-47,
				46
			],
			[
				75,
				47
			],
			[
				-85,
				0
			],
			[
				7,
				43
			],
			[
				28,
				18
			],
			[
				7,
				55
			],
			[
				-55,
				-34
			],
			[
				-32,
				-150
			],
			[
				-76,
				-10
			],
			[
				3,
				24
			],
			[
				44,
				15
			],
			[
				6,
				52
			],
			[
				-41,
				6
			],
			[
				10,
				-30
			],
			[
				-90,
				9
			],
			[
				-155,
				64
			],
			[
				-8,
				48
			],
			[
				-1,
				2
			],
			[
				121,
				54
			],
			[
				0,
				31
			],
			[
				135,
				103
			],
			[
				77,
				-8
			],
			[
				31,
				-10
			]
		],
		[
			[
				6914,
				1020
			],
			[
				0,
				0
			],
			[
				36,
				-11
			],
			[
				12,
				-54
			],
			[
				36,
				45
			],
			[
				32,
				15
			],
			[
				58,
				-9
			],
			[
				34,
				29
			],
			[
				83,
				35
			],
			[
				4,
				2
			],
			[
				-21,
				55
			],
			[
				61,
				2
			],
			[
				-47,
				43
			],
			[
				-9,
				7
			],
			[
				-129,
				-101
			],
			[
				-73,
				-24
			],
			[
				-85,
				11
			],
			[
				-52,
				24
			],
			[
				-84,
				38
			],
			[
				-3,
				49
			],
			[
				-67,
				25
			],
			[
				0,
				0
			]
		],
		[
			[
				6700,
				1201
			],
			[
				-23,
				8
			],
			[
				-4,
				2
			],
			[
				-66,
				147
			],
			[
				99,
				107
			],
			[
				-18,
				22
			],
			[
				-119,
				-102
			],
			[
				-15,
				65
			],
			[
				-75,
				-24
			],
			[
				62,
				-111
			],
			[
				-29,
				-69
			],
			[
				119,
				-70
			],
			[
				73,
				-87
			],
			[
				-46,
				-112
			],
			[
				-35,
				13
			],
			[
				-39,
				-63
			],
			[
				-52,
				-12
			],
			[
				-22,
				23
			],
			[
				-78,
				-65
			],
			[
				-54,
				42
			],
			[
				-23,
				18
			],
			[
				8,
				57
			],
			[
				-20,
				93
			],
			[
				32,
				96
			],
			[
				-12,
				83
			],
			[
				-22,
				81
			],
			[
				25,
				126
			],
			[
				-23,
				26
			],
			[
				-39,
				-68
			],
			[
				13,
				-277
			],
			[
				-36,
				-27
			],
			[
				-16,
				-45
			],
			[
				44,
				-20
			],
			[
				14,
				-74
			],
			[
				-9,
				-48
			],
			[
				2,
				-51
			],
			[
				28,
				15
			],
			[
				31,
				-23
			],
			[
				3,
				-3
			],
			[
				0,
				-18
			],
			[
				0,
				-9
			],
			[
				39,
				-3
			],
			[
				37,
				-4
			],
			[
				1,
				0
			],
			[
				60,
				-6
			],
			[
				1,
				-3
			],
			[
				3,
				-32
			],
			[
				-49,
				-38
			],
			[
				-58,
				-45
			],
			[
				36,
				11
			],
			[
				86,
				25
			],
			[
				18,
				-6
			],
			[
				8,
				-43
			],
			[
				1,
				-80
			],
			[
				-43,
				-16
			],
			[
				-22,
				24
			],
			[
				-16,
				-14
			],
			[
				4,
				-57
			],
			[
				-21,
				-3
			],
			[
				-13,
				25
			],
			[
				-8,
				48
			],
			[
				-18,
				26
			],
			[
				-12,
				19
			],
			[
				-14,
				-21
			],
			[
				-2,
				-7
			],
			[
				-7,
				-25
			],
			[
				-10,
				0
			],
			[
				-62,
				0
			],
			[
				-71,
				28
			],
			[
				-62,
				-17
			],
			[
				-47,
				12
			],
			[
				-23,
				34
			],
			[
				-33,
				20
			],
			[
				-26,
				-6
			],
			[
				-34,
				-63
			],
			[
				-42,
				25
			],
			[
				-20,
				41
			],
			[
				12,
				33
			],
			[
				-21,
				53
			],
			[
				-32,
				6
			],
			[
				-29,
				-31
			],
			[
				-122,
				189
			],
			[
				-10,
				45
			],
			[
				98,
				42
			],
			[
				36,
				43
			],
			[
				14,
				53
			],
			[
				26,
				78
			],
			[
				10,
				28
			],
			[
				22,
				25
			],
			[
				-5,
				58
			],
			[
				8,
				74
			],
			[
				69,
				13
			],
			[
				44,
				-23
			],
			[
				103,
				7
			],
			[
				-65,
				97
			],
			[
				79,
				74
			],
			[
				59,
				24
			],
			[
				69,
				57
			],
			[
				20,
				57
			],
			[
				43,
				23
			]
		],
		[
			[
				6387,
				1721
			],
			[
				0,
				0
			],
			[
				9,
				4
			],
			[
				13,
				38
			],
			[
				122,
				76
			],
			[
				60,
				46
			],
			[
				59,
				52
			],
			[
				83,
				73
			],
			[
				-13,
				24
			],
			[
				-31,
				-14
			],
			[
				-78,
				-34
			],
			[
				-64,
				-28
			],
			[
				-5,
				-35
			],
			[
				-54,
				-24
			],
			[
				-56,
				-50
			],
			[
				-58,
				-67
			],
			[
				-60,
				-24
			],
			[
				-17,
				-47
			],
			[
				-19,
				-15
			],
			[
				0,
				0
			]
		],
		[
			[
				6278,
				1696
			],
			[
				-23,
				-18
			],
			[
				-24,
				14
			],
			[
				-53,
				154
			],
			[
				-18,
				52
			],
			[
				-13,
				74
			],
			[
				-17,
				-3
			],
			[
				-16,
				-40
			],
			[
				-26,
				34
			],
			[
				-12,
				26
			],
			[
				4,
				36
			],
			[
				20,
				30
			],
			[
				6,
				8
			],
			[
				9,
				32
			],
			[
				-29,
				39
			],
			[
				1,
				52
			],
			[
				-46,
				2
			],
			[
				8,
				-71
			],
			[
				-4,
				-88
			],
			[
				0,
				0
			],
			[
				-15,
				-5
			],
			[
				8,
				-39
			],
			[
				29,
				-56
			],
			[
				33,
				-112
			],
			[
				-52,
				-19
			],
			[
				-60,
				23
			],
			[
				-3,
				0
			],
			[
				-306,
				52
			],
			[
				-4,
				10
			],
			[
				-22,
				56
			],
			[
				-75,
				-32
			],
			[
				-48,
				10
			],
			[
				-46,
				85
			],
			[
				-7,
				13
			],
			[
				-9,
				-45
			],
			[
				-49,
				-5
			],
			[
				-3,
				25
			],
			[
				-88,
				11
			],
			[
				-82,
				45
			],
			[
				142,
				84
			],
			[
				-13,
				19
			],
			[
				0,
				0
			]
		],
		[
			[
				7176,
				269
			],
			[
				-34,
				-2
			],
			[
				-23,
				9
			],
			[
				-9,
				5
			],
			[
				-3,
				47
			],
			[
				1,
				14
			],
			[
				1,
				11
			],
			[
				1,
				2
			],
			[
				22,
				20
			],
			[
				2,
				1
			],
			[
				27,
				8
			],
			[
				13,
				-31
			],
			[
				6,
				-60
			]
		],
		[
			[
				6146,
				1653
			],
			[
				-75,
				-127
			],
			[
				-25,
				43
			],
			[
				13,
				42
			],
			[
				-5,
				93
			],
			[
				17,
				40
			],
			[
				45,
				25
			],
			[
				29,
				-60
			],
			[
				1,
				-56
			]
		],
		[
			[
				5931,
				1791
			],
			[
				46,
				-51
			],
			[
				28,
				-72
			],
			[
				-5,
				-30
			],
			[
				-9,
				-16
			],
			[
				-3,
				-106
			],
			[
				-24,
				-4
			],
			[
				-15,
				42
			],
			[
				-28,
				-28
			],
			[
				-76,
				44
			],
			[
				-53,
				180
			],
			[
				-32,
				-2
			],
			[
				28,
				-101
			],
			[
				-21,
				-17
			],
			[
				-39,
				-11
			],
			[
				-30,
				34
			],
			[
				-9,
				96
			],
			[
				-28,
				33
			],
			[
				15,
				61
			],
			[
				38,
				-14
			],
			[
				57,
				-16
			],
			[
				159,
				-22
			],
			[
				1,
				0
			]
		],
		[
			[
				6867,
				569
			],
			[
				-29,
				-4
			],
			[
				-36,
				18
			],
			[
				-7,
				25
			],
			[
				18,
				15
			],
			[
				33,
				14
			],
			[
				36,
				-21
			],
			[
				-1,
				-34
			],
			[
				-14,
				-13
			]
		],
		[
			[
				6748,
				592
			],
			[
				-18,
				-16
			],
			[
				-26,
				16
			],
			[
				2,
				54
			],
			[
				-75,
				49
			],
			[
				11,
				30
			],
			[
				42,
				-6
			],
			[
				74,
				-25
			],
			[
				-10,
				-102
			]
		],
		[
			[
				23445,
				47214
			],
			[
				-91,
				113
			],
			[
				-221,
				95
			],
			[
				-45,
				53
			],
			[
				-150,
				25
			],
			[
				-12,
				-27
			],
			[
				-100,
				0
			],
			[
				-50,
				20
			],
			[
				-23,
				38
			],
			[
				-10,
				15
			],
			[
				-99,
				73
			],
			[
				-117,
				20
			],
			[
				-83,
				-31
			],
			[
				-69,
				-3
			],
			[
				-10,
				13
			],
			[
				-18,
				20
			],
			[
				-95,
				-61
			],
			[
				1,
				-2
			],
			[
				6,
				-14
			],
			[
				6,
				-17
			],
			[
				-43,
				-48
			],
			[
				-11,
				-13
			],
			[
				-11,
				-13
			],
			[
				-5,
				6
			],
			[
				-14,
				16
			],
			[
				-86,
				-16
			],
			[
				-41,
				-26
			],
			[
				-14,
				51
			],
			[
				-2,
				6
			],
			[
				-5,
				-6
			],
			[
				-65,
				-96
			],
			[
				-61,
				-48
			],
			[
				-138,
				-67
			],
			[
				-196,
				-100
			],
			[
				-203,
				-113
			],
			[
				-132,
				-74
			],
			[
				-225,
				-79
			],
			[
				24,
				-46
			],
			[
				103,
				16
			],
			[
				-39,
				-136
			],
			[
				-5,
				-20
			],
			[
				-57,
				-54
			],
			[
				-31,
				-29
			],
			[
				0,
				-1
			],
			[
				-108,
				-19
			],
			[
				-30,
				-6
			],
			[
				-47,
				-64
			],
			[
				-90,
				21
			],
			[
				-6,
				2
			],
			[
				-8,
				-14
			],
			[
				-22,
				-40
			],
			[
				-148,
				-1
			],
			[
				6,
				-28
			],
			[
				18,
				-79
			],
			[
				-17,
				-47
			],
			[
				-83,
				-56
			],
			[
				-130,
				-175
			],
			[
				-112,
				-42
			],
			[
				-70,
				-4
			],
			[
				-131,
				-63
			],
			[
				-113,
				-55
			],
			[
				-98,
				-5
			],
			[
				33,
				50
			],
			[
				-13,
				11
			],
			[
				-46,
				-35
			],
			[
				-19,
				28
			],
			[
				-8,
				15
			],
			[
				-29,
				49
			],
			[
				41,
				16
			],
			[
				61,
				19
			],
			[
				63,
				21
			],
			[
				39,
				14
			],
			[
				28,
				-18
			],
			[
				43,
				-28
			],
			[
				38,
				41
			],
			[
				41,
				45
			],
			[
				98,
				9
			],
			[
				9,
				1
			],
			[
				68,
				76
			],
			[
				24,
				40
			],
			[
				123,
				153
			],
			[
				45,
				14
			],
			[
				20,
				7
			],
			[
				29,
				31
			],
			[
				-9,
				35
			],
			[
				-75,
				-31
			],
			[
				-22,
				-23
			],
			[
				-114,
				-19
			],
			[
				-96,
				7
			],
			[
				-92,
				50
			],
			[
				46,
				60
			],
			[
				6,
				7
			],
			[
				-10,
				-3
			],
			[
				-89,
				-29
			],
			[
				-12,
				-60
			],
			[
				-143,
				-5
			],
			[
				63,
				114
			],
			[
				-33,
				16
			],
			[
				23,
				44
			],
			[
				138,
				39
			],
			[
				-108,
				15
			],
			[
				14,
				21
			],
			[
				8,
				12
			],
			[
				168,
				57
			],
			[
				166,
				57
			],
			[
				59,
				20
			],
			[
				97,
				-2
			],
			[
				251,
				-6
			],
			[
				21,
				33
			],
			[
				109,
				22
			],
			[
				18,
				-27
			],
			[
				90,
				71
			],
			[
				8,
				4
			],
			[
				52,
				31
			],
			[
				63,
				15
			],
			[
				66,
				16
			],
			[
				116,
				103
			],
			[
				-54,
				16
			],
			[
				-2,
				1
			],
			[
				-3,
				1
			],
			[
				-1,
				-1
			],
			[
				-141,
				-74
			],
			[
				-146,
				-70
			],
			[
				-86,
				-42
			],
			[
				-88,
				-8
			],
			[
				-66,
				-7
			],
			[
				-72,
				-14
			],
			[
				-94,
				-20
			],
			[
				-28,
				8
			],
			[
				-101,
				1
			],
			[
				-385,
				-128
			],
			[
				-6,
				30
			],
			[
				-11,
				58
			],
			[
				70,
				75
			],
			[
				80,
				85
			],
			[
				80,
				27
			],
			[
				1,
				56
			],
			[
				190,
				140
			],
			[
				125,
				92
			],
			[
				20,
				-61
			],
			[
				45,
				-14
			],
			[
				44,
				-65
			],
			[
				33,
				-49
			],
			[
				102,
				-148
			],
			[
				89,
				42
			],
			[
				-34,
				41
			],
			[
				78,
				89
			],
			[
				34,
				82
			],
			[
				-82,
				-46
			],
			[
				-88,
				-109
			],
			[
				-66,
				67
			],
			[
				7,
				30
			],
			[
				-25,
				46
			],
			[
				-17,
				-10
			],
			[
				-98,
				100
			],
			[
				98,
				87
			],
			[
				12,
				11
			],
			[
				163,
				51
			],
			[
				21,
				-75
			],
			[
				8,
				-26
			],
			[
				10,
				25
			],
			[
				38,
				96
			],
			[
				44,
				7
			],
			[
				74,
				-104
			],
			[
				-1,
				-13
			],
			[
				-3,
				-75
			],
			[
				83,
				7
			],
			[
				-17,
				71
			],
			[
				-107,
				142
			],
			[
				120,
				22
			],
			[
				59,
				-46
			],
			[
				-53,
				-65
			],
			[
				34,
				-23
			],
			[
				55,
				36
			],
			[
				123,
				-5
			],
			[
				22,
				93
			],
			[
				75,
				32
			],
			[
				42,
				41
			],
			[
				37,
				35
			],
			[
				-63,
				7
			],
			[
				-49,
				6
			],
			[
				-84,
				4
			],
			[
				4,
				-73
			],
			[
				-41,
				-14
			],
			[
				-19,
				62
			],
			[
				-49,
				13
			],
			[
				-129,
				-15
			],
			[
				-63,
				-32
			],
			[
				-6,
				-3
			],
			[
				-84,
				9
			],
			[
				66,
				120
			],
			[
				80,
				67
			],
			[
				21,
				6
			],
			[
				85,
				24
			],
			[
				-20,
				-68
			],
			[
				48,
				9
			],
			[
				45,
				101
			],
			[
				39,
				6
			],
			[
				7,
				1
			],
			[
				43,
				-68
			],
			[
				2,
				-10
			],
			[
				5,
				-32
			],
			[
				56,
				-26
			],
			[
				42,
				44
			],
			[
				37,
				-2
			],
			[
				-12,
				-64
			],
			[
				73,
				8
			],
			[
				-12,
				96
			],
			[
				53,
				72
			],
			[
				83,
				9
			],
			[
				274,
				252
			],
			[
				72,
				10
			],
			[
				-9,
				77
			],
			[
				0,
				0
			]
		],
		[
			[
				22102,
				48323
			],
			[
				-43,
				-40
			],
			[
				64,
				-4
			],
			[
				119,
				-8
			],
			[
				72,
				-6
			],
			[
				5,
				0
			]
		],
		[
			[
				22733,
				47842
			],
			[
				-15,
				-65
			],
			[
				-11,
				-46
			],
			[
				5,
				4
			],
			[
				35,
				25
			]
		],
		[
			[
				20770,
				46072
			],
			[
				0,
				0
			],
			[
				-7,
				31
			],
			[
				-8,
				36
			],
			[
				58,
				34
			],
			[
				57,
				-45
			],
			[
				43,
				-35
			],
			[
				60,
				-8
			],
			[
				101,
				84
			],
			[
				-29,
				51
			],
			[
				-127,
				-45
			],
			[
				-12,
				8
			],
			[
				-41,
				30
			],
			[
				22,
				44
			],
			[
				84,
				31
			],
			[
				69,
				-24
			],
			[
				20,
				-7
			],
			[
				70,
				51
			],
			[
				33,
				-37
			],
			[
				132,
				31
			],
			[
				0,
				64
			],
			[
				47,
				6
			],
			[
				51,
				-83
			],
			[
				165,
				8
			],
			[
				167,
				155
			],
			[
				-206,
				57
			],
			[
				-2,
				-64
			],
			[
				-121,
				-9
			],
			[
				-15,
				36
			],
			[
				55,
				37
			],
			[
				-29,
				28
			],
			[
				-127,
				-32
			],
			[
				-78,
				103
			],
			[
				-106,
				-40
			],
			[
				-36,
				18
			],
			[
				-2,
				1
			],
			[
				1,
				19
			],
			[
				40,
				16
			],
			[
				140,
				40
			],
			[
				330,
				73
			],
			[
				-74,
				26
			],
			[
				106,
				113
			],
			[
				-29,
				46
			],
			[
				-126,
				-143
			],
			[
				-111,
				-39
			],
			[
				-161,
				-13
			],
			[
				-35,
				-3
			],
			[
				5,
				17
			],
			[
				45,
				151
			],
			[
				49,
				25
			],
			[
				62,
				1
			],
			[
				-57,
				42
			],
			[
				228,
				110
			],
			[
				31,
				15
			],
			[
				58,
				28
			],
			[
				309,
				148
			],
			[
				30,
				14
			],
			[
				135,
				117
			],
			[
				174,
				-34
			],
			[
				33,
				-6
			],
			[
				55,
				68
			],
			[
				-2,
				22
			],
			[
				-1,
				21
			],
			[
				77,
				22
			],
			[
				28,
				58
			],
			[
				70,
				-13
			],
			[
				29,
				46
			],
			[
				100,
				7
			],
			[
				17,
				1
			],
			[
				94,
				-51
			],
			[
				32,
				-62
			],
			[
				12,
				-22
			],
			[
				-68,
				-64
			],
			[
				95,
				2
			],
			[
				65,
				27
			],
			[
				62,
				5
			],
			[
				17,
				-29
			],
			[
				120,
				1
			],
			[
				16,
				-32
			],
			[
				4,
				-8
			],
			[
				88,
				-23
			]
		],
		[
			[
				21939,
				48299
			],
			[
				-222,
				-202
			],
			[
				-113,
				-63
			],
			[
				-93,
				-86
			],
			[
				-60,
				-25
			],
			[
				-30,
				-13
			],
			[
				-34,
				88
			],
			[
				29,
				85
			],
			[
				7,
				22
			],
			[
				0,
				0
			]
		],
		[
			[
				21423,
				48105
			],
			[
				10,
				28
			],
			[
				12,
				19
			],
			[
				114,
				176
			],
			[
				87,
				71
			],
			[
				34,
				29
			],
			[
				-62,
				-6
			],
			[
				122,
				201
			],
			[
				130,
				90
			],
			[
				4,
				11
			],
			[
				18,
				49
			],
			[
				116,
				83
			]
		],
		[
			[
				20745,
				46445
			],
			[
				-18,
				-4
			],
			[
				-34,
				3
			],
			[
				-29,
				8
			],
			[
				-22,
				6
			],
			[
				-4,
				19
			],
			[
				58,
				35
			],
			[
				90,
				4
			],
			[
				9,
				-36
			],
			[
				-50,
				-35
			]
		],
		[
			[
				21523,
				46332
			],
			[
				-44,
				-7
			],
			[
				-68,
				20
			],
			[
				-22,
				35
			],
			[
				1,
				18
			],
			[
				26,
				8
			],
			[
				22,
				5
			],
			[
				28,
				-8
			],
			[
				19,
				-6
			],
			[
				75,
				-52
			],
			[
				-37,
				-13
			]
		],
		[
			[
				19699,
				45934
			],
			[
				-19,
				-3
			],
			[
				-22,
				18
			],
			[
				-11,
				37
			],
			[
				-14,
				2
			],
			[
				-57,
				20
			],
			[
				14,
				21
			],
			[
				13,
				11
			],
			[
				57,
				30
			],
			[
				39,
				6
			],
			[
				38,
				-45
			],
			[
				0,
				-7
			],
			[
				2,
				-29
			],
			[
				-1,
				-23
			],
			[
				-11,
				-23
			],
			[
				-28,
				-15
			]
		],
		[
			[
				19542,
				46049
			],
			[
				-23,
				-13
			],
			[
				7,
				71
			],
			[
				44,
				36
			],
			[
				113,
				-25
			],
			[
				-141,
				-69
			]
		],
		[
			[
				20041,
				46480
			],
			[
				29,
				-14
			],
			[
				55,
				10
			],
			[
				-31,
				-63
			],
			[
				-62,
				-42
			],
			[
				-83,
				-7
			],
			[
				-26,
				-2
			],
			[
				-39,
				21
			],
			[
				-5,
				38
			],
			[
				35,
				43
			],
			[
				87,
				16
			],
			[
				40,
				0
			]
		],
		[
			[
				19905,
				46715
			],
			[
				-214,
				-174
			],
			[
				-64,
				28
			],
			[
				145,
				134
			],
			[
				133,
				12
			]
		],
		[
			[
				19835,
				46743
			],
			[
				-50,
				-15
			],
			[
				-20,
				12
			],
			[
				58,
				52
			],
			[
				11,
				9
			],
			[
				23,
				21
			],
			[
				19,
				16
			],
			[
				61,
				7
			],
			[
				27,
				-39
			],
			[
				-25,
				-23
			],
			[
				-21,
				-20
			],
			[
				-48,
				-14
			],
			[
				-35,
				-6
			]
		],
		[
			[
				20562,
				47543
			],
			[
				-2,
				-45
			],
			[
				-52,
				-54
			],
			[
				-81,
				-31
			],
			[
				-67,
				2
			],
			[
				16,
				40
			],
			[
				-34,
				39
			],
			[
				38,
				35
			],
			[
				58,
				-10
			],
			[
				46,
				62
			],
			[
				52,
				-16
			],
			[
				26,
				-22
			]
		],
		[
			[
				20638,
				49210
			],
			[
				-95,
				-8
			],
			[
				-34,
				17
			],
			[
				49,
				57
			],
			[
				45,
				1
			],
			[
				29,
				-34
			],
			[
				6,
				-33
			]
		],
		[
			[
				19196,
				49193
			],
			[
				-111,
				-36
			],
			[
				-21,
				48
			],
			[
				105,
				53
			],
			[
				27,
				-65
			]
		],
		[
			[
				21183,
				48661
			],
			[
				55,
				-33
			],
			[
				57,
				7
			],
			[
				43,
				-87
			],
			[
				88,
				40
			],
			[
				74,
				73
			],
			[
				40,
				-23
			],
			[
				-24,
				-73
			],
			[
				-139,
				-126
			],
			[
				-53,
				-53
			],
			[
				-82,
				-23
			],
			[
				-81,
				-60
			],
			[
				-76,
				-42
			],
			[
				-110,
				-144
			],
			[
				-175,
				-14
			],
			[
				6,
				54
			],
			[
				-91,
				40
			],
			[
				77,
				119
			],
			[
				2,
				74
			],
			[
				-45,
				20
			],
			[
				59,
				59
			],
			[
				16,
				-19
			],
			[
				35,
				11
			],
			[
				24,
				35
			],
			[
				-18,
				35
			],
			[
				29,
				48
			],
			[
				117,
				6
			],
			[
				105,
				64
			],
			[
				67,
				12
			]
		],
		[
			[
				21209,
				48122
			],
			[
				-94,
				-12
			],
			[
				85,
				177
			],
			[
				99,
				8
			],
			[
				17,
				-33
			],
			[
				-53,
				-79
			],
			[
				-54,
				-61
			]
		],
		[
			[
				18157,
				46891
			],
			[
				-5,
				5
			],
			[
				-18,
				24
			],
			[
				-5,
				26
			],
			[
				29,
				18
			],
			[
				19,
				3
			],
			[
				31,
				4
			],
			[
				24,
				-3
			],
			[
				6,
				-10
			],
			[
				2,
				-11
			],
			[
				-1,
				-17
			],
			[
				-8,
				-20
			],
			[
				-9,
				-15
			],
			[
				-4,
				-8
			],
			[
				-23,
				-12
			],
			[
				-10,
				-1
			],
			[
				-24,
				12
			],
			[
				-4,
				5
			]
		],
		[
			[
				18368,
				46905
			],
			[
				19,
				38
			],
			[
				187,
				152
			],
			[
				-163,
				-81
			],
			[
				-12,
				42
			],
			[
				16,
				64
			],
			[
				64,
				-5
			],
			[
				52,
				51
			],
			[
				-8,
				20
			],
			[
				-93,
				-6
			],
			[
				-22,
				35
			],
			[
				147,
				63
			],
			[
				28,
				51
			],
			[
				88,
				11
			],
			[
				27,
				47
			],
			[
				53,
				37
			],
			[
				13,
				-35
			],
			[
				-35,
				-38
			],
			[
				51,
				-2
			],
			[
				59,
				29
			],
			[
				19,
				41
			],
			[
				86,
				26
			],
			[
				73,
				60
			],
			[
				42,
				-30
			],
			[
				68,
				28
			],
			[
				-15,
				42
			],
			[
				213,
				111
			],
			[
				32,
				15
			],
			[
				2,
				39
			],
			[
				-88,
				-26
			],
			[
				-43,
				40
			],
			[
				107,
				49
			],
			[
				158,
				-35
			],
			[
				22,
				-35
			],
			[
				124,
				-6
			],
			[
				2,
				-34
			],
			[
				-231,
				-96
			],
			[
				-67,
				-39
			],
			[
				15,
				-35
			],
			[
				-58,
				-88
			],
			[
				-6,
				-8
			],
			[
				-130,
				-74
			],
			[
				-147,
				-84
			],
			[
				-49,
				15
			],
			[
				-30,
				-39
			],
			[
				-49,
				-63
			],
			[
				-3,
				-55
			],
			[
				-106,
				-117
			],
			[
				-75,
				-35
			],
			[
				-23,
				-20
			],
			[
				-55,
				-46
			],
			[
				-90,
				-51
			],
			[
				-130,
				-13
			],
			[
				15,
				87
			],
			[
				-68,
				-23
			],
			[
				14,
				26
			]
		],
		[
			[
				18770,
				46930
			],
			[
				104,
				62
			],
			[
				58,
				89
			],
			[
				15,
				34
			],
			[
				18,
				42
			],
			[
				241,
				143
			],
			[
				103,
				61
			],
			[
				76,
				11
			],
			[
				79,
				80
			],
			[
				23,
				24
			],
			[
				9,
				61
			],
			[
				42,
				46
			],
			[
				69,
				10
			],
			[
				58,
				-65
			],
			[
				-29,
				-62
			],
			[
				193,
				-11
			],
			[
				-11,
				-58
			],
			[
				-72,
				-14
			],
			[
				-104,
				-20
			],
			[
				-45,
				-9
			],
			[
				-60,
				-62
			],
			[
				-79,
				-82
			],
			[
				-23,
				-54
			],
			[
				-35,
				-47
			],
			[
				-91,
				-32
			],
			[
				-47,
				21
			],
			[
				97,
				83
			],
			[
				-13,
				14
			],
			[
				-7,
				9
			],
			[
				-106,
				-37
			],
			[
				4,
				-29
			],
			[
				-88,
				-110
			],
			[
				-40,
				-25
			],
			[
				-90,
				-57
			],
			[
				-20,
				-13
			],
			[
				-51,
				-23
			],
			[
				-155,
				-131
			],
			[
				-62,
				-54
			],
			[
				-79,
				31
			],
			[
				35,
				95
			],
			[
				71,
				73
			],
			[
				12,
				6
			]
		],
		[
			[
				19107,
				46951
			],
			[
				7,
				10
			],
			[
				24,
				8
			],
			[
				11,
				0
			],
			[
				15,
				-5
			],
			[
				12,
				-8
			],
			[
				12,
				-10
			],
			[
				2,
				-17
			],
			[
				-51,
				-76
			],
			[
				-16,
				-23
			],
			[
				-12,
				17
			],
			[
				-14,
				28
			],
			[
				-9,
				37
			],
			[
				5,
				13
			],
			[
				4,
				14
			],
			[
				10,
				12
			]
		],
		[
			[
				19249,
				46960
			],
			[
				0,
				2
			],
			[
				35,
				41
			],
			[
				10,
				6
			],
			[
				15,
				5
			],
			[
				19,
				-7
			],
			[
				9,
				-31
			],
			[
				-5,
				-11
			],
			[
				-3,
				-8
			],
			[
				-21,
				-41
			],
			[
				-13,
				-21
			],
			[
				-10,
				-41
			],
			[
				-16,
				14
			],
			[
				-20,
				34
			],
			[
				-5,
				33
			],
			[
				5,
				25
			]
		],
		[
			[
				19405,
				46969
			],
			[
				46,
				70
			],
			[
				82,
				35
			],
			[
				-95,
				26
			],
			[
				38,
				51
			],
			[
				41,
				38
			],
			[
				1,
				1
			],
			[
				-2,
				7
			],
			[
				-7,
				29
			],
			[
				30,
				24
			],
			[
				86,
				69
			],
			[
				4,
				0
			],
			[
				22,
				5
			],
			[
				95,
				18
			],
			[
				106,
				20
			],
			[
				43,
				-83
			],
			[
				32,
				-102
			],
			[
				127,
				19
			],
			[
				15,
				-35
			],
			[
				-101,
				-159
			],
			[
				-68,
				-108
			],
			[
				-31,
				-6
			],
			[
				-13,
				-3
			],
			[
				-61,
				-58
			],
			[
				-187,
				-178
			],
			[
				-49,
				6
			],
			[
				34,
				62
			],
			[
				-41,
				47
			],
			[
				-75,
				-55
			],
			[
				-28,
				-47
			],
			[
				-36,
				7
			],
			[
				25,
				82
			],
			[
				31,
				10
			],
			[
				-49,
				75
			],
			[
				-37,
				-15
			],
			[
				-42,
				53
			],
			[
				64,
				95
			]
		],
		[
			[
				18889,
				46240
			],
			[
				-118,
				-12
			],
			[
				-26,
				57
			],
			[
				74,
				11
			],
			[
				51,
				4
			],
			[
				19,
				-60
			]
		],
		[
			[
				17932,
				46842
			],
			[
				-19,
				-112
			],
			[
				-90,
				27
			],
			[
				109,
				85
			]
		],
		[
			[
				19590,
				47837
			],
			[
				-89,
				-14
			],
			[
				-74,
				50
			],
			[
				50,
				55
			],
			[
				-30,
				17
			],
			[
				43,
				50
			],
			[
				77,
				-43
			],
			[
				29,
				-74
			],
			[
				-6,
				-41
			]
		],
		[
			[
				18654,
				47485
			],
			[
				-32,
				-2
			],
			[
				-13,
				113
			],
			[
				-59,
				5
			],
			[
				10,
				46
			],
			[
				106,
				83
			],
			[
				15,
				41
			],
			[
				137,
				47
			],
			[
				49,
				-15
			],
			[
				10,
				-51
			],
			[
				-115,
				-50
			],
			[
				-25,
				-75
			],
			[
				-46,
				-10
			],
			[
				22,
				-61
			],
			[
				-59,
				-71
			]
		],
		[
			[
				19000,
				47699
			],
			[
				35,
				-65
			],
			[
				-97,
				-37
			],
			[
				10,
				52
			],
			[
				-125,
				-71
			],
			[
				-61,
				-1
			],
			[
				15,
				72
			],
			[
				38,
				41
			],
			[
				206,
				82
			],
			[
				-21,
				-73
			]
		],
		[
			[
				20273,
				47466
			],
			[
				-159,
				-211
			],
			[
				-106,
				-2
			],
			[
				30,
				95
			],
			[
				109,
				98
			],
			[
				100,
				37
			],
			[
				26,
				-17
			]
		],
		[
			[
				3066,
				6985
			],
			[
				0,
				0
			],
			[
				-27,
				-41
			],
			[
				0,
				-1
			],
			[
				-14,
				-21
			],
			[
				47,
				-113
			],
			[
				-122,
				17
			],
			[
				-35,
				5
			]
		],
		[
			[
				3245,
				7271
			],
			[
				0,
				0
			],
			[
				11,
				-41
			],
			[
				0,
				0
			]
		],
		[
			[
				2490,
				10332
			],
			[
				55,
				-113
			],
			[
				3,
				-89
			],
			[
				2,
				-51
			]
		],
		[
			[
				2191,
				9788
			],
			[
				0,
				0
			],
			[
				-9,
				27
			],
			[
				-48,
				-9
			]
		],
		[
			[
				2134,
				9806
			],
			[
				0,
				8
			],
			[
				-7,
				131
			],
			[
				-4,
				89
			],
			[
				58,
				39
			],
			[
				10,
				7
			],
			[
				11,
				8
			],
			[
				68,
				190
			]
		],
		[
			[
				2940,
				10098
			],
			[
				23,
				-4
			],
			[
				89,
				-18
			],
			[
				76,
				-14
			],
			[
				52,
				-92
			],
			[
				-10,
				-30
			],
			[
				-28,
				-87
			],
			[
				18,
				-27
			],
			[
				35,
				-53
			],
			[
				0,
				0
			]
		],
		[
			[
				1472,
				15789
			],
			[
				0,
				0
			],
			[
				-52,
				-16
			],
			[
				30,
				-121
			]
		],
		[
			[
				1406,
				15655
			],
			[
				-27,
				17
			]
		],
		[
			[
				1300,
				15726
			],
			[
				-3,
				1
			],
			[
				-8,
				5
			],
			[
				0,
				-48
			],
			[
				0,
				-88
			],
			[
				-12,
				-9
			],
			[
				-23,
				-19
			]
		],
		[
			[
				1122,
				19337
			],
			[
				0,
				0
			],
			[
				-3,
				-83
			],
			[
				96,
				-34
			],
			[
				-49,
				-46
			],
			[
				-20,
				-20
			]
		],
		[
			[
				1096,
				19159
			],
			[
				0,
				0
			],
			[
				-21,
				12
			]
		],
		[
			[
				1072,
				19144
			],
			[
				87,
				-125
			]
		],
		[
			[
				2416,
				22014
			],
			[
				-64,
				25
			],
			[
				-53,
				20
			],
			[
				-16,
				105
			],
			[
				-62,
				9
			],
			[
				-3,
				13
			],
			[
				0,
				2
			],
			[
				-20,
				82
			],
			[
				-173,
				-51
			],
			[
				-11,
				10
			],
			[
				-167,
				159
			],
			[
				8,
				46
			],
			[
				17,
				92
			],
			[
				-131,
				-67
			],
			[
				-162,
				-83
			],
			[
				-104,
				93
			],
			[
				-146,
				22
			],
			[
				-1,
				-62
			],
			[
				0,
				-97
			],
			[
				-72,
				-13
			],
			[
				-158,
				-30
			]
		],
		[
			[
				8707,
				3402
			],
			[
				-176,
				-119
			],
			[
				-10,
				-7
			],
			[
				-2,
				-2
			],
			[
				5,
				-3
			],
			[
				50,
				-43
			],
			[
				17,
				-14
			],
			[
				5,
				-191
			],
			[
				-102,
				-64
			],
			[
				-49,
				-179
			],
			[
				-81,
				-11
			],
			[
				48,
				-222
			],
			[
				16,
				-54
			],
			[
				-56,
				-43
			],
			[
				18,
				-182
			],
			[
				-110,
				-44
			],
			[
				-14,
				-84
			],
			[
				120,
				-56
			],
			[
				2,
				-43
			],
			[
				3,
				-57
			],
			[
				2,
				-53
			],
			[
				-84,
				-198
			]
		],
		[
			[
				8309,
				1733
			],
			[
				-173,
				27
			],
			[
				-3,
				0
			],
			[
				-22,
				3
			],
			[
				1,
				125
			],
			[
				-221,
				-103
			]
		],
		[
			[
				8244,
				3681
			],
			[
				70,
				-148
			],
			[
				83,
				-25
			],
			[
				4,
				5
			],
			[
				9,
				12
			],
			[
				106,
				127
			],
			[
				151,
				38
			]
		],
		[
			[
				8070,
				478
			],
			[
				0,
				1
			],
			[
				55,
				3
			],
			[
				-9,
				84
			],
			[
				67,
				9
			],
			[
				42,
				5
			],
			[
				138,
				102
			],
			[
				-71,
				92
			],
			[
				59,
				161
			],
			[
				64,
				-16
			],
			[
				64,
				70
			],
			[
				-24,
				41
			],
			[
				68,
				61
			],
			[
				-33,
				83
			],
			[
				42,
				22
			]
		],
		[
			[
				8532,
				1196
			],
			[
				140,
				62
			],
			[
				95,
				-63
			],
			[
				2,
				-2
			],
			[
				9,
				28
			],
			[
				1,
				3
			],
			[
				58,
				-118
			]
		],
		[
			[
				9984,
				4814
			],
			[
				-103,
				-27
			],
			[
				-13,
				-80
			],
			[
				-86,
				-67
			],
			[
				-39,
				-9
			],
			[
				-18,
				-4
			],
			[
				-102,
				-25
			],
			[
				-7,
				-2
			],
			[
				-40,
				-9
			],
			[
				-19,
				-5
			],
			[
				0,
				4
			],
			[
				-13,
				66
			],
			[
				-14,
				73
			],
			[
				-1,
				4
			],
			[
				-5,
				31
			],
			[
				-40,
				11
			],
			[
				-117,
				31
			],
			[
				-49,
				13
			],
			[
				-5,
				7
			],
			[
				-24,
				27
			],
			[
				-4,
				5
			],
			[
				-84,
				96
			],
			[
				-14,
				16
			],
			[
				0,
				1
			],
			[
				-31,
				116
			],
			[
				-107,
				71
			]
		],
		[
			[
				7601,
				6587
			],
			[
				76,
				3
			],
			[
				439,
				418
			],
			[
				221,
				-3
			],
			[
				22,
				0
			],
			[
				151,
				89
			],
			[
				165,
				50
			],
			[
				44,
				13
			],
			[
				34,
				10
			],
			[
				8,
				2
			],
			[
				48,
				-71
			],
			[
				4,
				-6
			],
			[
				91,
				154
			],
			[
				22,
				37
			],
			[
				68,
				2
			],
			[
				173,
				6
			],
			[
				259,
				139
			],
			[
				9,
				13
			],
			[
				19,
				28
			],
			[
				123,
				185
			]
		],
		[
			[
				3403,
				29435
			],
			[
				15,
				-7
			]
		],
		[
			[
				3535,
				29376
			],
			[
				0,
				0
			],
			[
				33,
				-15
			],
			[
				0,
				0
			]
		],
		[
			[
				3416,
				28839
			],
			[
				0,
				0
			],
			[
				-24,
				13
			],
			[
				-130,
				-22
			],
			[
				64,
				186
			],
			[
				-24,
				3
			],
			[
				-100,
				14
			],
			[
				-47,
				101
			],
			[
				-123,
				62
			],
			[
				-70,
				-32
			],
			[
				-29,
				118
			],
			[
				-105,
				108
			],
			[
				-73,
				-35
			],
			[
				-2,
				0
			],
			[
				-11,
				15
			]
		],
		[
			[
				9529,
				3311
			],
			[
				28,
				-121
			],
			[
				-78,
				-197
			],
			[
				13,
				-3
			],
			[
				120,
				-31
			],
			[
				32,
				-8
			],
			[
				49,
				-113
			],
			[
				1,
				-5
			],
			[
				2,
				-3
			],
			[
				17,
				10
			],
			[
				30,
				17
			],
			[
				14,
				8
			],
			[
				74,
				-74
			],
			[
				23,
				-22
			],
			[
				-4,
				-12
			],
			[
				-40,
				-128
			],
			[
				7,
				-5
			],
			[
				40,
				-32
			],
			[
				-30,
				-54
			],
			[
				-8,
				-15
			],
			[
				54,
				-66
			],
			[
				96,
				-119
			],
			[
				46,
				-57
			],
			[
				2,
				26
			],
			[
				19,
				200
			],
			[
				0,
				1
			],
			[
				145,
				200
			],
			[
				83,
				8
			]
		],
		[
			[
				10264,
				2716
			],
			[
				-24,
				-143
			],
			[
				3,
				-4
			],
			[
				37,
				-49
			],
			[
				14,
				-20
			],
			[
				-20,
				-191
			],
			[
				83,
				-44
			],
			[
				-114,
				-164
			]
		],
		[
			[
				10243,
				2101
			],
			[
				-49,
				-40
			],
			[
				53,
				-32
			],
			[
				-86,
				5
			],
			[
				17,
				-27
			],
			[
				-30,
				-101
			],
			[
				-48,
				-13
			],
			[
				-3,
				-1
			],
			[
				-9,
				-3
			],
			[
				-1,
				-1
			],
			[
				-49,
				-233
			],
			[
				-104,
				33
			],
			[
				-15,
				5
			],
			[
				-1,
				15
			],
			[
				-1,
				4
			],
			[
				-2,
				32
			],
			[
				-2,
				18
			],
			[
				-25,
				27
			],
			[
				-89,
				97
			],
			[
				-56,
				-41
			],
			[
				-50,
				-36
			]
		],
		[
			[
				9693,
				1809
			],
			[
				-78,
				72
			],
			[
				-119,
				11
			],
			[
				-21,
				-139
			],
			[
				-39,
				-80
			],
			[
				-35,
				0
			],
			[
				-27,
				0
			],
			[
				-75,
				110
			],
			[
				-3,
				109
			],
			[
				-64,
				39
			],
			[
				-41,
				25
			],
			[
				102,
				203
			],
			[
				-22,
				194
			],
			[
				18,
				127
			],
			[
				-106,
				-34
			],
			[
				-27,
				-81
			],
			[
				-10,
				-31
			],
			[
				-95,
				29
			],
			[
				-20,
				69
			],
			[
				-38,
				34
			],
			[
				25,
				63
			],
			[
				-35,
				35
			],
			[
				25,
				128
			]
		],
		[
			[
				7245,
				32539
			],
			[
				-135,
				-4
			],
			[
				-33,
				-1
			]
		],
		[
			[
				7059,
				32759
			],
			[
				102,
				-27
			],
			[
				84,
				-193
			]
		],
		[
			[
				13175,
				5525
			],
			[
				-42,
				-88
			],
			[
				50,
				-148
			],
			[
				-56,
				-109
			],
			[
				-99,
				-189
			]
		],
		[
			[
				13028,
				4991
			],
			[
				-71,
				-130
			],
			[
				-259,
				23
			],
			[
				-50,
				-176
			],
			[
				-4,
				-16
			],
			[
				-1,
				-3
			],
			[
				25,
				-66
			],
			[
				3,
				-9
			],
			[
				-1,
				-1
			],
			[
				-71,
				-66
			],
			[
				-57,
				-13
			],
			[
				-135,
				99
			]
		],
		[
			[
				12407,
				4633
			],
			[
				-22,
				34
			],
			[
				-98,
				175
			],
			[
				29,
				40
			],
			[
				-4,
				7
			],
			[
				-1,
				3
			],
			[
				-14,
				26
			],
			[
				-24,
				45
			],
			[
				-194,
				-13
			],
			[
				-88,
				284
			],
			[
				143,
				422
			],
			[
				225,
				184
			]
		],
		[
			[
				12506,
				6065
			],
			[
				80,
				47
			],
			[
				117,
				-121
			],
			[
				202,
				-47
			],
			[
				231,
				-226
			],
			[
				-6,
				-11
			],
			[
				-39,
				-79
			],
			[
				81,
				-99
			],
			[
				3,
				-4
			]
		],
		[
			[
				13818,
				7972
			],
			[
				111,
				-211
			],
			[
				-20,
				-91
			],
			[
				263,
				-206
			],
			[
				162,
				-127
			]
		],
		[
			[
				14334,
				7337
			],
			[
				-155,
				-182
			],
			[
				-91,
				-108
			],
			[
				-45,
				-53
			]
		],
		[
			[
				14043,
				6994
			],
			[
				-91,
				-124
			],
			[
				-37,
				-50
			],
			[
				-2,
				-3
			],
			[
				-24,
				-33
			],
			[
				-42,
				-56
			],
			[
				-144,
				-413
			],
			[
				-87,
				-110
			]
		],
		[
			[
				15078,
				11968
			],
			[
				-79,
				-71
			],
			[
				-14,
				32
			],
			[
				-13,
				-43
			],
			[
				-3,
				-10
			],
			[
				-51,
				47
			],
			[
				-6,
				5
			],
			[
				-14,
				18
			],
			[
				-11,
				20
			],
			[
				-11,
				20
			],
			[
				-285,
				-33
			],
			[
				-65,
				37
			],
			[
				-9,
				17
			],
			[
				-31,
				53
			],
			[
				-9,
				18
			],
			[
				-21,
				48
			],
			[
				-1,
				4
			],
			[
				-52,
				34
			],
			[
				-163,
				143
			]
		],
		[
			[
				13689,
				12975
			],
			[
				156,
				32
			],
			[
				29,
				16
			],
			[
				137,
				79
			],
			[
				161,
				92
			],
			[
				5,
				3
			],
			[
				34,
				20
			],
			[
				11,
				6
			],
			[
				60,
				23
			],
			[
				-14,
				68
			],
			[
				111,
				101
			],
			[
				24,
				81
			],
			[
				17,
				59
			],
			[
				26,
				89
			],
			[
				91,
				63
			],
			[
				-56,
				57
			]
		],
		[
			[
				16355,
				12835
			],
			[
				-35,
				-24
			],
			[
				-111,
				-75
			],
			[
				-56,
				-116
			],
			[
				-70,
				-284
			],
			[
				-55,
				-91
			],
			[
				-7,
				-11
			],
			[
				-15,
				-25
			],
			[
				-18,
				-30
			],
			[
				-13,
				-20
			],
			[
				0,
				-1
			],
			[
				34,
				-46
			],
			[
				13,
				-18
			],
			[
				47,
				-23
			],
			[
				-55,
				-35
			],
			[
				60,
				2
			],
			[
				-3,
				-8
			],
			[
				-14,
				-40
			],
			[
				80,
				-335
			],
			[
				0,
				-123
			],
			[
				4,
				-25
			]
		],
		[
			[
				16687,
				23075
			],
			[
				77,
				-144
			],
			[
				-26,
				-150
			],
			[
				49,
				-75
			],
			[
				8,
				-14
			],
			[
				-34,
				-2
			],
			[
				25,
				-43
			],
			[
				61,
				-109
			],
			[
				9,
				-15
			],
			[
				116,
				-119
			],
			[
				47,
				0
			],
			[
				79,
				0
			],
			[
				20,
				-44
			],
			[
				6,
				-14
			],
			[
				33,
				-13
			],
			[
				98,
				-40
			]
		],
		[
			[
				17255,
				22293
			],
			[
				-90,
				-243
			],
			[
				-14,
				-6
			],
			[
				0,
				0
			],
			[
				-83,
				-35
			],
			[
				-12,
				-16
			],
			[
				-22,
				-31
			],
			[
				-7,
				-10
			],
			[
				-2,
				-3
			],
			[
				-103,
				16
			],
			[
				-30,
				-12
			],
			[
				-135,
				-56
			],
			[
				20,
				-94
			],
			[
				-28,
				-106
			],
			[
				115,
				-69
			],
			[
				-55,
				-91
			],
			[
				-83,
				-138
			],
			[
				-23,
				-39
			],
			[
				-95,
				-24
			],
			[
				-66,
				70
			],
			[
				-32,
				35
			],
			[
				-95,
				7
			],
			[
				-52,
				4
			],
			[
				-82,
				-43
			]
		],
		[
			[
				17296,
				8089
			],
			[
				9,
				-1
			],
			[
				24,
				37
			]
		],
		[
			[
				17435,
				8111
			],
			[
				8,
				-5
			]
		],
		[
			[
				18413,
				9334
			],
			[
				22,
				31
			],
			[
				42,
				-8
			],
			[
				8,
				44
			],
			[
				11,
				55
			],
			[
				6,
				35
			],
			[
				8,
				44
			],
			[
				11,
				14
			],
			[
				23,
				32
			],
			[
				63,
				85
			],
			[
				14,
				19
			]
		],
		[
			[
				18621,
				9685
			],
			[
				81,
				-61
			],
			[
				76,
				13
			],
			[
				11,
				59
			],
			[
				3,
				14
			],
			[
				13,
				76
			],
			[
				62,
				-79
			],
			[
				19,
				-3
			],
			[
				198,
				-26
			]
		],
		[
			[
				19004,
				9172
			],
			[
				3,
				2
			],
			[
				23,
				12
			],
			[
				12,
				7
			],
			[
				1,
				0
			],
			[
				2,
				-2
			],
			[
				13,
				-18
			],
			[
				65,
				-89
			],
			[
				38,
				-52
			],
			[
				64,
				-170
			],
			[
				10,
				-27
			],
			[
				4,
				-12
			],
			[
				16,
				-41
			],
			[
				1,
				-3
			],
			[
				3,
				-9
			],
			[
				2,
				-5
			],
			[
				41,
				15
			],
			[
				47,
				16
			],
			[
				49,
				17
			],
			[
				47,
				17
			],
			[
				2,
				0
			],
			[
				23,
				-41
			],
			[
				10,
				-17
			],
			[
				28,
				-49
			],
			[
				6,
				-12
			],
			[
				29,
				-52
			],
			[
				-4,
				-12
			],
			[
				-31,
				-75
			],
			[
				-51,
				17
			],
			[
				-58,
				-143
			],
			[
				-4,
				-11
			],
			[
				-21,
				-51
			],
			[
				35,
				-77
			],
			[
				1,
				-3
			],
			[
				27,
				-58
			]
		],
		[
			[
				17179,
				12394
			],
			[
				-60,
				-3
			],
			[
				15,
				-100
			],
			[
				-47,
				-66
			],
			[
				-3,
				-4
			],
			[
				11,
				-203
			],
			[
				8,
				-61
			],
			[
				3,
				-30
			],
			[
				-33,
				-25
			]
		],
		[
			[
				18114,
				11163
			],
			[
				18,
				-4
			],
			[
				21,
				38
			],
			[
				30,
				74
			],
			[
				21,
				51
			],
			[
				2,
				74
			]
		],
		[
			[
				18206,
				11396
			],
			[
				67,
				-57
			],
			[
				22,
				5
			],
			[
				53,
				12
			],
			[
				20,
				-50
			],
			[
				12,
				-32
			],
			[
				32,
				-30
			],
			[
				3,
				64
			],
			[
				61,
				-26
			],
			[
				31,
				-5
			],
			[
				71,
				-11
			],
			[
				33,
				-105
			],
			[
				70,
				-30
			],
			[
				3,
				-52
			],
			[
				51,
				-59
			]
		],
		[
			[
				19722,
				10663
			],
			[
				4,
				-7
			],
			[
				24,
				-47
			],
			[
				26,
				-48
			],
			[
				19,
				-36
			],
			[
				87,
				-166
			],
			[
				-13,
				-75
			],
			[
				-14,
				-73
			]
		],
		[
			[
				19855,
				10211
			],
			[
				-127,
				-349
			],
			[
				1,
				-113
			]
		],
		[
			[
				19333,
				10421
			],
			[
				20,
				24
			],
			[
				127,
				161
			],
			[
				48,
				61
			],
			[
				43,
				54
			]
		],
		[
			[
				19571,
				10721
			],
			[
				3,
				-2
			],
			[
				54,
				-44
			],
			[
				30,
				-23
			],
			[
				9,
				1
			],
			[
				1,
				0
			],
			[
				52,
				10
			],
			[
				2,
				0
			]
		],
		[
			[
				20130,
				12970
			],
			[
				102,
				-77
			],
			[
				-27,
				-107
			],
			[
				-4,
				-17
			],
			[
				-96,
				-48
			],
			[
				-112,
				-157
			],
			[
				43,
				-90
			],
			[
				61,
				-86
			],
			[
				133,
				-209
			],
			[
				-33,
				-54
			]
		],
		[
			[
				19685,
				12816
			],
			[
				-95,
				153
			],
			[
				-44,
				194
			],
			[
				-50,
				-44
			],
			[
				-57,
				125
			],
			[
				-7,
				14
			],
			[
				-51,
				112
			]
		],
		[
			[
				19381,
				13370
			],
			[
				18,
				20
			],
			[
				8,
				9
			],
			[
				26,
				28
			],
			[
				2,
				3
			],
			[
				31,
				34
			],
			[
				-8,
				2
			],
			[
				-19,
				5
			],
			[
				-32,
				9
			],
			[
				-7,
				2
			],
			[
				-3,
				0
			],
			[
				7,
				9
			],
			[
				2,
				2
			],
			[
				9,
				11
			],
			[
				6,
				7
			],
			[
				13,
				16
			],
			[
				-8,
				5
			],
			[
				-40,
				25
			],
			[
				53,
				0
			],
			[
				1,
				0
			],
			[
				12,
				0
			],
			[
				-5,
				17
			],
			[
				-6,
				24
			],
			[
				5,
				2
			],
			[
				28,
				11
			],
			[
				15,
				6
			],
			[
				112,
				-16
			],
			[
				36,
				-19
			],
			[
				62,
				137
			]
		],
		[
			[
				19699,
				13719
			],
			[
				52,
				-74
			],
			[
				27,
				-37
			],
			[
				4,
				-5
			],
			[
				14,
				-20
			],
			[
				3,
				-20
			],
			[
				2,
				-17
			],
			[
				10,
				-67
			],
			[
				89,
				-26
			],
			[
				18,
				-104
			],
			[
				7,
				-41
			],
			[
				74,
				-240
			],
			[
				131,
				-98
			]
		],
		[
			[
				18392,
				19072
			],
			[
				-37,
				-82
			],
			[
				-13,
				-27
			],
			[
				-21,
				-47
			],
			[
				-50,
				-5
			]
		],
		[
			[
				18271,
				18911
			],
			[
				-200,
				19
			],
			[
				-5,
				1
			],
			[
				-15,
				1
			],
			[
				-43,
				-75
			],
			[
				-19,
				-33
			],
			[
				-1,
				0
			],
			[
				-112,
				42
			],
			[
				-85,
				-139
			],
			[
				-58,
				-16
			],
			[
				-27,
				-8
			],
			[
				-8,
				-48
			],
			[
				-6,
				-42
			]
		],
		[
			[
				17692,
				18613
			],
			[
				-32,
				37
			],
			[
				-46,
				55
			],
			[
				-80,
				94
			],
			[
				-23,
				27
			],
			[
				-34,
				41
			],
			[
				-54,
				63
			],
			[
				-63,
				74
			],
			[
				-47,
				55
			],
			[
				-49,
				58
			],
			[
				-8,
				10
			],
			[
				-14,
				220
			],
			[
				3,
				12
			],
			[
				17,
				56
			],
			[
				30,
				99
			],
			[
				11,
				41
			],
			[
				-65,
				32
			],
			[
				-66,
				33
			],
			[
				-26,
				13
			],
			[
				-45,
				38
			],
			[
				-64,
				48
			],
			[
				-69,
				60
			],
			[
				-57,
				-48
			]
		],
		[
			[
				16911,
				19731
			],
			[
				-53,
				48
			],
			[
				-41,
				43
			],
			[
				1,
				96
			],
			[
				1,
				48
			],
			[
				-5,
				7
			],
			[
				-59,
				88
			],
			[
				-81,
				119
			],
			[
				-11,
				17
			],
			[
				-11,
				17
			],
			[
				8,
				23
			],
			[
				77,
				213
			],
			[
				111,
				310
			],
			[
				1,
				1
			]
		],
		[
			[
				18271,
				18911
			],
			[
				80,
				-112
			],
			[
				-11,
				-114
			],
			[
				60,
				34
			],
			[
				42,
				-103
			],
			[
				-34,
				-91
			],
			[
				31,
				-86
			],
			[
				-91,
				-34
			],
			[
				-13,
				-77
			],
			[
				-108,
				-58
			],
			[
				-16,
				-8
			],
			[
				47,
				-58
			],
			[
				18,
				-22
			],
			[
				-50,
				-79
			],
			[
				-45,
				-71
			],
			[
				0,
				-128
			],
			[
				45,
				-3
			],
			[
				-55,
				-41
			],
			[
				34,
				-171
			],
			[
				10,
				-50
			],
			[
				21,
				-24
			],
			[
				44,
				-48
			],
			[
				17,
				-202
			]
		],
		[
			[
				17680,
				17641
			],
			[
				60,
				186
			],
			[
				63,
				195
			],
			[
				0,
				0
			],
			[
				-13,
				160
			],
			[
				-12,
				35
			],
			[
				-36,
				-5
			],
			[
				-81,
				-13
			],
			[
				-33,
				43
			],
			[
				-4,
				49
			],
			[
				0,
				4
			],
			[
				-5,
				58
			],
			[
				14,
				96
			],
			[
				-2,
				35
			],
			[
				61,
				129
			]
		],
		[
			[
				17837,
				14923
			],
			[
				8,
				18
			],
			[
				39,
				79
			],
			[
				-8,
				127
			],
			[
				-87,
				107
			],
			[
				-57,
				303
			],
			[
				47,
				14
			],
			[
				-5,
				42
			],
			[
				-2,
				18
			],
			[
				-38,
				81
			],
			[
				-6,
				11
			],
			[
				-8,
				19
			],
			[
				-70,
				34
			],
			[
				-33,
				16
			],
			[
				1,
				-19
			],
			[
				2,
				-32
			],
			[
				-57,
				22
			],
			[
				-14,
				70
			],
			[
				-23,
				120
			]
		],
		[
			[
				17526,
				15953
			],
			[
				203,
				55
			],
			[
				68,
				19
			],
			[
				53,
				-31
			],
			[
				19,
				-11
			],
			[
				13,
				-7
			],
			[
				28,
				-16
			],
			[
				15,
				8
			],
			[
				28,
				17
			],
			[
				5,
				3
			],
			[
				12,
				-69
			],
			[
				85,
				92
			],
			[
				196,
				26
			],
			[
				20,
				2
			],
			[
				32,
				64
			],
			[
				13,
				-65
			],
			[
				26,
				-21
			],
			[
				35,
				-28
			],
			[
				68,
				-55
			],
			[
				2,
				-2
			],
			[
				306,
				-1
			]
		],
		[
			[
				19112,
				22211
			],
			[
				37,
				-225
			],
			[
				8,
				-48
			],
			[
				38,
				-233
			],
			[
				11,
				-70
			],
			[
				18,
				-107
			],
			[
				23,
				-144
			],
			[
				14,
				-85
			],
			[
				3,
				-5
			],
			[
				25,
				-54
			],
			[
				0,
				0
			],
			[
				222,
				-466
			],
			[
				-63,
				-211
			],
			[
				-39,
				-132
			],
			[
				2,
				-88
			],
			[
				3,
				-168
			],
			[
				0,
				-17
			],
			[
				4,
				-266
			],
			[
				56,
				-23
			],
			[
				36,
				-110
			],
			[
				2,
				-4
			],
			[
				4,
				-12
			],
			[
				-2,
				-6
			],
			[
				-45,
				-98
			],
			[
				-49,
				-55
			],
			[
				-22,
				-25
			],
			[
				14,
				-73
			],
			[
				3,
				-15
			],
			[
				3,
				-13
			],
			[
				-4,
				-1
			],
			[
				-12,
				-3
			],
			[
				-29,
				-6
			],
			[
				-28,
				-100
			],
			[
				-50,
				82
			],
			[
				-5,
				8
			],
			[
				-114,
				-44
			],
			[
				-15,
				-6
			],
			[
				-57,
				-22
			],
			[
				141,
				-294
			]
		],
		[
			[
				19245,
				19072
			],
			[
				66,
				-173
			],
			[
				27,
				-292
			],
			[
				-45,
				-210
			]
		],
		[
			[
				18388,
				22214
			],
			[
				-258,
				-95
			],
			[
				-68,
				-26
			],
			[
				-137,
				-50
			],
			[
				-121,
				-45
			],
			[
				-220,
				-82
			],
			[
				-128,
				-48
			],
			[
				-44,
				-17
			],
			[
				-3,
				-1
			],
			[
				-33,
				72
			],
			[
				15,
				32
			],
			[
				76,
				155
			],
			[
				14,
				29
			],
			[
				7,
				13
			],
			[
				-15,
				30
			],
			[
				-12,
				24
			],
			[
				-14,
				-2
			],
			[
				-57,
				-10
			],
			[
				-18,
				-2
			],
			[
				-117,
				102
			]
		],
		[
			[
				15976,
				37292
			],
			[
				0,
				0
			],
			[
				-84,
				-79
			],
			[
				-146,
				-137
			],
			[
				-7,
				-120
			],
			[
				-44,
				-22
			],
			[
				-330,
				-84
			],
			[
				-29,
				225
			]
		],
		[
			[
				15336,
				37075
			],
			[
				-120,
				71
			],
			[
				-223,
				131
			],
			[
				-39,
				86
			],
			[
				-82,
				184
			],
			[
				-42,
				94
			],
			[
				-16,
				15
			],
			[
				-85,
				82
			],
			[
				-34,
				31
			],
			[
				8,
				26
			],
			[
				25,
				82
			],
			[
				108,
				85
			],
			[
				0,
				0
			]
		],
		[
			[
				14828,
				38027
			],
			[
				0,
				0
			],
			[
				-21,
				37
			],
			[
				0,
				0
			]
		],
		[
			[
				17484,
				39258
			],
			[
				-240,
				-275
			],
			[
				-339,
				-216
			],
			[
				-20,
				-23
			],
			[
				-39,
				-46
			],
			[
				-52,
				-63
			],
			[
				-25,
				-113
			],
			[
				-78,
				-125
			],
			[
				-28,
				-45
			],
			[
				-87,
				-139
			],
			[
				-14,
				-23
			],
			[
				-12,
				-19
			],
			[
				51,
				-58
			],
			[
				-27,
				-93
			],
			[
				78,
				-201
			],
			[
				6,
				-15
			],
			[
				0,
				0
			]
		],
		[
			[
				16508,
				39549
			],
			[
				91,
				36
			],
			[
				15,
				6
			],
			[
				159,
				75
			],
			[
				0,
				8
			],
			[
				6,
				172
			],
			[
				6,
				174
			]
		],
		[
			[
				16785,
				40020
			],
			[
				12,
				-1
			],
			[
				32,
				-2
			],
			[
				102,
				-6
			],
			[
				9,
				4
			],
			[
				228,
				99
			],
			[
				87,
				-85
			],
			[
				25,
				-25
			],
			[
				104,
				-103
			],
			[
				34,
				-133
			],
			[
				6,
				-27
			],
			[
				37,
				-144
			]
		],
		[
			[
				19054,
				36463
			],
			[
				-142,
				-104
			],
			[
				-10,
				-7
			],
			[
				-3,
				-1
			],
			[
				-348,
				-103
			],
			[
				-64,
				-19
			],
			[
				-92,
				14
			],
			[
				-46,
				48
			],
			[
				-16,
				18
			]
		],
		[
			[
				18333,
				36309
			],
			[
				-111,
				135
			],
			[
				33,
				142
			],
			[
				-84,
				103
			],
			[
				-85,
				-58
			],
			[
				-14,
				-10
			],
			[
				11,
				14
			],
			[
				47,
				56
			],
			[
				-37,
				57
			],
			[
				-97,
				14
			],
			[
				-10,
				2
			],
			[
				4,
				7
			],
			[
				25,
				42
			],
			[
				-29,
				165
			],
			[
				-82,
				46
			],
			[
				24,
				76
			],
			[
				6,
				19
			],
			[
				8,
				27
			],
			[
				-28,
				45
			],
			[
				-6,
				9
			]
		],
		[
			[
				15574,
				39078
			],
			[
				0,
				0
			],
			[
				-98,
				152
			],
			[
				-45,
				-53
			],
			[
				-157,
				54
			],
			[
				-19,
				24
			],
			[
				-50,
				65
			]
		],
		[
			[
				16075,
				40273
			],
			[
				62,
				-65
			],
			[
				53,
				-28
			],
			[
				93,
				38
			],
			[
				57,
				-52
			],
			[
				1,
				0
			],
			[
				98,
				33
			],
			[
				156,
				-52
			],
			[
				30,
				-64
			],
			[
				131,
				61
			],
			[
				29,
				-124
			]
		],
		[
			[
				20843,
				8755
			],
			[
				14,
				145
			],
			[
				81,
				103
			],
			[
				-34,
				174
			]
		],
		[
			[
				20904,
				9177
			],
			[
				45,
				-34
			],
			[
				77,
				-2
			],
			[
				13,
				-1
			],
			[
				41,
				96
			],
			[
				23,
				53
			],
			[
				97,
				-16
			],
			[
				48,
				-8
			],
			[
				20,
				-3
			],
			[
				53,
				-1
			],
			[
				124,
				-1
			],
			[
				47,
				-60
			],
			[
				145,
				-182
			],
			[
				0,
				0
			]
		],
		[
			[
				21021,
				18394
			],
			[
				-66,
				87
			],
			[
				-194,
				72
			],
			[
				-30,
				11
			],
			[
				-94,
				122
			],
			[
				-75,
				61
			],
			[
				-10,
				-29
			],
			[
				0,
				-1
			],
			[
				-41,
				98
			],
			[
				-51,
				37
			],
			[
				0,
				0
			],
			[
				-68,
				97
			],
			[
				-35,
				58
			],
			[
				-2,
				-2
			],
			[
				-49,
				-42
			],
			[
				-138,
				9
			],
			[
				-46,
				178
			],
			[
				0,
				2
			],
			[
				-37,
				1
			],
			[
				-49,
				1
			],
			[
				-57,
				1
			],
			[
				-16,
				0
			],
			[
				-20,
				1
			],
			[
				-26,
				1
			],
			[
				-27,
				1
			]
		],
		[
			[
				19890,
				19158
			],
			[
				-13,
				170
			],
			[
				70,
				25
			],
			[
				18,
				77
			],
			[
				39,
				166
			],
			[
				-20,
				114
			],
			[
				-114,
				361
			],
			[
				-34,
				110
			],
			[
				-12,
				39
			],
			[
				54,
				761
			]
		],
		[
			[
				20062,
				20707
			],
			[
				93,
				42
			],
			[
				0,
				0
			],
			[
				111,
				50
			],
			[
				33,
				15
			],
			[
				30,
				13
			],
			[
				3,
				2
			],
			[
				27,
				-61
			],
			[
				170,
				67
			],
			[
				20,
				8
			],
			[
				69,
				90
			],
			[
				161,
				210
			],
			[
				92,
				148
			],
			[
				8,
				13
			],
			[
				58,
				94
			],
			[
				130,
				-100
			],
			[
				-74,
				184
			],
			[
				164,
				106
			],
			[
				122,
				79
			],
			[
				5,
				4
			],
			[
				2,
				1
			],
			[
				20,
				12
			],
			[
				37,
				151
			],
			[
				3,
				10
			],
			[
				20,
				79
			],
			[
				17,
				71
			]
		],
		[
			[
				21383,
				21995
			],
			[
				36,
				-43
			],
			[
				193,
				-235
			],
			[
				44,
				-97
			],
			[
				58,
				-129
			],
			[
				97,
				-218
			],
			[
				27,
				-37
			],
			[
				21,
				-49
			],
			[
				27,
				-33
			],
			[
				29,
				-28
			],
			[
				36,
				-41
			],
			[
				35,
				-50
			],
			[
				37,
				-53
			],
			[
				3,
				-4
			],
			[
				20,
				23
			],
			[
				32,
				35
			],
			[
				17,
				20
			],
			[
				29,
				32
			],
			[
				16,
				18
			],
			[
				23,
				-9
			],
			[
				152,
				-57
			],
			[
				22,
				103
			],
			[
				25,
				21
			],
			[
				66,
				57
			],
			[
				118,
				-66
			],
			[
				56,
				-38
			],
			[
				43,
				-69
			],
			[
				16,
				-25
			]
		],
		[
			[
				23701,
				15681
			],
			[
				-16,
				23
			],
			[
				-51,
				71
			],
			[
				-22,
				30
			],
			[
				-27,
				77
			],
			[
				-54,
				159
			],
			[
				-32,
				133
			],
			[
				-18,
				132
			],
			[
				-20,
				23
			],
			[
				-10,
				11
			],
			[
				-109,
				-118
			],
			[
				-68,
				97
			],
			[
				-13,
				19
			],
			[
				-3,
				-2
			],
			[
				-80,
				-38
			],
			[
				3,
				96
			],
			[
				-62,
				112
			],
			[
				-53,
				-7
			],
			[
				-88,
				-12
			],
			[
				-28,
				-10
			],
			[
				99,
				-301
			],
			[
				-172,
				-46
			],
			[
				34,
				-66
			],
			[
				-34,
				-41
			],
			[
				18,
				-128
			],
			[
				-6,
				5
			],
			[
				-106,
				164
			],
			[
				-64,
				59
			],
			[
				-15,
				-32
			],
			[
				-48,
				39
			],
			[
				-6,
				83
			],
			[
				-297,
				124
			],
			[
				-23,
				-8
			],
			[
				-21,
				-7
			],
			[
				-9,
				-3
			],
			[
				-45,
				-17
			],
			[
				-38,
				-13
			],
			[
				-42,
				-15
			],
			[
				-150,
				-54
			],
			[
				-90,
				-33
			],
			[
				-133,
				15
			],
			[
				-122,
				39
			],
			[
				-15,
				-34
			]
		],
		[
			[
				21665,
				16207
			],
			[
				-54,
				27
			]
		],
		[
			[
				21611,
				16234
			],
			[
				4,
				9
			],
			[
				11,
				47
			],
			[
				-41,
				116
			],
			[
				57,
				55
			],
			[
				10,
				62
			],
			[
				32,
				174
			],
			[
				-116,
				133
			],
			[
				-1,
				79
			],
			[
				3,
				201
			]
		],
		[
			[
				21570,
				17110
			],
			[
				375,
				112
			],
			[
				45,
				75
			],
			[
				204,
				-25
			],
			[
				37,
				-4
			],
			[
				93,
				-12
			],
			[
				4,
				0
			],
			[
				-7,
				43
			],
			[
				-4,
				27
			],
			[
				-2,
				10
			],
			[
				-21,
				123
			],
			[
				65,
				71
			],
			[
				7,
				7
			],
			[
				31,
				0
			],
			[
				49,
				1
			],
			[
				124,
				0
			],
			[
				81,
				-61
			],
			[
				22,
				31
			],
			[
				39,
				33
			],
			[
				23,
				1
			],
			[
				225,
				-93
			],
			[
				3,
				-64
			],
			[
				18,
				-26
			],
			[
				177,
				51
			],
			[
				30,
				50
			],
			[
				68,
				2
			],
			[
				54,
				-4
			],
			[
				15,
				0
			],
			[
				21,
				33
			],
			[
				17,
				8
			],
			[
				15,
				22
			],
			[
				9,
				6
			],
			[
				41,
				-8
			],
			[
				77,
				-40
			],
			[
				125,
				-98
			],
			[
				207,
				-3
			],
			[
				36,
				-1
			],
			[
				107,
				-2
			]
		],
		[
			[
				29799,
				55296
			],
			[
				-540,
				87
			],
			[
				-116,
				73
			],
			[
				-114,
				-20
			],
			[
				-19,
				39
			],
			[
				-17,
				32
			],
			[
				-20,
				39
			],
			[
				18,
				85
			],
			[
				19,
				89
			],
			[
				7,
				34
			],
			[
				-289,
				252
			],
			[
				-313,
				16
			],
			[
				-412,
				-65
			],
			[
				-62,
				71
			],
			[
				-21,
				24
			],
			[
				-46,
				52
			],
			[
				-16,
				48
			],
			[
				-15,
				43
			],
			[
				-6,
				16
			]
		],
		[
			[
				26148,
				56352
			],
			[
				-9,
				29
			],
			[
				-53,
				181
			],
			[
				-1,
				5
			],
			[
				-9,
				30
			],
			[
				-9,
				30
			]
		],
		[
			[
				25706,
				68042
			],
			[
				0,
				0
			],
			[
				-5,
				3
			],
			[
				-4,
				7
			],
			[
				-37,
				65
			],
			[
				-111,
				39
			],
			[
				-69,
				-16
			],
			[
				-101,
				-25
			],
			[
				-8,
				8
			],
			[
				-47,
				48
			],
			[
				19,
				72
			],
			[
				-85,
				35
			],
			[
				-22,
				239
			],
			[
				-53,
				42
			]
		],
		[
			[
				30797,
				73195
			],
			[
				-70,
				21
			],
			[
				-62,
				18
			],
			[
				22,
				-138
			]
		],
		[
			[
				30484,
				73535
			],
			[
				52,
				-20
			],
			[
				105,
				-42
			],
			[
				70,
				-28
			],
			[
				94,
				-73
			],
			[
				-36,
				-47
			],
			[
				-24,
				-31
			],
			[
				52,
				-99
			]
		],
		[
			[
				32485,
				71883
			],
			[
				-47,
				-36
			],
			[
				-1,
				-1
			],
			[
				34,
				-76
			],
			[
				11,
				-23
			],
			[
				26,
				-58
			],
			[
				2,
				-5
			],
			[
				-67,
				-63
			],
			[
				70,
				-21
			],
			[
				-2,
				-2
			],
			[
				-63,
				-87
			],
			[
				11,
				-9
			],
			[
				1,
				-1
			],
			[
				32,
				-27
			],
			[
				47,
				-40
			],
			[
				-2,
				-10
			],
			[
				-10,
				-41
			],
			[
				-16,
				-72
			],
			[
				-325,
				-8
			],
			[
				-46,
				-38
			],
			[
				-78,
				-66
			],
			[
				-22,
				-92
			],
			[
				0,
				-1
			],
			[
				-16,
				-67
			],
			[
				-84,
				-67
			],
			[
				-32,
				-25
			],
			[
				-106,
				33
			],
			[
				-99,
				-110
			],
			[
				-87,
				-93
			],
			[
				19,
				-52
			],
			[
				23,
				-64
			]
		],
		[
			[
				32206,
				72161
			],
			[
				49,
				-31
			],
			[
				40,
				-25
			],
			[
				158,
				-83
			],
			[
				8,
				-37
			],
			[
				8,
				-34
			],
			[
				9,
				-38
			],
			[
				7,
				-30
			]
		],
		[
			[
				31346,
				72864
			],
			[
				30,
				-24
			],
			[
				-1,
				-8
			],
			[
				-5,
				-47
			],
			[
				-56,
				-193
			],
			[
				-13,
				-43
			],
			[
				155,
				111
			],
			[
				199,
				56
			],
			[
				30,
				-63
			],
			[
				39,
				-84
			],
			[
				72,
				-4
			],
			[
				8,
				-12
			],
			[
				4,
				-6
			],
			[
				10,
				-17
			],
			[
				6,
				-4
			],
			[
				0,
				0
			]
		],
		[
			[
				32485,
				71883
			],
			[
				97,
				-39
			],
			[
				52,
				89
			],
			[
				110,
				-19
			],
			[
				8,
				3
			],
			[
				142,
				60
			],
			[
				0,
				0
			],
			[
				48,
				-38
			],
			[
				53,
				-41
			],
			[
				1,
				-1
			],
			[
				80,
				61
			],
			[
				1,
				1
			]
		],
		[
			[
				33762,
				74835
			],
			[
				66,
				-57
			],
			[
				-95,
				-215
			],
			[
				51,
				-134
			],
			[
				25,
				-124
			],
			[
				-111,
				-173
			],
			[
				61,
				-63
			],
			[
				-14,
				-65
			],
			[
				-16,
				-70
			],
			[
				-12,
				-56
			],
			[
				-9,
				-39
			],
			[
				-87,
				19
			],
			[
				-1,
				0
			],
			[
				-6,
				-3
			],
			[
				-96,
				-50
			],
			[
				-11,
				-6
			],
			[
				-15,
				-8
			],
			[
				19,
				-21
			],
			[
				14,
				-15
			],
			[
				96,
				-105
			],
			[
				-71,
				-93
			],
			[
				-76,
				-100
			],
			[
				-39,
				-3
			],
			[
				-48,
				-4
			],
			[
				-2,
				21
			],
			[
				-3,
				30
			],
			[
				-7,
				56
			],
			[
				5,
				51
			],
			[
				-8,
				104
			],
			[
				-63,
				81
			],
			[
				-14,
				6
			],
			[
				-52,
				24
			]
		],
		[
			[
				45215,
				76990
			],
			[
				41,
				276
			],
			[
				-87,
				-3
			],
			[
				-28,
				24
			],
			[
				-16,
				13
			],
			[
				-65,
				55
			],
			[
				-23,
				20
			],
			[
				35,
				32
			],
			[
				-7,
				12
			],
			[
				-31,
				57
			],
			[
				-2,
				4
			],
			[
				-15,
				28
			],
			[
				-145,
				23
			],
			[
				-29,
				-64
			],
			[
				-101,
				-11
			],
			[
				-116,
				118
			],
			[
				-36,
				37
			],
			[
				-72,
				72
			],
			[
				-74,
				74
			],
			[
				-11,
				12
			],
			[
				-11,
				11
			],
			[
				-150,
				74
			],
			[
				65,
				15
			],
			[
				-1,
				126
			],
			[
				84,
				48
			],
			[
				-48,
				128
			],
			[
				-107,
				19
			],
			[
				-179,
				-71
			],
			[
				-7,
				-3
			],
			[
				-82,
				-33
			],
			[
				-71,
				-28
			],
			[
				-137,
				-55
			],
			[
				22,
				-26
			],
			[
				73,
				-87
			],
			[
				-54,
				-69
			],
			[
				-119,
				46
			],
			[
				-114,
				228
			],
			[
				-92,
				82
			],
			[
				-97,
				86
			],
			[
				-13,
				25
			],
			[
				-79,
				148
			],
			[
				-53,
				-1
			]
		],
		[
			[
				42988,
				78235
			],
			[
				0,
				0
			],
			[
				-38,
				-5
			],
			[
				-26,
				-3
			],
			[
				-67,
				-12
			],
			[
				-402,
				-78
			],
			[
				-55,
				-10
			],
			[
				-54,
				-11
			],
			[
				-4,
				31
			],
			[
				-5,
				35
			],
			[
				-14,
				98
			],
			[
				-1,
				10
			],
			[
				-299,
				73
			],
			[
				-16,
				4
			],
			[
				-35,
				21
			],
			[
				-70,
				42
			],
			[
				-72,
				43
			],
			[
				-22,
				35
			],
			[
				-11,
				17
			],
			[
				-23,
				37
			],
			[
				-16,
				25
			]
		],
		[
			[
				42284,
				82353
			],
			[
				119,
				-80
			],
			[
				226,
				-42
			],
			[
				48,
				-109
			],
			[
				11,
				-25
			],
			[
				0,
				0
			]
		],
		[
			[
				42699,
				81830
			],
			[
				223,
				32
			],
			[
				105,
				-151
			],
			[
				149,
				79
			],
			[
				248,
				-159
			],
			[
				-100,
				-375
			],
			[
				93,
				-19
			],
			[
				63,
				62
			],
			[
				113,
				-27
			],
			[
				30,
				-199
			],
			[
				18,
				-120
			],
			[
				147,
				-108
			],
			[
				32,
				13
			],
			[
				42,
				18
			],
			[
				35,
				2
			],
			[
				117,
				8
			],
			[
				10,
				18
			],
			[
				25,
				48
			],
			[
				158,
				-129
			],
			[
				52,
				-43
			],
			[
				22,
				-100
			],
			[
				0,
				-4
			],
			[
				7,
				-17
			],
			[
				0,
				0
			]
		],
		[
			[
				78672,
				85056
			],
			[
				0,
				0
			],
			[
				-64,
				-31
			],
			[
				-428,
				-209
			],
			[
				-631,
				-312
			],
			[
				-780,
				-536
			],
			[
				-104,
				-72
			]
		],
		[
			[
				76665,
				83896
			],
			[
				-519,
				159
			],
			[
				-125,
				38
			],
			[
				-801,
				96
			],
			[
				220,
				164
			],
			[
				-273,
				79
			],
			[
				-382,
				350
			],
			[
				-348,
				121
			],
			[
				-60,
				21
			],
			[
				-244,
				187
			],
			[
				-26,
				20
			]
		],
		[
			[
				74107,
				85131
			],
			[
				-25,
				134
			],
			[
				283,
				235
			],
			[
				591,
				487
			],
			[
				55,
				210
			],
			[
				700,
				658
			],
			[
				0,
				0
			]
		],
		[
			[
				2936,
				4954
			],
			[
				42,
				-72
			],
			[
				28,
				-7
			],
			[
				47,
				-10
			],
			[
				108,
				-24
			],
			[
				22,
				-34
			],
			[
				37,
				-57
			],
			[
				-13,
				63
			],
			[
				36,
				22
			],
			[
				48,
				1
			],
			[
				84,
				-289
			],
			[
				42,
				-20
			],
			[
				107,
				-50
			],
			[
				-24,
				-125
			],
			[
				112,
				52
			],
			[
				91,
				43
			],
			[
				68,
				-14
			]
		],
		[
			[
				2726,
				4899
			],
			[
				21,
				8
			],
			[
				44,
				15
			],
			[
				16,
				-30
			],
			[
				75,
				88
			],
			[
				27,
				-13
			],
			[
				27,
				-13
			]
		],
		[
			[
				2810,
				16040
			],
			[
				21,
				-101
			],
			[
				6,
				-31
			],
			[
				-44,
				-143
			],
			[
				100,
				-13
			],
			[
				32,
				-4
			],
			[
				0,
				0
			]
		],
		[
			[
				1310,
				18409
			],
			[
				60,
				-67
			]
		],
		[
			[
				1686,
				17851
			],
			[
				0,
				0
			],
			[
				-8,
				-9
			],
			[
				-54,
				-57
			]
		],
		[
			[
				2695,
				27175
			],
			[
				-199,
				-240
			],
			[
				0,
				-3
			],
			[
				1,
				-13
			]
		],
		[
			[
				1705,
				27141
			],
			[
				25,
				10
			],
			[
				52,
				-102
			],
			[
				6,
				-4
			],
			[
				141,
				-105
			],
			[
				70,
				14
			],
			[
				150,
				299
			],
			[
				37,
				73
			],
			[
				81,
				18
			],
			[
				46,
				-36
			],
			[
				76,
				-59
			],
			[
				17,
				-14
			]
		],
		[
			[
				7091,
				8279
			],
			[
				30,
				91
			],
			[
				99,
				115
			],
			[
				1,
				1
			],
			[
				187,
				216
			],
			[
				67,
				77
			],
			[
				108,
				52
			],
			[
				15,
				31
			],
			[
				62,
				126
			],
			[
				14,
				-3
			],
			[
				5,
				-1
			],
			[
				104,
				-22
			],
			[
				-13,
				-72
			],
			[
				53,
				-12
			],
			[
				125,
				30
			],
			[
				54,
				13
			],
			[
				0,
				112
			],
			[
				76,
				35
			],
			[
				18,
				8
			],
			[
				30,
				-42
			],
			[
				31,
				-43
			],
			[
				8,
				-3
			],
			[
				59,
				-17
			],
			[
				32,
				-9
			],
			[
				30,
				-9
			],
			[
				11,
				-3
			],
			[
				58,
				-17
			],
			[
				55,
				111
			],
			[
				13,
				27
			],
			[
				-16,
				85
			],
			[
				-14,
				73
			],
			[
				64,
				67
			],
			[
				15,
				16
			],
			[
				-26,
				49
			],
			[
				45,
				34
			],
			[
				69,
				52
			],
			[
				-18,
				46
			],
			[
				52,
				101
			],
			[
				5,
				4
			],
			[
				131,
				105
			]
		],
		[
			[
				5487,
				15150
			],
			[
				116,
				-21
			],
			[
				20,
				-3
			],
			[
				4,
				-1
			],
			[
				22,
				-79
			],
			[
				9,
				-33
			],
			[
				13,
				-6
			],
			[
				19,
				-10
			],
			[
				38,
				-18
			],
			[
				9,
				-4
			],
			[
				0,
				0
			]
		],
		[
			[
				5816,
				14907
			],
			[
				11,
				1
			],
			[
				17,
				2
			],
			[
				13,
				3
			],
			[
				98,
				24
			],
			[
				29,
				7
			],
			[
				53,
				13
			],
			[
				69,
				17
			],
			[
				4,
				1
			],
			[
				194,
				48
			],
			[
				3,
				1
			],
			[
				1,
				-1
			],
			[
				2,
				-2
			],
			[
				18,
				-17
			],
			[
				516,
				-496
			],
			[
				198,
				28
			],
			[
				15,
				-6
			],
			[
				230,
				-91
			],
			[
				117,
				-318
			],
			[
				-60,
				-50
			],
			[
				100,
				-109
			],
			[
				352,
				-156
			],
			[
				313,
				52
			],
			[
				128,
				-62
			]
		],
		[
			[
				9309,
				17343
			],
			[
				-408,
				116
			],
			[
				-278,
				37
			],
			[
				-117,
				16
			],
			[
				-53,
				7
			],
			[
				-70,
				43
			],
			[
				-318,
				195
			],
			[
				-113,
				70
			],
			[
				-166,
				-40
			],
			[
				-9,
				-213
			],
			[
				-1,
				-11
			],
			[
				-1,
				-33
			],
			[
				-1,
				-24
			],
			[
				-29,
				-44
			],
			[
				-7,
				-12
			],
			[
				-560,
				-71
			],
			[
				-27,
				-20
			],
			[
				-55,
				-41
			],
			[
				-56,
				-43
			],
			[
				-142,
				-109
			],
			[
				-16,
				-27
			]
		],
		[
			[
				6491,
				17039
			],
			[
				0,
				0
			],
			[
				-24,
				72
			],
			[
				-2,
				6
			],
			[
				-34,
				-5
			],
			[
				-79,
				-12
			]
		],
		[
			[
				6352,
				17100
			],
			[
				92,
				100
			],
			[
				39,
				41
			],
			[
				48,
				52
			],
			[
				6,
				6
			],
			[
				26,
				211
			],
			[
				0,
				3
			],
			[
				8,
				65
			],
			[
				17,
				145
			],
			[
				-37,
				63
			],
			[
				-18,
				30
			],
			[
				65,
				36
			],
			[
				31,
				18
			],
			[
				-50,
				3
			],
			[
				-1,
				3
			],
			[
				-20,
				49
			],
			[
				-13,
				31
			],
			[
				22,
				19
			],
			[
				57,
				51
			],
			[
				-17,
				42
			]
		],
		[
			[
				3273,
				27282
			],
			[
				-8,
				146
			],
			[
				-1,
				9
			],
			[
				20,
				37
			],
			[
				43,
				80
			],
			[
				42,
				-9
			],
			[
				7,
				67
			],
			[
				114,
				54
			],
			[
				78,
				-21
			],
			[
				21,
				-6
			],
			[
				65,
				114
			],
			[
				13,
				24
			],
			[
				-11,
				21
			],
			[
				-17,
				31
			],
			[
				-4,
				7
			],
			[
				6,
				30
			],
			[
				2,
				9
			],
			[
				34,
				178
			],
			[
				-24,
				71
			],
			[
				-88,
				25
			],
			[
				-57,
				168
			],
			[
				100,
				59
			],
			[
				41,
				92
			],
			[
				-61,
				72
			],
			[
				5,
				48
			],
			[
				11,
				99
			],
			[
				9,
				84
			],
			[
				1,
				9
			]
		],
		[
			[
				3948,
				28957
			],
			[
				69,
				-54
			],
			[
				77,
				-161
			],
			[
				3,
				-6
			],
			[
				98,
				-80
			],
			[
				55,
				-46
			],
			[
				65,
				-53
			],
			[
				120,
				-15
			],
			[
				85,
				54
			],
			[
				96,
				-55
			],
			[
				48,
				-221
			],
			[
				48,
				-52
			],
			[
				41,
				-45
			],
			[
				10,
				-10
			],
			[
				74,
				-10
			],
			[
				10,
				-2
			],
			[
				56,
				-7
			],
			[
				76,
				-67
			],
			[
				78,
				41
			],
			[
				19,
				10
			],
			[
				8,
				-22
			],
			[
				25,
				-68
			],
			[
				92,
				18
			],
			[
				45,
				84
			],
			[
				107,
				-40
			],
			[
				-74,
				-136
			],
			[
				68,
				-53
			],
			[
				24,
				-59
			],
			[
				9,
				-26
			],
			[
				-29,
				-28
			],
			[
				32,
				-35
			],
			[
				63,
				-70
			],
			[
				41,
				-46
			],
			[
				19,
				-20
			],
			[
				73,
				-7
			]
		],
		[
			[
				6255,
				25382
			],
			[
				-51,
				251
			],
			[
				157,
				223
			],
			[
				1,
				117
			],
			[
				-46,
				53
			],
			[
				-184,
				36
			],
			[
				-20,
				-21
			],
			[
				-68,
				-69
			],
			[
				-8,
				-8
			],
			[
				-67,
				-68
			],
			[
				-119,
				-44
			],
			[
				-52,
				21
			],
			[
				-109,
				43
			],
			[
				-119,
				47
			],
			[
				-16,
				6
			],
			[
				-94,
				7
			],
			[
				-52,
				3
			],
			[
				-297,
				21
			],
			[
				-159,
				134
			],
			[
				-29,
				126
			],
			[
				-5,
				21
			],
			[
				-19,
				84
			],
			[
				0,
				0
			]
		],
		[
			[
				4886,
				26460
			],
			[
				-5,
				120
			],
			[
				-1,
				40
			],
			[
				-2,
				55
			],
			[
				-2,
				37
			],
			[
				0,
				15
			],
			[
				-1,
				12
			],
			[
				32,
				-3
			],
			[
				26,
				-2
			],
			[
				45,
				-3
			],
			[
				116,
				-9
			],
			[
				118,
				60
			],
			[
				72,
				-62
			],
			[
				153,
				0
			],
			[
				1,
				51
			],
			[
				1,
				63
			],
			[
				0,
				15
			],
			[
				4,
				89
			],
			[
				82,
				26
			]
		],
		[
			[
				5525,
				26964
			],
			[
				74,
				-73
			],
			[
				76,
				55
			],
			[
				52,
				-37
			],
			[
				4,
				13
			],
			[
				9,
				30
			],
			[
				97,
				4
			],
			[
				11,
				41
			],
			[
				6,
				26
			],
			[
				4,
				13
			],
			[
				104,
				92
			],
			[
				136,
				28
			],
			[
				119,
				-63
			],
			[
				126,
				3
			],
			[
				138,
				112
			]
		],
		[
			[
				8532,
				1196
			],
			[
				-8,
				87
			],
			[
				-95,
				141
			],
			[
				40,
				55
			],
			[
				-49,
				84
			],
			[
				18,
				40
			],
			[
				-129,
				130
			]
		],
		[
			[
				10749,
				1826
			],
			[
				-69,
				-271
			],
			[
				-16,
				-14
			],
			[
				-13,
				-11
			],
			[
				-50,
				-43
			],
			[
				-48,
				-150
			],
			[
				38,
				-27
			],
			[
				5,
				-84
			],
			[
				2,
				-44
			],
			[
				68,
				-36
			],
			[
				0,
				0
			]
		],
		[
			[
				9892,
				762
			],
			[
				0,
				0
			],
			[
				-18,
				31
			],
			[
				-72,
				124
			]
		],
		[
			[
				9802,
				917
			],
			[
				-16,
				243
			],
			[
				9,
				6
			],
			[
				39,
				29
			],
			[
				-8,
				23
			],
			[
				-71,
				200
			],
			[
				-41,
				0
			],
			[
				-61,
				150
			],
			[
				40,
				241
			]
		],
		[
			[
				10243,
				2101
			],
			[
				187,
				10
			],
			[
				35,
				-88
			],
			[
				95,
				95
			],
			[
				53,
				-46
			],
			[
				24,
				-21
			],
			[
				-47,
				-116
			],
			[
				5,
				-3
			],
			[
				3,
				-2
			],
			[
				39,
				-27
			],
			[
				112,
				-77
			]
		],
		[
			[
				12387,
				4510
			],
			[
				15,
				-75
			],
			[
				-75,
				-171
			],
			[
				80,
				-57
			]
		],
		[
			[
				12407,
				4207
			],
			[
				-50,
				-423
			],
			[
				-83,
				-126
			],
			[
				-61,
				12
			],
			[
				-90,
				-101
			],
			[
				31,
				-131
			],
			[
				1,
				-2
			],
			[
				-134,
				-23
			],
			[
				-39,
				-7
			],
			[
				-2,
				-13
			],
			[
				-21,
				-131
			],
			[
				-6,
				4
			],
			[
				-71,
				49
			],
			[
				-65,
				-14
			],
			[
				-42,
				-38
			],
			[
				-31,
				37
			],
			[
				-26,
				213
			],
			[
				-42,
				-10
			],
			[
				-33,
				78
			],
			[
				-20,
				-66
			]
		],
		[
			[
				11623,
				3515
			],
			[
				-94,
				-96
			],
			[
				-66,
				64
			],
			[
				-41,
				-90
			],
			[
				-68,
				19
			]
		],
		[
			[
				10076,
				4995
			],
			[
				201,
				-21
			],
			[
				27,
				-3
			],
			[
				274,
				-28
			],
			[
				19,
				19
			],
			[
				130,
				131
			],
			[
				101,
				-151
			],
			[
				94,
				3
			],
			[
				113,
				3
			],
			[
				70,
				-126
			],
			[
				96,
				98
			],
			[
				13,
				-42
			],
			[
				45,
				-151
			],
			[
				1,
				-5
			],
			[
				6,
				-21
			],
			[
				10,
				-32
			],
			[
				-28,
				-44
			],
			[
				62,
				-19
			],
			[
				24,
				-8
			],
			[
				10,
				-2
			],
			[
				17,
				-59
			],
			[
				-7,
				-32
			],
			[
				-5,
				-19
			],
			[
				-5,
				-20
			],
			[
				0,
				-3
			],
			[
				1,
				0
			],
			[
				5,
				-2
			],
			[
				82,
				-38
			],
			[
				76,
				59
			],
			[
				60,
				130
			],
			[
				56,
				-26
			],
			[
				-64,
				57
			],
			[
				-22,
				99
			],
			[
				91,
				45
			],
			[
				224,
				-80
			],
			[
				129,
				-46
			],
			[
				3,
				-1
			],
			[
				111,
				-40
			],
			[
				92,
				-150
			],
			[
				19,
				-32
			],
			[
				-14,
				-44
			],
			[
				-1,
				-4
			],
			[
				48,
				-27
			],
			[
				1,
				-1
			],
			[
				7,
				7
			],
			[
				139,
				141
			]
		],
		[
			[
				11902,
				8641
			],
			[
				-152,
				32
			],
			[
				-58,
				12
			],
			[
				-12,
				3
			],
			[
				-5,
				1
			],
			[
				-88,
				119
			],
			[
				-38,
				-4
			],
			[
				-171,
				-18
			],
			[
				-127,
				-14
			],
			[
				-70,
				-7
			]
		],
		[
			[
				11181,
				8765
			],
			[
				-50,
				38
			],
			[
				-156,
				119
			],
			[
				-14,
				15
			],
			[
				-357,
				387
			],
			[
				-54,
				58
			],
			[
				-2,
				3
			],
			[
				-5,
				5
			]
		],
		[
			[
				10543,
				9390
			],
			[
				19,
				25
			],
			[
				10,
				13
			],
			[
				34,
				44
			],
			[
				34,
				43
			],
			[
				69,
				-5
			],
			[
				17,
				-1
			],
			[
				128,
				132
			],
			[
				-2,
				16
			],
			[
				-4,
				55
			],
			[
				-3,
				36
			],
			[
				228,
				-51
			],
			[
				15,
				29
			],
			[
				13,
				27
			],
			[
				1,
				4
			],
			[
				13,
				149
			],
			[
				-139,
				35
			],
			[
				-51,
				271
			],
			[
				71,
				81
			],
			[
				7,
				1
			],
			[
				37,
				4
			],
			[
				56,
				7
			],
			[
				-1,
				12
			],
			[
				-2,
				68
			],
			[
				-10,
				230
			],
			[
				56,
				113
			],
			[
				-26,
				91
			],
			[
				-90,
				57
			]
		],
		[
			[
				11023,
				10876
			],
			[
				57,
				21
			],
			[
				129,
				-85
			],
			[
				38,
				-184
			],
			[
				151,
				-23
			],
			[
				107,
				-98
			],
			[
				44,
				24
			],
			[
				66,
				-77
			],
			[
				52,
				-240
			],
			[
				35,
				-61
			],
			[
				39,
				25
			],
			[
				8,
				-24
			],
			[
				35,
				-107
			],
			[
				25,
				4
			],
			[
				159,
				24
			],
			[
				3,
				-279
			],
			[
				68,
				23
			],
			[
				-2,
				-101
			],
			[
				-4,
				-122
			],
			[
				-2,
				-69
			],
			[
				177,
				27
			],
			[
				128,
				20
			],
			[
				19,
				57
			],
			[
				19,
				55
			],
			[
				42,
				-48
			],
			[
				50,
				-57
			],
			[
				2,
				-14
			],
			[
				9,
				-56
			],
			[
				1,
				-2
			],
			[
				1,
				-1
			],
			[
				85,
				-76
			],
			[
				211,
				-51
			]
		],
		[
			[
				12546,
				12766
			],
			[
				14,
				-66
			],
			[
				10,
				-3
			],
			[
				124,
				-38
			],
			[
				1,
				-19
			],
			[
				20,
				-195
			],
			[
				63,
				-69
			],
			[
				1,
				-12
			],
			[
				4,
				-171
			],
			[
				48,
				-49
			],
			[
				-57,
				-72
			],
			[
				79,
				-95
			],
			[
				0,
				-67
			],
			[
				17,
				-278
			],
			[
				-25,
				-7
			],
			[
				-27,
				-7
			],
			[
				-63,
				-9
			],
			[
				-2,
				0
			],
			[
				0,
				-3
			],
			[
				21,
				-99
			],
			[
				1,
				-4
			],
			[
				36,
				-24
			],
			[
				9,
				7
			],
			[
				89,
				65
			],
			[
				237,
				-160
			],
			[
				44,
				-248
			],
			[
				1,
				-5
			],
			[
				-6,
				-82
			],
			[
				-5,
				-53
			],
			[
				-113,
				-105
			],
			[
				-109,
				-73
			],
			[
				-90,
				-61
			],
			[
				-178,
				-119
			],
			[
				-17,
				-11
			],
			[
				-87,
				-23
			],
			[
				-110,
				-29
			]
		],
		[
			[
				11235,
				12401
			],
			[
				19,
				29
			],
			[
				19,
				25
			],
			[
				24,
				22
			],
			[
				233,
				210
			],
			[
				23,
				20
			],
			[
				178,
				98
			],
			[
				180,
				-67
			],
			[
				45,
				-34
			],
			[
				123,
				-95
			],
			[
				37,
				29
			],
			[
				9,
				6
			],
			[
				66,
				50
			],
			[
				81,
				0
			],
			[
				56,
				0
			],
			[
				78,
				1
			],
			[
				-19,
				90
			],
			[
				68,
				-27
			],
			[
				43,
				-17
			],
			[
				48,
				25
			]
		],
		[
			[
				13693,
				12618
			],
			[
				-85,
				-184
			],
			[
				-7,
				-15
			],
			[
				-46,
				-14
			],
			[
				-21,
				-6
			],
			[
				-20,
				-102
			],
			[
				-13,
				0
			],
			[
				-74,
				-2
			],
			[
				-48,
				-2
			],
			[
				-1,
				0
			],
			[
				-14,
				-98
			],
			[
				-3,
				-19
			],
			[
				-11,
				9
			],
			[
				-33,
				26
			],
			[
				-55,
				-22
			],
			[
				-9,
				-4
			],
			[
				-2,
				4
			],
			[
				-12,
				25
			],
			[
				-72,
				151
			],
			[
				19,
				256
			],
			[
				-169,
				146
			],
			[
				-151,
				337
			],
			[
				-34,
				-22
			],
			[
				-7,
				-4
			],
			[
				-24,
				-16
			],
			[
				-24,
				-14
			],
			[
				-13,
				-9
			],
			[
				-36,
				-114
			],
			[
				-16,
				-53
			],
			[
				-56,
				-35
			],
			[
				-110,
				-71
			]
		],
		[
			[
				8573,
				14469
			],
			[
				-120,
				101
			],
			[
				-233,
				71
			],
			[
				-272,
				40
			],
			[
				-173,
				26
			],
			[
				43,
				175
			],
			[
				-29,
				180
			],
			[
				-8,
				50
			],
			[
				-96,
				38
			],
			[
				-30,
				12
			],
			[
				-64,
				126
			],
			[
				8,
				15
			],
			[
				33,
				64
			],
			[
				14,
				27
			],
			[
				-45,
				168
			],
			[
				52,
				-12
			],
			[
				191,
				-45
			],
			[
				-7,
				117
			],
			[
				-145,
				44
			],
			[
				-29,
				9
			],
			[
				-66,
				52
			],
			[
				-83,
				65
			],
			[
				-93,
				207
			],
			[
				25,
				48
			],
			[
				31,
				58
			],
			[
				-12,
				46
			],
			[
				-2,
				6
			],
			[
				-10,
				43
			],
			[
				-97,
				-36
			],
			[
				-26,
				-10
			],
			[
				-71,
				4
			],
			[
				-210,
				10
			],
			[
				-5,
				126
			],
			[
				0,
				6
			],
			[
				68,
				27
			],
			[
				30,
				12
			],
			[
				17,
				57
			],
			[
				56,
				187
			],
			[
				-69,
				57
			],
			[
				-39,
				-3
			],
			[
				-262,
				-16
			],
			[
				-48,
				128
			],
			[
				-19,
				49
			],
			[
				-15,
				38
			],
			[
				-114,
				42
			],
			[
				-14,
				5
			],
			[
				3,
				31
			],
			[
				10,
				78
			],
			[
				3,
				30
			],
			[
				0,
				0
			]
		],
		[
			[
				10240,
				19877
			],
			[
				360,
				-128
			],
			[
				525,
				-50
			],
			[
				8,
				-122
			],
			[
				3,
				-49
			],
			[
				3,
				-48
			],
			[
				157,
				-7
			],
			[
				11,
				0
			],
			[
				13,
				9
			],
			[
				42,
				30
			],
			[
				-1,
				-12
			],
			[
				-1,
				-21
			],
			[
				71,
				-60
			],
			[
				89,
				-75
			],
			[
				7,
				-208
			],
			[
				235,
				132
			],
			[
				92,
				-122
			],
			[
				64,
				-37
			],
			[
				4,
				-2
			],
			[
				142,
				-83
			],
			[
				116,
				-12
			],
			[
				102,
				-11
			],
			[
				1,
				0
			]
		],
		[
			[
				12283,
				19001
			],
			[
				1,
				-1
			],
			[
				30,
				-153
			],
			[
				55,
				-21
			],
			[
				25,
				-46
			],
			[
				35,
				-62
			],
			[
				33,
				-60
			],
			[
				3,
				-36
			],
			[
				16,
				-196
			],
			[
				1,
				-7
			],
			[
				17,
				-31
			],
			[
				18,
				-34
			],
			[
				11,
				-19
			],
			[
				49,
				-90
			],
			[
				82,
				-152
			]
		],
		[
			[
				12659,
				18093
			],
			[
				-158,
				-267
			],
			[
				-118,
				-67
			],
			[
				-146,
				-82
			],
			[
				94,
				-85
			],
			[
				-87,
				-92
			],
			[
				-11,
				-33
			],
			[
				-62,
				-185
			]
		],
		[
			[
				11534,
				17102
			],
			[
				-254,
				-103
			],
			[
				-122,
				188
			],
			[
				36,
				266
			],
			[
				117,
				41
			],
			[
				10,
				4
			],
			[
				-4,
				90
			],
			[
				-1,
				11
			],
			[
				-37,
				14
			],
			[
				32,
				63
			],
			[
				9,
				16
			],
			[
				13,
				26
			],
			[
				0,
				0
			],
			[
				45,
				6
			],
			[
				4,
				27
			],
			[
				4,
				30
			],
			[
				8,
				56
			],
			[
				-28,
				162
			],
			[
				-223,
				220
			],
			[
				0,
				31
			],
			[
				0,
				3
			],
			[
				-149,
				47
			],
			[
				-85,
				28
			],
			[
				38,
				12
			],
			[
				-47,
				25
			],
			[
				-12,
				169
			],
			[
				-3,
				0
			],
			[
				-84,
				12
			],
			[
				0,
				0
			],
			[
				-185,
				29
			],
			[
				-26,
				78
			],
			[
				31,
				27
			],
			[
				1,
				1
			],
			[
				-4,
				-1
			],
			[
				-145,
				-13
			],
			[
				-37,
				155
			],
			[
				-98,
				54
			],
			[
				-4,
				3
			],
			[
				-37,
				20
			],
			[
				1,
				52
			],
			[
				27,
				-32
			],
			[
				11,
				-13
			],
			[
				-8,
				21
			],
			[
				-11,
				31
			],
			[
				-162,
				100
			],
			[
				-35,
				-38
			],
			[
				16,
				71
			],
			[
				44,
				-39
			],
			[
				-23,
				108
			],
			[
				-39,
				-14
			],
			[
				-41,
				103
			],
			[
				-149,
				41
			],
			[
				-9,
				28
			],
			[
				-13,
				36
			],
			[
				-59,
				166
			],
			[
				-51,
				-80
			],
			[
				-357,
				259
			]
		],
		[
			[
				9364,
				19527
			],
			[
				-192,
				107
			],
			[
				-247,
				375
			],
			[
				-287,
				308
			],
			[
				-107,
				20
			],
			[
				-163,
				165
			],
			[
				-75,
				-35
			],
			[
				-49,
				-24
			],
			[
				-43,
				20
			],
			[
				-24,
				11
			],
			[
				-9,
				4
			],
			[
				-1,
				5
			],
			[
				-38,
				144
			],
			[
				-30,
				115
			],
			[
				30,
				151
			],
			[
				-77,
				-41
			],
			[
				-23,
				-12
			],
			[
				-71,
				-38
			],
			[
				-154,
				54
			],
			[
				-81,
				28
			],
			[
				-55,
				102
			],
			[
				-36,
				68
			],
			[
				-115,
				2
			],
			[
				-152,
				-140
			],
			[
				0,
				2
			],
			[
				-23,
				68
			],
			[
				-23,
				30
			],
			[
				-47,
				0
			],
			[
				-24,
				-1
			]
		],
		[
			[
				8563,
				21844
			],
			[
				2,
				-5
			],
			[
				16,
				-36
			],
			[
				14,
				-33
			],
			[
				-10,
				-23
			],
			[
				-57,
				-140
			],
			[
				186,
				-26
			],
			[
				161,
				-23
			],
			[
				34,
				-58
			],
			[
				41,
				-72
			],
			[
				131,
				-69
			],
			[
				471,
				65
			],
			[
				58,
				45
			],
			[
				-93,
				106
			],
			[
				-47,
				53
			],
			[
				-5,
				5
			],
			[
				4,
				3
			],
			[
				148,
				98
			],
			[
				191,
				32
			],
			[
				57,
				220
			],
			[
				132,
				41
			],
			[
				-50,
				68
			],
			[
				10,
				72
			],
			[
				180,
				37
			]
		],
		[
			[
				12887,
				19674
			],
			[
				-208,
				41
			],
			[
				-67,
				13
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				14,
				-96
			],
			[
				-257,
				-473
			],
			[
				-9,
				-16
			],
			[
				-10,
				-19
			],
			[
				-16,
				-29
			],
			[
				-51,
				-94
			]
		],
		[
			[
				7805,
				30710
			],
			[
				-7,
				47
			],
			[
				-16,
				113
			],
			[
				104,
				114
			],
			[
				9,
				10
			],
			[
				25,
				27
			],
			[
				21,
				4
			],
			[
				51,
				8
			],
			[
				8,
				1
			],
			[
				1,
				54
			],
			[
				-167,
				248
			],
			[
				-10,
				4
			],
			[
				-14,
				7
			],
			[
				-95,
				41
			],
			[
				31,
				177
			],
			[
				6,
				34
			],
			[
				0,
				0
			]
		],
		[
			[
				9332,
				32271
			],
			[
				2,
				-4
			],
			[
				21,
				-63
			],
			[
				32,
				-91
			],
			[
				2,
				-6
			],
			[
				88,
				15
			],
			[
				123,
				-108
			],
			[
				-53,
				-257
			],
			[
				122,
				-160
			],
			[
				62,
				-9
			],
			[
				2,
				0
			],
			[
				33,
				68
			],
			[
				72,
				-78
			],
			[
				3,
				-4
			],
			[
				270,
				3
			],
			[
				162,
				-74
			],
			[
				54,
				-77
			],
			[
				32,
				-47
			],
			[
				-100,
				-110
			],
			[
				154,
				-200
			],
			[
				-81,
				-15
			],
			[
				-96,
				-17
			],
			[
				-8,
				-2
			],
			[
				-1,
				-2
			],
			[
				-47,
				-110
			],
			[
				-41,
				-97
			],
			[
				71,
				-165
			],
			[
				16,
				-36
			],
			[
				-7,
				-28
			],
			[
				-25,
				-108
			],
			[
				32,
				-24
			],
			[
				31,
				-23
			],
			[
				133,
				-102
			],
			[
				38,
				-28
			],
			[
				25,
				-19
			],
			[
				44,
				-34
			],
			[
				65,
				-168
			],
			[
				145,
				-94
			],
			[
				30,
				-326
			]
		],
		[
			[
				13036,
				4163
			],
			[
				0,
				0
			],
			[
				-101,
				-46
			],
			[
				-1,
				0
			]
		],
		[
			[
				12934,
				4116
			],
			[
				-13,
				-139
			],
			[
				-147,
				-92
			],
			[
				-73,
				129
			],
			[
				35,
				100
			],
			[
				-34,
				38
			],
			[
				-123,
				137
			],
			[
				-71,
				-111
			],
			[
				-101,
				29
			]
		],
		[
			[
				12387,
				4510
			],
			[
				20,
				123
			]
		],
		[
			[
				13028,
				4991
			],
			[
				146,
				-86
			],
			[
				13,
				-8
			],
			[
				167,
				60
			],
			[
				8,
				-93
			],
			[
				2,
				-19
			],
			[
				7,
				-12
			],
			[
				130,
				-208
			],
			[
				0,
				0
			]
		],
		[
			[
				13631,
				4665
			],
			[
				3,
				-2
			],
			[
				0,
				0
			]
		],
		[
			[
				13708,
				5830
			],
			[
				-206,
				-223
			],
			[
				-44,
				-22
			],
			[
				-55,
				-28
			],
			[
				-26,
				50
			],
			[
				-7,
				-14
			],
			[
				-109,
				-193
			],
			[
				-14,
				-24
			],
			[
				-51,
				6
			],
			[
				-21,
				143
			]
		],
		[
			[
				15015,
				9881
			],
			[
				-54,
				-90
			],
			[
				114,
				-222
			],
			[
				-31,
				-176
			],
			[
				-159,
				-19
			],
			[
				-3,
				-142
			],
			[
				21,
				-122
			],
			[
				158,
				-230
			],
			[
				74,
				-68
			],
			[
				47,
				-71
			],
			[
				22,
				-33
			],
			[
				82,
				3
			],
			[
				74,
				-132
			],
			[
				122,
				-218
			]
		],
		[
			[
				15482,
				8361
			],
			[
				-96,
				-173
			],
			[
				-102,
				-185
			],
			[
				-30,
				57
			],
			[
				-10,
				19
			],
			[
				-44,
				-23
			],
			[
				-40,
				-20
			],
			[
				-29,
				41
			],
			[
				-10,
				-10
			],
			[
				-27,
				-27
			],
			[
				-2,
				-2
			],
			[
				-48,
				-47
			],
			[
				-50,
				-50
			],
			[
				-11,
				-69
			],
			[
				-3,
				-19
			],
			[
				-7,
				-45
			]
		],
		[
			[
				14704,
				7827
			],
			[
				-17,
				-21
			],
			[
				-119,
				-139
			],
			[
				-6,
				-106
			],
			[
				37,
				-47
			],
			[
				-216,
				-218
			],
			[
				-49,
				41
			]
		],
		[
			[
				15357,
				13099
			],
			[
				-24,
				63
			],
			[
				-49,
				188
			],
			[
				115,
				93
			],
			[
				3,
				49
			],
			[
				33,
				21
			],
			[
				10,
				6
			],
			[
				8,
				9
			],
			[
				87,
				-18
			],
			[
				7,
				-1
			],
			[
				1,
				-5
			],
			[
				20,
				-62
			],
			[
				6,
				7
			],
			[
				5,
				5
			],
			[
				34,
				39
			],
			[
				13,
				15
			],
			[
				8,
				-35
			],
			[
				1,
				-4
			],
			[
				1,
				2
			],
			[
				81,
				120
			],
			[
				-300,
				688
			]
		],
		[
			[
				15417,
				14279
			],
			[
				11,
				16
			],
			[
				109,
				124
			],
			[
				11,
				11
			],
			[
				38,
				37
			],
			[
				28,
				26
			],
			[
				176,
				170
			],
			[
				-11,
				245
			]
		],
		[
			[
				14090,
				18555
			],
			[
				-63,
				11
			],
			[
				-197,
				-142
			],
			[
				-54,
				-39
			],
			[
				-168,
				-122
			],
			[
				-67,
				35
			],
			[
				-105,
				-71
			],
			[
				-26,
				-54
			],
			[
				-23,
				-45
			],
			[
				-51,
				-13
			],
			[
				-15,
				-4
			],
			[
				-12,
				62
			],
			[
				-12,
				60
			],
			[
				-4,
				22
			],
			[
				-35,
				46
			],
			[
				-1,
				2
			],
			[
				-23,
				31
			],
			[
				-8,
				10
			],
			[
				-6,
				-4
			],
			[
				-27,
				-19
			],
			[
				-14,
				-9
			],
			[
				-37,
				74
			],
			[
				-157,
				-32
			],
			[
				-261,
				-118
			],
			[
				-65,
				-143
			]
		],
		[
			[
				13416,
				16477
			],
			[
				29,
				10
			],
			[
				89,
				32
			],
			[
				36,
				12
			],
			[
				55,
				40
			],
			[
				67,
				47
			],
			[
				152,
				108
			],
			[
				66,
				131
			],
			[
				8,
				14
			],
			[
				13,
				26
			],
			[
				17,
				33
			],
			[
				30,
				60
			],
			[
				93,
				183
			],
			[
				40,
				160
			],
			[
				69,
				279
			],
			[
				7,
				26
			],
			[
				21,
				6
			],
			[
				34,
				10
			],
			[
				126,
				36
			],
			[
				1,
				0
			]
		],
		[
			[
				15689,
				26758
			],
			[
				-126,
				55
			],
			[
				-6,
				3
			],
			[
				-22,
				0
			],
			[
				-396,
				6
			],
			[
				-125,
				238
			],
			[
				-142,
				62
			],
			[
				-258,
				-201
			],
			[
				-126,
				-98
			],
			[
				-57,
				-45
			],
			[
				-58,
				-46
			],
			[
				-20,
				-2
			],
			[
				-14,
				-1
			],
			[
				-43,
				-4
			],
			[
				-1,
				-1
			],
			[
				-17,
				-28
			],
			[
				-6,
				-10
			],
			[
				-26,
				-44
			],
			[
				-2,
				-4
			],
			[
				-125,
				15
			],
			[
				-35,
				5
			]
		],
		[
			[
				14084,
				26658
			],
			[
				-90,
				68
			],
			[
				-58,
				44
			],
			[
				-147,
				29
			],
			[
				-37,
				73
			],
			[
				-17,
				33
			],
			[
				-37,
				19
			],
			[
				-45,
				23
			],
			[
				-1,
				0
			],
			[
				-3,
				18
			],
			[
				-15,
				74
			],
			[
				-85,
				45
			],
			[
				-62,
				34
			],
			[
				-32,
				17
			],
			[
				-278,
				398
			]
		],
		[
			[
				13177,
				27533
			],
			[
				-7,
				90
			],
			[
				-7,
				111
			],
			[
				110,
				23
			],
			[
				32,
				7
			],
			[
				19,
				91
			],
			[
				12,
				59
			],
			[
				0,
				2
			],
			[
				52,
				50
			],
			[
				5,
				5
			],
			[
				47,
				43
			],
			[
				5,
				6
			],
			[
				1,
				10
			],
			[
				4,
				39
			],
			[
				7,
				60
			],
			[
				-87,
				43
			],
			[
				1,
				4
			],
			[
				45,
				98
			],
			[
				1,
				1
			],
			[
				85,
				47
			],
			[
				47,
				25
			],
			[
				49,
				27
			],
			[
				210,
				263
			],
			[
				24,
				14
			],
			[
				166,
				99
			],
			[
				96,
				387
			],
			[
				-147,
				229
			],
			[
				-65,
				102
			],
			[
				-82,
				128
			],
			[
				-22,
				122
			],
			[
				-5,
				31
			]
		],
		[
			[
				11351,
				33349
			],
			[
				0,
				0
			],
			[
				-6,
				-9
			],
			[
				-103,
				-129
			],
			[
				116,
				-159
			],
			[
				3,
				-4
			],
			[
				24,
				-33
			],
			[
				60,
				-282
			],
			[
				-181,
				129
			],
			[
				-64,
				-33
			],
			[
				-21,
				-10
			],
			[
				-43,
				-22
			]
		],
		[
			[
				13085,
				35009
			],
			[
				32,
				-83
			],
			[
				-26,
				-17
			],
			[
				-79,
				-52
			],
			[
				30,
				-132
			],
			[
				2,
				-11
			],
			[
				128,
				10
			],
			[
				99,
				96
			],
			[
				20,
				3
			],
			[
				90,
				13
			],
			[
				3,
				0
			],
			[
				8,
				-31
			],
			[
				55,
				-203
			],
			[
				23,
				-84
			],
			[
				6,
				-24
			],
			[
				-2,
				-5
			],
			[
				-28,
				-70
			],
			[
				0,
				0
			],
			[
				0,
				-1
			],
			[
				8,
				-5
			],
			[
				1,
				-1
			],
			[
				148,
				-103
			],
			[
				-7,
				-13
			],
			[
				-8,
				-18
			],
			[
				-27,
				-60
			],
			[
				24,
				-10
			],
			[
				49,
				-21
			],
			[
				24,
				-10
			],
			[
				9,
				-4
			],
			[
				-13,
				-61
			],
			[
				-19,
				16
			],
			[
				-13,
				11
			],
			[
				-41,
				34
			],
			[
				-2,
				-1
			],
			[
				-17,
				-22
			],
			[
				-84,
				-101
			],
			[
				4,
				-93
			],
			[
				38,
				-20
			],
			[
				6,
				-3
			],
			[
				-6,
				0
			],
			[
				-40,
				5
			],
			[
				16,
				-102
			],
			[
				6,
				-34
			],
			[
				6,
				-42
			],
			[
				2,
				-1
			],
			[
				67,
				-47
			],
			[
				52,
				-36
			],
			[
				28,
				-19
			],
			[
				35,
				21
			],
			[
				53,
				33
			],
			[
				191,
				5
			],
			[
				124,
				-140
			],
			[
				14,
				-96
			],
			[
				-79,
				-95
			],
			[
				85,
				-64
			],
			[
				50,
				-38
			],
			[
				-7,
				-110
			],
			[
				0,
				-3
			],
			[
				-4,
				-64
			],
			[
				-3,
				-46
			],
			[
				0,
				-3
			],
			[
				-7,
				-107
			],
			[
				-2,
				-27
			],
			[
				22,
				-73
			],
			[
				64,
				-19
			],
			[
				38,
				-12
			]
		],
		[
			[
				12890,
				32258
			],
			[
				-146,
				119
			],
			[
				-48,
				40
			],
			[
				-46,
				36
			],
			[
				-84,
				-21
			],
			[
				-72,
				40
			],
			[
				-110,
				62
			],
			[
				-112,
				-1
			],
			[
				-4,
				0
			],
			[
				0,
				2
			],
			[
				-4,
				68
			],
			[
				-145,
				1
			],
			[
				-23,
				1
			],
			[
				-20,
				19
			],
			[
				-93,
				87
			],
			[
				-43,
				119
			],
			[
				27,
				43
			],
			[
				-89,
				173
			],
			[
				41,
				29
			],
			[
				27,
				20
			],
			[
				33,
				24
			],
			[
				0,
				0
			]
		],
		[
			[
				10896,
				34353
			],
			[
				59,
				65
			],
			[
				55,
				61
			],
			[
				99,
				43
			],
			[
				29,
				-59
			],
			[
				193,
				145
			],
			[
				34,
				-35
			],
			[
				34,
				-34
			],
			[
				7,
				21
			],
			[
				25,
				68
			],
			[
				4,
				11
			],
			[
				29,
				14
			],
			[
				28,
				14
			],
			[
				-1,
				9
			],
			[
				-6,
				47
			],
			[
				83,
				40
			],
			[
				16,
				-53
			],
			[
				28,
				-94
			],
			[
				6,
				-21
			],
			[
				12,
				-41
			],
			[
				41,
				63
			],
			[
				16,
				24
			],
			[
				4,
				7
			],
			[
				6,
				-3
			],
			[
				14,
				-10
			],
			[
				54,
				-34
			],
			[
				232,
				86
			],
			[
				72,
				28
			],
			[
				15,
				-57
			],
			[
				32,
				23
			],
			[
				65,
				48
			],
			[
				174,
				128
			],
			[
				66,
				49
			],
			[
				129,
				178
			]
		],
		[
			[
				15336,
				37075
			],
			[
				-188,
				-203
			],
			[
				-238,
				-257
			],
			[
				-31,
				-73
			],
			[
				-65,
				-150
			],
			[
				-18,
				-44
			],
			[
				-5,
				-11
			],
			[
				-208,
				-118
			],
			[
				-176,
				-100
			]
		],
		[
			[
				14407,
				36119
			],
			[
				-9,
				11
			],
			[
				-64,
				71
			],
			[
				-51,
				-27
			],
			[
				-25,
				48
			],
			[
				-28,
				54
			],
			[
				-72,
				-20
			],
			[
				-52,
				-14
			],
			[
				-91,
				-26
			],
			[
				-79,
				68
			],
			[
				-3,
				3
			],
			[
				-77,
				67
			],
			[
				-53,
				145
			],
			[
				-4,
				12
			],
			[
				0,
				0
			]
		],
		[
			[
				17556,
				8586
			],
			[
				0,
				0
			],
			[
				-27,
				43
			],
			[
				0,
				0
			]
		],
		[
			[
				17499,
				8679
			],
			[
				-1,
				1
			]
		],
		[
			[
				17276,
				8763
			],
			[
				0,
				0
			],
			[
				-33,
				39
			],
			[
				-3,
				4
			],
			[
				-20,
				-64
			],
			[
				-62,
				-8
			],
			[
				-17,
				-2
			],
			[
				-5,
				42
			],
			[
				-6,
				45
			],
			[
				-7,
				-3
			],
			[
				-56,
				-18
			],
			[
				7,
				48
			],
			[
				2,
				15
			],
			[
				0,
				6
			],
			[
				2,
				19
			],
			[
				1,
				5
			],
			[
				-73,
				-5
			],
			[
				-2,
				11
			],
			[
				-17,
				77
			],
			[
				14,
				12
			],
			[
				8,
				7
			],
			[
				-26,
				64
			]
		],
		[
			[
				16983,
				9057
			],
			[
				34,
				87
			],
			[
				42,
				-36
			],
			[
				22,
				53
			],
			[
				40,
				1
			],
			[
				11,
				1
			],
			[
				28,
				1
			],
			[
				19,
				0
			],
			[
				17,
				1
			],
			[
				-2,
				35
			],
			[
				-1,
				35
			],
			[
				23,
				10
			],
			[
				18,
				7
			],
			[
				-19,
				104
			],
			[
				51,
				-2
			],
			[
				10,
				-32
			],
			[
				3,
				-7
			],
			[
				4,
				-14
			],
			[
				41,
				72
			]
		],
		[
			[
				17324,
				9373
			],
			[
				59,
				28
			],
			[
				4,
				3
			],
			[
				31,
				15
			],
			[
				46,
				-45
			],
			[
				36,
				-36
			],
			[
				26,
				-25
			],
			[
				32,
				24
			],
			[
				15,
				11
			],
			[
				5,
				3
			],
			[
				0,
				0
			]
		],
		[
			[
				17416,
				8736
			],
			[
				0,
				0
			],
			[
				-18,
				-1
			],
			[
				-19,
				-2
			],
			[
				-24,
				51
			],
			[
				0,
				0
			]
		],
		[
			[
				18473,
				9838
			],
			[
				38,
				-39
			],
			[
				2,
				-2
			],
			[
				44,
				-46
			],
			[
				36,
				-37
			],
			[
				28,
				-29
			]
		],
		[
			[
				18116,
				9832
			],
			[
				3,
				0
			],
			[
				3,
				-1
			],
			[
				9,
				-1
			],
			[
				66,
				-7
			],
			[
				7,
				18
			],
			[
				28,
				70
			],
			[
				9,
				4
			],
			[
				19,
				8
			],
			[
				17,
				8
			],
			[
				98,
				44
			],
			[
				11,
				4
			],
			[
				-35,
				-104
			],
			[
				-19,
				-59
			],
			[
				-6,
				-19
			],
			[
				77,
				-34
			],
			[
				40,
				43
			],
			[
				8,
				8
			],
			[
				22,
				24
			]
		],
		[
			[
				16574,
				10903
			],
			[
				-43,
				-97
			],
			[
				-8,
				-18
			],
			[
				97,
				-216
			],
			[
				1,
				-23
			],
			[
				6,
				-102
			],
			[
				1,
				-8
			],
			[
				1,
				-21
			],
			[
				-12,
				-68
			],
			[
				-65,
				3
			],
			[
				-33,
				-68
			],
			[
				56,
				-145
			]
		],
		[
			[
				16575,
				10140
			],
			[
				17,
				-100
			],
			[
				1,
				-9
			],
			[
				-31,
				6
			],
			[
				-104,
				21
			],
			[
				-123,
				24
			]
		],
		[
			[
				16481,
				14064
			],
			[
				41,
				33
			],
			[
				93,
				356
			],
			[
				80,
				16
			],
			[
				13,
				2
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				52,
				111
			],
			[
				61,
				22
			],
			[
				8,
				2
			],
			[
				6,
				3
			],
			[
				72,
				-42
			],
			[
				48,
				30
			],
			[
				40,
				24
			],
			[
				59,
				37
			],
			[
				59,
				-6
			],
			[
				5,
				-32
			],
			[
				22,
				-154
			],
			[
				32,
				-10
			],
			[
				21,
				-7
			],
			[
				12,
				-112
			],
			[
				-43,
				-28
			],
			[
				201,
				-55
			],
			[
				8,
				-73
			],
			[
				3,
				-36
			],
			[
				180,
				44
			],
			[
				33,
				-174
			]
		],
		[
			[
				19375,
				11753
			],
			[
				-32,
				-109
			],
			[
				-102,
				-59
			],
			[
				68,
				-95
			],
			[
				-42,
				-119
			],
			[
				56,
				-27
			],
			[
				-6,
				-95
			],
			[
				-3,
				-53
			],
			[
				-28,
				39
			],
			[
				-44,
				-27
			],
			[
				-2,
				-1
			],
			[
				-17,
				-74
			],
			[
				-13,
				-58
			],
			[
				42,
				-13
			],
			[
				-4,
				-54
			],
			[
				-32,
				-72
			],
			[
				-119,
				-58
			],
			[
				23,
				-90
			],
			[
				3,
				-121
			]
		],
		[
			[
				19130,
				11788
			],
			[
				-51,
				86
			],
			[
				44,
				100
			],
			[
				-5,
				9
			],
			[
				-100,
				196
			],
			[
				68,
				39
			],
			[
				31,
				33
			],
			[
				14,
				15
			],
			[
				-59,
				67
			],
			[
				28,
				123
			],
			[
				-130,
				194
			]
		],
		[
			[
				20606,
				11066
			],
			[
				-89,
				9
			],
			[
				-45,
				-39
			],
			[
				-79,
				62
			],
			[
				-28,
				23
			],
			[
				-4,
				-120
			],
			[
				-2,
				-45
			],
			[
				-13,
				66
			],
			[
				-5,
				29
			],
			[
				-46,
				-9
			],
			[
				-56,
				13
			],
			[
				-105,
				-126
			],
			[
				-44,
				-53
			],
			[
				-38,
				38
			],
			[
				-87,
				88
			],
			[
				81,
				42
			],
			[
				-24,
				53
			],
			[
				-112,
				-18
			]
		],
		[
			[
				19910,
				11079
			],
			[
				-89,
				185
			],
			[
				-4,
				13
			],
			[
				-21,
				74
			],
			[
				-75,
				103
			]
		],
		[
			[
				19721,
				11454
			],
			[
				64,
				18
			],
			[
				57,
				17
			],
			[
				47,
				14
			],
			[
				-34,
				133
			]
		],
		[
			[
				19433,
				16045
			],
			[
				48,
				-358
			],
			[
				4,
				-29
			],
			[
				6,
				-46
			],
			[
				47,
				-107
			],
			[
				11,
				-26
			],
			[
				2,
				-3
			]
		],
		[
			[
				19551,
				15476
			],
			[
				-52,
				-105
			],
			[
				-49,
				-103
			],
			[
				-33,
				-67
			],
			[
				-48,
				-12
			],
			[
				-23,
				-5
			],
			[
				-13,
				-4
			],
			[
				-22,
				-33
			],
			[
				-15,
				-50
			],
			[
				-3,
				-10
			],
			[
				29,
				-72
			],
			[
				42,
				48
			],
			[
				1,
				2
			],
			[
				2,
				-15
			],
			[
				6,
				-58
			],
			[
				-44,
				-88
			],
			[
				4,
				-10
			],
			[
				60,
				-121
			],
			[
				0,
				0
			],
			[
				34,
				-80
			],
			[
				4,
				-11
			],
			[
				-23,
				-48
			]
		],
		[
			[
				19408,
				14634
			],
			[
				-2,
				-2
			],
			[
				-63,
				-92
			],
			[
				-4,
				-6
			],
			[
				-60,
				4
			],
			[
				-8,
				-1
			],
			[
				-99,
				-16
			],
			[
				-10,
				-1
			],
			[
				4,
				148
			],
			[
				-66,
				-47
			],
			[
				-203,
				37
			]
		],
		[
			[
				18962,
				16156
			],
			[
				0,
				0
			],
			[
				57,
				-55
			],
			[
				2,
				-2
			],
			[
				175,
				33
			],
			[
				39,
				7
			],
			[
				67,
				13
			],
			[
				131,
				-107
			]
		],
		[
			[
				19369,
				44766
			],
			[
				0,
				0
			],
			[
				-4,
				0
			],
			[
				-38,
				-3
			],
			[
				-15,
				-1
			],
			[
				-50,
				-50
			],
			[
				-11,
				-11
			],
			[
				14,
				-177
			],
			[
				-16,
				-47
			],
			[
				-46,
				-133
			],
			[
				48,
				-72
			],
			[
				91,
				-137
			],
			[
				19,
				-29
			],
			[
				6,
				-6
			],
			[
				20,
				-22
			],
			[
				-141,
				-111
			],
			[
				-2,
				-33
			],
			[
				-7,
				-95
			],
			[
				73,
				6
			],
			[
				105,
				44
			],
			[
				28,
				-44
			],
			[
				3,
				-50
			],
			[
				16,
				-258
			],
			[
				1,
				-20
			],
			[
				-62,
				-48
			],
			[
				-15,
				2
			],
			[
				-138,
				20
			],
			[
				-100,
				-265
			],
			[
				-54,
				-75
			],
			[
				-49,
				-69
			],
			[
				-28,
				-39
			],
			[
				-75,
				-106
			]
		],
		[
			[
				19659,
				41952
			],
			[
				86,
				-117
			],
			[
				19,
				-25
			],
			[
				27,
				8
			],
			[
				48,
				16
			],
			[
				38,
				-51
			],
			[
				189,
				7
			],
			[
				22,
				1
			],
			[
				0,
				0
			]
		],
		[
			[
				18076,
				39752
			],
			[
				57,
				-130
			]
		],
		[
			[
				21640,
				14151
			],
			[
				46,
				109
			],
			[
				229,
				21
			],
			[
				10,
				117
			]
		],
		[
			[
				21925,
				14398
			],
			[
				40,
				-27
			],
			[
				33,
				-22
			],
			[
				57,
				59
			],
			[
				292,
				6
			],
			[
				31,
				48
			],
			[
				86,
				130
			],
			[
				36,
				29
			],
			[
				68,
				57
			],
			[
				-12,
				64
			],
			[
				75,
				11
			],
			[
				29,
				-5
			],
			[
				232,
				-16
			],
			[
				78,
				-94
			],
			[
				46,
				-200
			],
			[
				-38,
				-60
			],
			[
				-85,
				-9
			],
			[
				8,
				-72
			],
			[
				218,
				-137
			],
			[
				-17,
				-58
			],
			[
				38,
				-76
			],
			[
				37,
				-59
			],
			[
				-22,
				-98
			],
			[
				39,
				-61
			],
			[
				31,
				-68
			],
			[
				32,
				-68
			]
		],
		[
			[
				21925,
				14398
			],
			[
				-19,
				15
			],
			[
				-21,
				103
			],
			[
				17,
				19
			],
			[
				-19,
				64
			],
			[
				-10,
				69
			],
			[
				-5,
				24
			],
			[
				63,
				139
			],
			[
				-5,
				66
			],
			[
				8,
				28
			],
			[
				-1,
				34
			],
			[
				-37,
				21
			],
			[
				-10,
				36
			],
			[
				-5,
				7
			],
			[
				-25,
				34
			],
			[
				-17,
				39
			],
			[
				-10,
				26
			],
			[
				-7,
				18
			],
			[
				-4,
				10
			],
			[
				30,
				22
			],
			[
				23,
				16
			],
			[
				45,
				33
			],
			[
				-7,
				28
			],
			[
				-46,
				180
			],
			[
				105,
				88
			],
			[
				11,
				62
			],
			[
				-7,
				54
			],
			[
				-6,
				32
			],
			[
				-23,
				60
			],
			[
				-12,
				82
			],
			[
				-33,
				52
			],
			[
				-233,
				348
			]
		],
		[
			[
				23499,
				49905
			],
			[
				-106,
				-38
			],
			[
				-130,
				-47
			],
			[
				-55,
				-19
			],
			[
				-23,
				9
			]
		],
		[
			[
				23549,
				50042
			],
			[
				19,
				-73
			],
			[
				-69,
				-64
			]
		],
		[
			[
				22963,
				50498
			],
			[
				0,
				0
			],
			[
				10,
				16
			],
			[
				24,
				42
			],
			[
				87,
				150
			],
			[
				147,
				117
			],
			[
				63,
				-67
			],
			[
				2,
				-105
			],
			[
				83,
				-53
			],
			[
				-2,
				-10
			],
			[
				-24,
				-101
			],
			[
				114,
				-91
			],
			[
				76,
				-61
			],
			[
				0,
				0
			]
		],
		[
			[
				23507,
				50243
			],
			[
				69,
				-61
			],
			[
				-40,
				-80
			],
			[
				0,
				0
			]
		],
		[
			[
				33836,
				66742
			],
			[
				-85,
				-22
			],
			[
				-32,
				-8
			],
			[
				-19,
				12
			],
			[
				-47,
				30
			],
			[
				-49,
				31
			],
			[
				-52,
				-7
			],
			[
				-43,
				-6
			],
			[
				-8,
				-1
			],
			[
				-23,
				-3
			],
			[
				-62,
				-9
			],
			[
				20,
				-95
			],
			[
				6,
				-29
			],
			[
				1,
				-6
			],
			[
				-56,
				-55
			]
		],
		[
			[
				33442,
				68049
			],
			[
				0,
				0
			],
			[
				2,
				-57
			],
			[
				0,
				-1
			],
			[
				0,
				-15
			],
			[
				-54,
				-52
			],
			[
				105,
				-53
			],
			[
				1,
				-75
			],
			[
				-23,
				-7
			],
			[
				-63,
				-19
			],
			[
				-31,
				-9
			],
			[
				-37,
				-11
			],
			[
				-41,
				-13
			],
			[
				105,
				-66
			],
			[
				-23,
				-38
			],
			[
				-14,
				-22
			],
			[
				-21,
				-34
			],
			[
				170,
				-220
			],
			[
				-60,
				-128
			],
			[
				95,
				-39
			],
			[
				33,
				-14
			],
			[
				45,
				-19
			],
			[
				57,
				24
			],
			[
				62,
				-85
			],
			[
				89,
				-16
			],
			[
				3,
				-56
			],
			[
				2,
				-33
			],
			[
				80,
				-37
			],
			[
				42,
				-20
			],
			[
				-130,
				-192
			]
		],
		[
			[
				33075,
				66636
			],
			[
				0,
				0
			],
			[
				-13,
				-89
			],
			[
				-8,
				-50
			],
			[
				-2,
				-15
			],
			[
				58,
				-59
			],
			[
				-8,
				-119
			],
			[
				0,
				-8
			],
			[
				16,
				-2
			],
			[
				298,
				-44
			],
			[
				-16,
				-254
			],
			[
				-81,
				14
			],
			[
				-150,
				24
			],
			[
				-52,
				9
			],
			[
				-31,
				-30
			],
			[
				-156,
				-149
			],
			[
				-30,
				-29
			],
			[
				-11,
				9
			],
			[
				-45,
				38
			],
			[
				-52,
				44
			],
			[
				-62,
				-56
			],
			[
				-3,
				-2
			],
			[
				-66,
				-62
			],
			[
				-21,
				-19
			],
			[
				-135,
				63
			],
			[
				-42,
				57
			],
			[
				-61,
				82
			],
			[
				-140,
				-200
			],
			[
				-26,
				30
			],
			[
				-1,
				2
			],
			[
				-86,
				101
			],
			[
				-21,
				1
			],
			[
				-38,
				2
			],
			[
				-88,
				6
			],
			[
				-71,
				-104
			],
			[
				-85,
				4
			],
			[
				-45,
				2
			],
			[
				-65,
				-90
			]
		],
		[
			[
				31290,
				60953
			],
			[
				-121,
				-416
			],
			[
				-25,
				-89
			],
			[
				-15,
				-49
			],
			[
				67,
				-162
			],
			[
				-34,
				-323
			]
		],
		[
			[
				29312,
				59366
			],
			[
				82,
				78
			],
			[
				67,
				62
			],
			[
				7,
				7
			],
			[
				0,
				16
			],
			[
				-3,
				99
			],
			[
				-2,
				-1
			],
			[
				-15,
				-6
			],
			[
				-48,
				-19
			],
			[
				-36,
				-14
			],
			[
				-128,
				90
			],
			[
				-36,
				94
			],
			[
				-1,
				2
			],
			[
				204,
				138
			],
			[
				-31,
				94
			],
			[
				-98,
				50
			]
		],
		[
			[
				29274,
				60056
			],
			[
				99,
				154
			],
			[
				-80,
				72
			],
			[
				-84,
				76
			],
			[
				-13,
				12
			],
			[
				61,
				199
			],
			[
				-50,
				168
			],
			[
				30,
				182
			],
			[
				-22,
				38
			],
			[
				-21,
				36
			],
			[
				-40,
				66
			],
			[
				46,
				136
			],
			[
				-65,
				49
			],
			[
				112,
				397
			],
			[
				198,
				186
			],
			[
				-32,
				24
			],
			[
				-10,
				8
			],
			[
				-79,
				58
			],
			[
				-28,
				65
			]
		],
		[
			[
				29277,
				62026
			],
			[
				0,
				0
			],
			[
				-25,
				58
			],
			[
				-5,
				11
			],
			[
				-7,
				16
			],
			[
				9,
				122
			],
			[
				110,
				160
			]
		],
		[
			[
				29359,
				62393
			],
			[
				188,
				-128
			],
			[
				119,
				25
			],
			[
				58,
				-45
			],
			[
				66,
				-50
			],
			[
				63,
				-47
			],
			[
				345,
				173
			],
			[
				26,
				-50
			],
			[
				41,
				-81
			],
			[
				98,
				-191
			],
			[
				84,
				44
			],
			[
				78,
				-128
			],
			[
				432,
				-233
			],
			[
				40,
				-88
			],
			[
				19,
				-41
			],
			[
				109,
				-239
			],
			[
				78,
				-172
			],
			[
				54,
				-118
			],
			[
				9,
				-19
			],
			[
				24,
				-52
			]
		],
		[
			[
				38636,
				73837
			],
			[
				-3,
				-10
			],
			[
				-14,
				-46
			],
			[
				-33,
				-107
			],
			[
				-51,
				-4
			],
			[
				83,
				-64
			],
			[
				66,
				-51
			],
			[
				96,
				-73
			],
			[
				175,
				-47
			],
			[
				124,
				-33
			],
			[
				-19,
				-71
			],
			[
				-13,
				-50
			],
			[
				55,
				-102
			],
			[
				-42,
				-86
			],
			[
				206,
				-43
			],
			[
				102,
				27
			],
			[
				59,
				-27
			],
			[
				122,
				-55
			],
			[
				94,
				-43
			],
			[
				147,
				23
			],
			[
				-6,
				-107
			],
			[
				-4,
				-74
			],
			[
				-2,
				-30
			],
			[
				-2,
				-33
			],
			[
				-86,
				-114
			],
			[
				-3,
				-3
			],
			[
				21,
				-36
			],
			[
				19,
				-33
			],
			[
				-86,
				-68
			],
			[
				13,
				-132
			]
		],
		[
			[
				38900,
				72326
			],
			[
				-75,
				69
			],
			[
				-63,
				59
			],
			[
				-126,
				117
			],
			[
				-34,
				31
			],
			[
				-205,
				-24
			],
			[
				-52,
				76
			],
			[
				-70,
				-10
			],
			[
				-89,
				74
			],
			[
				98,
				98
			],
			[
				-315,
				25
			],
			[
				-19,
				91
			],
			[
				-106,
				36
			],
			[
				-55,
				82
			],
			[
				77,
				49
			],
			[
				-7,
				10
			],
			[
				-15,
				21
			],
			[
				-9,
				12
			],
			[
				-20,
				29
			]
		],
		[
			[
				37872,
				76416
			],
			[
				159,
				67
			],
			[
				-127,
				51
			],
			[
				-62,
				188
			],
			[
				193,
				68
			],
			[
				-36,
				77
			],
			[
				109,
				42
			],
			[
				-7,
				15
			],
			[
				-31,
				69
			],
			[
				-8,
				15
			],
			[
				137,
				32
			],
			[
				95,
				21
			],
			[
				113,
				26
			],
			[
				71,
				17
			]
		],
		[
			[
				38478,
				77104
			],
			[
				75,
				12
			],
			[
				250,
				41
			],
			[
				32,
				6
			],
			[
				32,
				5
			],
			[
				9,
				1
			],
			[
				43,
				7
			],
			[
				15,
				100
			],
			[
				28,
				175
			]
		],
		[
			[
				38962,
				77451
			],
			[
				201,
				-322
			],
			[
				97,
				-157
			],
			[
				17,
				-28
			],
			[
				11,
				-48
			],
			[
				14,
				-58
			],
			[
				-9,
				-5
			],
			[
				-54,
				-30
			],
			[
				-14,
				-7
			],
			[
				-1,
				-1
			],
			[
				31,
				-20
			],
			[
				55,
				-34
			],
			[
				-29,
				-68
			],
			[
				52,
				5
			],
			[
				90,
				10
			],
			[
				11,
				1
			],
			[
				0,
				-7
			],
			[
				-11,
				-148
			],
			[
				292,
				8
			],
			[
				9,
				0
			],
			[
				91,
				-100
			],
			[
				-42,
				-285
			],
			[
				0,
				0
			]
		],
		[
			[
				45961,
				77799
			],
			[
				181,
				19
			],
			[
				30,
				3
			],
			[
				304,
				31
			],
			[
				181,
				18
			],
			[
				52,
				5
			],
			[
				49,
				5
			],
			[
				0,
				0
			]
		],
		[
			[
				47269,
				78206
			],
			[
				60,
				-10
			],
			[
				13,
				-2
			],
			[
				17,
				-3
			],
			[
				12,
				-3
			],
			[
				350,
				-91
			],
			[
				57,
				-309
			],
			[
				-26,
				-136
			],
			[
				-4,
				-21
			],
			[
				79,
				-154
			],
			[
				24,
				-18
			],
			[
				106,
				-80
			],
			[
				82,
				2
			],
			[
				360,
				-183
			],
			[
				449,
				-28
			],
			[
				58,
				-160
			],
			[
				-71,
				-81
			],
			[
				290,
				-175
			],
			[
				85,
				92
			],
			[
				195,
				-181
			]
		],
		[
			[
				58987,
				79623
			],
			[
				164,
				-293
			],
			[
				48,
				-86
			],
			[
				33,
				-60
			],
			[
				53,
				44
			],
			[
				21,
				18
			],
			[
				68,
				-91
			],
			[
				11,
				-14
			],
			[
				2,
				-20
			],
			[
				15,
				-120
			],
			[
				3,
				-24
			],
			[
				30,
				20
			],
			[
				9,
				6
			],
			[
				58,
				-55
			],
			[
				54,
				-50
			],
			[
				-63,
				-276
			],
			[
				-3,
				-11
			],
			[
				-2,
				-11
			],
			[
				-187,
				-271
			],
			[
				-83,
				-122
			],
			[
				36,
				-111
			],
			[
				36,
				-113
			],
			[
				-5,
				-1
			],
			[
				-24,
				-7
			],
			[
				-33,
				-9
			],
			[
				-47,
				-111
			],
			[
				-38,
				-91
			],
			[
				-162,
				-26
			],
			[
				-9,
				-97
			],
			[
				-1,
				-17
			],
			[
				-4,
				-39
			],
			[
				162,
				-104
			],
			[
				41,
				-26
			],
			[
				44,
				-29
			],
			[
				189,
				-614
			],
			[
				49,
				-161
			],
			[
				32,
				-23
			],
			[
				373,
				-270
			],
			[
				21,
				-16
			],
			[
				186,
				-135
			],
			[
				91,
				-67
			],
			[
				4,
				-3
			],
			[
				126,
				-92
			],
			[
				40,
				-29
			],
			[
				88,
				-372
			],
			[
				11,
				-46
			],
			[
				24,
				-102
			],
			[
				41,
				-175
			],
			[
				24,
				-105
			],
			[
				199,
				-111
			],
			[
				447,
				-250
			],
			[
				254,
				-143
			],
			[
				11,
				-6
			],
			[
				5,
				-3
			],
			[
				131,
				-368
			],
			[
				243,
				-16
			],
			[
				147,
				-61
			],
			[
				174,
				17
			],
			[
				333,
				33
			],
			[
				108,
				10
			],
			[
				1,
				0
			]
		],
		[
			[
				64716,
				86346
			],
			[
				23,
				-154
			],
			[
				13,
				-83
			],
			[
				3,
				-24
			],
			[
				24,
				-160
			],
			[
				10,
				-69
			],
			[
				16,
				-108
			],
			[
				24,
				-167
			],
			[
				-152,
				-605
			],
			[
				-275,
				-438
			],
			[
				-20,
				-271
			],
			[
				-24,
				-318
			],
			[
				211,
				-599
			],
			[
				-95,
				-103
			],
			[
				-169,
				-181
			],
			[
				46,
				-151
			],
			[
				-107,
				-199
			],
			[
				-6,
				-10
			],
			[
				-112,
				-208
			],
			[
				14,
				-87
			],
			[
				5,
				-27
			],
			[
				29,
				-181
			],
			[
				17,
				-111
			],
			[
				57,
				-352
			]
		],
		[
			[
				64248,
				81740
			],
			[
				-99,
				-59
			],
			[
				-247,
				-148
			],
			[
				-119,
				-168
			],
			[
				-35,
				-50
			],
			[
				-68,
				-96
			]
		],
		[
			[
				63680,
				81219
			],
			[
				-67,
				-87
			],
			[
				-389,
				-498
			],
			[
				-126,
				-163
			],
			[
				-143,
				-186
			],
			[
				-91,
				-118
			],
			[
				-37,
				-6
			],
			[
				-705,
				-115
			],
			[
				-55,
				6
			],
			[
				-129,
				16
			],
			[
				-514,
				62
			],
			[
				-157,
				18
			],
			[
				-183,
				80
			],
			[
				-77,
				33
			],
			[
				-128,
				55
			],
			[
				-656,
				282
			],
			[
				-108,
				46
			],
			[
				-245,
				-18
			],
			[
				-860,
				-65
			]
		],
		[
			[
				61298,
				86087
			],
			[
				-373,
				136
			],
			[
				-204,
				74
			],
			[
				-72,
				27
			],
			[
				-266,
				27
			],
			[
				-47,
				5
			]
		],
		[
			[
				62854,
				88248
			],
			[
				0,
				0
			],
			[
				-155,
				-288
			],
			[
				24,
				-98
			],
			[
				-119,
				-7
			],
			[
				-119,
				-136
			],
			[
				96,
				-238
			],
			[
				-267,
				-462
			]
		],
		[
			[
				2990,
				6554
			],
			[
				12,
				-22
			]
		],
		[
			[
				3121,
				6547
			],
			[
				29,
				16
			],
			[
				42,
				-27
			],
			[
				-61,
				-125
			],
			[
				-3,
				-8
			],
			[
				43,
				-133
			]
		],
		[
			[
				3171,
				6270
			],
			[
				-13,
				-23
			],
			[
				-37,
				-62
			],
			[
				-17,
				-31
			],
			[
				-1,
				-14
			],
			[
				-3,
				-39
			],
			[
				-4,
				-61
			],
			[
				-114,
				-83
			],
			[
				-71,
				-141
			]
		],
		[
			[
				2911,
				5816
			],
			[
				-39,
				-102
			],
			[
				-28,
				24
			],
			[
				-110,
				95
			]
		],
		[
			[
				2902,
				12900
			],
			[
				0,
				0
			],
			[
				-39,
				51
			],
			[
				0,
				0
			]
		],
		[
			[
				2449,
				18657
			],
			[
				26,
				13
			],
			[
				84,
				42
			],
			[
				7,
				128
			],
			[
				-19,
				33
			],
			[
				-18,
				33
			],
			[
				-15,
				26
			],
			[
				-8,
				16
			],
			[
				14,
				2
			],
			[
				42,
				8
			],
			[
				-24,
				52
			],
			[
				-20,
				43
			],
			[
				-11,
				24
			],
			[
				53,
				81
			],
			[
				28,
				44
			],
			[
				16,
				-4
			],
			[
				167,
				-39
			],
			[
				146,
				186
			],
			[
				16,
				20
			],
			[
				10,
				13
			],
			[
				148,
				188
			],
			[
				12,
				15
			],
			[
				26,
				-36
			],
			[
				67,
				52
			]
		],
		[
			[
				3233,
				24594
			],
			[
				2,
				-37
			],
			[
				4,
				-71
			],
			[
				45,
				-35
			],
			[
				-164,
				-57
			],
			[
				-32,
				-11
			],
			[
				-53,
				-18
			],
			[
				-39,
				-64
			],
			[
				-84,
				-4
			],
			[
				-30,
				-1
			],
			[
				-28,
				-1
			],
			[
				20,
				-115
			],
			[
				4,
				-26
			],
			[
				-58,
				-44
			],
			[
				-28,
				-22
			],
			[
				-67,
				-9
			],
			[
				-29,
				-4
			],
			[
				-160,
				-21
			],
			[
				-195,
				28
			],
			[
				-15,
				3
			],
			[
				-128,
				18
			],
			[
				-30,
				-5
			],
			[
				-124,
				-17
			],
			[
				-170,
				-24
			],
			[
				-9,
				-45
			],
			[
				-3,
				-19
			],
			[
				-1,
				-6
			]
		],
		[
			[
				7583,
				4746
			],
			[
				-235,
				-141
			],
			[
				8,
				-196
			],
			[
				5,
				-144
			],
			[
				-30,
				-245
			],
			[
				-24,
				-194
			],
			[
				52,
				-230
			],
			[
				76,
				-342
			],
			[
				69,
				-86
			],
			[
				-100,
				-170
			],
			[
				51,
				-137
			],
			[
				-30,
				-75
			],
			[
				36,
				-15
			],
			[
				-38,
				-170
			],
			[
				58,
				-12
			],
			[
				-55,
				-105
			],
			[
				-1,
				-2
			],
			[
				18,
				-156
			],
			[
				78,
				-224
			]
		],
		[
			[
				7521,
				2102
			],
			[
				-35,
				-40
			],
			[
				-177,
				27
			],
			[
				-87,
				-120
			],
			[
				23,
				-21
			],
			[
				28,
				-24
			],
			[
				-32,
				-108
			],
			[
				-85,
				32
			],
			[
				-3,
				-2
			],
			[
				-108,
				-95
			],
			[
				-89,
				52
			],
			[
				-115,
				-88
			],
			[
				-49,
				-38
			]
		],
		[
			[
				6792,
				1677
			],
			[
				-219,
				46
			],
			[
				-9,
				2
			],
			[
				-8,
				2
			],
			[
				-123,
				-95
			],
			[
				-46,
				89
			]
		],
		[
			[
				6278,
				1696
			],
			[
				0,
				0
			],
			[
				-41,
				108
			],
			[
				130,
				76
			],
			[
				24,
				90
			],
			[
				-17,
				49
			],
			[
				-17,
				48
			],
			[
				76,
				9
			],
			[
				2,
				138
			],
			[
				-22,
				235
			],
			[
				40,
				67
			],
			[
				59,
				8
			],
			[
				7,
				-120
			],
			[
				70,
				-19
			],
			[
				291,
				138
			],
			[
				-28,
				232
			],
			[
				-38,
				37
			],
			[
				-41,
				40
			],
			[
				-48,
				143
			],
			[
				-14,
				443
			],
			[
				-5,
				155
			],
			[
				-10,
				4
			],
			[
				-5,
				1
			],
			[
				-19,
				7
			],
			[
				-86,
				33
			],
			[
				-4,
				60
			]
		],
		[
			[
				6582,
				3678
			],
			[
				-33,
				200
			],
			[
				-19,
				115
			],
			[
				-17,
				109
			],
			[
				44,
				36
			],
			[
				5,
				37
			],
			[
				14,
				106
			],
			[
				7,
				49
			],
			[
				9,
				67
			],
			[
				84,
				221
			],
			[
				-4,
				199
			],
			[
				79,
				17
			],
			[
				10,
				60
			],
			[
				40,
				54
			],
			[
				-43,
				69
			],
			[
				48,
				195
			],
			[
				74,
				44
			],
			[
				15,
				9
			],
			[
				-3,
				59
			],
			[
				-6,
				88
			],
			[
				-39,
				39
			],
			[
				8,
				116
			],
			[
				170,
				34
			],
			[
				26,
				-49
			],
			[
				86,
				42
			],
			[
				5,
				2
			],
			[
				30,
				37
			],
			[
				-23,
				90
			],
			[
				52,
				50
			]
		],
		[
			[
				6696,
				9496
			],
			[
				-197,
				-17
			],
			[
				-45,
				58
			],
			[
				-80,
				-11
			],
			[
				-31,
				-15
			],
			[
				-3,
				-2
			],
			[
				-371,
				-184
			],
			[
				-2,
				5
			],
			[
				-62,
				141
			],
			[
				-21,
				47
			],
			[
				-6,
				13
			],
			[
				-50,
				-16
			],
			[
				-14,
				-54
			],
			[
				-8,
				-28
			],
			[
				-54,
				20
			],
			[
				-124,
				45
			],
			[
				-47,
				17
			],
			[
				-74,
				27
			],
			[
				-57,
				-4
			],
			[
				-7,
				0
			],
			[
				1,
				-2
			],
			[
				2,
				-68
			],
			[
				-1,
				0
			],
			[
				-69,
				-15
			],
			[
				-5,
				-1
			],
			[
				-19,
				-8
			],
			[
				-49,
				-19
			],
			[
				-18,
				58
			],
			[
				-10,
				34
			],
			[
				-41,
				-6
			],
			[
				-7,
				-14
			],
			[
				-41,
				-73
			],
			[
				-9,
				-14
			],
			[
				-5,
				-7
			],
			[
				-69,
				-107
			],
			[
				-12,
				-18
			],
			[
				-15,
				-46
			],
			[
				-18,
				-122
			],
			[
				0,
				-4
			],
			[
				-64,
				-67
			],
			[
				-84,
				43
			]
		],
		[
			[
				4877,
				9080
			],
			[
				0,
				0
			],
			[
				-24,
				-40
			],
			[
				-50,
				75
			],
			[
				0,
				0
			]
		],
		[
			[
				5308,
				27315
			],
			[
				27,
				-21
			],
			[
				1,
				-1
			],
			[
				32,
				-25
			],
			[
				7,
				-62
			],
			[
				12,
				-123
			],
			[
				124,
				-59
			],
			[
				8,
				-34
			],
			[
				2,
				-9
			],
			[
				4,
				-17
			]
		],
		[
			[
				3930,
				29312
			],
			[
				0,
				0
			],
			[
				-28,
				13
			],
			[
				19,
				31
			],
			[
				41,
				70
			],
			[
				-51,
				71
			],
			[
				-103,
				144
			],
			[
				31,
				49
			],
			[
				-24,
				75
			],
			[
				-27,
				81
			],
			[
				9,
				174
			],
			[
				161,
				57
			],
			[
				-55,
				76
			],
			[
				52,
				108
			],
			[
				0,
				43
			],
			[
				0,
				0
			]
		],
		[
			[
				10749,
				1826
			],
			[
				-17,
				119
			],
			[
				115,
				-62
			],
			[
				49,
				152
			],
			[
				85,
				126
			],
			[
				68,
				100
			],
			[
				-90,
				96
			],
			[
				74,
				92
			],
			[
				197,
				-26
			]
		],
		[
			[
				11037,
				6502
			],
			[
				92,
				103
			],
			[
				37,
				40
			],
			[
				-58,
				109
			],
			[
				-50,
				93
			],
			[
				6,
				2
			],
			[
				28,
				8
			],
			[
				61,
				18
			],
			[
				34,
				50
			],
			[
				109,
				159
			],
			[
				18,
				26
			],
			[
				8,
				12
			],
			[
				19,
				28
			],
			[
				-22,
				7
			],
			[
				-70,
				21
			],
			[
				-21,
				6
			],
			[
				16,
				259
			],
			[
				4,
				67
			],
			[
				1,
				15
			],
			[
				-132,
				162
			],
			[
				-86,
				105
			],
			[
				98,
				153
			],
			[
				-58,
				110
			],
			[
				-13,
				25
			],
			[
				-27,
				51
			],
			[
				-10,
				18
			],
			[
				-6,
				12
			],
			[
				-4,
				48
			],
			[
				-7,
				81
			],
			[
				-23,
				279
			],
			[
				127,
				67
			],
			[
				39,
				68
			],
			[
				34,
				61
			]
		],
		[
			[
				8352,
				28039
			],
			[
				-78,
				11
			],
			[
				-46,
				7
			],
			[
				-97,
				137
			],
			[
				-8,
				10
			],
			[
				-52,
				74
			],
			[
				-27,
				103
			],
			[
				-6,
				20
			],
			[
				-28,
				12
			],
			[
				-81,
				34
			],
			[
				-1,
				64
			],
			[
				-134,
				-27
			],
			[
				-33,
				124
			],
			[
				-57,
				-80
			],
			[
				-15,
				-21
			],
			[
				-37,
				-52
			],
			[
				-10,
				-13
			],
			[
				-35,
				3
			],
			[
				-19,
				2
			],
			[
				-44,
				3
			],
			[
				-20,
				106
			],
			[
				-21,
				0
			],
			[
				-58,
				0
			],
			[
				-75,
				1
			],
			[
				-18,
				47
			],
			[
				-23,
				63
			],
			[
				-31,
				83
			],
			[
				-12,
				34
			],
			[
				-19,
				49
			],
			[
				-19,
				11
			],
			[
				-29,
				15
			]
		],
		[
			[
				7545,
				29424
			],
			[
				6,
				20
			],
			[
				1,
				3
			],
			[
				22,
				64
			],
			[
				24,
				71
			]
		],
		[
			[
				7598,
				29582
			],
			[
				115,
				10
			],
			[
				67,
				155
			],
			[
				8,
				18
			],
			[
				3,
				-2
			],
			[
				77,
				-65
			],
			[
				62,
				19
			],
			[
				101,
				200
			],
			[
				-54,
				116
			],
			[
				30,
				111
			],
			[
				-26,
				63
			],
			[
				-4,
				11
			],
			[
				137,
				36
			]
		],
		[
			[
				7453,
				30474
			],
			[
				5,
				-136
			],
			[
				-154,
				-110
			],
			[
				-94,
				97
			],
			[
				-37,
				39
			],
			[
				-24,
				25
			],
			[
				-200,
				-12
			],
			[
				-64,
				24
			],
			[
				-44,
				18
			],
			[
				-21,
				-15
			]
		],
		[
			[
				9124,
				32328
			],
			[
				0,
				0
			],
			[
				-16,
				35
			],
			[
				0,
				22
			],
			[
				-1,
				50
			],
			[
				41,
				43
			],
			[
				30,
				-40
			],
			[
				3,
				-5
			],
			[
				106,
				144
			],
			[
				39,
				53
			],
			[
				14,
				0
			],
			[
				167,
				4
			],
			[
				7,
				106
			],
			[
				-50,
				81
			],
			[
				2,
				2
			],
			[
				78,
				93
			],
			[
				-1,
				2
			],
			[
				-19,
				39
			],
			[
				-6,
				12
			],
			[
				-4,
				8
			],
			[
				5,
				7
			],
			[
				6,
				8
			],
			[
				35,
				51
			]
		],
		[
			[
				15482,
				8361
			],
			[
				46,
				51
			],
			[
				108,
				-98
			],
			[
				108,
				31
			],
			[
				26,
				8
			]
		],
		[
			[
				17250,
				8402
			],
			[
				9,
				33
			]
		],
		[
			[
				20819,
				10181
			],
			[
				143,
				-454
			],
			[
				-18,
				-72
			],
			[
				-48,
				-346
			],
			[
				-5,
				-37
			],
			[
				-33,
				5
			],
			[
				46,
				-100
			]
		],
		[
			[
				19855,
				10211
			],
			[
				18,
				-12
			],
			[
				51,
				-38
			],
			[
				63,
				15
			],
			[
				6,
				2
			],
			[
				26,
				6
			],
			[
				78,
				-131
			],
			[
				48,
				22
			],
			[
				-22,
				40
			],
			[
				33,
				92
			],
			[
				14,
				40
			],
			[
				64,
				-43
			],
			[
				55,
				-50
			],
			[
				22,
				-10
			],
			[
				7,
				-3
			],
			[
				2,
				-1
			],
			[
				17,
				104
			],
			[
				59,
				29
			],
			[
				423,
				-92
			]
		],
		[
			[
				17439,
				11616
			],
			[
				45,
				33
			],
			[
				40,
				-85
			],
			[
				134,
				75
			],
			[
				3,
				1
			],
			[
				16,
				15
			],
			[
				20,
				18
			],
			[
				32,
				-9
			],
			[
				0,
				0
			]
		],
		[
			[
				18328,
				12135
			],
			[
				2,
				-24
			]
		],
		[
			[
				18345,
				11910
			],
			[
				3,
				-36
			],
			[
				0,
				-4
			],
			[
				2,
				-1
			],
			[
				29,
				-31
			],
			[
				32,
				-34
			],
			[
				-21,
				-107
			],
			[
				-7,
				-32
			],
			[
				-13,
				-7
			],
			[
				-35,
				-22
			],
			[
				-28,
				-17
			],
			[
				-5,
				-52
			],
			[
				-101,
				-6
			],
			[
				-13,
				-44
			],
			[
				3,
				-14
			],
			[
				6,
				-34
			],
			[
				8,
				-43
			],
			[
				1,
				-30
			]
		],
		[
			[
				17924,
				11950
			],
			[
				94,
				-46
			],
			[
				33,
				25
			],
			[
				28,
				35
			],
			[
				-29,
				49
			],
			[
				27,
				91
			],
			[
				9,
				32
			],
			[
				86,
				86
			],
			[
				56,
				9
			],
			[
				17,
				11
			],
			[
				38,
				24
			],
			[
				0,
				0
			]
		],
		[
			[
				20742,
				40082
			],
			[
				-198,
				-71
			],
			[
				-66,
				-55
			],
			[
				-33,
				-28
			],
			[
				-21,
				-17
			],
			[
				-4,
				-3
			]
		],
		[
			[
				20293,
				40252
			],
			[
				39,
				4
			],
			[
				13,
				2
			],
			[
				67,
				26
			],
			[
				54,
				21
			],
			[
				5,
				-48
			],
			[
				13,
				-117
			],
			[
				45,
				-23
			],
			[
				36,
				59
			],
			[
				75,
				1
			],
			[
				82,
				-33
			],
			[
				20,
				-62
			]
		],
		[
			[
				20284,
				40805
			],
			[
				1,
				-5
			],
			[
				3,
				-71
			],
			[
				2,
				-45
			],
			[
				0,
				0
			]
		],
		[
			[
				19080,
				14090
			],
			[
				-20,
				-117
			],
			[
				8,
				-22
			],
			[
				8,
				-36
			],
			[
				9,
				-37
			],
			[
				26,
				-35
			],
			[
				6,
				-7
			],
			[
				20,
				-33
			],
			[
				-4,
				-62
			],
			[
				0,
				-3
			],
			[
				0,
				-51
			],
			[
				-58,
				25
			],
			[
				-1,
				-4
			],
			[
				-5,
				-26
			],
			[
				-1,
				-2
			],
			[
				-20,
				-42
			],
			[
				-77,
				-16
			],
			[
				-10,
				-2
			]
		],
		[
			[
				19331,
				13998
			],
			[
				13,
				-28
			],
			[
				14,
				-29
			],
			[
				8,
				-4
			],
			[
				13,
				-6
			],
			[
				12,
				-6
			],
			[
				-34,
				-36
			],
			[
				78,
				-65
			],
			[
				4,
				-4
			],
			[
				3,
				-2
			],
			[
				29,
				-25
			],
			[
				89,
				-75
			],
			[
				80,
				47
			],
			[
				59,
				-46
			]
		],
		[
			[
				19381,
				13370
			],
			[
				-9,
				7
			],
			[
				-27,
				23
			],
			[
				-35,
				28
			],
			[
				-27,
				22
			],
			[
				-23,
				19
			],
			[
				-13,
				10
			],
			[
				-1,
				2
			],
			[
				-10,
				8
			],
			[
				-2,
				-4
			],
			[
				-2,
				-5
			],
			[
				-10,
				-27
			],
			[
				-23,
				-65
			]
		],
		[
			[
				19199,
				13388
			],
			[
				-42,
				-1
			],
			[
				-10,
				26
			],
			[
				-2,
				7
			],
			[
				-2,
				3
			],
			[
				-17,
				49
			],
			[
				-44,
				-15
			],
			[
				-27,
				-9
			],
			[
				7,
				62
			],
			[
				0,
				0
			],
			[
				-1,
				-2
			],
			[
				-47,
				-57
			]
		],
		[
			[
				16078,
				18813
			],
			[
				61,
				28
			],
			[
				17,
				-12
			],
			[
				76,
				-55
			],
			[
				33,
				42
			],
			[
				47,
				58
			],
			[
				29,
				-40
			],
			[
				73,
				69
			],
			[
				7,
				6
			],
			[
				7,
				76
			],
			[
				-17,
				39
			],
			[
				17,
				13
			],
			[
				29,
				21
			],
			[
				18,
				14
			],
			[
				158,
				33
			],
			[
				63,
				37
			],
			[
				45,
				27
			],
			[
				44,
				26
			],
			[
				-202,
				-3
			],
			[
				-42,
				84
			],
			[
				-17,
				33
			],
			[
				-11,
				23
			],
			[
				21,
				16
			],
			[
				65,
				51
			],
			[
				68,
				-59
			],
			[
				150,
				1
			],
			[
				15,
				53
			],
			[
				48,
				145
			],
			[
				-14,
				84
			],
			[
				27,
				64
			],
			[
				18,
				44
			]
		],
		[
			[
				19980,
				34247
			],
			[
				580,
				-196
			],
			[
				124,
				-356
			],
			[
				218,
				-278
			],
			[
				10,
				-13
			],
			[
				190,
				16
			],
			[
				7,
				8
			],
			[
				62,
				69
			],
			[
				345,
				8
			],
			[
				56,
				-301
			],
			[
				5,
				-28
			],
			[
				7,
				-37
			],
			[
				16,
				-84
			]
		],
		[
			[
				21600,
				33055
			],
			[
				-23,
				-22
			],
			[
				-45,
				-43
			],
			[
				-344,
				-331
			],
			[
				-346,
				5
			],
			[
				-202,
				-70
			],
			[
				-64,
				-75
			],
			[
				-76,
				66
			],
			[
				-95,
				-19
			],
			[
				-50,
				-106
			],
			[
				-124,
				-9
			],
			[
				-13,
				11
			],
			[
				-35,
				28
			],
			[
				-5,
				4
			],
			[
				-41,
				-6
			],
			[
				-55,
				-7
			],
			[
				-4,
				-19
			],
			[
				-6,
				-20
			],
			[
				-28,
				-160
			],
			[
				-202,
				-57
			],
			[
				-150,
				-187
			],
			[
				-19,
				-24
			],
			[
				-110,
				24
			],
			[
				-1,
				-1
			],
			[
				0,
				-4
			],
			[
				-16,
				-73
			],
			[
				-10,
				-43
			]
		],
		[
			[
				16778,
				36422
			],
			[
				9,
				-8
			],
			[
				56,
				-50
			],
			[
				-121,
				-167
			],
			[
				-5,
				-7
			],
			[
				22,
				-63
			],
			[
				13,
				-97
			],
			[
				0,
				-2
			],
			[
				-3,
				-3
			],
			[
				-66,
				-80
			],
			[
				-16,
				-19
			],
			[
				-30,
				-36
			],
			[
				-32,
				-38
			],
			[
				-13,
				-200
			],
			[
				-59,
				2
			],
			[
				-1,
				0
			],
			[
				-9,
				-10
			],
			[
				-58,
				-68
			],
			[
				-24,
				-21
			],
			[
				-12,
				77
			],
			[
				-32,
				-12
			],
			[
				-297,
				-227
			],
			[
				-57,
				-31
			],
			[
				-4,
				-2
			],
			[
				-52,
				83
			],
			[
				-85,
				-26
			]
		],
		[
			[
				21570,
				17110
			],
			[
				-58,
				-57
			],
			[
				-47,
				-46
			],
			[
				-18,
				56
			],
			[
				-34,
				87
			],
			[
				-66,
				164
			],
			[
				-55,
				67
			],
			[
				-39,
				152
			],
			[
				-40,
				-20
			],
			[
				-79,
				132
			]
		],
		[
			[
				21110,
				17745
			],
			[
				193,
				-101
			],
			[
				202,
				13
			],
			[
				211,
				90
			],
			[
				176,
				198
			],
			[
				7,
				14
			],
			[
				22,
				45
			],
			[
				24,
				49
			],
			[
				19,
				39
			],
			[
				9,
				20
			],
			[
				6,
				12
			],
			[
				-28,
				121
			],
			[
				-1,
				3
			],
			[
				1,
				1
			],
			[
				27,
				25
			],
			[
				3,
				2
			],
			[
				3,
				3
			],
			[
				-3,
				4
			],
			[
				-84,
				108
			],
			[
				-3,
				94
			],
			[
				0,
				60
			],
			[
				64,
				-26
			],
			[
				2,
				-1
			],
			[
				5,
				-2
			],
			[
				55,
				22
			],
			[
				10,
				4
			],
			[
				1,
				49
			],
			[
				4,
				16
			],
			[
				72,
				296
			],
			[
				204,
				162
			],
			[
				32,
				43
			],
			[
				77,
				51
			],
			[
				76,
				-7
			],
			[
				-1,
				2
			],
			[
				-78,
				109
			],
			[
				74,
				109
			],
			[
				87,
				6
			],
			[
				160,
				143
			],
			[
				47,
				10
			],
			[
				-161,
				259
			],
			[
				63,
				70
			],
			[
				1,
				1
			],
			[
				56,
				-89
			],
			[
				1,
				-2
			],
			[
				2,
				-1
			],
			[
				81,
				-28
			],
			[
				1,
				-1
			],
			[
				178,
				-119
			],
			[
				97,
				-73
			],
			[
				11,
				-1
			],
			[
				19,
				-1
			],
			[
				61,
				-4
			]
		],
		[
			[
				23007,
				24963
			],
			[
				-83,
				-47
			],
			[
				-91,
				-51
			],
			[
				-27,
				-6
			],
			[
				-75,
				-16
			],
			[
				-197,
				-44
			],
			[
				-5,
				-1
			],
			[
				-77,
				-17
			],
			[
				-129,
				-29
			],
			[
				-17,
				-4
			],
			[
				-18,
				-4
			],
			[
				-52,
				-11
			],
			[
				-25,
				-6
			],
			[
				-44,
				-9
			],
			[
				-40,
				-9
			],
			[
				-255,
				655
			],
			[
				-79,
				-149
			],
			[
				-30,
				-154
			],
			[
				-18,
				-92
			],
			[
				-3,
				-14
			],
			[
				-4,
				-18
			],
			[
				24,
				-45
			],
			[
				-6,
				-5
			],
			[
				-13,
				-12
			],
			[
				-14,
				-13
			],
			[
				-15,
				-66
			],
			[
				2,
				-2
			],
			[
				3,
				-22
			],
			[
				13,
				-101
			],
			[
				-29,
				-155
			]
		],
		[
			[
				21423,
				48105
			],
			[
				136,
				20
			],
			[
				152,
				107
			],
			[
				104,
				73
			]
		],
		[
			[
				25365,
				49501
			],
			[
				-227,
				74
			],
			[
				18,
				-164
			],
			[
				-159,
				-98
			],
			[
				-51,
				104
			],
			[
				-126,
				32
			],
			[
				-28,
				101
			],
			[
				-27,
				2
			],
			[
				-25,
				1
			],
			[
				-14,
				1
			],
			[
				-54,
				3
			]
		],
		[
			[
				24323,
				49268
			],
			[
				0,
				0
			],
			[
				-60,
				65
			],
			[
				99,
				98
			],
			[
				-88,
				98
			],
			[
				-28,
				48
			],
			[
				-3,
				0
			],
			[
				-25,
				4
			],
			[
				-201,
				31
			],
			[
				-42,
				6
			],
			[
				-77,
				119
			],
			[
				-50,
				106
			],
			[
				-28,
				-55
			],
			[
				-18,
				-7
			],
			[
				-28,
				-11
			],
			[
				-93,
				-37
			],
			[
				-19,
				30
			],
			[
				-62,
				97
			],
			[
				-11,
				17
			],
			[
				-90,
				28
			]
		],
		[
			[
				23349,
				51566
			],
			[
				7,
				4
			],
			[
				71,
				43
			],
			[
				39,
				23
			],
			[
				96,
				57
			],
			[
				2,
				1
			],
			[
				-11,
				104
			],
			[
				73,
				102
			],
			[
				-18,
				8
			],
			[
				-122,
				56
			],
			[
				327,
				120
			],
			[
				19,
				-22
			],
			[
				7,
				-8
			],
			[
				39,
				-45
			],
			[
				1,
				-1
			],
			[
				152,
				-24
			],
			[
				9,
				-21
			],
			[
				41,
				-90
			],
			[
				192,
				13
			],
			[
				1,
				-93
			],
			[
				-124,
				-55
			],
			[
				145,
				-165
			],
			[
				-85,
				-47
			],
			[
				87,
				-72
			],
			[
				22,
				-92
			],
			[
				43,
				3
			],
			[
				258,
				17
			],
			[
				79,
				5
			],
			[
				67,
				4
			],
			[
				109,
				87
			],
			[
				203,
				40
			],
			[
				222,
				-9
			]
		],
		[
			[
				23077,
				54767
			],
			[
				21,
				54
			],
			[
				9,
				22
			]
		],
		[
			[
				23127,
				54892
			],
			[
				13,
				33
			]
		],
		[
			[
				27125,
				52865
			],
			[
				-49,
				-99
			],
			[
				15,
				-63
			],
			[
				1,
				-7
			],
			[
				62,
				-271
			],
			[
				4,
				-17
			],
			[
				16,
				-72
			],
			[
				86,
				-242
			],
			[
				24,
				-27
			],
			[
				32,
				-36
			],
			[
				105,
				-118
			],
			[
				3,
				-3
			],
			[
				-20,
				-55
			],
			[
				-35,
				-94
			],
			[
				109,
				-116
			],
			[
				31,
				-33
			],
			[
				-52,
				-73
			],
			[
				-99,
				-141
			],
			[
				-3,
				-4
			],
			[
				106,
				-13
			],
			[
				4,
				0
			],
			[
				132,
				-57
			],
			[
				55,
				-24
			],
			[
				128,
				-55
			],
			[
				41,
				-18
			],
			[
				1,
				-87
			],
			[
				0,
				-64
			],
			[
				-150,
				-172
			],
			[
				32,
				-183
			],
			[
				91,
				-60
			],
			[
				-41,
				-64
			],
			[
				-27,
				-45
			],
			[
				0,
				0
			],
			[
				-87,
				-20
			],
			[
				-68,
				-16
			],
			[
				-8,
				-2
			],
			[
				0,
				0
			],
			[
				35,
				-100
			],
			[
				21,
				-57
			],
			[
				-56,
				-129
			],
			[
				24,
				-125
			],
			[
				-47,
				-51
			],
			[
				-59,
				-65
			],
			[
				129,
				-63
			],
			[
				13,
				-6
			],
			[
				11,
				-26
			],
			[
				19,
				-43
			],
			[
				-28,
				-57
			],
			[
				-41,
				-85
			],
			[
				-38,
				-78
			],
			[
				234,
				5
			],
			[
				41,
				-44
			],
			[
				-108,
				-90
			],
			[
				-124,
				-104
			],
			[
				2,
				-135
			],
			[
				-75,
				-45
			],
			[
				-17,
				-10
			],
			[
				-167,
				-275
			],
			[
				-41,
				-197
			],
			[
				-79,
				-51
			],
			[
				-33,
				-21
			],
			[
				3,
				-87
			],
			[
				0,
				-1
			]
		],
		[
			[
				25261,
				50997
			],
			[
				130,
				10
			],
			[
				73,
				32
			],
			[
				71,
				31
			],
			[
				183,
				79
			],
			[
				99,
				66
			],
			[
				37,
				25
			],
			[
				9,
				6
			],
			[
				117,
				79
			],
			[
				18,
				11
			],
			[
				59,
				40
			],
			[
				27,
				170
			],
			[
				-218,
				177
			],
			[
				-87,
				677
			],
			[
				-11,
				87
			],
			[
				7,
				17
			],
			[
				18,
				45
			],
			[
				1,
				3
			],
			[
				80,
				0
			],
			[
				53,
				0
			],
			[
				3,
				0
			],
			[
				2,
				0
			],
			[
				44,
				-30
			],
			[
				153,
				-104
			],
			[
				7,
				-5
			],
			[
				35,
				-22
			],
			[
				49,
				-31
			],
			[
				68,
				180
			],
			[
				1,
				255
			],
			[
				151,
				86
			],
			[
				11,
				127
			],
			[
				109,
				-35
			],
			[
				25,
				-8
			],
			[
				69,
				-23
			],
			[
				0,
				1
			],
			[
				144,
				243
			],
			[
				25,
				-25
			],
			[
				67,
				-65
			],
			[
				3,
				-4
			],
			[
				232,
				-227
			]
		],
		[
			[
				32003,
				73884
			],
			[
				46,
				-19
			],
			[
				19,
				-8
			],
			[
				-19,
				-32
			],
			[
				-48,
				-29
			],
			[
				-126,
				-76
			],
			[
				-5,
				-16
			],
			[
				-21,
				-62
			],
			[
				-15,
				-46
			],
			[
				-111,
				13
			],
			[
				-53,
				6
			],
			[
				-86,
				10
			],
			[
				-6,
				-1
			],
			[
				-60,
				-20
			],
			[
				-53,
				-25
			],
			[
				-62,
				17
			],
			[
				-30,
				-3
			],
			[
				-86,
				-96
			],
			[
				-6,
				-7
			]
		],
		[
			[
				31268,
				73476
			],
			[
				0,
				0
			],
			[
				-101,
				-113
			],
			[
				-29,
				-33
			],
			[
				-28,
				-12
			],
			[
				-42,
				-18
			]
		],
		[
			[
				31038,
				73287
			],
			[
				0,
				0
			],
			[
				-15,
				-6
			],
			[
				-24,
				-80
			],
			[
				-66,
				-2
			],
			[
				-136,
				-4
			]
		],
		[
			[
				40296,
				73293
			],
			[
				-206,
				82
			],
			[
				88,
				238
			],
			[
				-248,
				152
			],
			[
				-45,
				28
			],
			[
				-68,
				42
			],
			[
				-2,
				1
			],
			[
				-18,
				28
			],
			[
				-5,
				56
			],
			[
				-99,
				6
			],
			[
				-49,
				-88
			],
			[
				-16,
				12
			],
			[
				-6,
				5
			],
			[
				-110,
				84
			],
			[
				-152,
				-24
			],
			[
				-60,
				-78
			],
			[
				-150,
				22
			],
			[
				-44,
				-56
			],
			[
				-10,
				-13
			],
			[
				-28,
				-36
			]
		],
		[
			[
				38478,
				77104
			],
			[
				-236,
				150
			],
			[
				0,
				1
			],
			[
				-71,
				200
			],
			[
				-10,
				28
			],
			[
				-84,
				-40
			],
			[
				-177,
				39
			],
			[
				-11,
				63
			],
			[
				-20,
				122
			],
			[
				-90,
				50
			],
			[
				-124,
				93
			],
			[
				-9,
				6
			]
		],
		[
			[
				38708,
				79158
			],
			[
				29,
				-21
			],
			[
				23,
				-96
			],
			[
				-23,
				-103
			],
			[
				176,
				-197
			],
			[
				33,
				-63
			],
			[
				24,
				-45
			],
			[
				97,
				-154
			],
			[
				168,
				-134
			],
			[
				49,
				-24
			],
			[
				8,
				-4
			],
			[
				27,
				10
			],
			[
				10,
				4
			],
			[
				78,
				29
			],
			[
				-34,
				50
			],
			[
				-15,
				22
			],
			[
				71,
				9
			],
			[
				84,
				-38
			],
			[
				4,
				-2
			],
			[
				47,
				-22
			],
			[
				7,
				-31
			],
			[
				5,
				-24
			],
			[
				3,
				-15
			],
			[
				-34,
				-19
			],
			[
				-87,
				-47
			],
			[
				-286,
				-156
			],
			[
				-25,
				-46
			],
			[
				-46,
				-88
			],
			[
				-104,
				-198
			],
			[
				-38,
				-71
			],
			[
				93,
				-95
			],
			[
				54,
				-55
			],
			[
				-144,
				-83
			]
		],
		[
			[
				50149,
				77193
			],
			[
				1,
				76
			],
			[
				-59,
				60
			],
			[
				-307,
				310
			],
			[
				-89,
				206
			],
			[
				-314,
				119
			],
			[
				446,
				339
			],
			[
				-77,
				268
			],
			[
				-241,
				-64
			],
			[
				-428,
				2
			],
			[
				161,
				138
			],
			[
				-90,
				137
			],
			[
				-286,
				172
			],
			[
				1,
				107
			],
			[
				95,
				59
			],
			[
				-148,
				157
			],
			[
				-5,
				100
			],
			[
				-215,
				68
			],
			[
				-76,
				208
			],
			[
				-144,
				-10
			],
			[
				-130,
				116
			],
			[
				-96,
				322
			],
			[
				-137,
				61
			],
			[
				-34,
				15
			],
			[
				-91,
				41
			],
			[
				-80,
				35
			],
			[
				-1,
				0
			],
			[
				-118,
				-6
			]
		],
		[
			[
				49947,
				81746
			],
			[
				91,
				8
			],
			[
				25,
				2
			],
			[
				21,
				-44
			],
			[
				236,
				-31
			],
			[
				283,
				-36
			],
			[
				166,
				-309
			],
			[
				162,
				-117
			],
			[
				40,
				-29
			],
			[
				127,
				-92
			],
			[
				-51,
				-170
			],
			[
				-40,
				-129
			],
			[
				84,
				-7
			],
			[
				104,
				-8
			],
			[
				161,
				-118
			],
			[
				133,
				-6
			],
			[
				66,
				-3
			],
			[
				55,
				-64
			],
			[
				12,
				-201
			],
			[
				-136,
				-12
			],
			[
				4,
				-51
			],
			[
				7,
				-73
			],
			[
				9,
				-99
			],
			[
				4,
				-45
			],
			[
				9,
				-100
			],
			[
				-44,
				-41
			],
			[
				-78,
				-72
			],
			[
				-30,
				-28
			],
			[
				-14,
				-188
			],
			[
				-240,
				-178
			],
			[
				122,
				-510
			],
			[
				313,
				-244
			],
			[
				189,
				42
			],
			[
				324,
				-128
			],
			[
				657,
				210
			],
			[
				258,
				-59
			],
			[
				34,
				-314
			],
			[
				155,
				-149
			]
		],
		[
			[
				47930,
				80956
			],
			[
				98,
				-28
			],
			[
				45,
				-13
			],
			[
				118,
				-281
			],
			[
				181,
				81
			],
			[
				27,
				-17
			],
			[
				60,
				-38
			],
			[
				0,
				0
			]
		],
		[
			[
				58235,
				82535
			],
			[
				-46,
				68
			],
			[
				-346,
				508
			],
			[
				-189,
				276
			],
			[
				-116,
				318
			],
			[
				-3,
				412
			],
			[
				-396,
				144
			],
			[
				-203,
				121
			]
		],
		[
			[
				56634,
				84561
			],
			[
				0,
				0
			],
			[
				-22,
				13
			],
			[
				-82,
				19
			],
			[
				-105,
				25
			],
			[
				-10,
				2
			],
			[
				-77,
				44
			],
			[
				-196,
				111
			]
		],
		[
			[
				56142,
				84775
			],
			[
				110,
				48
			],
			[
				198,
				84
			],
			[
				247,
				106
			],
			[
				261,
				111
			],
			[
				174,
				199
			]
		],
		[
			[
				57422,
				85740
			],
			[
				35,
				-6
			],
			[
				36,
				9
			],
			[
				435,
				113
			],
			[
				556,
				421
			],
			[
				63,
				25
			],
			[
				0,
				0
			]
		],
		[
			[
				65167,
				80646
			],
			[
				-11,
				0
			],
			[
				-44,
				-1
			],
			[
				-47,
				-1
			],
			[
				-26,
				0
			],
			[
				-115,
				-3
			],
			[
				-225,
				-4
			],
			[
				-84,
				218
			],
			[
				-375,
				-55
			],
			[
				-220,
				162
			],
			[
				-12,
				-1
			],
			[
				-188,
				-18
			],
			[
				58,
				189
			],
			[
				-198,
				87
			]
		],
		[
			[
				64248,
				81740
			],
			[
				297,
				16
			],
			[
				2,
				0
			],
			[
				147,
				-42
			],
			[
				65,
				-19
			],
			[
				240,
				96
			],
			[
				74,
				30
			],
			[
				109,
				43
			],
			[
				-63,
				547
			],
			[
				997,
				294
			],
			[
				506,
				148
			],
			[
				809,
				90
			],
			[
				-5,
				393
			],
			[
				205,
				102
			],
			[
				874,
				430
			],
			[
				43,
				528
			],
			[
				138,
				203
			]
		],
		[
			[
				74373,
				82015
			],
			[
				6,
				-54
			],
			[
				36,
				-311
			],
			[
				-187,
				-24
			],
			[
				-60,
				-7
			],
			[
				-70,
				-9
			],
			[
				-1501,
				-193
			],
			[
				-758,
				-429
			],
			[
				-432,
				-137
			]
		],
		[
			[
				73369,
				84646
			],
			[
				92,
				-92
			],
			[
				247,
				-97
			],
			[
				182,
				-6
			],
			[
				85,
				-3
			],
			[
				42,
				-1
			],
			[
				92,
				-72
			],
			[
				101,
				65
			],
			[
				16,
				-52
			],
			[
				23,
				20
			],
			[
				9,
				8
			],
			[
				1,
				-4
			],
			[
				10,
				-91
			],
			[
				2,
				-16
			],
			[
				26,
				-230
			],
			[
				-9,
				-22
			],
			[
				-13,
				-32
			],
			[
				-32,
				-78
			],
			[
				-1,
				-3
			],
			[
				-22,
				-81
			],
			[
				-9,
				-36
			],
			[
				-6,
				-20
			],
			[
				-36,
				-137
			],
			[
				-9,
				-34
			],
			[
				-8,
				-29
			],
			[
				-51,
				-94
			],
			[
				-20,
				-36
			],
			[
				-4,
				-2
			],
			[
				-16,
				-9
			],
			[
				-71,
				-38
			],
			[
				-8,
				-5
			],
			[
				-2,
				-1
			],
			[
				0,
				-8
			],
			[
				1,
				-48
			],
			[
				0,
				-36
			],
			[
				0,
				-11
			],
			[
				1,
				-49
			],
			[
				3,
				-279
			],
			[
				95,
				-108
			],
			[
				-16,
				-113
			],
			[
				-4,
				-32
			],
			[
				0,
				-1
			],
			[
				-16,
				-24
			],
			[
				-34,
				-48
			],
			[
				0,
				0
			]
		],
		[
			[
				76665,
				83896
			],
			[
				688,
				-351
			],
			[
				180,
				-92
			],
			[
				155,
				-80
			],
			[
				95,
				-49
			],
			[
				45,
				-23
			],
			[
				-2,
				-22
			],
			[
				0,
				0
			]
		],
		[
			[
				1974,
				9604
			],
			[
				14,
				7
			],
			[
				79,
				38
			],
			[
				40,
				20
			],
			[
				27,
				137
			]
		],
		[
			[
				2911,
				5816
			],
			[
				85,
				-28
			],
			[
				93,
				-127
			],
			[
				0,
				0
			],
			[
				31,
				-6
			],
			[
				72,
				-16
			],
			[
				62,
				-14
			],
			[
				41,
				-9
			]
		],
		[
			[
				3295,
				5616
			],
			[
				5,
				-61
			],
			[
				-38,
				-25
			],
			[
				-34,
				-22
			],
			[
				-68,
				-45
			],
			[
				-64,
				-208
			],
			[
				-25,
				-13
			],
			[
				-33,
				-17
			],
			[
				-31,
				-16
			],
			[
				-10,
				-5
			],
			[
				-6,
				-3
			],
			[
				-98,
				-50
			],
			[
				-1,
				-61
			],
			[
				47,
				-50
			],
			[
				23,
				-25
			],
			[
				-26,
				-61
			]
		],
		[
			[
				3551,
				5472
			],
			[
				11,
				-103
			],
			[
				-81,
				-66
			],
			[
				78,
				5
			],
			[
				30,
				2
			],
			[
				58,
				-105
			],
			[
				62,
				-96
			],
			[
				-11,
				-40
			],
			[
				-2,
				-6
			],
			[
				-11,
				-40
			],
			[
				38,
				-6
			],
			[
				-47,
				-111
			],
			[
				201,
				-77
			]
		],
		[
			[
				3295,
				5616
			],
			[
				13,
				7
			],
			[
				1,
				0
			],
			[
				30,
				15
			],
			[
				31,
				-23
			],
			[
				7,
				-6
			],
			[
				5,
				-3
			],
			[
				-3,
				-75
			],
			[
				83,
				18
			],
			[
				89,
				-77
			]
		],
		[
			[
				2548,
				13235
			],
			[
				0,
				0
			],
			[
				-18,
				-25
			],
			[
				-51,
				-70
			],
			[
				-88,
				-123
			],
			[
				-12,
				-16
			],
			[
				-83,
				-291
			],
			[
				-27,
				-36
			],
			[
				-72,
				23
			],
			[
				-27,
				-26
			],
			[
				-25,
				-23
			]
		],
		[
			[
				1883,
				12790
			],
			[
				0,
				0
			],
			[
				-20,
				13
			]
		],
		[
			[
				5506,
				2219
			],
			[
				0,
				4
			],
			[
				0,
				71
			],
			[
				0,
				23
			],
			[
				0,
				92
			],
			[
				26,
				70
			],
			[
				24,
				67
			],
			[
				27,
				71
			],
			[
				-18,
				96
			],
			[
				32,
				25
			],
			[
				66,
				53
			],
			[
				-164,
				519
			],
			[
				-149,
				-23
			],
			[
				-5,
				-1
			],
			[
				-9,
				-1
			],
			[
				-57,
				-141
			],
			[
				-3,
				-3
			],
			[
				-118,
				-102
			],
			[
				-10,
				-1
			],
			[
				-24,
				-2
			],
			[
				-48,
				-3
			],
			[
				-7,
				-1
			],
			[
				-30,
				-6
			],
			[
				-38,
				-8
			],
			[
				-7,
				181
			],
			[
				0,
				5
			],
			[
				54,
				92
			],
			[
				-6,
				4
			],
			[
				-18,
				14
			],
			[
				-91,
				71
			],
			[
				-7,
				5
			]
		],
		[
			[
				4926,
				3390
			],
			[
				8,
				113
			],
			[
				15,
				193
			],
			[
				-63,
				111
			],
			[
				-1,
				1
			],
			[
				19,
				66
			],
			[
				9,
				33
			],
			[
				3,
				10
			],
			[
				1,
				3
			],
			[
				-33,
				68
			],
			[
				138,
				62
			],
			[
				104,
				47
			],
			[
				14,
				-4
			],
			[
				120,
				-28
			],
			[
				0,
				0
			],
			[
				12,
				-3
			],
			[
				5,
				8
			],
			[
				104,
				155
			],
			[
				22,
				-5
			],
			[
				19,
				-5
			],
			[
				45,
				-12
			],
			[
				20,
				22
			],
			[
				100,
				107
			]
		],
		[
			[
				7065,
				662
			],
			[
				0,
				0
			],
			[
				-44,
				40
			],
			[
				85,
				93
			],
			[
				-37,
				19
			],
			[
				6,
				71
			],
			[
				-137,
				27
			],
			[
				-18,
				3
			],
			[
				-6,
				105
			],
			[
				0,
				0
			]
		],
		[
			[
				6700,
				1201
			],
			[
				53,
				50
			],
			[
				16,
				118
			],
			[
				2,
				17
			],
			[
				7,
				0
			],
			[
				34,
				2
			],
			[
				69,
				3
			],
			[
				19,
				117
			],
			[
				-35,
				80
			],
			[
				-73,
				89
			]
		],
		[
			[
				7521,
				2102
			],
			[
				208,
				216
			],
			[
				-11,
				-93
			],
			[
				-3,
				-23
			],
			[
				5,
				1
			],
			[
				118,
				34
			]
		],
		[
			[
				3551,
				5472
			],
			[
				30,
				22
			],
			[
				0,
				0
			],
			[
				171,
				124
			],
			[
				158,
				43
			],
			[
				42,
				61
			],
			[
				17,
				24
			],
			[
				35,
				17
			],
			[
				27,
				-52
			],
			[
				11,
				-21
			],
			[
				8,
				39
			],
			[
				20,
				90
			],
			[
				6,
				25
			],
			[
				57,
				64
			],
			[
				14,
				16
			],
			[
				93,
				69
			],
			[
				63,
				-34
			],
			[
				13,
				28
			],
			[
				38,
				77
			],
			[
				34,
				15
			],
			[
				0,
				0
			]
		],
		[
			[
				4085,
				6737
			],
			[
				123,
				59
			],
			[
				142,
				-28
			],
			[
				15,
				-57
			],
			[
				48,
				7
			],
			[
				27,
				5
			],
			[
				14,
				2
			],
			[
				9,
				32
			],
			[
				17,
				68
			],
			[
				95,
				110
			],
			[
				60,
				69
			],
			[
				65,
				74
			],
			[
				13,
				126
			],
			[
				42,
				16
			]
		],
		[
			[
				4755,
				7220
			],
			[
				42,
				86
			],
			[
				28,
				-11
			],
			[
				7,
				-2
			],
			[
				30,
				-13
			],
			[
				35,
				45
			],
			[
				35,
				44
			],
			[
				61,
				9
			],
			[
				15,
				126
			],
			[
				5,
				2
			],
			[
				31,
				15
			],
			[
				57,
				28
			],
			[
				37,
				12
			],
			[
				140,
				46
			],
			[
				128,
				-40
			],
			[
				50,
				-15
			],
			[
				66,
				24
			],
			[
				217,
				78
			],
			[
				7,
				29
			],
			[
				62,
				263
			],
			[
				81,
				37
			],
			[
				43,
				19
			],
			[
				9,
				108
			],
			[
				2,
				22
			],
			[
				131,
				117
			],
			[
				17,
				-30
			],
			[
				9,
				-16
			],
			[
				256,
				-45
			],
			[
				140,
				30
			],
			[
				117,
				112
			]
		],
		[
			[
				5871,
				22109
			],
			[
				42,
				32
			],
			[
				128,
				95
			],
			[
				97,
				73
			],
			[
				61,
				45
			],
			[
				-27,
				1
			],
			[
				-36,
				1
			],
			[
				-21,
				1
			],
			[
				-104,
				-73
			],
			[
				-3,
				4
			],
			[
				-24,
				32
			]
		],
		[
			[
				6088,
				22457
			],
			[
				19,
				-32
			],
			[
				24,
				-7
			],
			[
				56,
				-15
			],
			[
				35,
				-9
			],
			[
				26,
				-7
			],
			[
				-1,
				28
			],
			[
				0,
				52
			],
			[
				-1,
				93
			],
			[
				-1,
				30
			],
			[
				-1,
				71
			],
			[
				124,
				84
			],
			[
				1,
				0
			],
			[
				38,
				-7
			],
			[
				72,
				-14
			],
			[
				24,
				-109
			],
			[
				255,
				65
			],
			[
				61,
				-66
			],
			[
				-5,
				-63
			],
			[
				-8,
				-110
			],
			[
				83,
				13
			],
			[
				55,
				-126
			],
			[
				-97,
				-69
			],
			[
				5,
				-92
			],
			[
				10,
				-152
			],
			[
				7,
				-115
			],
			[
				-24,
				-16
			],
			[
				-74,
				-51
			],
			[
				-2,
				-1
			],
			[
				-7,
				-30
			],
			[
				-3,
				-13
			]
		],
		[
			[
				7156,
				20796
			],
			[
				0,
				0
			],
			[
				-20,
				-19
			],
			[
				-44,
				-42
			],
			[
				-50,
				-49
			],
			[
				-173,
				-8
			],
			[
				-145,
				-6
			],
			[
				-110,
				-34
			],
			[
				-23,
				-8
			],
			[
				-95,
				-29
			],
			[
				-76,
				-97
			],
			[
				42,
				-117
			],
			[
				-75,
				-106
			],
			[
				-43,
				-61
			],
			[
				5,
				-64
			]
		],
		[
			[
				4538,
				20494
			],
			[
				0,
				20
			],
			[
				9,
				211
			],
			[
				2,
				50
			],
			[
				48,
				136
			],
			[
				46,
				132
			],
			[
				0,
				4
			],
			[
				-15,
				108
			],
			[
				-22,
				159
			],
			[
				-4,
				25
			],
			[
				-3,
				26
			],
			[
				13,
				31
			],
			[
				0,
				0
			]
		],
		[
			[
				2992,
				25654
			],
			[
				167,
				9
			],
			[
				122,
				8
			],
			[
				2,
				0
			],
			[
				119,
				6
			],
			[
				52,
				3
			],
			[
				85,
				56
			],
			[
				43,
				27
			],
			[
				35,
				102
			],
			[
				2,
				6
			],
			[
				2,
				5
			],
			[
				96,
				277
			],
			[
				-5,
				9
			],
			[
				-27,
				44
			],
			[
				-3,
				6
			],
			[
				-80,
				132
			],
			[
				-16,
				26
			]
		],
		[
			[
				9802,
				917
			],
			[
				-156,
				76
			],
			[
				-6,
				3
			],
			[
				-249,
				121
			],
			[
				-79,
				219
			],
			[
				-71,
				-15
			]
		],
		[
			[
				9916,
				3975
			],
			[
				16,
				-257
			],
			[
				36,
				-94
			],
			[
				90,
				43
			],
			[
				48,
				-149
			],
			[
				104,
				-51
			],
			[
				18,
				-73
			],
			[
				152,
				-46
			],
			[
				-76,
				-132
			],
			[
				36,
				-11
			],
			[
				80,
				-24
			],
			[
				24,
				-7
			],
			[
				4,
				-2
			],
			[
				-61,
				-149
			],
			[
				6,
				-36
			],
			[
				4,
				-25
			],
			[
				29,
				-180
			],
			[
				-47,
				-19
			],
			[
				-51,
				-21
			],
			[
				-49,
				-20
			],
			[
				-15,
				-6
			]
		],
		[
			[
				11623,
				3515
			],
			[
				88,
				-411
			],
			[
				89,
				-157
			],
			[
				12,
				-8
			],
			[
				27,
				-19
			],
			[
				47,
				99
			],
			[
				7,
				15
			],
			[
				21,
				43
			],
			[
				4,
				-16
			],
			[
				20,
				-73
			],
			[
				11,
				-40
			],
			[
				0,
				-1
			],
			[
				49,
				5
			],
			[
				42,
				4
			],
			[
				50,
				6
			],
			[
				13,
				1
			],
			[
				2,
				-5
			],
			[
				14,
				-44
			],
			[
				24,
				-7
			],
			[
				63,
				-17
			],
			[
				3,
				-1
			],
			[
				9,
				-3
			],
			[
				30,
				41
			],
			[
				2,
				2
			],
			[
				1,
				-2
			],
			[
				3,
				-2
			],
			[
				0,
				0
			]
		],
		[
			[
				5995,
				22488
			],
			[
				0,
				0
			],
			[
				-33,
				40
			],
			[
				-28,
				32
			],
			[
				-18,
				21
			],
			[
				17,
				228
			],
			[
				9,
				122
			],
			[
				-59,
				55
			],
			[
				79,
				106
			],
			[
				-7,
				58
			],
			[
				-7,
				71
			],
			[
				-2,
				18
			],
			[
				-46,
				23
			],
			[
				86,
				104
			],
			[
				23,
				26
			],
			[
				-32,
				58
			],
			[
				-20,
				38
			],
			[
				-2,
				3
			],
			[
				-2,
				3
			],
			[
				-73,
				-26
			],
			[
				-1,
				0
			],
			[
				0,
				1
			],
			[
				-98,
				51
			]
		],
		[
			[
				6526,
				24487
			],
			[
				34,
				-183
			],
			[
				149,
				-70
			],
			[
				-4,
				-114
			],
			[
				-1,
				-43
			],
			[
				18,
				-36
			],
			[
				32,
				-63
			],
			[
				43,
				-84
			],
			[
				2,
				-363
			],
			[
				-77,
				-112
			],
			[
				251,
				-36
			],
			[
				-31,
				-249
			],
			[
				59,
				-40
			],
			[
				97,
				-65
			],
			[
				52,
				-35
			],
			[
				80,
				-262
			],
			[
				76,
				-31
			],
			[
				44,
				-95
			],
			[
				39,
				-7
			],
			[
				87,
				-16
			],
			[
				107,
				-19
			],
			[
				10,
				-2
			],
			[
				43,
				-8
			],
			[
				14,
				-97
			],
			[
				27,
				22
			],
			[
				71,
				58
			],
			[
				270,
				-243
			],
			[
				57,
				-295
			],
			[
				47,
				-62
			],
			[
				65,
				-87
			],
			[
				89,
				-1
			],
			[
				0,
				0
			]
		],
		[
			[
				6733,
				30317
			],
			[
				0,
				0
			],
			[
				-1,
				-1
			],
			[
				-5,
				-9
			],
			[
				-2,
				0
			],
			[
				-28,
				-4
			],
			[
				-48,
				-7
			],
			[
				-8,
				-102
			],
			[
				-57,
				-54
			],
			[
				62,
				-183
			],
			[
				4,
				-11
			]
		],
		[
			[
				6650,
				29946
			],
			[
				-9,
				-33
			],
			[
				-27,
				-103
			],
			[
				-69,
				-33
			],
			[
				26,
				-87
			],
			[
				9,
				-28
			],
			[
				38,
				-128
			],
			[
				-103,
				-6
			],
			[
				-52,
				-51
			],
			[
				-25,
				-24
			],
			[
				-8,
				-33
			],
			[
				-10,
				-42
			],
			[
				-6,
				-27
			],
			[
				-6,
				-25
			],
			[
				-16,
				-65
			],
			[
				-90,
				-72
			],
			[
				41,
				-170
			],
			[
				-64,
				-13
			],
			[
				-13,
				-2
			],
			[
				-54,
				-88
			]
		],
		[
			[
				8898,
				33737
			],
			[
				8,
				-3
			],
			[
				33,
				-74
			],
			[
				1,
				-2
			],
			[
				17,
				-109
			],
			[
				-93,
				3
			],
			[
				12,
				-159
			],
			[
				-36,
				27
			],
			[
				-62,
				-35
			],
			[
				-188,
				-106
			],
			[
				-30,
				-17
			],
			[
				-213,
				-46
			],
			[
				-23,
				-5
			]
		],
		[
			[
				13043,
				14331
			],
			[
				245,
				-26
			],
			[
				108,
				-11
			],
			[
				5,
				14
			],
			[
				9,
				23
			],
			[
				17,
				46
			],
			[
				9,
				22
			],
			[
				22,
				59
			],
			[
				9,
				23
			],
			[
				42,
				111
			],
			[
				3,
				3
			],
			[
				73,
				63
			],
			[
				203,
				176
			]
		],
		[
			[
				17316,
				10635
			],
			[
				0,
				0
			],
			[
				-42,
				52
			],
			[
				-48,
				58
			],
			[
				-80,
				353
			],
			[
				15,
				182
			],
			[
				-101,
				257
			]
		],
		[
			[
				17060,
				11537
			],
			[
				41,
				155
			],
			[
				2,
				6
			],
			[
				0,
				0
			]
		],
		[
			[
				18491,
				10360
			],
			[
				20,
				-56
			],
			[
				4,
				-10
			],
			[
				-26,
				-105
			],
			[
				-4,
				-19
			],
			[
				-10,
				-38
			],
			[
				0,
				-2
			],
			[
				-17,
				-71
			],
			[
				59,
				-45
			],
			[
				-44,
				-176
			]
		],
		[
			[
				18799,
				11200
			],
			[
				-28,
				170
			],
			[
				-73,
				94
			],
			[
				-45,
				29
			],
			[
				2,
				61
			],
			[
				1,
				19
			],
			[
				-2,
				18
			],
			[
				0,
				30
			],
			[
				10,
				4
			],
			[
				28,
				11
			],
			[
				14,
				5
			],
			[
				23,
				104
			],
			[
				5,
				24
			],
			[
				-5,
				-1
			],
			[
				-18,
				-3
			],
			[
				-56,
				-8
			],
			[
				-11,
				-2
			],
			[
				-27,
				31
			],
			[
				-48,
				55
			],
			[
				21,
				48
			],
			[
				0,
				0
			],
			[
				-15,
				59
			],
			[
				-13,
				51
			],
			[
				52,
				120
			],
			[
				0,
				2
			],
			[
				-17,
				25
			],
			[
				-8,
				10
			],
			[
				-4,
				6
			],
			[
				-7,
				9
			]
		],
		[
			[
				18578,
				12171
			],
			[
				1,
				1
			],
			[
				20,
				12
			],
			[
				13,
				8
			],
			[
				1,
				0
			],
			[
				1,
				1
			],
			[
				28,
				17
			],
			[
				7,
				4
			],
			[
				0,
				5
			],
			[
				-2,
				33
			],
			[
				-2,
				34
			],
			[
				-2,
				40
			],
			[
				35,
				89
			],
			[
				-8,
				27
			],
			[
				-8,
				86
			],
			[
				-2,
				22
			]
		],
		[
			[
				19408,
				14634
			],
			[
				46,
				-40
			],
			[
				24,
				-20
			],
			[
				23,
				-21
			],
			[
				10,
				-9
			],
			[
				-51,
				-303
			],
			[
				-12,
				-68
			]
		],
		[
			[
				19721,
				11454
			],
			[
				-147,
				-262
			],
			[
				-5,
				-7
			],
			[
				-3,
				-3
			],
			[
				-50,
				-52
			],
			[
				0,
				-1
			],
			[
				-19,
				-19
			],
			[
				-28,
				-30
			],
			[
				-34,
				-35
			],
			[
				-1,
				-1
			],
			[
				1,
				-3
			],
			[
				5,
				-20
			],
			[
				22,
				-92
			],
			[
				13,
				-55
			],
			[
				18,
				-28
			],
			[
				78,
				-125
			]
		],
		[
			[
				19910,
				11079
			],
			[
				38,
				-60
			],
			[
				-39,
				-45
			],
			[
				-21,
				-23
			],
			[
				-32,
				-37
			],
			[
				-9,
				-9
			],
			[
				-7,
				-9
			],
			[
				-11,
				-14
			],
			[
				-25,
				-33
			],
			[
				-5,
				-6
			],
			[
				-11,
				-13
			],
			[
				23,
				-49
			],
			[
				-70,
				-17
			],
			[
				6,
				-51
			],
			[
				-25,
				-50
			]
		],
		[
			[
				18378,
				31807
			],
			[
				40,
				-196
			],
			[
				-107,
				-120
			]
		],
		[
			[
				18311,
				31491
			],
			[
				-175,
				-330
			],
			[
				-225,
				-85
			],
			[
				-1,
				0
			],
			[
				-123,
				15
			],
			[
				-31,
				4
			],
			[
				-1,
				0
			],
			[
				-107,
				-81
			],
			[
				-28,
				-21
			],
			[
				-22,
				-83
			],
			[
				-15,
				-56
			],
			[
				-7,
				-39
			],
			[
				176,
				-109
			],
			[
				48,
				-30
			],
			[
				2,
				-1
			],
			[
				156,
				-242
			],
			[
				37,
				-57
			],
			[
				79,
				-16
			],
			[
				41,
				-127
			],
			[
				14,
				-42
			],
			[
				79,
				-84
			],
			[
				65,
				33
			],
			[
				11,
				-8
			],
			[
				441,
				-351
			],
			[
				11,
				-9
			],
			[
				7,
				-5
			],
			[
				12,
				-10
			],
			[
				0,
				-69
			],
			[
				41,
				86
			],
			[
				30,
				2
			],
			[
				36,
				2
			],
			[
				49,
				2
			],
			[
				51,
				-1
			],
			[
				21,
				11
			],
			[
				25,
				-8
			],
			[
				75,
				-22
			],
			[
				17,
				-78
			],
			[
				44,
				-208
			],
			[
				39,
				-179
			],
			[
				0,
				-3
			],
			[
				42,
				-386
			],
			[
				9,
				-6
			],
			[
				72,
				-45
			],
			[
				1,
				-1
			],
			[
				148,
				-6
			],
			[
				4,
				0
			],
			[
				8,
				-12
			],
			[
				11,
				-18
			],
			[
				51,
				-80
			],
			[
				0,
				-1
			],
			[
				0,
				0
			],
			[
				84,
				72
			],
			[
				87,
				-34
			],
			[
				62,
				53
			],
			[
				26,
				22
			],
			[
				29,
				-74
			]
		],
		[
			[
				19817,
				28776
			],
			[
				-28,
				-90
			],
			[
				-50,
				-27
			],
			[
				-93,
				-52
			],
			[
				36,
				-102
			],
			[
				0,
				-2
			],
			[
				-59,
				-61
			],
			[
				-17,
				-18
			],
			[
				-124,
				88
			],
			[
				-18,
				-25
			],
			[
				-74,
				-104
			],
			[
				-11,
				-2
			],
			[
				-72,
				-17
			],
			[
				-41,
				-9
			],
			[
				-9,
				-3
			],
			[
				-6,
				-1
			],
			[
				-76,
				-18
			],
			[
				-36,
				-8
			],
			[
				-36,
				-64
			],
			[
				-14,
				-26
			],
			[
				-9,
				-15
			],
			[
				-37,
				-158
			],
			[
				-31,
				-132
			],
			[
				-4,
				-19
			],
			[
				68,
				-270
			],
			[
				-40,
				-11
			],
			[
				-85,
				-23
			],
			[
				-28,
				-7
			],
			[
				-6,
				-2
			],
			[
				-81,
				-22
			],
			[
				-27,
				-7
			]
		],
		[
			[
				18809,
				27569
			],
			[
				-217,
				218
			],
			[
				-196,
				362
			],
			[
				-43,
				163
			],
			[
				-29,
				109
			],
			[
				-46,
				169
			],
			[
				26,
				80
			],
			[
				25,
				79
			],
			[
				10,
				33
			],
			[
				-20,
				49
			],
			[
				-9,
				72
			],
			[
				-101,
				-11
			],
			[
				-75,
				-9
			],
			[
				-27,
				-3
			],
			[
				-2,
				0
			],
			[
				-5,
				38
			],
			[
				-41,
				-24
			],
			[
				-9,
				-5
			],
			[
				-11,
				-7
			],
			[
				-6,
				-3
			],
			[
				-28,
				-17
			],
			[
				-32,
				48
			],
			[
				-186,
				6
			],
			[
				-5,
				0
			],
			[
				-61,
				52
			],
			[
				-153,
				131
			],
			[
				-49,
				124
			],
			[
				-92,
				-101
			],
			[
				-6,
				9
			],
			[
				-92,
				141
			],
			[
				-135,
				42
			],
			[
				-12,
				3
			]
		],
		[
			[
				17182,
				29317
			],
			[
				-4,
				28
			],
			[
				-20,
				27
			],
			[
				-5,
				7
			],
			[
				-17,
				36
			],
			[
				-46,
				25
			],
			[
				-101,
				50
			],
			[
				0,
				50
			],
			[
				-95,
				39
			],
			[
				-76,
				32
			],
			[
				14,
				93
			],
			[
				10,
				71
			],
			[
				20,
				143
			],
			[
				8,
				56
			],
			[
				-140,
				61
			],
			[
				-83,
				37
			],
			[
				-2,
				88
			],
			[
				-180,
				-23
			],
			[
				-7,
				56
			],
			[
				-3,
				26
			],
			[
				-14,
				107
			]
		],
		[
			[
				16184,
				34355
			],
			[
				133,
				42
			],
			[
				80,
				25
			],
			[
				32,
				11
			],
			[
				76,
				95
			],
			[
				69,
				86
			],
			[
				328,
				10
			],
			[
				72,
				39
			],
			[
				29,
				15
			],
			[
				50,
				27
			],
			[
				56,
				30
			],
			[
				43,
				3
			],
			[
				222,
				16
			],
			[
				239,
				85
			],
			[
				92,
				-4
			],
			[
				8,
				-1
			],
			[
				6,
				0
			],
			[
				77,
				-4
			],
			[
				20,
				-1
			],
			[
				44,
				-2
			],
			[
				28,
				24
			],
			[
				106,
				88
			],
			[
				38,
				32
			],
			[
				2,
				1
			],
			[
				85,
				71
			],
			[
				29,
				24
			],
			[
				12,
				11
			],
			[
				145,
				120
			]
		],
		[
			[
				18305,
				35198
			],
			[
				500,
				-360
			],
			[
				43,
				-31
			],
			[
				13,
				-9
			],
			[
				31,
				-50
			],
			[
				28,
				-47
			],
			[
				9,
				-15
			],
			[
				10,
				-1
			],
			[
				15,
				-3
			],
			[
				114,
				-21
			],
			[
				88,
				-16
			]
		],
		[
			[
				17351,
				36282
			],
			[
				-130,
				-277
			],
			[
				346,
				-232
			],
			[
				72,
				-27
			],
			[
				125,
				-48
			],
			[
				13,
				-17
			],
			[
				118,
				-149
			],
			[
				100,
				-127
			],
			[
				27,
				-34
			],
			[
				31,
				-39
			],
			[
				73,
				-9
			],
			[
				42,
				-5
			],
			[
				73,
				-9
			]
		],
		[
			[
				18241,
				35309
			],
			[
				64,
				-111
			]
		],
		[
			[
				16863,
				36546
			],
			[
				22,
				-5
			],
			[
				30,
				-7
			],
			[
				1,
				-6
			],
			[
				18,
				-92
			],
			[
				19,
				-20
			],
			[
				39,
				-43
			],
			[
				40,
				-44
			],
			[
				30,
				-32
			],
			[
				49,
				-1
			],
			[
				38,
				91
			],
			[
				13,
				5
			],
			[
				56,
				24
			],
			[
				40,
				-41
			],
			[
				93,
				-93
			]
		],
		[
			[
				20465,
				39512
			],
			[
				59,
				-64
			],
			[
				3,
				-4
			],
			[
				2,
				-47
			],
			[
				1,
				-30
			],
			[
				2,
				-100
			],
			[
				79,
				11
			],
			[
				90,
				1
			],
			[
				57,
				-68
			],
			[
				2,
				-38
			],
			[
				107,
				7
			],
			[
				65,
				-434
			],
			[
				9,
				-56
			],
			[
				187,
				-193
			],
			[
				19,
				-20
			],
			[
				81,
				-83
			],
			[
				45,
				-47
			],
			[
				28,
				-29
			],
			[
				55,
				-57
			]
		],
		[
			[
				18516,
				41807
			],
			[
				-622,
				-75
			],
			[
				-13,
				7
			],
			[
				-32,
				19
			],
			[
				-63,
				37
			],
			[
				-1,
				1
			],
			[
				-144,
				85
			],
			[
				-4,
				2
			],
			[
				-2,
				-2
			],
			[
				-74,
				-81
			],
			[
				-146,
				8
			],
			[
				-66,
				-46
			],
			[
				-46,
				-68
			],
			[
				-60,
				-89
			],
			[
				-16,
				-25
			],
			[
				36,
				-47
			],
			[
				26,
				-32
			],
			[
				-63,
				-20
			],
			[
				-272,
				-86
			],
			[
				-98,
				48
			],
			[
				-80,
				-63
			],
			[
				4,
				68
			],
			[
				-97,
				160
			]
		],
		[
			[
				17346,
				42817
			],
			[
				0,
				0
			],
			[
				-14,
				-4
			],
			[
				-25,
				-8
			],
			[
				16,
				-19
			],
			[
				44,
				-52
			],
			[
				20,
				-23
			],
			[
				39,
				-25
			],
			[
				533,
				-342
			],
			[
				-35,
				-154
			],
			[
				-7,
				-34
			],
			[
				-3,
				-15
			],
			[
				468,
				96
			]
		],
		[
			[
				20531,
				36442
			],
			[
				54,
				227
			],
			[
				43,
				186
			],
			[
				32,
				136
			],
			[
				53,
				221
			],
			[
				8,
				36
			],
			[
				23,
				98
			],
			[
				7,
				27
			],
			[
				4,
				18
			],
			[
				23,
				34
			],
			[
				33,
				48
			],
			[
				15,
				21
			],
			[
				190,
				275
			],
			[
				48,
				70
			],
			[
				32,
				46
			],
			[
				187,
				270
			],
			[
				21,
				31
			],
			[
				52,
				75
			]
		],
		[
			[
				20742,
				40082
			],
			[
				238,
				102
			],
			[
				31,
				14
			],
			[
				-4,
				43
			],
			[
				32,
				0
			],
			[
				18,
				0
			],
			[
				9,
				0
			],
			[
				50,
				0
			],
			[
				179,
				83
			],
			[
				113,
				51
			],
			[
				0,
				0
			],
			[
				80,
				5
			],
			[
				142,
				8
			],
			[
				86,
				5
			],
			[
				461,
				26
			],
			[
				15,
				1
			],
			[
				119,
				30
			],
			[
				147,
				37
			],
			[
				93,
				23
			],
			[
				20,
				5
			],
			[
				0,
				1
			],
			[
				296,
				160
			],
			[
				108,
				15
			],
			[
				80,
				10
			],
			[
				36,
				5
			],
			[
				3,
				0
			],
			[
				26,
				4
			],
			[
				174,
				23
			],
			[
				20,
				2
			],
			[
				1,
				1
			]
		],
		[
			[
				20165,
				43918
			],
			[
				0,
				0
			],
			[
				-54,
				-10
			],
			[
				-8,
				-2
			],
			[
				-56,
				-15
			],
			[
				-141,
				-36
			],
			[
				-28,
				-84
			],
			[
				161,
				-85
			],
			[
				47,
				-25
			],
			[
				0,
				0
			]
		],
		[
			[
				20001,
				43458
			],
			[
				8,
				-61
			],
			[
				7,
				-4
			],
			[
				99,
				-53
			],
			[
				-29,
				-144
			],
			[
				2,
				-3
			],
			[
				64,
				-145
			],
			[
				35,
				-18
			],
			[
				41,
				-22
			],
			[
				31,
				-17
			],
			[
				97,
				31
			],
			[
				27,
				-23
			],
			[
				86,
				-73
			],
			[
				43,
				52
			],
			[
				9,
				11
			],
			[
				165,
				-237
			],
			[
				11,
				-112
			],
			[
				28,
				-7
			],
			[
				70,
				-15
			]
		],
		[
			[
				22247,
				45643
			],
			[
				-44,
				-30
			],
			[
				-383,
				-259
			]
		],
		[
			[
				21820,
				45354
			],
			[
				-71,
				-5
			],
			[
				-116,
				-8
			],
			[
				-98,
				-7
			],
			[
				-62,
				13
			],
			[
				-111,
				21
			],
			[
				-68,
				14
			],
			[
				-175,
				34
			],
			[
				-9,
				-1
			],
			[
				-196,
				-15
			],
			[
				-71,
				-5
			],
			[
				-111,
				-152
			],
			[
				-125,
				-211
			]
		],
		[
			[
				20583,
				44991
			],
			[
				0,
				0
			],
			[
				-25,
				-42
			],
			[
				-7,
				-12
			],
			[
				-39,
				8
			],
			[
				-1,
				0
			],
			[
				-42,
				-17
			],
			[
				-68,
				69
			],
			[
				-87,
				88
			],
			[
				-5,
				-2
			]
		],
		[
			[
				25118,
				58210
			],
			[
				18,
				22
			],
			[
				151,
				-38
			],
			[
				0,
				0
			],
			[
				259,
				48
			],
			[
				81,
				-36
			],
			[
				-9,
				-63
			],
			[
				-5,
				-31
			],
			[
				88,
				-110
			],
			[
				103,
				-130
			],
			[
				-33,
				-122
			],
			[
				8,
				-25
			],
			[
				29,
				-93
			],
			[
				-12,
				-11
			],
			[
				-56,
				-54
			],
			[
				59,
				-36
			],
			[
				65,
				-40
			],
			[
				70,
				-142
			]
		],
		[
			[
				24022,
				58567
			],
			[
				61,
				70
			],
			[
				46,
				-44
			],
			[
				108,
				3
			],
			[
				0,
				0
			]
		],
		[
			[
				24602,
				58236
			],
			[
				241,
				53
			],
			[
				0,
				0
			]
		],
		[
			[
				27086,
				48554
			],
			[
				-51,
				-103
			],
			[
				-326,
				-188
			],
			[
				-83,
				-48
			],
			[
				-78,
				-45
			],
			[
				-5,
				-3
			],
			[
				-63,
				-36
			],
			[
				-1,
				-132
			],
			[
				-226,
				-664
			],
			[
				-44,
				-78
			],
			[
				-193,
				-344
			],
			[
				-10,
				-17
			],
			[
				-11,
				-19
			],
			[
				-16,
				-29
			],
			[
				-16,
				-29
			],
			[
				-89,
				-159
			],
			[
				-59,
				-106
			],
			[
				-104,
				-186
			],
			[
				26,
				-231
			],
			[
				-286,
				37
			],
			[
				-34,
				5
			],
			[
				-108,
				-29
			],
			[
				19,
				-81
			],
			[
				79,
				-344
			],
			[
				10,
				-40
			],
			[
				9,
				-43
			],
			[
				20,
				-87
			],
			[
				55,
				-72
			],
			[
				47,
				-60
			],
			[
				8,
				-12
			],
			[
				-13,
				-141
			],
			[
				-35,
				-361
			],
			[
				-6,
				-62
			],
			[
				-36,
				-384
			],
			[
				-1,
				-9
			]
		],
		[
			[
				25465,
				44454
			],
			[
				-6,
				8
			],
			[
				-234,
				336
			],
			[
				-163,
				233
			],
			[
				-146,
				208
			],
			[
				-68,
				97
			],
			[
				-3,
				4
			],
			[
				-109,
				154
			],
			[
				17,
				83
			],
			[
				-12,
				5
			],
			[
				-108,
				41
			],
			[
				-84,
				30
			],
			[
				6,
				77
			],
			[
				2,
				25
			],
			[
				-73,
				-21
			],
			[
				-23,
				21
			],
			[
				-15,
				15
			],
			[
				-6,
				5
			],
			[
				-44,
				-23
			],
			[
				-126,
				-67
			],
			[
				-1,
				1
			],
			[
				-24,
				17
			],
			[
				-236,
				166
			],
			[
				63,
				105
			],
			[
				-117,
				-9
			],
			[
				-30,
				-3
			],
			[
				-193,
				-15
			]
		],
		[
			[
				23732,
				45947
			],
			[
				24,
				527
			],
			[
				43,
				41
			],
			[
				82,
				79
			],
			[
				61,
				57
			],
			[
				-38,
				34
			],
			[
				-107,
				96
			],
			[
				-55,
				49
			],
			[
				74,
				80
			],
			[
				224,
				10
			],
			[
				307,
				103
			],
			[
				-18,
				178
			],
			[
				-3,
				30
			],
			[
				60,
				145
			],
			[
				-54,
				138
			]
		],
		[
			[
				29177,
				62512
			],
			[
				141,
				3
			],
			[
				72,
				-83
			],
			[
				6,
				-8
			],
			[
				-37,
				-31
			]
		],
		[
			[
				29274,
				60056
			],
			[
				-245,
				-11
			],
			[
				-167,
				-161
			],
			[
				-106,
				20
			],
			[
				-41,
				7
			],
			[
				3,
				22
			],
			[
				8,
				72
			],
			[
				-181,
				120
			],
			[
				30,
				36
			],
			[
				33,
				40
			],
			[
				-4,
				31
			],
			[
				-9,
				75
			],
			[
				-215,
				58
			],
			[
				-94,
				-51
			],
			[
				-1,
				104
			],
			[
				-88,
				-14
			],
			[
				-32,
				27
			],
			[
				-93,
				83
			],
			[
				1,
				26
			],
			[
				2,
				43
			],
			[
				-101,
				104
			],
			[
				120,
				75
			],
			[
				-35,
				64
			],
			[
				-41,
				75
			],
			[
				-21,
				40
			],
			[
				-4,
				7
			],
			[
				-8,
				-4
			],
			[
				-82,
				-44
			],
			[
				-91,
				11
			],
			[
				-44,
				71
			],
			[
				-87,
				-71
			],
			[
				-34,
				3
			],
			[
				-116,
				12
			],
			[
				-203,
				21
			],
			[
				-156,
				75
			],
			[
				-109,
				53
			],
			[
				3,
				17
			],
			[
				6,
				35
			],
			[
				0,
				0
			]
		],
		[
			[
				31747,
				65071
			],
			[
				0,
				0
			],
			[
				-40,
				-111
			],
			[
				-61,
				-1
			],
			[
				-6,
				-15
			],
			[
				-24,
				-68
			],
			[
				-51,
				-31
			],
			[
				-115,
				-71
			],
			[
				-38,
				-24
			],
			[
				70,
				-52
			],
			[
				-28,
				-38
			],
			[
				75,
				-174
			],
			[
				-44,
				-152
			],
			[
				241,
				-91
			]
		],
		[
			[
				31726,
				64243
			],
			[
				5,
				-231
			],
			[
				-8,
				-9
			],
			[
				-97,
				-91
			],
			[
				-11,
				-11
			],
			[
				-2,
				-2
			],
			[
				-82,
				10
			],
			[
				-75,
				10
			],
			[
				14,
				-43
			],
			[
				12,
				-37
			],
			[
				-146,
				-41
			],
			[
				22,
				-58
			],
			[
				6,
				-15
			],
			[
				12,
				-33
			],
			[
				18,
				-49
			],
			[
				4,
				-13
			],
			[
				0,
				0
			]
		],
		[
			[
				32311,
				62746
			],
			[
				0,
				0
			],
			[
				1,
				-57
			],
			[
				-106,
				-83
			],
			[
				-43,
				2
			],
			[
				-45,
				2
			],
			[
				-146,
				-150
			],
			[
				-20,
				-58
			],
			[
				-39,
				-112
			],
			[
				-66,
				-187
			],
			[
				-9,
				-26
			],
			[
				-77,
				-84
			],
			[
				-39,
				-102
			],
			[
				66,
				-98
			],
			[
				-19,
				-106
			],
			[
				-26,
				-139
			],
			[
				-42,
				-51
			],
			[
				-9,
				-11
			],
			[
				-101,
				-122
			],
			[
				-30,
				-166
			],
			[
				-5,
				-26
			],
			[
				-48,
				-18
			],
			[
				-64,
				-24
			],
			[
				-52,
				-20
			],
			[
				-19,
				-74
			],
			[
				-2,
				-10
			],
			[
				-6,
				-22
			],
			[
				-7,
				-26
			],
			[
				-17,
				-65
			],
			[
				-51,
				40
			]
		],
		[
			[
				32624,
				62773
			],
			[
				35,
				22
			],
			[
				80,
				53
			],
			[
				257,
				-45
			],
			[
				3,
				-54
			],
			[
				1,
				-16
			],
			[
				91,
				-77
			],
			[
				152,
				-130
			],
			[
				10,
				-162
			],
			[
				524,
				-223
			],
			[
				0,
				-1
			],
			[
				350,
				-279
			],
			[
				7,
				-5
			],
			[
				12,
				-10
			],
			[
				69,
				-56
			],
			[
				16,
				-7
			],
			[
				97,
				-41
			],
			[
				43,
				-19
			],
			[
				19,
				-8
			],
			[
				348,
				-151
			],
			[
				420,
				17
			],
			[
				0,
				0
			]
		],
		[
			[
				38098,
				69070
			],
			[
				21,
				85
			],
			[
				-161,
				79
			],
			[
				-51,
				25
			],
			[
				63,
				130
			],
			[
				-26,
				60
			],
			[
				-76,
				175
			],
			[
				-20,
				45
			],
			[
				-7,
				15
			],
			[
				112,
				154
			],
			[
				-33,
				72
			],
			[
				47,
				62
			],
			[
				7,
				9
			],
			[
				-62,
				70
			],
			[
				-76,
				86
			],
			[
				-11,
				12
			],
			[
				-7,
				20
			],
			[
				-91,
				242
			],
			[
				-236,
				146
			],
			[
				13,
				102
			],
			[
				1,
				11
			],
			[
				4,
				31
			],
			[
				-46,
				136
			],
			[
				-14,
				41
			]
		],
		[
			[
				38206,
				71553
			],
			[
				0,
				0
			],
			[
				-87,
				77
			],
			[
				-123,
				-63
			],
			[
				16,
				81
			],
			[
				50,
				245
			],
			[
				49,
				-10
			],
			[
				7,
				8
			],
			[
				7,
				11
			],
			[
				142,
				189
			]
		],
		[
			[
				35974,
				71687
			],
			[
				-73,
				-125
			],
			[
				17,
				-131
			],
			[
				13,
				-98
			],
			[
				0,
				0
			]
		],
		[
			[
				54805,
				84661
			],
			[
				148,
				-99
			],
			[
				356,
				-5
			],
			[
				94,
				-2
			],
			[
				10,
				17
			],
			[
				20,
				32
			],
			[
				9,
				15
			],
			[
				108,
				176
			],
			[
				75,
				120
			],
			[
				119,
				-32
			],
			[
				180,
				-49
			],
			[
				107,
				-29
			],
			[
				111,
				-30
			]
		],
		[
			[
				52978,
				82141
			],
			[
				41,
				92
			],
			[
				12,
				26
			],
			[
				15,
				8
			],
			[
				80,
				43
			],
			[
				35,
				194
			],
			[
				135,
				-5
			],
			[
				86,
				-3
			],
			[
				425,
				133
			],
			[
				24,
				-20
			],
			[
				55,
				-48
			],
			[
				41,
				-36
			],
			[
				12,
				-10
			],
			[
				99,
				18
			],
			[
				105,
				19
			],
			[
				-32,
				30
			],
			[
				-99,
				95
			],
			[
				-3,
				53
			],
			[
				-6,
				147
			],
			[
				-5,
				113
			],
			[
				-15,
				6
			],
			[
				-142,
				59
			],
			[
				-16,
				40
			],
			[
				-22,
				53
			],
			[
				-84,
				65
			],
			[
				-102,
				78
			],
			[
				14,
				35
			],
			[
				34,
				86
			],
			[
				-127,
				77
			],
			[
				3,
				13
			],
			[
				26,
				121
			],
			[
				3,
				2
			],
			[
				0,
				0
			]
		],
		[
			[
				53776,
				83808
			],
			[
				51,
				46
			]
		],
		[
			[
				53827,
				83854
			],
			[
				212,
				-68
			],
			[
				116,
				98
			],
			[
				0,
				0
			],
			[
				111,
				-36
			],
			[
				38,
				44
			],
			[
				-3,
				63
			],
			[
				-1,
				19
			],
			[
				-9,
				181
			],
			[
				0,
				9
			],
			[
				19,
				13
			],
			[
				84,
				54
			],
			[
				2,
				108
			],
			[
				3,
				194
			]
		],
		[
			[
				53827,
				83854
			],
			[
				-40,
				62
			],
			[
				-52,
				11
			],
			[
				-132,
				26
			],
			[
				-83,
				227
			],
			[
				-41,
				9
			],
			[
				-102,
				22
			]
		],
		[
			[
				54625,
				87078
			],
			[
				7,
				-8
			],
			[
				-42,
				-134
			],
			[
				350,
				-243
			],
			[
				-43,
				-105
			],
			[
				-87,
				-28
			],
			[
				142,
				-206
			],
			[
				-117,
				-132
			],
			[
				111,
				-15
			],
			[
				89,
				-200
			],
			[
				-91,
				-8
			],
			[
				-106,
				-128
			],
			[
				-31,
				48
			],
			[
				-90,
				-21
			],
			[
				-23,
				-104
			],
			[
				-185,
				-146
			]
		],
		[
			[
				54501,
				85641
			],
			[
				0,
				0
			],
			[
				-51,
				-40
			],
			[
				-19,
				-294
			]
		],
		[
			[
				3333,
				6213
			],
			[
				0,
				0
			],
			[
				-8,
				3
			],
			[
				-2,
				1
			],
			[
				-42,
				14
			],
			[
				-54,
				19
			],
			[
				-56,
				20
			]
		],
		[
			[
				4561,
				12412
			],
			[
				0,
				0
			],
			[
				-29,
				49
			],
			[
				-14,
				24
			],
			[
				-53,
				87
			],
			[
				30,
				112
			],
			[
				-40,
				130
			],
			[
				26,
				57
			],
			[
				203,
				120
			],
			[
				88,
				155
			],
			[
				-40,
				107
			],
			[
				145,
				-40
			],
			[
				28,
				93
			],
			[
				2,
				8
			],
			[
				52,
				172
			],
			[
				130,
				434
			]
		],
		[
			[
				5596,
				17037
			],
			[
				74,
				-62
			],
			[
				2,
				-2
			],
			[
				-104,
				-76
			],
			[
				9,
				-24
			],
			[
				8,
				-22
			],
			[
				6,
				-16
			],
			[
				0,
				0
			]
		],
		[
			[
				6352,
				17100
			],
			[
				-181,
				-141
			],
			[
				-94,
				14
			],
			[
				-7,
				1
			],
			[
				-54,
				8
			]
		],
		[
			[
				2737,
				23511
			],
			[
				170,
				-42
			],
			[
				182,
				-44
			],
			[
				37,
				27
			],
			[
				1,
				1
			],
			[
				20,
				15
			],
			[
				82,
				-27
			],
			[
				70,
				-23
			],
			[
				103,
				60
			],
			[
				83,
				-1
			],
			[
				53,
				0
			],
			[
				17,
				0
			],
			[
				57,
				-178
			],
			[
				47,
				-148
			],
			[
				13,
				-40
			],
			[
				21,
				4
			],
			[
				24,
				4
			],
			[
				9,
				2
			],
			[
				101,
				-83
			],
			[
				228,
				44
			],
			[
				20,
				13
			],
			[
				52,
				36
			],
			[
				80,
				53
			],
			[
				71,
				-95
			],
			[
				70,
				17
			],
			[
				72,
				193
			],
			[
				88,
				-35
			],
			[
				4,
				-2
			],
			[
				33,
				-13
			],
			[
				14,
				3
			],
			[
				141,
				25
			],
			[
				14,
				18
			],
			[
				34,
				45
			],
			[
				23,
				-13
			],
			[
				33,
				-19
			],
			[
				45,
				-27
			],
			[
				69,
				70
			],
			[
				35,
				-33
			],
			[
				17,
				-16
			],
			[
				77,
				-73
			],
			[
				36,
				-34
			],
			[
				107,
				6
			],
			[
				40,
				-62
			],
			[
				-32,
				-144
			],
			[
				88,
				-50
			],
			[
				47,
				-27
			]
		],
		[
			[
				12292,
				23319
			],
			[
				66,
				-71
			],
			[
				83,
				-88
			],
			[
				78,
				-194
			],
			[
				38,
				-29
			],
			[
				19,
				-15
			],
			[
				34,
				-27
			],
			[
				0,
				-2
			],
			[
				-1,
				-54
			],
			[
				-4,
				-266
			],
			[
				-40,
				18
			],
			[
				-3,
				2
			],
			[
				-35,
				15
			],
			[
				-166,
				-128
			],
			[
				-5,
				-4
			],
			[
				19,
				-50
			],
			[
				39,
				-99
			],
			[
				83,
				2
			],
			[
				31,
				1
			],
			[
				1,
				0
			],
			[
				0,
				-1
			],
			[
				14,
				-34
			],
			[
				27,
				-69
			],
			[
				3,
				-8
			],
			[
				4,
				-1
			],
			[
				110,
				-12
			],
			[
				16,
				-24
			],
			[
				94,
				-149
			]
		],
		[
			[
				12797,
				22032
			],
			[
				-11,
				-64
			],
			[
				-5,
				-29
			],
			[
				-54,
				-301
			],
			[
				-5,
				-28
			],
			[
				-3,
				-25
			],
			[
				-7,
				-61
			],
			[
				0,
				-3
			],
			[
				-2,
				-18
			],
			[
				-19,
				3
			],
			[
				-11,
				2
			],
			[
				-114,
				22
			],
			[
				-43,
				8
			],
			[
				-23,
				-35
			],
			[
				-116,
				-181
			],
			[
				-89,
				-139
			],
			[
				-28,
				-43
			],
			[
				-49,
				-76
			],
			[
				-52,
				-82
			],
			[
				190,
				-176
			],
			[
				-3,
				-45
			],
			[
				-3,
				-27
			],
			[
				-8,
				-99
			],
			[
				-4,
				-6
			],
			[
				-36,
				-48
			],
			[
				-13,
				-17
			],
			[
				-108,
				-145
			],
			[
				-7,
				-10
			],
			[
				-13,
				-18
			],
			[
				-20,
				-63
			],
			[
				-35,
				-112
			],
			[
				-8,
				-26
			]
		],
		[
			[
				13439,
				9605
			],
			[
				34,
				-36
			],
			[
				11,
				41
			],
			[
				40,
				-91
			],
			[
				-46,
				45
			],
			[
				70,
				-251
			],
			[
				80,
				14
			],
			[
				140,
				-146
			],
			[
				44,
				40
			],
			[
				16,
				15
			],
			[
				61,
				56
			],
			[
				30,
				-25
			]
		],
		[
			[
				12775,
				9381
			],
			[
				66,
				-56
			],
			[
				239,
				153
			],
			[
				86,
				-58
			],
			[
				95,
				118
			],
			[
				2,
				2
			],
			[
				35,
				45
			],
			[
				12,
				14
			],
			[
				129,
				6
			]
		],
		[
			[
				14719,
				6503
			],
			[
				-58,
				19
			]
		],
		[
			[
				14539,
				6576
			],
			[
				0,
				0
			],
			[
				-8,
				36
			],
			[
				-32,
				-15
			],
			[
				-78,
				-38
			],
			[
				-28,
				-14
			],
			[
				1,
				43
			],
			[
				1,
				24
			],
			[
				0,
				15
			],
			[
				-16,
				12
			],
			[
				-41,
				31
			],
			[
				-25,
				-54
			],
			[
				-84,
				235
			],
			[
				-186,
				143
			]
		],
		[
			[
				13439,
				9605
			],
			[
				55,
				108
			],
			[
				20,
				40
			],
			[
				3,
				5
			],
			[
				5,
				10
			],
			[
				6,
				12
			],
			[
				7,
				14
			],
			[
				-40,
				45
			],
			[
				0,
				0
			],
			[
				1,
				2
			],
			[
				39,
				75
			],
			[
				8,
				16
			],
			[
				4,
				8
			],
			[
				31,
				58
			],
			[
				11,
				116
			],
			[
				34,
				71
			],
			[
				34,
				-29
			],
			[
				32,
				-28
			],
			[
				-15,
				130
			],
			[
				-4,
				37
			]
		],
		[
			[
				14515,
				15816
			],
			[
				104,
				-322
			],
			[
				25,
				-78
			],
			[
				3,
				-10
			],
			[
				19,
				-299
			],
			[
				-24,
				-87
			],
			[
				-28,
				-102
			],
			[
				95,
				-81
			],
			[
				100,
				-57
			],
			[
				124,
				-155
			],
			[
				18,
				-22
			],
			[
				165,
				-61
			],
			[
				301,
				-263
			]
		],
		[
			[
				14084,
				26658
			],
			[
				-9,
				-35
			],
			[
				-45,
				-180
			],
			[
				-5,
				-20
			],
			[
				-5,
				-19
			],
			[
				-6,
				-23
			],
			[
				-2,
				-11
			],
			[
				11,
				-4
			],
			[
				245,
				-97
			],
			[
				19,
				-70
			],
			[
				27,
				61
			],
			[
				69,
				-21
			],
			[
				-8,
				-73
			],
			[
				56,
				-9
			],
			[
				-126,
				-138
			],
			[
				-48,
				-11
			],
			[
				-14,
				-3
			],
			[
				-50,
				-12
			],
			[
				-4,
				-7
			],
			[
				-24,
				-43
			],
			[
				-35,
				-62
			],
			[
				-69,
				31
			],
			[
				-272,
				121
			],
			[
				-59,
				-44
			],
			[
				22,
				-101
			],
			[
				-60,
				-34
			],
			[
				-132,
				-74
			],
			[
				-58,
				-33
			],
			[
				-22,
				-174
			],
			[
				-10,
				-78
			],
			[
				72,
				-216
			],
			[
				3,
				-8
			],
			[
				-28,
				-174
			],
			[
				-2,
				-14
			],
			[
				-1,
				-16
			],
			[
				-19,
				-228
			],
			[
				-11,
				-137
			],
			[
				-6,
				-68
			],
			[
				44,
				-32
			],
			[
				232,
				-172
			],
			[
				14,
				-11
			]
		],
		[
			[
				11659,
				23347
			],
			[
				-34,
				167
			],
			[
				-17,
				80
			],
			[
				-15,
				75
			],
			[
				-2,
				9
			],
			[
				45,
				27
			],
			[
				378,
				232
			],
			[
				11,
				7
			],
			[
				6,
				3
			],
			[
				-1,
				1
			],
			[
				-25,
				39
			],
			[
				-93,
				141
			],
			[
				-27,
				42
			],
			[
				-90,
				136
			],
			[
				-9,
				25
			],
			[
				-15,
				39
			],
			[
				-48,
				129
			],
			[
				2,
				83
			],
			[
				92,
				14
			],
			[
				18,
				3
			],
			[
				265,
				42
			],
			[
				119,
				88
			],
			[
				26,
				-3
			],
			[
				162,
				-15
			],
			[
				160,
				229
			],
			[
				88,
				67
			],
			[
				18,
				14
			],
			[
				40,
				31
			],
			[
				10,
				114
			],
			[
				3,
				35
			],
			[
				5,
				49
			],
			[
				18,
				207
			],
			[
				118,
				92
			],
			[
				41,
				31
			],
			[
				43,
				33
			],
			[
				77,
				59
			],
			[
				13,
				11
			],
			[
				65,
				-54
			],
			[
				1,
				-1
			],
			[
				-1,
				9
			],
			[
				-28,
				163
			],
			[
				-36,
				53
			],
			[
				-40,
				58
			],
			[
				-5,
				7
			],
			[
				28,
				123
			],
			[
				1,
				3
			],
			[
				-5,
				3
			],
			[
				-62,
				47
			],
			[
				-4,
				40
			],
			[
				-1,
				16
			],
			[
				0,
				0
			],
			[
				-216,
				72
			],
			[
				9,
				110
			],
			[
				1,
				8
			],
			[
				3,
				37
			],
			[
				4,
				46
			],
			[
				-2,
				14
			],
			[
				-7,
				37
			],
			[
				-3,
				19
			],
			[
				-18,
				99
			],
			[
				-13,
				73
			],
			[
				43,
				191
			],
			[
				5,
				23
			],
			[
				22,
				102
			],
			[
				5,
				20
			],
			[
				9,
				40
			],
			[
				10,
				46
			],
			[
				12,
				54
			],
			[
				-75,
				56
			],
			[
				2,
				275
			]
		],
		[
			[
				12745,
				27472
			],
			[
				137,
				-41
			],
			[
				15,
				49
			],
			[
				64,
				24
			],
			[
				39,
				14
			],
			[
				35,
				13
			],
			[
				21,
				8
			],
			[
				121,
				-6
			]
		],
		[
			[
				15590,
				19238
			],
			[
				-94,
				72
			],
			[
				0,
				1
			],
			[
				0,
				42
			],
			[
				0,
				12
			],
			[
				-110,
				22
			],
			[
				2,
				-25
			],
			[
				0,
				-13
			],
			[
				-29,
				-11
			],
			[
				-61,
				-23
			],
			[
				-140,
				150
			],
			[
				-157,
				57
			],
			[
				-194,
				70
			],
			[
				2,
				76
			]
		],
		[
			[
				14809,
				19668
			],
			[
				-4,
				14
			],
			[
				-74,
				242
			],
			[
				3,
				23
			],
			[
				15,
				143
			],
			[
				-70,
				77
			],
			[
				19,
				24
			],
			[
				30,
				39
			],
			[
				-86,
				50
			],
			[
				-13,
				8
			],
			[
				2,
				10
			],
			[
				40,
				143
			],
			[
				87,
				4
			],
			[
				-40,
				139
			],
			[
				-123,
				105
			],
			[
				-48,
				41
			],
			[
				0,
				1
			],
			[
				-85,
				160
			],
			[
				-42,
				78
			],
			[
				-144,
				2
			],
			[
				68,
				55
			],
			[
				75,
				75
			],
			[
				25,
				25
			],
			[
				118,
				120
			],
			[
				26,
				0
			],
			[
				43,
				1
			],
			[
				14,
				10
			],
			[
				197,
				143
			],
			[
				26,
				19
			],
			[
				13,
				-2
			],
			[
				75,
				-8
			],
			[
				4,
				0
			],
			[
				22,
				-18
			],
			[
				17,
				-13
			],
			[
				1,
				0
			],
			[
				97,
				-77
			],
			[
				78,
				104
			],
			[
				-32,
				52
			],
			[
				70,
				18
			]
		],
		[
			[
				16305,
				25722
			],
			[
				-73,
				-190
			],
			[
				-3,
				-8
			],
			[
				-20,
				-2
			],
			[
				-98,
				-14
			],
			[
				-71,
				-104
			],
			[
				27,
				-104
			],
			[
				2,
				-6
			],
			[
				2,
				-7
			],
			[
				0,
				-3
			],
			[
				1,
				-3
			],
			[
				0,
				0
			],
			[
				-5,
				-9
			],
			[
				-24,
				-42
			],
			[
				-19,
				-35
			],
			[
				-9,
				-17
			],
			[
				12,
				-43
			],
			[
				9,
				-30
			],
			[
				4,
				-31
			],
			[
				35,
				-243
			],
			[
				0,
				-1
			],
			[
				71,
				-89
			],
			[
				146,
				-183
			],
			[
				6,
				-8
			],
			[
				31,
				-136
			],
			[
				7,
				-28
			],
			[
				0,
				0
			],
			[
				-22,
				-41
			],
			[
				-10,
				-19
			],
			[
				-13,
				-24
			],
			[
				6,
				-28
			],
			[
				11,
				-51
			],
			[
				4,
				-16
			],
			[
				-5,
				-11
			],
			[
				-68,
				-157
			],
			[
				-95,
				-472
			],
			[
				-42,
				-204
			],
			[
				-90,
				-67
			],
			[
				-51,
				-37
			]
		],
		[
			[
				13709,
				23019
			],
			[
				0,
				77
			],
			[
				144,
				-113
			],
			[
				84,
				17
			],
			[
				86,
				17
			],
			[
				7,
				-3
			],
			[
				61,
				-21
			],
			[
				21,
				-7
			],
			[
				3,
				8
			],
			[
				88,
				207
			],
			[
				1,
				1
			],
			[
				3,
				1
			],
			[
				71,
				26
			],
			[
				34,
				12
			],
			[
				-43,
				101
			],
			[
				-66,
				153
			],
			[
				-48,
				113
			],
			[
				90,
				35
			],
			[
				71,
				27
			],
			[
				122,
				122
			],
			[
				-65,
				-4
			],
			[
				-62,
				88
			],
			[
				88,
				49
			],
			[
				68,
				39
			],
			[
				177,
				-88
			],
			[
				4,
				-2
			],
			[
				157,
				-78
			],
			[
				308,
				34
			],
			[
				23,
				2
			],
			[
				4,
				1
			],
			[
				89,
				89
			],
			[
				256,
				481
			],
			[
				53,
				100
			],
			[
				39,
				73
			],
			[
				44,
				6
			],
			[
				7,
				1
			],
			[
				6,
				9
			],
			[
				2,
				3
			],
			[
				4,
				5
			],
			[
				11,
				18
			],
			[
				22,
				33
			],
			[
				93,
				138
			],
			[
				15,
				22
			],
			[
				96,
				405
			],
			[
				26,
				108
			],
			[
				17,
				180
			],
			[
				12,
				130
			],
			[
				6,
				66
			],
			[
				7,
				65
			],
			[
				134,
				303
			],
			[
				112,
				115
			],
			[
				-58,
				288
			],
			[
				-6,
				31
			]
		],
		[
			[
				14407,
				36119
			],
			[
				-20,
				-4
			],
			[
				-142,
				-28
			],
			[
				-26,
				-22
			],
			[
				-53,
				-46
			],
			[
				31,
				-207
			],
			[
				3,
				-16
			],
			[
				3,
				-21
			],
			[
				17,
				-112
			]
		],
		[
			[
				16779,
				7486
			],
			[
				0,
				0
			],
			[
				-19,
				19
			],
			[
				-40,
				42
			],
			[
				-6,
				105
			],
			[
				-37,
				1
			],
			[
				-21,
				0
			],
			[
				-6,
				14
			],
			[
				-44,
				103
			],
			[
				-10,
				21
			],
			[
				-33,
				-12
			],
			[
				-11,
				-4
			],
			[
				8,
				16
			],
			[
				25,
				47
			],
			[
				-1,
				1
			],
			[
				-73,
				85
			],
			[
				-7,
				86
			],
			[
				34,
				68
			],
			[
				1,
				2
			],
			[
				33,
				66
			],
			[
				-33,
				104
			]
		],
		[
			[
				17240,
				13156
			],
			[
				83,
				-153
			],
			[
				73,
				-67
			],
			[
				63,
				83
			],
			[
				52,
				0
			],
			[
				32,
				-65
			],
			[
				7,
				-15
			],
			[
				66,
				40
			],
			[
				20,
				4
			],
			[
				59,
				11
			],
			[
				17,
				3
			],
			[
				0,
				0
			]
		],
		[
			[
				18341,
				12178
			],
			[
				28,
				-23
			],
			[
				103,
				32
			],
			[
				5,
				2
			],
			[
				46,
				14
			],
			[
				55,
				-32
			]
		],
		[
			[
				20433,
				16196
			],
			[
				-36,
				-11
			],
			[
				-19,
				-206
			],
			[
				-33,
				9
			],
			[
				23,
				-93
			],
			[
				-130,
				-174
			],
			[
				-65,
				5
			],
			[
				-18,
				-39
			],
			[
				-8,
				-17
			],
			[
				3,
				-65
			],
			[
				0,
				0
			],
			[
				-41,
				-25
			],
			[
				-43,
				-25
			],
			[
				-10,
				-6
			],
			[
				-125,
				-32
			],
			[
				33,
				-114
			]
		],
		[
			[
				19964,
				15403
			],
			[
				-25,
				-52
			],
			[
				-36,
				57
			],
			[
				-40,
				-73
			],
			[
				-60,
				61
			],
			[
				-31,
				82
			],
			[
				-2,
				5
			],
			[
				-1,
				1
			],
			[
				-58,
				-46
			],
			[
				-8,
				-6
			],
			[
				-3,
				0
			],
			[
				-27,
				5
			],
			[
				12,
				27
			],
			[
				16,
				40
			],
			[
				6,
				14
			],
			[
				11,
				25
			],
			[
				-17,
				-7
			],
			[
				-146,
				-58
			],
			[
				-4,
				-2
			]
		],
		[
			[
				19433,
				16045
			],
			[
				25,
				46
			],
			[
				11,
				22
			],
			[
				9,
				16
			],
			[
				-15,
				102
			],
			[
				115,
				299
			],
			[
				-29,
				227
			],
			[
				-100,
				261
			],
			[
				-33,
				94
			],
			[
				-38,
				213
			]
		],
		[
			[
				15780,
				35213
			],
			[
				-298,
				15
			],
			[
				-148,
				7
			],
			[
				-34,
				2
			],
			[
				-23,
				1
			],
			[
				-163,
				7
			],
			[
				-6,
				4
			],
			[
				-21,
				16
			],
			[
				-8,
				7
			],
			[
				-36,
				26
			],
			[
				-194,
				146
			],
			[
				-141,
				40
			],
			[
				-164,
				-52
			]
		],
		[
			[
				21600,
				33055
			],
			[
				9,
				-5
			],
			[
				57,
				-32
			],
			[
				145,
				-80
			],
			[
				75,
				-41
			],
			[
				62,
				-35
			],
			[
				191,
				-106
			],
			[
				134,
				-76
			],
			[
				16,
				-8
			],
			[
				203,
				-114
			],
			[
				95,
				-54
			]
		],
		[
			[
				27125,
				52865
			],
			[
				85,
				151
			],
			[
				14,
				25
			],
			[
				31,
				10
			],
			[
				150,
				51
			],
			[
				58,
				19
			]
		],
		[
			[
				24265,
				54377
			],
			[
				0,
				0
			],
			[
				-29,
				66
			],
			[
				-23,
				55
			],
			[
				236,
				150
			],
			[
				63,
				40
			],
			[
				-38,
				66
			]
		],
		[
			[
				41748,
				77090
			],
			[
				0,
				0
			],
			[
				-50,
				7
			],
			[
				-6,
				1
			],
			[
				-61,
				8
			],
			[
				-119,
				-74
			],
			[
				-28,
				-17
			],
			[
				-198,
				-122
			],
			[
				-52,
				-32
			],
			[
				-145,
				-89
			],
			[
				-38,
				-24
			],
			[
				14,
				-59
			],
			[
				23,
				-96
			],
			[
				3,
				-13
			],
			[
				8,
				-30
			]
		],
		[
			[
				41099,
				76550
			],
			[
				-289,
				9
			],
			[
				-96,
				-71
			],
			[
				-3,
				-2
			],
			[
				-209,
				-5
			],
			[
				-42,
				-1
			]
		],
		[
			[
				4425,
				2614
			],
			[
				70,
				36
			],
			[
				9,
				91
			],
			[
				5,
				49
			],
			[
				10,
				107
			],
			[
				61,
				-6
			],
			[
				23,
				-2
			],
			[
				36,
				56
			],
			[
				17,
				48
			],
			[
				21,
				62
			],
			[
				-46,
				57
			],
			[
				81,
				86
			],
			[
				75,
				-2
			],
			[
				36,
				-1
			],
			[
				48,
				94
			],
			[
				-3,
				16
			],
			[
				-17,
				121
			],
			[
				11,
				-5
			],
			[
				48,
				-23
			],
			[
				16,
				-8
			]
		],
		[
			[
				5921,
				4004
			],
			[
				174,
				-14
			],
			[
				2,
				2
			],
			[
				46,
				48
			],
			[
				0,
				0
			],
			[
				40,
				-31
			],
			[
				26,
				-21
			],
			[
				-52,
				-280
			],
			[
				-2,
				-8
			],
			[
				-18,
				-100
			],
			[
				24,
				-1
			],
			[
				224,
				-3
			],
			[
				16,
				6
			],
			[
				15,
				6
			],
			[
				166,
				70
			]
		],
		[
			[
				3092,
				18532
			],
			[
				0,
				0
			],
			[
				-75,
				-166
			],
			[
				47,
				-87
			],
			[
				-99,
				-156
			],
			[
				41,
				-75
			],
			[
				18,
				-33
			],
			[
				50,
				-9
			],
			[
				29,
				-6
			],
			[
				3,
				-127
			],
			[
				-101,
				-78
			],
			[
				-20,
				-16
			],
			[
				-31,
				-11
			],
			[
				-31,
				-11
			],
			[
				-63,
				-19
			],
			[
				-18,
				-6
			],
			[
				46,
				-92
			],
			[
				86,
				-185
			],
			[
				12,
				-2
			],
			[
				56,
				-10
			],
			[
				17,
				-3
			],
			[
				89,
				-16
			],
			[
				20,
				-4
			],
			[
				0,
				0
			]
		],
		[
			[
				3838,
				16039
			],
			[
				-84,
				-32
			],
			[
				-313,
				30
			],
			[
				-46,
				-45
			],
			[
				-18,
				146
			],
			[
				-9,
				8
			],
			[
				-2,
				1
			],
			[
				-64,
				57
			],
			[
				-51,
				-189
			],
			[
				-55,
				-24
			],
			[
				-47,
				44
			],
			[
				-12,
				11
			],
			[
				-58,
				-103
			],
			[
				-36,
				3
			]
		],
		[
			[
				4722,
				20017
			],
			[
				-92,
				-30
			],
			[
				-74,
				-128
			],
			[
				-37,
				3
			],
			[
				-15,
				2
			],
			[
				-165,
				-248
			],
			[
				-79,
				-74
			],
			[
				-129,
				-120
			],
			[
				-100,
				6
			],
			[
				-107,
				-141
			],
			[
				-65,
				32
			],
			[
				-156,
				-56
			],
			[
				-20,
				17
			],
			[
				-26,
				22
			],
			[
				-9,
				8
			],
			[
				-47,
				-73
			],
			[
				-116,
				-182
			],
			[
				-89,
				-141
			],
			[
				-4,
				-1
			],
			[
				-20,
				-12
			],
			[
				-62,
				-36
			],
			[
				-27,
				-120
			],
			[
				-98,
				-7
			],
			[
				-22,
				80
			]
		],
		[
			[
				4483,
				21659
			],
			[
				-1,
				43
			],
			[
				0,
				29
			],
			[
				0,
				6
			],
			[
				139,
				208
			],
			[
				68,
				102
			],
			[
				109,
				86
			],
			[
				67,
				53
			],
			[
				132,
				45
			],
			[
				37,
				12
			],
			[
				224,
				-13
			],
			[
				43,
				68
			],
			[
				16,
				25
			],
			[
				3,
				4
			],
			[
				-200,
				160
			],
			[
				-2,
				13
			],
			[
				-18,
				129
			]
		],
		[
			[
				6621,
				31230
			],
			[
				-109,
				36
			],
			[
				-87,
				-18
			],
			[
				-258,
				-54
			],
			[
				-138,
				-84
			],
			[
				1,
				-52
			],
			[
				0,
				-23
			],
			[
				-64,
				-12
			],
			[
				-17,
				-3
			],
			[
				-231,
				-43
			],
			[
				-55,
				6
			],
			[
				-5,
				16
			]
		],
		[
			[
				8304,
				22003
			],
			[
				39,
				26
			],
			[
				95,
				63
			],
			[
				-18,
				81
			],
			[
				-26,
				110
			],
			[
				56,
				52
			],
			[
				29,
				229
			],
			[
				106,
				101
			],
			[
				64,
				61
			],
			[
				-17,
				117
			],
			[
				223,
				-33
			],
			[
				44,
				-72
			],
			[
				72,
				57
			],
			[
				-30,
				65
			],
			[
				-20,
				41
			],
			[
				7,
				12
			],
			[
				175,
				301
			],
			[
				-7,
				115
			],
			[
				-138,
				167
			],
			[
				88,
				114
			],
			[
				79,
				37
			],
			[
				204,
				-106
			],
			[
				1,
				0
			],
			[
				102,
				2
			],
			[
				0,
				0
			],
			[
				68,
				1
			],
			[
				16,
				68
			],
			[
				12,
				2
			],
			[
				106,
				20
			],
			[
				14,
				71
			],
			[
				51,
				24
			],
			[
				32,
				15
			],
			[
				51,
				-32
			],
			[
				132,
				-85
			],
			[
				89,
				-57
			],
			[
				6,
				-4
			],
			[
				10,
				-7
			],
			[
				38,
				-24
			],
			[
				15,
				-10
			],
			[
				18,
				0
			],
			[
				7,
				0
			],
			[
				36,
				-1
			],
			[
				12,
				-1
			],
			[
				312,
				-10
			],
			[
				96,
				-3
			],
			[
				17,
				0
			]
		],
		[
			[
				10067,
				28621
			],
			[
				173,
				-512
			],
			[
				83,
				-249
			],
			[
				40,
				-119
			],
			[
				247,
				-187
			],
			[
				164,
				-124
			],
			[
				522,
				-12
			],
			[
				240,
				88
			],
			[
				300,
				-33
			],
			[
				64,
				-7
			]
		],
		[
			[
				11900,
				27466
			],
			[
				-29,
				-29
			],
			[
				-440,
				-454
			],
			[
				109,
				-115
			],
			[
				117,
				-123
			],
			[
				44,
				-45
			],
			[
				-39,
				-65
			],
			[
				-33,
				-57
			],
			[
				-21,
				-36
			],
			[
				-29,
				-49
			],
			[
				-18,
				-31
			],
			[
				-11,
				-18
			],
			[
				-20,
				-34
			],
			[
				-2,
				-4
			],
			[
				0,
				0
			],
			[
				-38,
				-28
			],
			[
				-178,
				-131
			],
			[
				-87,
				-65
			],
			[
				-201,
				-17
			],
			[
				-98,
				-56
			],
			[
				-22,
				-23
			],
			[
				-36,
				-39
			],
			[
				-193,
				-204
			],
			[
				-4,
				-5
			],
			[
				-4,
				-5
			],
			[
				-28,
				-29
			],
			[
				-138,
				-147
			],
			[
				-136,
				-27
			],
			[
				-38,
				-7
			],
			[
				-177,
				-35
			],
			[
				-84,
				-94
			],
			[
				-7,
				-8
			],
			[
				-8,
				-9
			],
			[
				-3,
				-3
			],
			[
				-35,
				-40
			],
			[
				-152,
				-170
			],
			[
				-32,
				-36
			]
		],
		[
			[
				13909,
				19021
			],
			[
				62,
				105
			],
			[
				129,
				217
			],
			[
				81,
				136
			],
			[
				121,
				54
			],
			[
				27,
				172
			],
			[
				119,
				-1
			],
			[
				25,
				20
			],
			[
				67,
				54
			],
			[
				4,
				4
			],
			[
				4,
				-6
			],
			[
				0,
				-1
			],
			[
				53,
				-89
			],
			[
				54,
				-92
			],
			[
				18,
				9
			],
			[
				70,
				33
			],
			[
				23,
				11
			],
			[
				43,
				21
			]
		],
		[
			[
				14536,
				22243
			],
			[
				-21,
				-135
			],
			[
				-16,
				-97
			],
			[
				-42,
				-91
			],
			[
				-25,
				-55
			],
			[
				-28,
				-62
			],
			[
				-2,
				-53
			],
			[
				-1,
				-77
			],
			[
				-1,
				-23
			],
			[
				0,
				-9
			],
			[
				-3,
				-170
			],
			[
				-82,
				-147
			],
			[
				-97,
				-80
			],
			[
				-82,
				-67
			],
			[
				-59,
				-50
			],
			[
				-416,
				-170
			],
			[
				-5,
				-2
			],
			[
				-11,
				-4
			]
		],
		[
			[
				13645,
				20951
			],
			[
				-82,
				48
			],
			[
				-119,
				70
			],
			[
				-39,
				18
			],
			[
				-65,
				32
			],
			[
				-48,
				86
			],
			[
				44,
				14
			],
			[
				1,
				1
			],
			[
				-3,
				2
			],
			[
				-166,
				140
			],
			[
				22,
				187
			],
			[
				4,
				35
			],
			[
				-9,
				21
			],
			[
				-16,
				39
			],
			[
				-85,
				23
			],
			[
				-44,
				12
			],
			[
				-73,
				-2
			],
			[
				-29,
				-1
			],
			[
				-87,
				147
			],
			[
				40,
				127
			],
			[
				5,
				13
			],
			[
				1,
				3
			],
			[
				-100,
				66
			]
		],
		[
			[
				12798,
				19901
			],
			[
				25,
				52
			],
			[
				232,
				489
			],
			[
				18,
				26
			],
			[
				29,
				42
			],
			[
				60,
				87
			],
			[
				57,
				82
			],
			[
				83,
				27
			],
			[
				51,
				16
			],
			[
				55,
				18
			],
			[
				23,
				7
			],
			[
				6,
				2
			],
			[
				13,
				5
			],
			[
				154,
				49
			],
			[
				57,
				19
			],
			[
				8,
				2
			],
			[
				0,
				2
			],
			[
				-12,
				62
			],
			[
				-12,
				63
			]
		],
		[
			[
				12745,
				27472
			],
			[
				-180,
				33
			],
			[
				-150,
				118
			],
			[
				-253,
				-146
			],
			[
				-146,
				-6
			],
			[
				-116,
				-5
			]
		],
		[
			[
				14403,
				32968
			],
			[
				126,
				-30
			],
			[
				160,
				-38
			],
			[
				19,
				-14
			],
			[
				120,
				-89
			],
			[
				5,
				-93
			],
			[
				59,
				-52
			],
			[
				20,
				-19
			],
			[
				66,
				-58
			],
			[
				341,
				-304
			],
			[
				26,
				116
			],
			[
				79,
				54
			],
			[
				56,
				-44
			],
			[
				145,
				-113
			],
			[
				4,
				0
			],
			[
				94,
				6
			],
			[
				91,
				47
			],
			[
				6,
				3
			],
			[
				2,
				-4
			],
			[
				82,
				-156
			],
			[
				2,
				-4
			],
			[
				0,
				0
			],
			[
				2,
				-1
			],
			[
				17,
				-7
			],
			[
				2,
				0
			],
			[
				47,
				-19
			],
			[
				0,
				0
			],
			[
				-6,
				-22
			],
			[
				-33,
				-109
			],
			[
				3,
				-2
			],
			[
				14,
				-11
			],
			[
				29,
				-22
			],
			[
				60,
				-46
			],
			[
				51,
				-39
			],
			[
				-48,
				-167
			],
			[
				121,
				-521
			]
		],
		[
			[
				16687,
				8373
			],
			[
				-75,
				231
			],
			[
				-12,
				36
			],
			[
				-6,
				117
			],
			[
				37,
				-24
			],
			[
				11,
				-7
			],
			[
				94,
				77
			],
			[
				-9,
				129
			],
			[
				48,
				32
			],
			[
				18,
				12
			],
			[
				-1,
				26
			],
			[
				-1,
				26
			],
			[
				-2,
				48
			],
			[
				-7,
				165
			]
		],
		[
			[
				16782,
				9241
			],
			[
				65,
				-45
			],
			[
				-6,
				-64
			],
			[
				3,
				-34
			],
			[
				66,
				16
			],
			[
				14,
				45
			],
			[
				59,
				-102
			]
		],
		[
			[
				16445,
				12534
			],
			[
				32,
				-82
			],
			[
				-8,
				-258
			],
			[
				-1,
				-30
			],
			[
				0,
				0
			],
			[
				-1,
				-36
			],
			[
				69,
				-43
			],
			[
				-60,
				9
			],
			[
				0,
				-1
			],
			[
				-1,
				-8
			],
			[
				-6,
				-28
			],
			[
				-5,
				-25
			],
			[
				-14,
				-70
			],
			[
				-64,
				-1
			],
			[
				-11,
				-197
			],
			[
				-12,
				-100
			],
			[
				-125,
				-78
			],
			[
				-76,
				-76
			]
		],
		[
			[
				16259,
				11348
			],
			[
				152,
				5
			],
			[
				83,
				201
			],
			[
				128,
				-17
			],
			[
				101,
				24
			],
			[
				4,
				1
			],
			[
				6,
				-2
			],
			[
				87,
				-41
			],
			[
				3,
				39
			],
			[
				22,
				-17
			],
			[
				21,
				-16
			],
			[
				6,
				5
			],
			[
				7,
				6
			],
			[
				46,
				37
			],
			[
				1,
				0
			],
			[
				134,
				-36
			]
		],
		[
			[
				19890,
				19158
			],
			[
				-77,
				-74
			],
			[
				-50,
				-47
			],
			[
				-2,
				-2
			],
			[
				-59,
				-4
			],
			[
				-18,
				18
			],
			[
				-23,
				21
			],
			[
				14,
				43
			],
			[
				5,
				14
			],
			[
				-96,
				43
			],
			[
				-44,
				20
			],
			[
				-6,
				-3
			],
			[
				-33,
				-13
			],
			[
				-23,
				-9
			],
			[
				-12,
				-5
			],
			[
				-18,
				-7
			],
			[
				-203,
				-81
			]
		],
		[
			[
				17499,
				27167
			],
			[
				295,
				0
			],
			[
				115,
				-345
			],
			[
				27,
				13
			],
			[
				438,
				223
			],
			[
				94,
				108
			],
			[
				24,
				2
			],
			[
				167,
				11
			],
			[
				29,
				-54
			],
			[
				79,
				69
			],
			[
				67,
				59
			],
			[
				-23,
				-151
			],
			[
				12,
				-22
			],
			[
				34,
				-61
			],
			[
				1,
				78
			],
			[
				20,
				10
			],
			[
				40,
				21
			],
			[
				1,
				1
			],
			[
				39,
				21
			],
			[
				-4,
				84
			],
			[
				-67,
				156
			],
			[
				-17,
				39
			],
			[
				-61,
				140
			]
		],
		[
			[
				19817,
				28776
			],
			[
				147,
				-82
			],
			[
				167,
				4
			],
			[
				75,
				-138
			],
			[
				35,
				-64
			],
			[
				71,
				7
			],
			[
				111,
				11
			],
			[
				104,
				10
			],
			[
				57,
				6
			],
			[
				74,
				-91
			],
			[
				41,
				-49
			]
		],
		[
			[
				17182,
				29317
			],
			[
				0,
				-3
			],
			[
				-17,
				-123
			],
			[
				-3,
				-20
			],
			[
				-7,
				-58
			],
			[
				37,
				-156
			],
			[
				70,
				-13
			],
			[
				35,
				-162
			],
			[
				4,
				-4
			],
			[
				18,
				-19
			],
			[
				8,
				-8
			],
			[
				-40,
				7
			],
			[
				-191,
				-353
			],
			[
				-94,
				-173
			],
			[
				-53,
				-99
			],
			[
				-45,
				-42
			],
			[
				-93,
				-88
			],
			[
				-127,
				-236
			],
			[
				-38,
				-71
			],
			[
				-4,
				-13
			],
			[
				-8,
				-30
			],
			[
				-8,
				-28
			],
			[
				-27,
				-96
			],
			[
				-86,
				-309
			],
			[
				114,
				-81
			],
			[
				-10,
				-82
			]
		],
		[
			[
				21259,
				28626
			],
			[
				-205,
				244
			],
			[
				-5,
				5
			],
			[
				-56,
				66
			],
			[
				-125,
				66
			],
			[
				-42,
				23
			],
			[
				-74,
				206
			],
			[
				-42,
				116
			],
			[
				-274,
				212
			],
			[
				-6,
				4
			],
			[
				-89,
				69
			],
			[
				-36,
				27
			],
			[
				-102,
				4
			],
			[
				21,
				221
			],
			[
				1,
				9
			],
			[
				-59,
				177
			],
			[
				-48,
				145
			],
			[
				-129,
				120
			],
			[
				-91,
				2
			],
			[
				-135,
				4
			],
			[
				-26,
				0
			],
			[
				-70,
				-81
			],
			[
				-128,
				3
			],
			[
				-37,
				66
			],
			[
				-4,
				9
			],
			[
				-3,
				6
			],
			[
				4,
				13
			],
			[
				29,
				98
			],
			[
				-10,
				11
			],
			[
				-22,
				27
			],
			[
				-35,
				42
			],
			[
				-86,
				-29
			],
			[
				-7,
				-2
			],
			[
				-44,
				33
			],
			[
				-75,
				89
			],
			[
				-35,
				30
			],
			[
				-14,
				87
			],
			[
				-91,
				-31
			],
			[
				-8,
				-2
			],
			[
				-40,
				-50
			],
			[
				-66,
				115
			],
			[
				-36,
				64
			],
			[
				-83,
				146
			],
			[
				-565,
				501
			]
		],
		[
			[
				18241,
				35309
			],
			[
				-21,
				128
			],
			[
				-32,
				200
			],
			[
				-35,
				209
			],
			[
				-37,
				-18
			],
			[
				1,
				35
			],
			[
				8,
				175
			],
			[
				0,
				4
			],
			[
				-101,
				51
			],
			[
				-2,
				19
			],
			[
				-5,
				41
			],
			[
				128,
				153
			],
			[
				188,
				3
			]
		],
		[
			[
				17351,
				36282
			],
			[
				-7,
				100
			],
			[
				-4,
				47
			],
			[
				142,
				101
			],
			[
				2,
				2
			],
			[
				89,
				3
			],
			[
				20,
				1
			],
			[
				98,
				-7
			],
			[
				22,
				-12
			],
			[
				265,
				-132
			],
			[
				355,
				-76
			]
		],
		[
			[
				21123,
				11566
			],
			[
				218,
				-81
			],
			[
				-1,
				-13
			],
			[
				-13,
				-237
			]
		],
		[
			[
				20819,
				10181
			],
			[
				3,
				100
			],
			[
				-34,
				60
			],
			[
				-26,
				45
			],
			[
				-28,
				100
			],
			[
				28,
				166
			],
			[
				27,
				154
			],
			[
				-88,
				56
			],
			[
				-54,
				168
			]
		],
		[
			[
				20730,
				15807
			],
			[
				23,
				16
			],
			[
				34,
				33
			],
			[
				42,
				34
			],
			[
				1,
				3
			],
			[
				61,
				30
			],
			[
				37,
				2
			],
			[
				32,
				-15
			],
			[
				37,
				-38
			],
			[
				28,
				26
			],
			[
				18,
				16
			],
			[
				-1,
				6
			],
			[
				-11,
				179
			],
			[
				0,
				2
			],
			[
				-32,
				220
			],
			[
				175,
				-82
			],
			[
				108,
				10
			],
			[
				41,
				-26
			],
			[
				29,
				-18
			],
			[
				2,
				-1
			],
			[
				57,
				79
			],
			[
				48,
				67
			],
			[
				72,
				-58
			],
			[
				37,
				-6
			],
			[
				20,
				-22
			],
			[
				23,
				-30
			]
		],
		[
			[
				25465,
				44454
			],
			[
				-4,
				-26
			],
			[
				-4,
				-33
			],
			[
				-5,
				-31
			],
			[
				-1,
				-12
			],
			[
				-3,
				-21
			],
			[
				-6,
				-39
			],
			[
				-42,
				-309
			]
		],
		[
			[
				25400,
				43983
			],
			[
				-440,
				-43
			],
			[
				-80,
				-8
			],
			[
				-3,
				0
			],
			[
				-73,
				-7
			],
			[
				-431,
				-43
			],
			[
				-102,
				-10
			],
			[
				-306,
				-99
			],
			[
				-3,
				-1
			],
			[
				-115,
				-121
			],
			[
				-178,
				-15
			],
			[
				-64,
				-6
			],
			[
				-39,
				-3
			],
			[
				-16,
				12
			],
			[
				-35,
				26
			],
			[
				-71,
				54
			],
			[
				-54,
				-78
			],
			[
				-19,
				-27
			],
			[
				-69,
				-102
			],
			[
				-119,
				-74
			],
			[
				-7,
				3
			],
			[
				-29,
				12
			],
			[
				-48,
				-86
			],
			[
				-111,
				-6
			],
			[
				-123,
				-6
			],
			[
				-29,
				-2
			],
			[
				-22,
				-1
			],
			[
				-45,
				-10
			],
			[
				-128,
				-31
			],
			[
				-84,
				-19
			]
		],
		[
			[
				22863,
				44622
			],
			[
				18,
				79
			],
			[
				63,
				27
			],
			[
				239,
				100
			],
			[
				68,
				146
			],
			[
				9,
				2
			],
			[
				126,
				26
			],
			[
				122,
				134
			],
			[
				151,
				164
			],
			[
				24,
				27
			],
			[
				-17,
				13
			],
			[
				-97,
				74
			],
			[
				-10,
				8
			],
			[
				7,
				10
			],
			[
				21,
				27
			],
			[
				57,
				76
			],
			[
				77,
				103
			],
			[
				43,
				57
			],
			[
				56,
				74
			],
			[
				87,
				116
			],
			[
				-44,
				16
			],
			[
				-131,
				46
			]
		],
		[
			[
				25400,
				43983
			],
			[
				32,
				-102
			],
			[
				14,
				-46
			],
			[
				26,
				-83
			],
			[
				99,
				-320
			],
			[
				275,
				-275
			],
			[
				22,
				-95
			],
			[
				21,
				-92
			],
			[
				49,
				-219
			],
			[
				-37,
				-357
			],
			[
				-2,
				-15
			],
			[
				-5,
				-51
			],
			[
				-32,
				-315
			],
			[
				-35,
				-335
			]
		],
		[
			[
				33836,
				66742
			],
			[
				92,
				-86
			],
			[
				3,
				0
			],
			[
				24,
				-6
			],
			[
				90,
				-23
			],
			[
				33,
				31
			],
			[
				32,
				30
			],
			[
				66,
				-57
			],
			[
				49,
				-83
			],
			[
				10,
				-18
			],
			[
				26,
				-44
			],
			[
				-67,
				-90
			],
			[
				3,
				-24
			],
			[
				10,
				-64
			],
			[
				63,
				31
			],
			[
				61,
				29
			],
			[
				76,
				106
			],
			[
				51,
				-25
			],
			[
				-69,
				-82
			],
			[
				61,
				-25
			],
			[
				107,
				76
			],
			[
				-108,
				-152
			],
			[
				141,
				-4
			],
			[
				44,
				-43
			],
			[
				1,
				-1
			],
			[
				57,
				-54
			],
			[
				42,
				-40
			],
			[
				-17,
				-100
			],
			[
				-10,
				-59
			],
			[
				-19,
				-107
			],
			[
				-6,
				-29
			],
			[
				83,
				-86
			],
			[
				143,
				-150
			],
			[
				106,
				-111
			],
			[
				39,
				-41
			],
			[
				36,
				-38
			],
			[
				101,
				-106
			],
			[
				273,
				-208
			]
		],
		[
			[
				35229,
				63237
			],
			[
				0,
				0
			],
			[
				-41,
				7
			],
			[
				-113,
				19
			],
			[
				-36,
				5
			],
			[
				-163,
				27
			],
			[
				-238,
				38
			],
			[
				-438,
				69
			],
			[
				-217,
				-5
			],
			[
				-2,
				0
			],
			[
				-237,
				-5
			],
			[
				-33,
				171
			],
			[
				-132,
				33
			],
			[
				-127,
				-45
			],
			[
				-155,
				-220
			],
			[
				-206,
				-101
			],
			[
				-75,
				-37
			],
			[
				-74,
				62
			],
			[
				11,
				38
			],
			[
				51,
				175
			],
			[
				-12,
				26
			],
			[
				-34,
				79
			],
			[
				51,
				59
			],
			[
				-6,
				28
			],
			[
				-30,
				119
			],
			[
				-51,
				3
			],
			[
				-73,
				5
			],
			[
				-14,
				1
			],
			[
				-2,
				8
			],
			[
				-22,
				79
			],
			[
				-36,
				11
			],
			[
				-89,
				28
			],
			[
				-49,
				16
			],
			[
				23,
				61
			],
			[
				59,
				154
			],
			[
				-33,
				106
			],
			[
				-12,
				37
			],
			[
				-104,
				114
			],
			[
				-69,
				77
			],
			[
				-41,
				14
			],
			[
				-93,
				32
			],
			[
				-11,
				4
			],
			[
				-68,
				-62
			],
			[
				-123,
				-6
			],
			[
				-4,
				0
			],
			[
				-13,
				0
			],
			[
				-5,
				5
			],
			[
				-71,
				77
			],
			[
				-54,
				-74
			],
			[
				-182,
				-28
			],
			[
				-27,
				-78
			],
			[
				17,
				-23
			],
			[
				38,
				-54
			],
			[
				-65,
				-20
			],
			[
				-73,
				-23
			]
		],
		[
			[
				34963,
				74137
			],
			[
				0,
				0
			],
			[
				9,
				-35
			],
			[
				7,
				-27
			],
			[
				-72,
				-113
			],
			[
				17,
				-17
			],
			[
				64,
				-67
			],
			[
				-19,
				-62
			],
			[
				131,
				-84
			],
			[
				87,
				3
			],
			[
				62,
				-77
			],
			[
				7,
				-8
			],
			[
				39,
				-64
			],
			[
				33,
				-55
			],
			[
				-107,
				-99
			],
			[
				20,
				-37
			],
			[
				86,
				23
			],
			[
				21,
				-327
			],
			[
				114,
				-57
			],
			[
				11,
				-5
			],
			[
				-17,
				-15
			],
			[
				-55,
				-48
			],
			[
				31,
				-39
			],
			[
				76,
				-96
			],
			[
				-32,
				-19
			],
			[
				-87,
				-51
			],
			[
				-219,
				-128
			],
			[
				-127,
				-75
			]
		],
		[
			[
				37794,
				68605
			],
			[
				-1,
				3
			],
			[
				-32,
				84
			],
			[
				-95,
				67
			],
			[
				-53,
				38
			],
			[
				-322,
				202
			],
			[
				-105,
				-3
			],
			[
				-38,
				105
			],
			[
				-103,
				70
			],
			[
				-397,
				-1
			],
			[
				-40,
				-105
			],
			[
				-72,
				75
			],
			[
				-258,
				53
			],
			[
				-21,
				40
			],
			[
				-50,
				94
			],
			[
				46,
				64
			],
			[
				-124,
				161
			],
			[
				-14,
				2
			],
			[
				-10,
				1
			],
			[
				-26,
				2
			],
			[
				-92,
				10
			],
			[
				-63,
				54
			],
			[
				-50,
				44
			],
			[
				49,
				136
			],
			[
				-47,
				22
			],
			[
				-31,
				15
			],
			[
				-80,
				39
			],
			[
				5,
				95
			],
			[
				-117,
				25
			],
			[
				-107,
				-47
			],
			[
				-22,
				-9
			],
			[
				-19,
				21
			],
			[
				-57,
				64
			],
			[
				-18,
				20
			],
			[
				-70,
				77
			],
			[
				-82,
				25
			],
			[
				-132,
				4
			],
			[
				2,
				46
			],
			[
				-134,
				43
			],
			[
				-150,
				-34
			],
			[
				-200,
				41
			]
		],
		[
			[
				41400,
				75387
			],
			[
				-171,
				-131
			],
			[
				-22,
				-17
			],
			[
				-259,
				-200
			]
		],
		[
			[
				40417,
				74934
			],
			[
				-4,
				7
			],
			[
				-130,
				235
			],
			[
				-121,
				96
			],
			[
				-35,
				27
			],
			[
				-89,
				72
			],
			[
				-68,
				53
			],
			[
				1,
				42
			],
			[
				1,
				24
			],
			[
				6,
				193
			],
			[
				93,
				128
			],
			[
				13,
				19
			],
			[
				-36,
				48
			],
			[
				-89,
				119
			]
		],
		[
			[
				41099,
				76550
			],
			[
				26,
				4
			],
			[
				76,
				13
			],
			[
				97,
				-87
			],
			[
				-18,
				-140
			],
			[
				-70,
				-49
			],
			[
				-16,
				20
			],
			[
				-28,
				3
			],
			[
				-307,
				27
			],
			[
				-57,
				-40
			],
			[
				54,
				-52
			],
			[
				170,
				-92
			],
			[
				266,
				-145
			],
			[
				61,
				-33
			],
			[
				236,
				-18
			],
			[
				19,
				-2
			],
			[
				-7,
				-21
			],
			[
				-63,
				-177
			],
			[
				24,
				-128
			],
			[
				18,
				-34
			],
			[
				17,
				-29
			],
			[
				42,
				-76
			],
			[
				14,
				-26
			],
			[
				-25,
				-101
			],
			[
				-228,
				20
			]
		],
		[
			[
				41400,
				75387
			],
			[
				360,
				-145
			],
			[
				4,
				-1
			],
			[
				19,
				-8
			],
			[
				71,
				166
			],
			[
				1,
				2
			],
			[
				2,
				-1
			],
			[
				97,
				-22
			],
			[
				71,
				-16
			],
			[
				0,
				-10
			],
			[
				1,
				-115
			],
			[
				2,
				-281
			],
			[
				0,
				-9
			],
			[
				1,
				-233
			],
			[
				-48,
				-3
			],
			[
				-5,
				-104
			],
			[
				90,
				-89
			],
			[
				-7,
				-130
			],
			[
				88,
				-67
			],
			[
				106,
				33
			],
			[
				8,
				-10
			],
			[
				22,
				-25
			],
			[
				147,
				-171
			],
			[
				31,
				-37
			],
			[
				43,
				-51
			],
			[
				95,
				22
			],
			[
				12,
				-80
			],
			[
				157,
				-35
			],
			[
				89,
				-21
			],
			[
				9,
				-79
			],
			[
				-57,
				-43
			],
			[
				-37,
				-29
			],
			[
				48,
				-58
			],
			[
				108,
				23
			],
			[
				63,
				13
			],
			[
				52,
				-49
			],
			[
				37,
				-36
			],
			[
				71,
				7
			],
			[
				137,
				15
			],
			[
				10,
				-45
			],
			[
				59,
				-249
			],
			[
				99,
				-40
			],
			[
				176,
				-5
			],
			[
				43,
				46
			],
			[
				123,
				130
			],
			[
				92,
				-22
			],
			[
				57,
				-37
			],
			[
				39,
				-24
			],
			[
				-51,
				-102
			],
			[
				79,
				-148
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				49,
				-42
			],
			[
				347,
				-296
			],
			[
				87,
				-75
			],
			[
				433,
				-372
			],
			[
				135,
				-116
			],
			[
				154,
				-85
			],
			[
				176,
				-98
			],
			[
				81,
				-45
			],
			[
				332,
				-13
			],
			[
				22,
				-1
			],
			[
				166,
				-6
			],
			[
				54,
				-3
			],
			[
				55,
				-2
			]
		],
		[
			[
				4523,
				7929
			],
			[
				0,
				0
			],
			[
				39,
				-207
			],
			[
				-85,
				-96
			],
			[
				-12,
				-13
			],
			[
				-39,
				-44
			],
			[
				22,
				-39
			],
			[
				33,
				-57
			],
			[
				10,
				-19
			],
			[
				30,
				-52
			],
			[
				36,
				20
			],
			[
				35,
				18
			],
			[
				11,
				6
			],
			[
				9,
				-7
			],
			[
				84,
				-67
			],
			[
				59,
				-152
			]
		],
		[
			[
				4084,
				8579
			],
			[
				0,
				0
			],
			[
				-69,
				145
			],
			[
				164,
				22
			],
			[
				66,
				91
			],
			[
				7,
				108
			],
			[
				31,
				22
			],
			[
				0,
				0
			]
		],
		[
			[
				5246,
				16299
			],
			[
				0,
				0
			],
			[
				2,
				-48
			],
			[
				54,
				-3
			],
			[
				34,
				-1
			],
			[
				44,
				-70
			],
			[
				33,
				-50
			],
			[
				0,
				0
			],
			[
				46,
				10
			],
			[
				44,
				-63
			],
			[
				25,
				95
			],
			[
				156,
				-6
			],
			[
				-3,
				-139
			],
			[
				-128,
				-100
			],
			[
				55,
				-121
			],
			[
				-195,
				98
			],
			[
				-70,
				-88
			],
			[
				10,
				-15
			],
			[
				43,
				-64
			],
			[
				23,
				-34
			],
			[
				52,
				-75
			],
			[
				-103,
				-47
			],
			[
				1,
				-41
			],
			[
				1,
				-50
			],
			[
				35,
				-65
			],
			[
				42,
				-78
			],
			[
				6,
				-10
			],
			[
				63,
				-116
			]
		],
		[
			[
				6023,
				23739
			],
			[
				10,
				132
			],
			[
				0,
				2
			],
			[
				2,
				22
			],
			[
				1,
				9
			],
			[
				-16,
				17
			],
			[
				-102,
				109
			],
			[
				-39,
				-84
			],
			[
				-15,
				-32
			],
			[
				-15,
				-32
			],
			[
				-27,
				9
			],
			[
				-25,
				7
			],
			[
				-217,
				68
			],
			[
				-94,
				-30
			],
			[
				-45,
				-15
			],
			[
				-36,
				-11
			],
			[
				-77,
				-108
			],
			[
				-16,
				-3
			],
			[
				-14,
				-3
			],
			[
				-69,
				-13
			],
			[
				-71,
				-14
			],
			[
				-55,
				-11
			],
			[
				-125,
				24
			],
			[
				-3,
				-3
			],
			[
				-49,
				-54
			],
			[
				-31,
				-34
			],
			[
				-45,
				1
			],
			[
				-19,
				0
			],
			[
				-74,
				1
			],
			[
				-17,
				0
			],
			[
				-153,
				-115
			],
			[
				-209,
				144
			],
			[
				-162,
				-64
			],
			[
				-12,
				-4
			],
			[
				-90,
				-35
			],
			[
				-1,
				0
			],
			[
				-17,
				13
			],
			[
				-98,
				72
			],
			[
				8,
				12
			],
			[
				133,
				207
			],
			[
				7,
				59
			],
			[
				11,
				97
			],
			[
				140,
				118
			],
			[
				31,
				27
			],
			[
				39,
				32
			],
			[
				223,
				80
			],
			[
				84,
				251
			]
		],
		[
			[
				4674,
				24587
			],
			[
				52,
				80
			],
			[
				177,
				74
			],
			[
				-15,
				173
			],
			[
				-4,
				41
			]
		],
		[
			[
				11024,
				12295
			],
			[
				-3,
				-30
			],
			[
				-14,
				-145
			],
			[
				-7,
				-78
			],
			[
				-32,
				-18
			],
			[
				-41,
				-22
			],
			[
				-29,
				-15
			],
			[
				-45,
				38
			],
			[
				-33,
				-49
			],
			[
				-65,
				-96
			],
			[
				2,
				-154
			],
			[
				56,
				-2
			],
			[
				3,
				-2
			],
			[
				45,
				-47
			],
			[
				-85,
				-34
			],
			[
				-8,
				-54
			],
			[
				81,
				-185
			],
			[
				45,
				-123
			],
			[
				36,
				-101
			],
			[
				-19,
				-43
			],
			[
				46,
				-60
			],
			[
				-80,
				-78
			],
			[
				32,
				-109
			],
			[
				-41,
				5
			]
		],
		[
			[
				10868,
				10893
			],
			[
				-25,
				50
			],
			[
				-116,
				-129
			],
			[
				-54,
				26
			],
			[
				-15,
				7
			],
			[
				-4,
				3
			],
			[
				-14,
				-131
			],
			[
				-206,
				13
			],
			[
				-31,
				144
			],
			[
				-43,
				0
			],
			[
				-74,
				-122
			],
			[
				-51,
				24
			],
			[
				-22,
				8
			],
			[
				-61,
				24
			],
			[
				-32,
				13
			],
			[
				-6,
				-10
			],
			[
				-26,
				-36
			],
			[
				-22,
				-78
			],
			[
				50,
				-39
			],
			[
				12,
				-97
			],
			[
				1,
				-7
			],
			[
				-5,
				-6
			],
			[
				-68,
				-102
			],
			[
				22,
				-61
			],
			[
				3,
				-8
			],
			[
				-18,
				-20
			],
			[
				-49,
				-53
			],
			[
				-24,
				18
			],
			[
				-27,
				20
			],
			[
				-131,
				97
			],
			[
				-21,
				151
			],
			[
				-176,
				103
			],
			[
				-4,
				21
			],
			[
				-27,
				173
			],
			[
				-14,
				88
			],
			[
				62,
				65
			],
			[
				-83,
				31
			],
			[
				-34,
				-3
			],
			[
				-37,
				-4
			],
			[
				-57,
				-7
			],
			[
				-9,
				-5
			],
			[
				-140,
				-83
			],
			[
				-222,
				95
			],
			[
				-13,
				5
			],
			[
				-291,
				-89
			],
			[
				-1,
				0
			]
		],
		[
			[
				7245,
				32539
			],
			[
				144,
				30
			],
			[
				30,
				19
			],
			[
				155,
				99
			],
			[
				50,
				32
			],
			[
				60,
				38
			],
			[
				98,
				-12
			],
			[
				63,
				-8
			],
			[
				15,
				-2
			],
			[
				119,
				77
			],
			[
				88,
				-9
			],
			[
				34,
				-4
			],
			[
				106,
				37
			],
			[
				40,
				14
			],
			[
				44,
				59
			],
			[
				107,
				141
			]
		],
		[
			[
				16189,
				9203
			],
			[
				-140,
				-37
			],
			[
				-14,
				-4
			],
			[
				-182,
				55
			],
			[
				-45,
				-138
			],
			[
				-1,
				-4
			],
			[
				0,
				-1
			],
			[
				83,
				-123
			],
			[
				-18,
				-16
			],
			[
				-14,
				-13
			],
			[
				-31,
				-29
			],
			[
				4,
				-72
			],
			[
				-105,
				-91
			]
		],
		[
			[
				19199,
				13388
			],
			[
				4,
				-8
			],
			[
				26,
				-55
			],
			[
				18,
				-36
			],
			[
				-28,
				-315
			],
			[
				-22,
				-83
			],
			[
				8,
				-66
			],
			[
				25,
				-129
			]
		],
		[
			[
				16732,
				16521
			],
			[
				42,
				-7
			],
			[
				-19,
				-47
			],
			[
				179,
				9
			],
			[
				234,
				-187
			],
			[
				36,
				15
			],
			[
				13,
				5
			],
			[
				101,
				42
			],
			[
				-67,
				-370
			],
			[
				56,
				-19
			],
			[
				19,
				-6
			],
			[
				92,
				-32
			],
			[
				108,
				29
			]
		],
		[
			[
				20029,
				14212
			],
			[
				39,
				57
			],
			[
				68,
				87
			],
			[
				-8,
				119
			],
			[
				45,
				86
			],
			[
				-5,
				94
			],
			[
				-1,
				12
			],
			[
				-30,
				-4
			],
			[
				-45,
				-18
			],
			[
				2,
				3
			],
			[
				34,
				52
			],
			[
				13,
				103
			],
			[
				2,
				23
			],
			[
				5,
				48
			],
			[
				-12,
				71
			],
			[
				-11,
				15
			],
			[
				-67,
				95
			],
			[
				26,
				29
			],
			[
				44,
				50
			],
			[
				-23,
				45
			],
			[
				-64,
				129
			],
			[
				-42,
				-22
			],
			[
				-35,
				117
			]
		],
		[
			[
				21383,
				21995
			],
			[
				50,
				29
			],
			[
				128,
				73
			],
			[
				46,
				27
			],
			[
				20,
				12
			],
			[
				27,
				40
			],
			[
				5,
				9
			],
			[
				66,
				101
			],
			[
				21,
				15
			],
			[
				88,
				67
			],
			[
				89,
				68
			],
			[
				-39,
				143
			],
			[
				-15,
				59
			],
			[
				-1,
				1
			],
			[
				0,
				1
			],
			[
				-51,
				189
			],
			[
				-2,
				8
			],
			[
				-13,
				48
			],
			[
				-56,
				208
			],
			[
				-18,
				67
			],
			[
				-54,
				200
			],
			[
				-1,
				2
			],
			[
				-47,
				177
			],
			[
				-17,
				60
			],
			[
				-44,
				161
			],
			[
				-22,
				81
			],
			[
				-58,
				216
			]
		],
		[
			[
				21450,
				42959
			],
			[
				-22,
				17
			],
			[
				-19,
				16
			],
			[
				-129,
				103
			],
			[
				-139,
				111
			],
			[
				-6,
				5
			],
			[
				12,
				163
			],
			[
				7,
				97
			],
			[
				14,
				191
			],
			[
				2,
				27
			],
			[
				3,
				41
			],
			[
				-42,
				123
			],
			[
				-49,
				5
			],
			[
				-11,
				319
			],
			[
				-3,
				105
			],
			[
				-1,
				20
			],
			[
				-2,
				46
			],
			[
				-2,
				63
			],
			[
				-83,
				46
			],
			[
				181,
				112
			],
			[
				29,
				46
			],
			[
				122,
				190
			],
			[
				17,
				-71
			],
			[
				88,
				-6
			],
			[
				223,
				49
			],
			[
				203,
				117
			],
			[
				70,
				131
			],
			[
				-18,
				64
			],
			[
				-21,
				77
			],
			[
				-54,
				188
			]
		],
		[
			[
				3891,
				3825
			],
			[
				31,
				-17
			],
			[
				211,
				-113
			],
			[
				21,
				-11
			],
			[
				5,
				-3
			],
			[
				96,
				72
			],
			[
				0,
				13
			],
			[
				7,
				103
			],
			[
				21,
				7
			],
			[
				93,
				32
			],
			[
				29,
				10
			],
			[
				14,
				70
			],
			[
				133,
				137
			],
			[
				152,
				73
			],
			[
				73,
				36
			],
			[
				234,
				14
			],
			[
				10,
				1
			],
			[
				9,
				43
			],
			[
				32,
				167
			],
			[
				151,
				32
			],
			[
				56,
				12
			],
			[
				21,
				-31
			],
			[
				112,
				128
			]
		],
		[
			[
				4674,
				24587
			],
			[
				-424,
				-65
			],
			[
				-201,
				-233
			],
			[
				-14,
				-17
			],
			[
				-7,
				-8
			],
			[
				-2,
				1
			],
			[
				-14,
				3
			],
			[
				-86,
				19
			],
			[
				-103,
				-209
			],
			[
				-174,
				9
			],
			[
				-75,
				4
			],
			[
				-137,
				7
			],
			[
				-4,
				-67
			],
			[
				-24,
				-17
			],
			[
				-5,
				-4
			]
		],
		[
			[
				5409,
				30769
			],
			[
				0,
				0
			],
			[
				10,
				-67
			],
			[
				4,
				-27
			],
			[
				7,
				-43
			],
			[
				215,
				45
			],
			[
				0,
				-16
			],
			[
				1,
				-68
			],
			[
				80,
				-84
			],
			[
				-19,
				-47
			],
			[
				18,
				-18
			],
			[
				28,
				-28
			],
			[
				0,
				0
			]
		],
		[
			[
				9201,
				9212
			],
			[
				93,
				0
			],
			[
				86,
				0
			],
			[
				62,
				78
			],
			[
				60,
				75
			],
			[
				57,
				77
			],
			[
				125,
				-2
			],
			[
				86,
				-65
			],
			[
				254,
				-2
			],
			[
				9,
				-10
			],
			[
				76,
				-94
			],
			[
				13,
				54
			],
			[
				124,
				66
			],
			[
				30,
				16
			],
			[
				19,
				10
			],
			[
				70,
				-9
			],
			[
				5,
				-1
			],
			[
				0,
				-1
			],
			[
				20,
				-42
			],
			[
				16,
				-36
			],
			[
				73,
				-30
			],
			[
				47,
				70
			],
			[
				1,
				1
			],
			[
				16,
				23
			]
		],
		[
			[
				10868,
				10893
			],
			[
				-26,
				-41
			],
			[
				62,
				-63
			],
			[
				119,
				87
			]
		],
		[
			[
				6969,
				29742
			],
			[
				34,
				26
			],
			[
				1,
				0
			],
			[
				60,
				-9
			],
			[
				32,
				-5
			],
			[
				130,
				110
			],
			[
				76,
				-123
			],
			[
				15,
				-24
			],
			[
				26,
				-43
			],
			[
				15,
				-23
			],
			[
				35,
				-4
			],
			[
				103,
				-9
			],
			[
				53,
				-5
			],
			[
				49,
				-51
			]
		],
		[
			[
				6650,
				29946
			],
			[
				78,
				-24
			],
			[
				47,
				-14
			],
			[
				0,
				0
			]
		],
		[
			[
				16275,
				9587
			],
			[
				227,
				38
			],
			[
				44,
				-35
			],
			[
				5,
				3
			],
			[
				61,
				40
			],
			[
				-4,
				-71
			],
			[
				-2,
				-35
			],
			[
				62,
				-66
			],
			[
				7,
				-92
			],
			[
				61,
				24
			],
			[
				46,
				-152
			]
		],
		[
			[
				17274,
				10038
			],
			[
				0,
				0
			],
			[
				-32,
				-13
			],
			[
				-15,
				-7
			],
			[
				-18,
				-7
			],
			[
				-14,
				-55
			],
			[
				-9,
				-38
			],
			[
				-34,
				-9
			],
			[
				26,
				-69
			],
			[
				-27,
				-55
			],
			[
				44,
				-94
			],
			[
				17,
				12
			],
			[
				10,
				8
			],
			[
				22,
				4
			],
			[
				13,
				3
			],
			[
				31,
				6
			],
			[
				12,
				3
			],
			[
				-19,
				-152
			],
			[
				0,
				0
			],
			[
				-1,
				-4
			],
			[
				38,
				-15
			],
			[
				22,
				-9
			],
			[
				1,
				-1
			],
			[
				-4,
				-73
			],
			[
				-36,
				31
			],
			[
				23,
				-131
			]
		],
		[
			[
				16575,
				10140
			],
			[
				55,
				9
			],
			[
				-16,
				51
			],
			[
				8,
				9
			],
			[
				36,
				43
			],
			[
				41,
				-41
			],
			[
				14,
				-14
			],
			[
				10,
				12
			],
			[
				49,
				61
			],
			[
				58,
				-211
			],
			[
				4,
				-15
			],
			[
				62,
				21
			],
			[
				0,
				0
			],
			[
				28,
				54
			],
			[
				31,
				-20
			],
			[
				15,
				-10
			],
			[
				-2,
				51
			],
			[
				25,
				-67
			],
			[
				9,
				6
			],
			[
				39,
				27
			],
			[
				1,
				1
			],
			[
				41,
				-27
			],
			[
				32,
				-21
			],
			[
				7,
				24
			],
			[
				12,
				46
			],
			[
				5,
				19
			],
			[
				12,
				50
			],
			[
				1,
				1
			],
			[
				0,
				0
			]
		],
		[
			[
				20486,
				13717
			],
			[
				-26,
				-75
			],
			[
				-22,
				35
			],
			[
				-70,
				-84
			],
			[
				-30,
				-98
			],
			[
				-11,
				-5
			],
			[
				-82,
				-36
			],
			[
				-3,
				-14
			],
			[
				-26,
				-125
			],
			[
				-37,
				-66
			],
			[
				-27,
				-156
			],
			[
				-22,
				-123
			]
		],
		[
			[
				20016,
				23415
			],
			[
				5,
				-16
			],
			[
				47,
				-144
			],
			[
				51,
				-162
			],
			[
				79,
				-249
			],
			[
				92,
				-290
			],
			[
				-9,
				-5
			],
			[
				-128,
				-78
			],
			[
				-35,
				-23
			],
			[
				-17,
				-10
			],
			[
				-11,
				-7
			],
			[
				52,
				-87
			],
			[
				17,
				-28
			],
			[
				19,
				-32
			],
			[
				18,
				-187
			],
			[
				-3,
				-3
			],
			[
				-32,
				-28
			],
			[
				-19,
				-18
			],
			[
				-25,
				-22
			],
			[
				-12,
				-11
			],
			[
				-48,
				-45
			],
			[
				-51,
				56
			],
			[
				-5,
				6
			],
			[
				-7,
				-1
			],
			[
				-217,
				-56
			],
			[
				-31,
				-8
			],
			[
				-15,
				10
			],
			[
				-70,
				48
			],
			[
				-24,
				157
			],
			[
				-3,
				9
			],
			[
				-16,
				48
			],
			[
				0,
				90
			],
			[
				-402,
				-47
			],
			[
				-159,
				58
			],
			[
				-7,
				2
			],
			[
				-16,
				6
			]
		],
		[
			[
				25465,
				44454
			],
			[
				11,
				12
			],
			[
				520,
				569
			],
			[
				80,
				215
			],
			[
				40,
				105
			],
			[
				80,
				214
			],
			[
				2,
				3
			],
			[
				26,
				36
			],
			[
				126,
				168
			],
			[
				-1,
				12
			],
			[
				-15,
				123
			],
			[
				-8,
				64
			],
			[
				74,
				43
			],
			[
				155,
				91
			],
			[
				12,
				8
			],
			[
				63,
				36
			],
			[
				37,
				22
			],
			[
				111,
				65
			],
			[
				5,
				2
			],
			[
				25,
				10
			],
			[
				26,
				10
			],
			[
				309,
				117
			],
			[
				4,
				2
			],
			[
				149,
				56
			],
			[
				14,
				5
			],
			[
				93,
				25
			],
			[
				443,
				119
			],
			[
				152,
				40
			]
		]
	],
	"transform": {
		"scale": [
			0.00033170648433378345,
			0.00014688204703797048
		],
		"translate": [
			4.644156880854525,
			57.973599156099326
		]
	},
	"objects": {
		"region_grense": {
			"type": "GeometryCollection",
			"geometries": [
				{
					"type": "LineString",
					"arcs": [
						0,
						1,
						2,
						3,
						4,
						5,
						6,
						7,
						8,
						9,
						10
					],
					"properties": {
						"Nr": 1
					}
				},
				{
					"type": "LineString",
					"arcs": [
						11,
						12,
						13,
						14,
						15,
						16,
						17,
						18,
						19,
						20,
						21,
						22,
						23,
						24,
						25,
						26,
						27,
						28,
						29,
						30,
						31
					],
					"properties": {
						"Nr": 2
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							32,
							33,
							34,
							35,
							36,
							37,
							38,
							39,
							40,
							41
						],
						[
							42,
							43
						],
						[
							44
						]
					],
					"properties": {
						"Nr": 3
					}
				},
				{
					"type": "LineString",
					"arcs": [
						45,
						46,
						47,
						48,
						49,
						50,
						51,
						52,
						53,
						54,
						55,
						56,
						57,
						58,
						59,
						60,
						61,
						62,
						63,
						64
					],
					"properties": {
						"Nr": 4
					}
				},
				{
					"type": "LineString",
					"arcs": [
						65,
						66,
						67,
						68,
						69,
						70,
						71,
						72,
						73,
						74,
						75
					],
					"properties": {
						"Nr": 5
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							76,
							77,
							78,
							79,
							80,
							81,
							82,
							83,
							84,
							85,
							86,
							87,
							88,
							89
						],
						[
							90
						]
					],
					"properties": {
						"Nr": 6
					}
				},
				{
					"type": "LineString",
					"arcs": [
						91,
						92,
						93,
						94,
						95,
						96
					],
					"properties": {
						"Nr": 7
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							97,
							98,
							99,
							100,
							101,
							102,
							103,
							104,
							105,
							106,
							107,
							108,
							109,
							110,
							111,
							-1
						],
						[
							112,
							113,
							114,
							115
						]
					],
					"properties": {
						"Nr": 8
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							116,
							117,
							118
						],
						[
							119,
							120,
							121,
							-101,
							-100,
							-99,
							122,
							123,
							124,
							125,
							126
						]
					],
					"properties": {
						"Nr": 9
					}
				},
				{
					"type": "LineString",
					"arcs": [
						127
					],
					"properties": {
						"Nr": 10
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							128
						],
						[
							129,
							130,
							131,
							132,
							133,
							-40,
							-39,
							-38,
							-37,
							134,
							135,
							136
						]
					],
					"properties": {
						"Nr": 11
					}
				},
				{
					"type": "LineString",
					"arcs": [
						137
					],
					"properties": {
						"Nr": 12
					}
				},
				{
					"type": "LineString",
					"arcs": [
						138,
						139,
						140,
						141,
						142,
						143,
						144,
						145,
						146,
						147,
						148,
						149,
						150,
						151,
						152,
						153
					],
					"properties": {
						"Nr": 13
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-93,
							-92
						],
						[
							-119,
							-118,
							154,
							155,
							156,
							-94
						]
					],
					"properties": {
						"Nr": 14
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-114,
							-113
						],
						[
							157,
							158,
							-96,
							-95,
							-157,
							-156,
							-155,
							-117,
							-127,
							-126,
							-125,
							-124,
							-123,
							-98,
							-116,
							-115
						]
					],
					"properties": {
						"Nr": 15
					}
				},
				{
					"type": "LineString",
					"arcs": [
						159,
						160,
						161,
						162,
						163,
						164
					],
					"properties": {
						"Nr": 16
					}
				},
				{
					"type": "LineString",
					"arcs": [
						165,
						-161,
						-160
					],
					"properties": {
						"Nr": 17
					}
				},
				{
					"type": "LineString",
					"arcs": [
						166
					],
					"properties": {
						"Nr": 18
					}
				},
				{
					"type": "LineString",
					"arcs": [
						167,
						168
					],
					"properties": {
						"Nr": 19
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-24,
							169,
							170,
							171,
							172,
							173,
							174
						],
						[
							175,
							-164,
							-163,
							176,
							177,
							178,
							179,
							180,
							-47,
							-46,
							181,
							-25
						]
					],
					"properties": {
						"Nr": 20
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							182,
							183,
							184
						],
						[
							185,
							186,
							187
						]
					],
					"properties": {
						"Nr": 21
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							188
						],
						[
							189,
							-177,
							-162,
							-166
						]
					],
					"properties": {
						"Nr": 22
					}
				},
				{
					"type": "LineString",
					"arcs": [
						190,
						191,
						-187,
						-186
					],
					"properties": {
						"Nr": 23
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-167
					],
					"properties": {
						"Nr": 24
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							192,
							193,
							194
						],
						[
							-175,
							-174,
							-173,
							-172
						]
					],
					"properties": {
						"Nr": 25
					}
				},
				{
					"type": "LineString",
					"arcs": [
						195,
						196
					],
					"properties": {
						"Nr": 26
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-165,
						-176
					],
					"properties": {
						"Nr": 27
					}
				},
				{
					"type": "LineString",
					"arcs": [
						197,
						198,
						199,
						200,
						201,
						202,
						203
					],
					"properties": {
						"Nr": 28
					}
				},
				{
					"type": "LineString",
					"arcs": [
						204
					],
					"properties": {
						"Nr": 29
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							205
						],
						[
							206,
							207
						]
					],
					"properties": {
						"Nr": 30
					}
				},
				{
					"type": "LineString",
					"arcs": [
						208,
						209,
						210,
						211,
						212,
						213,
						214,
						215,
						216,
						217,
						218
					],
					"properties": {
						"Nr": 31
					}
				},
				{
					"type": "LineString",
					"arcs": [
						219,
						220,
						221,
						222,
						223,
						224,
						225,
						-30,
						-29,
						-28,
						-27
					],
					"properties": {
						"Nr": 32
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-32,
						-31,
						-226,
						-225,
						226,
						227,
						228,
						229
					],
					"properties": {
						"Nr": 33
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-230,
							-229,
							-228,
							230,
							231,
							232,
							233,
							234
						],
						[
							235
						],
						[
							236,
							237,
							238,
							-13,
							-12
						]
					],
					"properties": {
						"Nr": 34
					}
				},
				{
					"type": "LineString",
					"arcs": [
						239
					],
					"properties": {
						"Nr": 35
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							240,
							241
						],
						[
							-235,
							-234,
							-233,
							242,
							243,
							244,
							245,
							246
						]
					],
					"properties": {
						"Nr": 36
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-240
					],
					"properties": {
						"Nr": 37
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-236
					],
					"properties": {
						"Nr": 38
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-242,
						-241,
						-247,
						-246,
						-245,
						-244,
						247,
						248,
						249,
						250,
						251,
						252
					],
					"properties": {
						"Nr": 39
					}
				},
				{
					"type": "LineString",
					"arcs": [
						253,
						254,
						255,
						256,
						-59,
						257,
						-147,
						258,
						259,
						260,
						261,
						262,
						263
					],
					"properties": {
						"Nr": 40
					}
				},
				{
					"type": "LineString",
					"arcs": [
						264,
						265,
						266,
						267,
						268,
						269,
						-61,
						-60,
						-257,
						-256,
						-255
					],
					"properties": {
						"Nr": 41
					}
				},
				{
					"type": "LineString",
					"arcs": [
						270,
						271,
						-248,
						-243,
						-232,
						-231,
						-227,
						-224,
						-223,
						-222,
						-221,
						-220,
						-26,
						-182,
						-65,
						-64,
						-63,
						-62,
						-270,
						-269,
						-268
					],
					"properties": {
						"Nr": 42
					}
				},
				{
					"type": "LineString",
					"arcs": [
						272,
						273,
						274,
						275,
						276,
						277,
						278,
						279,
						-216,
						280,
						281,
						282,
						283
					],
					"properties": {
						"Nr": 43
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-266,
							284,
							285,
							286
						],
						[
							-253,
							-252,
							-251,
							-250,
							-249,
							-272,
							-271,
							-267
						]
					],
					"properties": {
						"Nr": 44
					}
				},
				{
					"type": "LineString",
					"arcs": [
						287,
						288,
						289,
						-278,
						-277,
						-276,
						290
					],
					"properties": {
						"Nr": 45
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-104,
							-103,
							-102,
							-122,
							-121,
							-120
						],
						[
							291,
							-262,
							292
						]
					],
					"properties": {
						"Nr": 46
					}
				},
				{
					"type": "LineString",
					"arcs": [
						293,
						294,
						295,
						296
					],
					"properties": {
						"Nr": 47
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							297,
							298,
							299
						],
						[
							-128
						],
						[
							-287,
							-286,
							-285,
							-265,
							-254
						]
					],
					"properties": {
						"Nr": 48
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							300,
							301,
							302,
							303,
							304,
							305,
							306
						],
						[
							307
						]
					],
					"properties": {
						"Nr": 49
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							308
						],
						[
							309
						]
					],
					"properties": {
						"Nr": 50
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							310,
							-296,
							-295,
							-294
						],
						[
							-307,
							-306,
							311,
							312
						]
					],
					"properties": {
						"Nr": 51
					}
				},
				{
					"type": "LineString",
					"arcs": [
						313,
						314,
						315
					],
					"properties": {
						"Nr": 52
					}
				},
				{
					"type": "LineString",
					"arcs": [
						316,
						317
					],
					"properties": {
						"Nr": 53
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-313,
							-312,
							-305,
							-304,
							-303,
							-302,
							-301,
							-308
						],
						[
							-309,
							-310
						],
						[
							-318,
							-317
						],
						[
							-316,
							-315,
							-314
						]
					],
					"properties": {
						"Nr": 54
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							318,
							-180,
							-179,
							-178,
							-190
						],
						[
							-185,
							319
						]
					],
					"properties": {
						"Nr": 55
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-189
					],
					"properties": {
						"Nr": 56
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-97,
						-159,
						-158
					],
					"properties": {
						"Nr": 57
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-42,
							-41,
							-134,
							-133,
							-132,
							-131,
							320
						],
						[
							321,
							-203,
							-202,
							322,
							323,
							324
						]
					],
					"properties": {
						"Nr": 58
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							325
						],
						[
							326,
							327,
							328,
							329,
							330,
							331
						]
					],
					"properties": {
						"Nr": 59
					}
				},
				{
					"type": "LineString",
					"arcs": [
						332,
						333,
						334
					],
					"properties": {
						"Nr": 60
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-300,
						-299,
						-298,
						-264,
						-263,
						-292
					],
					"properties": {
						"Nr": 61
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							335
						],
						[
							336,
							337
						]
					],
					"properties": {
						"Nr": 62
					}
				},
				{
					"type": "LineString",
					"arcs": [
						338
					],
					"properties": {
						"Nr": 63
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-324,
							-323,
							-201,
							-200,
							-199,
							-198
						],
						[
							-169,
							339
						],
						[
							340,
							341
						],
						[
							-325
						]
					],
					"properties": {
						"Nr": 64
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-342,
							-341
						],
						[
							-336,
							-338,
							342,
							343,
							344
						]
					],
					"properties": {
						"Nr": 65
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-340,
						-168
					],
					"properties": {
						"Nr": 66
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-326
						],
						[
							-345,
							-344,
							-343,
							-337
						]
					],
					"properties": {
						"Nr": 67
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-339
					],
					"properties": {
						"Nr": 68
					}
				},
				{
					"type": "LineString",
					"arcs": [
						345,
						346,
						347,
						-144,
						-143,
						-142,
						348,
						-5,
						-4,
						-3,
						-2,
						-112,
						-111,
						-110,
						-109,
						-108,
						-107,
						-106
					],
					"properties": {
						"Nr": 69
					}
				},
				{
					"type": "LineString",
					"arcs": [
						349
					],
					"properties": {
						"Nr": 70
					}
				},
				{
					"type": "LineString",
					"arcs": [
						350,
						351
					],
					"properties": {
						"Nr": 71
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-351
						],
						[
							352,
							353,
							-333
						],
						[
							-352
						]
					],
					"properties": {
						"Nr": 72
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-350
					],
					"properties": {
						"Nr": 73
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-330,
							-329,
							-328,
							-327
						],
						[
							354,
							355,
							356,
							357,
							-331
						]
					],
					"properties": {
						"Nr": 74
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-334,
							-354,
							-353
						],
						[
							-335
						]
					],
					"properties": {
						"Nr": 75
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-332,
							-358,
							-357,
							-356,
							-355
						],
						[
							-297,
							-311
						]
					],
					"properties": {
						"Nr": 76
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-35,
							-34,
							-33
						],
						[
							-138
						],
						[
							-129,
							-137,
							-136,
							-135,
							-36
						]
					],
					"properties": {
						"Nr": 77
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							358,
							359,
							-83,
							-82,
							360,
							361
						],
						[
							362,
							363,
							364,
							365,
							366
						]
					],
					"properties": {
						"Nr": 78
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-80,
							-79,
							-78,
							-77,
							-91
						],
						[
							-362,
							-361,
							-81
						]
					],
					"properties": {
						"Nr": 79
					}
				},
				{
					"type": "LineString",
					"arcs": [
						367,
						368,
						369,
						370,
						371,
						-214,
						-213,
						-212,
						-211,
						372,
						373
					],
					"properties": {
						"Nr": 80
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							374
						],
						[
							375,
							376,
							377
						]
					],
					"properties": {
						"Nr": 81
					}
				},
				{
					"type": "LineString",
					"arcs": [
						378
					],
					"properties": {
						"Nr": 82
					}
				},
				{
					"type": "LineString",
					"arcs": [
						379
					],
					"properties": {
						"Nr": 83
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-379
						],
						[
							-375,
							-378,
							-377,
							-376
						],
						[
							-374,
							380,
							381,
							382,
							-367,
							-366,
							-365,
							-364,
							383,
							384
						]
					],
					"properties": {
						"Nr": 84
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-51,
							-50,
							-49,
							-48,
							-181,
							-319,
							-320,
							-184,
							-183,
							-188,
							-192,
							385
						],
						[
							386,
							387,
							388,
							389,
							390,
							391,
							392,
							393,
							-85,
							394,
							395,
							396,
							397,
							398
						]
					],
					"properties": {
						"Nr": 85
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-89,
							-88,
							-87,
							-86,
							-394,
							-393,
							-392,
							-391,
							-390,
							-389,
							399
						],
						[
							400,
							401
						],
						[
							-90
						]
					],
					"properties": {
						"Nr": 86
					}
				},
				{
					"type": "LineString",
					"arcs": [
						402
					],
					"properties": {
						"Nr": 87
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-291,
							-275,
							-274,
							-273
						],
						[
							-44,
							-43
						]
					],
					"properties": {
						"Nr": 88
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-45
					],
					"properties": {
						"Nr": 89
					}
				},
				{
					"type": "LineString",
					"arcs": [
						403,
						404,
						-75,
						-74,
						-73,
						405,
						406,
						407,
						-396,
						-395,
						-84,
						-360,
						-359,
						-383,
						-382,
						-381,
						-373,
						-210,
						-209
					],
					"properties": {
						"Nr": 90
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-72,
						-71,
						408,
						409,
						-151,
						-150,
						-149,
						-148,
						-258,
						-58,
						-57,
						-56,
						-55,
						-54,
						-53,
						-52,
						-399,
						-398,
						-397,
						-408,
						-407,
						-406
					],
					"properties": {
						"Nr": 91
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							410,
							411,
							412,
							413,
							414
						],
						[
							415,
							-170,
							-23
						]
					],
					"properties": {
						"Nr": 92
					}
				},
				{
					"type": "LineString",
					"arcs": [
						416,
						-194,
						417
					],
					"properties": {
						"Nr": 93
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-415,
						418,
						419,
						420,
						421,
						422
					],
					"properties": {
						"Nr": 94
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-388,
							-387
						],
						[
							-400
						]
					],
					"properties": {
						"Nr": 95
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-403
						],
						[
							-402,
							-401
						]
					],
					"properties": {
						"Nr": 96
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-386,
						-191
					],
					"properties": {
						"Nr": 97
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							423,
							424,
							425,
							426,
							427,
							428
						],
						[
							429,
							430,
							431,
							432,
							433,
							434,
							435
						]
					],
					"properties": {
						"Nr": 98
					}
				},
				{
					"type": "LineString",
					"arcs": [
						436
					],
					"properties": {
						"Nr": 99
					}
				},
				{
					"type": "LineString",
					"arcs": [
						437
					],
					"properties": {
						"Nr": 100
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							438
						],
						[
							-429,
							-428,
							-427,
							-426,
							439,
							440,
							441,
							442,
							443
						]
					],
					"properties": {
						"Nr": 101
					}
				},
				{
					"type": "LineString",
					"arcs": [
						444
					],
					"properties": {
						"Nr": 102
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							445,
							446
						],
						[
							-423,
							-422,
							-421,
							-420,
							447,
							448,
							449
						]
					],
					"properties": {
						"Nr": 103
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-197,
							-196
						],
						[
							-195,
							-417
						]
					],
					"properties": {
						"Nr": 104
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-416
						],
						[
							-418,
							-193,
							-171
						]
					],
					"properties": {
						"Nr": 105
					}
				},
				{
					"type": "LineString",
					"arcs": [
						450,
						451,
						452,
						-154,
						-153,
						-152,
						-410,
						-409,
						-70,
						-69,
						-68
					],
					"properties": {
						"Nr": 106
					}
				},
				{
					"type": "LineString",
					"arcs": [
						453,
						454,
						455,
						-442,
						-441,
						-440,
						-425,
						-424,
						-436,
						-435,
						456,
						457,
						458,
						459,
						-413,
						-412,
						-411,
						-22,
						-21,
						-20,
						-19,
						-18
					],
					"properties": {
						"Nr": 107
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-439,
						-444,
						-443,
						-456,
						-455,
						-454,
						-17,
						-16,
						-15,
						-14,
						-239,
						-238,
						-237
					],
					"properties": {
						"Nr": 108
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-445
					],
					"properties": {
						"Nr": 109
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-105,
						-293,
						-261,
						-260,
						-259,
						-146,
						-145,
						-348,
						-347,
						-346
					],
					"properties": {
						"Nr": 110
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-9,
						-8,
						-7,
						-6,
						-349,
						-141,
						-140,
						-139,
						-453,
						-452,
						460,
						461,
						462,
						463,
						464
					],
					"properties": {
						"Nr": 111
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-370,
							-369,
							-368
						],
						[
							-380
						],
						[
							-284,
							-283,
							-282,
							-281,
							-215,
							-372,
							-371
						]
					],
					"properties": {
						"Nr": 112
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-385,
						-384,
						-363
					],
					"properties": {
						"Nr": 113
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-10,
							-465,
							-464,
							-463,
							-462,
							-461,
							-451,
							-67,
							-66,
							465,
							466,
							467,
							468,
							469,
							470,
							471,
							472,
							-288
						],
						[
							-11
						]
					],
					"properties": {
						"Nr": 114
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-434,
							-433,
							-432,
							-431,
							-430
						],
						[
							-438
						],
						[
							-447,
							-446,
							-450,
							-449,
							-448,
							-419,
							-414,
							-460,
							-459,
							-458,
							-457
						]
					],
					"properties": {
						"Nr": 115
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-437
					],
					"properties": {
						"Nr": 116
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-280,
						-279,
						-290,
						-289,
						-473,
						-472,
						-471,
						-470,
						-469,
						-468,
						-467,
						-466,
						-76,
						-405,
						-404,
						-219,
						-218,
						-217
					],
					"properties": {
						"Nr": 117
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-322
						],
						[
							-206
						],
						[
							-205
						],
						[
							-204
						]
					],
					"properties": {
						"Nr": 118
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-321,
						-130
					],
					"properties": {
						"Nr": 119
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-207
						],
						[
							-208
						]
					],
					"properties": {
						"Nr": 120
					}
				}
			]
		},
		"region": {
			"type": "GeometryCollection",
			"geometries": [
				{
					"arcs": [
						[
							0,
							1,
							2,
							3,
							4,
							5,
							6,
							7,
							8,
							9,
							10,
							473,
							474,
							475,
							476,
							477
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Glåmdal",
						"ID": "3011 Glåmdal",
						"Nr": 3011
					}
				},
				{
					"arcs": [
						[
							[
								478
							]
						],
						[
							[
								479
							]
						],
						[
							[
								480
							]
						],
						[
							[
								481
							]
						],
						[
							[
								482
							]
						],
						[
							[
								483
							]
						],
						[
							[
								484
							]
						],
						[
							[
								485
							]
						],
						[
							[
								486
							]
						],
						[
							[
								487
							]
						],
						[
							[
								488
							]
						],
						[
							[
								489
							]
						],
						[
							[
								490
							]
						],
						[
							[
								491
							]
						],
						[
							[
								492
							]
						],
						[
							[
								493
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Hitra/Frøya",
						"ID": "3058 Hitra/Frøya",
						"Nr": 3058
					}
				},
				{
					"arcs": [
						[
							11,
							12,
							13,
							14,
							15,
							16,
							17,
							18,
							19,
							20,
							21,
							22,
							23,
							24,
							25,
							26,
							27,
							28,
							29,
							30,
							31
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Vest-Telemark",
						"ID": "3030 Vest-Telemark",
						"Nr": 3030
					}
				},
				{
					"arcs": [
						[
							[
								32,
								33,
								34,
								35,
								36,
								37,
								38,
								39,
								40,
								41,
								494,
								42,
								43,
								495,
								44,
								496,
								497,
								498,
								499,
								500,
								501,
								502,
								503
							]
						],
						[
							[
								504
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Innherred",
						"ID": "3064 Innherred",
						"Nr": 3064
					}
				},
				{
					"arcs": [
						[
							45,
							46,
							47,
							48,
							49,
							50,
							51,
							52,
							53,
							54,
							55,
							56,
							57,
							58,
							59,
							60,
							61,
							62,
							63,
							64
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Hallingdal",
						"ID": "3021 Hallingdal",
						"Nr": 3021
					}
				},
				{
					"arcs": [
						[
							65,
							66,
							67,
							68,
							69,
							70,
							71,
							72,
							73,
							74,
							75
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Midt-Gudbrandsdal",
						"ID": "3017 Midt-Gudbrandsdal",
						"Nr": 3017
					}
				},
				{
					"arcs": [
						[
							[
								81,
								82,
								83,
								84,
								85,
								86,
								87,
								88,
								89,
								505,
								506,
								507,
								508,
								509,
								510,
								90,
								76,
								77,
								78,
								79,
								80
							]
						],
						[
							[
								511
							]
						],
						[
							[
								512
							]
						],
						[
							[
								513
							]
						],
						[
							[
								514
							]
						],
						[
							[
								515
							]
						],
						[
							[
								516
							]
						],
						[
							[
								517
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Nordfjord",
						"ID": "3049 Nordfjord",
						"Nr": 3049
					}
				},
				{
					"arcs": [
						[
							[
								91,
								92,
								93,
								94,
								95,
								96,
								518,
								519
							]
						],
						[
							[
								520
							]
						],
						[
							[
								521
							]
						],
						[
							[
								522
							]
						],
						[
							[
								523
							]
						],
						[
							[
								524
							]
						],
						[
							[
								525
							]
						],
						[
							[
								526
							]
						],
						[
							[
								527
							]
						],
						[
							[
								528
							]
						],
						[
							[
								529
							]
						],
						[
							[
								530
							]
						],
						[
							[
								531
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Nedre Glomma",
						"ID": "3004 Nedre Glomma",
						"Nr": 3004
					}
				},
				{
					"arcs": [
						[
							98,
							99,
							100,
							101,
							102,
							103,
							104,
							105,
							106,
							107,
							108,
							109,
							110,
							111,
							-1,
							532,
							112,
							113,
							114,
							115,
							97
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Nedre Romerike",
						"ID": "3007 Nedre Romerike",
						"Nr": 3007
					}
				},
				{
					"arcs": [
						[
							[
								117,
								118,
								533,
								534,
								535,
								536,
								537,
								538,
								539,
								540,
								119,
								120,
								121,
								-101,
								-100,
								-99,
								122,
								123,
								124,
								125,
								126,
								116
							]
						],
						[
							[
								127,
								541
							]
						],
						[
							[
								542
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Follo",
						"ID": "3006 Follo",
						"Nr": 3006
					}
				},
				{
					"arcs": [
						[
							[
								543,
								544,
								545,
								546,
								547,
								548,
								129,
								130,
								131,
								132,
								133,
								-40,
								-39,
								-38,
								-37,
								134,
								135,
								136,
								128
							]
						],
						[
							[
								137,
								549
							]
						],
						[
							[
								550
							]
						],
						[
							[
								551
							]
						],
						[
							[
								552
							]
						],
						[
							[
								553
							]
						],
						[
							[
								554
							]
						],
						[
							[
								555
							]
						],
						[
							[
								556
							]
						],
						[
							[
								557,
								558
							]
						],
						[
							[
								559
							]
						],
						[
							[
								560
							]
						],
						[
							[
								561
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Midtre Namdal",
						"ID": "3067 Midtre Namdal",
						"Nr": 3067
					}
				},
				{
					"arcs": [
						[
							138,
							139,
							140,
							141,
							142,
							143,
							144,
							145,
							146,
							147,
							148,
							149,
							150,
							151,
							152,
							153
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Gjøvikregionen",
						"ID": "3014 Gjøvikregionen",
						"Nr": 3014
					}
				},
				{
					"arcs": [
						[
							[
								562,
								563,
								564,
								-119,
								-118,
								154,
								155,
								156,
								-94,
								-93,
								-92
							]
						],
						[
							[
								565
							]
						],
						[
							[
								566
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Mosseregionen",
						"ID": "3003 Mosseregionen",
						"Nr": 3003
					}
				},
				{
					"arcs": [
						[
							567,
							568,
							569,
							157,
							158,
							-96,
							-95,
							-157,
							-156,
							-155,
							-117,
							-127,
							-126,
							-125,
							-124,
							-123,
							-98,
							-116,
							-115,
							-114,
							-113
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Indre Østfold",
						"ID": "3002 Indre Østfold",
						"Nr": 3002
					}
				},
				{
					"arcs": [
						[
							[
								159,
								160,
								161,
								162,
								163,
								164,
								570,
								571,
								572
							]
						],
						[
							[
								573
							]
						],
						[
							[
								574
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Bjørnefjorden",
						"ID": "3041 Bjørnefjorden",
						"Nr": 3041
					}
				},
				{
					"arcs": [
						[
							[
								165,
								-161,
								-160,
								575
							]
						],
						[
							[
								166,
								576
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Bergen",
						"ID": "3040 Bergen (Region)",
						"Nr": 3040
					}
				},
				{
					"arcs": [
						[
							[
								577,
								578,
								579,
								580
							]
						],
						[
							[
								581
							]
						],
						[
							[
								582
							]
						],
						[
							[
								583
							]
						],
						[
							[
								584
							]
						],
						[
							[
								585
							]
						],
						[
							[
								586
							]
						],
						[
							[
								167,
								168,
								587
							]
						],
						[
							[
								588,
								589
							]
						],
						[
							[
								590
							]
						],
						[
							[
								591
							]
						],
						[
							[
								592
							]
						],
						[
							[
								593
							]
						],
						[
							[
								594
							]
						],
						[
							[
								595
							]
						],
						[
							[
								596
							]
						],
						[
							[
								597
							]
						],
						[
							[
								598
							]
						],
						[
							[
								599
							]
						],
						[
							[
								600
							]
						],
						[
							[
								601
							]
						],
						[
							[
								602
							]
						],
						[
							[
								603
							]
						],
						[
							[
								604
							]
						],
						[
							[
								605
							]
						],
						[
							[
								606
							]
						],
						[
							[
								607
							]
						],
						[
							[
								608
							]
						],
						[
							[
								609
							]
						],
						[
							[
								610
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "HALD",
						"ID": "3069 HALD",
						"Nr": 3069
					}
				},
				{
					"arcs": [
						[
							169,
							170,
							171,
							172,
							173,
							174,
							611,
							612,
							613,
							614,
							615,
							616,
							617,
							618,
							619,
							175,
							-164,
							-163,
							176,
							177,
							178,
							179,
							180,
							-47,
							-46,
							181,
							-25,
							-24
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Hardanger",
						"ID": "3042 Hardanger",
						"Nr": 3042
					}
				},
				{
					"arcs": [
						[
							[
								620,
								621
							]
						],
						[
							[
								184,
								622,
								623,
								185,
								186,
								187,
								182,
								183
							]
						],
						[
							[
								188,
								624,
								189,
								-177,
								-162,
								-166,
								625
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Osterfjorden",
						"ID": "3045 Osterfjorden",
						"Nr": 3045
					}
				},
				{
					"arcs": [
						[
							[
								626
							]
						],
						[
							[
								190,
								191,
								-187,
								-186,
								627,
								628,
								629,
								630
							]
						],
						[
							[
								631,
								632,
								633,
								634
							]
						],
						[
							[
								635
							]
						],
						[
							[
								636
							]
						],
						[
							[
								637
							]
						],
						[
							[
								638
							]
						],
						[
							[
								639,
								640
							]
						],
						[
							[
								641,
								642
							]
						],
						[
							[
								643
							]
						],
						[
							[
								644
							]
						],
						[
							[
								645
							]
						],
						[
							[
								646
							]
						],
						[
							[
								647
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Nordhordland",
						"ID": "3044 Nordhordland",
						"Nr": 3044
					}
				},
				{
					"arcs": [
						[
							[
								-167,
								648
							]
						],
						[
							[
								649,
								650,
								651,
								652,
								653,
								654
							]
						],
						[
							[
								655
							]
						],
						[
							[
								656
							]
						],
						[
							[
								657
							]
						],
						[
							[
								658
							]
						],
						[
							[
								659
							]
						],
						[
							[
								660
							]
						],
						[
							[
								661
							]
						],
						[
							[
								662
							]
						],
						[
							[
								663
							]
						],
						[
							[
								664
							]
						],
						[
							[
								665
							]
						],
						[
							[
								666
							]
						],
						[
							[
								667
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Hordaland Vest",
						"ID": "3047 Hordaland Vest",
						"Nr": 3047
					}
				},
				{
					"arcs": [
						[
							[
								668
							]
						],
						[
							[
								669
							]
						],
						[
							[
								670
							]
						],
						[
							[
								671
							]
						],
						[
							[
								672
							]
						],
						[
							[
								673,
								674
							]
						],
						[
							[
								675
							]
						],
						[
							[
								676
							]
						],
						[
							[
								677
							]
						],
						[
							[
								678
							]
						],
						[
							[
								679,
								680
							]
						],
						[
							[
								681,
								682
							]
						],
						[
							[
								683
							]
						],
						[
							[
								684
							]
						],
						[
							[
								685
							]
						],
						[
							[
								686
							]
						],
						[
							[
								687
							]
						],
						[
							[
								192,
								193,
								194,
								688,
								689,
								-175,
								-174,
								-173,
								-172
							]
						],
						[
							[
								690
							]
						],
						[
							[
								691
							]
						],
						[
							[
								692
							]
						],
						[
							[
								693
							]
						],
						[
							[
								694
							]
						],
						[
							[
								695
							]
						],
						[
							[
								195,
								196,
								696
							]
						],
						[
							[
								-165,
								-176,
								697
							]
						],
						[
							[
								698
							]
						],
						[
							[
								699
							]
						],
						[
							[
								700
							]
						],
						[
							[
								701
							]
						],
						[
							[
								702
							]
						],
						[
							[
								703
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Sunnhordland",
						"ID": "3046 Sunnhordland",
						"Nr": 3046
					}
				},
				{
					"arcs": [
						[
							[
								197,
								198,
								199,
								200,
								201,
								202,
								203,
								704,
								705,
								706,
								707,
								708,
								709,
								710,
								711,
								712,
								713
							]
						],
						[
							[
								714
							]
						],
						[
							[
								715
							]
						],
						[
							[
								716
							]
						],
						[
							[
								717
							]
						],
						[
							[
								718
							]
						],
						[
							[
								719
							]
						],
						[
							[
								720
							]
						],
						[
							[
								721
							]
						],
						[
							[
								722
							]
						],
						[
							[
								723
							]
						],
						[
							[
								724
							]
						],
						[
							[
								725
							]
						],
						[
							[
								726
							]
						],
						[
							[
								727
							]
						],
						[
							[
								728
							]
						],
						[
							[
								729
							]
						],
						[
							[
								730
							]
						],
						[
							[
								731
							]
						],
						[
							[
								732
							]
						],
						[
							[
								733
							]
						],
						[
							[
								734
							]
						],
						[
							[
								204,
								735
							]
						],
						[
							[
								205,
								736,
								206,
								207,
								737
							]
						],
						[
							[
								738
							]
						],
						[
							[
								739
							]
						],
						[
							[
								740
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Sør-Helgeland",
						"ID": "3068 Sør-Helgeland",
						"Nr": 3068
					}
				},
				{
					"arcs": [
						[
							208,
							209,
							210,
							211,
							212,
							213,
							214,
							215,
							216,
							217,
							218
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Oppdal/Rennebu",
						"ID": "3059 Oppdal/Rennebu",
						"Nr": 3059
					}
				},
				{
					"arcs": [
						[
							219,
							220,
							221,
							222,
							223,
							224,
							225,
							-30,
							-29,
							-28,
							-27
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Øst-Telemark",
						"ID": "3029 Øst-Telemark",
						"Nr": 3029
					}
				},
				{
					"arcs": [
						[
							-32,
							-31,
							-226,
							-225,
							226,
							227,
							228,
							229
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Midt-Telemark",
						"ID": "3028 Midt-Telemark",
						"Nr": 3028
					}
				},
				{
					"arcs": [
						[
							[
								-230,
								-229,
								-228,
								230,
								231,
								232,
								233,
								234,
								741,
								235,
								742,
								743,
								744,
								745,
								746,
								747,
								236,
								237,
								238,
								-13,
								-12
							]
						],
						[
							[
								239,
								748
							]
						],
						[
							[
								749
							]
						],
						[
							[
								750
							]
						],
						[
							[
								751
							]
						],
						[
							[
								752
							]
						],
						[
							[
								753
							]
						],
						[
							[
								754
							]
						],
						[
							[
								755
							]
						],
						[
							[
								756
							]
						],
						[
							[
								757
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Grenland",
						"ID": "3027 Grenland",
						"Nr": 3027
					}
				},
				{
					"arcs": [
						[
							[
								758,
								759,
								-235,
								-234,
								-233,
								242,
								243,
								244,
								245,
								246,
								240,
								241
							]
						],
						[
							[
								-240,
								760
							]
						],
						[
							[
								-236,
								761
							]
						],
						[
							[
								762
							]
						],
						[
							[
								763
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Sandefjord/Larvik",
						"ID": "3026 Sandefjord/Larvik",
						"Nr": 3026
					}
				},
				{
					"arcs": [
						[
							[
								764,
								765
							]
						],
						[
							[
								766,
								767,
								768,
								769,
								770,
								771
							]
						],
						[
							[
								772
							]
						],
						[
							[
								773
							]
						],
						[
							[
								774,
								775
							]
						],
						[
							[
								-242,
								-241,
								-247,
								-246,
								-245,
								-244,
								247,
								248,
								249,
								250,
								251,
								252,
								776,
								777,
								778,
								779,
								780,
								781,
								782
							]
						],
						[
							[
								783
							]
						],
						[
							[
								784
							]
						],
						[
							[
								785
							]
						],
						[
							[
								786
							]
						],
						[
							[
								787
							]
						],
						[
							[
								788
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Tønsbergregionen",
						"ID": "3025 Tønsbergregionen",
						"Nr": 3025
					}
				},
				{
					"arcs": [
						[
							253,
							254,
							255,
							256,
							-59,
							257,
							-147,
							258,
							259,
							260,
							261,
							262,
							263
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Ringerike/Hole",
						"ID": "3024 Ringerike/Hole",
						"Nr": 3024
					}
				},
				{
					"arcs": [
						[
							264,
							265,
							266,
							267,
							268,
							269,
							-61,
							-60,
							-257,
							-256,
							-255
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Midt-Buskerud",
						"ID": "3023 Midt-Buskerud",
						"Nr": 3023
					}
				},
				{
					"arcs": [
						[
							270,
							271,
							-248,
							-243,
							-232,
							-231,
							-227,
							-224,
							-223,
							-222,
							-221,
							-220,
							-26,
							-182,
							-65,
							-64,
							-63,
							-62,
							-270,
							-269,
							-268
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Kongsberg/Numedal",
						"ID": "3022 Kongsberg/Numedal",
						"Nr": 3022
					}
				},
				{
					"arcs": [
						[
							272,
							273,
							274,
							275,
							276,
							277,
							278,
							279,
							-216,
							280,
							281,
							282,
							283,
							789,
							790,
							791,
							792
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Trondheimsregionen",
						"ID": "3061 Trondheimsregionen",
						"Nr": 3061
					}
				},
				{
					"arcs": [
						[
							[
								284,
								285,
								286,
								793,
								794,
								795,
								-253,
								-252,
								-251,
								-250,
								-249,
								-272,
								-271,
								-267,
								-266
							]
						],
						[
							[
								796
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Drammensregionen",
						"ID": "3020 Drammensregionen",
						"Nr": 3020
					}
				},
				{
					"arcs": [
						[
							287,
							288,
							289,
							-278,
							-277,
							-276,
							290,
							797,
							798
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Rørosregionen",
						"ID": "3062 Rørosregionen",
						"Nr": 3062
					}
				},
				{
					"arcs": [
						[
							-104,
							-103,
							-102,
							-122,
							-121,
							-120,
							799,
							291,
							-262,
							292
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Oslo",
						"ID": "3009 Oslo",
						"Nr": 3009
					}
				},
				{
					"arcs": [
						[
							[
								293,
								294,
								295,
								296,
								800,
								801,
								802,
								803
							]
						],
						[
							[
								804,
								805
							]
						],
						[
							[
								806,
								807
							]
						],
						[
							[
								808
							]
						],
						[
							[
								809
							]
						],
						[
							[
								810
							]
						],
						[
							[
								811
							]
						],
						[
							[
								812
							]
						],
						[
							[
								813
							]
						],
						[
							[
								814
							]
						],
						[
							[
								815
							]
						],
						[
							[
								816
							]
						],
						[
							[
								817
							]
						],
						[
							[
								818
							]
						],
						[
							[
								819
							]
						],
						[
							[
								820
							]
						],
						[
							[
								821
							]
						],
						[
							[
								822
							]
						],
						[
							[
								823
							]
						],
						[
							[
								824
							]
						],
						[
							[
								825
							]
						],
						[
							[
								826
							]
						],
						[
							[
								827
							]
						],
						[
							[
								828
							]
						],
						[
							[
								829
							]
						],
						[
							[
								830
							]
						],
						[
							[
								831
							]
						],
						[
							[
								832
							]
						],
						[
							[
								833
							]
						],
						[
							[
								834
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Tromsøregionen",
						"ID": "3079 Tromsøregionen",
						"Nr": 3079
					}
				},
				{
					"arcs": [
						[
							[
								297,
								298,
								299,
								835,
								836,
								-128,
								837,
								838,
								839,
								-287,
								-286,
								-285,
								-265,
								-254
							]
						],
						[
							[
								840
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Vestviken",
						"ID": "3086 Vestviken",
						"Nr": 3086
					}
				},
				{
					"arcs": [
						[
							[
								305,
								306,
								841,
								842,
								843,
								844,
								845,
								307,
								300,
								301,
								302,
								303,
								304
							]
						],
						[
							[
								846
							]
						],
						[
							[
								847
							]
						],
						[
							[
								848
							]
						],
						[
							[
								849
							]
						],
						[
							[
								850
							]
						],
						[
							[
								851
							]
						],
						[
							[
								852,
								853,
								854
							]
						],
						[
							[
								855,
								856
							]
						],
						[
							[
								857,
								858,
								859
							]
						],
						[
							[
								860
							]
						],
						[
							[
								861,
								862,
								863,
								864
							]
						],
						[
							[
								865
							]
						],
						[
							[
								866
							]
						],
						[
							[
								867
							]
						],
						[
							[
								868
							]
						],
						[
							[
								869
							]
						],
						[
							[
								870
							]
						],
						[
							[
								871
							]
						],
						[
							[
								872,
								309,
								308
							]
						],
						[
							[
								873
							]
						],
						[
							[
								874
							]
						],
						[
							[
								875
							]
						],
						[
							[
								876
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Vest-Finnmark",
						"ID": "3081 Vest-Finnmark",
						"Nr": 3081
					}
				},
				{
					"arcs": [
						[
							[
								310,
								-296,
								-295,
								-294,
								877,
								878,
								879,
								880,
								881,
								-307,
								-306,
								311,
								312,
								882,
								883,
								884
							]
						],
						[
							[
								885,
								886
							]
						],
						[
							[
								887
							]
						],
						[
							[
								888
							]
						],
						[
							[
								889
							]
						],
						[
							[
								890
							]
						],
						[
							[
								891
							]
						],
						[
							[
								892
							]
						],
						[
							[
								893
							]
						],
						[
							[
								894
							]
						],
						[
							[
								895
							]
						],
						[
							[
								896
							]
						],
						[
							[
								897
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Nord-Troms",
						"ID": "3080 Nord-Troms",
						"Nr": 3080
					}
				},
				{
					"arcs": [
						[
							[
								313,
								314,
								315,
								898,
								899,
								900,
								901,
								902,
								903,
								904
							]
						],
						[
							[
								905
							]
						],
						[
							[
								906
							]
						],
						[
							[
								907
							]
						],
						[
							[
								316,
								317,
								908
							]
						],
						[
							[
								909
							]
						],
						[
							[
								910
							]
						],
						[
							[
								911
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Øst-Finnmark",
						"ID": "3083 Øst-Finnmark",
						"Nr": 3083
					}
				},
				{
					"arcs": [
						[
							[
								-313,
								-312,
								-305,
								-304,
								-303,
								-302,
								-301,
								-308,
								912,
								-309,
								-310,
								913,
								-318,
								-317,
								914,
								-316,
								-315,
								-314,
								915,
								916,
								917
							]
						],
						[
							[
								918
							]
						],
						[
							[
								919
							]
						],
						[
							[
								920
							]
						],
						[
							[
								921
							]
						],
						[
							[
								922
							]
						],
						[
							[
								923
							]
						],
						[
							[
								924
							]
						],
						[
							[
								925
							]
						],
						[
							[
								926
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Midt-Finnmark",
						"ID": "3082 Midt-Finnmark",
						"Nr": 3082
					}
				},
				{
					"arcs": [
						[
							[
								-180,
								-179,
								-178,
								-190,
								927,
								-185,
								319,
								318
							]
						],
						[
							[
								-189,
								928
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Voss",
						"ID": "3043 Voss",
						"Nr": 3043
					}
				},
				{
					"arcs": [
						[
							-97,
							-159,
							-158,
							929
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Halden",
						"ID": "3001 Halden",
						"Nr": 3001
					}
				},
				{
					"arcs": [
						[
							-42,
							-41,
							-134,
							-133,
							-132,
							-131,
							320,
							930,
							321,
							-203,
							-202,
							322,
							323,
							324,
							931,
							932,
							933
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Indre Namdal",
						"ID": "3065 Indre Namdal",
						"Nr": 3065
					}
				},
				{
					"arcs": [
						[
							[
								934,
								935,
								936,
								325,
								937,
								938,
								939,
								940,
								941,
								326,
								327,
								328,
								329,
								330,
								331
							]
						],
						[
							[
								332,
								333,
								334,
								942
							]
						],
						[
							[
								943
							]
						],
						[
							[
								944
							]
						],
						[
							[
								945
							]
						],
						[
							[
								946
							]
						],
						[
							[
								947
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Ofoten",
						"ID": "3074 Ofoten",
						"Nr": 3074
					}
				},
				{
					"arcs": [
						[
							[
								-300,
								-299,
								-298,
								-264,
								-263,
								-292,
								948,
								949
							]
						],
						[
							[
								950
							]
						],
						[
							[
								951
							]
						],
						[
							[
								952
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Akershus Vest",
						"ID": "3005 Akershus Vest",
						"Nr": 3005
					}
				},
				{
					"arcs": [
						[
							[
								953
							]
						],
						[
							[
								954
							]
						],
						[
							[
								955
							]
						],
						[
							[
								956
							]
						],
						[
							[
								957,
								958,
								336,
								337,
								335
							]
						],
						[
							[
								959,
								960
							]
						],
						[
							[
								961,
								962
							]
						],
						[
							[
								963
							]
						],
						[
							[
								964
							]
						],
						[
							[
								965
							]
						],
						[
							[
								966
							]
						],
						[
							[
								967
							]
						],
						[
							[
								968
							]
						],
						[
							[
								969
							]
						],
						[
							[
								970
							]
						],
						[
							[
								971
							]
						],
						[
							[
								972
							]
						],
						[
							[
								338,
								973
							]
						],
						[
							[
								974
							]
						],
						[
							[
								975
							]
						],
						[
							[
								976
							]
						],
						[
							[
								977
							]
						],
						[
							[
								978
							]
						],
						[
							[
								979
							]
						],
						[
							[
								980
							]
						],
						[
							[
								981
							]
						],
						[
							[
								982
							]
						],
						[
							[
								983
							]
						],
						[
							[
								984
							]
						],
						[
							[
								985
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Ytre Helgeland",
						"ID": "3070 Ytre Helgeland",
						"Nr": 3070
					}
				},
				{
					"arcs": [
						[
							-201,
							-200,
							-199,
							-198,
							986,
							-169,
							339,
							987,
							340,
							341,
							988,
							-325,
							-324,
							-323
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Mosjøregionen",
						"ID": "3071 Mosjøregionen",
						"Nr": 3071
					}
				},
				{
					"arcs": [
						[
							[
								989,
								990,
								-342,
								-341,
								991,
								992,
								993,
								994,
								-336,
								-338,
								342,
								343,
								344
							]
						],
						[
							[
								995
							]
						],
						[
							[
								996
							]
						],
						[
							[
								997
							]
						],
						[
							[
								-340,
								-168,
								998
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Ranaregionen",
						"ID": "3072 Ranaregionen",
						"Nr": 3072
					}
				},
				{
					"arcs": [
						[
							[
								-326,
								999,
								1000,
								1001,
								1002,
								-345,
								-344,
								-343,
								-337,
								1003,
								1004,
								1005,
								1006,
								1007,
								1008,
								1009,
								1010,
								1011,
								1012,
								1013,
								1014,
								1015
							]
						],
						[
							[
								1016
							]
						],
						[
							[
								1017
							]
						],
						[
							[
								1018
							]
						],
						[
							[
								1019
							]
						],
						[
							[
								1020
							]
						],
						[
							[
								1021
							]
						],
						[
							[
								1022
							]
						],
						[
							[
								1023
							]
						],
						[
							[
								1024
							]
						],
						[
							[
								1025
							]
						],
						[
							[
								1026
							]
						],
						[
							[
								1027
							]
						],
						[
							[
								1028
							]
						],
						[
							[
								1029
							]
						],
						[
							[
								1030
							]
						],
						[
							[
								1031
							]
						],
						[
							[
								1032
							]
						],
						[
							[
								1033
							]
						],
						[
							[
								1034
							]
						],
						[
							[
								1035
							]
						],
						[
							[
								1036
							]
						],
						[
							[
								1037
							]
						],
						[
							[
								1038
							]
						],
						[
							[
								1039
							]
						],
						[
							[
								1040
							]
						],
						[
							[
								1041
							]
						],
						[
							[
								-339,
								1042
							]
						],
						[
							[
								1043
							]
						],
						[
							[
								1044
							]
						],
						[
							[
								1045
							]
						],
						[
							[
								1046
							]
						],
						[
							[
								1047
							]
						],
						[
							[
								1048
							]
						],
						[
							[
								1049
							]
						],
						[
							[
								1050
							]
						],
						[
							[
								1051
							]
						],
						[
							[
								1052
							]
						],
						[
							[
								1053
							]
						],
						[
							[
								1054
							]
						],
						[
							[
								1055
							]
						],
						[
							[
								1056
							]
						],
						[
							[
								1057
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Salten",
						"ID": "3073 Salten",
						"Nr": 3073
					}
				},
				{
					"arcs": [
						[
							345,
							346,
							347,
							-144,
							-143,
							-142,
							348,
							-5,
							-4,
							-3,
							-2,
							-112,
							-111,
							-110,
							-109,
							-108,
							-107,
							-106
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Øvre Romerike",
						"ID": "3008 Øvre Romerike",
						"Nr": 3008
					}
				},
				{
					"arcs": [
						[
							[
								1058
							]
						],
						[
							[
								1059,
								1060
							]
						],
						[
							[
								1061
							]
						],
						[
							[
								349,
								1062
							]
						],
						[
							[
								350,
								351,
								1063
							]
						],
						[
							[
								1064
							]
						],
						[
							[
								1065
							]
						],
						[
							[
								1066
							]
						],
						[
							[
								1067
							]
						],
						[
							[
								1068
							]
						],
						[
							[
								1069
							]
						],
						[
							[
								1070
							]
						],
						[
							[
								1071
							]
						],
						[
							[
								1072
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Lofoten",
						"ID": "3075 Lofoten",
						"Nr": 3075
					}
				},
				{
					"arcs": [
						[
							[
								1073,
								1074,
								1075,
								1076,
								1077,
								1078,
								1079,
								1080,
								1081
							]
						],
						[
							[
								1082,
								1083,
								1084,
								1085,
								352,
								353,
								-333,
								1086,
								-352,
								-351
							]
						],
						[
							[
								-350,
								1087
							]
						],
						[
							[
								1088
							]
						],
						[
							[
								1089
							]
						],
						[
							[
								1090
							]
						],
						[
							[
								1091
							]
						],
						[
							[
								1092
							]
						],
						[
							[
								1093
							]
						],
						[
							[
								1094
							]
						],
						[
							[
								1095
							]
						],
						[
							[
								1096
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Vesterålen",
						"ID": "3076 Vesterålen",
						"Nr": 3076
					}
				},
				{
					"arcs": [
						[
							[
								1097
							]
						],
						[
							[
								1098
							]
						],
						[
							[
								1099,
								1100,
								1101,
								1102,
								354,
								355,
								356,
								357,
								-331,
								-330,
								-329,
								-328,
								-327
							]
						],
						[
							[
								-354,
								-353,
								1103,
								1104,
								-335,
								-334
							]
						],
						[
							[
								1105
							]
						],
						[
							[
								1106
							]
						],
						[
							[
								1107
							]
						],
						[
							[
								1108
							]
						],
						[
							[
								1109
							]
						],
						[
							[
								1110
							]
						],
						[
							[
								1111
							]
						],
						[
							[
								1112
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Sør-Troms",
						"ID": "3077 Sør-Troms",
						"Nr": 3077
					}
				},
				{
					"arcs": [
						[
							[
								1113,
								1114,
								1115,
								1116
							]
						],
						[
							[
								1117
							]
						],
						[
							[
								-332,
								-358,
								-357,
								-356,
								-355,
								1118,
								1119,
								1120,
								1121,
								-297,
								-311,
								1122,
								1123
							]
						],
						[
							[
								1124
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Midt-Troms",
						"ID": "3078 Midt-Troms",
						"Nr": 3078
					}
				},
				{
					"arcs": [
						[
							[
								1125,
								1126,
								1127,
								1128,
								1129,
								1130,
								1131,
								1132,
								-138,
								1133,
								-129,
								-137,
								-136,
								-135,
								-36,
								-35,
								-34,
								-33
							]
						],
						[
							[
								1134
							]
						],
						[
							[
								1135
							]
						],
						[
							[
								1136
							]
						],
						[
							[
								1137
							]
						],
						[
							[
								1138
							]
						],
						[
							[
								1139
							]
						],
						[
							[
								1140
							]
						],
						[
							[
								1141
							]
						],
						[
							[
								1142
							]
						],
						[
							[
								1143
							]
						],
						[
							[
								1144
							]
						],
						[
							[
								1145
							]
						],
						[
							[
								1146
							]
						],
						[
							[
								1147
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Fosen",
						"ID": "3057 Fosen",
						"Nr": 3057
					}
				},
				{
					"arcs": [
						[
							358,
							359,
							-83,
							-82,
							360,
							361,
							1148,
							1149,
							1150,
							1151,
							1152,
							1153,
							1154,
							362,
							363,
							364,
							365,
							366
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Storfjord",
						"ID": "3054 Storfjord",
						"Nr": 3054
					}
				},
				{
					"arcs": [
						[
							[
								1155,
								1156
							]
						],
						[
							[
								1157,
								1158,
								1159,
								1160
							]
						],
						[
							[
								1161
							]
						],
						[
							[
								1162
							]
						],
						[
							[
								1163
							]
						],
						[
							[
								1164
							]
						],
						[
							[
								1165
							]
						],
						[
							[
								1166
							]
						],
						[
							[
								1167,
								1168,
								1169,
								-362,
								-361,
								-81,
								-80,
								-79,
								-78,
								-77,
								-91
							]
						],
						[
							[
								1170,
								1171
							]
						],
						[
							[
								1172
							]
						],
						[
							[
								1173
							]
						],
						[
							[
								1174
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Søre Sunnmøre",
						"ID": "3055 Søre Sunnmøre",
						"Nr": 3055
					}
				},
				{
					"arcs": [
						[
							[
								1175
							]
						],
						[
							[
								1176
							]
						],
						[
							[
								1177
							]
						],
						[
							[
								1178
							]
						],
						[
							[
								1179
							]
						],
						[
							[
								1180
							]
						],
						[
							[
								1181
							]
						],
						[
							[
								1182
							]
						],
						[
							[
								367,
								368,
								369,
								370,
								371,
								-214,
								-213,
								-212,
								-211,
								372,
								373,
								1183,
								1184,
								1185,
								1186,
								1187
							]
						],
						[
							[
								1188
							]
						],
						[
							[
								1189
							]
						],
						[
							[
								1190,
								1191,
								375,
								376,
								377,
								374
							]
						],
						[
							[
								378,
								1192
							]
						],
						[
							[
								1193
							]
						],
						[
							[
								379,
								1194
							]
						],
						[
							[
								1195
							]
						],
						[
							[
								1196
							]
						],
						[
							[
								1197
							]
						],
						[
							[
								1198
							]
						],
						[
							[
								1199
							]
						],
						[
							[
								1200
							]
						],
						[
							[
								1201
							]
						],
						[
							[
								1202
							]
						],
						[
							[
								1203
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Nordmøre",
						"ID": "3052 Nordmøre",
						"Nr": 3052
					}
				},
				{
					"arcs": [
						[
							[
								-379,
								1204,
								-375,
								-378,
								-377,
								-376,
								1205,
								-374,
								380,
								381,
								382,
								-367,
								-366,
								-365,
								-364,
								383,
								384,
								1206,
								1207,
								1208,
								1209,
								1210,
								1211
							]
						],
						[
							[
								1212
							]
						],
						[
							[
								1213
							]
						],
						[
							[
								1214
							]
						],
						[
							[
								1215
							]
						],
						[
							[
								1216
							]
						],
						[
							[
								1217
							]
						],
						[
							[
								1218
							]
						],
						[
							[
								1219
							]
						],
						[
							[
								1220
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Romsdal",
						"ID": "3053 Romsdal",
						"Nr": 3053
					}
				},
				{
					"arcs": [
						[
							-51,
							-50,
							-49,
							-48,
							-181,
							-319,
							-320,
							-184,
							-183,
							-188,
							-192,
							385,
							1221,
							1222,
							1223,
							1224,
							1225,
							1226,
							1227,
							1228,
							1229,
							1230,
							1231,
							1232,
							1233,
							386,
							387,
							388,
							389,
							390,
							391,
							392,
							393,
							-85,
							394,
							395,
							396,
							397,
							398
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Sogn",
						"ID": "3050 Sogn",
						"Nr": 3050
					}
				},
				{
					"arcs": [
						[
							[
								-394,
								-393,
								-392,
								-391,
								-390,
								-389,
								399,
								1234,
								400,
								401,
								1235,
								1236,
								1237,
								-90,
								-89,
								-88,
								-87,
								-86
							]
						],
						[
							[
								1238
							]
						],
						[
							[
								1239
							]
						],
						[
							[
								1240
							]
						],
						[
							[
								1241
							]
						],
						[
							[
								1242
							]
						],
						[
							[
								1243
							]
						],
						[
							[
								1244
							]
						],
						[
							[
								1245
							]
						],
						[
							[
								1246
							]
						],
						[
							[
								1247
							]
						],
						[
							[
								402,
								1248
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Sunnfjord",
						"ID": "3051 Sunnfjord",
						"Nr": 3051
					}
				},
				{
					"arcs": [
						[
							[
								1249,
								-291,
								-275,
								-274,
								-273,
								1250,
								-44,
								-43
							]
						],
						[
							[
								-45,
								1251
							]
						],
						[
							[
								1252
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Stjørdalsregionen",
						"ID": "3063 Stjørdalsregionen",
						"Nr": 3063
					}
				},
				{
					"arcs": [
						[
							403,
							404,
							-75,
							-74,
							-73,
							405,
							406,
							407,
							-396,
							-395,
							-84,
							-360,
							-359,
							-383,
							-382,
							-381,
							-373,
							-210,
							-209
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Nord-Gudbrandsdal",
						"ID": "3018 Nord-Gudbrandsdal",
						"Nr": 3018
					}
				},
				{
					"arcs": [
						[
							-72,
							-71,
							408,
							409,
							-151,
							-150,
							-149,
							-148,
							-258,
							-58,
							-57,
							-56,
							-55,
							-54,
							-53,
							-52,
							-399,
							-398,
							-397,
							-408,
							-407,
							-406
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Valdres",
						"ID": "3019 Valdres",
						"Nr": 3019
					}
				},
				{
					"arcs": [
						[
							[
								410,
								411,
								412,
								413,
								414,
								1253,
								1254,
								1255,
								1256,
								1257,
								1258,
								415,
								-170,
								-23
							]
						],
						[
							[
								416,
								-194,
								417,
								1259
							]
						],
						[
							[
								1260
							]
						],
						[
							[
								1261
							]
						],
						[
							[
								1262
							]
						],
						[
							[
								1263,
								1264
							]
						],
						[
							[
								1265
							]
						],
						[
							[
								1266
							]
						],
						[
							[
								1267
							]
						],
						[
							[
								1268
							]
						],
						[
							[
								1269
							]
						],
						[
							[
								1270
							]
						],
						[
							[
								1271
							]
						],
						[
							[
								1272
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Ryfylke",
						"ID": "3038 Ryfylke",
						"Nr": 3038
					}
				},
				{
					"arcs": [
						[
							[
								-415,
								418,
								419,
								420,
								421,
								422,
								1273,
								1274,
								1275,
								1276,
								1277,
								1278,
								1279,
								1280,
								1281,
								1282
							]
						],
						[
							[
								1283,
								1284
							]
						],
						[
							[
								1285
							]
						],
						[
							[
								1286
							]
						],
						[
							[
								1287
							]
						],
						[
							[
								1288
							]
						],
						[
							[
								1289
							]
						],
						[
							[
								1290
							]
						],
						[
							[
								1291
							]
						],
						[
							[
								1292
							]
						],
						[
							[
								1293
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Stavangerregionen",
						"ID": "3039 Stavangerregionen",
						"Nr": 3039
					}
				},
				{
					"arcs": [
						[
							[
								-388,
								-387,
								1294,
								1295,
								-400
							]
						],
						[
							[
								1296
							]
						],
						[
							[
								1297
							]
						],
						[
							[
								-403,
								1298,
								-402,
								-401,
								1299
							]
						],
						[
							[
								1300
							]
						],
						[
							[
								1301
							]
						],
						[
							[
								1302
							]
						],
						[
							[
								1303
							]
						],
						[
							[
								-386,
								-191,
								1304
							]
						],
						[
							[
								1305
							]
						],
						[
							[
								1306
							]
						],
						[
							[
								1307
							]
						],
						[
							[
								1308
							]
						],
						[
							[
								1309
							]
						],
						[
							[
								1310
							]
						],
						[
							[
								1311
							]
						],
						[
							[
								1312
							]
						],
						[
							[
								1313
							]
						],
						[
							[
								1314
							]
						],
						[
							[
								1315
							]
						],
						[
							[
								1316
							]
						],
						[
							[
								1317
							]
						],
						[
							[
								1318
							]
						],
						[
							[
								1319
							]
						],
						[
							[
								1320
							]
						],
						[
							[
								1321
							]
						],
						[
							[
								1322
							]
						],
						[
							[
								1323
							]
						],
						[
							[
								1324
							]
						],
						[
							[
								1325
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "HAFS",
						"ID": "3048 HAFS",
						"Nr": 3048
					}
				},
				{
					"arcs": [
						[
							[
								425,
								426,
								427,
								428,
								1326,
								1327,
								429,
								430,
								431,
								432,
								433,
								434,
								435,
								423,
								424
							]
						],
						[
							[
								1328
							]
						],
						[
							[
								1329
							]
						],
						[
							[
								436,
								1330
							]
						],
						[
							[
								437,
								1331
							]
						],
						[
							[
								1332
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Mandalsregionen",
						"ID": "3034 Mandalsregionen",
						"Nr": 3034
					}
				},
				{
					"arcs": [
						[
							[
								1333,
								1334,
								1335,
								-429,
								-428,
								-427,
								-426,
								439,
								440,
								441,
								442,
								443,
								438
							]
						],
						[
							[
								1336
							]
						],
						[
							[
								1337
							]
						],
						[
							[
								1338
							]
						],
						[
							[
								444,
								1339
							]
						],
						[
							[
								1340
							]
						],
						[
							[
								1341
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Kristiansandregionen",
						"ID": "3035 Kristiansandregionen",
						"Nr": 3035
					}
				},
				{
					"arcs": [
						[
							[
								1342,
								1343,
								-423,
								-422,
								-421,
								-420,
								447,
								448,
								449,
								445,
								446
							]
						],
						[
							[
								1344
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Dalane",
						"ID": "3036 Dalane",
						"Nr": 3036
					}
				},
				{
					"arcs": [
						[
							[
								-197,
								-196,
								1345,
								1346,
								-195,
								-417,
								1347,
								1348,
								1349,
								1350,
								1351,
								1352
							]
						],
						[
							[
								-416,
								1353,
								-418,
								-193,
								-171
							]
						],
						[
							[
								1354
							]
						],
						[
							[
								1355
							]
						],
						[
							[
								1356
							]
						],
						[
							[
								1357
							]
						],
						[
							[
								1358
							]
						],
						[
							[
								1359
							]
						],
						[
							[
								1360
							]
						],
						[
							[
								1361
							]
						],
						[
							[
								1362
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Haugesundregionen",
						"ID": "3037 Haugesundregionen",
						"Nr": 3037
					}
				},
				{
					"arcs": [
						[
							450,
							451,
							452,
							-154,
							-153,
							-152,
							-410,
							-409,
							-70,
							-69,
							-68
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Lillehammerregionen",
						"ID": "3016 Lillehammerregionen",
						"Nr": 3016
					}
				},
				{
					"arcs": [
						[
							453,
							454,
							455,
							-442,
							-441,
							-440,
							-425,
							-424,
							-436,
							-435,
							456,
							457,
							458,
							459,
							-413,
							-412,
							-411,
							-22,
							-21,
							-20,
							-19,
							-18
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Setesdal",
						"ID": "3031 Setesdal",
						"Nr": 3031
					}
				},
				{
					"arcs": [
						[
							[
								-439,
								-444,
								-443,
								-456,
								-455,
								-454,
								-17,
								-16,
								-15,
								-14,
								-239,
								-238,
								-237,
								1363,
								1364,
								1365,
								1366,
								1367,
								1368,
								1369,
								1370
							]
						],
						[
							[
								1371
							]
						],
						[
							[
								1372
							]
						],
						[
							[
								1373
							]
						],
						[
							[
								-445,
								1374
							]
						],
						[
							[
								1375
							]
						],
						[
							[
								1376
							]
						],
						[
							[
								1377
							]
						],
						[
							[
								1378
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Arendalregionen",
						"ID": "3032 Arendalregionen",
						"Nr": 3032
					}
				},
				{
					"arcs": [
						[
							-105,
							-293,
							-261,
							-260,
							-259,
							-146,
							-145,
							-348,
							-347,
							-346
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Hadeland",
						"ID": "3015 Hadeland",
						"Nr": 3015
					}
				},
				{
					"arcs": [
						[
							-9,
							-8,
							-7,
							-6,
							-349,
							-141,
							-140,
							-139,
							-453,
							-452,
							460,
							461,
							462,
							463,
							464
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Hamarregionen",
						"ID": "3012 Hamarregionen",
						"Nr": 3012
					}
				},
				{
					"arcs": [
						[
							[
								1379,
								-380,
								1380,
								1381,
								1382,
								1383,
								1384,
								1385,
								-284,
								-283,
								-282,
								-281,
								-215,
								-372,
								-371,
								-370,
								-369,
								-368
							]
						],
						[
							[
								1386
							]
						],
						[
							[
								1387
							]
						],
						[
							[
								1388
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Orkdalregionen",
						"ID": "3060 Orkdalregionen",
						"Nr": 3060
					}
				},
				{
					"arcs": [
						[
							[
								1389
							]
						],
						[
							[
								1390
							]
						],
						[
							[
								1391
							]
						],
						[
							[
								1392
							]
						],
						[
							[
								1393
							]
						],
						[
							[
								-385,
								-384,
								-363,
								1394,
								1395,
								1396,
								1397
							]
						],
						[
							[
								1398
							]
						],
						[
							[
								1399
							]
						],
						[
							[
								1400
							]
						],
						[
							[
								1401
							]
						],
						[
							[
								1402
							]
						],
						[
							[
								1403
							]
						],
						[
							[
								1404
							]
						],
						[
							[
								1405
							]
						],
						[
							[
								1406
							]
						],
						[
							[
								1407
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Ålesundregionen",
						"ID": "3056 Ålesundregionen",
						"Nr": 3056
					}
				},
				{
					"arcs": [
						[
							-465,
							-464,
							-463,
							-462,
							-461,
							-451,
							-67,
							-66,
							465,
							466,
							467,
							468,
							469,
							470,
							471,
							472,
							-288,
							1408,
							1409,
							-11,
							-10
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Sør Østerdal",
						"ID": "3013 Sør Østerdal",
						"Nr": 3013
					}
				},
				{
					"arcs": [
						[
							[
								-434,
								-433,
								-432,
								-431,
								-430,
								1410,
								-438,
								1411,
								1412,
								1413,
								1414,
								1415,
								1416,
								-447,
								-446,
								-450,
								-449,
								-448,
								-419,
								-414,
								-460,
								-459,
								-458,
								-457
							]
						],
						[
							[
								-437,
								1417
							]
						],
						[
							[
								1418
							]
						],
						[
							[
								1419
							]
						],
						[
							[
								1420
							]
						],
						[
							[
								1421
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Lister",
						"ID": "3033 Lister",
						"Nr": 3033
					}
				},
				{
					"arcs": [
						[
							-280,
							-279,
							-290,
							-289,
							-473,
							-472,
							-471,
							-470,
							-469,
							-468,
							-467,
							-466,
							-76,
							-405,
							-404,
							-219,
							-218,
							-217
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Fjellregionen",
						"ID": "3010 Fjellregionen",
						"Nr": 3010
					}
				},
				{
					"arcs": [
						[
							[
								-322,
								1422,
								-206,
								1423,
								-205,
								1424,
								-204
							]
						],
						[
							[
								-321,
								-130,
								1425
							]
						],
						[
							[
								1426,
								1427,
								-208,
								-207
							]
						],
						[
							[
								1428
							]
						],
						[
							[
								1429
							]
						],
						[
							[
								1430
							]
						],
						[
							[
								1431
							]
						],
						[
							[
								1432
							]
						],
						[
							[
								1433
							]
						],
						[
							[
								1434
							]
						],
						[
							[
								1435
							]
						],
						[
							[
								1436
							]
						],
						[
							[
								1437
							]
						],
						[
							[
								1438
							]
						],
						[
							[
								1439
							]
						],
						[
							[
								1440
							]
						],
						[
							[
								1441
							]
						],
						[
							[
								1442
							]
						],
						[
							[
								1443
							]
						],
						[
							[
								1444
							]
						],
						[
							[
								1445
							]
						],
						[
							[
								1446
							]
						],
						[
							[
								1447
							]
						],
						[
							[
								1448
							]
						],
						[
							[
								1449
							]
						],
						[
							[
								1450
							]
						],
						[
							[
								1451
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Kystgruppen",
						"ID": "3066 Kystgruppen",
						"Nr": 3066
					}
				}
			]
		},
		"kommune": {
			"type": "GeometryCollection",
			"geometries": [
				{
					"arcs": [
						[
							1452,
							1279
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 40961.32259860001,
						"Shape_Area": 90481276.929,
						"Sted": "Randaberg",
						"ID": "1127 Randaberg",
						"Rnr": 3039,
						"Region": "Stavangerregionen",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1127
					}
				},
				{
					"arcs": [
						[
							[
								1453,
								1283
							]
						],
						[
							[
								1285
							]
						],
						[
							[
								1286
							]
						],
						[
							[
								1287
							]
						],
						[
							[
								1288
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 61753.3443632,
						"Shape_Area": 215380826.064,
						"Sted": "Rennesøy",
						"ID": "1142 Rennesøy",
						"Rnr": 3039,
						"Region": "Stavangerregionen",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1142
					}
				},
				{
					"arcs": [
						[
							[
								1454,
								1350,
								1455,
								1456,
								-196,
								1345
							]
						],
						[
							[
								1457,
								1348
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 126113.890387,
						"Shape_Area": 638105258.809,
						"Sted": "Tysvær",
						"ID": "1146 Tysvær",
						"Rnr": 3037,
						"Region": "Haugesundregionen",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1146
					}
				},
				{
					"arcs": [
						[
							[
								-167,
								648
							]
						],
						[
							[
								1458,
								649,
								1459,
								651,
								1460,
								653
							]
						],
						[
							[
								655
							]
						],
						[
							[
								656
							]
						],
						[
							[
								657
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 135631.682393,
						"Shape_Area": 773220232.221,
						"Sted": "Fjell",
						"ID": "1246 Fjell",
						"Rnr": 3047,
						"Region": "Hordaland Vest",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1246
					}
				},
				{
					"arcs": [
						[
							[
								165,
								-161,
								-160,
								575
							]
						],
						[
							[
								166,
								576
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 126376.260211,
						"Shape_Area": 573915148.999,
						"Sted": "Bergen",
						"ID": "1201 Bergen",
						"Rnr": 3040,
						"Region": "Bergen",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1201
					}
				},
				{
					"arcs": [
						[
							626
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 90730.6652039,
						"Shape_Area": 469437219.022,
						"Sted": "Fedje",
						"ID": "1265 Fedje",
						"Rnr": 3044,
						"Region": "Nordhordland",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1265
					}
				},
				{
					"arcs": [
						[
							[
								1461,
								628
							]
						],
						[
							[
								1462,
								631
							]
						],
						[
							[
								1463,
								633
							]
						],
						[
							[
								635
							]
						],
						[
							[
								636
							]
						],
						[
							[
								637
							]
						],
						[
							[
								638
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 62539.4689289,
						"Shape_Area": 166290519.044,
						"Sted": "Austrheim",
						"ID": "1264 Austrheim",
						"Rnr": 3044,
						"Region": "Nordhordland",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1264
					}
				},
				{
					"arcs": [
						[
							[
								-388,
								1464,
								1295,
								-400
							]
						],
						[
							[
								1296
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 132713.994081,
						"Shape_Area": 489260555.424,
						"Sted": "Fjaler",
						"ID": "1429 Fjaler",
						"Rnr": 3048,
						"Region": "HAFS",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1429
					}
				},
				{
					"arcs": [
						[
							423,
							1465,
							1466,
							430,
							431,
							1467
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 104054.502804,
						"Shape_Area": 253572918.793,
						"Sted": "Audnedal",
						"ID": "1027 Audnedal",
						"Rnr": 3034,
						"Region": "Mandalsregionen",
						"Fnr": 10,
						"Fylke": "Vest-Agder",
						"Nr": 1027
					}
				},
				{
					"arcs": [
						[
							[
								428,
								1326,
								1468,
								1469
							]
						],
						[
							[
								1328
							]
						],
						[
							[
								1329
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 146840.676849,
						"Shape_Area": 1100512017.38,
						"Sted": "Mandal",
						"ID": "1002 Mandal",
						"Rnr": 3034,
						"Region": "Mandalsregionen",
						"Fnr": 10,
						"Fylke": "Vest-Agder",
						"Nr": 1002
					}
				},
				{
					"arcs": [
						[
							453,
							454,
							1470,
							-435,
							456,
							457,
							1471,
							-18
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 199148.50608,
						"Shape_Area": 1317971172.9,
						"Sted": "Bygland",
						"ID": "0938 Bygland",
						"Rnr": 3031,
						"Region": "Setesdal",
						"Fnr": 9,
						"Fylke": "Aust-Agder",
						"Nr": 938
					}
				},
				{
					"arcs": [
						[
							-416,
							1353,
							-418,
							-193,
							-171
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 101795.617244,
						"Shape_Area": 573301092.152,
						"Sted": "Sauda",
						"ID": "1135 Sauda",
						"Rnr": 3037,
						"Region": "Haugesundregionen",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1135
					}
				},
				{
					"arcs": [
						[
							[
								1472,
								1155
							]
						],
						[
							[
								1473,
								1157,
								1474,
								1159
							]
						],
						[
							[
								1161
							]
						],
						[
							[
								1162
							]
						],
						[
							[
								1163
							]
						],
						[
							[
								1164
							]
						],
						[
							[
								1165
							]
						],
						[
							[
								1166
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 162852.358473,
						"Shape_Area": 1198290872.2,
						"Sted": "Herøy",
						"ID": "1515 Herøy",
						"Rnr": 3055,
						"Region": "Søre Sunnmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1515
					}
				},
				{
					"arcs": [
						[
							1475,
							1476,
							1477,
							1478,
							-426,
							439
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 122574.227536,
						"Shape_Area": 381648951.397,
						"Sted": "Vennesla",
						"ID": "1014 Vennesla",
						"Rnr": 3035,
						"Region": "Kristiansandregionen",
						"Fnr": 10,
						"Fylke": "Vest-Agder",
						"Nr": 1014
					}
				},
				{
					"arcs": [
						[
							455,
							-442,
							-441,
							-440,
							-425,
							-424,
							-436,
							-1471
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 121965.244998,
						"Shape_Area": 554768988.989,
						"Sted": "Evje og Hornnes",
						"ID": "0937 Evje og Hornnes",
						"Rnr": 3031,
						"Region": "Setesdal",
						"Fnr": 9,
						"Fylke": "Aust-Agder",
						"Nr": 937
					}
				},
				{
					"arcs": [
						[
							[
								1479,
								1210,
								1480
							]
						],
						[
							[
								1212
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 132406.877063,
						"Shape_Area": 466029810.404,
						"Sted": "Aukra",
						"ID": "1547 Aukra",
						"Rnr": 3053,
						"Region": "Romsdal",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1547
					}
				},
				{
					"arcs": [
						[
							1481,
							1482,
							1483,
							-15,
							1484
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 79754.4173367,
						"Shape_Area": 358789435.527,
						"Sted": "Vegårshei",
						"ID": "0912 Vegårshei",
						"Rnr": 3032,
						"Region": "Arendalregionen",
						"Fnr": 9,
						"Fylke": "Aust-Agder",
						"Nr": 912
					}
				},
				{
					"arcs": [
						[
							-230,
							1485,
							1486,
							1487,
							238,
							-13,
							-12
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 161759.599968,
						"Shape_Area": 1065611596.3,
						"Sted": "Drangedal",
						"ID": "0817 Drangedal",
						"Rnr": 3027,
						"Region": "Grenland",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 817
					}
				},
				{
					"arcs": [
						[
							270,
							1488,
							-223,
							-222,
							1489,
							-268
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 106390.13537,
						"Shape_Area": 565464124.331,
						"Sted": "Flesberg",
						"ID": "0631 Flesberg",
						"Rnr": 3022,
						"Region": "Kongsberg/Numedal",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 631
					}
				},
				{
					"arcs": [
						[
							-266,
							284,
							1490,
							-249,
							-272,
							-271,
							-267
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 115826.690192,
						"Shape_Area": 457984141.72,
						"Sted": "Øvre Eiker",
						"ID": "0624 Øvre Eiker",
						"Rnr": 3020,
						"Region": "Drammensregionen",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 624
					}
				},
				{
					"arcs": [
						[
							-69,
							1491,
							1492,
							-152,
							-410,
							-409,
							-70
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 161809.565805,
						"Shape_Area": 1191320906.36,
						"Sted": "Gausdal",
						"ID": "0522 Gausdal",
						"Rnr": 3016,
						"Region": "Lillehammerregionen",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 522
					}
				},
				{
					"arcs": [
						[
							[
								1493,
								764
							]
						],
						[
							[
								1494,
								766
							]
						],
						[
							[
								772
							]
						],
						[
							[
								773
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 117074.323398,
						"Shape_Area": 657654137.017,
						"Sted": "Tjøme",
						"ID": "0723 Tjøme",
						"Rnr": 3025,
						"Region": "Tønsbergregionen",
						"Fnr": 7,
						"Fylke": "Vestfold",
						"Nr": 723
					}
				},
				{
					"arcs": [
						[
							[
								-93,
								-92,
								562,
								1495,
								1496
							]
						],
						[
							[
								565
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 78173.9684092,
						"Shape_Area": 158249578.831,
						"Sted": "Råde",
						"ID": "0135 Råde",
						"Rnr": 3003,
						"Region": "Mosseregionen",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 135
					}
				},
				{
					"arcs": [
						[
							[
								91,
								1497,
								519
							]
						],
						[
							[
								520
							]
						],
						[
							[
								521
							]
						],
						[
							[
								522
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 124450.37217,
						"Shape_Area": 561428767.097,
						"Sted": "Fredrikstad",
						"ID": "0106 Fredrikstad",
						"Rnr": 3004,
						"Region": "Nedre Glomma",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 106
					}
				},
				{
					"arcs": [
						[
							297,
							298,
							1498,
							839,
							-287,
							-286,
							-285,
							-265,
							-254
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 80596.2912722,
						"Shape_Area": 309956167.534,
						"Sted": "Lier",
						"ID": "0626 Lier",
						"Rnr": 3086,
						"Region": "Vestviken",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 626
					}
				},
				{
					"arcs": [
						[
							116,
							117,
							118,
							533,
							1499,
							1500
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 59847.5173818,
						"Shape_Area": 151973719.673,
						"Sted": "Vestby",
						"ID": "0211 Vestby",
						"Rnr": 3006,
						"Region": "Follo",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 211
					}
				},
				{
					"arcs": [
						[
							1501,
							1502,
							-95,
							-157,
							1503,
							1504
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 42458.4876763,
						"Shape_Area": 101154844.497,
						"Sted": "Skiptvet",
						"ID": "0127 Skiptvet",
						"Rnr": 3002,
						"Region": "Indre Østfold",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 127
					}
				},
				{
					"arcs": [
						[
							1505,
							97,
							98,
							1506,
							1507,
							1508
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 79066.8287322,
						"Shape_Area": 179026469.682,
						"Sted": "Fet",
						"ID": "0227 Fet",
						"Rnr": 3007,
						"Region": "Nedre Romerike",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 227
					}
				},
				{
					"arcs": [
						[
							138,
							1509,
							1510,
							1511,
							1512,
							153
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 113398.204176,
						"Shape_Area": 672683434.903,
						"Sted": "Gjøvik",
						"ID": "0502 Gjøvik",
						"Rnr": 3014,
						"Region": "Gjøvikregionen",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 502
					}
				},
				{
					"arcs": [
						[
							1513,
							143,
							144,
							1514,
							-1511
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 87518.8405072,
						"Shape_Area": 248059700.289,
						"Sted": "Vestre Toten",
						"ID": "0529 Vestre Toten",
						"Rnr": 3014,
						"Region": "Gjøvikregionen",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 529
					}
				},
				{
					"arcs": [
						[
							-346,
							-105,
							-293,
							-261,
							1515,
							1516
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 84450.2617275,
						"Shape_Area": 292803583.238,
						"Sted": "Lunner",
						"ID": "0533 Lunner",
						"Rnr": 3015,
						"Region": "Hadeland",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 533
					}
				},
				{
					"arcs": [
						[
							140,
							141,
							142,
							-1514,
							-1510,
							139
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 102595.745303,
						"Shape_Area": 566821724.856,
						"Sted": "Østre Toten",
						"ID": "0528 Østre Toten",
						"Rnr": 3014,
						"Region": "Gjøvikregionen",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 528
					}
				},
				{
					"arcs": [
						[
							461,
							1517,
							1518,
							-140,
							-139,
							-453,
							-452,
							460
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 178278.261896,
						"Shape_Area": 1272923956.79,
						"Sted": "Ringsaker",
						"ID": "0412 Ringsaker",
						"Rnr": 3012,
						"Region": "Hamarregionen",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 412
					}
				},
				{
					"arcs": [
						[
							451,
							1519,
							-1492,
							-68,
							450
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 111300.1552,
						"Shape_Area": 640388304.48,
						"Sted": "Øyer",
						"ID": "0521 Øyer",
						"Rnr": 3016,
						"Region": "Lillehammerregionen",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 521
					}
				},
				{
					"arcs": [
						[
							[
								1520,
								1521,
								1384
							]
						],
						[
							[
								1522,
								1382
							]
						],
						[
							[
								1386
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 116988.843254,
						"Shape_Area": 461432703.521,
						"Sted": "Agdenes",
						"ID": "1622 Agdenes",
						"Rnr": 3060,
						"Region": "Orkdalregionen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1622
					}
				},
				{
					"arcs": [
						[
							-35,
							1523,
							1126,
							1524,
							1525
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 132844.402907,
						"Shape_Area": 765742214.366,
						"Sted": "Rissa",
						"ID": "1624 Rissa",
						"Rnr": 3057,
						"Region": "Fosen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1624
					}
				},
				{
					"arcs": [
						[
							272,
							1526,
							1527,
							792
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 77708.1872948,
						"Shape_Area": 232134483.458,
						"Sted": "Malvik",
						"ID": "1663 Malvik",
						"Rnr": 3061,
						"Region": "Trondheimsregionen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1663
					}
				},
				{
					"arcs": [
						[
							[
								-1525,
								1127,
								1528,
								1129,
								1529
							]
						],
						[
							[
								1134
							]
						],
						[
							[
								1135
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 153759.718782,
						"Shape_Area": 1171239805.54,
						"Sted": "Bjugn",
						"ID": "1627 Bjugn",
						"Rnr": 3057,
						"Region": "Fosen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1627
					}
				},
				{
					"arcs": [
						[
							569,
							157,
							1530,
							1531
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 84996.8081571,
						"Shape_Area": 318324305.956,
						"Sted": "Aremark",
						"ID": "0118 Aremark",
						"Rnr": 3002,
						"Region": "Indre Østfold",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 118
					}
				},
				{
					"arcs": [
						[
							464,
							-9,
							1532,
							1533,
							463
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 110337.14455,
						"Shape_Area": 370696043.325,
						"Sted": "Løten",
						"ID": "0415 Løten",
						"Rnr": 3012,
						"Region": "Hamarregionen",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 415
					}
				},
				{
					"arcs": [
						[
							-10,
							-465,
							1534,
							1535
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 179217.418889,
						"Shape_Area": 1232703915.85,
						"Sted": "Elverum",
						"ID": "0427 Elverum",
						"Rnr": 3013,
						"Region": "Sør Østerdal",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 427
					}
				},
				{
					"arcs": [
						[
							475,
							1536,
							1537,
							1538,
							1539
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 165693.589476,
						"Shape_Area": 835573876.279,
						"Sted": "Grue",
						"ID": "0423 Grue",
						"Rnr": 3011,
						"Region": "Glåmdal",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 423
					}
				},
				{
					"arcs": [
						[
							1058
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 176799.563224,
						"Shape_Area": 1785235325.06,
						"Sted": "Værøy",
						"ID": "1857 Værøy",
						"Rnr": 3075,
						"Region": "Lofoten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1857
					}
				},
				{
					"arcs": [
						[
							989,
							1540,
							992,
							1541,
							994,
							-336,
							-338,
							342,
							343,
							344
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 369955.94295,
						"Shape_Area": 4585922508.44,
						"Sted": "Rana",
						"ID": "1833 Rana",
						"Rnr": 3072,
						"Region": "Ranaregionen",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1833
					}
				},
				{
					"arcs": [
						[
							[
								1542,
								1059
							]
						],
						[
							[
								1061
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 165683.469361,
						"Shape_Area": 1178172893.43,
						"Sted": "Flakstad",
						"ID": "1859 Flakstad",
						"Rnr": 3075,
						"Region": "Lofoten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1859
					}
				},
				{
					"arcs": [
						[
							1543,
							1073,
							1544
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 175028.004613,
						"Shape_Area": 1823984964.17,
						"Sted": "Bø",
						"ID": "1867 Bø",
						"Rnr": 3076,
						"Region": "Vesterålen",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1867
					}
				},
				{
					"arcs": [
						[
							[
								1545,
								-351,
								1082,
								1546
							]
						],
						[
							[
								-350,
								1087
							]
						],
						[
							[
								1547,
								1076
							]
						],
						[
							[
								1088
							]
						],
						[
							[
								1089
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 160069.935953,
						"Shape_Area": 1182392197.9,
						"Sted": "Hadsel",
						"ID": "1866 Hadsel",
						"Rnr": 3076,
						"Region": "Vesterålen",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1866
					}
				},
				{
					"arcs": [
						[
							[
								-333,
								1086,
								-352,
								-1546,
								1548,
								353
							]
						],
						[
							[
								1090
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 188733.62148,
						"Shape_Area": 1042108758.14,
						"Sted": "Lødingen",
						"ID": "1851 Lødingen",
						"Rnr": 3076,
						"Region": "Vesterålen",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1851
					}
				},
				{
					"arcs": [
						[
							[
								1549,
								1084
							]
						],
						[
							[
								1091
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 244954.712708,
						"Shape_Area": 2789258295.96,
						"Sted": "Andøy",
						"ID": "1871 Andøy",
						"Rnr": 3076,
						"Region": "Vesterålen",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1871
					}
				},
				{
					"arcs": [
						[
							[
								293,
								294,
								1550,
								803
							]
						],
						[
							[
								1551,
								801
							]
						],
						[
							[
								1552,
								804
							]
						],
						[
							[
								1553,
								806
							]
						],
						[
							[
								808
							]
						],
						[
							[
								809
							]
						],
						[
							[
								810
							]
						],
						[
							[
								811
							]
						],
						[
							[
								812
							]
						],
						[
							[
								813
							]
						],
						[
							[
								814
							]
						],
						[
							[
								815
							]
						],
						[
							[
								816
							]
						],
						[
							[
								817
							]
						],
						[
							[
								818
							]
						],
						[
							[
								819
							]
						],
						[
							[
								820
							]
						],
						[
							[
								821
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 390517.473004,
						"Shape_Area": 5292576958.4,
						"Sted": "Tromsø",
						"ID": "1902 Tromsø",
						"Rnr": 3079,
						"Region": "Tromsøregionen",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1902
					}
				},
				{
					"arcs": [
						[
							1554,
							1555,
							1556,
							899
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 218751.577097,
						"Shape_Area": 2828504177.47,
						"Sted": "Båtsfjord",
						"ID": "2028 Båtsfjord",
						"Rnr": 3083,
						"Region": "Øst-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2028
					}
				},
				{
					"arcs": [
						[
							1557,
							421,
							422,
							1273,
							1558
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 141802.930551,
						"Shape_Area": 1067816160.03,
						"Sted": "Hå",
						"ID": "1119 Hå",
						"Rnr": 3039,
						"Region": "Stavangerregionen",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1119
					}
				},
				{
					"arcs": [
						[
							1354
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 113530.994802,
						"Shape_Area": 863803612.243,
						"Sted": "Utsira",
						"ID": "1151 Utsira",
						"Rnr": 3037,
						"Region": "Haugesundregionen",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1151
					}
				},
				{
					"arcs": [
						[
							[
								668
							]
						],
						[
							[
								669
							]
						],
						[
							[
								670
							]
						],
						[
							[
								671
							]
						],
						[
							[
								672
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 126272.502433,
						"Shape_Area": 956663053.82,
						"Sted": "Austevoll",
						"ID": "1244 Austevoll",
						"Rnr": 3046,
						"Region": "Sunnhordland",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1244
					}
				},
				{
					"arcs": [
						[
							[
								159,
								1559,
								572
							]
						],
						[
							[
								573
							]
						],
						[
							[
								574
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 76477.1581753,
						"Shape_Area": 246592715.115,
						"Sted": "Os",
						"ID": "1243 Os",
						"Rnr": 3041,
						"Region": "Bjørnefjorden",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1243
					}
				},
				{
					"arcs": [
						[
							[
								1560,
								639
							]
						],
						[
							[
								1561,
								641
							]
						],
						[
							[
								643
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 72733.6849525,
						"Shape_Area": 210102760.062,
						"Sted": "Radøy",
						"ID": "1260 Radøy",
						"Rnr": 3044,
						"Region": "Nordhordland",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1260
					}
				},
				{
					"arcs": [
						[
							[
								-387,
								1294,
								-1465
							]
						],
						[
							[
								1297
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 93637.3151426,
						"Shape_Area": 387737070.962,
						"Sted": "Hyllestad",
						"ID": "1413 Hyllestad",
						"Rnr": 3048,
						"Region": "HAFS",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1413
					}
				},
				{
					"arcs": [
						[
							[
								76,
								1562,
								509,
								1563
							]
						],
						[
							[
								511
							]
						],
						[
							[
								512
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 157368.598353,
						"Shape_Area": 827023144.571,
						"Sted": "Vågsøy",
						"ID": "1439 Vågsøy",
						"Rnr": 3049,
						"Region": "Nordfjord",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1439
					}
				},
				{
					"arcs": [
						[
							-19,
							-1472,
							458,
							1564,
							-20
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 183060.332045,
						"Shape_Area": 1265032924.26,
						"Sted": "Valle",
						"ID": "0940 Valle",
						"Rnr": 3031,
						"Region": "Setesdal",
						"Fnr": 9,
						"Fylke": "Aust-Agder",
						"Nr": 940
					}
				},
				{
					"arcs": [
						[
							-24,
							169,
							170,
							171,
							172,
							1565,
							613,
							1566
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 197148.205105,
						"Shape_Area": 1628853603.73,
						"Sted": "Odda",
						"ID": "1228 Odda",
						"Rnr": 3042,
						"Region": "Hardanger",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1228
					}
				},
				{
					"arcs": [
						[
							180,
							-47,
							1567,
							616,
							1568,
							1569,
							179
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 164254.233069,
						"Shape_Area": 749980211.988,
						"Sted": "Ulvik",
						"ID": "1233 Ulvik",
						"Rnr": 3042,
						"Region": "Hardanger",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1233
					}
				},
				{
					"arcs": [
						[
							-80,
							-79,
							1570,
							1168,
							1571
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 146096.125311,
						"Shape_Area": 662512238.689,
						"Sted": "Volda",
						"ID": "1519 Volda",
						"Rnr": 3055,
						"Region": "Søre Sunnmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1519
					}
				},
				{
					"arcs": [
						[
							83,
							84,
							85,
							1572,
							507,
							1573,
							1574,
							82
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 195093.425934,
						"Shape_Area": 1463001262.87,
						"Sted": "Stryn",
						"ID": "1449 Stryn",
						"Rnr": 3049,
						"Region": "Nordfjord",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1449
					}
				},
				{
					"arcs": [
						[
							425,
							426,
							427,
							-1470,
							1575,
							-1466,
							424
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 126209.042041,
						"Shape_Area": 394166872.943,
						"Sted": "Marnardal",
						"ID": "1021 Marnardal",
						"Rnr": 3034,
						"Region": "Mandalsregionen",
						"Fnr": 10,
						"Fylke": "Vest-Agder",
						"Nr": 1021
					}
				},
				{
					"arcs": [
						[
							[
								1576,
								1334,
								1577,
								1578,
								-1478,
								1579
							]
						],
						[
							[
								1336
							]
						],
						[
							[
								1337
							]
						],
						[
							[
								1338
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 145368.079309,
						"Shape_Area": 781425055.58,
						"Sted": "Kristiansand",
						"ID": "1001 Kristiansand",
						"Rnr": 3035,
						"Region": "Kristiansandregionen",
						"Fnr": 10,
						"Fylke": "Vest-Agder",
						"Nr": 1001
					}
				},
				{
					"arcs": [
						[
							1580,
							1581,
							1582,
							-443,
							-456,
							-455,
							1583
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 178638.301579,
						"Shape_Area": 645672461.81,
						"Sted": "Froland",
						"ID": "0919 Froland",
						"Rnr": 3032,
						"Region": "Arendalregionen",
						"Fnr": 9,
						"Fylke": "Aust-Agder",
						"Nr": 919
					}
				},
				{
					"arcs": [
						[
							31,
							11,
							1584,
							1585,
							1586,
							1587
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 158086.486938,
						"Shape_Area": 712812644.652,
						"Sted": "Kviteseid",
						"ID": "0829 Kviteseid",
						"Rnr": 3030,
						"Region": "Vest-Telemark",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 829
					}
				},
				{
					"arcs": [
						[
							1588,
							-29,
							1589
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 129322.368538,
						"Shape_Area": 793689685.475,
						"Sted": "Hjartdal",
						"ID": "0827 Hjartdal",
						"Rnr": 3029,
						"Region": "Øst-Telemark",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 827
					}
				},
				{
					"arcs": [
						[
							220,
							221,
							1590,
							-1590,
							-28,
							-27,
							219
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 246844.269719,
						"Shape_Area": 2053310488.77,
						"Sted": "Tinn",
						"ID": "0826 Tinn",
						"Rnr": 3029,
						"Region": "Øst-Telemark",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 826
					}
				},
				{
					"arcs": [
						[
							-46,
							181,
							1591,
							615,
							-1568
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 192055.58572,
						"Shape_Area": 1522868126.17,
						"Sted": "Eidfjord",
						"ID": "1232 Eidfjord",
						"Rnr": 3042,
						"Region": "Hardanger",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1232
					}
				},
				{
					"arcs": [
						[
							1592,
							1593,
							1594,
							63,
							1595,
							49
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 200239.044743,
						"Shape_Area": 1172546212.42,
						"Sted": "Ål",
						"ID": "0619 Ål",
						"Rnr": 3021,
						"Region": "Hallingdal",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 619
					}
				},
				{
					"arcs": [
						[
							-51,
							-50,
							-49,
							1596,
							1224,
							1597,
							398
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 222790.739134,
						"Shape_Area": 1411752300.24,
						"Sted": "Lærdal",
						"ID": "1422 Lærdal",
						"Rnr": 3050,
						"Region": "Sogn",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1422
					}
				},
				{
					"arcs": [
						[
							52,
							53,
							1598,
							-1593,
							50,
							51
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 147821.330637,
						"Shape_Area": 756297937.65,
						"Sted": "Hemsedal",
						"ID": "0618 Hemsedal",
						"Rnr": 3021,
						"Region": "Hallingdal",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 618
					}
				},
				{
					"arcs": [
						[
							381,
							382,
							-367,
							-366,
							1599,
							1207,
							1600
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 228144.425293,
						"Shape_Area": 1640692678.22,
						"Sted": "Rauma",
						"ID": "1539 Rauma",
						"Rnr": 3053,
						"Region": "Romsdal",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1539
					}
				},
				{
					"arcs": [
						[
							[
								1175
							]
						],
						[
							[
								1176
							]
						],
						[
							[
								1177
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 144713.62257,
						"Shape_Area": 669299373.139,
						"Sted": "Kristiansund",
						"ID": "1505 Kristiansund",
						"Rnr": 3052,
						"Region": "Nordmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1505
					}
				},
				{
					"arcs": [
						[
							[
								1178
							]
						],
						[
							[
								1179
							]
						],
						[
							[
								1180
							]
						],
						[
							[
								1181
							]
						],
						[
							[
								1182
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 182097.28373,
						"Shape_Area": 2156977466.45,
						"Sted": "Smøla",
						"ID": "1573 Smøla",
						"Rnr": 3052,
						"Region": "Nordmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1573
					}
				},
				{
					"arcs": [
						[
							[
								1601,
								1368
							]
						],
						[
							[
								1602,
								-1581,
								1603,
								-1483,
								1604,
								1366
							]
						],
						[
							[
								1605,
								1364
							]
						],
						[
							[
								1371
							]
						],
						[
							[
								1372
							]
						],
						[
							[
								1373
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 133469.081691,
						"Shape_Area": 610946535.905,
						"Sted": "Tvedestrand",
						"ID": "0914 Tvedestrand",
						"Rnr": 3032,
						"Region": "Arendalregionen",
						"Fnr": 9,
						"Fylke": "Aust-Agder",
						"Nr": 914
					}
				},
				{
					"arcs": [
						[
							-238,
							1606,
							-1485,
							-14,
							-239
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 85925.9172178,
						"Shape_Area": 322518447.816,
						"Sted": "Gjerstad",
						"ID": "0911 Gjerstad",
						"Rnr": 3032,
						"Region": "Arendalregionen",
						"Fnr": 9,
						"Fylke": "Aust-Agder",
						"Nr": 911
					}
				},
				{
					"arcs": [
						[
							1607,
							1608,
							743,
							1609,
							-1486,
							-229,
							-228,
							230
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 163719.003312,
						"Shape_Area": 790169038.481,
						"Sted": "Skien",
						"ID": "0806 Skien",
						"Rnr": 3027,
						"Region": "Grenland",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 806
					}
				},
				{
					"arcs": [
						[
							-255,
							264,
							265,
							1610,
							1611,
							-256
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 129284.172876,
						"Shape_Area": 511392299.904,
						"Sted": "Modum",
						"ID": "0623 Modum",
						"Rnr": 3023,
						"Region": "Midt-Buskerud",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 623
					}
				},
				{
					"arcs": [
						[
							54,
							55,
							1612,
							-1594,
							-1599
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 101500.603663,
						"Shape_Area": 534810969.477,
						"Sted": "Gol",
						"ID": "0617 Gol",
						"Rnr": 3021,
						"Region": "Hallingdal",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 617
					}
				},
				{
					"arcs": [
						[
							58,
							59,
							60,
							61,
							1613,
							57
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 127567.335398,
						"Shape_Area": 705163900.151,
						"Sted": "Flå",
						"ID": "0615 Flå",
						"Rnr": 3021,
						"Region": "Hallingdal",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 615
					}
				},
				{
					"arcs": [
						[
							403,
							1614,
							1615,
							1616,
							-209
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 197107.671109,
						"Shape_Area": 1365799166.27,
						"Sted": "Dovre",
						"ID": "0511 Dovre",
						"Rnr": 3018,
						"Region": "Nord-Gudbrandsdal",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 511
					}
				},
				{
					"arcs": [
						[
							1617,
							1184
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 117539.118151,
						"Shape_Area": 506480379.614,
						"Sted": "Tingvoll",
						"ID": "1560 Tingvoll",
						"Rnr": 3052,
						"Region": "Nordmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1560
					}
				},
				{
					"arcs": [
						[
							1618,
							-212,
							1619,
							1186,
							1620,
							368
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 199717.698379,
						"Shape_Area": 1453820258.85,
						"Sted": "Surnadal",
						"ID": "1566 Surnadal",
						"Rnr": 3052,
						"Region": "Nordmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1566
					}
				},
				{
					"arcs": [
						[
							[
								1621,
								1622,
								1381,
								-1523,
								1383,
								-1522
							]
						],
						[
							[
								1387
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 108727.265137,
						"Shape_Area": 650954937.05,
						"Sted": "Snillfjord",
						"ID": "1613 Snillfjord",
						"Rnr": 3060,
						"Region": "Orkdalregionen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1613
					}
				},
				{
					"arcs": [
						[
							[
								478
							]
						],
						[
							[
								479
							]
						],
						[
							[
								480
							]
						],
						[
							[
								481
							]
						],
						[
							[
								482
							]
						],
						[
							[
								483
							]
						],
						[
							[
								484
							]
						],
						[
							[
								485
							]
						],
						[
							[
								486
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 310127.255105,
						"Shape_Area": 5293378816.93,
						"Sted": "Frøya",
						"ID": "1620 Frøya",
						"Rnr": 3058,
						"Region": "Hitra/Frøya",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1620
					}
				},
				{
					"arcs": [
						[
							[
								1623,
								774
							]
						],
						[
							[
								1624,
								781,
								1625,
								1626,
								1627,
								779
							]
						],
						[
							[
								1628,
								770
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 64785.2191791,
						"Shape_Area": 161708480.285,
						"Sted": "Tønsberg",
						"ID": "0704 Tønsberg",
						"Rnr": 3025,
						"Region": "Tønsbergregionen",
						"Fnr": 7,
						"Fylke": "Vestfold",
						"Nr": 704
					}
				},
				{
					"arcs": [
						[
							1629,
							-1496,
							563,
							1630
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 54273.5187553,
						"Shape_Area": 128967672.888,
						"Sted": "Rygge",
						"ID": "0136 Rygge",
						"Rnr": 3003,
						"Region": "Mosseregionen",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 136
					}
				},
				{
					"arcs": [
						[
							251,
							1631,
							1632,
							-244,
							247,
							248,
							249,
							250
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 63360.6081394,
						"Shape_Area": 163323999.912,
						"Sted": "Hof",
						"ID": "0714 Hof",
						"Rnr": 3025,
						"Region": "Tønsbergregionen",
						"Fnr": 7,
						"Fylke": "Vestfold",
						"Nr": 714
					}
				},
				{
					"arcs": [
						[
							263,
							253,
							254,
							1633
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 67239.0026349,
						"Shape_Area": 198639003.055,
						"Sted": "Hole",
						"ID": "0612 Hole",
						"Rnr": 3024,
						"Region": "Ringerike/Hole",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 612
					}
				},
				{
					"arcs": [
						[
							-125,
							1634,
							-155,
							-117,
							-127,
							-126
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 77853.7135113,
						"Shape_Area": 141532791.582,
						"Sted": "Hobøl",
						"ID": "0138 Hobøl",
						"Rnr": 3002,
						"Region": "Indre Østfold",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 138
					}
				},
				{
					"arcs": [
						[
							122,
							123,
							124,
							1635,
							121,
							-101,
							-100,
							-99
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 71976.4772467,
						"Shape_Area": 231790390.519,
						"Sted": "Enebakk",
						"ID": "0229 Enebakk",
						"Rnr": 3006,
						"Region": "Follo",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 229
					}
				},
				{
					"arcs": [
						[
							-116,
							1636,
							1637,
							1638,
							-123,
							-98
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 74400.7853148,
						"Shape_Area": 204940151.814,
						"Sted": "Trøgstad",
						"ID": "0122 Trøgstad",
						"Rnr": 3002,
						"Region": "Indre Østfold",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 122
					}
				},
				{
					"arcs": [
						[
							1639,
							1640,
							1641,
							-106,
							345,
							346,
							1642
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 84849.3223767,
						"Shape_Area": 342569233.496,
						"Sted": "Nannestad",
						"ID": "0238 Nannestad",
						"Rnr": 3008,
						"Region": "Øvre Romerike",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 238
					}
				},
				{
					"arcs": [
						[
							[
								1643,
								128,
								543
							]
						],
						[
							[
								137,
								549
							]
						],
						[
							[
								550
							]
						],
						[
							[
								551
							]
						],
						[
							[
								552
							]
						],
						[
							[
								553
							]
						],
						[
							[
								554
							]
						],
						[
							[
								555
							]
						],
						[
							[
								556
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 210332.568837,
						"Shape_Area": 1285751499.8,
						"Sted": "Flatanger",
						"ID": "1749 Flatanger",
						"Rnr": 3067,
						"Region": "Midtre Namdal",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1749
					}
				},
				{
					"arcs": [
						[
							1644,
							502,
							1645,
							33,
							34,
							35,
							36
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 148247.051164,
						"Shape_Area": 677419197.945,
						"Sted": "Verran",
						"ID": "1724 Verran",
						"Rnr": 3064,
						"Region": "Innherred",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1724
					}
				},
				{
					"arcs": [
						[
							477,
							0,
							1,
							1646,
							1647
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 116928.548198,
						"Shape_Area": 640422620.348,
						"Sted": "Eidskog",
						"ID": "0420 Eidskog",
						"Rnr": 3011,
						"Region": "Glåmdal",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 420
					}
				},
				{
					"arcs": [
						[
							476,
							-1648,
							1648,
							-1537
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 181307.450775,
						"Shape_Area": 1036715932.4,
						"Sted": "Kongsvinger",
						"ID": "0402 Kongsvinger",
						"Rnr": 3011,
						"Region": "Glåmdal",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 402
					}
				},
				{
					"arcs": [
						[
							[
								1649,
								707,
								1650
							]
						],
						[
							[
								1651,
								711
							]
						],
						[
							[
								1652,
								709
							]
						],
						[
							[
								714
							]
						],
						[
							[
								715
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 223059.303436,
						"Shape_Area": 788878293.679,
						"Sted": "Sømna",
						"ID": "1812 Sømna",
						"Rnr": 3068,
						"Region": "Sør-Helgeland",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1812
					}
				},
				{
					"arcs": [
						[
							[
								716
							]
						],
						[
							[
								717
							]
						],
						[
							[
								718
							]
						],
						[
							[
								719
							]
						],
						[
							[
								720
							]
						],
						[
							[
								721
							]
						],
						[
							[
								722
							]
						],
						[
							[
								723
							]
						],
						[
							[
								724
							]
						],
						[
							[
								725
							]
						],
						[
							[
								726
							]
						],
						[
							[
								727
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 246051.232999,
						"Shape_Area": 2920050477.47,
						"Sted": "Vega",
						"ID": "1815 Vega",
						"Rnr": 3068,
						"Region": "Sør-Helgeland",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1815
					}
				},
				{
					"arcs": [
						[
							[
								953
							]
						],
						[
							[
								954
							]
						],
						[
							[
								955
							]
						],
						[
							[
								956
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 166009.432382,
						"Shape_Area": 1789662316.39,
						"Sted": "Træna",
						"ID": "1835 Træna",
						"Rnr": 3070,
						"Region": "Ytre Helgeland",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1835
					}
				},
				{
					"arcs": [
						[
							[
								349,
								1062
							]
						],
						[
							[
								350,
								351,
								1063
							]
						],
						[
							[
								1064
							]
						],
						[
							[
								1065
							]
						],
						[
							[
								1066
							]
						],
						[
							[
								1067
							]
						],
						[
							[
								1068
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 261710.039942,
						"Shape_Area": 2088649606.25,
						"Sted": "Vågan",
						"ID": "1865 Vågan",
						"Rnr": 3075,
						"Region": "Lofoten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1865
					}
				},
				{
					"arcs": [
						[
							[
								1653,
								1014,
								1654
							]
						],
						[
							[
								1655,
								1012
							]
						],
						[
							[
								1016
							]
						],
						[
							[
								1017
							]
						],
						[
							[
								1018
							]
						],
						[
							[
								1019
							]
						],
						[
							[
								1020
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 289673.770171,
						"Shape_Area": 3479678169.84,
						"Sted": "Steigen",
						"ID": "1848 Steigen",
						"Rnr": 3073,
						"Region": "Salten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1848
					}
				},
				{
					"arcs": [
						[
							1656,
							-344,
							1657,
							1658,
							1005,
							1659,
							1660
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 181687.786367,
						"Shape_Area": 1237880523.73,
						"Sted": "Beiarn",
						"ID": "1839 Beiarn",
						"Rnr": 3073,
						"Region": "Salten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1839
					}
				},
				{
					"arcs": [
						[
							[
								1097
							]
						],
						[
							[
								1098
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 101308.637867,
						"Shape_Area": 592341199.961,
						"Sted": "Ibestad",
						"ID": "1917 Ibestad",
						"Rnr": 3077,
						"Region": "Sør-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1917
					}
				},
				{
					"arcs": [
						[
							1661,
							-330,
							1662,
							1100
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 96472.8305529,
						"Shape_Area": 374615015.659,
						"Sted": "Gratangen",
						"ID": "1919 Gratangen",
						"Rnr": 3077,
						"Region": "Sør-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1919
					}
				},
				{
					"arcs": [
						[
							[
								1663,
								1664,
								1665,
								1115
							]
						],
						[
							[
								1117
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 160720.446014,
						"Shape_Area": 935747860.204,
						"Sted": "Tranøy",
						"ID": "1927 Tranøy",
						"Rnr": 3078,
						"Region": "Midt-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1927
					}
				},
				{
					"arcs": [
						[
							884,
							310,
							-296,
							-295,
							1666,
							878,
							1667
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 190264.079845,
						"Shape_Area": 1601842114.24,
						"Sted": "Storfjord",
						"ID": "1939 Storfjord",
						"Rnr": 3080,
						"Region": "Nord-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1939
					}
				},
				{
					"arcs": [
						[
							1668,
							917,
							-313,
							-312,
							-305
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 515596.267746,
						"Shape_Area": 9719194411.19,
						"Sted": "Kautokeino",
						"ID": "2011 Kautokeino",
						"Rnr": 3082,
						"Region": "Midt-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2011
					}
				},
				{
					"arcs": [
						[
							[
								1669,
								1670,
								1671,
								-303,
								-302,
								-301,
								-308,
								912,
								-309
							]
						],
						[
							[
								918
							]
						],
						[
							[
								919
							]
						],
						[
							[
								920
							]
						],
						[
							[
								921
							]
						],
						[
							[
								922
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 339689.437637,
						"Shape_Area": 6016882935.91,
						"Sted": "Porsanger",
						"ID": "2020 Porsanger",
						"Rnr": 3082,
						"Region": "Midt-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2020
					}
				},
				{
					"arcs": [
						[
							[
								300,
								1672,
								844,
								1673
							]
						],
						[
							[
								846
							]
						],
						[
							[
								847
							]
						],
						[
							[
								848
							]
						],
						[
							[
								849
							]
						],
						[
							[
								850
							]
						],
						[
							[
								851
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 259956.061088,
						"Shape_Area": 3886119784.75,
						"Sted": "Måsøy",
						"ID": "2018 Måsøy",
						"Rnr": 3081,
						"Region": "Vest-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2018
					}
				},
				{
					"arcs": [
						[
							[
								1674,
								1277
							]
						],
						[
							[
								1675,
								1676,
								1677,
								1275
							]
						],
						[
							[
								1289
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 108269.7639,
						"Shape_Area": 569786015.611,
						"Sted": "Sola",
						"ID": "1124 Sola",
						"Rnr": 3039,
						"Region": "Stavangerregionen",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1124
					}
				},
				{
					"arcs": [
						[
							[
								1355
							]
						],
						[
							[
								1356
							]
						],
						[
							[
								1357
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 56531.0935424,
						"Shape_Area": 190288645.239,
						"Sted": "Bokn",
						"ID": "1145 Bokn",
						"Rnr": 3037,
						"Region": "Haugesundregionen",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1145
					}
				},
				{
					"arcs": [
						[
							[
								658
							]
						],
						[
							[
								659
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 78531.8804423,
						"Shape_Area": 220220970.245,
						"Sted": "Askøy",
						"ID": "1247 Askøy",
						"Rnr": 3047,
						"Region": "Hordaland Vest",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1247
					}
				},
				{
					"arcs": [
						[
							[
								1678,
								673
							]
						],
						[
							[
								675
							]
						],
						[
							[
								676
							]
						],
						[
							[
								677
							]
						],
						[
							[
								678
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 91695.2620376,
						"Shape_Area": 481848356.349,
						"Sted": "Tysnes",
						"ID": "1223 Tysnes",
						"Rnr": 3046,
						"Region": "Sunnhordland",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1223
					}
				},
				{
					"arcs": [
						[
							[
								1679,
								-186,
								627,
								-1462,
								629
							]
						],
						[
							[
								-1562,
								642
							]
						],
						[
							[
								-1561,
								640
							]
						],
						[
							[
								-1464,
								634,
								-1463,
								632
							]
						],
						[
							[
								644
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 162418.706363,
						"Shape_Area": 635957075.033,
						"Sted": "Lindås",
						"ID": "1263 Lindås",
						"Rnr": 3044,
						"Region": "Nordhordland",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1263
					}
				},
				{
					"arcs": [
						[
							[
								-89,
								1680,
								1237,
								-90
							]
						],
						[
							[
								1238
							]
						],
						[
							[
								1239
							]
						],
						[
							[
								1240
							]
						],
						[
							[
								1241
							]
						],
						[
							[
								1242
							]
						],
						[
							[
								1243
							]
						],
						[
							[
								1244
							]
						],
						[
							[
								1245
							]
						],
						[
							[
								1246
							]
						],
						[
							[
								1247
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 248170.673328,
						"Shape_Area": 2153237965.21,
						"Sted": "Flora",
						"ID": "1401 Flora",
						"Rnr": 3051,
						"Region": "Sunnfjord",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1401
					}
				},
				{
					"arcs": [
						[
							-434,
							1681,
							1682,
							1683,
							1415,
							1684,
							1685,
							-457
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 203276.936507,
						"Shape_Area": 979395400.288,
						"Sted": "Kvinesdal",
						"ID": "1037 Kvinesdal",
						"Rnr": 3033,
						"Region": "Lister",
						"Fnr": 10,
						"Fylke": "Vest-Agder",
						"Nr": 1037
					}
				},
				{
					"arcs": [
						[
							[
								410,
								1686,
								1258,
								415,
								-170,
								-23
							]
						],
						[
							[
								1687,
								1256
							]
						],
						[
							[
								416,
								-194,
								417,
								1259
							]
						],
						[
							[
								1260
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 248898.828466,
						"Shape_Area": 1913633936.38,
						"Sted": "Suldal",
						"ID": "1134 Suldal",
						"Rnr": 3038,
						"Region": "Ryfylke",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1134
					}
				},
				{
					"arcs": [
						[
							-1571,
							-78,
							-77,
							-91,
							1167
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 108909.573465,
						"Shape_Area": 481990711.991,
						"Sted": "Vanylven",
						"ID": "1511 Vanylven",
						"Rnr": 3055,
						"Region": "Søre Sunnmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1511
					}
				},
				{
					"arcs": [
						[
							1688,
							-1574,
							508,
							-1563,
							77,
							78
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 140776.850167,
						"Shape_Area": 555401074.273,
						"Sted": "Eid",
						"ID": "1443 Eid",
						"Rnr": 3049,
						"Region": "Nordfjord",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1443
					}
				},
				{
					"arcs": [
						[
							1689,
							1170
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 53947.8937709,
						"Shape_Area": 136862144.668,
						"Sted": "Hareid",
						"ID": "1517 Hareid",
						"Rnr": 3055,
						"Region": "Søre Sunnmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1517
					}
				},
				{
					"arcs": [
						[
							1389
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 48162.8162521,
						"Shape_Area": 126850468.619,
						"Sted": "Sula",
						"ID": "1531 Sula",
						"Rnr": 3056,
						"Region": "Ålesundregionen",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1531
					}
				},
				{
					"arcs": [
						[
							[
								438,
								1333,
								-1577,
								1690
							]
						],
						[
							[
								444,
								1339
							]
						],
						[
							[
								1340
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 131692.268452,
						"Shape_Area": 851378997.426,
						"Sted": "Lillesand",
						"ID": "0926 Lillesand",
						"Rnr": 3035,
						"Region": "Kristiansandregionen",
						"Fnr": 9,
						"Fylke": "Aust-Agder",
						"Nr": 926
					}
				},
				{
					"arcs": [
						[
							12,
							13,
							14,
							15,
							1691,
							-1585
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 160259.486903,
						"Shape_Area": 908156925.663,
						"Sted": "Nissedal",
						"ID": "0830 Nissedal",
						"Rnr": 3030,
						"Region": "Vest-Telemark",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 830
					}
				},
				{
					"arcs": [
						[
							64,
							45,
							46,
							47,
							48,
							-1596
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 235725.598724,
						"Shape_Area": 1857532595.35,
						"Sted": "Hol",
						"ID": "0620 Hol",
						"Rnr": 3021,
						"Region": "Hallingdal",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 620
					}
				},
				{
					"arcs": [
						[
							358,
							1692,
							1151,
							1693,
							1694,
							366
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 165166.88204,
						"Shape_Area": 987693205.288,
						"Sted": "Norddal",
						"ID": "1524 Norddal",
						"Rnr": 3054,
						"Region": "Storfjord",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1524
					}
				},
				{
					"arcs": [
						[
							1695,
							1154,
							362,
							363
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 61484.702788,
						"Shape_Area": 151170524.121,
						"Sted": "Ørskog",
						"ID": "1523 Ørskog",
						"Rnr": 3054,
						"Region": "Storfjord",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1523
					}
				},
				{
					"arcs": [
						[
							-374,
							380,
							-1601,
							1208,
							1696,
							-376,
							1205
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 217900.111585,
						"Shape_Area": 1135611970.71,
						"Sted": "Nesset",
						"ID": "1543 Nesset",
						"Rnr": 3053,
						"Region": "Romsdal",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1543
					}
				},
				{
					"arcs": [
						[
							[
								1188
							]
						],
						[
							[
								1189
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 139016.039631,
						"Shape_Area": 721003637.108,
						"Sted": "Averøy",
						"ID": "1554 Averøy",
						"Rnr": 3052,
						"Region": "Nordmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1554
					}
				},
				{
					"arcs": [
						[
							[
								234,
								741,
								235,
								742,
								-1609,
								1697
							]
						],
						[
							[
								239,
								748
							]
						],
						[
							[
								749
							]
						],
						[
							[
								750
							]
						],
						[
							[
								751
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 75698.3935479,
						"Shape_Area": 196862742.111,
						"Sted": "Porsgrunn",
						"ID": "0805 Porsgrunn",
						"Rnr": 3027,
						"Region": "Grenland",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 805
					}
				},
				{
					"arcs": [
						[
							222,
							223,
							224,
							225,
							-30,
							-1589,
							-1591
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 189202.004272,
						"Shape_Area": 916832967.725,
						"Sted": "Notodden",
						"ID": "0807 Notodden",
						"Rnr": 3029,
						"Region": "Øst-Telemark",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 807
					}
				},
				{
					"arcs": [
						[
							-147,
							258,
							259,
							260,
							261,
							262,
							-1634,
							255,
							256,
							-59,
							257
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 237441.456071,
						"Shape_Area": 1557437880.2,
						"Sted": "Ringerike",
						"ID": "0605 Ringerike",
						"Rnr": 3024,
						"Region": "Ringerike/Hole",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 605
					}
				},
				{
					"arcs": [
						[
							[
								-1495,
								767,
								1698,
								769,
								-1629,
								771
							]
						],
						[
							[
								-1494,
								765
							]
						],
						[
							[
								-1625,
								780
							]
						],
						[
							[
								-1624,
								775
							]
						],
						[
							[
								783
							]
						],
						[
							[
								784
							]
						],
						[
							[
								785
							]
						],
						[
							[
								786
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 74506.8394198,
						"Shape_Area": 201260072.71,
						"Sted": "Nøtterøy",
						"ID": "0722 Nøtterøy",
						"Rnr": 3025,
						"Region": "Tønsbergregionen",
						"Fnr": 7,
						"Fylke": "Vestfold",
						"Nr": 722
					}
				},
				{
					"arcs": [
						[
							1699,
							-1531,
							158,
							-96,
							-1503,
							1700
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 95225.7840037,
						"Shape_Area": 438634442.096,
						"Sted": "Rakkestad",
						"ID": "0128 Rakkestad",
						"Rnr": 3002,
						"Region": "Indre Østfold",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 128
					}
				},
				{
					"arcs": [
						[
							-97,
							-159,
							-158,
							929
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 138259.147847,
						"Shape_Area": 662091874.925,
						"Sted": "Halden",
						"ID": "0101 Halden",
						"Rnr": 3001,
						"Region": "Halden (Region)",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 101
					}
				},
				{
					"arcs": [
						[
							-128,
							837,
							1701,
							836
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 67236.7194685,
						"Shape_Area": 259962997.206,
						"Sted": "Hurum",
						"ID": "0628 Hurum",
						"Rnr": 3086,
						"Region": "Vestviken",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 628
					}
				},
				{
					"arcs": [
						[
							[
								1702,
								538
							]
						],
						[
							[
								1703,
								-1500,
								534,
								1704,
								536
							]
						],
						[
							[
								127,
								541
							]
						],
						[
							[
								542
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 61387.0364575,
						"Shape_Area": 117089688.399,
						"Sted": "Frogn",
						"ID": "0215 Frogn",
						"Rnr": 3006,
						"Region": "Follo",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 215
					}
				},
				{
					"arcs": [
						[
							[
								1705,
								498,
								1706
							]
						],
						[
							[
								32,
								-1646,
								503
							]
						],
						[
							[
								1707,
								500
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 136115.585562,
						"Shape_Area": 563959267.735,
						"Sted": "Inderøy",
						"ID": "1756 Inderøy",
						"Rnr": 3064,
						"Region": "Innherred",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1756
					}
				},
				{
					"arcs": [
						[
							106,
							1708,
							103,
							104,
							105
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 77000.659697,
						"Shape_Area": 187163014.405,
						"Sted": "Nittedal",
						"ID": "0233 Nittedal",
						"Rnr": 3007,
						"Region": "Nedre Romerike",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 233
					}
				},
				{
					"arcs": [
						[
							1709,
							-1508,
							1710,
							1711,
							102,
							-1709,
							107
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 54185.2186661,
						"Shape_Area": 74967286.1294,
						"Sted": "Skedsmo",
						"ID": "0231 Skedsmo",
						"Rnr": 3007,
						"Region": "Nedre Romerike",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 231
					}
				},
				{
					"arcs": [
						[
							-1515,
							145,
							146,
							147,
							1712,
							-1512
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 130262.052497,
						"Shape_Area": 732579332.592,
						"Sted": "Søndre Land",
						"ID": "0536 Søndre Land",
						"Rnr": 3014,
						"Region": "Gjøvikregionen",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 536
					}
				},
				{
					"arcs": [
						[
							1713,
							1714,
							289,
							-278,
							-277
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 171211.378422,
						"Shape_Area": 1211715528,
						"Sted": "Holtålen",
						"ID": "1644 Holtålen",
						"Rnr": 3062,
						"Region": "Rørosregionen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1644
					}
				},
				{
					"arcs": [
						[
							1715,
							283,
							789
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 70036.2597852,
						"Shape_Area": 250973216.6,
						"Sted": "Skaun",
						"ID": "1657 Skaun",
						"Rnr": 3061,
						"Region": "Trondheimsregionen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1657
					}
				},
				{
					"arcs": [
						[
							474,
							-1540,
							1716,
							6,
							1717
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 182368.614907,
						"Shape_Area": 1039484717.64,
						"Sted": "Åsnes",
						"ID": "0425 Åsnes",
						"Rnr": 3011,
						"Region": "Glåmdal",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 425
					}
				},
				{
					"arcs": [
						[
							1408,
							1718,
							470,
							471,
							472,
							-288
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 271175.283885,
						"Shape_Area": 2196440603.24,
						"Sted": "Engerdal",
						"ID": "0434 Engerdal",
						"Rnr": 3013,
						"Region": "Sør Østerdal",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 434
					}
				},
				{
					"arcs": [
						[
							[
								-322,
								1422,
								-206,
								1423,
								-205,
								1424,
								-204
							]
						],
						[
							[
								-321,
								-130,
								1425
							]
						],
						[
							[
								1719,
								-207,
								1426
							]
						],
						[
							[
								1428
							]
						],
						[
							[
								1429
							]
						],
						[
							[
								1430
							]
						],
						[
							[
								1431
							]
						],
						[
							[
								1432
							]
						],
						[
							[
								1433
							]
						],
						[
							[
								1434
							]
						],
						[
							[
								1435
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 217614.791771,
						"Shape_Area": 1553634523.82,
						"Sted": "Nærøy",
						"ID": "1751 Nærøy",
						"Rnr": 3066,
						"Region": "Kystgruppen",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1751
					}
				},
				{
					"arcs": [
						[
							[
								198,
								199,
								1720,
								705,
								1721,
								-1651,
								708,
								-1653,
								710,
								-1652,
								712,
								1722
							]
						],
						[
							[
								728
							]
						],
						[
							[
								729
							]
						],
						[
							[
								730
							]
						],
						[
							[
								731
							]
						],
						[
							[
								732
							]
						],
						[
							[
								733
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 358716.51297,
						"Shape_Area": 2092915054.88,
						"Sted": "Brønnøy",
						"ID": "1813 Brønnøy",
						"Rnr": 3068,
						"Region": "Sør-Helgeland",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1813
					}
				},
				{
					"arcs": [
						[
							[
								1723,
								577,
								1724,
								579
							]
						],
						[
							[
								581
							]
						],
						[
							[
								582
							]
						],
						[
							[
								583
							]
						],
						[
							[
								584
							]
						],
						[
							[
								585
							]
						],
						[
							[
								586
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 141797.914933,
						"Shape_Area": 757571618.612,
						"Sted": "Dønna",
						"ID": "1827 Dønna",
						"Rnr": 3069,
						"Region": "HALD",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1827
					}
				},
				{
					"arcs": [
						[
							1725,
							-324,
							-323,
							-201,
							-200,
							1726
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 246862.469782,
						"Shape_Area": 2009476033.5,
						"Sted": "Grane",
						"ID": "1825 Grane",
						"Rnr": 3071,
						"Region": "Mosjøregionen",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1825
					}
				},
				{
					"arcs": [
						[
							[
								1069
							]
						],
						[
							[
								1070
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 213100.788706,
						"Shape_Area": 2107070728.75,
						"Sted": "Vestvågøy",
						"ID": "1860 Vestvågøy",
						"Rnr": 3075,
						"Region": "Lofoten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1860
					}
				},
				{
					"arcs": [
						[
							[
								1727,
								1078,
								1728,
								1080,
								1729,
								-1545,
								1074
							]
						],
						[
							[
								1092
							]
						],
						[
							[
								1093
							]
						],
						[
							[
								1094
							]
						],
						[
							[
								1095
							]
						],
						[
							[
								1096
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 181441.900815,
						"Shape_Area": 1808734795.46,
						"Sted": "Øksnes",
						"ID": "1868 Øksnes",
						"Rnr": 3076,
						"Region": "Vesterålen",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1868
					}
				},
				{
					"arcs": [
						[
							-329,
							-328,
							-327,
							1099,
							-1663
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 118062.957015,
						"Shape_Area": 578255028.549,
						"Sted": "Skånland",
						"ID": "1913 Skånland",
						"Rnr": 3077,
						"Region": "Sør-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1913
					}
				},
				{
					"arcs": [
						[
							355,
							356,
							1730,
							1102,
							354
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 128937.429798,
						"Shape_Area": 524089983.632,
						"Sted": "Salangen",
						"ID": "1923 Salangen",
						"Rnr": 3077,
						"Region": "Sør-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1923
					}
				},
				{
					"arcs": [
						[
							-1665,
							1731,
							1113,
							1732
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 152600.958088,
						"Shape_Area": 1130570797.43,
						"Sted": "Berg",
						"ID": "1929 Berg",
						"Rnr": 3078,
						"Region": "Midt-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1929
					}
				},
				{
					"arcs": [
						[
							[
								312,
								882,
								1733,
								880,
								1734
							]
						],
						[
							[
								1735,
								885
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 347531.243557,
						"Shape_Area": 3688706896.68,
						"Sted": "Nordreisa",
						"ID": "1942 Nordreisa",
						"Rnr": 3080,
						"Region": "Nord-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1942
					}
				},
				{
					"arcs": [
						[
							[
								301,
								1736,
								843,
								-1673
							]
						],
						[
							[
								1737,
								1738,
								852
							]
						],
						[
							[
								1739,
								855
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 211740.673396,
						"Shape_Area": 2151285179.77,
						"Sted": "Kvalsund",
						"ID": "2017 Kvalsund",
						"Rnr": 3081,
						"Region": "Vest-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2017
					}
				},
				{
					"arcs": [
						[
							-315,
							-314,
							915,
							1740,
							-1671,
							1741,
							-317,
							914,
							-316
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 444009.278597,
						"Shape_Area": 4380650417.67,
						"Sted": "Tana",
						"ID": "2025 Tana",
						"Rnr": 3082,
						"Region": "Midt-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2025
					}
				},
				{
					"arcs": [
						[
							[
								1742,
								904,
								313,
								1743,
								902
							]
						],
						[
							[
								905
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 186058.166844,
						"Shape_Area": 1643519926.83,
						"Sted": "Nesseby",
						"ID": "2027 Nesseby",
						"Rnr": 3083,
						"Region": "Øst-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2027
					}
				},
				{
					"arcs": [
						[
							1744,
							901,
							-1744,
							314,
							-1556
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 222083.957923,
						"Shape_Area": 1977607133.38,
						"Sted": "Vadsø",
						"ID": "2003 Vadsø",
						"Rnr": 3083,
						"Region": "Øst-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2003
					}
				},
				{
					"arcs": [
						[
							[
								-1456,
								1351,
								1745
							]
						],
						[
							[
								1358
							]
						],
						[
							[
								1359
							]
						],
						[
							[
								1360
							]
						],
						[
							[
								1361
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 212029.737579,
						"Shape_Area": 1353841594.8,
						"Sted": "Karmøy",
						"ID": "1149 Karmøy",
						"Rnr": 3037,
						"Region": "Haugesundregionen",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1149
					}
				},
				{
					"arcs": [
						[
							1746,
							1747,
							-1559,
							1274,
							-1678
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 105865.476061,
						"Shape_Area": 547653099.496,
						"Sted": "Klepp",
						"ID": "1120 Klepp",
						"Rnr": 3039,
						"Region": "Stavangerregionen",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1120
					}
				},
				{
					"arcs": [
						[
							1748,
							420,
							-1558,
							-1748,
							1749
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 75570.7755901,
						"Shape_Area": 186434226.675,
						"Sted": "Time",
						"ID": "1121 Time",
						"Rnr": 3039,
						"Region": "Stavangerregionen",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1121
					}
				},
				{
					"arcs": [
						[
							[
								1750,
								679
							]
						],
						[
							[
								1751,
								681
							]
						],
						[
							[
								683
							]
						],
						[
							[
								684
							]
						],
						[
							[
								685
							]
						],
						[
							[
								686
							]
						],
						[
							[
								687
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 67889.8506675,
						"Shape_Area": 243696925.957,
						"Sted": "Fitjar",
						"ID": "1222 Fitjar",
						"Rnr": 3046,
						"Region": "Sunnhordland",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1222
					}
				},
				{
					"arcs": [
						[
							[
								-403,
								1298,
								-402,
								-401,
								1299
							]
						],
						[
							[
								1300
							]
						],
						[
							[
								1301
							]
						],
						[
							[
								1302
							]
						],
						[
							[
								1303
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 198389.741566,
						"Shape_Area": 1603245603.8,
						"Sted": "Askvoll",
						"ID": "1428 Askvoll",
						"Rnr": 3048,
						"Region": "HAFS",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1428
					}
				},
				{
					"arcs": [
						[
							445,
							1752,
							1753,
							449
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 117756.400624,
						"Shape_Area": 412180981.826,
						"Sted": "Lund",
						"ID": "1112 Lund",
						"Rnr": 3036,
						"Region": "Dalane",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1112
					}
				},
				{
					"arcs": [
						[
							[
								-431,
								-430,
								1410,
								-438,
								1411,
								1754,
								1413,
								1755,
								-1683,
								1756
							]
						],
						[
							[
								-437,
								1417
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 164343.200643,
						"Shape_Area": 626098566.569,
						"Sted": "Lyngdal",
						"ID": "1032 Lyngdal",
						"Rnr": 3033,
						"Region": "Lister",
						"Fnr": 10,
						"Fylke": "Vest-Agder",
						"Nr": 1032
					}
				},
				{
					"arcs": [
						[
							[
								-1576,
								-1469,
								1327,
								429,
								-1467
							]
						],
						[
							[
								436,
								1330
							]
						],
						[
							[
								437,
								1331
							]
						],
						[
							[
								1332
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 152903.069631,
						"Shape_Area": 807422040.616,
						"Sted": "Lindesnes",
						"ID": "1029 Lindesnes",
						"Rnr": 3034,
						"Region": "Mandalsregionen",
						"Fnr": 10,
						"Fylke": "Vest-Agder",
						"Nr": 1029
					}
				},
				{
					"arcs": [
						[
							418,
							419,
							-1749,
							1757,
							1282,
							-415
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 163741.268516,
						"Shape_Area": 624969921.646,
						"Sted": "Gjesdal",
						"ID": "1122 Gjesdal",
						"Rnr": 3039,
						"Region": "Stavangerregionen",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1122
					}
				},
				{
					"arcs": [
						[
							412,
							413,
							414,
							1253,
							1758,
							1759
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 156968.868654,
						"Shape_Area": 855041479.905,
						"Sted": "Forsand",
						"ID": "1129 Forsand",
						"Rnr": 3038,
						"Region": "Ryfylke",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1129
					}
				},
				{
					"arcs": [
						[
							1760,
							1230,
							1761,
							1228
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 76794.6937739,
						"Shape_Area": 219628490.969,
						"Sted": "Leikanger",
						"ID": "1419 Leikanger",
						"Rnr": 3050,
						"Region": "Sogn",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1419
					}
				},
				{
					"arcs": [
						[
							1762,
							-320,
							-184,
							-183,
							1763,
							1222
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 161933.476108,
						"Shape_Area": 974013325.662,
						"Sted": "Vik",
						"ID": "1417 Vik",
						"Rnr": 3050,
						"Region": "Sogn",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1417
					}
				},
				{
					"arcs": [
						[
							-1573,
							86,
							87,
							88,
							1764,
							506
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 180389.463957,
						"Shape_Area": 1092704935.29,
						"Sted": "Gloppen",
						"ID": "1445 Gloppen",
						"Rnr": 3049,
						"Region": "Nordfjord",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1445
					}
				},
				{
					"arcs": [
						[
							-1579,
							1765,
							-427,
							-1479
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 105612.713417,
						"Shape_Area": 218901708.624,
						"Sted": "Songdalen",
						"ID": "1017 Songdalen",
						"Rnr": 3035,
						"Region": "Kristiansandregionen",
						"Fnr": 10,
						"Fylke": "Vest-Agder",
						"Nr": 1017
					}
				},
				{
					"arcs": [
						[
							-1476,
							440,
							1766
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 85942.9639426,
						"Shape_Area": 260283318.231,
						"Sted": "Iveland",
						"ID": "0935 Iveland",
						"Rnr": 3035,
						"Region": "Kristiansandregionen",
						"Fnr": 9,
						"Fylke": "Aust-Agder",
						"Nr": 935
					}
				},
				{
					"arcs": [
						[
							[
								-445,
								1374
							]
						],
						[
							[
								-439,
								-444,
								-1583,
								1767,
								1370
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 143379.928685,
						"Shape_Area": 944814052.191,
						"Sted": "Grimstad",
						"ID": "0904 Grimstad",
						"Rnr": 3032,
						"Region": "Arendalregionen",
						"Fnr": 9,
						"Fylke": "Aust-Agder",
						"Nr": 904
					}
				},
				{
					"arcs": [
						[
							-1762,
							1231,
							1768,
							391,
							392,
							1769,
							1227
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 195044.315622,
						"Shape_Area": 859001137.885,
						"Sted": "Sogndal",
						"ID": "1420 Sogndal",
						"Rnr": 3050,
						"Region": "Sogn",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1420
					}
				},
				{
					"arcs": [
						[
							1770,
							1771,
							361,
							1148
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 94505.219377,
						"Shape_Area": 401308361.216,
						"Sted": "Sykkylven",
						"ID": "1528 Sykkylven",
						"Rnr": 3054,
						"Region": "Storfjord",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1528
					}
				},
				{
					"arcs": [
						[
							[
								1772,
								374,
								1190
							]
						],
						[
							[
								378,
								1192
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 145217.40935,
						"Shape_Area": 446484122.704,
						"Sted": "Eide",
						"ID": "1551 Eide",
						"Rnr": 3052,
						"Region": "Nordmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1551
					}
				},
				{
					"arcs": [
						[
							-1490,
							-221,
							1773,
							-269
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 94686.6443531,
						"Shape_Area": 450116919.038,
						"Sted": "Rollag",
						"ID": "0632 Rollag",
						"Rnr": 3022,
						"Region": "Kongsberg/Numedal",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 632
					}
				},
				{
					"arcs": [
						[
							152,
							-1513,
							-1713,
							148,
							149,
							150,
							151
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 170728.817605,
						"Shape_Area": 956000456.007,
						"Sted": "Nordre Land",
						"ID": "0538 Nordre Land",
						"Rnr": 3014,
						"Region": "Gjøvikregionen",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 538
					}
				},
				{
					"arcs": [
						[
							[
								523
							]
						],
						[
							[
								524
							]
						],
						[
							[
								525
							]
						],
						[
							[
								526
							]
						],
						[
							[
								527
							]
						],
						[
							[
								528
							]
						],
						[
							[
								529
							]
						],
						[
							[
								530
							]
						],
						[
							[
								531
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 131539.11079,
						"Shape_Area": 516704551.916,
						"Sted": "Hvaler",
						"ID": "0111 Hvaler",
						"Rnr": 3004,
						"Region": "Nedre Glomma",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 111
					}
				},
				{
					"arcs": [
						[
							1774,
							1775,
							794
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 43137.6313625,
						"Shape_Area": 76873522.2089,
						"Sted": "Svelvik",
						"ID": "0711 Svelvik",
						"Rnr": 3020,
						"Region": "Drammensregionen",
						"Fnr": 7,
						"Fylke": "Vestfold",
						"Nr": 711
					}
				},
				{
					"arcs": [
						[
							[
								1776,
								-1631,
								564,
								-119
							]
						],
						[
							[
								566
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 60147.2295252,
						"Shape_Area": 124788248.953,
						"Sted": "Moss",
						"ID": "0104 Moss",
						"Rnr": 3003,
						"Region": "Mosseregionen",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 104
					}
				},
				{
					"arcs": [
						[
							125,
							1777,
							1778,
							120,
							-1636
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 69822.5527314,
						"Shape_Area": 164859269.745,
						"Sted": "Ski",
						"ID": "0213 Ski",
						"Rnr": 3006,
						"Region": "Follo",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 213
					}
				},
				{
					"arcs": [
						[
							155,
							156,
							-94,
							-1497,
							-1630,
							-1777,
							-118,
							154
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 72409.0402856,
						"Shape_Area": 252720674.113,
						"Sted": "Våler",
						"ID": "0137 Våler",
						"Rnr": 3003,
						"Region": "Mosseregionen",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 137
					}
				},
				{
					"arcs": [
						[
							1779,
							-109,
							-108,
							-107,
							-1642
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 42367.6460639,
						"Shape_Area": 82256405.7495,
						"Sted": "Gjerdrum",
						"ID": "0234 Gjerdrum",
						"Rnr": 3008,
						"Region": "Øvre Romerike",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 234
					}
				},
				{
					"arcs": [
						[
							-1639,
							1780,
							-1504,
							-156,
							-1635,
							-124
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 72000.4165597,
						"Shape_Area": 143327002.393,
						"Sted": "Spydeberg",
						"ID": "0123 Spydeberg",
						"Rnr": 3002,
						"Region": "Indre Østfold",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 123
					}
				},
				{
					"arcs": [
						[
							1781,
							-1505,
							-1781,
							-1638
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 34533.5531508,
						"Shape_Area": 67052996.5772,
						"Sted": "Askim",
						"ID": "0124 Askim",
						"Rnr": 3002,
						"Region": "Indre Østfold",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 124
					}
				},
				{
					"arcs": [
						[
							-280,
							1782,
							1783,
							1784,
							1785,
							1786,
							-218,
							-217
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 266253.48762,
						"Shape_Area": 1880172521.02,
						"Sted": "Tynset",
						"ID": "0437 Tynset",
						"Rnr": 3010,
						"Region": "Fjellregionen",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 437
					}
				},
				{
					"arcs": [
						[
							277,
							278,
							279,
							-216,
							280,
							1787,
							1788
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 176684.770213,
						"Shape_Area": 1866037521.64,
						"Sted": "Midtre Gauldal",
						"ID": "1648 Midtre Gauldal",
						"Rnr": 3061,
						"Region": "Trondheimsregionen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1648
					}
				},
				{
					"arcs": [
						[
							1789,
							1790,
							-1788,
							281,
							282,
							-1716,
							790,
							1791
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 138968.507595,
						"Shape_Area": 700593098.178,
						"Sted": "Melhus",
						"ID": "1653 Melhus",
						"Rnr": 3061,
						"Region": "Trondheimsregionen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1653
					}
				},
				{
					"arcs": [
						[
							-1524,
							-34,
							-33,
							1125
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 107815.213167,
						"Shape_Area": 617042679.114,
						"Sted": "Leksvik",
						"ID": "1718 Leksvik",
						"Rnr": 3057,
						"Region": "Fosen",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1718
					}
				},
				{
					"arcs": [
						[
							[
								1792,
								43,
								495,
								44,
								496
							]
						],
						[
							[
								504
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 138064.038547,
						"Shape_Area": 835905447.841,
						"Sted": "Levanger",
						"ID": "1719 Levanger",
						"Rnr": 3064,
						"Region": "Innherred",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1719
					}
				},
				{
					"arcs": [
						[
							[
								-136,
								1793,
								1131,
								1794
							]
						],
						[
							[
								1136
							]
						],
						[
							[
								1137
							]
						],
						[
							[
								1138
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 162906.867857,
						"Shape_Area": 976341061.561,
						"Sted": "Roan",
						"ID": "1632 Roan",
						"Rnr": 3057,
						"Region": "Fosen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1632
					}
				},
				{
					"arcs": [
						[
							1249,
							-291,
							-275,
							1795,
							-43
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 146803.343562,
						"Shape_Area": 1277377120.77,
						"Sted": "Meråker",
						"ID": "1711 Meråker",
						"Rnr": 3063,
						"Region": "Stjørdalsregionen",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1711
					}
				},
				{
					"arcs": [
						[
							42,
							-1793,
							497,
							-1706,
							1796,
							41,
							494
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 179969.324425,
						"Shape_Area": 1562664962.04,
						"Sted": "Verdal",
						"ID": "1721 Verdal",
						"Rnr": 3064,
						"Region": "Innherred",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1721
					}
				},
				{
					"arcs": [
						[
							-38,
							-37,
							134,
							135,
							136,
							-1644,
							544,
							1797,
							546,
							1798
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 177628.676178,
						"Shape_Area": 803513643.087,
						"Sted": "Namdalseid",
						"ID": "1725 Namdalseid",
						"Rnr": 3067,
						"Region": "Midtre Namdal",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1725
					}
				},
				{
					"arcs": [
						[
							[
								130,
								1799,
								1800,
								548,
								129
							]
						],
						[
							[
								1801,
								557
							]
						],
						[
							[
								559
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 157340.448503,
						"Shape_Area": 683929370.019,
						"Sted": "Fosnes",
						"ID": "1748 Fosnes",
						"Rnr": 3067,
						"Region": "Midtre Namdal",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1748
					}
				},
				{
					"arcs": [
						[
							[
								335,
								957,
								1802
							]
						],
						[
							[
								1803,
								959
							]
						],
						[
							[
								1804,
								961
							]
						],
						[
							[
								963
							]
						],
						[
							[
								964
							]
						],
						[
							[
								965
							]
						],
						[
							[
								966
							]
						],
						[
							[
								967
							]
						],
						[
							[
								968
							]
						],
						[
							[
								969
							]
						],
						[
							[
								970
							]
						],
						[
							[
								971
							]
						],
						[
							[
								972
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 192010.063143,
						"Shape_Area": 1337268198.99,
						"Sted": "Lurøy",
						"ID": "1834 Lurøy",
						"Rnr": 3070,
						"Region": "Ytre Helgeland",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1834
					}
				},
				{
					"arcs": [
						[
							1805,
							1806,
							1807,
							-202,
							322
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 225423.702291,
						"Shape_Area": 1418799126.05,
						"Sted": "Namsskogan",
						"ID": "1740 Namsskogan",
						"Rnr": 3065,
						"Region": "Indre Namdal",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1740
					}
				},
				{
					"arcs": [
						[
							[
								-1660,
								1006,
								1808
							]
						],
						[
							[
								-1659,
								1809,
								1004
							]
						],
						[
							[
								1021
							]
						],
						[
							[
								1022
							]
						],
						[
							[
								1023
							]
						],
						[
							[
								1024
							]
						],
						[
							[
								1025
							]
						],
						[
							[
								1026
							]
						],
						[
							[
								1027
							]
						],
						[
							[
								1028
							]
						],
						[
							[
								1029
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 190160.449378,
						"Shape_Area": 1503379712.29,
						"Sted": "Gildeskål",
						"ID": "1838 Gildeskål",
						"Rnr": 3073,
						"Region": "Salten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1838
					}
				},
				{
					"arcs": [
						[
							[
								1810,
								1811,
								1010
							]
						],
						[
							[
								1812,
								-1661,
								-1809,
								1007
							]
						],
						[
							[
								1030
							]
						],
						[
							[
								1031
							]
						],
						[
							[
								1032
							]
						],
						[
							[
								1033
							]
						],
						[
							[
								1034
							]
						],
						[
							[
								1035
							]
						],
						[
							[
								1036
							]
						],
						[
							[
								1037
							]
						],
						[
							[
								1038
							]
						],
						[
							[
								1039
							]
						],
						[
							[
								1040
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 374523.40515,
						"Shape_Area": 4834642126.67,
						"Sted": "Bodø",
						"ID": "1804 Bodø",
						"Rnr": 3073,
						"Region": "Salten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1804
					}
				},
				{
					"arcs": [
						[
							1002,
							-345,
							-1657,
							-1813,
							1008,
							1813
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 217417.784474,
						"Shape_Area": 2242275028.87,
						"Sted": "Saltdal",
						"ID": "1840 Saltdal",
						"Rnr": 3073,
						"Region": "Salten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1840
					}
				},
				{
					"arcs": [
						[
							934,
							1814,
							939,
							1815,
							328,
							329,
							330,
							331
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 208421.688501,
						"Shape_Area": 2222963806.02,
						"Sted": "Narvik",
						"ID": "1805 Narvik",
						"Rnr": 3074,
						"Region": "Ofoten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1805
					}
				},
				{
					"arcs": [
						[
							[
								326,
								1816,
								941
							]
						],
						[
							[
								332,
								333,
								334,
								942
							]
						],
						[
							[
								943
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 103297.894759,
						"Shape_Area": 447154566.867,
						"Sted": "Tjeldsund",
						"ID": "1852 Tjeldsund",
						"Rnr": 3074,
						"Region": "Ofoten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1852
					}
				},
				{
					"arcs": [
						[
							[
								-1816,
								940,
								-1817,
								327
							]
						],
						[
							[
								944
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 93481.9545767,
						"Shape_Area": 392099621.831,
						"Sted": "Evenes",
						"ID": "1853 Evenes",
						"Rnr": 3074,
						"Region": "Ofoten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1853
					}
				},
				{
					"arcs": [
						[
							357,
							-331,
							-1662,
							1101,
							-1731
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 101047.604143,
						"Shape_Area": 323808706.46,
						"Sted": "Lavangen",
						"ID": "1920 Lavangen",
						"Rnr": 3077,
						"Region": "Sør-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1920
					}
				},
				{
					"arcs": [
						[
							295,
							296,
							800,
							-1552,
							802,
							-1551
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 224307.503907,
						"Shape_Area": 1743519975.59,
						"Sted": "Balsfjord",
						"ID": "1933 Balsfjord",
						"Rnr": 3079,
						"Region": "Tromsøregionen",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1933
					}
				},
				{
					"arcs": [
						[
							[
								-1738,
								853,
								1817
							]
						],
						[
							[
								-1737,
								302,
								303,
								304,
								305,
								1818,
								842
							]
						],
						[
							[
								1819,
								1820,
								858
							]
						],
						[
							[
								860
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 324922.317698,
						"Shape_Area": 4565029940.62,
						"Sted": "Alta",
						"ID": "2012 Alta",
						"Rnr": 3081,
						"Region": "Vest-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2012
					}
				},
				{
					"arcs": [
						[
							[
								-1821,
								1821,
								857
							]
						],
						[
							[
								1822,
								861,
								1823,
								863
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 225926.212449,
						"Shape_Area": 2770716035.05,
						"Sted": "Hasvik",
						"ID": "2015 Hasvik",
						"Rnr": 3081,
						"Region": "Vest-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2015
					}
				},
				{
					"arcs": [
						[
							[
								-1745,
								-1555,
								900
							]
						],
						[
							[
								906
							]
						],
						[
							[
								907
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 199364.742155,
						"Shape_Area": 2503809905.89,
						"Sted": "Vardø",
						"ID": "2002 Vardø",
						"Rnr": 3083,
						"Region": "Øst-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2002
					}
				},
				{
					"arcs": [
						[
							[
								1824,
								-1676,
								1276,
								-1675,
								1278,
								-1453,
								1280
							]
						],
						[
							[
								-1454,
								1284
							]
						],
						[
							[
								1290
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 64903.6174479,
						"Shape_Area": 140152301.535,
						"Sted": "Stavanger",
						"ID": "1103 Stavanger",
						"Rnr": 3039,
						"Region": "Stavangerregionen",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1103
					}
				},
				{
					"arcs": [
						[
							192,
							193,
							194,
							688,
							1825,
							-172
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 161682.542873,
						"Shape_Area": 816059399.648,
						"Sted": "Etne",
						"ID": "1211 Etne",
						"Rnr": 3046,
						"Region": "Sunnhordland",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1211
					}
				},
				{
					"arcs": [
						[
							1826,
							619,
							175,
							-164,
							-163,
							176,
							177
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 150747.827526,
						"Shape_Area": 765459959.766,
						"Sted": "Kvam",
						"ID": "1238 Kvam",
						"Rnr": 3042,
						"Region": "Hardanger",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1238
					}
				},
				{
					"arcs": [
						[
							-1570,
							1827,
							618,
							-1827,
							178
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 77490.0585031,
						"Shape_Area": 232050248.025,
						"Sted": "Granvin",
						"ID": "1234 Granvin",
						"Rnr": 3042,
						"Region": "Hardanger",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1234
					}
				},
				{
					"arcs": [
						[
							-390,
							-389,
							399,
							1234,
							400,
							1828
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 149184.239922,
						"Shape_Area": 593452473.813,
						"Sted": "Gaular",
						"ID": "1430 Gaular",
						"Rnr": 3051,
						"Region": "Sunnfjord",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1430
					}
				},
				{
					"arcs": [
						[
							-361,
							-81,
							-1572,
							1169,
							-362
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 145942.497886,
						"Shape_Area": 945681986.272,
						"Sted": "Ørsta",
						"ID": "1520 Ørsta",
						"Rnr": 3055,
						"Region": "Søre Sunnmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1520
					}
				},
				{
					"arcs": [
						[
							[
								-1475,
								1158
							]
						],
						[
							[
								1172
							]
						],
						[
							[
								1173
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 134043.886553,
						"Shape_Area": 462201882.606,
						"Sted": "Sande",
						"ID": "1514 Sande",
						"Rnr": 3055,
						"Region": "Søre Sunnmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1514
					}
				},
				{
					"arcs": [
						[
							[
								1390
							]
						],
						[
							[
								1391
							]
						],
						[
							[
								1392
							]
						],
						[
							[
								1393
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 126052.555517,
						"Shape_Area": 912084261.877,
						"Sted": "Giske",
						"ID": "1532 Giske",
						"Rnr": 3056,
						"Region": "Ålesundregionen",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1532
					}
				},
				{
					"arcs": [
						[
							-63,
							-62,
							-270,
							-1774,
							-220,
							-26,
							-182,
							-65,
							-64
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 295969.272055,
						"Shape_Area": 2512353651.77,
						"Sted": "Nore og Uvdal",
						"ID": "0633 Nore og Uvdal",
						"Rnr": 3022,
						"Region": "Kongsberg/Numedal",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 633
					}
				},
				{
					"arcs": [
						[
							-407,
							1829,
							1830,
							-52,
							-399,
							-398,
							-397,
							-408
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 196523.695454,
						"Shape_Area": 1509830011.26,
						"Sted": "Vang",
						"ID": "0545 Vang",
						"Rnr": 3019,
						"Region": "Valdres",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 545
					}
				},
				{
					"arcs": [
						[
							-1600,
							-365,
							-364,
							383,
							384,
							1206
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 100847.621363,
						"Shape_Area": 471375113.271,
						"Sted": "Vestnes",
						"ID": "1535 Vestnes",
						"Rnr": 3053,
						"Region": "Romsdal",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1535
					}
				},
				{
					"arcs": [
						[
							1831,
							228,
							229,
							-32,
							1832
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 119499.059504,
						"Shape_Area": 430314779.798,
						"Sted": "Nome",
						"ID": "0819 Nome",
						"Rnr": 3028,
						"Region": "Midt-Telemark",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 819
					}
				},
				{
					"arcs": [
						[
							1833,
							746,
							1834,
							-1487,
							-1610,
							744
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 85727.4061404,
						"Shape_Area": 372330282.486,
						"Sted": "Bamble",
						"ID": "0814 Bamble",
						"Rnr": 3027,
						"Region": "Grenland",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 814
					}
				},
				{
					"arcs": [
						[
							[
								236,
								237,
								-1488,
								-1835,
								747
							]
						],
						[
							[
								-1834,
								745
							]
						],
						[
							[
								752
							]
						],
						[
							[
								753
							]
						],
						[
							[
								754
							]
						],
						[
							[
								755
							]
						],
						[
							[
								756
							]
						],
						[
							[
								757
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 148310.464748,
						"Shape_Area": 1061227357.09,
						"Sted": "Kragerø",
						"ID": "0815 Kragerø",
						"Rnr": 3027,
						"Region": "Grenland",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 815
					}
				},
				{
					"arcs": [
						[
							227,
							-1832,
							1835,
							-225,
							226
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 90973.663215,
						"Shape_Area": 320235335.178,
						"Sted": "Sauherad",
						"ID": "0822 Sauherad",
						"Rnr": 3028,
						"Region": "Midt-Telemark",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 822
					}
				},
				{
					"arcs": [
						[
							1836,
							-1611,
							266,
							267,
							268,
							269,
							-61
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 152150.208449,
						"Shape_Area": 840104744.482,
						"Sted": "Sigdal",
						"ID": "0621 Sigdal",
						"Rnr": 3023,
						"Region": "Midt-Buskerud",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 621
					}
				},
				{
					"arcs": [
						[
							271,
							-248,
							-243,
							-232,
							-231,
							-227,
							-224,
							-1489
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 146154.28659,
						"Shape_Area": 793264581.525,
						"Sted": "Kongsberg",
						"ID": "0604 Kongsberg",
						"Rnr": 3022,
						"Region": "Kongsberg/Numedal",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 604
					}
				},
				{
					"arcs": [
						[
							56,
							-1614,
							62,
							-1595,
							-1613
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 125513.057774,
						"Shape_Area": 812073287.12,
						"Sted": "Nes",
						"ID": "0616 Nes",
						"Rnr": 3021,
						"Region": "Hallingdal",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 616
					}
				},
				{
					"arcs": [
						[
							-1616,
							1837,
							-73,
							405,
							406,
							1838,
							1839
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 275060.891985,
						"Shape_Area": 1340140634.24,
						"Sted": "Vågå",
						"ID": "0515 Vågå",
						"Rnr": 3018,
						"Region": "Nord-Gudbrandsdal",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 515
					}
				},
				{
					"arcs": [
						[
							1840,
							1841,
							-150
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 117161.786162,
						"Shape_Area": 462801004.485,
						"Sted": "Etnedal",
						"ID": "0541 Etnedal",
						"Rnr": 3019,
						"Region": "Valdres",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 541
					}
				},
				{
					"arcs": [
						[
							65,
							1842,
							69,
							70,
							1843,
							74,
							75
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 225217.009009,
						"Shape_Area": 746865816.075,
						"Sted": "Sør-Fron",
						"ID": "0519 Sør-Fron",
						"Rnr": 3017,
						"Region": "Midt-Gudbrandsdal",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 519
					}
				},
				{
					"arcs": [
						[
							404,
							-75,
							-74,
							-1838,
							-1615
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 165340.621541,
						"Shape_Area": 905040376.549,
						"Sted": "Sel",
						"ID": "0517 Sel",
						"Rnr": 3018,
						"Region": "Nord-Gudbrandsdal",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 517
					}
				},
				{
					"arcs": [
						[
							-211,
							372,
							373,
							1183,
							-1618,
							1185,
							-1620
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 213518.004677,
						"Shape_Area": 1798172160.99,
						"Sted": "Sunndal",
						"ID": "1563 Sunndal",
						"Rnr": 3052,
						"Region": "Nordmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1563
					}
				},
				{
					"arcs": [
						[
							[
								1844,
								-370,
								-369,
								-368,
								1379,
								-380,
								1380,
								-1623
							]
						],
						[
							[
								1388
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 149223.010688,
						"Shape_Area": 787478162.065,
						"Sted": "Hemne",
						"ID": "1612 Hemne",
						"Rnr": 3060,
						"Region": "Orkdalregionen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1612
					}
				},
				{
					"arcs": [
						[
							1845,
							240,
							241,
							758
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 118483.70225,
						"Shape_Area": 302268194.546,
						"Sted": "Sandefjord",
						"ID": "0706 Sandefjord",
						"Rnr": 3026,
						"Region": "Sandefjord/Larvik",
						"Fnr": 7,
						"Fylke": "Vestfold",
						"Nr": 706
					}
				},
				{
					"arcs": [
						[
							[
								-300,
								-299,
								1846,
								949
							]
						],
						[
							[
								950
							]
						],
						[
							[
								951
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 50690.8565915,
						"Shape_Area": 130006828.319,
						"Sted": "Asker",
						"ID": "0220 Asker",
						"Rnr": 3005,
						"Region": "Akershus Vest",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 220
					}
				},
				{
					"arcs": [
						[
							-1778,
							126,
							-1501,
							-1704,
							537,
							-1703,
							539,
							1847
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 61864.7639531,
						"Shape_Area": 104256976.019,
						"Sted": "Ås",
						"ID": "0214 Ås",
						"Rnr": 3006,
						"Region": "Follo",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 214
					}
				},
				{
					"arcs": [
						[
							-5,
							1848,
							1849,
							-1640,
							1850,
							-142,
							348
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 111183.289191,
						"Shape_Area": 452616370.154,
						"Sted": "Eidsvoll",
						"ID": "0237 Eidsvoll",
						"Rnr": 3008,
						"Region": "Øvre Romerike",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 237
					}
				},
				{
					"arcs": [
						[
							452,
							-154,
							-153,
							-1493,
							-1520
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 122683.121884,
						"Shape_Area": 481676236.25,
						"Sted": "Lillehammer",
						"ID": "0501 Lillehammer",
						"Rnr": 3016,
						"Region": "Lillehammerregionen",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 501
					}
				},
				{
					"arcs": [
						[
							[
								-1529,
								1128
							]
						],
						[
							[
								1139
							]
						],
						[
							[
								1140
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 78687.4176491,
						"Shape_Area": 336226687.324,
						"Sted": "Ørland",
						"ID": "1621 Ørland",
						"Rnr": 3057,
						"Region": "Fosen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1621
					}
				},
				{
					"arcs": [
						[
							-284,
							-283,
							1851,
							-371,
							-1845,
							-1622,
							-1521,
							1385
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 127020.582834,
						"Shape_Area": 642589850.259,
						"Sted": "Orkdal",
						"ID": "1638 Orkdal",
						"Rnr": 3060,
						"Region": "Orkdalregionen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1638
					}
				},
				{
					"arcs": [
						[
							[
								-137,
								-1795,
								1132,
								-138,
								1133,
								-129
							]
						],
						[
							[
								1141
							]
						],
						[
							[
								1142
							]
						],
						[
							[
								1143
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 217690.587761,
						"Shape_Area": 1756394771.31,
						"Sted": "Osen",
						"ID": "1633 Osen",
						"Rnr": 3057,
						"Region": "Fosen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1633
					}
				},
				{
					"arcs": [
						[
							[
								-1720,
								1427,
								-208
							]
						],
						[
							[
								1436
							]
						],
						[
							[
								1437
							]
						],
						[
							[
								1438
							]
						],
						[
							[
								1439
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 195452.515158,
						"Shape_Area": 1703756179.16,
						"Sted": "Leka",
						"ID": "1755 Leka",
						"Rnr": 3066,
						"Region": "Kystgruppen",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1755
					}
				},
				{
					"arcs": [
						[
							473,
							-1718,
							7,
							8,
							9,
							10
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 186010.953178,
						"Shape_Area": 703926920.581,
						"Sted": "Våler",
						"ID": "0426 Våler",
						"Rnr": 3011,
						"Region": "Glåmdal",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 426
					}
				},
				{
					"arcs": [
						[
							798,
							287,
							288,
							-1715,
							1852
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 200567.558794,
						"Shape_Area": 1958200567.81,
						"Sted": "Røros",
						"ID": "1640 Røros",
						"Rnr": 3062,
						"Region": "Rørosregionen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1640
					}
				},
				{
					"arcs": [
						[
							988,
							-325,
							-1726,
							1853,
							341
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 269371.517723,
						"Shape_Area": 2680541776.91,
						"Sted": "Hattfjelldal",
						"ID": "1826 Hattfjelldal",
						"Rnr": 3071,
						"Region": "Mosjøregionen",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1826
					}
				},
				{
					"arcs": [
						[
							[
								167,
								168,
								587
							]
						],
						[
							[
								1854,
								588
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 131910.077667,
						"Shape_Area": 597002958.671,
						"Sted": "Leirfjord",
						"ID": "1822 Leirfjord",
						"Rnr": 3069,
						"Region": "HALD",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1822
					}
				},
				{
					"arcs": [
						[
							-1854,
							-1727,
							-199,
							-198,
							986,
							-169,
							339,
							987,
							340
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 270884.063403,
						"Shape_Area": 2023686083.31,
						"Sted": "Vefsn",
						"ID": "1824 Vefsn",
						"Rnr": 3071,
						"Region": "Mosjøregionen",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1824
					}
				},
				{
					"arcs": [
						[
							[
								1855,
								1856,
								1120
							]
						],
						[
							[
								-1666,
								-1733,
								1114
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 232531.54227,
						"Shape_Area": 1586404629,
						"Sted": "Lenvik",
						"ID": "1931 Lenvik",
						"Rnr": 3078,
						"Region": "Midt-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1931
					}
				},
				{
					"arcs": [
						[
							[
								-1667,
								-294,
								877
							]
						],
						[
							[
								887
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 177813.47896,
						"Shape_Area": 1300314847.9,
						"Sted": "Lyngen",
						"ID": "1938 Lyngen",
						"Rnr": 3080,
						"Region": "Nord-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1938
					}
				},
				{
					"arcs": [
						[
							[
								-1740,
								856
							]
						],
						[
							[
								-1739,
								-1818,
								854
							]
						],
						[
							[
								-1824,
								862
							]
						],
						[
							[
								-1823,
								864
							]
						],
						[
							[
								865
							]
						],
						[
							[
								866
							]
						],
						[
							[
								867
							]
						],
						[
							[
								868
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 260453.871021,
						"Shape_Area": 3232394455.9,
						"Sted": "Hammerfest",
						"ID": "2004 Hammerfest",
						"Rnr": 3081,
						"Region": "Vest-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2004
					}
				},
				{
					"arcs": [
						[
							916,
							-1669,
							-304,
							-1672,
							-1741
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 374307.156575,
						"Shape_Area": 5468331719.18,
						"Sted": "Karasjok",
						"ID": "2021 Karasjok",
						"Rnr": 3082,
						"Region": "Midt-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2021
					}
				},
				{
					"arcs": [
						[
							316,
							317,
							908
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 272469.100372,
						"Shape_Area": 3119662150.4,
						"Sted": "Gamvik",
						"ID": "2023 Gamvik",
						"Rnr": 3083,
						"Region": "Øst-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2023
					}
				},
				{
					"arcs": [
						[
							-1753,
							446,
							1342,
							1857
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 146367.052472,
						"Shape_Area": 872534202.26,
						"Sted": "Sokndal",
						"ID": "1111 Sokndal",
						"Rnr": 3036,
						"Region": "Dalane",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1111
					}
				},
				{
					"arcs": [
						[
							1291
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 87118.9684772,
						"Shape_Area": 365311873.808,
						"Sted": "Kvitsøy",
						"ID": "1144 Kvitsøy",
						"Rnr": 3039,
						"Region": "Stavangerregionen",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1144
					}
				},
				{
					"arcs": [
						[
							[
								-1752,
								682
							]
						],
						[
							[
								690
							]
						],
						[
							[
								691
							]
						],
						[
							[
								692
							]
						],
						[
							[
								693
							]
						],
						[
							[
								694
							]
						],
						[
							[
								695
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 168668.843467,
						"Shape_Area": 1670293363.45,
						"Sted": "Bømlo",
						"ID": "1219 Bømlo",
						"Rnr": 3046,
						"Region": "Sunnhordland",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1219
					}
				},
				{
					"arcs": [
						[
							195,
							196,
							696
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 89791.4065936,
						"Shape_Area": 375719226.4,
						"Sted": "Sveio",
						"ID": "1216 Sveio",
						"Rnr": 3046,
						"Region": "Sunnhordland",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1216
					}
				},
				{
					"arcs": [
						[
							-195,
							-417,
							1347,
							-1458,
							1349,
							-1455,
							1346
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 154124.103501,
						"Shape_Area": 772500506.099,
						"Sted": "Vindafjord",
						"ID": "1160 Vindafjord",
						"Rnr": 3037,
						"Region": "Haugesundregionen",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1160
					}
				},
				{
					"arcs": [
						[
							[
								660
							]
						],
						[
							[
								661
							]
						],
						[
							[
								662
							]
						],
						[
							[
								663
							]
						],
						[
							[
								664
							]
						],
						[
							[
								665
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 127808.781234,
						"Shape_Area": 995430305.27,
						"Sted": "Øygarden",
						"ID": "1259 Øygarden",
						"Rnr": 3047,
						"Region": "Hordaland Vest",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1259
					}
				},
				{
					"arcs": [
						[
							[
								-1461,
								652
							]
						],
						[
							[
								-1460,
								650
							]
						],
						[
							[
								-1459,
								654
							]
						],
						[
							[
								666
							]
						],
						[
							[
								667
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 123421.566379,
						"Shape_Area": 570262412.315,
						"Sted": "Sund",
						"ID": "1245 Sund",
						"Rnr": 3047,
						"Region": "Hordaland Vest",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1245
					}
				},
				{
					"arcs": [
						[
							[
								645
							]
						],
						[
							[
								646
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 54514.3300487,
						"Shape_Area": 131030596.096,
						"Sted": "Meland",
						"ID": "1256 Meland",
						"Rnr": 3044,
						"Region": "Nordhordland",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1256
					}
				},
				{
					"arcs": [
						[
							[
								-187,
								-1680,
								630,
								190,
								191
							]
						],
						[
							[
								647
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 128831.254777,
						"Shape_Area": 650344404.004,
						"Sted": "Masfjorden",
						"ID": "1266 Masfjorden",
						"Rnr": 3044,
						"Region": "Nordhordland",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1266
					}
				},
				{
					"arcs": [
						[
							[
								90,
								-1564,
								510
							]
						],
						[
							[
								513
							]
						],
						[
							[
								514
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 155982.396152,
						"Shape_Area": 1046476945.48,
						"Sted": "Selje",
						"ID": "1441 Selje",
						"Rnr": 3049,
						"Region": "Nordfjord",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1441
					}
				},
				{
					"arcs": [
						[
							[
								-1685,
								1416,
								-447,
								-446,
								1858
							]
						],
						[
							[
								1418
							]
						],
						[
							[
								1419
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 185662.151314,
						"Shape_Area": 860179201.085,
						"Sted": "Flekkefjord",
						"ID": "1004 Flekkefjord",
						"Rnr": 3033,
						"Region": "Lister",
						"Fnr": 10,
						"Fylke": "Vest-Agder",
						"Nr": 1004
					}
				},
				{
					"arcs": [
						[
							[
								-1756,
								1414,
								-1684
							]
						],
						[
							[
								-1755,
								1412
							]
						],
						[
							[
								1420
							]
						],
						[
							[
								1421
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 153647.816015,
						"Shape_Area": 1258254154.51,
						"Sted": "Farsund",
						"ID": "1003 Farsund",
						"Rnr": 3033,
						"Region": "Lister",
						"Fnr": 10,
						"Fylke": "Vest-Agder",
						"Nr": 1003
					}
				},
				{
					"arcs": [
						[
							-432,
							-1757,
							-1682,
							-433
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 117664.785714,
						"Shape_Area": 467614871.542,
						"Sted": "Hægebostad",
						"ID": "1034 Hægebostad",
						"Rnr": 3033,
						"Region": "Lister",
						"Fnr": 10,
						"Fylke": "Vest-Agder",
						"Nr": 1034
					}
				},
				{
					"arcs": [
						[
							-459,
							-458,
							-1686,
							-1859,
							-450,
							-449,
							-448,
							-419,
							-414,
							-460
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 238236.330758,
						"Shape_Area": 1562598308.75,
						"Sted": "Sirdal",
						"ID": "1046 Sirdal",
						"Rnr": 3033,
						"Region": "Lister",
						"Fnr": 10,
						"Fylke": "Vest-Agder",
						"Nr": 1046
					}
				},
				{
					"arcs": [
						[
							1859,
							620
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 98626.3616052,
						"Shape_Area": 311194393.353,
						"Sted": "Osterøy",
						"ID": "1253 Osterøy",
						"Rnr": 3045,
						"Region": "Osterfjorden",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1253
					}
				},
				{
					"arcs": [
						[
							162,
							1860,
							571,
							-1560,
							160,
							161
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 92400.2417944,
						"Shape_Area": 291857910.086,
						"Sted": "Samnanger",
						"ID": "1242 Samnanger",
						"Rnr": 3041,
						"Region": "Bjørnefjorden",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1242
					}
				},
				{
					"arcs": [
						[
							[
								318,
								-180,
								-179,
								-178,
								-190,
								927,
								-185,
								319
							]
						],
						[
							[
								-189,
								928
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 260484.286731,
						"Shape_Area": 1818669672.55,
						"Sted": "Voss",
						"ID": "1235 Voss",
						"Rnr": 3043,
						"Region": "Voss",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1235
					}
				},
				{
					"arcs": [
						[
							182,
							1861,
							623,
							185,
							186,
							187
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 107026.746125,
						"Shape_Area": 424504603.553,
						"Sted": "Modalen",
						"ID": "1252 Modalen",
						"Rnr": 3045,
						"Region": "Osterfjorden",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1252
					}
				},
				{
					"arcs": [
						[
							[
								-1761,
								1229
							]
						],
						[
							[
								1862,
								389,
								390,
								-1769,
								1232
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 124207.416803,
						"Shape_Area": 537191945.728,
						"Sted": "Balestrand",
						"ID": "1418 Balestrand",
						"Rnr": 3050,
						"Region": "Sogn",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1418
					}
				},
				{
					"arcs": [
						[
							[
								-385,
								1863,
								1397
							]
						],
						[
							[
								1398
							]
						],
						[
							[
								1399
							]
						],
						[
							[
								1400
							]
						],
						[
							[
								1401
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 179289.653337,
						"Shape_Area": 1066872385.46,
						"Sted": "Haram",
						"ID": "1534 Haram",
						"Rnr": 3056,
						"Region": "Ålesundregionen",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1534
					}
				},
				{
					"arcs": [
						[
							-16,
							-1484,
							-1604,
							-1584,
							-454,
							-17
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 191982.018335,
						"Shape_Area": 1133252204.74,
						"Sted": "Åmli",
						"ID": "0929 Åmli",
						"Rnr": 3032,
						"Region": "Arendalregionen",
						"Fnr": 9,
						"Fylke": "Aust-Agder",
						"Nr": 929
					}
				},
				{
					"arcs": [
						[
							-48,
							-181,
							-319,
							-1763,
							1223,
							-1597
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 193840.402403,
						"Shape_Area": 1517222237.42,
						"Sted": "Aurland",
						"ID": "1421 Aurland",
						"Rnr": 3050,
						"Region": "Sogn",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1421
					}
				},
				{
					"arcs": [
						[
							397,
							-1598,
							1225,
							1864
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 160457.469832,
						"Shape_Area": 1011753764.77,
						"Sted": "Årdal",
						"ID": "1424 Årdal",
						"Rnr": 3050,
						"Region": "Sogn",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1424
					}
				},
				{
					"arcs": [
						[
							1865,
							1866,
							-395,
							-84,
							-360,
							-359,
							-383
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 220433.073194,
						"Shape_Area": 2082427810.33,
						"Sted": "Skjåk",
						"ID": "0513 Skjåk",
						"Rnr": 3018,
						"Region": "Nord-Gudbrandsdal",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 513
					}
				},
				{
					"arcs": [
						[
							-1841,
							-149,
							-148,
							-258,
							-58,
							-57,
							-56,
							1867
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 168114.348799,
						"Shape_Area": 1106000942.05,
						"Sted": "Sør-Aurdal",
						"ID": "0540 Sør-Aurdal",
						"Rnr": 3019,
						"Region": "Valdres",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 540
					}
				},
				{
					"arcs": [
						[
							-72,
							-71,
							408,
							1868,
							1869,
							-1830,
							-406
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 144822.451782,
						"Shape_Area": 960356043.317,
						"Sted": "Øystre Slidre",
						"ID": "0544 Øystre Slidre",
						"Rnr": 3019,
						"Region": "Valdres",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 544
					}
				},
				{
					"arcs": [
						[
							-151,
							-1842,
							-1868,
							-55,
							-54,
							1870,
							-1869,
							409
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 176098.472285,
						"Shape_Area": 908892586.588,
						"Sted": "Nord-Aurdal",
						"ID": "0542 Nord-Aurdal",
						"Rnr": 3019,
						"Region": "Valdres",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 542
					}
				},
				{
					"arcs": [
						[
							-373,
							-210,
							-1617,
							-1840,
							1871,
							-1866,
							-382,
							-381
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 191655.070389,
						"Shape_Area": 2261947241.86,
						"Sted": "Lesja",
						"ID": "0512 Lesja",
						"Rnr": 3018,
						"Region": "Nord-Gudbrandsdal",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 512
					}
				},
				{
					"arcs": [
						[
							371,
							-214,
							-213,
							-1619,
							369,
							370
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 158229.096648,
						"Shape_Area": 632263911.413,
						"Sted": "Rindal",
						"ID": "1567 Rindal",
						"Rnr": 3052,
						"Region": "Nordmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1567
					}
				},
				{
					"arcs": [
						[
							217,
							218,
							208,
							209,
							210,
							211,
							212,
							1872
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 220838.21582,
						"Shape_Area": 2281939493.45,
						"Sted": "Oppdal",
						"ID": "1634 Oppdal",
						"Rnr": 3059,
						"Region": "Oppdal/Rennebu",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1634
					}
				},
				{
					"arcs": [
						[
							[
								487
							]
						],
						[
							[
								488
							]
						],
						[
							[
								489
							]
						],
						[
							[
								490
							]
						],
						[
							[
								491
							]
						],
						[
							[
								492
							]
						],
						[
							[
								493
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 166257.291412,
						"Shape_Area": 1402772702.49,
						"Sted": "Hitra",
						"ID": "1617 Hitra",
						"Rnr": 3058,
						"Region": "Hitra/Frøya",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1617
					}
				},
				{
					"arcs": [
						[
							[
								-1626,
								782,
								-242,
								1873,
								1874
							]
						],
						[
							[
								-1699,
								768
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 62727.0137231,
						"Shape_Area": 124617496.587,
						"Sted": "Stokke",
						"ID": "0720 Stokke",
						"Rnr": 3025,
						"Region": "Tønsbergregionen",
						"Fnr": 7,
						"Fylke": "Vestfold",
						"Nr": 720
					}
				},
				{
					"arcs": [
						[
							1875,
							-250,
							-1491,
							285
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 55109.0489373,
						"Shape_Area": 120563989.851,
						"Sted": "Nedre Eiker",
						"ID": "0625 Nedre Eiker",
						"Rnr": 3020,
						"Region": "Drammensregionen",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 625
					}
				},
				{
					"arcs": [
						[
							[
								-1775,
								795,
								-253,
								-252,
								1876
							]
						],
						[
							[
								796
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 67050.0607122,
						"Shape_Area": 200048721.356,
						"Sted": "Sande",
						"ID": "0713 Sande",
						"Rnr": 3020,
						"Region": "Drammensregionen",
						"Fnr": 7,
						"Fylke": "Vestfold",
						"Nr": 713
					}
				},
				{
					"arcs": [
						[
							[
								-292,
								948,
								-1847,
								-298,
								-264,
								-263
							]
						],
						[
							[
								952
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 69524.3289992,
						"Shape_Area": 215648274.784,
						"Sted": "Bærum",
						"ID": "0219 Bærum",
						"Rnr": 3005,
						"Region": "Akershus Vest",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 219
					}
				},
				{
					"arcs": [
						[
							-1851,
							-1643,
							347,
							-144,
							-143
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 86959.4472606,
						"Shape_Area": 281773879.631,
						"Sted": "Hurdal",
						"ID": "0239 Hurdal",
						"Rnr": 3008,
						"Region": "Øvre Romerike",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 239
					}
				},
				{
					"arcs": [
						[
							-1534,
							1877,
							-1518,
							462
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 132054.322304,
						"Shape_Area": 355154595.498,
						"Sted": "Hamar",
						"ID": "0403 Hamar",
						"Rnr": 3012,
						"Region": "Hamarregionen",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 403
					}
				},
				{
					"arcs": [
						[
							-471,
							-470,
							-469,
							-468,
							1878,
							-1785,
							1879
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 293792.22065,
						"Shape_Area": 3169619051.04,
						"Sted": "Rendalen",
						"ID": "0432 Rendalen",
						"Rnr": 3010,
						"Region": "Fjellregionen",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 432
					}
				},
				{
					"arcs": [
						[
							1880,
							-466,
							-76,
							-405,
							-404,
							-219,
							-1787
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 184020.720777,
						"Shape_Area": 1281728042.45,
						"Sted": "Folldal",
						"ID": "0439 Folldal",
						"Rnr": 3010,
						"Region": "Fjellregionen",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 439
					}
				},
				{
					"arcs": [
						[
							-1879,
							-467,
							-1881,
							-1786
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 159350.092737,
						"Shape_Area": 937613148.107,
						"Sted": "Alvdal",
						"ID": "0438 Alvdal",
						"Rnr": 3010,
						"Region": "Fjellregionen",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 438
					}
				},
				{
					"arcs": [
						[
							-289,
							-473,
							1881,
							-1783,
							-279,
							-290
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 210222.715237,
						"Shape_Area": 1038665150.97,
						"Sted": "Os",
						"ID": "0441 Os",
						"Rnr": 3010,
						"Region": "Fjellregionen",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 441
					}
				},
				{
					"arcs": [
						[
							274,
							275,
							276,
							-1789,
							-1791,
							1882,
							-1527,
							273
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 149193.186135,
						"Shape_Area": 1230614796.3,
						"Sted": "Selbu",
						"ID": "1664 Selbu",
						"Rnr": 3061,
						"Region": "Trondheimsregionen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1664
					}
				},
				{
					"arcs": [
						[
							-1883,
							-1790,
							1883
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 68817.4311047,
						"Shape_Area": 186934995.267,
						"Sted": "Klæbu",
						"ID": "1662 Klæbu",
						"Rnr": 3061,
						"Region": "Trondheimsregionen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1662
					}
				},
				{
					"arcs": [
						[
							[
								-135,
								-36,
								-1526,
								-1530,
								1130,
								-1794
							]
						],
						[
							[
								1144
							]
						],
						[
							[
								1145
							]
						],
						[
							[
								1146
							]
						],
						[
							[
								1147
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 195542.142151,
						"Shape_Area": 1413083353.93,
						"Sted": "Åfjord",
						"ID": "1630 Åfjord",
						"Rnr": 3057,
						"Region": "Fosen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1630
					}
				},
				{
					"arcs": [
						[
							[
								1440
							]
						],
						[
							[
								1441
							]
						],
						[
							[
								1442
							]
						],
						[
							[
								1443
							]
						],
						[
							[
								1444
							]
						],
						[
							[
								1445
							]
						],
						[
							[
								1446
							]
						],
						[
							[
								1447
							]
						],
						[
							[
								1448
							]
						],
						[
							[
								1449
							]
						],
						[
							[
								1450
							]
						],
						[
							[
								1451
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 225952.823937,
						"Shape_Area": 3293926322.42,
						"Sted": "Vikna",
						"ID": "1750 Vikna",
						"Rnr": 3066,
						"Region": "Kystgruppen",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1750
					}
				},
				{
					"arcs": [
						[
							1884,
							568,
							-1532,
							-1700,
							1885,
							-114
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 113134.488171,
						"Shape_Area": 412091087.053,
						"Sted": "Marker",
						"ID": "0119 Marker",
						"Rnr": 3002,
						"Region": "Indre Østfold",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 119
					}
				},
				{
					"arcs": [
						[
							-1885,
							-113,
							567
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 61758.1345487,
						"Shape_Area": 183879491.248,
						"Sted": "Rømskog",
						"ID": "0121 Rømskog",
						"Rnr": 3002,
						"Region": "Indre Østfold",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 121
					}
				},
				{
					"arcs": [
						[
							-1538,
							-1649,
							-1647,
							2,
							1886
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 110873.405425,
						"Shape_Area": 516266323.81,
						"Sted": "Sør-Odal",
						"ID": "0419 Sør-Odal",
						"Rnr": 3011,
						"Region": "Glåmdal",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 419
					}
				},
				{
					"arcs": [
						[
							1887,
							1888,
							-133,
							1889,
							-1807
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 166850.855843,
						"Shape_Area": 1133191710.58,
						"Sted": "Grong",
						"ID": "1742 Grong",
						"Rnr": 3065,
						"Region": "Indre Namdal",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1742
					}
				},
				{
					"arcs": [
						[
							933,
							-42,
							-41,
							-134,
							-1889,
							1890
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 195568.255361,
						"Shape_Area": 2343003875.56,
						"Sted": "Snåsa",
						"ID": "1736 Snåsa",
						"Rnr": 3065,
						"Region": "Indre Namdal",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1736
					}
				},
				{
					"arcs": [
						[
							[
								1071
							]
						],
						[
							[
								1072
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 225561.027894,
						"Shape_Area": 3399817325.86,
						"Sted": "Røst",
						"ID": "1856 Røst",
						"Rnr": 3075,
						"Region": "Lofoten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1856
					}
				},
				{
					"arcs": [
						[
							[
								-1542,
								993
							]
						],
						[
							[
								995
							]
						],
						[
							[
								996
							]
						],
						[
							[
								997
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 83893.8415374,
						"Shape_Area": 401701548.565,
						"Sted": "Nesna",
						"ID": "1828 Nesna",
						"Rnr": 3072,
						"Region": "Ranaregionen",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1828
					}
				},
				{
					"arcs": [
						[
							[
								1891,
								1000,
								1892,
								-1811,
								1011,
								-1656,
								1013,
								-1654
							]
						],
						[
							[
								1041
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 272215.897051,
						"Shape_Area": 1828776297.47,
						"Sted": "Sørfold",
						"ID": "1845 Sørfold",
						"Rnr": 3073,
						"Region": "Salten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1845
					}
				},
				{
					"arcs": [
						[
							[
								-334,
								-354,
								-353,
								1103,
								1893
							]
						],
						[
							[
								1105
							]
						],
						[
							[
								1106
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 168500.618448,
						"Shape_Area": 699627131.275,
						"Sted": "Kvæfjord",
						"ID": "1911 Kvæfjord",
						"Rnr": 3077,
						"Region": "Sør-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1911
					}
				},
				{
					"arcs": [
						[
							[
								-1815,
								935,
								1894,
								938
							]
						],
						[
							[
								945
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 172305.854561,
						"Shape_Area": 1187596720.93,
						"Sted": "Ballangen",
						"ID": "1854 Ballangen",
						"Rnr": 3074,
						"Region": "Ofoten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1854
					}
				},
				{
					"arcs": [
						[
							1895,
							-356,
							1896,
							1119,
							-1857,
							1897
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 96373.7306808,
						"Shape_Area": 391451690.48,
						"Sted": "Sørreisa",
						"ID": "1925 Sørreisa",
						"Rnr": 3078,
						"Region": "Midt-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1925
					}
				},
				{
					"arcs": [
						[
							[
								-1554,
								807
							]
						],
						[
							[
								-1553,
								805
							]
						],
						[
							[
								822
							]
						],
						[
							[
								823
							]
						],
						[
							[
								824
							]
						],
						[
							[
								825
							]
						],
						[
							[
								826
							]
						],
						[
							[
								827
							]
						],
						[
							[
								828
							]
						],
						[
							[
								829
							]
						],
						[
							[
								830
							]
						],
						[
							[
								831
							]
						],
						[
							[
								832
							]
						],
						[
							[
								833
							]
						],
						[
							[
								834
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 338862.777255,
						"Shape_Area": 5881307712.39,
						"Sted": "Karlsøy",
						"ID": "1936 Karlsøy",
						"Rnr": 3079,
						"Region": "Tromsøregionen",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1936
					}
				},
				{
					"arcs": [
						[
							1123,
							-332,
							-358,
							-357,
							-1896,
							1898
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 297364.11396,
						"Shape_Area": 2704697913.85,
						"Sted": "Bardu",
						"ID": "1922 Bardu",
						"Rnr": 3078,
						"Region": "Midt-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1922
					}
				},
				{
					"arcs": [
						[
							[
								-1743,
								903
							]
						],
						[
							[
								909
							]
						],
						[
							[
								910
							]
						],
						[
							[
								911
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 457043.680006,
						"Shape_Area": 5147009631.09,
						"Sted": "Sør-Varanger",
						"ID": "2030 Sør-Varanger",
						"Rnr": 3083,
						"Region": "Øst-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2030
					}
				},
				{
					"arcs": [
						[
							-1557,
							315,
							898
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 201112.384678,
						"Shape_Area": 2457433652.74,
						"Sted": "Berlevåg",
						"ID": "2024 Berlevåg",
						"Rnr": 3083,
						"Region": "Øst-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2024
					}
				},
				{
					"arcs": [
						[
							[
								-386,
								-191,
								1304
							]
						],
						[
							[
								1305
							]
						],
						[
							[
								1306
							]
						],
						[
							[
								1307
							]
						],
						[
							[
								1308
							]
						],
						[
							[
								1309
							]
						],
						[
							[
								1310
							]
						],
						[
							[
								1311
							]
						],
						[
							[
								1312
							]
						],
						[
							[
								1313
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 159900.640973,
						"Shape_Area": 986550159.064,
						"Sted": "Gulen",
						"ID": "1411 Gulen",
						"Rnr": 3048,
						"Region": "HAFS",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1411
					}
				},
				{
					"arcs": [
						[
							[
								-1759,
								1254,
								1899
							]
						],
						[
							[
								1261
							]
						],
						[
							[
								1262
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 79468.8118008,
						"Shape_Area": 335217539.067,
						"Sted": "Strand",
						"ID": "1130 Strand",
						"Rnr": 3038,
						"Region": "Ryfylke",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1130
					}
				},
				{
					"arcs": [
						[
							[
								411,
								-1760,
								-1900,
								1255,
								-1688,
								1257,
								-1687
							]
						],
						[
							[
								1900,
								1263
							]
						],
						[
							[
								1265
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 182210.756396,
						"Shape_Area": 1197782080.66,
						"Sted": "Hjelmeland",
						"ID": "1133 Hjelmeland",
						"Rnr": 3038,
						"Region": "Ryfylke",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1133
					}
				},
				{
					"arcs": [
						[
							435,
							-1468,
							432,
							433,
							434
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 133571.193688,
						"Shape_Area": 887362452.86,
						"Sted": "Åseral",
						"ID": "1026 Åseral",
						"Rnr": 3034,
						"Region": "Mandalsregionen",
						"Fnr": 10,
						"Fylke": "Vest-Agder",
						"Nr": 1026
					}
				},
				{
					"arcs": [
						[
							163,
							164,
							570,
							-1861
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 106607.863819,
						"Shape_Area": 514354948.883,
						"Sted": "Fusa",
						"ID": "1241 Fusa",
						"Rnr": 3041,
						"Region": "Bjørnefjorden",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1241
					}
				},
				{
					"arcs": [
						[
							174,
							611,
							1901
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 105665.383049,
						"Shape_Area": 277931775.691,
						"Sted": "Jondal",
						"ID": "1227 Jondal",
						"Rnr": 3042,
						"Region": "Hardanger",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1227
					}
				},
				{
					"arcs": [
						[
							[
								-1592,
								-25,
								-1567,
								614
							]
						],
						[
							[
								-1566,
								173,
								-1902,
								612
							]
						],
						[
							[
								-1828,
								-1569,
								617
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 236526.993128,
						"Shape_Area": 1541632811.16,
						"Sted": "Ullensvang",
						"ID": "1231 Ullensvang",
						"Rnr": 3042,
						"Region": "Hardanger",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1231
					}
				},
				{
					"arcs": [
						[
							-394,
							-393,
							1902,
							1903,
							-87,
							-86
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 144905.550354,
						"Shape_Area": 674603688.434,
						"Sted": "Jølster",
						"ID": "1431 Jølster",
						"Rnr": 3051,
						"Region": "Sunnfjord",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1431
					}
				},
				{
					"arcs": [
						[
							1402
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 127197.415901,
						"Shape_Area": 1009237576.71,
						"Sted": "Sandøy",
						"ID": "1546 Sandøy",
						"Rnr": 3056,
						"Region": "Ålesundregionen",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1546
					}
				},
				{
					"arcs": [
						[
							[
								-1578,
								1335,
								-429,
								-428,
								-1766
							]
						],
						[
							[
								1341
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 117489.254039,
						"Shape_Area": 547775495.787,
						"Sted": "Søgne",
						"ID": "1018 Søgne",
						"Rnr": 3035,
						"Region": "Kristiansandregionen",
						"Fnr": 10,
						"Fylke": "Vest-Agder",
						"Nr": 1018
					}
				},
				{
					"arcs": [
						[
							443,
							-1691,
							-1580,
							-1477,
							-1767,
							441,
							442
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 168247.519906,
						"Shape_Area": 677250794.129,
						"Sted": "Birkenes",
						"ID": "0928 Birkenes",
						"Rnr": 3035,
						"Region": "Kristiansandregionen",
						"Fnr": 9,
						"Fylke": "Aust-Agder",
						"Nr": 928
					}
				},
				{
					"arcs": [
						[
							[
								-1768,
								-1582,
								-1603,
								1367,
								-1602,
								1369
							]
						],
						[
							[
								1375
							]
						],
						[
							[
								1376
							]
						],
						[
							[
								1377
							]
						],
						[
							[
								1378
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 159562.464993,
						"Shape_Area": 920770834.15,
						"Sted": "Arendal",
						"ID": "0906 Arendal",
						"Rnr": 3032,
						"Region": "Arendalregionen",
						"Fnr": 9,
						"Fylke": "Aust-Agder",
						"Nr": 906
					}
				},
				{
					"arcs": [
						[
							26,
							1904,
							1905,
							21,
							22,
							23,
							24,
							25
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 272771.976329,
						"Shape_Area": 3120431008.44,
						"Sted": "Vinje",
						"ID": "0834 Vinje",
						"Rnr": 3030,
						"Region": "Vest-Telemark",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 834
					}
				},
				{
					"arcs": [
						[
							[
								-1697,
								1209,
								-1480,
								1906,
								-377
							]
						],
						[
							[
								1213
							]
						],
						[
							[
								1214
							]
						],
						[
							[
								1215
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 119539.93661,
						"Shape_Area": 585164596.257,
						"Sted": "Molde",
						"ID": "1502 Molde",
						"Rnr": 3053,
						"Region": "Romsdal",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1502
					}
				},
				{
					"arcs": [
						[
							-1606,
							1365,
							-1605,
							-1482,
							-1607,
							-237,
							1363
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 122253.845631,
						"Shape_Area": 585098467.212,
						"Sted": "Risør",
						"ID": "0901 Risør",
						"Rnr": 3032,
						"Region": "Arendalregionen",
						"Fnr": 9,
						"Fylke": "Aust-Agder",
						"Nr": 901
					}
				},
				{
					"arcs": [
						[
							232,
							233,
							-1698,
							-1608,
							231
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 76703.3666881,
						"Shape_Area": 211088205.581,
						"Sted": "Siljan",
						"ID": "0811 Siljan",
						"Rnr": 3027,
						"Region": "Grenland",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 811
					}
				},
				{
					"arcs": [
						[
							243,
							244,
							245,
							1907,
							-233,
							242
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 77883.1940065,
						"Shape_Area": 277217475.522,
						"Sted": "Lardal",
						"ID": "0728 Lardal",
						"Rnr": 3026,
						"Region": "Sandefjord/Larvik",
						"Fnr": 7,
						"Fylke": "Vestfold",
						"Nr": 728
					}
				},
				{
					"arcs": [
						[
							-1871,
							-53,
							-1831,
							-1870
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 107134.174163,
						"Shape_Area": 460868546.6,
						"Sted": "Vestre Slidre",
						"ID": "0543 Vestre Slidre",
						"Rnr": 3019,
						"Region": "Valdres",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 543
					}
				},
				{
					"arcs": [
						[
							[
								367,
								-1621,
								1187
							]
						],
						[
							[
								1193
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 100384.815654,
						"Shape_Area": 383794168.394,
						"Sted": "Halsa",
						"ID": "1571 Halsa",
						"Rnr": 3052,
						"Region": "Nordmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1571
					}
				},
				{
					"arcs": [
						[
							[
								379,
								1194
							]
						],
						[
							[
								1195
							]
						],
						[
							[
								1196
							]
						],
						[
							[
								1197
							]
						],
						[
							[
								1198
							]
						],
						[
							[
								1199
							]
						],
						[
							[
								1200
							]
						],
						[
							[
								1201
							]
						],
						[
							[
								1202
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 156083.68671,
						"Shape_Area": 1055173428.11,
						"Sted": "Aure",
						"ID": "1576 Aure",
						"Rnr": 3052,
						"Region": "Nordmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1576
					}
				},
				{
					"arcs": [
						[
							[
								299,
								835,
								-1702,
								838,
								-1499
							]
						],
						[
							[
								840
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 54401.8172459,
						"Shape_Area": 144154745.727,
						"Sted": "Røyken",
						"ID": "0627 Røyken",
						"Rnr": 3086,
						"Region": "Vestviken",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 627
					}
				},
				{
					"arcs": [
						[
							-1705,
							535
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 48388.6219841,
						"Shape_Area": 117792628.463,
						"Sted": "Nesodden",
						"ID": "0216 Nesodden",
						"Rnr": 3006,
						"Region": "Follo",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 216
					}
				},
				{
					"arcs": [
						[
							-1779,
							-1848,
							540,
							119
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 27292.4622539,
						"Shape_Area": 44171913.9105,
						"Sted": "Oppegård",
						"ID": "0217 Oppegård",
						"Rnr": 3006,
						"Region": "Follo",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 217
					}
				},
				{
					"arcs": [
						[
							-104,
							-103,
							-102,
							-122,
							-121,
							-120,
							799,
							291,
							-262,
							292
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 108180.695084,
						"Shape_Area": 485782944.357,
						"Sted": "Oslo",
						"ID": "0301 Oslo",
						"Rnr": 3009,
						"Region": "Oslo",
						"Fnr": 3,
						"Fylke": "Oslo",
						"Nr": 301
					}
				},
				{
					"arcs": [
						[
							1908,
							100,
							101,
							-1712
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 35965.6025477,
						"Shape_Area": 66938364.7293,
						"Sted": "Lørenskog",
						"ID": "0230 Lørenskog",
						"Rnr": 3007,
						"Region": "Nedre Romerike",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 230
					}
				},
				{
					"arcs": [
						[
							-1507,
							99,
							-1909,
							-1711
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 40635.4039822,
						"Shape_Area": 72265706.2566,
						"Sted": "Rælingen",
						"ID": "0228 Rælingen",
						"Rnr": 3007,
						"Region": "Nedre Romerike",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 228
					}
				},
				{
					"arcs": [
						[
							-1516,
							-260,
							1909
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 83626.1241205,
						"Shape_Area": 220440794.962,
						"Sted": "Jevnaker",
						"ID": "0532 Jevnaker",
						"Rnr": 3015,
						"Region": "Hadeland",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 532
					}
				},
				{
					"arcs": [
						[
							-348,
							-347,
							-1517,
							-1910,
							-259,
							-146,
							-145
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 145858.490845,
						"Shape_Area": 763290036.907,
						"Sted": "Gran",
						"ID": "0534 Gran",
						"Rnr": 3015,
						"Region": "Hadeland",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 534
					}
				},
				{
					"arcs": [
						[
							-472,
							-1880,
							-1784,
							-1882
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 192677.842208,
						"Shape_Area": 1126937560.27,
						"Sted": "Tolga",
						"ID": "0436 Tolga",
						"Rnr": 3010,
						"Region": "Fjellregionen",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 436
					}
				},
				{
					"arcs": [
						[
							-282,
							-281,
							-215,
							-372,
							-1852
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 124509.857191,
						"Shape_Area": 611816344.241,
						"Sted": "Meldal",
						"ID": "1636 Meldal",
						"Rnr": 3060,
						"Region": "Orkdalregionen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1636
					}
				},
				{
					"arcs": [
						[
							215,
							216,
							-1873,
							213,
							214
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 160186.713485,
						"Shape_Area": 948841372.18,
						"Sted": "Rennebu",
						"ID": "1635 Rennebu",
						"Rnr": 3059,
						"Region": "Oppdal/Rennebu",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1635
					}
				},
				{
					"arcs": [
						[
							-1528,
							-1884,
							-1792,
							791
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 112054.16448,
						"Shape_Area": 524756438.924,
						"Sted": "Trondheim",
						"ID": "1601 Trondheim",
						"Rnr": 3061,
						"Region": "Trondheimsregionen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1601
					}
				},
				{
					"arcs": [
						[
							[
								-45,
								1251
							]
						],
						[
							[
								1252
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 67832.3737854,
						"Shape_Area": 247320989.232,
						"Sted": "Frosta",
						"ID": "1717 Frosta",
						"Rnr": 3063,
						"Region": "Stjørdalsregionen",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1717
					}
				},
				{
					"arcs": [
						[
							-1796,
							-274,
							-273,
							1250,
							-44
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 148312.220005,
						"Shape_Area": 1000642341.81,
						"Sted": "Stjørdal",
						"ID": "1714 Stjørdal",
						"Rnr": 3063,
						"Region": "Stjørdalsregionen",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1714
					}
				},
				{
					"arcs": [
						[
							-3,
							-2,
							-112,
							-111,
							1910,
							-1849,
							-4
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 133448.797467,
						"Shape_Area": 638173038.438,
						"Sted": "Nes",
						"ID": "0236 Nes",
						"Rnr": 3008,
						"Region": "Øvre Romerike",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 236
					}
				},
				{
					"arcs": [
						[
							-1717,
							-1539,
							-1887,
							3,
							4,
							5
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 110951.312156,
						"Shape_Area": 507212137.203,
						"Sted": "Nord-Odal",
						"ID": "0418 Nord-Odal",
						"Rnr": 3011,
						"Region": "Glåmdal",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 418
					}
				},
				{
					"arcs": [
						[
							1409,
							-11,
							-1536,
							1911,
							469,
							-1719
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 242483.763391,
						"Shape_Area": 3017040311.04,
						"Sted": "Trysil",
						"ID": "0428 Trysil",
						"Rnr": 3013,
						"Region": "Sør Østerdal",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 428
					}
				},
				{
					"arcs": [
						[
							797,
							-1853,
							-1714,
							-276,
							290
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 165947.774067,
						"Shape_Area": 1326774553.31,
						"Sted": "Tydal",
						"ID": "1665 Tydal",
						"Rnr": 3062,
						"Region": "Rørosregionen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1665
					}
				},
				{
					"arcs": [
						[
							132,
							133,
							-40,
							1912,
							-1800,
							131
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 139461.484825,
						"Shape_Area": 728581741.184,
						"Sted": "Overhalla",
						"ID": "1744 Overhalla",
						"Rnr": 3067,
						"Region": "Midtre Namdal",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1744
					}
				},
				{
					"arcs": [
						[
							40,
							-1797,
							-1707,
							499,
							-1708,
							501,
							-1645,
							37,
							38,
							39
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 205124.885244,
						"Shape_Area": 1615974015.66,
						"Sted": "Steinkjer",
						"ID": "1702 Steinkjer",
						"Rnr": 3064,
						"Region": "Innherred",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1702
					}
				},
				{
					"arcs": [
						[
							-1808,
							-1890,
							-132,
							-131,
							320,
							930,
							321,
							-203
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 157983.59584,
						"Shape_Area": 760353285.474,
						"Sted": "Høylandet",
						"ID": "1743 Høylandet",
						"Rnr": 3065,
						"Region": "Indre Namdal",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1743
					}
				},
				{
					"arcs": [
						[
							[
								-1723,
								713,
								197
							]
						],
						[
							[
								734
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 138474.479522,
						"Shape_Area": 658158236.664,
						"Sted": "Vevelstad",
						"ID": "1816 Vevelstad",
						"Rnr": 3068,
						"Region": "Sør-Helgeland",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1816
					}
				},
				{
					"arcs": [
						[
							[
								990,
								-342,
								-341,
								991,
								-1541
							]
						],
						[
							[
								-340,
								-168,
								998
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 230409.477086,
						"Shape_Area": 1651654896.19,
						"Sted": "Hemnes",
						"ID": "1832 Hemnes",
						"Rnr": 3072,
						"Region": "Ranaregionen",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1832
					}
				},
				{
					"arcs": [
						[
							[
								-1810,
								-1658,
								-343,
								-337,
								1003
							]
						],
						[
							[
								-339,
								1042
							]
						],
						[
							[
								1043
							]
						],
						[
							[
								1044
							]
						],
						[
							[
								1045
							]
						],
						[
							[
								1046
							]
						],
						[
							[
								1047
							]
						],
						[
							[
								1048
							]
						],
						[
							[
								1049
							]
						],
						[
							[
								1050
							]
						],
						[
							[
								1051
							]
						],
						[
							[
								1052
							]
						],
						[
							[
								1053
							]
						],
						[
							[
								1054
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 289476.226333,
						"Shape_Area": 2743048730.83,
						"Sted": "Meløy",
						"ID": "1837 Meløy",
						"Rnr": 3073,
						"Region": "Salten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1837
					}
				},
				{
					"arcs": [
						[
							1001,
							-1814,
							1009,
							-1812,
							-1893
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 203705.797227,
						"Shape_Area": 1287630480.11,
						"Sted": "Fauske",
						"ID": "1841 Fauske",
						"Rnr": 3073,
						"Region": "Salten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1841
					}
				},
				{
					"arcs": [
						[
							-1664,
							1116,
							-1732
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 163146.701726,
						"Shape_Area": 1077179532.01,
						"Sted": "Torsken",
						"ID": "1928 Torsken",
						"Rnr": 3078,
						"Region": "Midt-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1928
					}
				},
				{
					"arcs": [
						[
							[
								-355,
								1118,
								-1897
							]
						],
						[
							[
								1124
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 106665.629256,
						"Shape_Area": 472833539.939,
						"Sted": "Dyrøy",
						"ID": "1926 Dyrøy",
						"Rnr": 3078,
						"Region": "Midt-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1926
					}
				},
				{
					"arcs": [
						[
							[
								-1820,
								859,
								-1822
							]
						],
						[
							[
								-1819,
								306,
								841
							]
						],
						[
							[
								869
							]
						],
						[
							[
								870
							]
						],
						[
							[
								871
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 283131.394282,
						"Shape_Area": 2810944854.96,
						"Sted": "Loppa",
						"ID": "2014 Loppa",
						"Rnr": 3081,
						"Region": "Vest-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2014
					}
				},
				{
					"arcs": [
						[
							[
								-306,
								311,
								-1735,
								881,
								-307
							]
						],
						[
							[
								888
							]
						],
						[
							[
								889
							]
						],
						[
							[
								890
							]
						],
						[
							[
								891
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 326875.898455,
						"Shape_Area": 2685920518.39,
						"Sted": "Kvænangen",
						"ID": "1943 Kvænangen",
						"Rnr": 3080,
						"Region": "Nord-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1943
					}
				},
				{
					"arcs": [
						[
							[
								-1742,
								-1670,
								-310,
								913,
								-318
							]
						],
						[
							[
								923
							]
						],
						[
							[
								924
							]
						],
						[
							[
								925
							]
						],
						[
							[
								926
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 389635.051352,
						"Shape_Area": 5752187627.33,
						"Sted": "Lebesby",
						"ID": "2022 Lebesby",
						"Rnr": 3082,
						"Region": "Midt-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2022
					}
				},
				{
					"arcs": [
						[
							[
								-1754,
								-1858,
								1343,
								-423,
								1913,
								448
							]
						],
						[
							[
								1344
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 181440.774772,
						"Shape_Area": 1067306628.8,
						"Sted": "Eigersund",
						"ID": "1101 Eigersund",
						"Rnr": 3036,
						"Region": "Dalane",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1101
					}
				},
				{
					"arcs": [
						[
							[
								-1758,
								-1750,
								-1747,
								-1677,
								-1825,
								1281
							]
						],
						[
							[
								1292
							]
						],
						[
							[
								1293
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 85564.7651018,
						"Shape_Area": 356042933.892,
						"Sted": "Sandnes",
						"ID": "1102 Sandnes",
						"Rnr": 3039,
						"Region": "Stavangerregionen",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1102
					}
				},
				{
					"arcs": [
						[
							[
								-1901,
								1264
							]
						],
						[
							[
								1266
							]
						],
						[
							[
								1267
							]
						],
						[
							[
								1268
							]
						],
						[
							[
								1269
							]
						],
						[
							[
								1270
							]
						],
						[
							[
								1271
							]
						],
						[
							[
								1272
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 93063.8247062,
						"Shape_Area": 392118581.77,
						"Sted": "Finnøy",
						"ID": "1141 Finnøy",
						"Rnr": 3038,
						"Region": "Ryfylke",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1141
					}
				},
				{
					"arcs": [
						[
							[
								-197,
								-1457,
								-1746,
								1352
							]
						],
						[
							[
								1362
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 116709.790794,
						"Shape_Area": 372254964.334,
						"Sted": "Haugesund",
						"ID": "1106 Haugesund",
						"Rnr": 3037,
						"Region": "Haugesundregionen",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1106
					}
				},
				{
					"arcs": [
						[
							[
								-1751,
								680
							]
						],
						[
							[
								-1679,
								674
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 66980.0555698,
						"Shape_Area": 225535384.934,
						"Sted": "Stord",
						"ID": "1221 Stord",
						"Rnr": 3046,
						"Region": "Sunnhordland",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1221
					}
				},
				{
					"arcs": [
						[
							[
								1314
							]
						],
						[
							[
								1315
							]
						],
						[
							[
								1316
							]
						],
						[
							[
								1317
							]
						],
						[
							[
								1318
							]
						],
						[
							[
								1319
							]
						],
						[
							[
								1320
							]
						],
						[
							[
								1321
							]
						],
						[
							[
								1322
							]
						],
						[
							[
								1323
							]
						],
						[
							[
								1324
							]
						],
						[
							[
								1325
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 174517.374372,
						"Shape_Area": 1756623679.69,
						"Sted": "Solund",
						"ID": "1412 Solund",
						"Rnr": 3048,
						"Region": "HAFS",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1412
					}
				},
				{
					"arcs": [
						[
							[
								-1765,
								89,
								505
							]
						],
						[
							[
								515
							]
						],
						[
							[
								516
							]
						],
						[
							[
								517
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 230592.772507,
						"Shape_Area": 1937619787.88,
						"Sted": "Bremanger",
						"ID": "1438 Bremanger",
						"Rnr": 3049,
						"Region": "Nordfjord",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1438
					}
				},
				{
					"arcs": [
						[
							447,
							-1914,
							-422,
							-421,
							-420
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 137795.600649,
						"Shape_Area": 653956444.137,
						"Sted": "Bjerkreim",
						"ID": "1114 Bjerkreim",
						"Rnr": 3036,
						"Region": "Dalane",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1114
					}
				},
				{
					"arcs": [
						[
							[
								-174,
								-173,
								-1826,
								689,
								-175
							]
						],
						[
							[
								-165,
								-176,
								697
							]
						],
						[
							[
								698
							]
						],
						[
							[
								699
							]
						],
						[
							[
								700
							]
						],
						[
							[
								701
							]
						],
						[
							[
								702
							]
						],
						[
							[
								703
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 203213.458689,
						"Shape_Area": 1570347896.6,
						"Sted": "Kvinnherad",
						"ID": "1224 Kvinnherad",
						"Rnr": 3046,
						"Region": "Sunnhordland",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1224
					}
				},
				{
					"arcs": [
						[
							-21,
							-1565,
							459,
							-413,
							-412,
							-411,
							-22
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 190533.243993,
						"Shape_Area": 1469630938.74,
						"Sted": "Bykle",
						"ID": "0941 Bykle",
						"Rnr": 3031,
						"Region": "Setesdal",
						"Fnr": 9,
						"Fylke": "Aust-Agder",
						"Nr": 941
					}
				},
				{
					"arcs": [
						[
							[
								184,
								622,
								-1862,
								183
							]
						],
						[
							[
								188,
								624,
								189,
								-177,
								-162,
								-166,
								625
							]
						],
						[
							[
								-1860,
								621
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 212223.475139,
						"Shape_Area": 757594655.484,
						"Sted": "Vaksdal",
						"ID": "1251 Vaksdal",
						"Rnr": 3045,
						"Region": "Osterfjorden",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1251
					}
				},
				{
					"arcs": [
						[
							[
								-1863,
								1233,
								386,
								387,
								388
							]
						],
						[
							[
								-1764,
								-188,
								-192,
								385,
								1221
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 202036.835989,
						"Shape_Area": 1115414594.14,
						"Sted": "Høyanger",
						"ID": "1416 Høyanger",
						"Rnr": 3050,
						"Region": "Sogn",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1416
					}
				},
				{
					"arcs": [
						[
							[
								-1904,
								1914,
								1236,
								-1681,
								-88
							]
						],
						[
							[
								402,
								1248
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 134597.847974,
						"Shape_Area": 397805758.637,
						"Sted": "Naustdal",
						"ID": "1433 Naustdal",
						"Rnr": 3051,
						"Region": "Sunnfjord",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1433
					}
				},
				{
					"arcs": [
						[
							-392,
							-391,
							-1829,
							401,
							1235,
							-1915,
							-1903
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 192765.80903,
						"Shape_Area": 612712616.34,
						"Sted": "Førde",
						"ID": "1432 Førde",
						"Rnr": 3051,
						"Region": "Sunnfjord",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1432
					}
				},
				{
					"arcs": [
						[
							[
								-1690,
								1171
							]
						],
						[
							[
								-1474,
								1160
							]
						],
						[
							[
								-1473,
								1156
							]
						],
						[
							[
								1174
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 90599.4070031,
						"Shape_Area": 257514761.349,
						"Sted": "Ulstein",
						"ID": "1516 Ulstein",
						"Rnr": 3055,
						"Region": "Søre Sunnmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1516
					}
				},
				{
					"arcs": [
						[
							[
								1915,
								1395
							]
						],
						[
							[
								1403
							]
						],
						[
							[
								1404
							]
						],
						[
							[
								1405
							]
						],
						[
							[
								1406
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 75737.5219807,
						"Shape_Area": 191805093.671,
						"Sted": "Ålesund",
						"ID": "1504 Ålesund",
						"Rnr": 3056,
						"Region": "Ålesundregionen",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1504
					}
				},
				{
					"arcs": [
						[
							-1586,
							-1692,
							16,
							17,
							18,
							1916
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 172270.64833,
						"Shape_Area": 1281562514.88,
						"Sted": "Fyresdal",
						"ID": "0831 Fyresdal",
						"Rnr": 3030,
						"Region": "Vest-Telemark",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 831
					}
				},
				{
					"arcs": [
						[
							1917,
							-1587,
							-1917,
							19,
							20,
							-1906
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 180813.919483,
						"Shape_Area": 987628530.687,
						"Sted": "Tokke",
						"ID": "0833 Tokke",
						"Rnr": 3030,
						"Region": "Vest-Telemark",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 833
					}
				},
				{
					"arcs": [
						[
							29,
							30,
							-1588,
							-1918,
							-1905,
							27,
							28
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 172740.796306,
						"Shape_Area": 719487512.579,
						"Sted": "Seljord",
						"ID": "0828 Seljord",
						"Rnr": 3030,
						"Region": "Vest-Telemark",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 828
					}
				},
				{
					"arcs": [
						[
							395,
							396,
							-1865,
							1226,
							-1770,
							393,
							-85,
							394
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 285850.371919,
						"Shape_Area": 2815057092.35,
						"Sted": "Luster",
						"ID": "1426 Luster",
						"Rnr": 3050,
						"Region": "Sogn",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1426
					}
				},
				{
					"arcs": [
						[
							-1839,
							407,
							-396,
							-1867,
							-1872
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 229843.213852,
						"Shape_Area": 1968227927.47,
						"Sted": "Lom",
						"ID": "0514 Lom",
						"Rnr": 3018,
						"Region": "Nord-Gudbrandsdal",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 514
					}
				},
				{
					"arcs": [
						[
							-1575,
							-1689,
							79,
							80,
							81
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 63264.0922354,
						"Shape_Area": 189910767.094,
						"Sted": "Hornindal",
						"ID": "1444 Hornindal",
						"Rnr": 3049,
						"Region": "Nordfjord",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1444
					}
				},
				{
					"arcs": [
						[
							[
								-1694,
								1152,
								1918
							]
						],
						[
							[
								-1693,
								359,
								-83,
								-82,
								360,
								-1772,
								1919,
								1150
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 180474.770058,
						"Shape_Area": 950448622.058,
						"Sted": "Stranda",
						"ID": "1525 Stranda",
						"Rnr": 3054,
						"Region": "Storfjord",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1525
					}
				},
				{
					"arcs": [
						[
							[
								-384,
								-363,
								1394,
								-1916,
								1396,
								-1864
							]
						],
						[
							[
								1407
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 64168.6174829,
						"Shape_Area": 158819229.555,
						"Sted": "Skodje",
						"ID": "1529 Skodje",
						"Rnr": 3056,
						"Region": "Ålesundregionen",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1529
					}
				},
				{
					"arcs": [
						[
							[
								1216
							]
						],
						[
							[
								1217
							]
						],
						[
							[
								1218
							]
						],
						[
							[
								1219
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 72648.4086432,
						"Shape_Area": 277464858.371,
						"Sted": "Midsund",
						"ID": "1545 Midsund",
						"Rnr": 3053,
						"Region": "Romsdal",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1545
					}
				},
				{
					"arcs": [
						[
							[
								-1695,
								-1919,
								1153,
								-1696,
								364,
								365
							]
						],
						[
							[
								-1920,
								-1771,
								1149
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 85134.0039106,
						"Shape_Area": 274041540.126,
						"Sted": "Stordal",
						"ID": "1526 Stordal",
						"Rnr": 3054,
						"Region": "Storfjord",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1526
					}
				},
				{
					"arcs": [
						[
							[
								-378,
								-1907,
								-1481,
								1211,
								-379,
								1204,
								-375
							]
						],
						[
							[
								1220
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 168097.449503,
						"Shape_Area": 1125089086.11,
						"Sted": "Fræna",
						"ID": "1548 Fræna",
						"Rnr": 3053,
						"Region": "Romsdal",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1548
					}
				},
				{
					"arcs": [
						[
							[
								375,
								376,
								377,
								-1773,
								1191
							]
						],
						[
							[
								1203
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 113852.413791,
						"Shape_Area": 470867718.993,
						"Sted": "Gjemnes",
						"ID": "1557 Gjemnes",
						"Rnr": 3052,
						"Region": "Nordmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1557
					}
				},
				{
					"arcs": [
						[
							-1836,
							-1833,
							-31,
							-226
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 76814.3135985,
						"Shape_Area": 261393468.436,
						"Sted": "Bø",
						"ID": "0821 Bø",
						"Rnr": 3028,
						"Region": "Midt-Telemark",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 821
					}
				},
				{
					"arcs": [
						[
							-1612,
							-1837,
							-60,
							-257
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 83076.2196386,
						"Shape_Area": 373585576.065,
						"Sted": "Krødsherad",
						"ID": "0622 Krødsherad",
						"Rnr": 3023,
						"Region": "Midt-Buskerud",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 622
					}
				},
				{
					"arcs": [
						[
							71,
							72,
							73,
							-1844
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 214914.001638,
						"Shape_Area": 1136802615.21,
						"Sted": "Nord-Fron",
						"ID": "0516 Nord-Fron",
						"Rnr": 3017,
						"Region": "Midt-Gudbrandsdal",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 516
					}
				},
				{
					"arcs": [
						[
							-1874,
							-241,
							-247,
							-246,
							1920
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 65691.4742015,
						"Shape_Area": 188177084.873,
						"Sted": "Andebu",
						"ID": "0719 Andebu",
						"Rnr": 3025,
						"Region": "Tønsbergregionen",
						"Fnr": 7,
						"Fylke": "Vestfold",
						"Nr": 719
					}
				},
				{
					"arcs": [
						[
							[
								1921,
								-1627,
								-1875,
								-1921,
								-245,
								-1633,
								1922,
								777
							]
						],
						[
							[
								787
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 106458.334241,
						"Shape_Area": 250005020.524,
						"Sted": "Re",
						"ID": "0716 Re",
						"Rnr": 3025,
						"Region": "Tønsbergregionen",
						"Fnr": 7,
						"Fylke": "Vestfold",
						"Nr": 716
					}
				},
				{
					"arcs": [
						[
							[
								-1628,
								-1922,
								778
							]
						],
						[
							[
								788
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 56066.5464144,
						"Shape_Area": 149251723.607,
						"Sted": "Horten",
						"ID": "0701 Horten",
						"Rnr": 3025,
						"Region": "Tønsbergregionen",
						"Fnr": 7,
						"Fylke": "Vestfold",
						"Nr": 701
					}
				},
				{
					"arcs": [
						[
							-1923,
							-1632,
							252,
							776
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 54383.1714537,
						"Shape_Area": 95684519.2794,
						"Sted": "Holmestrand",
						"ID": "0702 Holmestrand",
						"Rnr": 3025,
						"Region": "Tønsbergregionen",
						"Fnr": 7,
						"Fylke": "Vestfold",
						"Nr": 702
					}
				},
				{
					"arcs": [
						[
							-1776,
							-1877,
							-251,
							-1876,
							286,
							793
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 66410.0151143,
						"Shape_Area": 147346792.642,
						"Sted": "Drammen",
						"ID": "0602 Drammen",
						"Rnr": 3020,
						"Region": "Drammensregionen",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 602
					}
				},
				{
					"arcs": [
						[
							-1911,
							-110,
							-1780,
							-1641,
							-1850
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 80224.7971277,
						"Shape_Area": 251521248.566,
						"Sted": "Ullensaker",
						"ID": "0235 Ullensaker",
						"Rnr": 3008,
						"Region": "Øvre Romerike",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 235
					}
				},
				{
					"arcs": [
						[
							110,
							1923,
							-1509,
							-1710,
							108,
							109
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 72854.5683895,
						"Shape_Area": 206090107.486,
						"Sted": "Sørum",
						"ID": "0226 Sørum",
						"Rnr": 3007,
						"Region": "Nedre Romerike",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 226
					}
				},
				{
					"arcs": [
						[
							-115,
							-1886,
							-1701,
							-1502,
							-1782,
							-1637
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 82083.037543,
						"Shape_Area": 236566568.982,
						"Sted": "Eidsberg",
						"ID": "0125 Eidsberg",
						"Rnr": 3002,
						"Region": "Indre Østfold",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 125
					}
				},
				{
					"arcs": [
						[
							-1,
							532,
							112,
							113,
							114,
							115,
							-1506,
							-1924,
							111
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 154539.072757,
						"Shape_Area": 961459468.432,
						"Sted": "Aurskog Høland",
						"ID": "0221 Aurskog Høland",
						"Rnr": 3007,
						"Region": "Nedre Romerike",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 221
					}
				},
				{
					"arcs": [
						[
							-1533,
							-8,
							-7,
							-6,
							-349,
							-141,
							-1519,
							-1878
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 128781.781415,
						"Shape_Area": 729094150.342,
						"Sted": "Stange",
						"ID": "0417 Stange",
						"Rnr": 3012,
						"Region": "Hamarregionen",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 417
					}
				},
				{
					"arcs": [
						[
							67,
							68,
							-1843,
							66
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 159953.373747,
						"Shape_Area": 1249166469.49,
						"Sted": "Ringebu",
						"ID": "0520 Ringebu",
						"Rnr": 3017,
						"Region": "Midt-Gudbrandsdal",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 520
					}
				},
				{
					"arcs": [
						[
							1924,
							-461,
							-451,
							-67,
							-66,
							465,
							466,
							467
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 286516.359653,
						"Shape_Area": 2168234442.93,
						"Sted": "Stor-Elvdal",
						"ID": "0430 Stor-Elvdal",
						"Rnr": 3013,
						"Region": "Sør Østerdal",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 430
					}
				},
				{
					"arcs": [
						[
							-1535,
							-464,
							-463,
							-462,
							-1925,
							468,
							-1912
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 191851.323596,
						"Shape_Area": 1339350823.01,
						"Sted": "Åmot",
						"ID": "0429 Åmot",
						"Rnr": 3013,
						"Region": "Sør Østerdal",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 429
					}
				},
				{
					"arcs": [
						[
							[
								-1913,
								-39,
								-1799,
								547,
								-1801
							]
						],
						[
							[
								-1798,
								545
							]
						],
						[
							[
								-1802,
								558
							]
						],
						[
							[
								560
							]
						],
						[
							[
								561
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 222623.917764,
						"Shape_Area": 1036844999.64,
						"Sted": "Namsos",
						"ID": "1703 Namsos",
						"Rnr": 3067,
						"Region": "Midtre Namdal",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1703
					}
				},
				{
					"arcs": [
						[
							[
								-1722,
								706,
								-1650
							]
						],
						[
							[
								-1721,
								200,
								201,
								202,
								203,
								704
							]
						],
						[
							[
								204,
								735
							]
						],
						[
							[
								205,
								736,
								206,
								207,
								737
							]
						],
						[
							[
								738
							]
						],
						[
							[
								739
							]
						],
						[
							[
								740
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 360529.169385,
						"Shape_Area": 1908867049.68,
						"Sted": "Bindal",
						"ID": "1811 Bindal",
						"Rnr": 3068,
						"Region": "Sør-Helgeland",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1811
					}
				},
				{
					"arcs": [
						[
							[
								-1725,
								578
							]
						],
						[
							[
								-1724,
								580
							]
						],
						[
							[
								590
							]
						],
						[
							[
								591
							]
						],
						[
							[
								592
							]
						],
						[
							[
								593
							]
						],
						[
							[
								594
							]
						],
						[
							[
								595
							]
						],
						[
							[
								596
							]
						],
						[
							[
								597
							]
						],
						[
							[
								598
							]
						],
						[
							[
								599
							]
						],
						[
							[
								600
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 247671.371715,
						"Shape_Area": 2263246649.2,
						"Sted": "Herøy",
						"ID": "1818 Herøy",
						"Rnr": 3069,
						"Region": "HALD",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1818
					}
				},
				{
					"arcs": [
						[
							[
								-1855,
								589
							]
						],
						[
							[
								601
							]
						],
						[
							[
								602
							]
						],
						[
							[
								603
							]
						],
						[
							[
								604
							]
						],
						[
							[
								605
							]
						],
						[
							[
								606
							]
						],
						[
							[
								607
							]
						],
						[
							[
								608
							]
						],
						[
							[
								609
							]
						],
						[
							[
								610
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 121465.687098,
						"Shape_Area": 587265012.364,
						"Sted": "Alstahaug",
						"ID": "1820 Alstahaug",
						"Rnr": 3069,
						"Region": "HALD",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1820
					}
				},
				{
					"arcs": [
						[
							[
								337,
								-1803,
								958,
								336
							]
						],
						[
							[
								-1805,
								962
							]
						],
						[
							[
								-1804,
								960
							]
						],
						[
							[
								338,
								973
							]
						],
						[
							[
								974
							]
						],
						[
							[
								975
							]
						],
						[
							[
								976
							]
						],
						[
							[
								977
							]
						],
						[
							[
								978
							]
						],
						[
							[
								979
							]
						],
						[
							[
								980
							]
						],
						[
							[
								981
							]
						],
						[
							[
								982
							]
						],
						[
							[
								983
							]
						],
						[
							[
								984
							]
						],
						[
							[
								985
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 308412.110381,
						"Shape_Area": 3102197876.09,
						"Sted": "Rødøy",
						"ID": "1836 Rødøy",
						"Rnr": 3070,
						"Region": "Ytre Helgeland",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1836
					}
				},
				{
					"arcs": [
						[
							-1891,
							-1888,
							1925,
							932
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 253147.006792,
						"Shape_Area": 2960054590.23,
						"Sted": "Lierne",
						"ID": "1738 Lierne",
						"Rnr": 3065,
						"Region": "Indre Namdal",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1738
					}
				},
				{
					"arcs": [
						[
							931,
							-1926,
							-1806,
							323,
							324
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 213753.994978,
						"Shape_Area": 1581216379.65,
						"Sted": "Røyrvik",
						"ID": "1739 Røyrvik",
						"Rnr": 3065,
						"Region": "Indre Namdal",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1739
					}
				},
				{
					"arcs": [
						[
							-1543,
							1060
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 180190.016144,
						"Shape_Area": 1582714962.51,
						"Sted": "Moskenes",
						"ID": "1874 Moskenes",
						"Rnr": 3075,
						"Region": "Lofoten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1874
					}
				},
				{
					"arcs": [
						[
							[
								999,
								-1892,
								-1655,
								1015,
								-326
							]
						],
						[
							[
								1055
							]
						],
						[
							[
								1056
							]
						],
						[
							[
								1057
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 275785.514898,
						"Shape_Area": 1562585495.12,
						"Sted": "Hamarøy",
						"ID": "1849 Hamarøy",
						"Rnr": 3073,
						"Region": "Salten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1849
					}
				},
				{
					"arcs": [
						[
							[
								936,
								325,
								937,
								-1895
							]
						],
						[
							[
								946
							]
						],
						[
							[
								947
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 239909.334265,
						"Shape_Area": 1932396873.35,
						"Sted": "Tysfjord",
						"ID": "1850 Tysfjord",
						"Rnr": 3074,
						"Region": "Ofoten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1850
					}
				},
				{
					"arcs": [
						[
							[
								352,
								-1549,
								-1547,
								1083,
								-1550,
								1085
							]
						],
						[
							[
								-1548,
								1077,
								-1728,
								1075
							]
						],
						[
							[
								-1544,
								-1730,
								1081
							]
						],
						[
							[
								-1729,
								1079
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 233036.876169,
						"Shape_Area": 1090853380.75,
						"Sted": "Sortland",
						"ID": "1870 Sortland",
						"Rnr": 3076,
						"Region": "Vesterålen",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1870
					}
				},
				{
					"arcs": [
						[
							-311,
							1122,
							-1899,
							-1898,
							-1856,
							1121,
							-297
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 327486.092858,
						"Shape_Area": 3349081824.43,
						"Sted": "Målselv",
						"ID": "1924 Målselv",
						"Rnr": 3078,
						"Region": "Midt-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1924
					}
				},
				{
					"arcs": [
						[
							883,
							-1668,
							879,
							-1734
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 178034.781444,
						"Shape_Area": 1114962760.28,
						"Sted": "Kåfjord",
						"ID": "1940 Kåfjord",
						"Rnr": 3080,
						"Region": "Nord-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1940
					}
				},
				{
					"arcs": [
						[
							[
								-1736,
								886
							]
						],
						[
							[
								892
							]
						],
						[
							[
								893
							]
						],
						[
							[
								894
							]
						],
						[
							[
								895
							]
						],
						[
							[
								896
							]
						],
						[
							[
								897
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 212617.263305,
						"Shape_Area": 1561036209.06,
						"Sted": "Skjervøy",
						"ID": "1941 Skjervøy",
						"Rnr": 3080,
						"Region": "Nord-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1941
					}
				},
				{
					"arcs": [
						[
							[
								308,
								872,
								309
							]
						],
						[
							[
								307,
								-1674,
								845
							]
						],
						[
							[
								873
							]
						],
						[
							[
								874
							]
						],
						[
							[
								875
							]
						],
						[
							[
								876
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 286370.792194,
						"Shape_Area": 4108104584.43,
						"Sted": "Nordkapp",
						"ID": "2019 Nordkapp",
						"Rnr": 3081,
						"Region": "Vest-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2019
					}
				},
				{
					"arcs": [
						[
							[
								-335,
								-1894,
								1104
							]
						],
						[
							[
								1107
							]
						],
						[
							[
								1108
							]
						],
						[
							[
								1109
							]
						],
						[
							[
								1110
							]
						],
						[
							[
								1111
							]
						],
						[
							[
								1112
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 161682.223942,
						"Shape_Area": 784667047.701,
						"Sted": "Harstad",
						"ID": "1903 Harstad",
						"Rnr": 3077,
						"Region": "Sør-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1903
					}
				},
				{
					"arcs": [
						[
							[
								246,
								-1846,
								759,
								-235,
								-234,
								-1908
							]
						],
						[
							[
								-240,
								760
							]
						],
						[
							[
								-236,
								761
							]
						],
						[
							[
								762
							]
						],
						[
							[
								763
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 190455.065379,
						"Shape_Area": 1281467137.28,
						"Sted": "Larvik",
						"ID": "0709 Larvik",
						"Rnr": 3026,
						"Region": "Sandefjord/Larvik",
						"Fnr": 7,
						"Fylke": "Vestfold",
						"Nr": 709
					}
				},
				{
					"arcs": [
						[
							-1498,
							92,
							93,
							94,
							95,
							96,
							518
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 104939.155314,
						"Shape_Area": 424271421.457,
						"Sted": "Sarpsborg",
						"ID": "0105 Sarpsborg",
						"Rnr": 3004,
						"Region": "Nedre Glomma",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 105
					}
				}
			]
		},
		"fylke_grense": {
			"type": "GeometryCollection",
			"geometries": [
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-197,
							-196
						],
						[
							-195,
							-194,
							-193,
							-171,
							-170,
							-23,
							410,
							411,
							412,
							413,
							418,
							447,
							448,
							449,
							445,
							446
						]
					],
					"properties": {
						"Nr": 1
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							423,
							424,
							439,
							1475,
							1476,
							1579,
							1576
						],
						[
							-447,
							-446,
							-450,
							-449,
							-448,
							-419,
							-414,
							-460,
							-459,
							-458,
							-457,
							434,
							435
						]
					],
					"properties": {
						"Nr": 2
					}
				},
				{
					"type": "LineString",
					"arcs": [
						190,
						191,
						187,
						182,
						183,
						319,
						318,
						180,
						-47,
						-46,
						181,
						-25,
						-24,
						169,
						170,
						192,
						193,
						194
					],
					"properties": {
						"Nr": 3
					}
				},
				{
					"type": "LineString",
					"arcs": [
						195,
						196
					],
					"properties": {
						"Nr": 4
					}
				},
				{
					"type": "LineString",
					"arcs": [
						367,
						368,
						369,
						370,
						371,
						-214,
						-213,
						-212,
						-211,
						372,
						380,
						381,
						382,
						358,
						359,
						-83,
						-82,
						-81,
						-80,
						-79,
						-78,
						-77,
						-91
					],
					"properties": {
						"Nr": 5
					}
				},
				{
					"type": "LineString",
					"arcs": [
						379
					],
					"properties": {
						"Nr": 6
					}
				},
				{
					"type": "LineString",
					"arcs": [
						90,
						76,
						77,
						78,
						79,
						80,
						81,
						82,
						83,
						394,
						395,
						396,
						397,
						398,
						-51,
						-50,
						-49,
						-48,
						-181,
						-319,
						-320,
						-184,
						-183,
						-188,
						-192,
						-191
					],
					"properties": {
						"Nr": 7
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							128
						],
						[
							-206
						],
						[
							-205
						],
						[
							-204,
							-203,
							-202,
							322,
							323,
							324
						],
						[
							-291,
							-275,
							-274,
							-273
						],
						[
							-1524,
							34,
							35,
							134,
							135,
							136
						]
					],
					"properties": {
						"Nr": 8
					}
				},
				{
					"type": "LineString",
					"arcs": [
						137
					],
					"properties": {
						"Nr": 9
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-207
						],
						[
							-208
						]
					],
					"properties": {
						"Nr": 10
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-370,
							-369,
							-368
						],
						[
							-380
						],
						[
							272,
							273,
							274,
							290
						],
						[
							287,
							288,
							289,
							278,
							279,
							216,
							217,
							218,
							208,
							209,
							210,
							211,
							212,
							213,
							-372,
							-371
						]
					],
					"properties": {
						"Nr": 11
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-35,
							1523
						],
						[
							-138
						],
						[
							-129,
							-137,
							-136,
							-135,
							-36
						]
					],
					"properties": {
						"Nr": 12
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-307,
							-306,
							311,
							312
						],
						[
							-332,
							-331,
							-330,
							-329,
							-328,
							-327
						]
					],
					"properties": {
						"Nr": 13
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-334,
							-354,
							-353
						],
						[
							-335
						]
					],
					"properties": {
						"Nr": 14
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-325,
							-324,
							-323,
							201,
							202,
							203
						],
						[
							326,
							327,
							328,
							329,
							330,
							331
						]
					],
					"properties": {
						"Nr": 15
					}
				},
				{
					"type": "LineString",
					"arcs": [
						352,
						353,
						333,
						334
					],
					"properties": {
						"Nr": 16
					}
				},
				{
					"type": "LineString",
					"arcs": [
						204
					],
					"properties": {
						"Nr": 17
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							205
						],
						[
							206,
							207
						]
					],
					"properties": {
						"Nr": 18
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-313,
						-312,
						305,
						306
					],
					"properties": {
						"Nr": 19
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-119,
						-118,
						-117,
						-127,
						-126,
						-125,
						-124,
						-123,
						-98,
						-116,
						-115,
						-114,
						-113
					],
					"properties": {
						"Nr": 20
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-104,
							-103,
							-102,
							-122,
							-121,
							-120
						],
						[
							291,
							-262,
							292
						]
					],
					"properties": {
						"Nr": 21
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							116,
							117,
							118
						],
						[
							119,
							120,
							121,
							101,
							102,
							103,
							104,
							345,
							346,
							347,
							-144,
							-143,
							-142,
							348,
							-5,
							-4,
							-3,
							-2,
							-1
						],
						[
							112,
							113,
							114,
							115,
							97,
							122,
							123,
							124,
							125,
							126
						]
					],
					"properties": {
						"Nr": 22
					}
				},
				{
					"type": "LineString",
					"arcs": [
						127
					],
					"properties": {
						"Nr": 23
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-300,
						-299,
						-298,
						-264,
						-263,
						-292
					],
					"properties": {
						"Nr": 24
					}
				},
				{
					"type": "LineString",
					"arcs": [
						141,
						142,
						143,
						-348,
						-347,
						-346,
						-105,
						-293,
						-261,
						-260,
						-259,
						146,
						-258,
						-58,
						-57,
						-56,
						-55,
						-54,
						-53,
						-52,
						-399,
						-398,
						-397,
						-396,
						-395,
						-84,
						-360,
						-359,
						-383,
						-382,
						-381,
						-373,
						-210,
						-209,
						403,
						404,
						75,
						65,
						66,
						450,
						451,
						452,
						138,
						139,
						140
					],
					"properties": {
						"Nr": 25
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-76,
							-405,
							-404,
							-219,
							-218,
							-217,
							-280,
							-279,
							-290,
							-289,
							-288
						],
						[
							0,
							1,
							2,
							3,
							4,
							-349,
							-141,
							-140,
							-139,
							-453,
							-452,
							-451,
							-67,
							-66
						]
					],
					"properties": {
						"Nr": 26
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-235,
						-234,
						-233,
						242,
						247,
						248,
						249,
						250,
						1876,
						1775
					],
					"properties": {
						"Nr": 27
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-240
					],
					"properties": {
						"Nr": 28
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-236
					],
					"properties": {
						"Nr": 29
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-223,
							-222,
							-221,
							-220,
							-26,
							-182,
							45,
							46,
							47,
							48,
							49,
							50,
							51,
							52,
							53,
							54,
							55,
							56,
							57,
							257,
							-147,
							258,
							259,
							260,
							261,
							262,
							263,
							297,
							298,
							299
						],
						[
							-128
						],
						[
							-1776,
							-1877,
							-251,
							-250,
							-249,
							-248,
							-243,
							-232,
							-231,
							-227,
							-224
						]
					],
					"properties": {
						"Nr": 30
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-15,
							-14,
							-239,
							-238,
							-237
						],
						[
							-1577,
							-1580,
							-1477,
							-1476,
							-440,
							-425,
							-424,
							-436,
							-435,
							456,
							457,
							458,
							459,
							-413,
							-412,
							-411,
							-22,
							-21,
							-20,
							-19,
							-18,
							-17,
							-16
						]
					],
					"properties": {
						"Nr": 31
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							230,
							231,
							232,
							233,
							234
						],
						[
							235
						],
						[
							236,
							237,
							238,
							13,
							14,
							15,
							16,
							17,
							18,
							19,
							20,
							21,
							22,
							23,
							24,
							25,
							219,
							220,
							221,
							222,
							223,
							226
						]
					],
					"properties": {
						"Nr": 32
					}
				},
				{
					"type": "LineString",
					"arcs": [
						239
					],
					"properties": {
						"Nr": 33
					}
				}
			]
		},
		"fylke": {
			"type": "GeometryCollection",
			"geometries": [
				{
					"arcs": [
						[
							[
								-197,
								-196,
								1345,
								1346,
								-195,
								-194,
								-193,
								-171,
								-170,
								-23,
								410,
								411,
								412,
								413,
								418,
								447,
								448,
								449,
								445,
								446,
								1342,
								1343,
								1273,
								1274,
								1275,
								1276,
								1277,
								1278,
								1279,
								1280,
								1281,
								1282,
								1253,
								1254,
								1255,
								1256,
								1257,
								1258,
								1353,
								1259,
								1347,
								1348,
								1349,
								1350,
								1351,
								1352
							]
						],
						[
							[
								1283,
								1284
							]
						],
						[
							[
								1285
							]
						],
						[
							[
								1286
							]
						],
						[
							[
								1287
							]
						],
						[
							[
								1288
							]
						],
						[
							[
								1354
							]
						],
						[
							[
								1289
							]
						],
						[
							[
								1355
							]
						],
						[
							[
								1356
							]
						],
						[
							[
								1357
							]
						],
						[
							[
								1260
							]
						],
						[
							[
								1358
							]
						],
						[
							[
								1359
							]
						],
						[
							[
								1360
							]
						],
						[
							[
								1361
							]
						],
						[
							[
								1290
							]
						],
						[
							[
								1291
							]
						],
						[
							[
								1261
							]
						],
						[
							[
								1262
							]
						],
						[
							[
								1263,
								1264
							]
						],
						[
							[
								1265
							]
						],
						[
							[
								1344
							]
						],
						[
							[
								1292
							]
						],
						[
							[
								1293
							]
						],
						[
							[
								1266
							]
						],
						[
							[
								1267
							]
						],
						[
							[
								1268
							]
						],
						[
							[
								1269
							]
						],
						[
							[
								1270
							]
						],
						[
							[
								1271
							]
						],
						[
							[
								1272
							]
						],
						[
							[
								1362
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Rogaland",
						"ID": "0011 Rogaland",
						"Nr": 11
					}
				},
				{
					"arcs": [
						[
							[
								1334,
								1335,
								1326,
								1327,
								1410,
								1331,
								1411,
								1412,
								1413,
								1414,
								1415,
								1416,
								-447,
								-446,
								-450,
								-449,
								-448,
								-419,
								-414,
								-460,
								-459,
								-458,
								-457,
								434,
								435,
								423,
								424,
								439,
								1475,
								1476,
								1579,
								1576
							]
						],
						[
							[
								1328
							]
						],
						[
							[
								1329
							]
						],
						[
							[
								1336
							]
						],
						[
							[
								1337
							]
						],
						[
							[
								1338
							]
						],
						[
							[
								1417,
								1330
							]
						],
						[
							[
								1332
							]
						],
						[
							[
								1418
							]
						],
						[
							[
								1419
							]
						],
						[
							[
								1420
							]
						],
						[
							[
								1421
							]
						],
						[
							[
								1341
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Vest-Agder",
						"ID": "0010 Vest-Agder",
						"Nr": 10
					}
				},
				{
					"arcs": [
						[
							[
								648,
								576
							]
						],
						[
							[
								649,
								650,
								651,
								652,
								653,
								654
							]
						],
						[
							[
								655
							]
						],
						[
							[
								656
							]
						],
						[
							[
								657
							]
						],
						[
							[
								190,
								191,
								187,
								182,
								183,
								319,
								318,
								180,
								-47,
								-46,
								181,
								-25,
								-24,
								169,
								170,
								192,
								193,
								194,
								688,
								689,
								611,
								612,
								613,
								614,
								615,
								616,
								617,
								618,
								619,
								697,
								570,
								571,
								572,
								575,
								625,
								928,
								624,
								927,
								622,
								623,
								627,
								628,
								629,
								630
							]
						],
						[
							[
								626
							]
						],
						[
							[
								631,
								632,
								633,
								634
							]
						],
						[
							[
								635
							]
						],
						[
							[
								636
							]
						],
						[
							[
								637
							]
						],
						[
							[
								638
							]
						],
						[
							[
								668
							]
						],
						[
							[
								669
							]
						],
						[
							[
								670
							]
						],
						[
							[
								671
							]
						],
						[
							[
								672
							]
						],
						[
							[
								573
							]
						],
						[
							[
								574
							]
						],
						[
							[
								639,
								640
							]
						],
						[
							[
								641,
								642
							]
						],
						[
							[
								643
							]
						],
						[
							[
								658
							]
						],
						[
							[
								659
							]
						],
						[
							[
								673,
								674
							]
						],
						[
							[
								675
							]
						],
						[
							[
								676
							]
						],
						[
							[
								677
							]
						],
						[
							[
								678
							]
						],
						[
							[
								644
							]
						],
						[
							[
								679,
								680
							]
						],
						[
							[
								681,
								682
							]
						],
						[
							[
								683
							]
						],
						[
							[
								684
							]
						],
						[
							[
								685
							]
						],
						[
							[
								686
							]
						],
						[
							[
								687
							]
						],
						[
							[
								690
							]
						],
						[
							[
								691
							]
						],
						[
							[
								692
							]
						],
						[
							[
								693
							]
						],
						[
							[
								694
							]
						],
						[
							[
								695
							]
						],
						[
							[
								195,
								196,
								696
							]
						],
						[
							[
								660
							]
						],
						[
							[
								661
							]
						],
						[
							[
								662
							]
						],
						[
							[
								663
							]
						],
						[
							[
								664
							]
						],
						[
							[
								665
							]
						],
						[
							[
								666
							]
						],
						[
							[
								667
							]
						],
						[
							[
								645
							]
						],
						[
							[
								646
							]
						],
						[
							[
								647
							]
						],
						[
							[
								620,
								621
							]
						],
						[
							[
								698
							]
						],
						[
							[
								699
							]
						],
						[
							[
								700
							]
						],
						[
							[
								701
							]
						],
						[
							[
								702
							]
						],
						[
							[
								703
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Hordaland",
						"ID": "0012 Hordaland",
						"Nr": 12
					}
				},
				{
					"arcs": [
						[
							[
								1155,
								1156
							]
						],
						[
							[
								1157,
								1158,
								1159,
								1160
							]
						],
						[
							[
								1161
							]
						],
						[
							[
								1162
							]
						],
						[
							[
								1163
							]
						],
						[
							[
								1164
							]
						],
						[
							[
								1165
							]
						],
						[
							[
								1166
							]
						],
						[
							[
								367,
								368,
								369,
								370,
								371,
								-214,
								-213,
								-212,
								-211,
								372,
								380,
								381,
								382,
								358,
								359,
								-83,
								-82,
								-81,
								-80,
								-79,
								-78,
								-77,
								-91,
								1167,
								1168,
								1169,
								1148,
								1149,
								1150,
								1151,
								1152,
								1153,
								1154,
								1394,
								1395,
								1396,
								1397,
								1206,
								1207,
								1208,
								1209,
								1210,
								1211,
								1192,
								1204,
								1190,
								1191,
								1205,
								1183,
								1184,
								1185,
								1186,
								1187
							]
						],
						[
							[
								1212
							]
						],
						[
							[
								1175
							]
						],
						[
							[
								1176
							]
						],
						[
							[
								1177
							]
						],
						[
							[
								1178
							]
						],
						[
							[
								1179
							]
						],
						[
							[
								1180
							]
						],
						[
							[
								1181
							]
						],
						[
							[
								1182
							]
						],
						[
							[
								1170,
								1171
							]
						],
						[
							[
								1389
							]
						],
						[
							[
								1188
							]
						],
						[
							[
								1189
							]
						],
						[
							[
								1172
							]
						],
						[
							[
								1173
							]
						],
						[
							[
								1390
							]
						],
						[
							[
								1391
							]
						],
						[
							[
								1392
							]
						],
						[
							[
								1393
							]
						],
						[
							[
								1398
							]
						],
						[
							[
								1399
							]
						],
						[
							[
								1400
							]
						],
						[
							[
								1401
							]
						],
						[
							[
								1402
							]
						],
						[
							[
								1213
							]
						],
						[
							[
								1214
							]
						],
						[
							[
								1215
							]
						],
						[
							[
								1193
							]
						],
						[
							[
								379,
								1194
							]
						],
						[
							[
								1195
							]
						],
						[
							[
								1196
							]
						],
						[
							[
								1197
							]
						],
						[
							[
								1198
							]
						],
						[
							[
								1199
							]
						],
						[
							[
								1200
							]
						],
						[
							[
								1201
							]
						],
						[
							[
								1202
							]
						],
						[
							[
								1174
							]
						],
						[
							[
								1403
							]
						],
						[
							[
								1404
							]
						],
						[
							[
								1405
							]
						],
						[
							[
								1406
							]
						],
						[
							[
								1407
							]
						],
						[
							[
								1216
							]
						],
						[
							[
								1217
							]
						],
						[
							[
								1218
							]
						],
						[
							[
								1219
							]
						],
						[
							[
								1220
							]
						],
						[
							[
								1203
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Møre og Romsdal",
						"ID": "0015 Møre og Romsdal",
						"Nr": 15
					}
				},
				{
					"arcs": [
						[
							[
								90,
								76,
								77,
								78,
								79,
								80,
								81,
								82,
								83,
								394,
								395,
								396,
								397,
								398,
								-51,
								-50,
								-49,
								-48,
								-181,
								-319,
								-320,
								-184,
								-183,
								-188,
								-192,
								-191,
								1304,
								1221,
								1222,
								1223,
								1224,
								1225,
								1226,
								1227,
								1228,
								1229,
								1230,
								1231,
								1232,
								1233,
								1294,
								1295,
								1234,
								1299,
								1248,
								1298,
								1235,
								1236,
								1237,
								505,
								506,
								507,
								508,
								509,
								510
							]
						],
						[
							[
								1296
							]
						],
						[
							[
								1297
							]
						],
						[
							[
								511
							]
						],
						[
							[
								512
							]
						],
						[
							[
								1238
							]
						],
						[
							[
								1239
							]
						],
						[
							[
								1240
							]
						],
						[
							[
								1241
							]
						],
						[
							[
								1242
							]
						],
						[
							[
								1243
							]
						],
						[
							[
								1244
							]
						],
						[
							[
								1245
							]
						],
						[
							[
								1246
							]
						],
						[
							[
								1247
							]
						],
						[
							[
								1300
							]
						],
						[
							[
								1301
							]
						],
						[
							[
								1302
							]
						],
						[
							[
								1303
							]
						],
						[
							[
								513
							]
						],
						[
							[
								514
							]
						],
						[
							[
								1305
							]
						],
						[
							[
								1306
							]
						],
						[
							[
								1307
							]
						],
						[
							[
								1308
							]
						],
						[
							[
								1309
							]
						],
						[
							[
								1310
							]
						],
						[
							[
								1311
							]
						],
						[
							[
								1312
							]
						],
						[
							[
								1313
							]
						],
						[
							[
								1314
							]
						],
						[
							[
								1315
							]
						],
						[
							[
								1316
							]
						],
						[
							[
								1317
							]
						],
						[
							[
								1318
							]
						],
						[
							[
								1319
							]
						],
						[
							[
								1320
							]
						],
						[
							[
								1321
							]
						],
						[
							[
								1322
							]
						],
						[
							[
								1323
							]
						],
						[
							[
								1324
							]
						],
						[
							[
								1325
							]
						],
						[
							[
								515
							]
						],
						[
							[
								516
							]
						],
						[
							[
								517
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Sogn og Fjordane",
						"ID": "0014 Sogn og Fjordane",
						"Nr": 14
					}
				},
				{
					"arcs": [
						[
							[
								543,
								544,
								545,
								546,
								547,
								548,
								1425,
								930,
								1422,
								-206,
								1423,
								-205,
								1424,
								-204,
								-203,
								-202,
								322,
								323,
								324,
								931,
								932,
								933,
								494,
								1249,
								-291,
								-275,
								-274,
								-273,
								1250,
								495,
								1251,
								496,
								497,
								498,
								499,
								500,
								501,
								502,
								503,
								1125,
								-1524,
								34,
								35,
								134,
								135,
								136,
								128
							]
						],
						[
							[
								137,
								549
							]
						],
						[
							[
								550
							]
						],
						[
							[
								551
							]
						],
						[
							[
								552
							]
						],
						[
							[
								553
							]
						],
						[
							[
								554
							]
						],
						[
							[
								555
							]
						],
						[
							[
								556
							]
						],
						[
							[
								1426,
								1427,
								-208,
								-207
							]
						],
						[
							[
								1428
							]
						],
						[
							[
								1429
							]
						],
						[
							[
								1430
							]
						],
						[
							[
								1431
							]
						],
						[
							[
								1432
							]
						],
						[
							[
								1433
							]
						],
						[
							[
								1434
							]
						],
						[
							[
								1435
							]
						],
						[
							[
								504
							]
						],
						[
							[
								557,
								558
							]
						],
						[
							[
								559
							]
						],
						[
							[
								1436
							]
						],
						[
							[
								1437
							]
						],
						[
							[
								1438
							]
						],
						[
							[
								1439
							]
						],
						[
							[
								1440
							]
						],
						[
							[
								1441
							]
						],
						[
							[
								1442
							]
						],
						[
							[
								1443
							]
						],
						[
							[
								1444
							]
						],
						[
							[
								1445
							]
						],
						[
							[
								1446
							]
						],
						[
							[
								1447
							]
						],
						[
							[
								1448
							]
						],
						[
							[
								1449
							]
						],
						[
							[
								1450
							]
						],
						[
							[
								1451
							]
						],
						[
							[
								1252
							]
						],
						[
							[
								560
							]
						],
						[
							[
								561
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Nord-Trøndelag",
						"ID": "0017 Nord-Trøndelag",
						"Nr": 17
					}
				},
				{
					"arcs": [
						[
							[
								1379,
								-380,
								1380,
								1381,
								1382,
								1383,
								1384,
								1385,
								789,
								790,
								791,
								792,
								272,
								273,
								274,
								290,
								797,
								798,
								287,
								288,
								289,
								278,
								279,
								216,
								217,
								218,
								208,
								209,
								210,
								211,
								212,
								213,
								-372,
								-371,
								-370,
								-369,
								-368
							]
						],
						[
							[
								1386
							]
						],
						[
							[
								1126,
								1127,
								1128,
								1129,
								1130,
								1131,
								1132,
								-138,
								1133,
								-129,
								-137,
								-136,
								-135,
								-36,
								-35,
								1523
							]
						],
						[
							[
								1134
							]
						],
						[
							[
								1135
							]
						],
						[
							[
								1387
							]
						],
						[
							[
								478
							]
						],
						[
							[
								479
							]
						],
						[
							[
								480
							]
						],
						[
							[
								481
							]
						],
						[
							[
								482
							]
						],
						[
							[
								483
							]
						],
						[
							[
								484
							]
						],
						[
							[
								485
							]
						],
						[
							[
								486
							]
						],
						[
							[
								1136
							]
						],
						[
							[
								1137
							]
						],
						[
							[
								1138
							]
						],
						[
							[
								1388
							]
						],
						[
							[
								1139
							]
						],
						[
							[
								1140
							]
						],
						[
							[
								1141
							]
						],
						[
							[
								1142
							]
						],
						[
							[
								1143
							]
						],
						[
							[
								487
							]
						],
						[
							[
								488
							]
						],
						[
							[
								489
							]
						],
						[
							[
								490
							]
						],
						[
							[
								491
							]
						],
						[
							[
								492
							]
						],
						[
							[
								493
							]
						],
						[
							[
								1144
							]
						],
						[
							[
								1145
							]
						],
						[
							[
								1146
							]
						],
						[
							[
								1147
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Sør-Trøndelag",
						"ID": "0016 Sør-Trøndelag",
						"Nr": 16
					}
				},
				{
					"arcs": [
						[
							[
								-307,
								-306,
								311,
								312,
								882,
								883,
								884,
								1122,
								1123,
								-332,
								-331,
								-330,
								-329,
								-328,
								-327,
								1099,
								1100,
								1101,
								1102,
								1118,
								1119,
								1120,
								1121,
								800,
								801,
								802,
								803,
								877,
								878,
								879,
								880,
								881
							]
						],
						[
							[
								804,
								805
							]
						],
						[
							[
								806,
								807
							]
						],
						[
							[
								808
							]
						],
						[
							[
								809
							]
						],
						[
							[
								810
							]
						],
						[
							[
								811
							]
						],
						[
							[
								812
							]
						],
						[
							[
								813
							]
						],
						[
							[
								814
							]
						],
						[
							[
								815
							]
						],
						[
							[
								816
							]
						],
						[
							[
								817
							]
						],
						[
							[
								818
							]
						],
						[
							[
								819
							]
						],
						[
							[
								820
							]
						],
						[
							[
								821
							]
						],
						[
							[
								1097
							]
						],
						[
							[
								1098
							]
						],
						[
							[
								1113,
								1114,
								1115,
								1116
							]
						],
						[
							[
								1117
							]
						],
						[
							[
								885,
								886
							]
						],
						[
							[
								887
							]
						],
						[
							[
								1103,
								1104,
								-335,
								-334,
								-354,
								-353
							]
						],
						[
							[
								1105
							]
						],
						[
							[
								1106
							]
						],
						[
							[
								822
							]
						],
						[
							[
								823
							]
						],
						[
							[
								824
							]
						],
						[
							[
								825
							]
						],
						[
							[
								826
							]
						],
						[
							[
								827
							]
						],
						[
							[
								828
							]
						],
						[
							[
								829
							]
						],
						[
							[
								830
							]
						],
						[
							[
								831
							]
						],
						[
							[
								832
							]
						],
						[
							[
								833
							]
						],
						[
							[
								834
							]
						],
						[
							[
								1124
							]
						],
						[
							[
								888
							]
						],
						[
							[
								889
							]
						],
						[
							[
								890
							]
						],
						[
							[
								891
							]
						],
						[
							[
								892
							]
						],
						[
							[
								893
							]
						],
						[
							[
								894
							]
						],
						[
							[
								895
							]
						],
						[
							[
								896
							]
						],
						[
							[
								897
							]
						],
						[
							[
								1107
							]
						],
						[
							[
								1108
							]
						],
						[
							[
								1109
							]
						],
						[
							[
								1110
							]
						],
						[
							[
								1111
							]
						],
						[
							[
								1112
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Troms",
						"ID": "0019 Troms",
						"Nr": 19
					}
				},
				{
					"arcs": [
						[
							[
								1058
							]
						],
						[
							[
								-325,
								-324,
								-323,
								201,
								202,
								203,
								704,
								705,
								706,
								707,
								708,
								709,
								710,
								711,
								712,
								713,
								986,
								587,
								998,
								987,
								991,
								992,
								993,
								994,
								957,
								958,
								1003,
								1004,
								1005,
								1006,
								1007,
								1008,
								1009,
								1010,
								1011,
								1012,
								1013,
								1014,
								1015,
								937,
								938,
								939,
								940,
								941,
								326,
								327,
								328,
								329,
								330,
								331,
								934,
								935,
								936,
								999,
								1000,
								1001,
								1002,
								989,
								990,
								988
							]
						],
						[
							[
								1059,
								1060
							]
						],
						[
							[
								1061
							]
						],
						[
							[
								1073,
								1074,
								1075,
								1076,
								1077,
								1078,
								1079,
								1080,
								1081
							]
						],
						[
							[
								352,
								353,
								333,
								334,
								942,
								1086,
								1063,
								1082,
								1083,
								1084,
								1085
							]
						],
						[
							[
								1087,
								1062
							]
						],
						[
							[
								1088
							]
						],
						[
							[
								1089
							]
						],
						[
							[
								1090
							]
						],
						[
							[
								1091
							]
						],
						[
							[
								714
							]
						],
						[
							[
								715
							]
						],
						[
							[
								716
							]
						],
						[
							[
								717
							]
						],
						[
							[
								718
							]
						],
						[
							[
								719
							]
						],
						[
							[
								720
							]
						],
						[
							[
								721
							]
						],
						[
							[
								722
							]
						],
						[
							[
								723
							]
						],
						[
							[
								724
							]
						],
						[
							[
								725
							]
						],
						[
							[
								726
							]
						],
						[
							[
								727
							]
						],
						[
							[
								953
							]
						],
						[
							[
								954
							]
						],
						[
							[
								955
							]
						],
						[
							[
								956
							]
						],
						[
							[
								1064
							]
						],
						[
							[
								1065
							]
						],
						[
							[
								1066
							]
						],
						[
							[
								1067
							]
						],
						[
							[
								1068
							]
						],
						[
							[
								1016
							]
						],
						[
							[
								1017
							]
						],
						[
							[
								1018
							]
						],
						[
							[
								1019
							]
						],
						[
							[
								1020
							]
						],
						[
							[
								728
							]
						],
						[
							[
								729
							]
						],
						[
							[
								730
							]
						],
						[
							[
								731
							]
						],
						[
							[
								732
							]
						],
						[
							[
								733
							]
						],
						[
							[
								577,
								578,
								579,
								580
							]
						],
						[
							[
								581
							]
						],
						[
							[
								582
							]
						],
						[
							[
								583
							]
						],
						[
							[
								584
							]
						],
						[
							[
								585
							]
						],
						[
							[
								586
							]
						],
						[
							[
								1069
							]
						],
						[
							[
								1070
							]
						],
						[
							[
								1092
							]
						],
						[
							[
								1093
							]
						],
						[
							[
								1094
							]
						],
						[
							[
								1095
							]
						],
						[
							[
								1096
							]
						],
						[
							[
								959,
								960
							]
						],
						[
							[
								961,
								962
							]
						],
						[
							[
								963
							]
						],
						[
							[
								964
							]
						],
						[
							[
								965
							]
						],
						[
							[
								966
							]
						],
						[
							[
								967
							]
						],
						[
							[
								968
							]
						],
						[
							[
								969
							]
						],
						[
							[
								970
							]
						],
						[
							[
								971
							]
						],
						[
							[
								972
							]
						],
						[
							[
								1021
							]
						],
						[
							[
								1022
							]
						],
						[
							[
								1023
							]
						],
						[
							[
								1024
							]
						],
						[
							[
								1025
							]
						],
						[
							[
								1026
							]
						],
						[
							[
								1027
							]
						],
						[
							[
								1028
							]
						],
						[
							[
								1029
							]
						],
						[
							[
								1030
							]
						],
						[
							[
								1031
							]
						],
						[
							[
								1032
							]
						],
						[
							[
								1033
							]
						],
						[
							[
								1034
							]
						],
						[
							[
								1035
							]
						],
						[
							[
								1036
							]
						],
						[
							[
								1037
							]
						],
						[
							[
								1038
							]
						],
						[
							[
								1039
							]
						],
						[
							[
								1040
							]
						],
						[
							[
								943
							]
						],
						[
							[
								944
							]
						],
						[
							[
								588,
								589
							]
						],
						[
							[
								1071
							]
						],
						[
							[
								1072
							]
						],
						[
							[
								995
							]
						],
						[
							[
								996
							]
						],
						[
							[
								997
							]
						],
						[
							[
								1041
							]
						],
						[
							[
								945
							]
						],
						[
							[
								734
							]
						],
						[
							[
								1042,
								973
							]
						],
						[
							[
								1043
							]
						],
						[
							[
								1044
							]
						],
						[
							[
								1045
							]
						],
						[
							[
								1046
							]
						],
						[
							[
								1047
							]
						],
						[
							[
								1048
							]
						],
						[
							[
								1049
							]
						],
						[
							[
								1050
							]
						],
						[
							[
								1051
							]
						],
						[
							[
								1052
							]
						],
						[
							[
								1053
							]
						],
						[
							[
								1054
							]
						],
						[
							[
								204,
								735
							]
						],
						[
							[
								205,
								736,
								206,
								207,
								737
							]
						],
						[
							[
								738
							]
						],
						[
							[
								739
							]
						],
						[
							[
								740
							]
						],
						[
							[
								590
							]
						],
						[
							[
								591
							]
						],
						[
							[
								592
							]
						],
						[
							[
								593
							]
						],
						[
							[
								594
							]
						],
						[
							[
								595
							]
						],
						[
							[
								596
							]
						],
						[
							[
								597
							]
						],
						[
							[
								598
							]
						],
						[
							[
								599
							]
						],
						[
							[
								600
							]
						],
						[
							[
								601
							]
						],
						[
							[
								602
							]
						],
						[
							[
								603
							]
						],
						[
							[
								604
							]
						],
						[
							[
								605
							]
						],
						[
							[
								606
							]
						],
						[
							[
								607
							]
						],
						[
							[
								608
							]
						],
						[
							[
								609
							]
						],
						[
							[
								610
							]
						],
						[
							[
								974
							]
						],
						[
							[
								975
							]
						],
						[
							[
								976
							]
						],
						[
							[
								977
							]
						],
						[
							[
								978
							]
						],
						[
							[
								979
							]
						],
						[
							[
								980
							]
						],
						[
							[
								981
							]
						],
						[
							[
								982
							]
						],
						[
							[
								983
							]
						],
						[
							[
								984
							]
						],
						[
							[
								985
							]
						],
						[
							[
								1055
							]
						],
						[
							[
								1056
							]
						],
						[
							[
								1057
							]
						],
						[
							[
								946
							]
						],
						[
							[
								947
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Nordland",
						"ID": "0018 Nordland",
						"Nr": 18
					}
				},
				{
					"arcs": [
						[
							[
								-313,
								-312,
								305,
								306,
								841,
								842,
								843,
								844,
								845,
								912,
								872,
								913,
								908,
								914,
								898,
								899,
								900,
								901,
								902,
								903,
								904,
								915,
								916,
								917
							]
						],
						[
							[
								918
							]
						],
						[
							[
								919
							]
						],
						[
							[
								920
							]
						],
						[
							[
								921
							]
						],
						[
							[
								922
							]
						],
						[
							[
								846
							]
						],
						[
							[
								847
							]
						],
						[
							[
								848
							]
						],
						[
							[
								849
							]
						],
						[
							[
								850
							]
						],
						[
							[
								851
							]
						],
						[
							[
								852,
								853,
								854
							]
						],
						[
							[
								855,
								856
							]
						],
						[
							[
								905
							]
						],
						[
							[
								857,
								858,
								859
							]
						],
						[
							[
								860
							]
						],
						[
							[
								861,
								862,
								863,
								864
							]
						],
						[
							[
								906
							]
						],
						[
							[
								907
							]
						],
						[
							[
								865
							]
						],
						[
							[
								866
							]
						],
						[
							[
								867
							]
						],
						[
							[
								868
							]
						],
						[
							[
								909
							]
						],
						[
							[
								910
							]
						],
						[
							[
								911
							]
						],
						[
							[
								869
							]
						],
						[
							[
								870
							]
						],
						[
							[
								871
							]
						],
						[
							[
								923
							]
						],
						[
							[
								924
							]
						],
						[
							[
								925
							]
						],
						[
							[
								926
							]
						],
						[
							[
								873
							]
						],
						[
							[
								874
							]
						],
						[
							[
								875
							]
						],
						[
							[
								876
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Finnmark",
						"ID": "0020 Finnmark",
						"Nr": 20
					}
				},
				{
					"arcs": [
						[
							[
								-119,
								-118,
								-117,
								-127,
								-126,
								-125,
								-124,
								-123,
								-98,
								-116,
								-115,
								-114,
								-113,
								567,
								568,
								569,
								929,
								518,
								519,
								562,
								563,
								564
							]
						],
						[
							[
								565
							]
						],
						[
							[
								520
							]
						],
						[
							[
								521
							]
						],
						[
							[
								522
							]
						],
						[
							[
								523
							]
						],
						[
							[
								524
							]
						],
						[
							[
								525
							]
						],
						[
							[
								526
							]
						],
						[
							[
								527
							]
						],
						[
							[
								528
							]
						],
						[
							[
								529
							]
						],
						[
							[
								530
							]
						],
						[
							[
								531
							]
						],
						[
							[
								566
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Østfold",
						"ID": "0001 Østfold",
						"Nr": 1
					}
				},
				{
					"arcs": [
						[
							-104,
							-103,
							-102,
							-122,
							-121,
							-120,
							799,
							291,
							-262,
							292
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Oslo",
						"ID": "0003 Oslo",
						"Nr": 3
					}
				},
				{
					"arcs": [
						[
							[
								533,
								534,
								535,
								536,
								537,
								538,
								539,
								540,
								119,
								120,
								121,
								101,
								102,
								103,
								104,
								345,
								346,
								347,
								-144,
								-143,
								-142,
								348,
								-5,
								-4,
								-3,
								-2,
								-1,
								532,
								112,
								113,
								114,
								115,
								97,
								122,
								123,
								124,
								125,
								126,
								116,
								117,
								118
							]
						],
						[
							[
								127,
								541
							]
						],
						[
							[
								542
							]
						],
						[
							[
								-300,
								-299,
								-298,
								-264,
								-263,
								-292,
								948,
								949
							]
						],
						[
							[
								950
							]
						],
						[
							[
								951
							]
						],
						[
							[
								952
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Akershus",
						"ID": "0002 Akershus",
						"Nr": 2
					}
				},
				{
					"arcs": [
						[
							141,
							142,
							143,
							-348,
							-347,
							-346,
							-105,
							-293,
							-261,
							-260,
							-259,
							146,
							-258,
							-58,
							-57,
							-56,
							-55,
							-54,
							-53,
							-52,
							-399,
							-398,
							-397,
							-396,
							-395,
							-84,
							-360,
							-359,
							-383,
							-382,
							-381,
							-373,
							-210,
							-209,
							403,
							404,
							75,
							65,
							66,
							450,
							451,
							452,
							138,
							139,
							140
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Oppland",
						"ID": "0005 Oppland",
						"Nr": 5
					}
				},
				{
					"arcs": [
						[
							-219,
							-218,
							-217,
							-280,
							-279,
							-290,
							-289,
							-288,
							1408,
							1409,
							473,
							474,
							475,
							476,
							477,
							0,
							1,
							2,
							3,
							4,
							-349,
							-141,
							-140,
							-139,
							-453,
							-452,
							-451,
							-67,
							-66,
							-76,
							-405,
							-404
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Hedmark",
						"ID": "0004 Hedmark",
						"Nr": 4
					}
				},
				{
					"arcs": [
						[
							[
								764,
								765
							]
						],
						[
							[
								766,
								767,
								768,
								769,
								770,
								771
							]
						],
						[
							[
								772
							]
						],
						[
							[
								773
							]
						],
						[
							[
								774,
								775
							]
						],
						[
							[
								-235,
								-234,
								-233,
								242,
								247,
								248,
								249,
								250,
								1876,
								1775,
								794,
								795,
								776,
								777,
								778,
								779,
								780,
								781,
								782,
								758,
								759
							]
						],
						[
							[
								783
							]
						],
						[
							[
								784
							]
						],
						[
							[
								785
							]
						],
						[
							[
								786
							]
						],
						[
							[
								796
							]
						],
						[
							[
								787
							]
						],
						[
							[
								788
							]
						],
						[
							[
								-240,
								760
							]
						],
						[
							[
								-236,
								761
							]
						],
						[
							[
								762
							]
						],
						[
							[
								763
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Vestfold",
						"ID": "0007 Vestfold",
						"Nr": 7
					}
				},
				{
					"arcs": [
						[
							[
								-182,
								45,
								46,
								47,
								48,
								49,
								50,
								51,
								52,
								53,
								54,
								55,
								56,
								57,
								257,
								-147,
								258,
								259,
								260,
								261,
								262,
								263,
								297,
								298,
								299,
								835,
								836,
								-128,
								837,
								838,
								839,
								793,
								-1776,
								-1877,
								-251,
								-250,
								-249,
								-248,
								-243,
								-232,
								-231,
								-227,
								-224,
								-223,
								-222,
								-221,
								-220,
								-26
							]
						],
						[
							[
								840
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Buskerud",
						"ID": "0006 Buskerud",
						"Nr": 6
					}
				},
				{
					"arcs": [
						[
							[
								1363,
								1364,
								1365,
								1366,
								1367,
								1368,
								1369,
								1370,
								1333,
								-1577,
								-1580,
								-1477,
								-1476,
								-440,
								-425,
								-424,
								-436,
								-435,
								456,
								457,
								458,
								459,
								-413,
								-412,
								-411,
								-22,
								-21,
								-20,
								-19,
								-18,
								-17,
								-16,
								-15,
								-14,
								-239,
								-238,
								-237
							]
						],
						[
							[
								1371
							]
						],
						[
							[
								1372
							]
						],
						[
							[
								1373
							]
						],
						[
							[
								1339,
								1374
							]
						],
						[
							[
								1340
							]
						],
						[
							[
								1375
							]
						],
						[
							[
								1376
							]
						],
						[
							[
								1377
							]
						],
						[
							[
								1378
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Aust-Agder",
						"ID": "0009 Aust-Agder",
						"Nr": 9
					}
				},
				{
					"arcs": [
						[
							[
								232,
								233,
								234,
								741,
								235,
								742,
								743,
								744,
								745,
								746,
								747,
								236,
								237,
								238,
								13,
								14,
								15,
								16,
								17,
								18,
								19,
								20,
								21,
								22,
								23,
								24,
								25,
								219,
								220,
								221,
								222,
								223,
								226,
								230,
								231
							]
						],
						[
							[
								239,
								748
							]
						],
						[
							[
								749
							]
						],
						[
							[
								750
							]
						],
						[
							[
								751
							]
						],
						[
							[
								752
							]
						],
						[
							[
								753
							]
						],
						[
							[
								754
							]
						],
						[
							[
								755
							]
						],
						[
							[
								756
							]
						],
						[
							[
								757
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Telemark",
						"ID": "0008 Telemark",
						"Nr": 8
					}
				}
			]
		}
	}
};

/***/ }),
/* 264 */
/***/ (function(module, exports) {

module.exports = {
	"type": "Topology",
	"arcs": [
		[
			[
				5448,
				11933
			],
			[
				264,
				-171
			],
			[
				32,
				-208
			]
		],
		[
			[
				5744,
				11554
			],
			[
				-9,
				-115
			]
		],
		[
			[
				5735,
				11439
			],
			[
				-62,
				-102
			],
			[
				72,
				5
			],
			[
				89,
				-193
			],
			[
				-75,
				-46
			]
		],
		[
			[
				5759,
				11103
			],
			[
				67,
				-146
			],
			[
				-48,
				-59
			]
		],
		[
			[
				5778,
				10898
			],
			[
				-122,
				-124
			],
			[
				18,
				-68
			],
			[
				-150,
				-49
			]
		],
		[
			[
				5524,
				10657
			],
			[
				-59,
				-20
			],
			[
				-33,
				73
			]
		],
		[
			[
				5432,
				10710
			],
			[
				-208,
				-42
			],
			[
				-60,
				45
			]
		],
		[
			[
				4953,
				10835
			],
			[
				44,
				124
			]
		],
		[
			[
				5018,
				10839
			],
			[
				-18,
				0
			]
		],
		[
			[
				4981,
				10834
			],
			[
				-28,
				1
			]
		],
		[
			[
				5161,
				10731
			],
			[
				-93,
				22
			],
			[
				-1,
				73
			]
		],
		[
			[
				451,
				2294
			],
			[
				0,
				0
			],
			[
				8,
				-7
			],
			[
				36,
				30
			],
			[
				4,
				-16
			],
			[
				2,
				0
			],
			[
				8,
				-1
			],
			[
				6,
				-1
			]
		],
		[
			[
				515,
				2299
			],
			[
				38,
				24
			]
		],
		[
			[
				809,
				2547
			],
			[
				98,
				-102
			],
			[
				134,
				10
			]
		],
		[
			[
				1041,
				2455
			],
			[
				8,
				-153
			]
		],
		[
			[
				1399,
				2623
			],
			[
				-256,
				-194
			]
		],
		[
			[
				1121,
				2425
			],
			[
				-68,
				31
			]
		],
		[
			[
				1053,
				2456
			],
			[
				82,
				277
			],
			[
				153,
				108
			]
		],
		[
			[
				1288,
				2841
			],
			[
				109,
				-11
			],
			[
				2,
				-207
			]
		],
		[
			[
				6150,
				10891
			],
			[
				22,
				4
			]
		],
		[
			[
				6172,
				10895
			],
			[
				455,
				17
			]
		],
		[
			[
				5503,
				9162
			],
			[
				-210,
				-26
			]
		],
		[
			[
				5293,
				9136
			],
			[
				-164,
				150
			],
			[
				23,
				64
			],
			[
				-75,
				13
			],
			[
				-73,
				297
			]
		],
		[
			[
				5004,
				9660
			],
			[
				117,
				50
			]
		],
		[
			[
				5121,
				9710
			],
			[
				-32,
				232
			],
			[
				102,
				66
			]
		],
		[
			[
				5191,
				10008
			],
			[
				-80,
				32
			],
			[
				-60,
				197
			]
		],
		[
			[
				5051,
				10237
			],
			[
				99,
				67
			],
			[
				19,
				128
			]
		],
		[
			[
				5169,
				10432
			],
			[
				87,
				183
			]
		],
		[
			[
				5323,
				10590
			],
			[
				109,
				120
			]
		],
		[
			[
				5778,
				10898
			],
			[
				372,
				-7
			]
		],
		[
			[
				1758,
				2589
			],
			[
				-70,
				41
			],
			[
				-10,
				127
			]
		],
		[
			[
				1678,
				2757
			],
			[
				94,
				274
			],
			[
				98,
				58
			]
		],
		[
			[
				1870,
				3089
			],
			[
				77,
				151
			]
		],
		[
			[
				1947,
				3240
			],
			[
				250,
				25
			]
		],
		[
			[
				2197,
				3265
			],
			[
				168,
				-116
			],
			[
				42,
				-284
			],
			[
				112,
				-38
			],
			[
				-16,
				-76
			]
		],
		[
			[
				2503,
				2751
			],
			[
				48,
				24
			]
		],
		[
			[
				2551,
				2775
			],
			[
				113,
				-275
			],
			[
				169,
				-133
			]
		],
		[
			[
				2833,
				2367
			],
			[
				72,
				-58
			]
		],
		[
			[
				2905,
				2309
			],
			[
				-47,
				-145
			],
			[
				42,
				-67
			]
		],
		[
			[
				2900,
				2097
			],
			[
				-41,
				-114
			]
		],
		[
			[
				2859,
				1983
			],
			[
				-142,
				28
			],
			[
				-15,
				-80
			]
		],
		[
			[
				2702,
				1931
			],
			[
				99,
				-192
			],
			[
				-44,
				-91
			],
			[
				111,
				-106
			]
		],
		[
			[
				2868,
				1542
			],
			[
				-55,
				-69
			],
			[
				53,
				-46
			],
			[
				-27,
				-74
			]
		],
		[
			[
				2839,
				1353
			],
			[
				-33,
				-50
			]
		],
		[
			[
				2806,
				1303
			],
			[
				-115,
				152
			],
			[
				-68,
				-68
			],
			[
				-117,
				64
			]
		],
		[
			[
				2506,
				1451
			],
			[
				-90,
				82
			],
			[
				-113,
				-27
			]
		],
		[
			[
				2303,
				1506
			],
			[
				-129,
				204
			]
		],
		[
			[
				2174,
				1710
			],
			[
				-62,
				100
			],
			[
				35,
				87
			],
			[
				-58,
				163
			]
		],
		[
			[
				2089,
				2060
			],
			[
				-107,
				110
			]
		],
		[
			[
				1982,
				2170
			],
			[
				59,
				96
			],
			[
				-51,
				191
			]
		],
		[
			[
				1990,
				2457
			],
			[
				-76,
				106
			],
			[
				-47,
				-34
			],
			[
				-109,
				60
			]
		],
		[
			[
				4343,
				2638
			],
			[
				56,
				-8
			]
		],
		[
			[
				4399,
				2630
			],
			[
				109,
				-26
			]
		],
		[
			[
				4508,
				2604
			],
			[
				5,
				113
			]
		],
		[
			[
				4513,
				2717
			],
			[
				72,
				-4
			]
		],
		[
			[
				4585,
				2713
			],
			[
				93,
				-237
			]
		],
		[
			[
				4678,
				2476
			],
			[
				10,
				-9
			]
		],
		[
			[
				4688,
				2467
			],
			[
				108,
				121
			]
		],
		[
			[
				4796,
				2588
			],
			[
				19,
				106
			],
			[
				170,
				74
			]
		],
		[
			[
				4837,
				1612
			],
			[
				-105,
				345
			]
		],
		[
			[
				4732,
				1957
			],
			[
				-147,
				-2
			]
		],
		[
			[
				4585,
				1955
			],
			[
				-106,
				225
			]
		],
		[
			[
				4479,
				2180
			],
			[
				-34,
				14
			]
		],
		[
			[
				4445,
				2194
			],
			[
				-56,
				137
			]
		],
		[
			[
				4389,
				2331
			],
			[
				-54,
				1
			],
			[
				7,
				54
			]
		],
		[
			[
				4342,
				2386
			],
			[
				-143,
				-30
			]
		],
		[
			[
				4199,
				2356
			],
			[
				54,
				109
			]
		],
		[
			[
				4253,
				2465
			],
			[
				15,
				41
			]
		],
		[
			[
				4268,
				2506
			],
			[
				75,
				132
			]
		],
		[
			[
				4016,
				9857
			],
			[
				66,
				-52
			]
		],
		[
			[
				4082,
				9804
			],
			[
				219,
				-174
			]
		],
		[
			[
				4301,
				9630
			],
			[
				-30,
				-112
			],
			[
				-98,
				-45
			]
		],
		[
			[
				4173,
				9473
			],
			[
				31,
				-97
			]
		],
		[
			[
				4204,
				9376
			],
			[
				64,
				-25
			]
		],
		[
			[
				4268,
				9351
			],
			[
				-304,
				-471
			]
		],
		[
			[
				3964,
				8880
			],
			[
				5,
				-76
			]
		],
		[
			[
				3969,
				8804
			],
			[
				148,
				82
			]
		],
		[
			[
				4117,
				8886
			],
			[
				129,
				-114
			]
		],
		[
			[
				4782,
				7949
			],
			[
				-121,
				223
			]
		],
		[
			[
				4661,
				8172
			],
			[
				-335,
				5
			]
		],
		[
			[
				4326,
				8177
			],
			[
				-75,
				22
			],
			[
				-3,
				144
			]
		],
		[
			[
				4305,
				8531
			],
			[
				544,
				49
			]
		],
		[
			[
				4849,
				8580
			],
			[
				58,
				61
			],
			[
				230,
				-60
			]
		],
		[
			[
				5071,
				7953
			],
			[
				-289,
				-4
			]
		],
		[
			[
				4275,
				8701
			],
			[
				8,
				-95
			]
		],
		[
			[
				4436,
				7156
			],
			[
				-228,
				27
			]
		],
		[
			[
				4208,
				7183
			],
			[
				104,
				167
			],
			[
				37,
				419
			]
		],
		[
			[
				4349,
				7769
			],
			[
				102,
				2
			],
			[
				85,
				-92
			]
		],
		[
			[
				4536,
				7679
			],
			[
				68,
				162
			],
			[
				179,
				53
			],
			[
				-1,
				55
			]
		],
		[
			[
				5209,
				6651
			],
			[
				-85,
				-32
			],
			[
				-201,
				98
			]
		],
		[
			[
				4923,
				6717
			],
			[
				-192,
				-4
			],
			[
				-295,
				443
			]
		],
		[
			[
				3674,
				7703
			],
			[
				-91,
				193
			]
		],
		[
			[
				3583,
				7896
			],
			[
				27,
				46
			]
		],
		[
			[
				3610,
				7942
			],
			[
				-17,
				229
			]
		],
		[
			[
				4208,
				7183
			],
			[
				-35,
				-52
			]
		],
		[
			[
				4173,
				7131
			],
			[
				-285,
				77
			]
		],
		[
			[
				3888,
				7208
			],
			[
				-230,
				412
			]
		],
		[
			[
				3658,
				7620
			],
			[
				16,
				83
			]
		],
		[
			[
				3658,
				7620
			],
			[
				-144,
				12
			],
			[
				-224,
				-126
			]
		],
		[
			[
				3290,
				7506
			],
			[
				-14,
				97
			],
			[
				105,
				84
			],
			[
				-104,
				61
			],
			[
				25,
				197
			]
		],
		[
			[
				3302,
				7945
			],
			[
				-73,
				52
			]
		],
		[
			[
				3229,
				7997
			],
			[
				-147,
				-60
			],
			[
				26,
				-56
			],
			[
				-137,
				-31
			]
		],
		[
			[
				2971,
				7850
			],
			[
				-122,
				17
			]
		],
		[
			[
				2849,
				7867
			],
			[
				-29,
				88
			]
		],
		[
			[
				2868,
				7980
			],
			[
				40,
				222
			],
			[
				-93,
				121
			]
		],
		[
			[
				4870,
				9635
			],
			[
				-149,
				-77
			]
		],
		[
			[
				4721,
				9558
			],
			[
				-258,
				-149
			]
		],
		[
			[
				4463,
				9409
			],
			[
				-195,
				-58
			]
		],
		[
			[
				4716,
				10334
			],
			[
				99,
				-31
			],
			[
				300,
				175
			],
			[
				54,
				-46
			]
		],
		[
			[
				5004,
				9660
			],
			[
				-15,
				46
			],
			[
				-119,
				-71
			]
		],
		[
			[
				2599,
				481
			],
			[
				-49,
				54
			]
		],
		[
			[
				2550,
				535
			],
			[
				-42,
				100
			],
			[
				70,
				123
			]
		],
		[
			[
				2578,
				758
			],
			[
				22,
				174
			],
			[
				-126,
				-87
			],
			[
				-56,
				161
			],
			[
				-97,
				-12
			]
		],
		[
			[
				2321,
				994
			],
			[
				-54,
				78
			]
		],
		[
			[
				2267,
				1072
			],
			[
				21,
				41
			]
		],
		[
			[
				2288,
				1113
			],
			[
				15,
				393
			]
		],
		[
			[
				2868,
				1542
			],
			[
				110,
				8
			],
			[
				113,
				-166
			]
		],
		[
			[
				3091,
				1384
			],
			[
				21,
				-84
			]
		],
		[
			[
				3112,
				1300
			],
			[
				119,
				-95
			]
		],
		[
			[
				2606,
				413
			],
			[
				-6,
				7
			]
		],
		[
			[
				4135,
				2307
			],
			[
				63,
				10
			]
		],
		[
			[
				4198,
				2317
			],
			[
				1,
				39
			]
		],
		[
			[
				4445,
				2194
			],
			[
				-112,
				-30
			]
		],
		[
			[
				4333,
				2164
			],
			[
				-18,
				-114
			]
		],
		[
			[
				4315,
				2050
			],
			[
				-21,
				-56
			],
			[
				-118,
				9
			]
		],
		[
			[
				871,
				3592
			],
			[
				30,
				-97
			],
			[
				-60,
				-254
			]
		],
		[
			[
				841,
				3241
			],
			[
				-48,
				-91
			],
			[
				-60,
				2
			]
		],
		[
			[
				497,
				3433
			],
			[
				141,
				159
			]
		],
		[
			[
				638,
				3592
			],
			[
				75,
				162
			]
		],
		[
			[
				713,
				3754
			],
			[
				158,
				139
			],
			[
				51,
				-36
			]
		],
		[
			[
				922,
				3857
			],
			[
				-51,
				-265
			]
		],
		[
			[
				672,
				3755
			],
			[
				41,
				-1
			]
		],
		[
			[
				371,
				3596
			],
			[
				-6,
				8
			]
		],
		[
			[
				1603,
				4221
			],
			[
				-103,
				-174
			]
		],
		[
			[
				1500,
				4047
			],
			[
				-134,
				7
			],
			[
				-20,
				-162
			],
			[
				-76,
				-76
			]
		],
		[
			[
				1270,
				3816
			],
			[
				-172,
				88
			],
			[
				-116,
				-13
			]
		],
		[
			[
				982,
				3891
			],
			[
				-1,
				98
			],
			[
				-72,
				-21
			],
			[
				-44,
				82
			]
		],
		[
			[
				834,
				4055
			],
			[
				43,
				155
			],
			[
				87,
				-26
			],
			[
				33,
				74
			],
			[
				86,
				2
			],
			[
				53,
				174
			]
		],
		[
			[
				1136,
				4434
			],
			[
				120,
				102
			],
			[
				43,
				-85
			],
			[
				79,
				104
			],
			[
				63,
				-39
			]
		],
		[
			[
				1441,
				4516
			],
			[
				53,
				-55
			],
			[
				-72,
				-73
			],
			[
				155,
				-14
			],
			[
				-52,
				-111
			],
			[
				78,
				-42
			]
		],
		[
			[
				849,
				4051
			],
			[
				-6,
				-2
			]
		],
		[
			[
				867,
				3262
			],
			[
				-26,
				-21
			]
		],
		[
			[
				922,
				3857
			],
			[
				60,
				34
			]
		],
		[
			[
				1603,
				4221
			],
			[
				99,
				-74
			],
			[
				232,
				-26
			]
		],
		[
			[
				1934,
				4121
			],
			[
				114,
				-65
			],
			[
				2,
				-112
			],
			[
				64,
				-59
			]
		],
		[
			[
				2114,
				3885
			],
			[
				-28,
				-164
			]
		],
		[
			[
				2086,
				3721
			],
			[
				-12,
				-183
			],
			[
				-127,
				-298
			]
		],
		[
			[
				1678,
				2757
			],
			[
				-279,
				-134
			]
		],
		[
			[
				1288,
				2841
			],
			[
				-23,
				150
			],
			[
				-110,
				125
			]
		],
		[
			[
				1155,
				3116
			],
			[
				93,
				145
			],
			[
				-2,
				131
			]
		],
		[
			[
				1246,
				3392
			],
			[
				6,
				16
			]
		],
		[
			[
				1252,
				3408
			],
			[
				-265,
				-33
			]
		],
		[
			[
				726,
				4391
			],
			[
				-21,
				-175
			]
		],
		[
			[
				340,
				4370
			],
			[
				59,
				133
			],
			[
				176,
				-6
			],
			[
				93,
				85
			]
		],
		[
			[
				668,
				4582
			],
			[
				168,
				-39
			]
		],
		[
			[
				836,
				4543
			],
			[
				-110,
				-152
			]
		],
		[
			[
				4196,
				3376
			],
			[
				62,
				192
			]
		],
		[
			[
				4258,
				3568
			],
			[
				47,
				50
			]
		],
		[
			[
				4305,
				3618
			],
			[
				-78,
				124
			],
			[
				-101,
				10
			],
			[
				27,
				125
			]
		],
		[
			[
				4153,
				3877
			],
			[
				1,
				13
			]
		],
		[
			[
				4154,
				3890
			],
			[
				144,
				-81
			],
			[
				102,
				72
			]
		],
		[
			[
				4400,
				3881
			],
			[
				56,
				135
			]
		],
		[
			[
				4456,
				4016
			],
			[
				38,
				-156
			],
			[
				91,
				-70
			]
		],
		[
			[
				4585,
				3790
			],
			[
				54,
				-163
			]
		],
		[
			[
				4639,
				3627
			],
			[
				67,
				-87
			]
		],
		[
			[
				4706,
				3540
			],
			[
				56,
				-43
			],
			[
				-28,
				-131
			],
			[
				179,
				-198
			]
		],
		[
			[
				4913,
				3168
			],
			[
				-2,
				-43
			]
		],
		[
			[
				4911,
				3125
			],
			[
				-260,
				-54
			]
		],
		[
			[
				4651,
				3071
			],
			[
				-104,
				111
			]
		],
		[
			[
				4547,
				3182
			],
			[
				-131,
				-9
			]
		],
		[
			[
				4416,
				3173
			],
			[
				-27,
				-39
			]
		],
		[
			[
				4389,
				3134
			],
			[
				-57,
				21
			]
		],
		[
			[
				4332,
				3155
			],
			[
				-42,
				127
			]
		],
		[
			[
				4290,
				3282
			],
			[
				-33,
				90
			],
			[
				-61,
				4
			]
		],
		[
			[
				1053,
				2456
			],
			[
				-12,
				-1
			]
		],
		[
			[
				3187,
				5064
			],
			[
				-75,
				95
			]
		],
		[
			[
				3112,
				5159
			],
			[
				-83,
				49
			]
		],
		[
			[
				3029,
				5208
			],
			[
				51,
				125
			],
			[
				-166,
				-22
			],
			[
				-1,
				49
			],
			[
				213,
				113
			]
		],
		[
			[
				3126,
				5473
			],
			[
				238,
				172
			],
			[
				128,
				232
			],
			[
				169,
				64
			]
		],
		[
			[
				3661,
				5941
			],
			[
				15,
				27
			]
		],
		[
			[
				3676,
				5968
			],
			[
				49,
				34
			]
		],
		[
			[
				3725,
				6002
			],
			[
				54,
				-37
			],
			[
				-77,
				-199
			]
		],
		[
			[
				3702,
				5766
			],
			[
				241,
				-128
			],
			[
				118,
				116
			],
			[
				71,
				-417
			]
		],
		[
			[
				4132,
				5337
			],
			[
				-343,
				-166
			]
		],
		[
			[
				3789,
				5171
			],
			[
				-165,
				42
			]
		],
		[
			[
				3624,
				5213
			],
			[
				-263,
				47
			],
			[
				-174,
				-196
			]
		],
		[
			[
				9228,
				16135
			],
			[
				-71,
				110
			]
		],
		[
			[
				9157,
				16245
			],
			[
				-8,
				199
			]
		],
		[
			[
				9149,
				16444
			],
			[
				148,
				392
			]
		],
		[
			[
				9297,
				16836
			],
			[
				-121,
				-24
			]
		],
		[
			[
				9176,
				16812
			],
			[
				-250,
				47
			],
			[
				-17,
				-85
			],
			[
				-145,
				-75
			]
		],
		[
			[
				9629,
				17248
			],
			[
				411,
				-351
			],
			[
				324,
				-4
			],
			[
				123,
				63
			]
		],
		[
			[
				10487,
				16956
			],
			[
				64,
				-43
			]
		],
		[
			[
				3888,
				7208
			],
			[
				-124,
				-12
			],
			[
				-94,
				-199
			]
		],
		[
			[
				3670,
				6997
			],
			[
				63,
				-198
			]
		],
		[
			[
				3733,
				6799
			],
			[
				-135,
				-128
			],
			[
				-42,
				28
			],
			[
				-32,
				-114
			]
		],
		[
			[
				3524,
				6585
			],
			[
				-131,
				-50
			],
			[
				-266,
				134
			]
		],
		[
			[
				3127,
				6669
			],
			[
				-103,
				45
			]
		],
		[
			[
				3024,
				6714
			],
			[
				83,
				83
			],
			[
				41,
				198
			],
			[
				-221,
				238
			]
		],
		[
			[
				2927,
				7233
			],
			[
				304,
				126
			]
		],
		[
			[
				3231,
				7359
			],
			[
				39,
				33
			]
		],
		[
			[
				3270,
				7392
			],
			[
				20,
				114
			]
		],
		[
			[
				2197,
				3265
			],
			[
				171,
				104
			],
			[
				424,
				-1
			],
			[
				169,
				-160
			]
		],
		[
			[
				2961,
				3208
			],
			[
				15,
				-149
			],
			[
				128,
				-79
			],
			[
				4,
				-76
			]
		],
		[
			[
				3108,
				2904
			],
			[
				1,
				-80
			]
		],
		[
			[
				3109,
				2824
			],
			[
				124,
				-70
			]
		],
		[
			[
				3233,
				2754
			],
			[
				-24,
				-135
			],
			[
				50,
				-13
			],
			[
				45,
				-191
			]
		],
		[
			[
				3304,
				2415
			],
			[
				-200,
				-112
			]
		],
		[
			[
				3104,
				2303
			],
			[
				-106,
				76
			],
			[
				-93,
				-70
			]
		],
		[
			[
				3304,
				2415
			],
			[
				0,
				-118
			]
		],
		[
			[
				3304,
				2297
			],
			[
				-46,
				-33
			],
			[
				2,
				-161
			],
			[
				-100,
				-31
			]
		],
		[
			[
				3160,
				2072
			],
			[
				125,
				-155
			],
			[
				-114,
				-18
			],
			[
				-34,
				-118
			]
		],
		[
			[
				3137,
				1781
			],
			[
				-40,
				-3
			],
			[
				-18,
				117
			],
			[
				-65,
				-19
			],
			[
				-53,
				88
			],
			[
				-102,
				19
			]
		],
		[
			[
				3304,
				2297
			],
			[
				55,
				8
			],
			[
				50,
				-95
			]
		],
		[
			[
				3409,
				2210
			],
			[
				105,
				-20
			]
		],
		[
			[
				3514,
				2190
			],
			[
				-16,
				-133
			],
			[
				72,
				-106
			]
		],
		[
			[
				3570,
				1951
			],
			[
				10,
				-84
			]
		],
		[
			[
				3580,
				1867
			],
			[
				-27,
				-249
			]
		],
		[
			[
				3552,
				1618
			],
			[
				0,
				0
			],
			[
				-8,
				7
			],
			[
				-6,
				-10
			],
			[
				0,
				0
			]
		],
		[
			[
				3517,
				1605
			],
			[
				-1,
				-14
			]
		],
		[
			[
				3514,
				2190
			],
			[
				-13,
				71
			],
			[
				206,
				22
			]
		],
		[
			[
				3707,
				2283
			],
			[
				2,
				-28
			]
		],
		[
			[
				3709,
				2255
			],
			[
				-14,
				-111
			]
		],
		[
			[
				3695,
				2144
			],
			[
				-19,
				-87
			]
		],
		[
			[
				3676,
				2057
			],
			[
				-15,
				-89
			],
			[
				94,
				-124
			]
		],
		[
			[
				3755,
				1844
			],
			[
				34,
				27
			]
		],
		[
			[
				3789,
				1871
			],
			[
				101,
				-53
			]
		],
		[
			[
				3707,
				2283
			],
			[
				-99,
				167
			]
		],
		[
			[
				3608,
				2450
			],
			[
				57,
				125
			]
		],
		[
			[
				3665,
				2575
			],
			[
				4,
				0
			]
		],
		[
			[
				3669,
				2575
			],
			[
				22,
				-36
			]
		],
		[
			[
				3691,
				2539
			],
			[
				72,
				-100
			]
		],
		[
			[
				3763,
				2439
			],
			[
				79,
				-58
			]
		],
		[
			[
				3993,
				3138
			],
			[
				-88,
				-115
			]
		],
		[
			[
				3905,
				3023
			],
			[
				-39,
				28
			]
		],
		[
			[
				3866,
				3051
			],
			[
				-124,
				98
			]
		],
		[
			[
				3742,
				3149
			],
			[
				-100,
				32
			],
			[
				-2,
				152
			],
			[
				-58,
				5
			]
		],
		[
			[
				3582,
				3338
			],
			[
				-117,
				230
			]
		],
		[
			[
				3465,
				3568
			],
			[
				61,
				18
			],
			[
				16,
				61
			],
			[
				-53,
				-14
			],
			[
				61,
				153
			]
		],
		[
			[
				3550,
				3786
			],
			[
				-14,
				152
			],
			[
				97,
				84
			],
			[
				-31,
				37
			],
			[
				88,
				-5
			]
		],
		[
			[
				3690,
				4054
			],
			[
				61,
				-147
			]
		],
		[
			[
				3751,
				3907
			],
			[
				48,
				-207
			]
		],
		[
			[
				3799,
				3700
			],
			[
				111,
				-280
			],
			[
				140,
				-79
			]
		],
		[
			[
				4050,
				3341
			],
			[
				27,
				-51
			]
		],
		[
			[
				4077,
				3290
			],
			[
				-76,
				-175
			]
		],
		[
			[
				4001,
				3115
			],
			[
				-8,
				23
			]
		],
		[
			[
				3866,
				3051
			],
			[
				-130,
				-53
			],
			[
				-27,
				-120
			]
		],
		[
			[
				3709,
				2878
			],
			[
				-104,
				29
			],
			[
				-9,
				-45
			],
			[
				-109,
				70
			]
		],
		[
			[
				3487,
				2932
			],
			[
				-26,
				13
			]
		],
		[
			[
				3461,
				2945
			],
			[
				-173,
				136
			]
		],
		[
			[
				3288,
				3081
			],
			[
				-158,
				240
			]
		],
		[
			[
				3130,
				3321
			],
			[
				-47,
				324
			]
		],
		[
			[
				3083,
				3645
			],
			[
				212,
				-103
			]
		],
		[
			[
				3295,
				3542
			],
			[
				170,
				26
			]
		],
		[
			[
				3461,
				2945
			],
			[
				15,
				-250
			],
			[
				-53,
				-17
			]
		],
		[
			[
				3423,
				2678
			],
			[
				185,
				-228
			]
		],
		[
			[
				2086,
				3721
			],
			[
				66,
				-65
			],
			[
				109,
				36
			],
			[
				170,
				-75
			],
			[
				258,
				89
			],
			[
				34,
				59
			],
			[
				-104,
				66
			]
		],
		[
			[
				2619,
				3831
			],
			[
				144,
				40
			]
		],
		[
			[
				2763,
				3871
			],
			[
				283,
				-181
			]
		],
		[
			[
				3046,
				3690
			],
			[
				37,
				-45
			]
		],
		[
			[
				1934,
				4121
			],
			[
				161,
				97
			],
			[
				31,
				157
			]
		],
		[
			[
				2126,
				4375
			],
			[
				17,
				38
			]
		],
		[
			[
				2143,
				4413
			],
			[
				71,
				88
			],
			[
				111,
				-47
			]
		],
		[
			[
				2325,
				4454
			],
			[
				77,
				136
			],
			[
				48,
				-22
			],
			[
				19,
				162
			]
		],
		[
			[
				2469,
				4730
			],
			[
				40,
				27
			],
			[
				238,
				-233
			]
		],
		[
			[
				2747,
				4524
			],
			[
				159,
				-65
			]
		],
		[
			[
				2906,
				4459
			],
			[
				20,
				-51
			]
		],
		[
			[
				2926,
				4408
			],
			[
				232,
				-147
			]
		],
		[
			[
				3158,
				4261
			],
			[
				41,
				-104
			]
		],
		[
			[
				3199,
				4157
			],
			[
				63,
				-194
			]
		],
		[
			[
				3262,
				3963
			],
			[
				288,
				-177
			]
		],
		[
			[
				3713,
				2873
			],
			[
				21,
				-68
			]
		],
		[
			[
				3734,
				2805
			],
			[
				97,
				-107
			]
		],
		[
			[
				3709,
				2878
			],
			[
				4,
				-5
			]
		],
		[
			[
				628,
				5170
			],
			[
				115,
				-177
			]
		],
		[
			[
				743,
				4993
			],
			[
				-78,
				-99
			],
			[
				-116,
				39
			]
		],
		[
			[
				549,
				4933
			],
			[
				-29,
				-208
			]
		],
		[
			[
				621,
				5269
			],
			[
				-92,
				-65
			]
		],
		[
			[
				553,
				5318
			],
			[
				3,
				-2
			]
		],
		[
			[
				612,
				5289
			],
			[
				9,
				-20
			]
		],
		[
			[
				656,
				4742
			],
			[
				12,
				-160
			]
		],
		[
			[
				4107,
				2953
			],
			[
				-106,
				162
			]
		],
		[
			[
				4077,
				3290
			],
			[
				54,
				3
			]
		],
		[
			[
				4131,
				3293
			],
			[
				174,
				-244
			]
		],
		[
			[
				4305,
				3049
			],
			[
				12,
				-38
			]
		],
		[
			[
				4317,
				3011
			],
			[
				-12,
				-173
			]
		],
		[
			[
				4305,
				2838
			],
			[
				2,
				-7
			]
		],
		[
			[
				4307,
				2831
			],
			[
				-71,
				-22
			]
		],
		[
			[
				4236,
				2809
			],
			[
				-48,
				18
			]
		],
		[
			[
				3900,
				2774
			],
			[
				108,
				-8
			]
		],
		[
			[
				4073,
				2580
			],
			[
				3,
				-2
			]
		],
		[
			[
				3905,
				3023
			],
			[
				9,
				-78
			]
		],
		[
			[
				3914,
				2945
			],
			[
				-14,
				-171
			]
		],
		[
			[
				14693,
				19374
			],
			[
				-67,
				10
			]
		],
		[
			[
				15083,
				19852
			],
			[
				-390,
				-478
			]
		],
		[
			[
				14316,
				19455
			],
			[
				-168,
				70
			]
		],
		[
			[
				14148,
				19525
			],
			[
				-231,
				-209
			]
		],
		[
			[
				13917,
				19316
			],
			[
				-548,
				-773
			],
			[
				-147,
				-24
			]
		],
		[
			[
				13222,
				18519
			],
			[
				-35,
				-141
			],
			[
				140,
				-25
			],
			[
				71,
				-277
			]
		],
		[
			[
				13398,
				18076
			],
			[
				-6,
				-211
			]
		],
		[
			[
				13392,
				17865
			],
			[
				-494,
				68
			],
			[
				-447,
				-70
			]
		],
		[
			[
				12451,
				17863
			],
			[
				-55,
				-34
			],
			[
				-126,
				79
			],
			[
				-82,
				143
			],
			[
				52,
				169
			],
			[
				-194,
				91
			],
			[
				-18,
				119
			]
		],
		[
			[
				12028,
				18430
			],
			[
				-75,
				132
			],
			[
				8,
				70
			],
			[
				-106,
				-33
			],
			[
				-35,
				14
			],
			[
				-52,
				-85
			],
			[
				-57,
				27
			],
			[
				-76,
				64
			],
			[
				-18,
				44
			],
			[
				-62,
				-12
			],
			[
				-71,
				7
			],
			[
				-152,
				54
			]
		],
		[
			[
				12070,
				17580
			],
			[
				171,
				-490
			],
			[
				-143,
				-125
			],
			[
				-230,
				-11
			]
		],
		[
			[
				10487,
				16956
			],
			[
				-32,
				201
			],
			[
				-190,
				117
			]
		],
		[
			[
				10265,
				17274
			],
			[
				170,
				182
			]
		],
		[
			[
				10435,
				17456
			],
			[
				105,
				278
			]
		],
		[
			[
				12451,
				17863
			],
			[
				-78,
				-243
			],
			[
				-303,
				-40
			]
		],
		[
			[
				16825,
				19101
			],
			[
				-295,
				43
			],
			[
				-196,
				271
			]
		],
		[
			[
				16222,
				18189
			],
			[
				-7,
				480
			],
			[
				147,
				222
			],
			[
				176,
				-5
			],
			[
				119,
				107
			]
		],
		[
			[
				16657,
				18993
			],
			[
				168,
				108
			]
		],
		[
			[
				16181,
				19470
			],
			[
				-587,
				-488
			]
		],
		[
			[
				15594,
				18982
			],
			[
				-22,
				350
			],
			[
				227,
				247
			],
			[
				-49,
				524
			]
		],
		[
			[
				3751,
				3907
			],
			[
				263,
				45
			]
		],
		[
			[
				4014,
				3952
			],
			[
				96,
				-98
			],
			[
				43,
				23
			]
		],
		[
			[
				4196,
				3376
			],
			[
				-65,
				-83
			]
		],
		[
			[
				1571,
				1838
			],
			[
				-70,
				17
			]
		],
		[
			[
				1501,
				1855
			],
			[
				19,
				268
			]
		],
		[
			[
				1520,
				2123
			],
			[
				46,
				49
			],
			[
				-33,
				45
			],
			[
				95,
				79
			],
			[
				-21,
				177
			],
			[
				151,
				116
			]
		],
		[
			[
				2321,
				994
			],
			[
				-12,
				-98
			],
			[
				-58,
				-12
			]
		],
		[
			[
				2251,
				884
			],
			[
				-103,
				-93
			],
			[
				16,
				-56
			]
		],
		[
			[
				2164,
				735
			],
			[
				-79,
				-28
			]
		],
		[
			[
				2085,
				707
			],
			[
				-108,
				48
			]
		],
		[
			[
				1977,
				755
			],
			[
				-9,
				65
			]
		],
		[
			[
				1968,
				820
			],
			[
				64,
				119
			],
			[
				-44,
				138
			],
			[
				53,
				-7
			],
			[
				13,
				80
			]
		],
		[
			[
				2054,
				1150
			],
			[
				-46,
				192
			],
			[
				-92,
				33
			],
			[
				-193,
				-89
			]
		],
		[
			[
				1723,
				1286
			],
			[
				-88,
				1
			]
		],
		[
			[
				1635,
				1287
			],
			[
				91,
				183
			]
		],
		[
			[
				1726,
				1470
			],
			[
				-42,
				82
			],
			[
				45,
				9
			],
			[
				24,
				218
			],
			[
				-143,
				71
			]
		],
		[
			[
				1610,
				1850
			],
			[
				-39,
				-12
			]
		],
		[
			[
				5979,
				13380
			],
			[
				337,
				-166
			]
		],
		[
			[
				6316,
				13214
			],
			[
				-40,
				-241
			],
			[
				-229,
				-8
			],
			[
				-159,
				-100
			]
		],
		[
			[
				5888,
				12865
			],
			[
				-37,
				-141
			]
		],
		[
			[
				5796,
				13422
			],
			[
				12,
				5
			]
		],
		[
			[
				5654,
				12214
			],
			[
				191,
				45
			],
			[
				103,
				169
			]
		],
		[
			[
				5948,
				12428
			],
			[
				173,
				90
			]
		],
		[
			[
				6181,
				12502
			],
			[
				41,
				-217
			],
			[
				-33,
				-142
			],
			[
				-57,
				17
			],
			[
				103,
				-244
			]
		],
		[
			[
				6235,
				11916
			],
			[
				205,
				5
			],
			[
				175,
				172
			],
			[
				201,
				-45
			]
		],
		[
			[
				6316,
				13214
			],
			[
				171,
				66
			],
			[
				64,
				-68
			],
			[
				104,
				106
			]
		],
		[
			[
				6655,
				13318
			],
			[
				171,
				13
			],
			[
				58,
				80
			],
			[
				29,
				-158
			],
			[
				93,
				7
			],
			[
				77,
				39
			],
			[
				-8,
				142
			]
		],
		[
			[
				7075,
				13441
			],
			[
				122,
				9
			],
			[
				58,
				-319
			],
			[
				198,
				-20
			]
		],
		[
			[
				5948,
				12428
			],
			[
				102,
				182
			]
		],
		[
			[
				7745,
				15659
			],
			[
				47,
				-173
			],
			[
				-87,
				-72
			],
			[
				141,
				-148
			],
			[
				-37,
				-143
			],
			[
				103,
				-176
			],
			[
				66,
				22
			],
			[
				175,
				-193
			]
		],
		[
			[
				8169,
				16140
			],
			[
				-2,
				-56
			]
		],
		[
			[
				8167,
				16084
			],
			[
				199,
				106
			],
			[
				322,
				-16
			]
		],
		[
			[
				8688,
				16174
			],
			[
				144,
				53
			]
		],
		[
			[
				8832,
				16227
			],
			[
				171,
				4
			]
		],
		[
			[
				9003,
				16231
			],
			[
				154,
				14
			]
		],
		[
			[
				7789,
				16197
			],
			[
				167,
				82
			]
		],
		[
			[
				7956,
				16279
			],
			[
				129,
				-112
			]
		],
		[
			[
				7850,
				16136
			],
			[
				-72,
				6
			],
			[
				11,
				55
			]
		],
		[
			[
				6795,
				15896
			],
			[
				241,
				-82
			]
		],
		[
			[
				7113,
				15831
			],
			[
				75,
				22
			]
		],
		[
			[
				7188,
				15853
			],
			[
				69,
				3
			]
		],
		[
			[
				7789,
				16197
			],
			[
				-42,
				56
			],
			[
				-215,
				-261
			],
			[
				-22,
				153
			]
		],
		[
			[
				7510,
				16145
			],
			[
				115,
				254
			],
			[
				148,
				67
			]
		],
		[
			[
				1396,
				7120
			],
			[
				107,
				-118
			]
		],
		[
			[
				1503,
				7002
			],
			[
				13,
				-26
			]
		],
		[
			[
				1516,
				6976
			],
			[
				-109,
				-95
			]
		],
		[
			[
				1516,
				6976
			],
			[
				176,
				-144
			]
		],
		[
			[
				1692,
				6832
			],
			[
				80,
				53
			]
		],
		[
			[
				1772,
				6885
			],
			[
				70,
				-102
			]
		],
		[
			[
				1842,
				6783
			],
			[
				59,
				-48
			],
			[
				138,
				78
			],
			[
				119,
				-66
			],
			[
				22,
				-47
			],
			[
				-134,
				-148
			],
			[
				69,
				-125
			]
		],
		[
			[
				2115,
				6427
			],
			[
				-106,
				-96
			],
			[
				3,
				-86
			],
			[
				-116,
				41
			]
		],
		[
			[
				1896,
				6286
			],
			[
				-45,
				-129
			]
		],
		[
			[
				1851,
				6157
			],
			[
				-80,
				40
			],
			[
				-300,
				-98
			]
		],
		[
			[
				1471,
				6099
			],
			[
				-93,
				156
			]
		],
		[
			[
				1378,
				6255
			],
			[
				87,
				172
			],
			[
				-55,
				56
			]
		],
		[
			[
				1410,
				6483
			],
			[
				-181,
				168
			]
		],
		[
			[
				1378,
				6255
			],
			[
				-111,
				-52
			]
		],
		[
			[
				1267,
				6203
			],
			[
				-62,
				-80
			]
		],
		[
			[
				1205,
				6123
			],
			[
				-462,
				-7
			]
		],
		[
			[
				743,
				6116
			],
			[
				-131,
				-24
			]
		],
		[
			[
				612,
				6092
			],
			[
				-66,
				13
			]
		],
		[
			[
				546,
				6105
			],
			[
				34,
				59
			]
		],
		[
			[
				3024,
				6714
			],
			[
				-226,
				7
			]
		],
		[
			[
				2798,
				6721
			],
			[
				-264,
				201
			],
			[
				-20,
				101
			],
			[
				-68,
				4
			],
			[
				50,
				152
			],
			[
				-58,
				94
			],
			[
				73,
				68
			]
		],
		[
			[
				1781,
				7658
			],
			[
				-1,
				19
			]
		],
		[
			[
				2379,
				7441
			],
			[
				-208,
				-32
			]
		],
		[
			[
				2171,
				7409
			],
			[
				-38,
				68
			],
			[
				-226,
				-66
			]
		],
		[
			[
				1907,
				7411
			],
			[
				-17,
				36
			]
		],
		[
			[
				1890,
				7447
			],
			[
				-55,
				-1
			],
			[
				-35,
				201
			]
		],
		[
			[
				2798,
				6721
			],
			[
				-360,
				-69
			]
		],
		[
			[
				2438,
				6652
			],
			[
				-152,
				-236
			]
		],
		[
			[
				2286,
				6416
			],
			[
				-171,
				11
			]
		],
		[
			[
				743,
				4993
			],
			[
				415,
				78
			]
		],
		[
			[
				1158,
				5071
			],
			[
				53,
				65
			]
		],
		[
			[
				1211,
				5136
			],
			[
				101,
				135
			]
		],
		[
			[
				1312,
				5271
			],
			[
				55,
				49
			]
		],
		[
			[
				1367,
				5320
			],
			[
				115,
				168
			]
		],
		[
			[
				1482,
				5488
			],
			[
				31,
				60
			]
		],
		[
			[
				1513,
				5548
			],
			[
				382,
				379
			]
		],
		[
			[
				1895,
				5927
			],
			[
				69,
				-199
			],
			[
				164,
				42
			],
			[
				106,
				-50
			],
			[
				-3,
				-65
			]
		],
		[
			[
				2231,
				5655
			],
			[
				30,
				-187
			],
			[
				215,
				-35
			],
			[
				28,
				-135
			]
		],
		[
			[
				2504,
				5298
			],
			[
				-104,
				-29
			]
		],
		[
			[
				2400,
				5269
			],
			[
				59,
				-166
			],
			[
				-157,
				-127
			]
		],
		[
			[
				2302,
				4976
			],
			[
				167,
				-246
			]
		],
		[
			[
				1136,
				4434
			],
			[
				-64,
				51
			]
		],
		[
			[
				1072,
				4485
			],
			[
				-42,
				107
			]
		],
		[
			[
				1030,
				4592
			],
			[
				-90,
				79
			],
			[
				-104,
				-128
			]
		],
		[
			[
				679,
				5750
			],
			[
				55,
				-238
			]
		],
		[
			[
				734,
				5512
			],
			[
				174,
				85
			],
			[
				201,
				-4
			]
		],
		[
			[
				1109,
				5593
			],
			[
				76,
				-55
			],
			[
				235,
				151
			]
		],
		[
			[
				1420,
				5689
			],
			[
				93,
				-141
			]
		],
		[
			[
				233,
				5685
			],
			[
				160,
				-55
			],
			[
				76,
				26
			],
			[
				-25,
				57
			],
			[
				235,
				37
			]
		],
		[
			[
				1851,
				6157
			],
			[
				44,
				-230
			]
		],
		[
			[
				3029,
				5208
			],
			[
				-198,
				98
			],
			[
				-40,
				-80
			]
		],
		[
			[
				2791,
				5226
			],
			[
				-144,
				6
			]
		],
		[
			[
				2647,
				5232
			],
			[
				-143,
				66
			]
		],
		[
			[
				3524,
				6585
			],
			[
				-143,
				-158
			],
			[
				226,
				-180
			],
			[
				-45,
				-249
			]
		],
		[
			[
				3562,
				5998
			],
			[
				114,
				-30
			]
		],
		[
			[
				3187,
				5064
			],
			[
				113,
				-79
			]
		],
		[
			[
				3300,
				4985
			],
			[
				114,
				-128
			]
		],
		[
			[
				3414,
				4857
			],
			[
				40,
				-45
			]
		],
		[
			[
				3454,
				4812
			],
			[
				68,
				-78
			],
			[
				18,
				-424
			]
		],
		[
			[
				3540,
				4310
			],
			[
				10,
				-101
			],
			[
				100,
				6
			]
		],
		[
			[
				3650,
				4215
			],
			[
				40,
				-161
			]
		],
		[
			[
				1384,
				1538
			],
			[
				-313,
				-207
			]
		],
		[
			[
				1571,
				1838
			],
			[
				-187,
				-300
			]
		],
		[
			[
				1384,
				1538
			],
			[
				-101,
				-333
			]
		],
		[
			[
				1283,
				1205
			],
			[
				-145,
				-54
			],
			[
				-93,
				96
			],
			[
				-102,
				-173
			],
			[
				-63,
				2
			]
		],
		[
			[
				880,
				1076
			],
			[
				-24,
				-89
			]
		],
		[
			[
				856,
				987
			],
			[
				27,
				-137
			]
		],
		[
			[
				883,
				850
			],
			[
				-58,
				-84
			]
		],
		[
			[
				4585,
				1955
			],
			[
				-76,
				-188
			]
		],
		[
			[
				1792,
				392
			],
			[
				-12,
				102
			]
		],
		[
			[
				1780,
				494
			],
			[
				92,
				324
			]
		],
		[
			[
				1872,
				818
			],
			[
				-86,
				56
			],
			[
				-64,
				183
			]
		],
		[
			[
				1722,
				1057
			],
			[
				1,
				229
			]
		],
		[
			[
				2085,
				707
			],
			[
				-40,
				-111
			]
		],
		[
			[
				2045,
				596
			],
			[
				-55,
				-40
			],
			[
				-7,
				-122
			],
			[
				132,
				-82
			],
			[
				-17,
				-64
			]
		],
		[
			[
				2098,
				288
			],
			[
				-92,
				-48
			]
		],
		[
			[
				2006,
				240
			],
			[
				66,
				-159
			]
		],
		[
			[
				1742,
				215
			],
			[
				50,
				177
			]
		],
		[
			[
				1629,
				52
			],
			[
				1,
				5
			]
		],
		[
			[
				1702,
				142
			],
			[
				12,
				5
			]
		],
		[
			[
				4339,
				4977
			],
			[
				-18,
				31
			]
		],
		[
			[
				4321,
				5008
			],
			[
				-41,
				60
			],
			[
				-33,
				-45
			]
		],
		[
			[
				4247,
				5023
			],
			[
				-115,
				314
			]
		],
		[
			[
				3725,
				6002
			],
			[
				48,
				63
			]
		],
		[
			[
				3773,
				6065
			],
			[
				102,
				-52
			],
			[
				98,
				77
			]
		],
		[
			[
				3973,
				6090
			],
			[
				253,
				-344
			],
			[
				105,
				37
			],
			[
				213,
				-535
			]
		],
		[
			[
				4544,
				5248
			],
			[
				334,
				144
			]
		],
		[
			[
				4878,
				5392
			],
			[
				49,
				103
			]
		],
		[
			[
				4927,
				5495
			],
			[
				-142,
				233
			],
			[
				68,
				245
			],
			[
				-154,
				391
			]
		],
		[
			[
				4699,
				6364
			],
			[
				128,
				53
			]
		],
		[
			[
				4827,
				6417
			],
			[
				106,
				-58
			],
			[
				-10,
				358
			]
		],
		[
			[
				5188,
				4637
			],
			[
				-43,
				74
			]
		],
		[
			[
				5145,
				4711
			],
			[
				-42,
				-35
			],
			[
				21,
				-172
			],
			[
				-90,
				43
			],
			[
				1,
				-173
			],
			[
				-257,
				-153
			]
		],
		[
			[
				4778,
				4221
			],
			[
				-223,
				419
			]
		],
		[
			[
				4555,
				4640
			],
			[
				-42,
				61
			]
		],
		[
			[
				4513,
				4701
			],
			[
				-174,
				276
			]
		],
		[
			[
				4925,
				2845
			],
			[
				-14,
				280
			]
		],
		[
			[
				4585,
				3790
			],
			[
				5,
				91
			],
			[
				136,
				-2
			],
			[
				-7,
				76
			],
			[
				79,
				-3
			]
		],
		[
			[
				4798,
				3952
			],
			[
				-5,
				23
			]
		],
		[
			[
				4793,
				3975
			],
			[
				-20,
				146
			]
		],
		[
			[
				4773,
				4121
			],
			[
				5,
				100
			]
		],
		[
			[
				4247,
				5023
			],
			[
				-72,
				-45
			]
		],
		[
			[
				4175,
				4978
			],
			[
				-191,
				-314
			]
		],
		[
			[
				3984,
				4664
			],
			[
				-159,
				-12
			]
		],
		[
			[
				3825,
				4652
			],
			[
				-129,
				145
			]
		],
		[
			[
				3696,
				4797
			],
			[
				-282,
				60
			]
		],
		[
			[
				4513,
				2717
			],
			[
				-44,
				151
			]
		],
		[
			[
				4469,
				2868
			],
			[
				-103,
				-26
			]
		],
		[
			[
				4366,
				2842
			],
			[
				-61,
				-4
			]
		],
		[
			[
				3984,
				4664
			],
			[
				127,
				-115
			],
			[
				65,
				-276
			]
		],
		[
			[
				4176,
				4273
			],
			[
				204,
				-152
			]
		],
		[
			[
				4380,
				4121
			],
			[
				76,
				-105
			]
		],
		[
			[
				1220,
				474
			],
			[
				30,
				16
			]
		],
		[
			[
				1250,
				490
			],
			[
				95,
				111
			],
			[
				-1,
				289
			]
		],
		[
			[
				1344,
				890
			],
			[
				5,
				97
			],
			[
				-80,
				-23
			]
		],
		[
			[
				1269,
				964
			],
			[
				-43,
				60
			]
		],
		[
			[
				1226,
				1024
			],
			[
				128,
				72
			],
			[
				-71,
				109
			]
		],
		[
			[
				4977,
				11634
			],
			[
				-117,
				35
			],
			[
				76,
				141
			],
			[
				122,
				-10
			],
			[
				-37,
				-33
			],
			[
				-44,
				-133
			]
		],
		[
			[
				4863,
				11852
			],
			[
				-4,
				-1
			],
			[
				-9,
				1
			],
			[
				-5,
				4
			],
			[
				1,
				6
			],
			[
				3,
				5
			],
			[
				19,
				-2
			],
			[
				4,
				-5
			],
			[
				-1,
				-4
			],
			[
				-8,
				-4
			]
		],
		[
			[
				4848,
				11879
			],
			[
				-9,
				-2
			],
			[
				-8,
				5
			],
			[
				11,
				14
			],
			[
				14,
				3
			],
			[
				9,
				-1
			],
			[
				2,
				-4
			],
			[
				0,
				-5
			],
			[
				-19,
				-10
			]
		],
		[
			[
				4773,
				11923
			],
			[
				-17,
				-19
			],
			[
				-13,
				7
			],
			[
				14,
				18
			],
			[
				16,
				-6
			]
		],
		[
			[
				5070,
				11971
			],
			[
				-11,
				-9
			],
			[
				-5,
				6
			],
			[
				-2,
				4
			],
			[
				0,
				2
			],
			[
				0,
				0
			],
			[
				3,
				4
			],
			[
				3,
				5
			],
			[
				4,
				4
			],
			[
				4,
				2
			],
			[
				3,
				-1
			],
			[
				3,
				-2
			],
			[
				1,
				-4
			],
			[
				-3,
				-11
			]
		],
		[
			[
				5104,
				11987
			],
			[
				-6,
				-4
			],
			[
				-2,
				0
			],
			[
				-3,
				3
			],
			[
				-3,
				5
			],
			[
				2,
				4
			],
			[
				4,
				6
			],
			[
				5,
				4
			],
			[
				4,
				0
			],
			[
				5,
				-5
			],
			[
				-2,
				-9
			],
			[
				-4,
				-4
			]
		],
		[
			[
				4919,
				12068
			],
			[
				-8,
				-13
			],
			[
				-20,
				20
			],
			[
				11,
				9
			],
			[
				17,
				-16
			]
		],
		[
			[
				5056,
				11817
			],
			[
				-5,
				-2
			],
			[
				-4,
				0
			],
			[
				-9,
				3
			],
			[
				-2,
				8
			],
			[
				0,
				5
			],
			[
				5,
				6
			],
			[
				6,
				-7
			],
			[
				6,
				-9
			],
			[
				3,
				-4
			]
		],
		[
			[
				4625,
				11682
			],
			[
				-7,
				-12
			],
			[
				-10,
				5
			],
			[
				7,
				11
			],
			[
				10,
				-4
			]
		],
		[
			[
				4857,
				11738
			],
			[
				-8,
				-2
			],
			[
				-4,
				1
			],
			[
				-9,
				11
			],
			[
				-6,
				14
			],
			[
				0,
				12
			],
			[
				7,
				4
			],
			[
				6,
				-3
			],
			[
				21,
				-17
			],
			[
				5,
				-9
			],
			[
				-3,
				-5
			],
			[
				-9,
				-6
			]
		],
		[
			[
				5141,
				11712
			],
			[
				20,
				-16
			],
			[
				-40,
				-59
			],
			[
				20,
				75
			]
		],
		[
			[
				5126,
				11782
			],
			[
				-49,
				-38
			],
			[
				3,
				30
			],
			[
				40,
				17
			],
			[
				6,
				-9
			]
		],
		[
			[
				5164,
				10713
			],
			[
				11,
				58
			],
			[
				-17,
				31
			],
			[
				159,
				63
			],
			[
				33,
				-16
			],
			[
				14,
				45
			],
			[
				-33,
				-28
			],
			[
				-12,
				21
			],
			[
				84,
				46
			],
			[
				36,
				9
			],
			[
				100,
				90
			],
			[
				38,
				43
			],
			[
				25,
				41
			]
		],
		[
			[
				5602,
				11116
			],
			[
				77,
				122
			],
			[
				-157,
				-187
			]
		],
		[
			[
				5522,
				11051
			],
			[
				-201,
				-108
			],
			[
				-32,
				58
			],
			[
				95,
				31
			],
			[
				-119,
				55
			],
			[
				119,
				26
			],
			[
				-101,
				25
			],
			[
				-78,
				-55
			],
			[
				59,
				90
			]
		],
		[
			[
				5264,
				11173
			],
			[
				82,
				52
			]
		],
		[
			[
				5346,
				11225
			],
			[
				-2,
				13
			]
		],
		[
			[
				5344,
				11238
			],
			[
				-32,
				-17
			],
			[
				25,
				49
			]
		],
		[
			[
				5337,
				11270
			],
			[
				8,
				21
			]
		],
		[
			[
				5345,
				11291
			],
			[
				-153,
				-57
			],
			[
				23,
				-87
			],
			[
				-144,
				-95
			],
			[
				66,
				244
			],
			[
				31,
				-37
			],
			[
				46,
				68
			]
		],
		[
			[
				5214,
				11327
			],
			[
				-64,
				-19
			],
			[
				54,
				82
			],
			[
				68,
				56
			],
			[
				-12,
				26
			],
			[
				-53,
				-28
			],
			[
				24,
				46
			],
			[
				-74,
				-86
			],
			[
				40,
				97
			],
			[
				11,
				83
			],
			[
				-17,
				-6
			],
			[
				52,
				45
			],
			[
				27,
				-79
			],
			[
				77,
				-107
			],
			[
				-7,
				-66
			],
			[
				42,
				-40
			],
			[
				10,
				-28
			],
			[
				14,
				14
			],
			[
				-30,
				36
			],
			[
				-25,
				77
			],
			[
				24,
				-2
			],
			[
				-13,
				-21
			],
			[
				42,
				5
			],
			[
				-15,
				17
			],
			[
				35,
				-28
			],
			[
				-1,
				-42
			],
			[
				18,
				-8
			],
			[
				0,
				53
			],
			[
				77,
				-119
			],
			[
				-52,
				110
			],
			[
				95,
				36
			],
			[
				-94,
				-5
			],
			[
				-19,
				16
			],
			[
				33,
				29
			],
			[
				-46,
				-8
			],
			[
				-22,
				44
			],
			[
				42,
				30
			],
			[
				-22,
				16
			],
			[
				-14,
				76
			],
			[
				-14,
				-95
			],
			[
				-44,
				-21
			],
			[
				-3,
				22
			],
			[
				36,
				83
			],
			[
				-56,
				-89
			],
			[
				-37,
				38
			]
		],
		[
			[
				5301,
				11567
			],
			[
				-27,
				124
			],
			[
				108,
				168
			],
			[
				205,
				-209
			],
			[
				-184,
				231
			],
			[
				45,
				52
			]
		],
		[
			[
				5342,
				11841
			],
			[
				-81,
				-120
			],
			[
				-3,
				44
			],
			[
				84,
				76
			]
		],
		[
			[
				4997,
				10959
			],
			[
				50,
				22
			],
			[
				-47,
				-96
			],
			[
				80,
				-34
			],
			[
				34,
				166
			],
			[
				78,
				39
			],
			[
				49,
				-89
			],
			[
				-44,
				-68
			],
			[
				68,
				3
			],
			[
				-112,
				-89
			],
			[
				-135,
				26
			]
		],
		[
			[
				5000,
				10839
			],
			[
				-19,
				-5
			]
		],
		[
			[
				5067,
				10826
			],
			[
				54,
				-26
			],
			[
				37,
				-15
			],
			[
				3,
				-54
			]
		],
		[
			[
				5277,
				10998
			],
			[
				-22,
				28
			],
			[
				33,
				1
			],
			[
				-11,
				-29
			]
		],
		[
			[
				5260,
				11092
			],
			[
				-5,
				-1
			],
			[
				-3,
				1
			],
			[
				0,
				3
			],
			[
				0,
				4
			],
			[
				5,
				5
			],
			[
				6,
				2
			],
			[
				15,
				2
			],
			[
				9,
				0
			],
			[
				2,
				0
			],
			[
				-2,
				-2
			],
			[
				-3,
				-3
			],
			[
				-8,
				-5
			],
			[
				-16,
				-6
			]
		],
		[
			[
				5350,
				10926
			],
			[
				-42,
				-24
			],
			[
				-60,
				34
			],
			[
				17,
				15
			],
			[
				85,
				-25
			]
		],
		[
			[
				4784,
				11199
			],
			[
				-6,
				-2
			],
			[
				-3,
				8
			],
			[
				-1,
				16
			],
			[
				0,
				11
			],
			[
				2,
				5
			],
			[
				3,
				1
			],
			[
				5,
				0
			],
			[
				4,
				-1
			],
			[
				4,
				-5
			],
			[
				0,
				-13
			],
			[
				-3,
				-12
			],
			[
				-5,
				-8
			]
		],
		[
			[
				5032,
				11098
			],
			[
				30,
				-52
			],
			[
				-52,
				7
			],
			[
				22,
				45
			]
		],
		[
			[
				5190,
				11395
			],
			[
				-20,
				2
			],
			[
				30,
				10
			],
			[
				-10,
				-12
			]
		],
		[
			[
				5043,
				11323
			],
			[
				-15,
				11
			],
			[
				24,
				3
			],
			[
				-9,
				-14
			]
		],
		[
			[
				5059,
				11412
			],
			[
				-10,
				-1
			],
			[
				5,
				5
			],
			[
				11,
				11
			],
			[
				5,
				1
			],
			[
				4,
				-1
			],
			[
				2,
				-5
			],
			[
				-2,
				-4
			],
			[
				-4,
				-2
			],
			[
				-11,
				-4
			]
		],
		[
			[
				5145,
				11541
			],
			[
				-10,
				-20
			],
			[
				-24,
				-39
			],
			[
				-14,
				-9
			],
			[
				-3,
				14
			],
			[
				16,
				13
			],
			[
				12,
				24
			],
			[
				16,
				21
			],
			[
				7,
				-4
			]
		],
		[
			[
				5122,
				11481
			],
			[
				20,
				15
			],
			[
				1,
				-22
			],
			[
				-25,
				-23
			],
			[
				-12,
				-18
			],
			[
				-4,
				6
			],
			[
				-8,
				-9
			],
			[
				-7,
				-1
			],
			[
				-4,
				17
			],
			[
				39,
				35
			]
		],
		[
			[
				5061,
				11371
			],
			[
				45,
				39
			],
			[
				-6,
				-27
			],
			[
				40,
				81
			],
			[
				17,
				-10
			],
			[
				-55,
				-131
			],
			[
				-17,
				15
			],
			[
				5,
				21
			],
			[
				-23,
				-16
			],
			[
				-6,
				28
			]
		],
		[
			[
				553,
				2323
			],
			[
				12,
				-12
			]
		],
		[
			[
				565,
				2311
			],
			[
				55,
				54
			],
			[
				30,
				243
			],
			[
				121,
				-56
			],
			[
				-21,
				-77
			],
			[
				59,
				72
			]
		],
		[
			[
				1049,
				2302
			],
			[
				-181,
				-19
			],
			[
				-40,
				108
			],
			[
				3,
				-118
			],
			[
				-58,
				-45
			],
			[
				-29,
				58
			],
			[
				-19,
				-101
			]
		],
		[
			[
				725,
				2185
			],
			[
				95,
				43
			],
			[
				34,
				-131
			],
			[
				-101,
				-11
			],
			[
				-67,
				-127
			],
			[
				-19,
				299
			]
		],
		[
			[
				667,
				2258
			],
			[
				7,
				72
			],
			[
				-95,
				-76
			]
		],
		[
			[
				579,
				2254
			],
			[
				-16,
				11
			],
			[
				-2,
				-43
			],
			[
				50,
				5
			],
			[
				37,
				60
			],
			[
				13,
				-97
			],
			[
				-11,
				-12
			],
			[
				22,
				-30
			],
			[
				-19,
				-96
			],
			[
				-37,
				-72
			],
			[
				-51,
				6
			],
			[
				0,
				60
			],
			[
				8,
				23
			],
			[
				-15,
				-5
			],
			[
				5,
				96
			],
			[
				-10,
				-117
			],
			[
				5,
				-33
			],
			[
				-29,
				-7
			],
			[
				-21,
				136
			],
			[
				13,
				9
			],
			[
				-18,
				56
			],
			[
				-6,
				-15
			]
		],
		[
			[
				497,
				2189
			],
			[
				-14,
				-126
			],
			[
				-35,
				84
			]
		],
		[
			[
				448,
				2147
			],
			[
				-52,
				180
			],
			[
				55,
				-33
			]
		],
		[
			[
				358,
				1873
			],
			[
				14,
				121
			],
			[
				52,
				4
			],
			[
				-52,
				87
			],
			[
				34,
				105
			],
			[
				64,
				-214
			],
			[
				-22,
				-192
			],
			[
				-55,
				1
			],
			[
				-35,
				88
			]
		],
		[
			[
				484,
				1970
			],
			[
				-9,
				43
			],
			[
				29,
				41
			],
			[
				-20,
				-84
			]
		],
		[
			[
				363,
				2147
			],
			[
				-21,
				-10
			],
			[
				13,
				39
			],
			[
				8,
				-29
			]
		],
		[
			[
				531,
				1982
			],
			[
				-7,
				-8
			],
			[
				-5,
				4
			],
			[
				-7,
				3
			],
			[
				0,
				11
			],
			[
				1,
				4
			],
			[
				2,
				6
			],
			[
				3,
				0
			],
			[
				4,
				-3
			],
			[
				6,
				-9
			],
			[
				3,
				-8
			]
		],
		[
			[
				1143,
				2429
			],
			[
				28,
				121
			],
			[
				-50,
				-125
			]
		],
		[
			[
				529,
				1935
			],
			[
				22,
				-129
			],
			[
				-50,
				57
			],
			[
				28,
				72
			]
		],
		[
			[
				516,
				1840
			],
			[
				-3,
				-36
			],
			[
				-7,
				50
			],
			[
				10,
				-14
			]
		],
		[
			[
				551,
				1945
			],
			[
				19,
				23
			],
			[
				18,
				-77
			],
			[
				-13,
				-12
			],
			[
				-24,
				66
			]
		],
		[
			[
				311,
				2224
			],
			[
				-11,
				-6
			],
			[
				-9,
				14
			],
			[
				6,
				12
			],
			[
				10,
				-6
			],
			[
				4,
				-14
			]
		],
		[
			[
				175,
				2012
			],
			[
				-30,
				14
			],
			[
				28,
				23
			],
			[
				2,
				-37
			]
		],
		[
			[
				6627,
				10912
			],
			[
				-270,
				-454
			]
		],
		[
			[
				6357,
				10458
			],
			[
				-190,
				-369
			],
			[
				315,
				-181
			],
			[
				29,
				-408
			],
			[
				-130,
				-286
			],
			[
				-517,
				133
			]
		],
		[
			[
				5864,
				9347
			],
			[
				-361,
				-185
			]
		],
		[
			[
				5256,
				10615
			],
			[
				67,
				-25
			]
		],
		[
			[
				4985,
				2768
			],
			[
				9,
				-146
			],
			[
				-152,
				-108
			]
		],
		[
			[
				4842,
				2514
			],
			[
				70,
				-498
			]
		],
		[
			[
				4912,
				2016
			],
			[
				-75,
				-404
			]
		],
		[
			[
				4082,
				9805
			],
			[
				0,
				-1
			]
		],
		[
			[
				4246,
				8772
			],
			[
				-464,
				-294
			]
		],
		[
			[
				3782,
				8478
			],
			[
				-151,
				-48
			],
			[
				-19,
				150
			],
			[
				-78,
				54
			],
			[
				6,
				86
			],
			[
				178,
				70
			],
			[
				37,
				34
			],
			[
				-80,
				-36
			],
			[
				73,
				81
			]
		],
		[
			[
				3748,
				8869
			],
			[
				-212,
				-105
			]
		],
		[
			[
				3536,
				8764
			],
			[
				-167,
				-90
			],
			[
				-11,
				100
			],
			[
				94,
				44
			]
		],
		[
			[
				3452,
				8818
			],
			[
				83,
				23
			],
			[
				-156,
				-3
			],
			[
				37,
				102
			],
			[
				124,
				57
			],
			[
				-82,
				-75
			],
			[
				50,
				8
			],
			[
				142,
				102
			]
		],
		[
			[
				3650,
				9032
			],
			[
				144,
				80
			],
			[
				24,
				-22
			],
			[
				1,
				50
			],
			[
				-85,
				-17
			],
			[
				84,
				78
			],
			[
				-95,
				-50
			],
			[
				27,
				20
			],
			[
				-66,
				-27
			],
			[
				-48,
				-20
			],
			[
				34,
				64
			],
			[
				-4,
				14
			],
			[
				38,
				-18
			],
			[
				-34,
				47
			],
			[
				39,
				6
			],
			[
				-7,
				23
			],
			[
				20,
				20
			],
			[
				-29,
				45
			],
			[
				-9,
				27
			],
			[
				32,
				13
			],
			[
				56,
				-41
			],
			[
				16,
				8
			]
		],
		[
			[
				3788,
				9332
			],
			[
				53,
				25
			],
			[
				-1,
				21
			],
			[
				-54,
				-18
			],
			[
				-36,
				40
			],
			[
				44,
				40
			],
			[
				28,
				-12
			],
			[
				-21,
				81
			],
			[
				48,
				-24
			],
			[
				-1,
				31
			],
			[
				24,
				-30
			],
			[
				0,
				40
			],
			[
				46,
				-32
			],
			[
				4,
				-19
			],
			[
				7,
				42
			],
			[
				-76,
				43
			],
			[
				58,
				38
			],
			[
				-15,
				13
			],
			[
				22,
				26
			],
			[
				20,
				-34
			]
		],
		[
			[
				3938,
				9603
			],
			[
				74,
				53
			],
			[
				-41,
				86
			],
			[
				160,
				4
			],
			[
				-133,
				49
			],
			[
				18,
				62
			]
		],
		[
			[
				3297,
				8659
			],
			[
				-54,
				10
			],
			[
				24,
				60
			],
			[
				30,
				-70
			]
		],
		[
			[
				3357,
				8665
			],
			[
				-24,
				-18
			],
			[
				4,
				14
			],
			[
				20,
				4
			]
		],
		[
			[
				3578,
				9038
			],
			[
				-31,
				-20
			],
			[
				-6,
				3
			],
			[
				1,
				9
			],
			[
				5,
				7
			],
			[
				14,
				11
			],
			[
				13,
				2
			],
			[
				4,
				-12
			]
		],
		[
			[
				3275,
				8891
			],
			[
				-32,
				-15
			],
			[
				29,
				65
			],
			[
				3,
				-50
			]
		],
		[
			[
				3652,
				9256
			],
			[
				-23,
				60
			],
			[
				73,
				-36
			],
			[
				-50,
				-24
			]
		],
		[
			[
				3635,
				9217
			],
			[
				-55,
				-2
			],
			[
				21,
				64
			],
			[
				34,
				-62
			]
		],
		[
			[
				3632,
				9096
			],
			[
				-10,
				-18
			],
			[
				-16,
				0
			],
			[
				-3,
				16
			],
			[
				8,
				8
			],
			[
				6,
				5
			],
			[
				4,
				0
			],
			[
				8,
				-1
			],
			[
				6,
				-3
			],
			[
				-1,
				-3
			],
			[
				-2,
				-4
			]
		],
		[
			[
				3662,
				9090
			],
			[
				67,
				27
			],
			[
				0,
				-25
			],
			[
				-60,
				-24
			],
			[
				-39,
				-9
			],
			[
				32,
				31
			]
		],
		[
			[
				3876,
				9588
			],
			[
				-12,
				-6
			],
			[
				-11,
				19
			],
			[
				1,
				3
			],
			[
				6,
				8
			],
			[
				6,
				4
			],
			[
				6,
				0
			],
			[
				8,
				-4
			],
			[
				2,
				-9
			],
			[
				-6,
				-15
			]
		],
		[
			[
				3845,
				9572
			],
			[
				-7,
				-1
			],
			[
				-7,
				6
			],
			[
				-3,
				9
			],
			[
				2,
				10
			],
			[
				6,
				4
			],
			[
				4,
				0
			],
			[
				6,
				-2
			],
			[
				2,
				-5
			],
			[
				0,
				-1
			],
			[
				1,
				-4
			],
			[
				-1,
				-10
			],
			[
				-3,
				-6
			]
		],
		[
			[
				3697,
				9480
			],
			[
				-30,
				-23
			],
			[
				3,
				15
			],
			[
				2,
				13
			],
			[
				4,
				7
			],
			[
				12,
				14
			],
			[
				7,
				-9
			],
			[
				4,
				-11
			],
			[
				-2,
				-6
			]
		],
		[
			[
				3966,
				9705
			],
			[
				-9,
				-6
			],
			[
				-21,
				8
			],
			[
				-3,
				7
			],
			[
				-1,
				2
			],
			[
				1,
				3
			],
			[
				0,
				3
			],
			[
				2,
				2
			],
			[
				5,
				1
			],
			[
				10,
				1
			],
			[
				6,
				-2
			],
			[
				5,
				-3
			],
			[
				6,
				-5
			],
			[
				1,
				-6
			],
			[
				-2,
				-5
			]
		],
		[
			[
				3933,
				9692
			],
			[
				-12,
				-7
			],
			[
				-9,
				5
			],
			[
				-9,
				6
			],
			[
				-4,
				8
			],
			[
				5,
				7
			],
			[
				8,
				4
			],
			[
				2,
				-1
			],
			[
				14,
				-11
			],
			[
				2,
				-2
			],
			[
				3,
				-9
			]
		],
		[
			[
				3881,
				9645
			],
			[
				-33,
				-6
			],
			[
				18,
				28
			],
			[
				15,
				-22
			]
		],
		[
			[
				4248,
				8343
			],
			[
				41,
				47
			],
			[
				-105,
				78
			],
			[
				121,
				63
			]
		],
		[
			[
				5137,
				8581
			],
			[
				43,
				-176
			],
			[
				-163,
				-320
			],
			[
				54,
				-132
			]
		],
		[
			[
				4283,
				8606
			],
			[
				-188,
				-95
			],
			[
				180,
				190
			]
		],
		[
			[
				4095,
				8555
			],
			[
				-10,
				-12
			],
			[
				-6,
				1
			],
			[
				-8,
				-10
			],
			[
				-5,
				5
			],
			[
				9,
				19
			],
			[
				13,
				10
			],
			[
				4,
				2
			],
			[
				7,
				3
			],
			[
				2,
				-5
			],
			[
				-1,
				-4
			],
			[
				-5,
				-9
			]
		],
		[
			[
				5071,
				7953
			],
			[
				113,
				-279
			],
			[
				-98,
				-150
			],
			[
				42,
				-236
			]
		],
		[
			[
				5128,
				7288
			],
			[
				-55,
				-208
			],
			[
				136,
				-429
			]
		],
		[
			[
				3593,
				8171
			],
			[
				216,
				-3
			]
		],
		[
			[
				3809,
				8168
			],
			[
				20,
				27
			]
		],
		[
			[
				3829,
				8195
			],
			[
				-124,
				67
			],
			[
				85,
				98
			],
			[
				276,
				-18
			]
		],
		[
			[
				4066,
				8342
			],
			[
				182,
				1
			]
		],
		[
			[
				2820,
				7955
			],
			[
				152,
				38
			],
			[
				-104,
				-13
			]
		],
		[
			[
				2815,
				8323
			],
			[
				102,
				-57
			],
			[
				18,
				60
			],
			[
				62,
				-22
			],
			[
				0,
				78
			],
			[
				107,
				-140
			],
			[
				-57,
				-132
			],
			[
				86,
				78
			]
		],
		[
			[
				3133,
				8188
			],
			[
				13,
				-1
			],
			[
				36,
				39
			],
			[
				121,
				31
			],
			[
				14,
				24
			],
			[
				-159,
				-46
			],
			[
				-21,
				28
			],
			[
				-35,
				43
			],
			[
				42,
				36
			],
			[
				85,
				13
			],
			[
				56,
				33
			],
			[
				39,
				-3
			],
			[
				1,
				28
			],
			[
				-83,
				-31
			],
			[
				-27,
				-2
			],
			[
				-20,
				33
			],
			[
				-26,
				17
			],
			[
				5,
				-40
			],
			[
				32,
				-23
			],
			[
				-83,
				5
			],
			[
				-41,
				47
			],
			[
				59,
				47
			],
			[
				20,
				-41
			],
			[
				0,
				27
			],
			[
				-11,
				22
			],
			[
				50,
				-1
			],
			[
				29,
				46
			],
			[
				26,
				4
			],
			[
				-8,
				-60
			],
			[
				26,
				-21
			],
			[
				2,
				51
			],
			[
				19,
				39
			],
			[
				55,
				13
			],
			[
				13,
				-9
			]
		],
		[
			[
				3362,
				8536
			],
			[
				0,
				0
			],
			[
				4,
				-5
			],
			[
				0,
				-3
			],
			[
				0,
				0
			]
		],
		[
			[
				3366,
				8528
			],
			[
				2,
				-15
			]
		],
		[
			[
				3368,
				8513
			],
			[
				16,
				-25
			],
			[
				-30,
				79
			],
			[
				-34,
				-8
			],
			[
				74,
				65
			],
			[
				102,
				37
			],
			[
				-14,
				-46
			],
			[
				41,
				-74
			],
			[
				28,
				-48
			],
			[
				-18,
				-32
			],
			[
				67,
				-68
			],
			[
				27,
				-30
			]
		],
		[
			[
				3627,
				8363
			],
			[
				-1,
				-119
			],
			[
				-86,
				-79
			],
			[
				53,
				6
			]
		],
		[
			[
				3202,
				8540
			],
			[
				-20,
				15
			],
			[
				54,
				20
			],
			[
				-34,
				-35
			]
		],
		[
			[
				2926,
				8354
			],
			[
				14,
				-10
			],
			[
				-45,
				3
			],
			[
				45,
				15
			],
			[
				-14,
				-8
			]
		],
		[
			[
				3094,
				8439
			],
			[
				-41,
				-31
			],
			[
				7,
				30
			],
			[
				34,
				1
			]
		],
		[
			[
				4082,
				9804
			],
			[
				20,
				2
			],
			[
				-22,
				43
			],
			[
				-24,
				29
			],
			[
				32,
				24
			],
			[
				44,
				-70
			],
			[
				52,
				-11
			],
			[
				10,
				-42
			],
			[
				18,
				13
			],
			[
				28,
				-28
			],
			[
				-28,
				44
			],
			[
				5,
				55
			],
			[
				-48,
				15
			],
			[
				5,
				-19
			],
			[
				-27,
				-9
			],
			[
				-32,
				48
			],
			[
				36,
				34
			],
			[
				33,
				-33
			],
			[
				11,
				37
			],
			[
				62,
				-40
			],
			[
				-51,
				88
			],
			[
				60,
				-25
			],
			[
				23,
				-37
			],
			[
				-1,
				69
			],
			[
				44,
				-27
			],
			[
				-8,
				65
			],
			[
				-34,
				60
			],
			[
				48,
				38
			],
			[
				58,
				-60
			],
			[
				16,
				-4
			],
			[
				-14,
				-22
			]
		],
		[
			[
				4398,
				10041
			],
			[
				61,
				-161
			],
			[
				118,
				29
			],
			[
				1,
				-59
			]
		],
		[
			[
				4578,
				9850
			],
			[
				-18,
				-57
			]
		],
		[
			[
				4560,
				9793
			],
			[
				-62,
				-112
			],
			[
				43,
				66
			]
		],
		[
			[
				4541,
				9747
			],
			[
				66,
				63
			],
			[
				23,
				-45
			],
			[
				-1,
				117
			],
			[
				77,
				4
			],
			[
				-63,
				43
			],
			[
				75,
				65
			],
			[
				-36,
				38
			],
			[
				203,
				66
			],
			[
				-116,
				-23
			],
			[
				-6,
				73
			],
			[
				-34,
				-79
			],
			[
				-50,
				31
			]
		],
		[
			[
				4679,
				10100
			],
			[
				-69,
				125
			],
			[
				106,
				109
			]
		],
		[
			[
				4673,
				10091
			],
			[
				-22,
				-61
			],
			[
				-65,
				29
			],
			[
				25,
				53
			]
		],
		[
			[
				4611,
				10112
			],
			[
				-15,
				67
			],
			[
				77,
				-88
			]
		],
		[
			[
				4535,
				10030
			],
			[
				126,
				-25
			],
			[
				-28,
				-79
			],
			[
				-150,
				48
			],
			[
				-43,
				91
			],
			[
				63,
				34
			],
			[
				-133,
				53
			],
			[
				47,
				47
			],
			[
				118,
				-89
			],
			[
				0,
				-80
			]
		],
		[
			[
				4483,
				9894
			],
			[
				23,
				60
			],
			[
				39,
				-29
			],
			[
				-62,
				-31
			]
		],
		[
			[
				4463,
				10225
			],
			[
				115,
				30
			],
			[
				-11,
				-145
			],
			[
				-38,
				69
			],
			[
				-66,
				46
			]
		],
		[
			[
				4016,
				9857
			],
			[
				17,
				13
			],
			[
				49,
				-65
			]
		],
		[
			[
				4267,
				10111
			],
			[
				-5,
				-1
			],
			[
				-4,
				10
			],
			[
				0,
				5
			],
			[
				1,
				3
			],
			[
				7,
				9
			],
			[
				8,
				1
			],
			[
				7,
				-11
			],
			[
				0,
				-10
			],
			[
				-7,
				-4
			],
			[
				-7,
				-2
			]
		],
		[
			[
				4240,
				10064
			],
			[
				-29,
				14
			],
			[
				33,
				11
			],
			[
				-4,
				-25
			]
		],
		[
			[
				4304,
				10032
			],
			[
				-8,
				0
			],
			[
				-8,
				5
			],
			[
				-12,
				5
			],
			[
				-4,
				8
			],
			[
				0,
				5
			],
			[
				3,
				3
			],
			[
				2,
				2
			],
			[
				6,
				-2
			],
			[
				4,
				-1
			],
			[
				13,
				-13
			],
			[
				4,
				-12
			]
		],
		[
			[
				4278,
				9994
			],
			[
				-17,
				-13
			],
			[
				3,
				28
			],
			[
				14,
				-15
			]
		],
		[
			[
				4244,
				9990
			],
			[
				-37,
				13
			],
			[
				1,
				32
			],
			[
				36,
				-45
			]
		],
		[
			[
				4216,
				9942
			],
			[
				-33,
				23
			],
			[
				18,
				-5
			],
			[
				15,
				-18
			]
		],
		[
			[
				4158,
				10010
			],
			[
				2,
				14
			],
			[
				24,
				-36
			],
			[
				-50,
				11
			],
			[
				0,
				22
			],
			[
				24,
				-11
			]
		],
		[
			[
				3231,
				1205
			],
			[
				-205,
				-16
			],
			[
				-5,
				-46
			],
			[
				126,
				3
			],
			[
				-89,
				-47
			],
			[
				81,
				-15
			],
			[
				-44,
				-46
			]
		],
		[
			[
				3095,
				1038
			],
			[
				-1,
				0
			],
			[
				1,
				1
			]
		],
		[
			[
				3095,
				1039
			],
			[
				-30,
				-9
			]
		],
		[
			[
				3065,
				1030
			],
			[
				-87,
				-99
			],
			[
				-41,
				49
			],
			[
				-1,
				-64
			]
		],
		[
			[
				2936,
				916
			],
			[
				1,
				0
			]
		],
		[
			[
				2937,
				916
			],
			[
				0,
				0
			],
			[
				1,
				1
			],
			[
				8,
				15
			],
			[
				2,
				6
			],
			[
				8,
				4
			],
			[
				4,
				-12
			],
			[
				0,
				-2
			],
			[
				0,
				-2
			]
		],
		[
			[
				2960,
				926
			],
			[
				0,
				0
			],
			[
				-3,
				-14
			],
			[
				-5,
				-9
			],
			[
				7,
				-10
			],
			[
				-9,
				-20
			],
			[
				-46,
				-39
			],
			[
				-3,
				-24
			],
			[
				-2,
				-16
			],
			[
				-9,
				-3
			],
			[
				-2,
				8
			],
			[
				-5,
				-5
			],
			[
				-3,
				-14
			],
			[
				-14,
				-13
			],
			[
				-8,
				-7
			],
			[
				-2,
				-2
			],
			[
				-2,
				-1
			],
			[
				-10,
				-5
			],
			[
				-1,
				-3
			],
			[
				-2,
				-3
			],
			[
				-13,
				-7
			],
			[
				-2,
				-5
			],
			[
				-5,
				-2
			],
			[
				-8,
				-3
			],
			[
				-4,
				-6
			],
			[
				-7,
				-8
			],
			[
				-16,
				-10
			],
			[
				-3,
				-10
			],
			[
				1,
				0
			],
			[
				7,
				-10
			],
			[
				0,
				-3
			],
			[
				0,
				-6
			],
			[
				0,
				-1
			],
			[
				-6,
				-18
			],
			[
				-3,
				-8
			],
			[
				0,
				-1
			],
			[
				0,
				0
			]
		],
		[
			[
				2782,
				648
			],
			[
				-132,
				-219
			],
			[
				-51,
				52
			]
		],
		[
			[
				2982,
				882
			],
			[
				-15,
				4
			],
			[
				5,
				33
			],
			[
				10,
				-37
			]
		],
		[
			[
				2915,
				830
			],
			[
				61,
				42
			],
			[
				-47,
				-48
			],
			[
				-14,
				6
			]
		],
		[
			[
				2863,
				691
			],
			[
				0,
				22
			],
			[
				-29,
				-4
			],
			[
				9,
				26
			],
			[
				55,
				50
			],
			[
				46,
				18
			],
			[
				-54,
				-60
			],
			[
				17,
				-11
			],
			[
				-44,
				-41
			]
		],
		[
			[
				2825,
				726
			],
			[
				-5,
				-48
			],
			[
				-23,
				7
			],
			[
				28,
				41
			]
		],
		[
			[
				2600,
				420
			],
			[
				0,
				0
			],
			[
				-5,
				13
			],
			[
				25,
				-14
			],
			[
				-6,
				-9
			],
			[
				-8,
				3
			],
			[
				0,
				0
			]
		],
		[
			[
				2996,
				916
			],
			[
				-14,
				-12
			],
			[
				16,
				39
			],
			[
				-2,
				-27
			]
		],
		[
			[
				3032,
				963
			],
			[
				-12,
				4
			],
			[
				47,
				21
			],
			[
				-35,
				-25
			]
		],
		[
			[
				3015,
				917
			],
			[
				-12,
				5
			],
			[
				35,
				28
			],
			[
				-23,
				-33
			]
		],
		[
			[
				4176,
				2003
			],
			[
				4,
				84
			]
		],
		[
			[
				4180,
				2087
			],
			[
				-47,
				-60
			],
			[
				-20,
				172
			]
		],
		[
			[
				4113,
				2199
			],
			[
				22,
				108
			]
		],
		[
			[
				4113,
				2320
			],
			[
				6,
				11
			],
			[
				-4,
				-84
			],
			[
				-19,
				-48
			],
			[
				-29,
				5
			],
			[
				33,
				67
			],
			[
				2,
				29
			],
			[
				11,
				20
			]
		],
		[
			[
				4168,
				2026
			],
			[
				-9,
				21
			],
			[
				17,
				-2
			],
			[
				-8,
				-19
			]
		],
		[
			[
				5503,
				9162
			],
			[
				-366,
				-581
			]
		],
		[
			[
				4305,
				8531
			],
			[
				-57,
				21
			],
			[
				35,
				54
			]
		],
		[
			[
				4275,
				8701
			],
			[
				371,
				160
			]
		],
		[
			[
				4646,
				8861
			],
			[
				-10,
				89
			]
		],
		[
			[
				4636,
				8950
			],
			[
				-75,
				12
			],
			[
				46,
				65
			]
		],
		[
			[
				4607,
				9027
			],
			[
				0,
				97
			]
		],
		[
			[
				4607,
				9124
			],
			[
				-50,
				-119
			],
			[
				-149,
				-43
			],
			[
				-7,
				64
			],
			[
				143,
				139
			],
			[
				61,
				-14
			]
		],
		[
			[
				4605,
				9151
			],
			[
				76,
				63
			],
			[
				-165,
				29
			],
			[
				-6,
				68
			],
			[
				107,
				51
			],
			[
				-56,
				11
			]
		],
		[
			[
				4561,
				9373
			],
			[
				-2,
				-32
			],
			[
				-59,
				-26
			],
			[
				-10,
				-102
			],
			[
				-132,
				-95
			],
			[
				-159,
				-119
			],
			[
				-129,
				-94
			],
			[
				34,
				10
			]
		],
		[
			[
				4104,
				8915
			],
			[
				206,
				140
			],
			[
				71,
				-38
			],
			[
				-61,
				-202
			],
			[
				-74,
				-43
			]
		],
		[
			[
				4388,
				8897
			],
			[
				116,
				25
			],
			[
				-152,
				-113
			],
			[
				36,
				88
			]
		],
		[
			[
				733,
				3152
			],
			[
				6,
				53
			],
			[
				45,
				-32
			],
			[
				28,
				56
			],
			[
				-18,
				-21
			],
			[
				-8,
				22
			],
			[
				-23,
				-31
			],
			[
				-19,
				70
			],
			[
				8,
				36
			],
			[
				-14,
				49
			],
			[
				26,
				24
			],
			[
				-39,
				-14
			],
			[
				-5,
				16
			],
			[
				-20,
				-51
			],
			[
				-46,
				-14
			],
			[
				-18,
				9
			],
			[
				20,
				62
			],
			[
				1,
				19
			],
			[
				99,
				49
			],
			[
				-60,
				9
			],
			[
				-26,
				-13
			],
			[
				26,
				72
			],
			[
				-43,
				-71
			],
			[
				5,
				43
			],
			[
				39,
				56
			],
			[
				-6,
				21
			]
		],
		[
			[
				691,
				3571
			],
			[
				70,
				128
			],
			[
				-69,
				-84
			],
			[
				-7,
				46
			],
			[
				-21,
				-134
			]
		],
		[
			[
				664,
				3527
			],
			[
				-36,
				-43
			],
			[
				-11,
				-78
			],
			[
				-58,
				-52
			],
			[
				-15,
				-64
			],
			[
				-8,
				45
			],
			[
				-52,
				-39
			],
			[
				34,
				31
			],
			[
				-10,
				28
			],
			[
				-37,
				41
			],
			[
				36,
				27
			],
			[
				-10,
				10
			]
		],
		[
			[
				528,
				3293
			],
			[
				-14,
				-8
			],
			[
				12,
				26
			],
			[
				2,
				-18
			]
		],
		[
			[
				491,
				3314
			],
			[
				-23,
				8
			],
			[
				15,
				41
			],
			[
				16,
				-16
			],
			[
				-8,
				-33
			]
		],
		[
			[
				497,
				3433
			],
			[
				-87,
				-23
			],
			[
				58,
				91
			],
			[
				-44,
				-42
			],
			[
				-38,
				50
			],
			[
				7,
				69
			],
			[
				84,
				14
			],
			[
				-108,
				20
			],
			[
				94,
				92
			],
			[
				-41,
				154
			],
			[
				75,
				8
			],
			[
				97,
				-131
			],
			[
				78,
				20
			]
		],
		[
			[
				365,
				3604
			],
			[
				0,
				0
			],
			[
				7,
				-5
			],
			[
				-1,
				-3
			],
			[
				0,
				0
			]
		],
		[
			[
				865,
				4050
			],
			[
				33,
				24
			],
			[
				-64,
				-19
			]
		],
		[
			[
				843,
				4049
			],
			[
				-1,
				5
			],
			[
				7,
				-3
			]
		],
		[
			[
				987,
				3375
			],
			[
				204,
				275
			]
		],
		[
			[
				1191,
				3650
			],
			[
				122,
				105
			],
			[
				72,
				-42
			],
			[
				-82,
				-360
			]
		],
		[
			[
				1303,
				3353
			],
			[
				-4,
				-157
			],
			[
				22,
				142
			]
		],
		[
			[
				1321,
				3338
			],
			[
				76,
				341
			],
			[
				113,
				134
			]
		],
		[
			[
				1510,
				3813
			],
			[
				195,
				34
			],
			[
				-142,
				-8
			]
		],
		[
			[
				1563,
				3839
			],
			[
				63,
				148
			],
			[
				-152,
				-171
			]
		],
		[
			[
				1474,
				3816
			],
			[
				-81,
				-70
			],
			[
				-27,
				58
			]
		],
		[
			[
				1366,
				3804
			],
			[
				54,
				82
			],
			[
				-151,
				-115
			]
		],
		[
			[
				1269,
				3771
			],
			[
				-138,
				-85
			],
			[
				-54,
				125
			],
			[
				41,
				-135
			],
			[
				-91,
				-19
			],
			[
				34,
				-140
			],
			[
				-27,
				-57
			],
			[
				-96,
				41
			],
			[
				-71,
				-239
			]
		],
		[
			[
				705,
				4216
			],
			[
				-66,
				-62
			],
			[
				-18,
				5
			],
			[
				17,
				-89
			],
			[
				-68,
				-32
			],
			[
				-35,
				-39
			],
			[
				-22,
				13
			],
			[
				1,
				-29
			],
			[
				-21,
				15
			],
			[
				9,
				-45
			],
			[
				-70,
				-29
			],
			[
				-27,
				32
			],
			[
				-20,
				84
			],
			[
				-63,
				61
			],
			[
				9,
				25
			],
			[
				96,
				-91
			],
			[
				-41,
				85
			],
			[
				-67,
				63
			],
			[
				13,
				13
			],
			[
				42,
				-39
			],
			[
				-15,
				38
			],
			[
				30,
				1
			],
			[
				-71,
				7
			],
			[
				-58,
				88
			]
		],
		[
			[
				260,
				4291
			],
			[
				-51,
				30
			],
			[
				46,
				11
			]
		],
		[
			[
				255,
				4332
			],
			[
				207,
				-127
			],
			[
				52,
				-142
			],
			[
				-23,
				65
			],
			[
				67,
				-68
			],
			[
				-50,
				70
			],
			[
				56,
				-35
			],
			[
				-8,
				85
			]
		],
		[
			[
				556,
				4180
			],
			[
				-2,
				3
			],
			[
				-5,
				-1
			],
			[
				-5,
				-2
			],
			[
				-7,
				-3
			],
			[
				-8,
				-5
			],
			[
				-14,
				21
			],
			[
				4,
				16
			],
			[
				-4,
				5
			],
			[
				-6,
				-13
			],
			[
				-7,
				6
			],
			[
				7,
				17
			],
			[
				-1,
				10
			],
			[
				-7,
				-1
			],
			[
				-5,
				-15
			],
			[
				-9,
				3
			],
			[
				-5,
				7
			],
			[
				3,
				31
			],
			[
				-7,
				-1
			],
			[
				-6,
				-20
			],
			[
				-5,
				-4
			],
			[
				-20,
				4
			],
			[
				-19,
				16
			],
			[
				-2,
				10
			],
			[
				6,
				14
			],
			[
				17,
				33
			],
			[
				0,
				0
			],
			[
				15,
				-1
			],
			[
				6,
				9
			],
			[
				0,
				16
			],
			[
				21,
				5
			],
			[
				12,
				-7
			],
			[
				3,
				11
			],
			[
				-9,
				4
			],
			[
				-10,
				17
			],
			[
				-2,
				17
			],
			[
				10,
				27
			],
			[
				15,
				5
			],
			[
				20,
				-4
			],
			[
				37,
				17
			],
			[
				14,
				-6
			],
			[
				5,
				-13
			],
			[
				9,
				-12
			],
			[
				0,
				1
			],
			[
				16,
				19
			],
			[
				11,
				-4
			],
			[
				22,
				4
			],
			[
				1,
				2
			],
			[
				5,
				5
			],
			[
				-6,
				3
			],
			[
				-9,
				4
			],
			[
				-1,
				0
			],
			[
				-9,
				-2
			],
			[
				-26,
				-5
			],
			[
				-18,
				11
			],
			[
				-3,
				8
			],
			[
				29,
				44
			],
			[
				-8,
				2
			],
			[
				-35,
				-44
			],
			[
				-43,
				-17
			],
			[
				-10,
				4
			],
			[
				-16,
				-3
			],
			[
				-15,
				-15
			],
			[
				-7,
				-57
			],
			[
				-17,
				3
			],
			[
				1,
				-23
			],
			[
				-6,
				-7
			],
			[
				-2,
				-2
			],
			[
				-12,
				5
			],
			[
				3,
				17
			],
			[
				-17,
				12
			],
			[
				-1,
				1
			],
			[
				-1,
				-1
			],
			[
				-15,
				-2
			],
			[
				1,
				-8
			],
			[
				-15,
				-2
			],
			[
				-3,
				12
			],
			[
				2,
				20
			],
			[
				1,
				17
			],
			[
				10,
				11
			],
			[
				-18,
				2
			],
			[
				-1,
				-29
			],
			[
				0,
				-1
			],
			[
				-4,
				-15
			],
			[
				3,
				-9
			],
			[
				-19,
				-27
			],
			[
				-13,
				5
			],
			[
				-1,
				28
			],
			[
				4,
				0
			],
			[
				6,
				12
			],
			[
				-19,
				-5
			],
			[
				0,
				0
			]
		],
		[
			[
				297,
				4124
			],
			[
				0,
				0
			],
			[
				-8,
				19
			],
			[
				-1,
				4
			],
			[
				2,
				4
			],
			[
				10,
				-7
			],
			[
				6,
				-7
			],
			[
				10,
				-15
			],
			[
				3,
				-11
			],
			[
				-7,
				-2
			],
			[
				-1,
				0
			],
			[
				0,
				0
			]
		],
		[
			[
				311,
				4109
			],
			[
				-5,
				-1
			],
			[
				-6,
				10
			],
			[
				-3,
				6
			]
		],
		[
			[
				243,
				4289
			],
			[
				1,
				6
			]
		],
		[
			[
				244,
				4295
			],
			[
				0,
				0
			],
			[
				0,
				1
			],
			[
				5,
				-4
			],
			[
				0,
				0
			]
		],
		[
			[
				249,
				4292
			],
			[
				15,
				-13
			],
			[
				9,
				-18
			],
			[
				-10,
				0
			],
			[
				0,
				0
			],
			[
				0,
				0
			]
		],
		[
			[
				263,
				4261
			],
			[
				-20,
				25
			],
			[
				0,
				3
			]
		],
		[
			[
				383,
				3999
			],
			[
				10,
				-48
			],
			[
				-24,
				33
			]
		],
		[
			[
				369,
				3984
			],
			[
				-17,
				22
			],
			[
				-7,
				10
			],
			[
				-36,
				1
			],
			[
				-12,
				11
			],
			[
				3,
				5
			],
			[
				-10,
				11
			],
			[
				-16,
				8
			],
			[
				8,
				4
			],
			[
				-34,
				6
			],
			[
				3,
				9
			],
			[
				-10,
				10
			],
			[
				8,
				4
			],
			[
				-12,
				12
			],
			[
				-5,
				-4
			],
			[
				-14,
				9
			],
			[
				-15,
				19
			],
			[
				0,
				6
			],
			[
				-15,
				14
			],
			[
				-8,
				13
			],
			[
				-2,
				-9
			],
			[
				-11,
				5
			],
			[
				-3,
				10
			],
			[
				12,
				4
			],
			[
				12,
				-6
			],
			[
				2,
				4
			],
			[
				-18,
				15
			],
			[
				-1,
				7
			],
			[
				12,
				-2
			],
			[
				2,
				4
			],
			[
				-14,
				10
			],
			[
				-13,
				23
			],
			[
				25,
				-18
			],
			[
				-5,
				12
			],
			[
				-4,
				7
			],
			[
				-4,
				10
			],
			[
				7,
				-5
			],
			[
				46,
				-38
			],
			[
				0,
				14
			],
			[
				1,
				0
			],
			[
				20,
				-4
			],
			[
				20,
				-19
			],
			[
				9,
				-8
			],
			[
				13,
				-35
			],
			[
				8,
				-24
			],
			[
				10,
				-18
			],
			[
				11,
				-11
			],
			[
				-5,
				17
			],
			[
				6,
				4
			],
			[
				6,
				-16
			],
			[
				3,
				-3
			],
			[
				38,
				-43
			],
			[
				6,
				-9
			],
			[
				14,
				-33
			]
		],
		[
			[
				340,
				4142
			],
			[
				4,
				-13
			],
			[
				-5,
				1
			],
			[
				0,
				0
			],
			[
				-7,
				2
			],
			[
				-1,
				1
			],
			[
				-24,
				21
			],
			[
				-3,
				9
			],
			[
				-1,
				4
			],
			[
				7,
				-1
			],
			[
				5,
				-2
			],
			[
				18,
				-16
			],
			[
				7,
				-6
			]
		],
		[
			[
				184,
				4089
			],
			[
				-9,
				23
			],
			[
				62,
				-60
			],
			[
				-53,
				37
			]
		],
		[
			[
				430,
				4341
			],
			[
				-15,
				-39
			],
			[
				6,
				48
			],
			[
				9,
				-9
			]
		],
		[
			[
				48,
				4237
			],
			[
				-5,
				46
			],
			[
				17,
				-11
			],
			[
				1,
				-35
			],
			[
				-13,
				0
			]
		],
		[
			[
				149,
				4282
			],
			[
				34,
				55
			],
			[
				36,
				-127
			],
			[
				-70,
				72
			]
		],
		[
			[
				179,
				4366
			],
			[
				-18,
				-32
			],
			[
				-15,
				28
			],
			[
				33,
				4
			]
		],
		[
			[
				256,
				4225
			],
			[
				-2,
				-3
			],
			[
				-6,
				0
			],
			[
				-5,
				4
			],
			[
				-9,
				11
			],
			[
				-2,
				4
			],
			[
				-5,
				8
			],
			[
				0,
				8
			],
			[
				3,
				2
			],
			[
				15,
				-17
			],
			[
				5,
				-8
			],
			[
				6,
				-9
			]
		],
		[
			[
				245,
				4251
			],
			[
				-34,
				57
			],
			[
				56,
				-62
			],
			[
				-22,
				5
			]
		],
		[
			[
				400,
				3860
			],
			[
				-193,
				169
			],
			[
				184,
				-87
			],
			[
				9,
				-82
			]
		],
		[
			[
				427,
				3903
			],
			[
				-3,
				-1
			],
			[
				-2,
				1
			],
			[
				-2,
				2
			],
			[
				-1,
				1
			],
			[
				-10,
				18
			],
			[
				3,
				1
			],
			[
				5,
				-3
			],
			[
				7,
				-3
			],
			[
				2,
				-2
			],
			[
				1,
				-1
			],
			[
				1,
				-4
			],
			[
				1,
				-3
			],
			[
				0,
				-3
			],
			[
				-2,
				-3
			]
		],
		[
			[
				295,
				3522
			],
			[
				17,
				-25
			],
			[
				48,
				-101
			],
			[
				-48,
				-42
			],
			[
				-34,
				104
			],
			[
				-9,
				-58
			],
			[
				-38,
				42
			],
			[
				3,
				53
			],
			[
				-9,
				-23
			],
			[
				-16,
				79
			],
			[
				63,
				-75
			],
			[
				16,
				-6
			],
			[
				-3,
				16
			]
		],
		[
			[
				285,
				3486
			],
			[
				-49,
				301
			],
			[
				98,
				-251
			]
		],
		[
			[
				334,
				3536
			],
			[
				0,
				0
			],
			[
				0,
				-2
			],
			[
				6,
				-4
			],
			[
				-1,
				-15
			],
			[
				-2,
				-10
			],
			[
				-8,
				0
			],
			[
				0,
				0
			]
		],
		[
			[
				329,
				3505
			],
			[
				-10,
				1
			]
		],
		[
			[
				319,
				3506
			],
			[
				-4,
				0
			],
			[
				-2,
				4
			]
		],
		[
			[
				313,
				3510
			],
			[
				-18,
				12
			]
		],
		[
			[
				379,
				3442
			],
			[
				-7,
				-8
			],
			[
				-12,
				8
			],
			[
				-3,
				12
			],
			[
				1,
				5
			],
			[
				2,
				1
			],
			[
				3,
				1
			],
			[
				8,
				-3
			],
			[
				4,
				-1
			],
			[
				5,
				-9
			],
			[
				-1,
				-6
			]
		],
		[
			[
				289,
				3405
			],
			[
				0,
				-70
			],
			[
				-25,
				2
			],
			[
				25,
				68
			]
		],
		[
			[
				415,
				3716
			],
			[
				-51,
				-33
			],
			[
				-143,
				261
			],
			[
				174,
				-109
			],
			[
				20,
				-119
			]
		],
		[
			[
				213,
				3961
			],
			[
				-3,
				-11
			],
			[
				-3,
				9
			],
			[
				-4,
				11
			],
			[
				1,
				2
			],
			[
				2,
				3
			],
			[
				5,
				1
			],
			[
				6,
				1
			],
			[
				2,
				0
			],
			[
				4,
				-2
			],
			[
				1,
				-2
			],
			[
				-3,
				-4
			],
			[
				-5,
				-4
			],
			[
				-3,
				-4
			]
		],
		[
			[
				371,
				3596
			],
			[
				-13,
				-47
			],
			[
				7,
				55
			]
		],
		[
			[
				219,
				3584
			],
			[
				-4,
				-1
			],
			[
				-3,
				0
			],
			[
				-3,
				2
			],
			[
				0,
				2
			],
			[
				0,
				5
			],
			[
				2,
				5
			],
			[
				6,
				6
			],
			[
				9,
				-2
			],
			[
				2,
				-5
			],
			[
				1,
				-8
			],
			[
				-10,
				-4
			]
		],
		[
			[
				208,
				3603
			],
			[
				-17,
				8
			],
			[
				19,
				29
			],
			[
				15,
				-16
			],
			[
				-17,
				-21
			]
		],
		[
			[
				316,
				3673
			],
			[
				6,
				26
			],
			[
				32,
				-41
			],
			[
				0,
				-21
			],
			[
				-17,
				6
			],
			[
				15,
				-37
			],
			[
				-42,
				39
			],
			[
				11,
				0
			],
			[
				-14,
				34
			],
			[
				9,
				-6
			]
		],
		[
			[
				104,
				4121
			],
			[
				23,
				-38
			],
			[
				-24,
				-39
			],
			[
				1,
				77
			]
		],
		[
			[
				184,
				3879
			],
			[
				12,
				-21
			],
			[
				-1,
				-4
			],
			[
				-1,
				-4
			],
			[
				-6,
				-8
			],
			[
				-5,
				7
			],
			[
				-2,
				13
			],
			[
				-4,
				-1
			],
			[
				-3,
				4
			],
			[
				-2,
				8
			],
			[
				6,
				4
			],
			[
				6,
				2
			]
		],
		[
			[
				149,
				3944
			],
			[
				-20,
				-20
			],
			[
				-4,
				29
			],
			[
				28,
				22
			],
			[
				-4,
				-31
			]
		],
		[
			[
				200,
				3851
			],
			[
				20,
				-43
			],
			[
				-23,
				-15
			],
			[
				3,
				58
			]
		],
		[
			[
				172,
				3883
			],
			[
				-20,
				6
			],
			[
				7,
				52
			],
			[
				16,
				-57
			],
			[
				-3,
				-1
			]
		],
		[
			[
				133,
				4020
			],
			[
				2,
				-41
			],
			[
				-29,
				9
			],
			[
				-4,
				49
			],
			[
				34,
				1
			],
			[
				0,
				16
			],
			[
				13,
				-29
			],
			[
				-16,
				-5
			]
		],
		[
			[
				451,
				3135
			],
			[
				-35,
				-59
			],
			[
				-45,
				77
			],
			[
				14,
				78
			],
			[
				34,
				-68
			],
			[
				-13,
				98
			],
			[
				45,
				-126
			]
		],
		[
			[
				390,
				3061
			],
			[
				-64,
				-12
			],
			[
				54,
				61
			],
			[
				10,
				-49
			]
		],
		[
			[
				343,
				3288
			],
			[
				23,
				-42
			],
			[
				-29,
				-16
			],
			[
				-5,
				76
			],
			[
				14,
				16
			],
			[
				-3,
				-34
			]
		],
		[
			[
				278,
				3087
			],
			[
				14,
				15
			],
			[
				-18,
				15
			],
			[
				38,
				-15
			],
			[
				-15,
				-42
			],
			[
				-19,
				27
			]
		],
		[
			[
				270,
				3296
			],
			[
				35,
				13
			],
			[
				-16,
				-42
			],
			[
				-20,
				16
			],
			[
				1,
				13
			]
		],
		[
			[
				650,
				2899
			],
			[
				0,
				0
			],
			[
				2,
				-1
			],
			[
				6,
				-8
			],
			[
				1,
				-3
			],
			[
				0,
				0
			]
		],
		[
			[
				659,
				2887
			],
			[
				-8,
				-72
			],
			[
				-24,
				38
			],
			[
				13,
				48
			],
			[
				10,
				-2
			]
		],
		[
			[
				492,
				3217
			],
			[
				55,
				-98
			],
			[
				-53,
				-30
			],
			[
				-2,
				128
			]
		],
		[
			[
				746,
				2985
			],
			[
				-18,
				-23
			],
			[
				13,
				33
			],
			[
				5,
				-10
			]
		],
		[
			[
				663,
				2985
			],
			[
				-46,
				-64
			],
			[
				-27,
				103
			],
			[
				-5,
				23
			],
			[
				-18,
				-49
			],
			[
				-67,
				71
			],
			[
				29,
				22
			],
			[
				42,
				-26
			],
			[
				0,
				99
			],
			[
				58,
				2
			],
			[
				-19,
				7
			],
			[
				68,
				10
			],
			[
				22,
				13
			],
			[
				16,
				15
			],
			[
				13,
				-77
			],
			[
				-12,
				-64
			],
			[
				-49,
				-74
			],
			[
				35,
				-27
			],
			[
				-1,
				-30
			],
			[
				-37,
				30
			],
			[
				-2,
				16
			]
		],
		[
			[
				644,
				2913
			],
			[
				17,
				51
			],
			[
				8,
				-66
			],
			[
				-25,
				15
			]
		],
		[
			[
				487,
				2831
			],
			[
				-40,
				208
			],
			[
				132,
				-76
			]
		],
		[
			[
				579,
				2963
			],
			[
				35,
				-199
			],
			[
				-95,
				-56
			],
			[
				-32,
				123
			]
		],
		[
			[
				423,
				2866
			],
			[
				-34,
				75
			],
			[
				44,
				-67
			],
			[
				-6,
				-11
			]
		],
		[
			[
				427,
				2863
			],
			[
				0,
				-1
			],
			[
				-4,
				4
			]
		],
		[
			[
				443,
				3002
			],
			[
				5,
				-28
			],
			[
				-28,
				45
			],
			[
				23,
				-17
			]
		],
		[
			[
				374,
				2939
			],
			[
				-16,
				23
			],
			[
				19,
				-22
			],
			[
				-3,
				-1
			]
		],
		[
			[
				387,
				2910
			],
			[
				-3,
				-1
			],
			[
				-2,
				2
			],
			[
				-6,
				4
			],
			[
				-5,
				6
			],
			[
				-1,
				2
			],
			[
				1,
				8
			],
			[
				5,
				-3
			],
			[
				5,
				-3
			],
			[
				4,
				-4
			],
			[
				3,
				-6
			],
			[
				0,
				-4
			],
			[
				-1,
				-1
			]
		],
		[
			[
				389,
				2974
			],
			[
				-16,
				7
			],
			[
				16,
				6
			],
			[
				0,
				-13
			]
		],
		[
			[
				425,
				2925
			],
			[
				-3,
				-4
			],
			[
				-5,
				6
			],
			[
				-6,
				10
			],
			[
				-10,
				8
			],
			[
				-5,
				17
			],
			[
				1,
				8
			],
			[
				10,
				-5
			],
			[
				4,
				-3
			],
			[
				2,
				-2
			],
			[
				1,
				-5
			],
			[
				3,
				-8
			],
			[
				7,
				-12
			],
			[
				1,
				-10
			]
		],
		[
			[
				867,
				3262
			],
			[
				-30,
				-181
			],
			[
				-29,
				36
			],
			[
				-42,
				-62
			],
			[
				-33,
				97
			]
		],
		[
			[
				809,
				2547
			],
			[
				67,
				-3
			],
			[
				-19,
				11
			],
			[
				24,
				34
			],
			[
				-50,
				-19
			],
			[
				-44,
				-18
			],
			[
				4,
				61
			],
			[
				40,
				49
			],
			[
				37,
				29
			],
			[
				19,
				-6
			],
			[
				-2,
				50
			],
			[
				35,
				-44
			],
			[
				69,
				-5
			],
			[
				51,
				78
			],
			[
				88,
				73
			],
			[
				47,
				43
			],
			[
				-37,
				-23
			],
			[
				-99,
				-66
			],
			[
				-3,
				-13
			]
		],
		[
			[
				1036,
				2778
			],
			[
				-95,
				-67
			],
			[
				-43,
				57
			],
			[
				27,
				103
			],
			[
				-81,
				-136
			],
			[
				-138,
				121
			],
			[
				80,
				120
			],
			[
				137,
				43
			],
			[
				31,
				172
			],
			[
				190,
				91
			],
			[
				-25,
				57
			],
			[
				-97,
				-87
			],
			[
				-35,
				123
			]
		],
		[
			[
				909,
				3193
			],
			[
				-28,
				110
			],
			[
				40,
				37
			],
			[
				48,
				-24
			],
			[
				-21,
				-73
			],
			[
				-39,
				-50
			]
		],
		[
			[
				742,
				2635
			],
			[
				-56,
				24
			],
			[
				11,
				41
			],
			[
				45,
				-65
			]
		],
		[
			[
				795,
				2987
			],
			[
				-9,
				-2
			],
			[
				-2,
				5
			],
			[
				12,
				11
			],
			[
				12,
				10
			],
			[
				11,
				8
			],
			[
				7,
				5
			],
			[
				4,
				-8
			],
			[
				-3,
				-16
			],
			[
				-19,
				-7
			],
			[
				-13,
				-6
			]
		],
		[
			[
				720,
				2716
			],
			[
				10,
				-13
			],
			[
				4,
				15
			],
			[
				1,
				-41
			],
			[
				-28,
				42
			],
			[
				13,
				-3
			]
		],
		[
			[
				833,
				3030
			],
			[
				58,
				38
			],
			[
				2,
				-38
			],
			[
				-60,
				0
			]
		],
		[
			[
				775,
				2670
			],
			[
				-20,
				-6
			],
			[
				-5,
				18
			],
			[
				-3,
				10
			],
			[
				9,
				22
			],
			[
				-11,
				12
			],
			[
				9,
				6
			],
			[
				2,
				18
			],
			[
				-12,
				-1
			],
			[
				-1,
				10
			],
			[
				-8,
				12
			],
			[
				-4,
				0
			],
			[
				-3,
				-8
			],
			[
				-4,
				-6
			],
			[
				-26,
				0
			],
			[
				4,
				10
			],
			[
				0,
				1
			],
			[
				-2,
				6
			],
			[
				-16,
				6
			],
			[
				-11,
				22
			],
			[
				17,
				7
			],
			[
				2,
				-2
			],
			[
				1,
				-6
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				0,
				-15
			],
			[
				18,
				5
			],
			[
				3,
				-11
			],
			[
				-3,
				-5
			],
			[
				3,
				-5
			],
			[
				1,
				-1
			],
			[
				6,
				0
			],
			[
				2,
				3
			],
			[
				4,
				6
			],
			[
				2,
				16
			],
			[
				-6,
				4
			],
			[
				1,
				6
			],
			[
				13,
				4
			],
			[
				1,
				-1
			],
			[
				13,
				-11
			],
			[
				-3,
				-16
			],
			[
				5,
				-11
			],
			[
				16,
				1
			],
			[
				10,
				-6
			],
			[
				14,
				0
			],
			[
				24,
				-29
			],
			[
				4,
				-21
			],
			[
				-33,
				7
			],
			[
				-13,
				-51
			]
		],
		[
			[
				451,
				2294
			],
			[
				6,
				24
			],
			[
				-56,
				24
			],
			[
				34,
				-2
			],
			[
				-2,
				20
			],
			[
				-27,
				10
			],
			[
				38,
				81
			],
			[
				22,
				29
			],
			[
				3,
				38
			],
			[
				55,
				40
			],
			[
				14,
				-61
			],
			[
				10,
				-45
			],
			[
				14,
				76
			],
			[
				-24,
				47
			],
			[
				22,
				62
			],
			[
				8,
				-18
			],
			[
				42,
				58
			],
			[
				-2,
				-126
			],
			[
				-8,
				-46
			],
			[
				1,
				-86
			],
			[
				-19,
				-20
			],
			[
				2,
				-42
			],
			[
				-32,
				30
			],
			[
				1,
				-64
			]
		],
		[
			[
				384,
				2808
			],
			[
				-34,
				91
			],
			[
				132,
				-182
			],
			[
				1,
				-42
			],
			[
				-73,
				23
			],
			[
				2,
				-222
			],
			[
				-44,
				-37
			],
			[
				-12,
				214
			],
			[
				54,
				64
			],
			[
				-58,
				40
			],
			[
				-18,
				-52
			],
			[
				-16,
				55
			],
			[
				38,
				79
			],
			[
				28,
				-31
			]
		],
		[
			[
				353,
				2849
			],
			[
				-55,
				-5
			],
			[
				15,
				46
			],
			[
				40,
				-41
			]
		],
		[
			[
				449,
				2588
			],
			[
				17,
				82
			],
			[
				49,
				-28
			],
			[
				-66,
				-54
			]
		],
		[
			[
				305,
				2796
			],
			[
				-7,
				-9
			],
			[
				-5,
				14
			],
			[
				-3,
				6
			],
			[
				-4,
				9
			],
			[
				0,
				7
			],
			[
				7,
				4
			],
			[
				6,
				-6
			],
			[
				8,
				-19
			],
			[
				-2,
				-6
			]
		],
		[
			[
				306,
				2917
			],
			[
				-22,
				-2
			],
			[
				21,
				21
			],
			[
				1,
				-19
			]
		],
		[
			[
				334,
				2899
			],
			[
				-22,
				18
			],
			[
				7,
				29
			],
			[
				15,
				-47
			]
		],
		[
			[
				8764,
				16699
			],
			[
				132,
				310
			],
			[
				176,
				42
			]
		],
		[
			[
				9072,
				17051
			],
			[
				205,
				-10
			],
			[
				-91,
				118
			]
		],
		[
			[
				9186,
				17159
			],
			[
				-63,
				30
			],
			[
				12,
				126
			],
			[
				127,
				124
			],
			[
				-15,
				117
			],
			[
				130,
				1
			],
			[
				-20,
				-157
			],
			[
				116,
				19
			],
			[
				5,
				-122
			]
		],
		[
			[
				9478,
				17297
			],
			[
				-3,
				-115
			],
			[
				37,
				200
			],
			[
				117,
				-134
			]
		],
		[
			[
				10551,
				16913
			],
			[
				169,
				-183
			],
			[
				20,
				-189
			],
			[
				-91,
				-209
			],
			[
				-181,
				-165
			]
		],
		[
			[
				10468,
				16167
			],
			[
				197,
				-102
			],
			[
				-208,
				-206
			],
			[
				-642,
				246
			],
			[
				-248,
				-16
			],
			[
				-148,
				115
			],
			[
				-191,
				-69
			]
		],
		[
			[
				8694,
				16833
			],
			[
				43,
				131
			],
			[
				118,
				25
			],
			[
				-52,
				-89
			],
			[
				-109,
				-67
			]
		],
		[
			[
				9030,
				17087
			],
			[
				-242,
				-21
			],
			[
				8,
				94
			],
			[
				-216,
				-186
			],
			[
				34,
				-92
			],
			[
				-97,
				-28
			],
			[
				-36,
				67
			],
			[
				82,
				51
			],
			[
				-255,
				-41
			],
			[
				24,
				101
			],
			[
				68,
				-28
			],
			[
				198,
				141
			]
		],
		[
			[
				8598,
				17145
			],
			[
				-225,
				41
			],
			[
				173,
				8
			],
			[
				34,
				86
			],
			[
				-87,
				-39
			],
			[
				-106,
				79
			],
			[
				159,
				-5
			],
			[
				-74,
				70
			],
			[
				99,
				2
			],
			[
				-205,
				33
			],
			[
				181,
				40
			]
		],
		[
			[
				8547,
				17460
			],
			[
				0,
				0
			],
			[
				8,
				14
			],
			[
				9,
				1
			],
			[
				20,
				3
			],
			[
				18,
				2
			],
			[
				9,
				-1
			],
			[
				29,
				-6
			],
			[
				1,
				-6
			],
			[
				1,
				-4
			],
			[
				1,
				-9
			],
			[
				31,
				-13
			],
			[
				3,
				-2
			],
			[
				26,
				-20
			],
			[
				24,
				-21
			],
			[
				4,
				4
			],
			[
				1,
				2
			],
			[
				2,
				8
			],
			[
				2,
				12
			],
			[
				3,
				8
			],
			[
				-12,
				7
			],
			[
				-32,
				5
			],
			[
				-28,
				13
			],
			[
				-6,
				3
			],
			[
				6,
				1
			],
			[
				4,
				1
			],
			[
				10,
				2
			],
			[
				-2,
				3
			],
			[
				-10,
				9
			],
			[
				-11,
				11
			],
			[
				13,
				8
			],
			[
				21,
				-20
			],
			[
				51,
				10
			],
			[
				0,
				0
			],
			[
				0,
				9
			],
			[
				30,
				4
			],
			[
				18,
				-7
			],
			[
				3,
				-1
			],
			[
				1,
				11
			],
			[
				-29,
				16
			],
			[
				-9,
				1
			],
			[
				-9,
				0
			],
			[
				-12,
				-6
			],
			[
				-14,
				-6
			],
			[
				-60,
				14
			],
			[
				-35,
				17
			],
			[
				-1,
				1
			],
			[
				-4,
				8
			],
			[
				-4,
				8
			],
			[
				-26,
				51
			],
			[
				17,
				10
			],
			[
				47,
				-35
			],
			[
				13,
				-28
			],
			[
				9,
				-7
			],
			[
				9,
				-7
			],
			[
				2,
				2
			],
			[
				9,
				6
			],
			[
				-16,
				21
			],
			[
				3,
				27
			],
			[
				38,
				-20
			],
			[
				11,
				9
			],
			[
				-10,
				15
			],
			[
				-27,
				20
			],
			[
				-32,
				45
			],
			[
				-1,
				10
			],
			[
				14,
				-3
			],
			[
				67,
				-31
			],
			[
				15,
				-7
			],
			[
				26,
				0
			],
			[
				6,
				-10
			],
			[
				2,
				-3
			],
			[
				1,
				-2
			],
			[
				-6,
				-14
			],
			[
				-3,
				-9
			],
			[
				7,
				-9
			],
			[
				13,
				17
			],
			[
				7,
				8
			],
			[
				9,
				-8
			],
			[
				17,
				-15
			],
			[
				1,
				-1
			],
			[
				-2,
				-3
			],
			[
				-5,
				-15
			],
			[
				5,
				-3
			],
			[
				24,
				-19
			],
			[
				50,
				8
			],
			[
				11,
				2
			],
			[
				0,
				6
			],
			[
				-7,
				3
			],
			[
				-22,
				9
			],
			[
				-22,
				23
			],
			[
				-14,
				26
			],
			[
				-16,
				18
			],
			[
				-11,
				11
			],
			[
				-34,
				17
			],
			[
				1,
				11
			],
			[
				-24,
				41
			],
			[
				17,
				14
			],
			[
				-2,
				14
			],
			[
				-5,
				12
			],
			[
				4,
				0
			]
		],
		[
			[
				8788,
				17761
			],
			[
				0,
				0
			],
			[
				16,
				0
			],
			[
				5,
				-15
			],
			[
				15,
				-13
			],
			[
				11,
				-16
			],
			[
				10,
				-4
			],
			[
				11,
				-4
			],
			[
				13,
				-22
			],
			[
				5,
				-26
			],
			[
				15,
				-14
			],
			[
				-1,
				-29
			],
			[
				21,
				-32
			],
			[
				17,
				-2
			],
			[
				-11,
				21
			],
			[
				-7,
				25
			],
			[
				31,
				-6
			],
			[
				5,
				11
			],
			[
				-23,
				11
			],
			[
				-2,
				22
			],
			[
				-3,
				6
			],
			[
				-4,
				-1
			],
			[
				0,
				-5
			],
			[
				-9,
				11
			],
			[
				2,
				3
			],
			[
				6,
				-4
			],
			[
				4,
				0
			],
			[
				-6,
				40
			],
			[
				-12,
				21
			],
			[
				-13,
				20
			],
			[
				18,
				-11
			],
			[
				13,
				-2
			],
			[
				15,
				10
			],
			[
				33,
				-64
			],
			[
				9,
				-18
			],
			[
				25,
				-18
			],
			[
				0,
				9
			],
			[
				0,
				29
			],
			[
				18,
				26
			],
			[
				12,
				-2
			],
			[
				15,
				-14
			],
			[
				5,
				4
			],
			[
				-8,
				22
			],
			[
				13,
				3
			],
			[
				14,
				-11
			],
			[
				3,
				-21
			],
			[
				10,
				-3
			],
			[
				11,
				-24
			],
			[
				-1,
				-1
			],
			[
				-7,
				-4
			],
			[
				-3,
				-15
			],
			[
				6,
				-3
			],
			[
				3,
				-13
			],
			[
				-12,
				-13
			],
			[
				0,
				-5
			],
			[
				1,
				-4
			],
			[
				-31,
				-12
			],
			[
				-11,
				-22
			],
			[
				10,
				-24
			],
			[
				-11,
				-12
			],
			[
				-20,
				5
			],
			[
				-1,
				-11
			],
			[
				23,
				-11
			],
			[
				22,
				-4
			],
			[
				11,
				27
			],
			[
				-4,
				18
			],
			[
				-2,
				13
			],
			[
				11,
				4
			],
			[
				5,
				15
			],
			[
				15,
				6
			],
			[
				10,
				25
			],
			[
				11,
				8
			],
			[
				19,
				-12
			],
			[
				55,
				-39
			],
			[
				-23,
				-23
			],
			[
				-22,
				-2
			],
			[
				10,
				-14
			],
			[
				-19,
				-33
			],
			[
				-16,
				-4
			],
			[
				-13,
				-25
			],
			[
				-1,
				0
			],
			[
				0,
				-1
			],
			[
				14,
				-25
			],
			[
				4,
				0
			],
			[
				0,
				-1
			],
			[
				19,
				-2
			],
			[
				-1,
				7
			],
			[
				-3,
				3
			],
			[
				-2,
				2
			],
			[
				1,
				2
			],
			[
				1,
				13
			],
			[
				0,
				3
			],
			[
				14,
				27
			],
			[
				4,
				2
			],
			[
				6,
				2
			],
			[
				6,
				3
			],
			[
				1,
				-1
			],
			[
				20,
				-19
			],
			[
				7,
				-6
			],
			[
				0,
				0
			],
			[
				-13,
				-31
			],
			[
				-10,
				-7
			],
			[
				-1,
				-3
			],
			[
				-3,
				-12
			],
			[
				12,
				3
			],
			[
				4,
				1
			],
			[
				-6,
				-50
			],
			[
				11,
				-1
			],
			[
				3,
				2
			],
			[
				4,
				4
			],
			[
				8,
				-9
			],
			[
				-13,
				-16
			],
			[
				-15,
				3
			],
			[
				-1,
				1
			],
			[
				-73,
				-19
			],
			[
				-1,
				-1
			],
			[
				-10,
				-7
			],
			[
				-10,
				-29
			],
			[
				-7,
				3
			],
			[
				-5,
				3
			],
			[
				-13,
				-5
			],
			[
				13,
				-25
			],
			[
				8,
				3
			],
			[
				2,
				1
			],
			[
				3,
				-7
			],
			[
				5,
				-16
			],
			[
				0,
				0
			],
			[
				-6,
				-6
			],
			[
				-17,
				-15
			],
			[
				4,
				-8
			],
			[
				17,
				9
			],
			[
				2,
				1
			],
			[
				16,
				-4
			],
			[
				-1,
				-17
			],
			[
				0,
				-7
			],
			[
				14,
				-1
			],
			[
				0,
				-1
			],
			[
				-1,
				-3
			],
			[
				-4,
				-17
			],
			[
				0,
				-2
			],
			[
				-18,
				-11
			],
			[
				-1,
				0
			],
			[
				-17,
				-2
			],
			[
				-23,
				-4
			],
			[
				-10,
				-1
			],
			[
				2,
				-3
			],
			[
				0,
				-1
			],
			[
				4,
				-7
			],
			[
				24,
				-12
			],
			[
				15,
				0
			],
			[
				1,
				-4
			],
			[
				4,
				-17
			],
			[
				2,
				-8
			],
			[
				13,
				-3
			],
			[
				13,
				9
			],
			[
				25,
				-8
			],
			[
				1,
				-6
			],
			[
				-34,
				-22
			],
			[
				-83,
				-26
			],
			[
				0,
				0
			]
		],
		[
			[
				8394,
				16881
			],
			[
				-7,
				-2
			],
			[
				-10,
				3
			],
			[
				1,
				7
			],
			[
				7,
				7
			],
			[
				5,
				5
			],
			[
				9,
				0
			],
			[
				8,
				-4
			],
			[
				-3,
				-9
			],
			[
				-10,
				-7
			]
		],
		[
			[
				3553,
				1618
			],
			[
				-1,
				0
			]
		],
		[
			[
				3538,
				1615
			],
			[
				-4,
				3
			],
			[
				-5,
				24
			],
			[
				-2,
				21
			],
			[
				6,
				31
			],
			[
				1,
				7
			],
			[
				-11,
				0
			],
			[
				0,
				0
			],
			[
				-4,
				-27
			],
			[
				1,
				-11
			],
			[
				-5,
				-8
			],
			[
				-3,
				-12
			],
			[
				3,
				-12
			],
			[
				-3,
				-8
			],
			[
				-5,
				6
			],
			[
				-6,
				7
			],
			[
				0,
				9
			],
			[
				-13,
				29
			],
			[
				-7,
				-4
			],
			[
				1,
				-9
			],
			[
				-10,
				7
			],
			[
				-1,
				27
			],
			[
				-2,
				5
			],
			[
				5,
				22
			],
			[
				-8,
				8
			],
			[
				-2,
				-3
			],
			[
				-3,
				-3
			],
			[
				-1,
				-23
			],
			[
				-1,
				-22
			],
			[
				-5,
				-3
			],
			[
				0,
				-8
			],
			[
				6,
				-10
			],
			[
				4,
				-14
			],
			[
				-4,
				-5
			],
			[
				-2,
				-1
			],
			[
				-1,
				0
			],
			[
				-17,
				6
			],
			[
				0,
				0
			],
			[
				-8,
				5
			],
			[
				-10,
				39
			],
			[
				4,
				30
			],
			[
				-7,
				14
			],
			[
				-14,
				8
			],
			[
				-6,
				4
			],
			[
				0,
				0
			]
		],
		[
			[
				3399,
				1744
			],
			[
				-61,
				4
			]
		],
		[
			[
				3338,
				1748
			],
			[
				157,
				-203
			],
			[
				-153,
				-94
			]
		],
		[
			[
				3342,
				1451
			],
			[
				-6,
				1
			],
			[
				-7,
				4
			]
		],
		[
			[
				3329,
				1456
			],
			[
				-28,
				12
			]
		],
		[
			[
				3301,
				1468
			],
			[
				27,
				-25
			],
			[
				-27,
				-41
			],
			[
				-8,
				-14
			],
			[
				-23,
				30
			],
			[
				-37,
				-24
			],
			[
				2,
				-14
			],
			[
				36,
				28
			],
			[
				-11,
				-54
			],
			[
				-59,
				10
			],
			[
				-15,
				22
			],
			[
				-5,
				-73
			],
			[
				16,
				-8
			],
			[
				65,
				28
			],
			[
				39,
				-35
			],
			[
				-64,
				-46
			],
			[
				42,
				22
			],
			[
				-48,
				-69
			]
		],
		[
			[
				3353,
				1355
			],
			[
				-42,
				-38
			],
			[
				-32,
				29
			],
			[
				74,
				9
			]
		],
		[
			[
				3372,
				1375
			],
			[
				-28,
				-1
			],
			[
				25,
				22
			],
			[
				3,
				-21
			]
		],
		[
			[
				3287,
				1356
			],
			[
				5,
				26
			],
			[
				9,
				-23
			],
			[
				-14,
				-3
			]
		],
		[
			[
				3313,
				1395
			],
			[
				12,
				37
			],
			[
				33,
				-10
			],
			[
				-45,
				-27
			]
		],
		[
			[
				3360,
				1405
			],
			[
				-34,
				-36
			],
			[
				-10,
				19
			],
			[
				44,
				17
			]
		],
		[
			[
				3401,
				1382
			],
			[
				0,
				-12
			],
			[
				-6,
				-13
			],
			[
				-23,
				-36
			],
			[
				-11,
				-13
			],
			[
				-6,
				4
			],
			[
				14,
				18
			],
			[
				3,
				13
			],
			[
				3,
				3
			],
			[
				13,
				19
			],
			[
				9,
				16
			],
			[
				4,
				1
			]
		],
		[
			[
				3516,
				1591
			],
			[
				0,
				-4
			],
			[
				-1,
				-5
			],
			[
				-5,
				-2
			],
			[
				0,
				0
			],
			[
				-1,
				2
			],
			[
				-3,
				8
			],
			[
				1,
				9
			],
			[
				2,
				5
			],
			[
				0,
				2
			],
			[
				3,
				3
			],
			[
				1,
				0
			],
			[
				3,
				-2
			],
			[
				1,
				-2
			]
		],
		[
			[
				3494,
				1632
			],
			[
				-3,
				-5
			],
			[
				-9,
				4
			],
			[
				-2,
				4
			],
			[
				-5,
				6
			],
			[
				-1,
				1
			],
			[
				0,
				1
			],
			[
				2,
				10
			],
			[
				12,
				-7
			],
			[
				6,
				-14
			]
		],
		[
			[
				3501,
				1600
			],
			[
				-3,
				-3
			],
			[
				-4,
				3
			],
			[
				-4,
				11
			],
			[
				-1,
				4
			],
			[
				0,
				6
			],
			[
				3,
				1
			],
			[
				2,
				-1
			],
			[
				7,
				-6
			],
			[
				3,
				-4
			],
			[
				0,
				-4
			],
			[
				-3,
				-7
			]
		],
		[
			[
				3550,
				1577
			],
			[
				-3,
				-5
			],
			[
				-5,
				8
			],
			[
				-4,
				13
			],
			[
				-5,
				2
			],
			[
				-4,
				11
			],
			[
				13,
				1
			],
			[
				7,
				-11
			],
			[
				1,
				-19
			]
		],
		[
			[
				3890,
				1818
			],
			[
				-11,
				-171
			],
			[
				-31,
				103
			],
			[
				3,
				-126
			],
			[
				-21,
				131
			],
			[
				-20,
				-83
			]
		],
		[
			[
				3810,
				1672
			],
			[
				15,
				-32
			],
			[
				-39,
				-57
			],
			[
				-31,
				-15
			],
			[
				-1,
				31
			],
			[
				31,
				26
			],
			[
				-12,
				14
			],
			[
				-56,
				-55
			],
			[
				-37,
				53
			],
			[
				4,
				-45
			],
			[
				8,
				-66
			],
			[
				-35,
				-1
			],
			[
				-15,
				3
			],
			[
				-2,
				-25
			],
			[
				-41,
				13
			],
			[
				-26,
				4
			],
			[
				-5,
				-24
			],
			[
				-19,
				27
			],
			[
				14,
				51
			],
			[
				-10,
				44
			]
		],
		[
			[
				3517,
				1605
			],
			[
				0,
				0
			],
			[
				0,
				0
			],
			[
				1,
				-4
			],
			[
				-2,
				-10
			],
			[
				0,
				0
			]
		],
		[
			[
				3552,
				1618
			],
			[
				-14,
				-3
			]
		],
		[
			[
				3732,
				1569
			],
			[
				-2,
				-3
			],
			[
				-10,
				6
			],
			[
				8,
				10
			],
			[
				4,
				4
			],
			[
				4,
				-1
			],
			[
				-1,
				-11
			],
			[
				-3,
				-5
			]
		],
		[
			[
				3540,
				1554
			],
			[
				-11,
				-6
			],
			[
				-6,
				10
			],
			[
				2,
				15
			],
			[
				9,
				-3
			],
			[
				6,
				-7
			],
			[
				0,
				-9
			]
		],
		[
			[
				3842,
				2381
			],
			[
				52,
				-100
			]
		],
		[
			[
				3894,
				2281
			],
			[
				28,
				-36
			]
		],
		[
			[
				3922,
				2245
			],
			[
				82,
				-18
			],
			[
				-13,
				-136
			]
		],
		[
			[
				3991,
				2091
			],
			[
				36,
				-59
			],
			[
				-54,
				-92
			]
		],
		[
			[
				3973,
				1940
			],
			[
				-11,
				37
			],
			[
				-12,
				-13
			],
			[
				-28,
				17
			],
			[
				0,
				-22
			]
		],
		[
			[
				3922,
				1959
			],
			[
				-32,
				-141
			]
		],
		[
			[
				3940,
				2304
			],
			[
				-1,
				-11
			],
			[
				-25,
				36
			],
			[
				16,
				-10
			],
			[
				10,
				-15
			]
		],
		[
			[
				3940,
				1963
			],
			[
				14,
				-10
			]
		],
		[
			[
				3954,
				1953
			],
			[
				6,
				-142
			]
		],
		[
			[
				3960,
				1811
			],
			[
				-1,
				0
			],
			[
				-1,
				1
			]
		],
		[
			[
				3958,
				1812
			],
			[
				-42,
				66
			]
		],
		[
			[
				3916,
				1878
			],
			[
				1,
				3
			],
			[
				1,
				4
			]
		],
		[
			[
				3918,
				1885
			],
			[
				22,
				78
			]
		],
		[
			[
				3980,
				1929
			],
			[
				0,
				0
			],
			[
				3,
				-3
			],
			[
				3,
				-5
			],
			[
				0,
				-2
			],
			[
				0,
				0
			]
		],
		[
			[
				3986,
				1919
			],
			[
				-9,
				-15
			],
			[
				-4,
				29
			],
			[
				7,
				-4
			]
		],
		[
			[
				4036,
				2130
			],
			[
				-20,
				9
			],
			[
				4,
				20
			],
			[
				16,
				-29
			]
		],
		[
			[
				3927,
				1807
			],
			[
				7,
				9
			]
		],
		[
			[
				3934,
				1816
			],
			[
				35,
				-17
			],
			[
				-12,
				-41
			],
			[
				-5,
				-17
			],
			[
				4,
				-75
			],
			[
				-20,
				-18
			],
			[
				-5,
				60
			],
			[
				-5,
				61
			],
			[
				1,
				38
			]
		],
		[
			[
				4062,
				1868
			],
			[
				-2,
				-8
			],
			[
				-4,
				0
			],
			[
				-8,
				15
			],
			[
				-14,
				9
			],
			[
				3,
				10
			],
			[
				13,
				-5
			],
			[
				12,
				-21
			]
		],
		[
			[
				4016,
				1869
			],
			[
				4,
				-10
			],
			[
				-3,
				-9
			],
			[
				-2,
				-1
			],
			[
				-3,
				9
			],
			[
				-6,
				5
			],
			[
				-5,
				-4
			],
			[
				-1,
				9
			],
			[
				1,
				8
			],
			[
				3,
				5
			],
			[
				5,
				0
			],
			[
				2,
				-3
			],
			[
				5,
				-9
			]
		],
		[
			[
				3983,
				1807
			],
			[
				-2,
				-5
			],
			[
				-4,
				5
			],
			[
				-3,
				6
			],
			[
				0,
				1
			],
			[
				2,
				6
			],
			[
				1,
				3
			],
			[
				1,
				1
			],
			[
				3,
				3
			],
			[
				4,
				-3
			],
			[
				0,
				-2
			],
			[
				-1,
				-7
			],
			[
				-1,
				-8
			]
		],
		[
			[
				3914,
				1808
			],
			[
				-4,
				-37
			],
			[
				-6,
				13
			],
			[
				-6,
				19
			],
			[
				16,
				5
			]
		],
		[
			[
				4029,
				1665
			],
			[
				-4,
				-14
			],
			[
				-5,
				12
			],
			[
				0,
				5
			],
			[
				3,
				8
			],
			[
				6,
				-11
			]
		],
		[
			[
				3974,
				1706
			],
			[
				-10,
				-49
			],
			[
				-2,
				82
			],
			[
				12,
				-33
			]
		],
		[
			[
				3831,
				2698
			],
			[
				52,
				-81
			]
		],
		[
			[
				3883,
				2617
			],
			[
				63,
				-99
			],
			[
				-15,
				-139
			]
		],
		[
			[
				3931,
				2379
			],
			[
				-105,
				53
			],
			[
				16,
				-51
			]
		],
		[
			[
				3910,
				2359
			],
			[
				-5,
				-15
			],
			[
				-7,
				23
			],
			[
				12,
				-8
			]
		],
		[
			[
				520,
				4725
			],
			[
				-39,
				70
			],
			[
				-2,
				34
			],
			[
				-41,
				-38
			],
			[
				-9,
				-1
			],
			[
				-30,
				-11
			],
			[
				-21,
				61
			],
			[
				64,
				-15
			],
			[
				-61,
				41
			],
			[
				-22,
				-24
			],
			[
				-63,
				46
			],
			[
				15,
				37
			],
			[
				61,
				-9
			],
			[
				48,
				-41
			],
			[
				27,
				12
			],
			[
				-30,
				25
			],
			[
				42,
				-9
			],
			[
				-90,
				59
			],
			[
				-120,
				-2
			],
			[
				64,
				12
			],
			[
				-6,
				34
			],
			[
				-8,
				-19
			],
			[
				-50,
				8
			]
		],
		[
			[
				249,
				4995
			],
			[
				-19,
				57
			],
			[
				168,
				32
			],
			[
				-18,
				62
			],
			[
				107,
				-43
			],
			[
				-44,
				59
			],
			[
				185,
				8
			]
		],
		[
			[
				232,
				4993
			],
			[
				-19,
				8
			],
			[
				12,
				12
			],
			[
				7,
				-20
			]
		],
		[
			[
				529,
				5204
			],
			[
				-110,
				-33
			],
			[
				-55,
				-17
			],
			[
				-11,
				-27
			],
			[
				-57,
				-18
			],
			[
				-3,
				26
			],
			[
				27,
				0
			],
			[
				-9,
				44
			],
			[
				-10,
				-38
			],
			[
				-33,
				29
			],
			[
				13,
				62
			],
			[
				26,
				-4
			],
			[
				10,
				-27
			],
			[
				-1,
				44
			],
			[
				39,
				31
			],
			[
				-114,
				-39
			],
			[
				-14,
				17
			],
			[
				101,
				57
			],
			[
				76,
				11
			],
			[
				2,
				32
			],
			[
				40,
				-21
			],
			[
				44,
				-10
			],
			[
				15,
				2
			],
			[
				-26,
				22
			],
			[
				53,
				-4
			],
			[
				21,
				-25
			]
		],
		[
			[
				556,
				5316
			],
			[
				56,
				-27
			]
		],
		[
			[
				179,
				5196
			],
			[
				74,
				-3
			],
			[
				-2,
				-86
			],
			[
				-86,
				27
			],
			[
				14,
				62
			]
		],
		[
			[
				103,
				5107
			],
			[
				-31,
				0
			],
			[
				24,
				13
			],
			[
				7,
				-13
			]
		],
		[
			[
				137,
				5132
			],
			[
				-6,
				31
			],
			[
				19,
				-16
			],
			[
				-13,
				-15
			]
		],
		[
			[
				50,
				5054
			],
			[
				-21,
				26
			],
			[
				18,
				26
			],
			[
				46,
				-40
			],
			[
				-18,
				-8
			],
			[
				-25,
				-4
			]
		],
		[
			[
				340,
				4370
			],
			[
				-51,
				6
			],
			[
				-40,
				189
			],
			[
				77,
				-12
			],
			[
				-2,
				-125
			],
			[
				10,
				132
			],
			[
				130,
				42
			],
			[
				-192,
				-16
			],
			[
				1,
				122
			],
			[
				172,
				10
			],
			[
				18,
				-54
			],
			[
				99,
				2
			],
			[
				13,
				-69
			],
			[
				-2,
				92
			],
			[
				83,
				53
			]
		],
		[
			[
				120,
				4492
			],
			[
				-24,
				17
			],
			[
				25,
				-15
			],
			[
				-1,
				-2
			]
		],
		[
			[
				156,
				4500
			],
			[
				-30,
				-4
			],
			[
				19,
				18
			],
			[
				11,
				-14
			]
		],
		[
			[
				140,
				4410
			],
			[
				-10,
				18
			],
			[
				16,
				-16
			],
			[
				-6,
				-2
			]
		],
		[
			[
				115,
				4416
			],
			[
				-21,
				-5
			],
			[
				18,
				9
			],
			[
				3,
				-4
			]
		],
		[
			[
				152,
				4596
			],
			[
				-35,
				-14
			],
			[
				30,
				22
			],
			[
				5,
				-8
			]
		],
		[
			[
				218,
				4487
			],
			[
				0,
				44
			],
			[
				22,
				5
			],
			[
				29,
				-152
			],
			[
				-38,
				1
			],
			[
				-13,
				102
			]
		],
		[
			[
				127,
				4456
			],
			[
				8,
				27
			],
			[
				43,
				-13
			],
			[
				17,
				-76
			],
			[
				-40,
				32
			],
			[
				-5,
				31
			],
			[
				0,
				-16
			],
			[
				-23,
				15
			]
		],
		[
			[
				192,
				4473
			],
			[
				-14,
				47
			],
			[
				32,
				-41
			],
			[
				6,
				-35
			],
			[
				-24,
				29
			]
		],
		[
			[
				218,
				4629
			],
			[
				8,
				-19
			],
			[
				14,
				29
			],
			[
				19,
				-63
			],
			[
				-64,
				2
			],
			[
				0,
				55
			],
			[
				23,
				-4
			]
		],
		[
			[
				210,
				4925
			],
			[
				3,
				6
			],
			[
				31,
				-7
			],
			[
				3,
				-16
			],
			[
				-5,
				-12
			],
			[
				-1,
				-13
			],
			[
				10,
				-4
			],
			[
				3,
				-25
			],
			[
				5,
				-42
			],
			[
				1,
				-14
			],
			[
				-7,
				-30
			],
			[
				-33,
				-23
			],
			[
				-7,
				-4
			],
			[
				-10,
				-15
			],
			[
				-3,
				-24
			],
			[
				-9,
				-4
			],
			[
				3,
				13
			],
			[
				-6,
				17
			],
			[
				1,
				15
			],
			[
				-4,
				25
			],
			[
				-11,
				8
			],
			[
				0,
				-15
			],
			[
				-25,
				-28
			],
			[
				-3,
				-34
			],
			[
				-6,
				-14
			],
			[
				-13,
				11
			],
			[
				-4,
				9
			],
			[
				4,
				12
			],
			[
				1,
				3
			],
			[
				7,
				2
			],
			[
				-9,
				24
			],
			[
				3,
				37
			],
			[
				-3,
				9
			],
			[
				0,
				20
			],
			[
				-4,
				34
			],
			[
				-10,
				7
			],
			[
				23,
				17
			],
			[
				9,
				-20
			],
			[
				2,
				19
			],
			[
				2,
				16
			],
			[
				16,
				-13
			],
			[
				2,
				-20
			],
			[
				4,
				-17
			],
			[
				13,
				-41
			],
			[
				1,
				34
			],
			[
				-6,
				14
			],
			[
				-7,
				34
			],
			[
				7,
				12
			],
			[
				-2,
				10
			],
			[
				-5,
				4
			],
			[
				-6,
				17
			],
			[
				0,
				21
			],
			[
				17,
				3
			],
			[
				19,
				-24
			],
			[
				-5,
				-15
			],
			[
				-5,
				-1
			],
			[
				1,
				-11
			],
			[
				6,
				-4
			],
			[
				9,
				-72
			],
			[
				4,
				10
			],
			[
				-4,
				81
			],
			[
				7,
				-10
			],
			[
				4,
				-10
			],
			[
				10,
				-4
			],
			[
				-4,
				15
			],
			[
				-8,
				10
			],
			[
				-6,
				17
			]
		],
		[
			[
				88,
				4651
			],
			[
				-10,
				120
			],
			[
				36,
				-84
			],
			[
				-26,
				-36
			]
		],
		[
			[
				0,
				4670
			],
			[
				39,
				82
			],
			[
				15,
				-146
			],
			[
				-54,
				64
			]
		],
		[
			[
				40,
				4763
			],
			[
				-10,
				-7
			],
			[
				-1,
				3
			],
			[
				-2,
				12
			],
			[
				2,
				8
			],
			[
				3,
				3
			],
			[
				3,
				1
			],
			[
				7,
				-9
			],
			[
				2,
				-5
			],
			[
				-4,
				-6
			]
		],
		[
			[
				60,
				4782
			],
			[
				-14,
				17
			],
			[
				17,
				4
			],
			[
				-3,
				-21
			]
		],
		[
			[
				164,
				4894
			],
			[
				-1,
				-13
			],
			[
				-18,
				15
			],
			[
				1,
				14
			],
			[
				11,
				-8
			],
			[
				4,
				-3
			],
			[
				3,
				-5
			]
		],
		[
			[
				140,
				4934
			],
			[
				-6,
				-15
			],
			[
				-10,
				13
			],
			[
				-2,
				7
			],
			[
				-1,
				10
			],
			[
				0,
				2
			],
			[
				8,
				7
			],
			[
				6,
				-5
			],
			[
				4,
				-10
			],
			[
				1,
				-9
			]
		],
		[
			[
				103,
				4915
			],
			[
				-2,
				-6
			],
			[
				-13,
				7
			],
			[
				-22,
				15
			],
			[
				1,
				9
			],
			[
				-4,
				7
			],
			[
				-5,
				10
			],
			[
				7,
				6
			],
			[
				15,
				-12
			],
			[
				7,
				-8
			],
			[
				6,
				-7
			],
			[
				7,
				-11
			],
			[
				3,
				-10
			]
		],
		[
			[
				179,
				4688
			],
			[
				-25,
				-4
			],
			[
				18,
				46
			],
			[
				7,
				-42
			]
		],
		[
			[
				118,
				4828
			],
			[
				0,
				-27
			],
			[
				-38,
				17
			],
			[
				23,
				21
			],
			[
				15,
				-11
			]
		],
		[
			[
				267,
				4802
			],
			[
				-8,
				77
			],
			[
				50,
				-68
			],
			[
				-20,
				-17
			],
			[
				-22,
				8
			]
		],
		[
			[
				75,
				4715
			],
			[
				-8,
				-38
			],
			[
				1,
				81
			],
			[
				7,
				-43
			]
		],
		[
			[
				286,
				4898
			],
			[
				-11,
				-16
			],
			[
				-17,
				40
			],
			[
				33,
				-7
			],
			[
				-5,
				-17
			]
		],
		[
			[
				4188,
				2827
			],
			[
				-8,
				121
			],
			[
				-73,
				5
			]
		],
		[
			[
				4008,
				2766
			],
			[
				17,
				-156
			]
		],
		[
			[
				4025,
				2610
			],
			[
				48,
				-30
			]
		],
		[
			[
				4076,
				2578
			],
			[
				14,
				-144
			],
			[
				-106,
				-84
			],
			[
				-25,
				249
			]
		],
		[
			[
				3959,
				2599
			],
			[
				-83,
				64
			]
		],
		[
			[
				3876,
				2663
			],
			[
				-45,
				35
			]
		],
		[
			[
				4036,
				2637
			],
			[
				4,
				-18
			],
			[
				-6,
				0
			],
			[
				-8,
				12
			],
			[
				2,
				14
			],
			[
				1,
				2
			],
			[
				4,
				-5
			],
			[
				3,
				-5
			]
		],
		[
			[
				14626,
				19384
			],
			[
				80,
				162
			],
			[
				377,
				306
			]
		],
		[
			[
				11332,
				18712
			],
			[
				67,
				53
			],
			[
				49,
				11
			],
			[
				32,
				15
			],
			[
				3,
				-78
			],
			[
				50,
				-46
			],
			[
				-5,
				180
			],
			[
				53,
				19
			],
			[
				-6,
				-50
			],
			[
				119,
				-111
			],
			[
				70,
				-77
			],
			[
				21,
				-44
			],
			[
				-27,
				109
			],
			[
				33,
				11
			],
			[
				-65,
				32
			],
			[
				6,
				39
			],
			[
				134,
				100
			],
			[
				16,
				-37
			],
			[
				-36,
				-43
			],
			[
				83,
				56
			],
			[
				2,
				-126
			],
			[
				49,
				87
			],
			[
				103,
				-20
			],
			[
				-24,
				-67
			],
			[
				-26,
				-19
			],
			[
				33,
				8
			],
			[
				-24,
				-125
			],
			[
				-11,
				-24
			],
			[
				124,
				19
			],
			[
				94,
				-39
			],
			[
				-106,
				63
			],
			[
				-64,
				14
			],
			[
				37,
				122
			],
			[
				2,
				26
			],
			[
				44,
				-7
			]
		],
		[
			[
				12162,
				18763
			],
			[
				71,
				-25
			],
			[
				6,
				-20
			],
			[
				61,
				-6
			],
			[
				-24,
				-23
			],
			[
				67,
				20
			],
			[
				194,
				-37
			],
			[
				-33,
				-70
			],
			[
				-66,
				-52
			],
			[
				-14,
				-24
			],
			[
				-127,
				-33
			],
			[
				-131,
				-10
			],
			[
				-63,
				-36
			],
			[
				-33,
				-26
			],
			[
				11,
				-16
			],
			[
				69,
				51
			],
			[
				319,
				71
			],
			[
				75,
				60
			],
			[
				11,
				-24
			],
			[
				-6,
				-120
			],
			[
				6,
				-21
			],
			[
				39,
				-21
			],
			[
				22,
				18
			],
			[
				39,
				-102
			],
			[
				-82,
				-60
			],
			[
				66,
				33
			],
			[
				7,
				-25
			],
			[
				71,
				45
			],
			[
				40,
				47
			],
			[
				68,
				-28
			],
			[
				19,
				-12
			],
			[
				52,
				43
			],
			[
				16,
				45
			],
			[
				-130,
				10
			],
			[
				-128,
				88
			],
			[
				136,
				28
			],
			[
				32,
				25
			],
			[
				-63,
				55
			],
			[
				-11,
				27
			],
			[
				64,
				16
			],
			[
				-64,
				-1
			],
			[
				-65,
				49
			],
			[
				156,
				17
			],
			[
				69,
				16
			],
			[
				-4,
				15
			],
			[
				-174,
				2
			],
			[
				76,
				30
			],
			[
				40,
				-6
			],
			[
				-32,
				19
			],
			[
				164,
				31
			],
			[
				-95,
				13
			],
			[
				23,
				30
			],
			[
				-48,
				-19
			],
			[
				69,
				83
			]
		],
		[
			[
				12927,
				18933
			],
			[
				294,
				217
			],
			[
				251,
				-91
			],
			[
				-161,
				137
			],
			[
				105,
				187
			],
			[
				80,
				53
			],
			[
				186,
				-128
			],
			[
				17,
				68
			]
		],
		[
			[
				13699,
				19376
			],
			[
				-90,
				148
			],
			[
				-197,
				38
			],
			[
				78,
				149
			],
			[
				182,
				-128
			],
			[
				-43,
				112
			],
			[
				105,
				8
			],
			[
				-111,
				45
			],
			[
				62,
				92
			],
			[
				-60,
				20
			],
			[
				153,
				24
			],
			[
				39,
				-117
			],
			[
				122,
				91
			],
			[
				-90,
				-149
			],
			[
				106,
				-13
			],
			[
				59,
				93
			],
			[
				81,
				-200
			],
			[
				109,
				141
			],
			[
				-56,
				130
			],
			[
				122,
				-59
			]
		],
		[
			[
				14270,
				19801
			],
			[
				-43,
				-134
			],
			[
				123,
				93
			],
			[
				76,
				-70
			],
			[
				84,
				59
			],
			[
				46,
				-40
			],
			[
				-240,
				-254
			]
		],
		[
			[
				14447,
				20075
			],
			[
				157,
				39
			],
			[
				45,
				-44
			],
			[
				-141,
				-59
			],
			[
				86,
				-65
			],
			[
				-49,
				-32
			],
			[
				224,
				81
			],
			[
				-4,
				-48
			],
			[
				-139,
				-89
			],
			[
				-190,
				27
			],
			[
				0,
				-68
			],
			[
				-124,
				-20
			],
			[
				-110,
				91
			],
			[
				103,
				60
			],
			[
				-174,
				-25
			],
			[
				-12,
				131
			],
			[
				174,
				22
			],
			[
				122,
				-76
			],
			[
				-121,
				139
			],
			[
				198,
				12
			],
			[
				-45,
				-76
			]
		],
		[
			[
				14612,
				19975
			],
			[
				-48,
				7
			],
			[
				45,
				2
			],
			[
				3,
				-9
			]
		],
		[
			[
				14514,
				19531
			],
			[
				-14,
				-6
			],
			[
				-10,
				3
			],
			[
				-3,
				1
			],
			[
				-6,
				3
			],
			[
				-1,
				4
			],
			[
				1,
				3
			],
			[
				11,
				6
			],
			[
				19,
				-3
			],
			[
				5,
				-2
			],
			[
				4,
				-3
			],
			[
				-6,
				-6
			]
		],
		[
			[
				14196,
				20097
			],
			[
				-56,
				23
			],
			[
				27,
				8
			],
			[
				29,
				-31
			]
		],
		[
			[
				13963,
				19956
			],
			[
				-54,
				-42
			],
			[
				-9,
				62
			],
			[
				63,
				-20
			]
		],
		[
			[
				13274,
				19852
			],
			[
				123,
				-34
			],
			[
				-141,
				-49
			],
			[
				-88,
				71
			],
			[
				96,
				42
			],
			[
				-125,
				10
			],
			[
				124,
				63
			],
			[
				82,
				-57
			],
			[
				-71,
				-46
			]
		],
		[
			[
				13671,
				19984
			],
			[
				30,
				57
			],
			[
				49,
				-36
			],
			[
				-27,
				67
			],
			[
				106,
				-14
			],
			[
				-56,
				-64
			],
			[
				5,
				-50
			],
			[
				-107,
				40
			]
		],
		[
			[
				13665,
				19895
			],
			[
				-47,
				23
			],
			[
				13,
				17
			],
			[
				85,
				-39
			],
			[
				-51,
				-1
			]
		],
		[
			[
				13253,
				20020
			],
			[
				86,
				8
			],
			[
				-53,
				-64
			],
			[
				-74,
				17
			],
			[
				9,
				31
			],
			[
				37,
				-22
			],
			[
				15,
				18
			],
			[
				-20,
				12
			]
		],
		[
			[
				13366,
				19699
			],
			[
				87,
				22
			],
			[
				-79,
				-48
			],
			[
				-8,
				26
			]
		],
		[
			[
				12119,
				18895
			],
			[
				39,
				20
			],
			[
				49,
				-48
			],
			[
				-11,
				70
			],
			[
				60,
				-16
			],
			[
				-10,
				31
			],
			[
				32,
				5
			],
			[
				5,
				-37
			],
			[
				27,
				41
			],
			[
				20,
				-38
			],
			[
				-1,
				42
			],
			[
				22,
				2
			]
		],
		[
			[
				12351,
				18967
			],
			[
				16,
				-95
			],
			[
				44,
				97
			],
			[
				20,
				-104
			],
			[
				104,
				10
			],
			[
				34,
				-127
			],
			[
				-360,
				57
			]
		],
		[
			[
				12209,
				18805
			],
			[
				-57,
				21
			],
			[
				-33,
				69
			]
		],
		[
			[
				12376,
				19217
			],
			[
				-2,
				-1
			]
		],
		[
			[
				12374,
				19216
			],
			[
				-16,
				-75
			]
		],
		[
			[
				12358,
				19141
			],
			[
				-31,
				82
			],
			[
				-62,
				-96
			],
			[
				-65,
				55
			],
			[
				-8,
				-63
			],
			[
				-30,
				50
			],
			[
				-68,
				-56
			],
			[
				-11,
				80
			],
			[
				-37,
				-86
			],
			[
				-107,
				-10
			],
			[
				149,
				202
			],
			[
				-186,
				-39
			],
			[
				7,
				74
			],
			[
				-79,
				18
			],
			[
				35,
				45
			],
			[
				171,
				-51
			],
			[
				-26,
				65
			],
			[
				141,
				-77
			],
			[
				-24,
				139
			],
			[
				78,
				-80
			],
			[
				45,
				78
			],
			[
				72,
				-52
			],
			[
				-55,
				-80
			],
			[
				80,
				38
			],
			[
				11,
				-73
			],
			[
				93,
				61
			],
			[
				-107,
				146
			],
			[
				58,
				27
			]
		],
		[
			[
				12402,
				19538
			],
			[
				33,
				6
			],
			[
				-1,
				-48
			],
			[
				9,
				23
			],
			[
				29,
				-27
			],
			[
				-16,
				-23
			],
			[
				66,
				13
			],
			[
				-29,
				-60
			],
			[
				32,
				-7
			],
			[
				0,
				-23
			],
			[
				47,
				-12
			],
			[
				-9,
				52
			],
			[
				39,
				-3
			],
			[
				-7,
				53
			],
			[
				60,
				-16
			],
			[
				-17,
				39
			],
			[
				40,
				-4
			],
			[
				-105,
				76
			],
			[
				29,
				24
			],
			[
				29,
				-11
			],
			[
				-21,
				38
			],
			[
				81,
				-57
			],
			[
				-9,
				74
			],
			[
				87,
				-99
			],
			[
				12,
				74
			],
			[
				1,
				80
			],
			[
				43,
				-35
			],
			[
				-8,
				-26
			],
			[
				47,
				3
			],
			[
				10,
				-40
			],
			[
				31,
				-39
			],
			[
				-59,
				19
			],
			[
				-13,
				-18
			],
			[
				44,
				-24
			],
			[
				-45,
				-8
			],
			[
				-22,
				-48
			],
			[
				-30,
				31
			],
			[
				-4,
				-65
			],
			[
				-22,
				13
			],
			[
				0,
				-22
			],
			[
				-29,
				4
			],
			[
				28,
				-27
			],
			[
				-53,
				-11
			],
			[
				-32,
				22
			],
			[
				-8,
				-37
			],
			[
				21,
				-21
			],
			[
				-31,
				-36
			],
			[
				-56,
				0
			],
			[
				52,
				-14
			],
			[
				-45,
				-80
			],
			[
				-47,
				48
			],
			[
				12,
				-64
			],
			[
				-57,
				31
			],
			[
				-23,
				-29
			],
			[
				38,
				-25
			],
			[
				-7,
				-22
			],
			[
				-49,
				-12
			],
			[
				-7,
				18
			],
			[
				-34,
				-29
			],
			[
				18,
				39
			],
			[
				-58,
				-45
			],
			[
				2,
				48
			],
			[
				-13,
				18
			]
		],
		[
			[
				11452,
				18830
			],
			[
				-17,
				23
			],
			[
				28,
				-11
			],
			[
				-11,
				-12
			]
		],
		[
			[
				11675,
				18976
			],
			[
				74,
				-72
			],
			[
				-75,
				-137
			],
			[
				1,
				209
			]
		],
		[
			[
				11478,
				18897
			],
			[
				-14,
				32
			],
			[
				31,
				37
			],
			[
				12,
				-86
			],
			[
				-42,
				-6
			],
			[
				13,
				23
			]
		],
		[
			[
				12971,
				19145
			],
			[
				25,
				-105
			],
			[
				-138,
				-66
			]
		],
		[
			[
				12858,
				18974
			],
			[
				-19,
				-74
			],
			[
				-81,
				0
			],
			[
				48,
				-49
			],
			[
				-147,
				-63
			],
			[
				-65,
				79
			],
			[
				54,
				130
			],
			[
				-80,
				-111
			],
			[
				-125,
				110
			]
		],
		[
			[
				12443,
				18996
			],
			[
				90,
				-7
			],
			[
				-57,
				71
			],
			[
				120,
				91
			],
			[
				75,
				-44
			],
			[
				-23,
				97
			],
			[
				89,
				-64
			],
			[
				-30,
				-71
			],
			[
				78,
				97
			],
			[
				-55,
				43
			],
			[
				186,
				-25
			],
			[
				-102,
				141
			],
			[
				135,
				0
			],
			[
				22,
				-180
			]
		],
		[
			[
				13292,
				19364
			],
			[
				45,
				-63
			],
			[
				-93,
				-128
			],
			[
				-148,
				-23
			],
			[
				-59,
				88
			]
		],
		[
			[
				13037,
				19238
			],
			[
				-66,
				56
			],
			[
				56,
				223
			],
			[
				265,
				-153
			]
		],
		[
			[
				12723,
				18567
			],
			[
				-43,
				12
			],
			[
				-2,
				21
			],
			[
				68,
				-14
			],
			[
				-23,
				-19
			]
		],
		[
			[
				12834,
				19364
			],
			[
				31,
				27
			],
			[
				-5,
				-27
			],
			[
				-26,
				0
			]
		],
		[
			[
				12809,
				19237
			],
			[
				-11,
				16
			],
			[
				49,
				5
			],
			[
				-38,
				-21
			]
		],
		[
			[
				12531,
				19510
			],
			[
				-24,
				4
			],
			[
				25,
				32
			],
			[
				-1,
				-36
			]
		],
		[
			[
				12613,
				19663
			],
			[
				-11,
				-24
			],
			[
				-59,
				18
			],
			[
				70,
				6
			]
		],
		[
			[
				11002,
				18098
			],
			[
				-104,
				-52
			],
			[
				-16,
				118
			]
		],
		[
			[
				10882,
				18164
			],
			[
				129,
				74
			],
			[
				-9,
				-140
			]
		],
		[
			[
				11868,
				16954
			],
			[
				-244,
				312
			],
			[
				-238,
				54
			]
		],
		[
			[
				11386,
				17320
			],
			[
				-169,
				-119
			]
		],
		[
			[
				11217,
				17201
			],
			[
				17,
				-303
			],
			[
				-233,
				128
			],
			[
				-113,
				-91
			],
			[
				-337,
				-22
			]
		],
		[
			[
				10540,
				17734
			],
			[
				55,
				1
			],
			[
				-195,
				56
			],
			[
				-44,
				106
			],
			[
				149,
				241
			],
			[
				-4,
				-125
			],
			[
				116,
				273
			],
			[
				36,
				-135
			],
			[
				53,
				186
			],
			[
				75,
				-128
			],
			[
				-100,
				-325
			],
			[
				66,
				-107
			],
			[
				-85,
				-51
			],
			[
				-46,
				-252
			]
		],
		[
			[
				10616,
				17474
			],
			[
				-171,
				-219
			],
			[
				248,
				167
			],
			[
				39,
				125
			]
		],
		[
			[
				10732,
				17547
			],
			[
				66,
				202
			],
			[
				267,
				-150
			],
			[
				-226,
				183
			],
			[
				-12,
				219
			]
		],
		[
			[
				10827,
				18001
			],
			[
				170,
				56
			],
			[
				39,
				137
			],
			[
				199,
				117
			],
			[
				-148,
				-161
			],
			[
				95,
				-122
			],
			[
				42,
				152
			],
			[
				77,
				10
			],
			[
				-8,
				-115
			],
			[
				29,
				139
			],
			[
				88,
				3
			],
			[
				-89,
				54
			],
			[
				19,
				71
			]
		],
		[
			[
				11340,
				18342
			],
			[
				32,
				45
			],
			[
				63,
				19
			],
			[
				84,
				-37
			],
			[
				59,
				-69
			],
			[
				32,
				-72
			],
			[
				140,
				-70
			],
			[
				37,
				-40
			],
			[
				39,
				-83
			],
			[
				60,
				-24
			],
			[
				29,
				-38
			],
			[
				-65,
				-4
			],
			[
				73,
				-7
			],
			[
				50,
				25
			],
			[
				-62,
				37
			],
			[
				30,
				6
			],
			[
				-136,
				93
			],
			[
				89,
				13
			],
			[
				-91,
				63
			],
			[
				-11,
				91
			],
			[
				30,
				14
			],
			[
				-27,
				42
			],
			[
				92,
				2
			],
			[
				-2,
				-67
			],
			[
				28,
				3
			],
			[
				-16,
				114
			],
			[
				34,
				22
			],
			[
				-159,
				-29
			],
			[
				-47,
				37
			],
			[
				158,
				69
			],
			[
				44,
				71
			],
			[
				-69,
				-60
			],
			[
				-85,
				-26
			],
			[
				-32,
				23
			],
			[
				15,
				-31
			],
			[
				-81,
				-12
			],
			[
				-77,
				39
			],
			[
				-6,
				40
			],
			[
				-33,
				-32
			],
			[
				-55,
				27
			],
			[
				-27,
				61
			],
			[
				44,
				42
			],
			[
				-119,
				-24
			],
			[
				-62,
				77
			],
			[
				-19,
				-13
			],
			[
				11,
				33
			]
		],
		[
			[
				11672,
				18357
			],
			[
				-97,
				39
			],
			[
				47,
				44
			],
			[
				50,
				-83
			]
		],
		[
			[
				11447,
				18519
			],
			[
				-54,
				21
			],
			[
				39,
				10
			],
			[
				15,
				-31
			]
		],
		[
			[
				11773,
				18212
			],
			[
				-9,
				-19
			],
			[
				-38,
				69
			],
			[
				47,
				-50
			]
		],
		[
			[
				11657,
				18287
			],
			[
				40,
				-20
			],
			[
				1,
				-25
			],
			[
				-77,
				21
			],
			[
				36,
				24
			]
		],
		[
			[
				11077,
				18253
			],
			[
				-78,
				151
			],
			[
				224,
				-58
			],
			[
				-146,
				-93
			]
		],
		[
			[
				11088,
				18611
			],
			[
				23,
				-134
			],
			[
				-73,
				68
			],
			[
				50,
				66
			]
		],
		[
			[
				11368,
				18416
			],
			[
				-40,
				19
			],
			[
				53,
				17
			],
			[
				-13,
				-36
			]
		],
		[
			[
				11030,
				18565
			],
			[
				10,
				-73
			],
			[
				18,
				-40
			],
			[
				-99,
				-8
			],
			[
				-12,
				21
			],
			[
				-13,
				-37
			],
			[
				-56,
				7
			],
			[
				28,
				49
			],
			[
				-23,
				69
			],
			[
				-15,
				-86
			],
			[
				-21,
				7
			],
			[
				6,
				-29
			],
			[
				-71,
				16
			],
			[
				-16,
				128
			],
			[
				48,
				68
			],
			[
				56,
				26
			],
			[
				17,
				36
			],
			[
				143,
				8
			],
			[
				36,
				-59
			],
			[
				-36,
				-103
			]
		],
		[
			[
				11142,
				18409
			],
			[
				47,
				58
			],
			[
				11,
				-51
			],
			[
				-59,
				-35
			],
			[
				1,
				28
			]
		],
		[
			[
				10933,
				18349
			],
			[
				14,
				10
			],
			[
				29,
				-65
			],
			[
				-37,
				-11
			],
			[
				-6,
				66
			]
		],
		[
			[
				10759,
				17845
			],
			[
				-16,
				39
			],
			[
				25,
				-19
			],
			[
				-9,
				-20
			]
		],
		[
			[
				16334,
				19415
			],
			[
				82,
				-6
			],
			[
				-78,
				74
			],
			[
				161,
				194
			],
			[
				155,
				48
			],
			[
				283,
				-153
			],
			[
				-91,
				-66
			],
			[
				109,
				-19
			],
			[
				-112,
				-111
			],
			[
				346,
				113
			]
		],
		[
			[
				17189,
				19489
			],
			[
				-53,
				-176
			],
			[
				278,
				139
			],
			[
				83,
				-49
			],
			[
				-69,
				-38
			],
			[
				156,
				-58
			],
			[
				-220,
				-125
			],
			[
				86,
				-40
			],
			[
				325,
				74
			],
			[
				-22,
				-65
			],
			[
				109,
				-66
			]
		],
		[
			[
				17862,
				19085
			],
			[
				21,
				-69
			],
			[
				126,
				35
			],
			[
				74,
				-239
			],
			[
				-413,
				-126
			]
		],
		[
			[
				17670,
				18686
			],
			[
				-251,
				-185
			],
			[
				55,
				-24
			],
			[
				-671,
				70
			]
		],
		[
			[
				16803,
				18547
			],
			[
				-181,
				39
			],
			[
				-82,
				26
			],
			[
				-103,
				35
			],
			[
				-65,
				-12
			],
			[
				59,
				-15
			],
			[
				78,
				-6
			],
			[
				-127,
				-71
			],
			[
				80,
				-20
			],
			[
				98,
				6
			],
			[
				-1,
				-23
			],
			[
				-75,
				6
			],
			[
				156,
				-43
			],
			[
				132,
				-24
			],
			[
				14,
				-31
			],
			[
				-36,
				-21
			],
			[
				135,
				9
			]
		],
		[
			[
				16885,
				18402
			],
			[
				131,
				-30
			],
			[
				-8,
				-16
			],
			[
				104,
				-23
			],
			[
				-5,
				-38
			],
			[
				-155,
				-93
			],
			[
				1,
				-28
			],
			[
				-41,
				-8
			],
			[
				49,
				-16
			],
			[
				71,
				95
			],
			[
				143,
				-18
			],
			[
				17,
				-121
			],
			[
				-55,
				-82
			],
			[
				-44,
				-13
			],
			[
				23,
				-27
			],
			[
				-61,
				-71
			],
			[
				-106,
				3
			],
			[
				90,
				-14
			],
			[
				-39,
				-58
			],
			[
				98,
				75
			],
			[
				56,
				55
			],
			[
				130,
				1
			],
			[
				52,
				43
			],
			[
				57,
				18
			],
			[
				15,
				-16
			],
			[
				-57,
				-68
			],
			[
				-68,
				-30
			],
			[
				19,
				-125
			],
			[
				21,
				-56
			],
			[
				-11,
				170
			],
			[
				99,
				47
			],
			[
				32,
				-89
			],
			[
				0,
				76
			],
			[
				-21,
				54
			],
			[
				70,
				19
			],
			[
				-47,
				123
			],
			[
				12,
				35
			],
			[
				104,
				10
			],
			[
				22,
				-21
			],
			[
				-67,
				-48
			],
			[
				94,
				15
			],
			[
				33,
				-234
			],
			[
				-80,
				-29
			],
			[
				97,
				6
			],
			[
				5,
				88
			],
			[
				-20,
				124
			],
			[
				55,
				15
			],
			[
				75,
				-36
			],
			[
				-7,
				21
			],
			[
				46,
				-4
			],
			[
				-2,
				-30
			],
			[
				45,
				12
			],
			[
				-35,
				-54
			],
			[
				96,
				39
			],
			[
				20,
				-44
			],
			[
				7,
				-12
			],
			[
				17,
				-23
			],
			[
				-9,
				-35
			],
			[
				16,
				-20
			],
			[
				33,
				-29
			],
			[
				-8,
				-11
			],
			[
				-1,
				-27
			],
			[
				13,
				-65
			],
			[
				-5,
				-52
			],
			[
				-38,
				-51
			],
			[
				-51,
				-30
			],
			[
				-204,
				18
			],
			[
				-193,
				168
			],
			[
				-56,
				29
			],
			[
				-46,
				-17
			],
			[
				4,
				-24
			],
			[
				33,
				-2
			],
			[
				26,
				-159
			],
			[
				-37,
				-30
			],
			[
				-4,
				-73
			],
			[
				-114,
				-98
			],
			[
				-23,
				19
			],
			[
				-40,
				9
			],
			[
				-47,
				-37
			],
			[
				-38,
				-14
			],
			[
				-27,
				-42
			],
			[
				-110,
				-69
			],
			[
				-8,
				17
			],
			[
				-87,
				-8
			],
			[
				-73,
				-42
			],
			[
				4,
				-137
			],
			[
				-38,
				-106
			],
			[
				2,
				-37
			],
			[
				-114,
				-132
			],
			[
				-23,
				-24
			],
			[
				-28,
				30
			],
			[
				-84,
				58
			],
			[
				-46,
				83
			],
			[
				15,
				156
			],
			[
				223,
				222
			],
			[
				122,
				165
			],
			[
				-71,
				153
			],
			[
				-43,
				93
			],
			[
				-25,
				86
			],
			[
				-164,
				58
			],
			[
				-172,
				69
			],
			[
				-174,
				70
			],
			[
				-40,
				38
			]
		],
		[
			[
				16212,
				18141
			],
			[
				10,
				48
			]
		],
		[
			[
				16524,
				18575
			],
			[
				-26,
				5
			],
			[
				42,
				-6
			],
			[
				-16,
				1
			]
		],
		[
			[
				15750,
				20103
			],
			[
				115,
				-154
			],
			[
				109,
				81
			],
			[
				63,
				-59
			],
			[
				119,
				59
			],
			[
				-47,
				-193
			],
			[
				85,
				70
			],
			[
				167,
				-57
			],
			[
				-50,
				-118
			],
			[
				-92,
				-2
			],
			[
				81,
				-18
			],
			[
				-74,
				-78
			],
			[
				-95,
				21
			],
			[
				69,
				-43
			],
			[
				-61,
				-37
			],
			[
				-331,
				23
			],
			[
				63,
				-31
			],
			[
				-55,
				-54
			],
			[
				103,
				43
			],
			[
				165,
				-59
			],
			[
				-344,
				-173
			],
			[
				441,
				146
			]
		],
		[
			[
				17439,
				18037
			],
			[
				7,
				33
			],
			[
				19,
				-29
			],
			[
				-26,
				-4
			]
		],
		[
			[
				17351,
				18098
			],
			[
				56,
				21
			],
			[
				-1,
				-37
			],
			[
				-136,
				-65
			],
			[
				-32,
				14
			],
			[
				0,
				-32
			],
			[
				-89,
				-2
			],
			[
				53,
				93
			],
			[
				14,
				-9
			],
			[
				2,
				148
			],
			[
				114,
				-22
			],
			[
				28,
				-91
			],
			[
				-67,
				-5
			],
			[
				11,
				-27
			],
			[
				47,
				14
			]
		],
		[
			[
				17373,
				18188
			],
			[
				17,
				14
			],
			[
				36,
				-4
			],
			[
				-20,
				-51
			],
			[
				-26,
				2
			],
			[
				-7,
				39
			]
		],
		[
			[
				18156,
				18965
			],
			[
				-10,
				-9
			],
			[
				-19,
				8
			],
			[
				-8,
				4
			],
			[
				9,
				12
			],
			[
				13,
				1
			],
			[
				15,
				-16
			]
		],
		[
			[
				18087,
				18956
			],
			[
				7,
				35
			],
			[
				35,
				-64
			],
			[
				-42,
				29
			]
		],
		[
			[
				16181,
				19470
			],
			[
				-48,
				-182
			],
			[
				-276,
				-172
			],
			[
				36,
				-93
			],
			[
				61,
				112
			],
			[
				-31,
				-61
			],
			[
				185,
				81
			],
			[
				-92,
				-129
			],
			[
				138,
				126
			],
			[
				183,
				-95
			],
			[
				27,
				87
			],
			[
				-107,
				56
			],
			[
				77,
				215
			]
		],
		[
			[
				16222,
				18189
			],
			[
				-224,
				175
			],
			[
				-47,
				148
			],
			[
				-230,
				-27
			],
			[
				-394,
				-251
			],
			[
				-127,
				76
			],
			[
				-247,
				-23
			],
			[
				-158,
				-192
			]
		],
		[
			[
				14795,
				18095
			],
			[
				-252,
				-235
			],
			[
				58,
				-84
			],
			[
				-92,
				-91
			],
			[
				3,
				-241
			],
			[
				-99,
				-213
			],
			[
				52,
				-360
			],
			[
				-102,
				-191
			],
			[
				-158,
				-6
			]
		],
		[
			[
				14205,
				16674
			],
			[
				-165,
				-137
			],
			[
				-26,
				-240
			],
			[
				-138,
				-57
			],
			[
				-10,
				-78
			],
			[
				-82,
				125
			],
			[
				-624,
				306
			],
			[
				-135,
				-200
			],
			[
				-347,
				-118
			],
			[
				-83,
				93
			],
			[
				-168,
				-3
			],
			[
				-181,
				88
			],
			[
				-110,
				-43
			],
			[
				-23,
				169
			],
			[
				-245,
				375
			]
		],
		[
			[
				14316,
				19455
			],
			[
				-346,
				-311
			],
			[
				113,
				35
			],
			[
				-108,
				-63
			],
			[
				147,
				-31
			],
			[
				-78,
				-69
			],
			[
				54,
				-46
			],
			[
				-64,
				21
			],
			[
				-73,
				-79
			],
			[
				60,
				12
			],
			[
				-50,
				-66
			],
			[
				86,
				12
			],
			[
				-6,
				-50
			],
			[
				-161,
				-95
			],
			[
				32,
				-268
			],
			[
				29,
				152
			],
			[
				82,
				-33
			],
			[
				-20,
				-101
			],
			[
				74,
				34
			],
			[
				203,
				307
			],
			[
				-91,
				65
			],
			[
				427,
				503
			]
		],
		[
			[
				15083,
				19852
			],
			[
				-2,
				-343
			],
			[
				-253,
				-141
			],
			[
				222,
				49
			],
			[
				-79,
				-514
			],
			[
				75,
				128
			],
			[
				94,
				10
			],
			[
				-12,
				77
			],
			[
				239,
				-36
			],
			[
				-99,
				165
			],
			[
				66,
				76
			],
			[
				154,
				-54
			],
			[
				-143,
				176
			],
			[
				32,
				81
			],
			[
				149,
				-30
			],
			[
				-25,
				150
			],
			[
				284,
				-53
			],
			[
				-173,
				62
			],
			[
				53,
				40
			],
			[
				-108,
				25
			],
			[
				26,
				65
			],
			[
				-69,
				-52
			],
			[
				-142,
				57
			],
			[
				29,
				82
			],
			[
				143,
				-55
			],
			[
				-106,
				105
			],
			[
				52,
				46
			],
			[
				199,
				-126
			],
			[
				-45,
				191
			],
			[
				106,
				70
			]
		],
		[
			[
				13995,
				18712
			],
			[
				-3,
				-3
			],
			[
				-14,
				3
			],
			[
				13,
				21
			],
			[
				10,
				3
			],
			[
				9,
				-1
			],
			[
				-7,
				-14
			],
			[
				-8,
				-9
			]
		],
		[
			[
				13943,
				18714
			],
			[
				-15,
				7
			],
			[
				24,
				0
			],
			[
				-9,
				-7
			]
		],
		[
			[
				14006,
				18624
			],
			[
				-18,
				13
			],
			[
				21,
				15
			],
			[
				-3,
				-28
			]
		],
		[
			[
				14512,
				19459
			],
			[
				25,
				-34
			],
			[
				-64,
				-36
			],
			[
				-2,
				48
			],
			[
				41,
				22
			]
		],
		[
			[
				14108,
				18794
			],
			[
				40,
				22
			],
			[
				11,
				-41
			],
			[
				-66,
				-29
			],
			[
				15,
				48
			]
		],
		[
			[
				15442,
				19565
			],
			[
				-34,
				4
			],
			[
				37,
				26
			],
			[
				-3,
				-30
			]
		],
		[
			[
				15215,
				19144
			],
			[
				-21,
				14
			],
			[
				39,
				6
			],
			[
				-18,
				-20
			]
		],
		[
			[
				15153,
				19135
			],
			[
				-4,
				-10
			],
			[
				-36,
				7
			],
			[
				-3,
				3
			],
			[
				-4,
				8
			],
			[
				10,
				6
			],
			[
				8,
				0
			],
			[
				29,
				-14
			]
		],
		[
			[
				14998,
				19009
			],
			[
				30,
				51
			],
			[
				25,
				-12
			],
			[
				-55,
				-39
			]
		],
		[
			[
				4107,
				2953
			],
			[
				-86,
				-44
			]
		],
		[
			[
				4021,
				2909
			],
			[
				-31,
				-80
			],
			[
				17,
				3
			],
			[
				-7,
				-37
			],
			[
				8,
				-29
			]
		],
		[
			[
				4061,
				2873
			],
			[
				-11,
				23
			],
			[
				20,
				-13
			],
			[
				-9,
				-10
			]
		],
		[
			[
				4042,
				2868
			],
			[
				-16,
				1
			],
			[
				19,
				8
			],
			[
				-3,
				-9
			]
		],
		[
			[
				4034,
				2880
			],
			[
				-16,
				-10
			],
			[
				12,
				37
			],
			[
				4,
				-27
			]
		],
		[
			[
				5554,
				13487
			],
			[
				9,
				-18
			],
			[
				-25,
				5
			],
			[
				16,
				13
			]
		],
		[
			[
				5851,
				12724
			],
			[
				-132,
				39
			],
			[
				108,
				110
			],
			[
				-51,
				95
			],
			[
				57,
				0
			],
			[
				-130,
				90
			]
		],
		[
			[
				5703,
				13058
			],
			[
				102,
				42
			],
			[
				62,
				-75
			],
			[
				14,
				-62
			],
			[
				-15,
				-13
			],
			[
				39,
				-6
			],
			[
				104,
				41
			],
			[
				-109,
				-11
			],
			[
				27,
				58
			],
			[
				-24,
				37
			],
			[
				116,
				26
			],
			[
				120,
				-28
			],
			[
				36,
				-22
			],
			[
				-13,
				36
			],
			[
				-119,
				35
			],
			[
				71,
				56
			],
			[
				107,
				18
			],
			[
				-119,
				-4
			],
			[
				-87,
				-72
			],
			[
				-154,
				-6
			],
			[
				-15,
				18
			],
			[
				23,
				46
			],
			[
				25,
				5
			],
			[
				-18,
				15
			],
			[
				20,
				20
			],
			[
				22,
				-10
			],
			[
				9,
				24
			],
			[
				52,
				5
			],
			[
				-72,
				3
			],
			[
				-34,
				-8
			],
			[
				-33,
				48
			],
			[
				40,
				11
			],
			[
				91,
				-2
			],
			[
				9,
				-37
			],
			[
				3,
				23
			],
			[
				85,
				-15
			],
			[
				39,
				-2
			],
			[
				-71,
				38
			],
			[
				-50,
				23
			],
			[
				-80,
				23
			],
			[
				3,
				8
			],
			[
				-39,
				11
			],
			[
				71,
				19
			],
			[
				38,
				6
			]
		],
		[
			[
				5761,
				13119
			],
			[
				-47,
				-8
			],
			[
				32,
				48
			],
			[
				15,
				-40
			]
		],
		[
			[
				5586,
				13064
			],
			[
				41,
				61
			],
			[
				13,
				-49
			]
		],
		[
			[
				5640,
				13076
			],
			[
				-50,
				-31
			],
			[
				-4,
				19
			]
		],
		[
			[
				5454,
				13139
			],
			[
				29,
				48
			],
			[
				20,
				-42
			]
		],
		[
			[
				5503,
				13145
			],
			[
				-29,
				-50
			],
			[
				-20,
				44
			]
		],
		[
			[
				5808,
				13427
			],
			[
				0,
				0
			],
			[
				4,
				-1
			],
			[
				-6,
				-17
			],
			[
				-11,
				-1
			],
			[
				-3,
				3
			],
			[
				4,
				11
			],
			[
				0,
				0
			]
		],
		[
			[
				5817,
				13392
			],
			[
				-3,
				-1
			],
			[
				-3,
				1
			],
			[
				-2,
				3
			],
			[
				1,
				5
			],
			[
				14,
				9
			],
			[
				6,
				-2
			],
			[
				8,
				-5
			],
			[
				-1,
				-7
			],
			[
				-17,
				-2
			],
			[
				-3,
				-1
			]
		],
		[
			[
				5731,
				13247
			],
			[
				-28,
				15
			],
			[
				39,
				-9
			],
			[
				-11,
				-6
			]
		],
		[
			[
				5707,
				13301
			],
			[
				-39,
				-4
			],
			[
				7,
				12
			],
			[
				30,
				5
			],
			[
				2,
				-13
			]
		],
		[
			[
				5664,
				13140
			],
			[
				-3,
				27
			],
			[
				13,
				-22
			],
			[
				-10,
				-5
			]
		],
		[
			[
				5611,
				13185
			],
			[
				-1,
				-7
			],
			[
				-10,
				2
			],
			[
				-3,
				3
			],
			[
				-3,
				5
			],
			[
				0,
				6
			],
			[
				2,
				4
			],
			[
				4,
				2
			],
			[
				4,
				0
			],
			[
				3,
				-1
			],
			[
				3,
				-2
			],
			[
				1,
				-3
			],
			[
				1,
				-4
			],
			[
				-1,
				-5
			]
		],
		[
			[
				5369,
				13420
			],
			[
				-31,
				-4
			],
			[
				32,
				11
			],
			[
				-1,
				-7
			]
		],
		[
			[
				5425,
				13278
			],
			[
				-12,
				-15
			],
			[
				-13,
				1
			],
			[
				8,
				14
			],
			[
				17,
				0
			]
		],
		[
			[
				5808,
				13164
			],
			[
				-12,
				-20
			],
			[
				-16,
				55
			],
			[
				31,
				5
			],
			[
				-3,
				-40
			]
		],
		[
			[
				5767,
				13311
			],
			[
				18,
				8
			],
			[
				-14,
				-61
			],
			[
				-21,
				4
			],
			[
				0,
				48
			],
			[
				17,
				1
			]
		],
		[
			[
				5729,
				13237
			],
			[
				31,
				-8
			],
			[
				-11,
				-56
			],
			[
				-21,
				-7
			],
			[
				-15,
				38
			],
			[
				16,
				33
			]
		],
		[
			[
				5643,
				12873
			],
			[
				-38,
				69
			],
			[
				51,
				15
			],
			[
				-13,
				-84
			]
		],
		[
			[
				5651,
				12994
			],
			[
				-11,
				-1
			],
			[
				-4,
				2
			],
			[
				-6,
				4
			],
			[
				4,
				6
			],
			[
				19,
				9
			],
			[
				7,
				-3
			],
			[
				-3,
				-12
			],
			[
				-6,
				-5
			]
		],
		[
			[
				5436,
				12794
			],
			[
				-33,
				-8
			],
			[
				53,
				39
			],
			[
				-20,
				-31
			]
		],
		[
			[
				5283,
				12803
			],
			[
				-41,
				-1
			],
			[
				29,
				30
			],
			[
				12,
				-29
			]
		],
		[
			[
				5421,
				13094
			],
			[
				-4,
				-3
			],
			[
				-6,
				0
			],
			[
				-3,
				1
			],
			[
				-3,
				5
			],
			[
				-2,
				7
			],
			[
				-1,
				3
			],
			[
				3,
				1
			],
			[
				2,
				1
			],
			[
				7,
				1
			],
			[
				7,
				2
			],
			[
				1,
				-2
			],
			[
				1,
				-10
			],
			[
				-2,
				-6
			]
		],
		[
			[
				5622,
				12829
			],
			[
				-35,
				27
			],
			[
				49,
				9
			],
			[
				5,
				-33
			],
			[
				-19,
				-3
			]
		],
		[
			[
				5398,
				12809
			],
			[
				3,
				40
			],
			[
				26,
				-5
			],
			[
				-29,
				-35
			]
		],
		[
			[
				5703,
				12971
			],
			[
				-22,
				-110
			],
			[
				-27,
				5
			],
			[
				27,
				97
			],
			[
				22,
				8
			]
		],
		[
			[
				5720,
				12841
			],
			[
				36,
				85
			],
			[
				47,
				-47
			],
			[
				-83,
				-38
			]
		],
		[
			[
				5474,
				12795
			],
			[
				-3,
				-12
			],
			[
				-19,
				-16
			],
			[
				-45,
				-23
			],
			[
				-2,
				8
			],
			[
				26,
				26
			],
			[
				27,
				18
			],
			[
				16,
				-1
			]
		],
		[
			[
				5090,
				13002
			],
			[
				-6,
				-4
			],
			[
				-3,
				0
			],
			[
				-4,
				3
			],
			[
				0,
				8
			],
			[
				7,
				14
			],
			[
				7,
				8
			],
			[
				8,
				3
			],
			[
				7,
				-4
			],
			[
				1,
				-4
			],
			[
				0,
				-1
			],
			[
				0,
				-1
			],
			[
				-9,
				-16
			],
			[
				-8,
				-6
			]
		],
		[
			[
				5074,
				13046
			],
			[
				-15,
				-26
			],
			[
				-15,
				14
			],
			[
				30,
				12
			]
		],
		[
			[
				5203,
				13081
			],
			[
				-4,
				-1
			],
			[
				-7,
				1
			],
			[
				-7,
				4
			],
			[
				7,
				4
			],
			[
				11,
				3
			],
			[
				4,
				0
			],
			[
				3,
				-3
			],
			[
				0,
				-1
			],
			[
				-3,
				-4
			],
			[
				-4,
				-3
			]
		],
		[
			[
				5211,
				13155
			],
			[
				-12,
				-11
			],
			[
				-17,
				4
			],
			[
				18,
				11
			],
			[
				11,
				-4
			]
		],
		[
			[
				5448,
				11933
			],
			[
				29,
				41
			],
			[
				47,
				-61
			],
			[
				-14,
				48
			],
			[
				20,
				1
			],
			[
				-26,
				59
			],
			[
				-15,
				-30
			],
			[
				-38,
				-15
			],
			[
				30,
				144
			],
			[
				60,
				53
			],
			[
				89,
				43
			],
			[
				47,
				-65
			],
			[
				76,
				-19
			],
			[
				31,
				-46
			],
			[
				22,
				14
			],
			[
				48,
				-101
			],
			[
				-27,
				97
			],
			[
				-23,
				77
			],
			[
				-41,
				-11
			],
			[
				-87,
				50
			],
			[
				-22,
				2
			]
		],
		[
			[
				6121,
				12518
			],
			[
				-26,
				-102
			],
			[
				86,
				86
			]
		],
		[
			[
				6816,
				12048
			],
			[
				-65,
				-845
			],
			[
				-124,
				-291
			]
		],
		[
			[
				6181,
				12502
			],
			[
				51,
				18
			],
			[
				45,
				-47
			],
			[
				19,
				35
			],
			[
				-61,
				37
			],
			[
				-49,
				-18
			],
			[
				-11,
				24
			],
			[
				-35,
				-18
			],
			[
				13,
				57
			],
			[
				-24,
				14
			],
			[
				112,
				27
			],
			[
				40,
				-20
			],
			[
				-34,
				-59
			],
			[
				73,
				58
			]
		],
		[
			[
				6320,
				12610
			],
			[
				186,
				165
			],
			[
				-167,
				-103
			],
			[
				-113,
				-20
			],
			[
				3,
				56
			],
			[
				-88,
				-84
			],
			[
				17,
				76
			],
			[
				-221,
				-59
			]
		],
		[
			[
				5937,
				12641
			],
			[
				-205,
				-113
			],
			[
				186,
				175
			]
		],
		[
			[
				5918,
				12703
			],
			[
				186,
				27
			],
			[
				-91,
				62
			],
			[
				-162,
				-68
			]
		],
		[
			[
				7453,
				13111
			],
			[
				-107,
				-113
			],
			[
				74,
				-308
			],
			[
				-307,
				-197
			],
			[
				-356,
				-32
			],
			[
				9,
				-57
			]
		],
		[
			[
				6766,
				12404
			],
			[
				50,
				-356
			]
		],
		[
			[
				6050,
				12610
			],
			[
				66,
				6
			],
			[
				-55,
				-63
			],
			[
				75,
				12
			],
			[
				-15,
				-47
			]
		],
		[
			[
				5646,
				12688
			],
			[
				-54,
				-111
			],
			[
				-79,
				58
			],
			[
				43,
				50
			],
			[
				90,
				3
			]
		],
		[
			[
				5697,
				12531
			],
			[
				-62,
				-26
			],
			[
				-4,
				47
			],
			[
				63,
				32
			],
			[
				3,
				-53
			]
		],
		[
			[
				5684,
				12632
			],
			[
				47,
				54
			],
			[
				105,
				7
			],
			[
				-156,
				-88
			],
			[
				-15,
				8
			],
			[
				19,
				19
			]
		],
		[
			[
				8153,
				14776
			],
			[
				-101,
				-173
			]
		],
		[
			[
				8052,
				14603
			],
			[
				-171,
				-23
			],
			[
				-47,
				-128
			],
			[
				164,
				-265
			]
		],
		[
			[
				7998,
				14187
			],
			[
				51,
				-87
			],
			[
				-67,
				-285
			]
		],
		[
			[
				7982,
				13815
			],
			[
				-183,
				-162
			],
			[
				-346,
				-542
			]
		],
		[
			[
				5979,
				13380
			],
			[
				64,
				-22
			],
			[
				39,
				8
			],
			[
				-1,
				-32
			],
			[
				126,
				-7
			],
			[
				-17,
				24
			],
			[
				147,
				23
			],
			[
				-157,
				-9
			],
			[
				-36,
				-15
			],
			[
				-32,
				-4
			],
			[
				-19,
				67
			],
			[
				148,
				0
			],
			[
				-152,
				20
			],
			[
				-26,
				54
			],
			[
				148,
				2
			],
			[
				192,
				-11
			],
			[
				-159,
				42
			],
			[
				-17,
				30
			],
			[
				-45,
				-18
			],
			[
				27,
				40
			],
			[
				-46,
				54
			],
			[
				-44,
				19
			],
			[
				-35,
				-6
			],
			[
				-4,
				50
			],
			[
				-27,
				20
			],
			[
				47,
				-3
			],
			[
				2,
				-16
			],
			[
				44,
				23
			]
		],
		[
			[
				6146,
				13713
			],
			[
				71,
				-10
			],
			[
				51,
				23
			],
			[
				-55,
				24
			],
			[
				103,
				21
			],
			[
				36,
				29
			],
			[
				54,
				-9
			],
			[
				-51,
				-54
			],
			[
				-23,
				7
			],
			[
				7,
				-38
			],
			[
				74,
				50
			],
			[
				-2,
				-26
			],
			[
				12,
				40
			],
			[
				24,
				4
			],
			[
				-23,
				85
			],
			[
				15,
				52
			],
			[
				46,
				-69
			],
			[
				31,
				-64
			],
			[
				52,
				9
			],
			[
				14,
				89
			],
			[
				-17,
				29
			],
			[
				49,
				-16
			],
			[
				37,
				16
			]
		],
		[
			[
				6651,
				13905
			],
			[
				173,
				-68
			],
			[
				-19,
				57
			],
			[
				-158,
				21
			]
		],
		[
			[
				6647,
				13915
			],
			[
				-73,
				5
			],
			[
				50,
				104
			]
		],
		[
			[
				6624,
				14024
			],
			[
				110,
				64
			],
			[
				155,
				-28
			],
			[
				-132,
				40
			],
			[
				314,
				68
			],
			[
				-61,
				-119
			],
			[
				59,
				-83
			],
			[
				-36,
				76
			],
			[
				69,
				107
			],
			[
				234,
				-72
			]
		],
		[
			[
				7336,
				14077
			],
			[
				65,
				-147
			],
			[
				6,
				153
			]
		],
		[
			[
				7407,
				14083
			],
			[
				-48,
				31
			],
			[
				-31,
				13
			],
			[
				60,
				28
			],
			[
				-5,
				-21
			],
			[
				42,
				24
			],
			[
				-38,
				17
			],
			[
				-58,
				-9
			],
			[
				-51,
				-23
			],
			[
				-25,
				1
			],
			[
				76,
				34
			],
			[
				-81,
				18
			],
			[
				-42,
				-22
			],
			[
				-39,
				30
			],
			[
				-52,
				4
			],
			[
				107,
				43
			],
			[
				44,
				25
			],
			[
				-18,
				35
			],
			[
				-24,
				-38
			],
			[
				-33,
				-24
			],
			[
				4,
				40
			],
			[
				-66,
				-14
			]
		],
		[
			[
				7129,
				14275
			],
			[
				-40,
				-36
			],
			[
				-83,
				2
			],
			[
				-60,
				-14
			],
			[
				52,
				-7
			],
			[
				-102,
				-63
			],
			[
				-20,
				20
			],
			[
				29,
				86
			],
			[
				-87,
				-34
			],
			[
				18,
				-6
			],
			[
				-148,
				-25
			],
			[
				-67,
				-26
			],
			[
				15,
				25
			],
			[
				41,
				38
			],
			[
				-1,
				26
			],
			[
				51,
				17
			],
			[
				90,
				87
			],
			[
				17,
				41
			],
			[
				-35,
				-2
			],
			[
				35,
				10
			],
			[
				8,
				40
			],
			[
				66,
				3
			],
			[
				53,
				7
			],
			[
				33,
				-32
			],
			[
				-29,
				-55
			],
			[
				32,
				2
			],
			[
				30,
				68
			],
			[
				96,
				39
			],
			[
				-194,
				-8
			],
			[
				-60,
				19
			],
			[
				-15,
				24
			],
			[
				187,
				144
			],
			[
				111,
				17
			],
			[
				42,
				-45
			],
			[
				-13,
				-22
			],
			[
				-35,
				1
			],
			[
				-57,
				52
			],
			[
				19,
				-53
			],
			[
				33,
				-22
			],
			[
				-94,
				-59
			],
			[
				57,
				11
			],
			[
				22,
				22
			],
			[
				38,
				11
			],
			[
				44,
				20
			]
		],
		[
			[
				7208,
				14598
			],
			[
				18,
				-18
			],
			[
				26,
				-22
			],
			[
				-62,
				-25
			],
			[
				12,
				-32
			],
			[
				-18,
				-29
			],
			[
				5,
				-24
			],
			[
				41,
				53
			],
			[
				8,
				29
			],
			[
				49,
				29
			],
			[
				19,
				-3
			],
			[
				107,
				-36
			],
			[
				13,
				-66
			],
			[
				61,
				-120
			],
			[
				11,
				-10
			],
			[
				13,
				33
			],
			[
				-17,
				43
			],
			[
				53,
				5
			],
			[
				35,
				51
			],
			[
				-93,
				-44
			],
			[
				-47,
				79
			],
			[
				46,
				23
			],
			[
				-38,
				0
			],
			[
				104,
				117
			],
			[
				144,
				41
			],
			[
				-16,
				10
			],
			[
				35,
				13
			],
			[
				-143,
				-39
			],
			[
				-132,
				-91
			],
			[
				-36,
				38
			],
			[
				-124,
				4
			],
			[
				-48,
				37
			],
			[
				23,
				78
			],
			[
				41,
				13
			],
			[
				98,
				-57
			],
			[
				-12,
				39
			],
			[
				-113,
				46
			],
			[
				-49,
				-21
			],
			[
				-17,
				7
			]
		],
		[
			[
				7205,
				14749
			],
			[
				51,
				87
			],
			[
				65,
				8
			],
			[
				-54,
				25
			],
			[
				35,
				46
			],
			[
				147,
				-87
			],
			[
				-17,
				31
			],
			[
				30,
				12
			],
			[
				73,
				-29
			],
			[
				-73,
				47
			],
			[
				-50,
				-7
			],
			[
				-43,
				55
			],
			[
				85,
				25
			],
			[
				55,
				-12
			]
		],
		[
			[
				7509,
				14950
			],
			[
				149,
				-122
			],
			[
				-78,
				108
			]
		],
		[
			[
				7580,
				14936
			],
			[
				-194,
				88
			],
			[
				-35,
				98
			],
			[
				-5,
				-109
			],
			[
				-143,
				-128
			],
			[
				-151,
				-83
			],
			[
				-146,
				6
			],
			[
				110,
				64
			],
			[
				-73,
				44
			],
			[
				244,
				37
			],
			[
				-264,
				59
			],
			[
				40,
				70
			],
			[
				220,
				32
			],
			[
				-212,
				-12
			],
			[
				49,
				39
			],
			[
				226,
				27
			],
			[
				-24,
				-79
			],
			[
				89,
				98
			],
			[
				141,
				38
			],
			[
				8,
				-43
			],
			[
				133,
				85
			]
		],
		[
			[
				7593,
				15267
			],
			[
				90,
				-86
			],
			[
				74,
				154
			],
			[
				-98,
				65
			],
			[
				-173,
				-17
			],
			[
				-43,
				80
			],
			[
				-115,
				-89
			],
			[
				43,
				-66
			],
			[
				-93,
				101
			],
			[
				92,
				124
			],
			[
				72,
				11
			],
			[
				2,
				-64
			],
			[
				74,
				50
			],
			[
				-1,
				74
			],
			[
				67,
				-47
			],
			[
				-5,
				-76
			],
			[
				-82,
				3
			],
			[
				33,
				-85
			],
			[
				200,
				145
			],
			[
				-59,
				76
			],
			[
				74,
				39
			]
		],
		[
			[
				7653,
				15504
			],
			[
				-55,
				27
			],
			[
				69,
				30
			],
			[
				-14,
				-57
			]
		],
		[
			[
				7422,
				15283
			],
			[
				-5,
				-3
			],
			[
				-9,
				1
			],
			[
				-15,
				3
			],
			[
				-6,
				3
			],
			[
				2,
				6
			],
			[
				3,
				4
			],
			[
				9,
				6
			],
			[
				8,
				-3
			],
			[
				16,
				-9
			],
			[
				-3,
				-8
			]
		],
		[
			[
				7614,
				15360
			],
			[
				82,
				-6
			],
			[
				35,
				-46
			],
			[
				-69,
				-18
			],
			[
				-96,
				48
			],
			[
				1,
				-26
			],
			[
				-94,
				-12
			],
			[
				-60,
				26
			],
			[
				112,
				37
			],
			[
				89,
				-3
			]
		],
		[
			[
				7232,
				14710
			],
			[
				-54,
				9
			],
			[
				45,
				0
			],
			[
				9,
				-9
			]
		],
		[
			[
				5796,
				13422
			],
			[
				2,
				5
			],
			[
				6,
				2
			],
			[
				4,
				-2
			]
		],
		[
			[
				5897,
				13417
			],
			[
				149,
				30
			],
			[
				-62,
				-32
			],
			[
				-87,
				2
			]
		],
		[
			[
				5828,
				13805
			],
			[
				-37,
				10
			],
			[
				22,
				11
			],
			[
				15,
				-21
			]
		],
		[
			[
				6030,
				13682
			],
			[
				6,
				-31
			],
			[
				-16,
				6
			],
			[
				-13,
				29
			],
			[
				23,
				-4
			]
		],
		[
			[
				5999,
				13631
			],
			[
				-20,
				10
			],
			[
				29,
				15
			],
			[
				-9,
				-25
			]
		],
		[
			[
				6132,
				13596
			],
			[
				-18,
				-18
			],
			[
				6,
				40
			],
			[
				34,
				-8
			],
			[
				-22,
				-14
			]
		],
		[
			[
				5853,
				13499
			],
			[
				28,
				0
			],
			[
				-16,
				-24
			],
			[
				-12,
				24
			]
		],
		[
			[
				5782,
				13478
			],
			[
				-22,
				-2
			],
			[
				15,
				25
			],
			[
				10,
				-10
			],
			[
				-3,
				-13
			]
		],
		[
			[
				6036,
				13591
			],
			[
				-8,
				12
			],
			[
				15,
				-7
			],
			[
				-7,
				-5
			]
		],
		[
			[
				6027,
				13457
			],
			[
				-29,
				16
			],
			[
				38,
				-8
			],
			[
				-9,
				-8
			]
		],
		[
			[
				6173,
				13537
			],
			[
				-37,
				16
			],
			[
				53,
				25
			],
			[
				-16,
				-41
			]
		],
		[
			[
				6090,
				13403
			],
			[
				-24,
				-18
			],
			[
				-22,
				12
			],
			[
				46,
				6
			]
		],
		[
			[
				5967,
				13537
			],
			[
				146,
				4
			],
			[
				-160,
				-44
			],
			[
				14,
				40
			]
		],
		[
			[
				6405,
				14021
			],
			[
				-6,
				24
			],
			[
				12,
				-23
			],
			[
				-6,
				-1
			]
		],
		[
			[
				6251,
				14038
			],
			[
				23,
				-16
			],
			[
				-41,
				11
			],
			[
				18,
				5
			]
		],
		[
			[
				6269,
				14061
			],
			[
				0,
				0
			],
			[
				-10,
				0
			],
			[
				-3,
				4
			],
			[
				-3,
				4
			],
			[
				2,
				3
			],
			[
				4,
				4
			],
			[
				2,
				1
			],
			[
				12,
				-4
			],
			[
				1,
				-5
			],
			[
				-5,
				-7
			]
		],
		[
			[
				6164,
				13852
			],
			[
				-40,
				-7
			],
			[
				53,
				20
			],
			[
				-13,
				-13
			]
		],
		[
			[
				6378,
				13981
			],
			[
				-18,
				12
			],
			[
				20,
				29
			],
			[
				24,
				-13
			],
			[
				-26,
				-28
			]
		],
		[
			[
				6356,
				13950
			],
			[
				-66,
				-5
			],
			[
				4,
				34
			],
			[
				62,
				-29
			]
		],
		[
			[
				6551,
				13885
			],
			[
				-5,
				-85
			],
			[
				-31,
				7
			],
			[
				-33,
				95
			],
			[
				-73,
				26
			],
			[
				48,
				110
			],
			[
				51,
				-66
			],
			[
				86,
				118
			],
			[
				8,
				-69
			],
			[
				-55,
				-97
			],
			[
				4,
				-39
			]
		],
		[
			[
				6301,
				13882
			],
			[
				-73,
				-23
			],
			[
				17,
				50
			],
			[
				52,
				3
			],
			[
				4,
				-30
			]
		],
		[
			[
				6355,
				13835
			],
			[
				24,
				41
			],
			[
				2,
				-58
			],
			[
				-37,
				-12
			],
			[
				11,
				29
			]
		],
		[
			[
				7211,
				15266
			],
			[
				16,
				86
			],
			[
				55,
				-87
			],
			[
				-71,
				1
			]
		],
		[
			[
				6951,
				15195
			],
			[
				-16,
				-15
			],
			[
				-15,
				14
			],
			[
				16,
				10
			],
			[
				15,
				-9
			]
		],
		[
			[
				6866,
				15017
			],
			[
				-19,
				-3
			],
			[
				45,
				27
			],
			[
				-26,
				-24
			]
		],
		[
			[
				7301,
				15210
			],
			[
				-95,
				-31
			],
			[
				-97,
				8
			],
			[
				-45,
				5
			],
			[
				2,
				52
			],
			[
				17,
				33
			],
			[
				50,
				-3
			],
			[
				26,
				48
			],
			[
				19,
				-71
			],
			[
				72,
				-11
			],
			[
				-3,
				-22
			],
			[
				53,
				13
			],
			[
				1,
				-21
			]
		],
		[
			[
				7114,
				14794
			],
			[
				63,
				7
			],
			[
				-51,
				-31
			],
			[
				-32,
				-10
			],
			[
				20,
				34
			]
		],
		[
			[
				6369,
				14197
			],
			[
				3,
				9
			],
			[
				-22,
				-3
			],
			[
				0,
				9
			],
			[
				22,
				4
			],
			[
				12,
				13
			],
			[
				38,
				-4
			],
			[
				-4,
				-10
			],
			[
				-35,
				-22
			],
			[
				-33,
				-13
			],
			[
				-5,
				10
			],
			[
				24,
				7
			]
		],
		[
			[
				6909,
				14685
			],
			[
				-14,
				16
			],
			[
				24,
				-6
			],
			[
				-10,
				-10
			]
		],
		[
			[
				6875,
				14631
			],
			[
				-18,
				21
			],
			[
				28,
				-9
			],
			[
				-10,
				-12
			]
		],
		[
			[
				6341,
				14395
			],
			[
				-12,
				-7
			],
			[
				-8,
				2
			],
			[
				2,
				3
			],
			[
				9,
				7
			],
			[
				4,
				3
			],
			[
				2,
				1
			],
			[
				11,
				0
			],
			[
				-8,
				-9
			]
		],
		[
			[
				6317,
				14403
			],
			[
				-13,
				-9
			],
			[
				-1,
				8
			],
			[
				4,
				10
			],
			[
				8,
				7
			],
			[
				19,
				16
			],
			[
				8,
				3
			],
			[
				4,
				-3
			],
			[
				0,
				-5
			],
			[
				-4,
				-9
			],
			[
				-11,
				-10
			],
			[
				-7,
				-4
			],
			[
				-7,
				-4
			]
		],
		[
			[
				6381,
				14431
			],
			[
				-12,
				11
			],
			[
				30,
				9
			],
			[
				-18,
				-20
			]
		],
		[
			[
				6225,
				14258
			],
			[
				-25,
				-16
			],
			[
				15,
				23
			],
			[
				10,
				-7
			]
		],
		[
			[
				6619,
				14218
			],
			[
				-17,
				12
			],
			[
				45,
				18
			],
			[
				-28,
				-30
			]
		],
		[
			[
				6828,
				14159
			],
			[
				67,
				-20
			],
			[
				-71,
				5
			],
			[
				4,
				15
			]
		],
		[
			[
				6607,
				14429
			],
			[
				64,
				35
			],
			[
				-1,
				-35
			],
			[
				21,
				6
			],
			[
				-35,
				-47
			],
			[
				-106,
				-29
			],
			[
				57,
				70
			]
		],
		[
			[
				6752,
				14146
			],
			[
				65,
				-10
			],
			[
				-156,
				-68
			],
			[
				-14,
				41
			],
			[
				105,
				37
			]
		],
		[
			[
				7745,
				15659
			],
			[
				-15,
				50
			],
			[
				78,
				-3
			],
			[
				9,
				-42
			],
			[
				28,
				-31
			],
			[
				-58,
				-32
			],
			[
				48,
				-14
			],
			[
				24,
				24
			],
			[
				-5,
				-115
			],
			[
				-23,
				-108
			],
			[
				48,
				-31
			],
			[
				51,
				-101
			],
			[
				-14,
				-103
			],
			[
				45,
				-11
			],
			[
				156,
				-107
			],
			[
				-43,
				46
			],
			[
				13,
				19
			],
			[
				-146,
				78
			],
			[
				31,
				110
			],
			[
				-69,
				60
			],
			[
				29,
				5
			],
			[
				-3,
				22
			],
			[
				35,
				-15
			],
			[
				108,
				-171
			],
			[
				19,
				-4
			],
			[
				-8,
				50
			],
			[
				10,
				12
			],
			[
				-48,
				-2
			],
			[
				-53,
				115
			],
			[
				68,
				-23
			],
			[
				28,
				-71
			],
			[
				43,
				-4
			],
			[
				9,
				19
			],
			[
				-33,
				-2
			],
			[
				-21,
				42
			],
			[
				37,
				37
			],
			[
				-106,
				19
			],
			[
				58,
				97
			],
			[
				25,
				27
			],
			[
				52,
				-62
			],
			[
				56,
				-2
			],
			[
				15,
				-26
			],
			[
				22,
				16
			],
			[
				-29,
				16
			],
			[
				56,
				9
			],
			[
				-131,
				25
			],
			[
				-33,
				45
			],
			[
				-86,
				-67
			],
			[
				-44,
				41
			],
			[
				-38,
				33
			],
			[
				20,
				17
			],
			[
				45,
				-14
			],
			[
				20,
				42
			],
			[
				33,
				-45
			],
			[
				-23,
				59
			],
			[
				67,
				-15
			],
			[
				-5,
				30
			],
			[
				-56,
				29
			],
			[
				134,
				-48
			],
			[
				-5,
				11
			],
			[
				-72,
				34
			],
			[
				1,
				58
			],
			[
				-19,
				-28
			],
			[
				-137,
				-24
			],
			[
				-37,
				2
			],
			[
				-8,
				35
			],
			[
				98,
				21
			],
			[
				25,
				-3
			],
			[
				-23,
				39
			],
			[
				-43,
				-15
			],
			[
				-85,
				47
			]
		],
		[
			[
				7870,
				15761
			],
			[
				59,
				64
			],
			[
				154,
				-59
			],
			[
				244,
				-219
			],
			[
				-135,
				198
			],
			[
				-230,
				86
			],
			[
				1,
				56
			],
			[
				310,
				73
			],
			[
				112,
				-53
			],
			[
				-36,
				-75
			],
			[
				153,
				70
			]
		],
		[
			[
				8502,
				15902
			],
			[
				115,
				-20
			],
			[
				58,
				-277
			],
			[
				61,
				107
			],
			[
				-101,
				97
			],
			[
				26,
				148
			],
			[
				188,
				-73
			],
			[
				-121,
				113
			],
			[
				311,
				-52
			],
			[
				-146,
				96
			],
			[
				-113,
				-16
			],
			[
				51,
				131
			],
			[
				-157,
				-103
			]
		],
		[
			[
				8674,
				16053
			],
			[
				-200,
				-48
			],
			[
				55,
				53
			],
			[
				-73,
				61
			],
			[
				-90,
				-87
			],
			[
				-208,
				-28
			]
		],
		[
			[
				8158,
				16004
			],
			[
				-35,
				0
			],
			[
				-7,
				71
			],
			[
				-35,
				19
			],
			[
				37,
				65
			],
			[
				42,
				-6
			],
			[
				9,
				-13
			]
		],
		[
			[
				9228,
				16135
			],
			[
				17,
				-516
			],
			[
				-172,
				-351
			],
			[
				-423,
				228
			]
		],
		[
			[
				8650,
				15496
			],
			[
				-69,
				-104
			]
		],
		[
			[
				8581,
				15392
			],
			[
				-303,
				-208
			],
			[
				-125,
				-408
			]
		],
		[
			[
				7961,
				15461
			],
			[
				25,
				-83
			],
			[
				-93,
				39
			],
			[
				68,
				44
			]
		],
		[
			[
				8008,
				15609
			],
			[
				-4,
				18
			],
			[
				27,
				-4
			],
			[
				-23,
				-14
			]
		],
		[
			[
				8085,
				16167
			],
			[
				-97,
				13
			],
			[
				-70,
				-14
			],
			[
				-51,
				-41
			],
			[
				-31,
				42
			],
			[
				14,
				-31
			]
		],
		[
			[
				7877,
				15907
			],
			[
				-50,
				32
			],
			[
				116,
				59
			],
			[
				-89,
				9
			],
			[
				94,
				145
			],
			[
				130,
				-31
			],
			[
				-2,
				-111
			],
			[
				-199,
				-103
			]
		],
		[
			[
				8431,
				16080
			],
			[
				-4,
				-34
			],
			[
				-28,
				4
			],
			[
				32,
				30
			]
		],
		[
			[
				7870,
				15861
			],
			[
				21,
				-29
			],
			[
				-91,
				-4
			],
			[
				70,
				33
			]
		],
		[
			[
				5836,
				15265
			],
			[
				-70,
				-26
			],
			[
				-39,
				66
			],
			[
				-24,
				-78
			],
			[
				77,
				-31
			],
			[
				-191,
				-149
			],
			[
				129,
				334
			]
		],
		[
			[
				5718,
				15381
			],
			[
				33,
				48
			],
			[
				35,
				8
			],
			[
				-8,
				51
			],
			[
				39,
				-5
			],
			[
				12,
				-15
			],
			[
				21,
				3
			],
			[
				-37,
				-68
			],
			[
				19,
				8
			],
			[
				-74,
				-52
			],
			[
				34,
				-7
			],
			[
				36,
				34
			],
			[
				8,
				-121
			],
			[
				0,
				0
			]
		],
		[
			[
				6219,
				15450
			],
			[
				-66,
				-8
			],
			[
				-32,
				88
			],
			[
				-71,
				-120
			],
			[
				88,
				186
			],
			[
				-83,
				-56
			],
			[
				-7,
				91
			],
			[
				126,
				48
			],
			[
				-106,
				13
			],
			[
				121,
				99
			],
			[
				111,
				-101
			],
			[
				-68,
				68
			],
			[
				165,
				83
			],
			[
				25,
				-90
			],
			[
				-88,
				13
			],
			[
				23,
				-51
			],
			[
				102,
				41
			],
			[
				61,
				-43
			],
			[
				-107,
				-108
			],
			[
				-126,
				8
			],
			[
				20,
				-110
			],
			[
				-53,
				-6
			],
			[
				-28,
				55
			],
			[
				-7,
				-100
			]
		],
		[
			[
				6335,
				15832
			],
			[
				-4,
				-7
			],
			[
				-4,
				-2
			],
			[
				-9,
				-4
			],
			[
				-8,
				1
			],
			[
				-5,
				3
			],
			[
				-5,
				3
			],
			[
				0,
				2
			],
			[
				2,
				1
			],
			[
				7,
				3
			],
			[
				5,
				-2
			],
			[
				9,
				1
			],
			[
				3,
				6
			],
			[
				6,
				6
			],
			[
				4,
				-6
			],
			[
				-1,
				-5
			]
		],
		[
			[
				7036,
				15814
			],
			[
				-136,
				-100
			],
			[
				50,
				102
			],
			[
				-63,
				49
			],
			[
				-29,
				-190
			],
			[
				-313,
				-98
			],
			[
				6,
				95
			],
			[
				116,
				50
			],
			[
				-77,
				-9
			],
			[
				42,
				125
			],
			[
				48,
				-50
			],
			[
				68,
				33
			],
			[
				-58,
				97
			],
			[
				105,
				-22
			]
		],
		[
			[
				6910,
				15652
			],
			[
				64,
				-15
			],
			[
				-61,
				-33
			],
			[
				-3,
				48
			]
		],
		[
			[
				7257,
				15856
			],
			[
				-95,
				-82
			],
			[
				-86,
				11
			],
			[
				37,
				46
			]
		],
		[
			[
				6951,
				15680
			],
			[
				49,
				93
			],
			[
				60,
				-25
			],
			[
				-109,
				-68
			]
		],
		[
			[
				6542,
				15707
			],
			[
				-82,
				133
			],
			[
				131,
				-86
			],
			[
				-49,
				-47
			]
		],
		[
			[
				6870,
				15549
			],
			[
				-15,
				25
			],
			[
				32,
				-2
			],
			[
				-17,
				-23
			]
		],
		[
			[
				7121,
				15733
			],
			[
				-48,
				2
			],
			[
				52,
				38
			],
			[
				31,
				-14
			],
			[
				-35,
				-26
			]
		],
		[
			[
				5980,
				15356
			],
			[
				-82,
				-43
			],
			[
				-25,
				99
			],
			[
				-16,
				-89
			],
			[
				24,
				155
			],
			[
				73,
				-52
			],
			[
				-15,
				149
			],
			[
				82,
				-72
			],
			[
				-41,
				-147
			]
		],
		[
			[
				5120,
				14574
			],
			[
				-36,
				0
			],
			[
				21,
				30
			],
			[
				15,
				-30
			]
		],
		[
			[
				5002,
				14500
			],
			[
				-13,
				-32
			],
			[
				-13,
				2
			],
			[
				-8,
				8
			],
			[
				16,
				19
			],
			[
				8,
				6
			],
			[
				10,
				-3
			]
		],
		[
			[
				5532,
				14845
			],
			[
				-16,
				-89
			],
			[
				-31,
				50
			],
			[
				-53,
				-52
			],
			[
				19,
				48
			],
			[
				81,
				43
			]
		],
		[
			[
				2925,
				8793
			],
			[
				-31,
				-18
			],
			[
				25,
				34
			],
			[
				6,
				-16
			]
		],
		[
			[
				3047,
				9174
			],
			[
				-21,
				-19
			],
			[
				6,
				33
			],
			[
				15,
				-14
			]
		],
		[
			[
				3110,
				9272
			],
			[
				-29,
				-16
			],
			[
				8,
				24
			],
			[
				21,
				-8
			]
		],
		[
			[
				2631,
				8970
			],
			[
				-18,
				-17
			],
			[
				-11,
				10
			],
			[
				1,
				7
			],
			[
				18,
				10
			],
			[
				10,
				-4
			],
			[
				0,
				-6
			]
		],
		[
			[
				2912,
				8852
			],
			[
				-45,
				-12
			],
			[
				39,
				27
			],
			[
				6,
				-15
			]
		],
		[
			[
				2768,
				8874
			],
			[
				-43,
				-3
			],
			[
				57,
				23
			],
			[
				-14,
				-20
			]
		],
		[
			[
				2759,
				9006
			],
			[
				-15,
				-40
			],
			[
				-8,
				0
			],
			[
				-6,
				-9
			],
			[
				-9,
				5
			],
			[
				4,
				12
			],
			[
				13,
				10
			],
			[
				-1,
				12
			],
			[
				22,
				10
			]
		],
		[
			[
				2828,
				8723
			],
			[
				-212,
				-28
			],
			[
				73,
				29
			],
			[
				-131,
				-22
			],
			[
				-50,
				-17
			],
			[
				-20,
				28
			],
			[
				192,
				47
			],
			[
				25,
				7
			],
			[
				-21,
				1
			],
			[
				127,
				80
			],
			[
				3,
				9
			],
			[
				14,
				48
			],
			[
				9,
				-28
			],
			[
				22,
				23
			],
			[
				-1,
				-56
			],
			[
				-19,
				-7
			],
			[
				35,
				-22
			],
			[
				-21,
				-76
			],
			[
				-25,
				-16
			]
		],
		[
			[
				2753,
				8838
			],
			[
				54,
				68
			],
			[
				-4,
				-54
			],
			[
				-50,
				-14
			]
		],
		[
			[
				3016,
				8681
			],
			[
				85,
				-20
			],
			[
				-37,
				-37
			],
			[
				-71,
				-8
			],
			[
				23,
				65
			]
		],
		[
			[
				2573,
				8576
			],
			[
				-5,
				-36
			],
			[
				-16,
				30
			],
			[
				21,
				6
			]
		],
		[
			[
				2526,
				8340
			],
			[
				-28,
				22
			],
			[
				31,
				-1
			],
			[
				-3,
				-21
			]
		],
		[
			[
				3056,
				8702
			],
			[
				-50,
				-4
			],
			[
				22,
				21
			],
			[
				28,
				-17
			]
		],
		[
			[
				2705,
				8369
			],
			[
				-67,
				-42
			],
			[
				-82,
				6
			],
			[
				-5,
				35
			],
			[
				-40,
				1
			],
			[
				23,
				71
			],
			[
				-31,
				-23
			],
			[
				74,
				89
			],
			[
				167,
				37
			],
			[
				52,
				-15
			],
			[
				-78,
				42
			],
			[
				-43,
				14
			],
			[
				129,
				54
			],
			[
				87,
				7
			],
			[
				-14,
				-28
			],
			[
				15,
				-10
			],
			[
				33,
				20
			],
			[
				-29,
				7
			],
			[
				25,
				29
			],
			[
				58,
				10
			],
			[
				-32,
				-51
			],
			[
				28,
				-7
			],
			[
				-7,
				-53
			],
			[
				45,
				33
			],
			[
				56,
				-22
			],
			[
				15,
				-13
			],
			[
				-14,
				-37
			],
			[
				38,
				28
			],
			[
				-8,
				-41
			],
			[
				-105,
				-63
			],
			[
				-64,
				-22
			],
			[
				-75,
				-13
			],
			[
				-32,
				-13
			],
			[
				-112,
				-25
			],
			[
				-7,
				-5
			]
		],
		[
			[
				2848,
				8685
			],
			[
				40,
				-10
			],
			[
				-90,
				-26
			],
			[
				-40,
				-15
			],
			[
				8,
				26
			],
			[
				62,
				12
			],
			[
				24,
				-2
			],
			[
				-20,
				11
			],
			[
				16,
				4
			]
		],
		[
			[
				2692,
				8570
			],
			[
				32,
				-18
			],
			[
				-54,
				-15
			],
			[
				-30,
				10
			],
			[
				52,
				23
			]
		],
		[
			[
				7773,
				16466
			],
			[
				-153,
				-184
			],
			[
				-25,
				-155
			],
			[
				44,
				132
			],
			[
				131,
				87
			],
			[
				59,
				-58
			],
			[
				-9,
				168
			],
			[
				153,
				-56
			],
			[
				-143,
				171
			],
			[
				108,
				63
			]
		],
		[
			[
				7938,
				16634
			],
			[
				69,
				-47
			],
			[
				-47,
				133
			],
			[
				148,
				-148
			],
			[
				72,
				24
			],
			[
				6,
				-256
			],
			[
				-101,
				-173
			]
		],
		[
			[
				8168,
				16815
			],
			[
				-73,
				52
			],
			[
				61,
				26
			],
			[
				12,
				-78
			]
		],
		[
			[
				8180,
				16798
			],
			[
				33,
				-115
			],
			[
				-121,
				-20
			],
			[
				-141,
				138
			],
			[
				229,
				-3
			]
		],
		[
			[
				8119,
				16906
			],
			[
				-25,
				7
			],
			[
				33,
				6
			],
			[
				-8,
				-13
			]
		],
		[
			[
				8252,
				16635
			],
			[
				-16,
				4
			],
			[
				38,
				13
			],
			[
				-22,
				-17
			]
		],
		[
			[
				8246,
				16662
			],
			[
				-4,
				26
			],
			[
				24,
				-5
			],
			[
				-20,
				-21
			]
		],
		[
			[
				8259,
				16751
			],
			[
				-32,
				-8
			],
			[
				7,
				42
			],
			[
				43,
				5
			],
			[
				16,
				-12
			],
			[
				-34,
				-27
			]
		],
		[
			[
				8169,
				16140
			],
			[
				24,
				158
			],
			[
				292,
				111
			],
			[
				91,
				-111
			],
			[
				-50,
				67
			],
			[
				59,
				52
			]
		],
		[
			[
				8585,
				16417
			],
			[
				0,
				0
			],
			[
				21,
				8
			],
			[
				16,
				8
			],
			[
				13,
				5
			],
			[
				22,
				1
			],
			[
				5,
				-14
			],
			[
				18,
				2
			],
			[
				11,
				-8
			],
			[
				40,
				10
			],
			[
				12,
				-11
			],
			[
				10,
				-18
			],
			[
				1,
				-13
			],
			[
				-6,
				-9
			],
			[
				9,
				-18
			],
			[
				18,
				-4
			],
			[
				21,
				-5
			],
			[
				25,
				0
			],
			[
				13,
				9
			],
			[
				1,
				1
			],
			[
				23,
				1
			],
			[
				55,
				-24
			],
			[
				12,
				8
			],
			[
				-16,
				15
			],
			[
				-21,
				7
			],
			[
				-18,
				7
			],
			[
				-19,
				3
			],
			[
				-13,
				-1
			],
			[
				-10,
				-7
			],
			[
				-1,
				0
			],
			[
				-41,
				14
			],
			[
				-8,
				18
			],
			[
				-1,
				2
			],
			[
				1,
				6
			],
			[
				2,
				14
			],
			[
				-1,
				3
			],
			[
				-5,
				10
			],
			[
				-21,
				13
			],
			[
				-29,
				7
			],
			[
				-15,
				-11
			],
			[
				-32,
				-6
			],
			[
				-6,
				12
			],
			[
				-40,
				17
			],
			[
				4,
				24
			],
			[
				36,
				13
			],
			[
				53,
				35
			],
			[
				21,
				21
			],
			[
				27,
				4
			]
		],
		[
			[
				8772,
				16566
			],
			[
				236,
				-107
			],
			[
				-138,
				89
			]
		],
		[
			[
				8870,
				16548
			],
			[
				-88,
				36
			],
			[
				100,
				93
			],
			[
				157,
				-31
			],
			[
				-89,
				94
			],
			[
				-186,
				-41
			]
		],
		[
			[
				7794,
				16640
			],
			[
				-45,
				-66
			],
			[
				32,
				76
			],
			[
				13,
				-10
			]
		],
		[
			[
				7836,
				16473
			],
			[
				-15,
				50
			],
			[
				65,
				-69
			],
			[
				-50,
				19
			]
		],
		[
			[
				8572,
				16479
			],
			[
				-226,
				-56
			],
			[
				129,
				218
			],
			[
				97,
				-162
			]
		],
		[
			[
				8604,
				16532
			],
			[
				-67,
				198
			],
			[
				117,
				-104
			],
			[
				-56,
				102
			],
			[
				116,
				-4
			],
			[
				75,
				-71
			],
			[
				-185,
				-121
			]
		],
		[
			[
				1407,
				6881
			],
			[
				-101,
				-62
			]
		],
		[
			[
				1306,
				6819
			],
			[
				-106,
				-20
			],
			[
				-30,
				26
			],
			[
				-24,
				26
			],
			[
				-45,
				-7
			],
			[
				-6,
				20
			],
			[
				133,
				35
			]
		],
		[
			[
				1228,
				6899
			],
			[
				0,
				0
			],
			[
				10,
				1
			],
			[
				16,
				17
			],
			[
				5,
				-7
			],
			[
				16,
				-2
			],
			[
				0,
				7
			],
			[
				11,
				8
			],
			[
				0,
				-8
			],
			[
				12,
				-9
			],
			[
				22,
				-2
			],
			[
				14,
				10
			],
			[
				8,
				-12
			],
			[
				9,
				6
			],
			[
				0,
				0
			],
			[
				8,
				-1
			],
			[
				0,
				-10
			],
			[
				10,
				-13
			],
			[
				10,
				-3
			],
			[
				11,
				5
			],
			[
				-7,
				8
			],
			[
				37,
				3
			],
			[
				-5,
				10
			],
			[
				-21,
				4
			],
			[
				-14,
				3
			],
			[
				-23,
				1
			],
			[
				-6,
				1
			],
			[
				-11,
				12
			],
			[
				10,
				7
			],
			[
				5,
				3
			],
			[
				-5,
				3
			],
			[
				-5,
				4
			],
			[
				-55,
				-13
			],
			[
				-3,
				3
			],
			[
				-34,
				-5
			],
			[
				-5,
				5
			],
			[
				18,
				10
			],
			[
				19,
				5
			]
		],
		[
			[
				1285,
				6950
			],
			[
				44,
				8
			],
			[
				-226,
				-4
			],
			[
				0,
				80
			],
			[
				125,
				49
			],
			[
				15,
				-70
			],
			[
				-2,
				71
			],
			[
				76,
				17
			],
			[
				30,
				-105
			],
			[
				49,
				124
			]
		],
		[
			[
				1030,
				7085
			],
			[
				20,
				36
			],
			[
				28,
				-53
			],
			[
				-48,
				17
			]
		],
		[
			[
				1045,
				7191
			],
			[
				70,
				-83
			],
			[
				-41,
				31
			],
			[
				-29,
				52
			]
		],
		[
			[
				1116,
				7200
			],
			[
				49,
				-46
			],
			[
				-18,
				-13
			],
			[
				-61,
				65
			],
			[
				30,
				-6
			]
		],
		[
			[
				1157,
				7214
			],
			[
				0,
				13
			],
			[
				63,
				3
			],
			[
				-14,
				-34
			],
			[
				-49,
				18
			]
		],
		[
			[
				1042,
				6896
			],
			[
				193,
				42
			],
			[
				-50,
				-40
			],
			[
				-143,
				-2
			]
		],
		[
			[
				1039,
				6845
			],
			[
				-53,
				-1
			],
			[
				20,
				20
			],
			[
				33,
				-19
			]
		],
		[
			[
				1159,
				6811
			],
			[
				-11,
				-2
			],
			[
				-9,
				0
			],
			[
				-2,
				4
			],
			[
				-6,
				7
			],
			[
				-13,
				9
			],
			[
				15,
				1
			],
			[
				20,
				-6
			],
			[
				3,
				-2
			],
			[
				2,
				-5
			],
			[
				1,
				-6
			]
		],
		[
			[
				1054,
				6865
			],
			[
				-39,
				-3
			],
			[
				-3,
				7
			],
			[
				5,
				3
			],
			[
				16,
				4
			],
			[
				17,
				4
			],
			[
				5,
				1
			],
			[
				44,
				2
			],
			[
				9,
				-5
			],
			[
				-2,
				-7
			],
			[
				-5,
				-2
			],
			[
				-7,
				3
			],
			[
				-15,
				-5
			],
			[
				-28,
				-8
			],
			[
				3,
				6
			]
		],
		[
			[
				1217,
				7286
			],
			[
				17,
				17
			],
			[
				-18,
				19
			],
			[
				37,
				21
			],
			[
				-5,
				-84
			],
			[
				-27,
				10
			],
			[
				-4,
				17
			]
		],
		[
			[
				882,
				6858
			],
			[
				32,
				28
			],
			[
				43,
				-20
			],
			[
				-75,
				-8
			]
		],
		[
			[
				973,
				6934
			],
			[
				-17,
				-29
			],
			[
				0,
				22
			],
			[
				17,
				7
			]
		],
		[
			[
				1022,
				6910
			],
			[
				-26,
				10
			],
			[
				11,
				34
			],
			[
				15,
				-44
			]
		],
		[
			[
				1017,
				7042
			],
			[
				1,
				-85
			],
			[
				-84,
				31
			],
			[
				83,
				54
			]
		],
		[
			[
				1179,
				6786
			],
			[
				-136,
				-38
			],
			[
				-75,
				69
			],
			[
				123,
				2
			],
			[
				88,
				-33
			]
		],
		[
			[
				1332,
				6924
			],
			[
				-16,
				-4
			],
			[
				-10,
				3
			],
			[
				0,
				6
			],
			[
				6,
				2
			],
			[
				10,
				0
			],
			[
				5,
				-1
			],
			[
				5,
				-1
			],
			[
				1,
				-2
			],
			[
				-1,
				-3
			]
		],
		[
			[
				9692,
				18421
			],
			[
				-81,
				-69
			],
			[
				-11,
				126
			]
		],
		[
			[
				9600,
				18478
			],
			[
				40,
				78
			],
			[
				60,
				-99
			],
			[
				62,
				91
			],
			[
				53,
				-62
			],
			[
				-123,
				-65
			]
		],
		[
			[
				9629,
				17248
			],
			[
				-24,
				87
			],
			[
				225,
				-52
			],
			[
				-383,
				238
			],
			[
				34,
				112
			]
		],
		[
			[
				9481,
				17633
			],
			[
				145,
				34
			],
			[
				67,
				22
			],
			[
				33,
				1
			],
			[
				1,
				-112
			],
			[
				24,
				17
			],
			[
				9,
				-42
			]
		],
		[
			[
				9760,
				17553
			],
			[
				127,
				-178
			],
			[
				159,
				-19
			],
			[
				-44,
				-169
			],
			[
				190,
				-18
			],
			[
				-110,
				248
			],
			[
				-179,
				-2
			],
			[
				-81,
				183
			]
		],
		[
			[
				9822,
				17598
			],
			[
				57,
				80
			],
			[
				118,
				-40
			],
			[
				-55,
				80
			],
			[
				-113,
				-66
			],
			[
				-43,
				47
			],
			[
				106,
				267
			],
			[
				393,
				125
			],
			[
				2,
				-505
			],
			[
				-164,
				-149
			],
			[
				156,
				49
			],
			[
				51,
				285
			],
			[
				210,
				-37
			]
		],
		[
			[
				9835,
				17939
			],
			[
				-37,
				-106
			],
			[
				-38,
				61
			],
			[
				75,
				45
			]
		],
		[
			[
				9550,
				18140
			],
			[
				-80,
				-43
			],
			[
				14,
				66
			],
			[
				66,
				-23
			]
		],
		[
			[
				10055,
				18098
			],
			[
				-163,
				-53
			],
			[
				-71,
				82
			],
			[
				-136,
				91
			],
			[
				-61,
				34
			],
			[
				23,
				62
			],
			[
				74,
				-38
			],
			[
				40,
				46
			],
			[
				-39,
				-2
			],
			[
				-28,
				40
			]
		],
		[
			[
				9694,
				18360
			],
			[
				128,
				73
			],
			[
				55,
				-54
			],
			[
				-35,
				95
			],
			[
				108,
				34
			],
			[
				83,
				-7
			],
			[
				38,
				-146
			],
			[
				85,
				98
			],
			[
				30,
				-106
			],
			[
				70,
				51
			],
			[
				25,
				-62
			],
			[
				-130,
				-39
			],
			[
				-96,
				-199
			]
		],
		[
			[
				9704,
				17836
			],
			[
				-37,
				21
			],
			[
				49,
				9
			],
			[
				-12,
				-30
			]
		],
		[
			[
				9650,
				17678
			],
			[
				-25,
				-4
			],
			[
				-6,
				8
			],
			[
				9,
				6
			],
			[
				20,
				2
			],
			[
				9,
				-5
			],
			[
				-7,
				-7
			]
		],
		[
			[
				9083,
				17794
			],
			[
				12,
				-13
			],
			[
				-1,
				-5
			],
			[
				-6,
				-1
			],
			[
				-12,
				7
			],
			[
				-8,
				2
			],
			[
				-5,
				5
			],
			[
				2,
				5
			],
			[
				4,
				-2
			],
			[
				3,
				2
			],
			[
				3,
				6
			],
			[
				8,
				-1
			],
			[
				0,
				-5
			]
		],
		[
			[
				9161,
				17809
			],
			[
				1,
				-2
			],
			[
				4,
				1
			],
			[
				2,
				3
			],
			[
				5,
				-5
			],
			[
				0,
				-6
			],
			[
				-3,
				-1
			],
			[
				-1,
				-1
			],
			[
				-6,
				1
			],
			[
				-7,
				5
			],
			[
				-1,
				3
			],
			[
				-10,
				3
			],
			[
				-3,
				3
			],
			[
				3,
				4
			],
			[
				8,
				-1
			],
			[
				2,
				-4
			],
			[
				6,
				-3
			]
		],
		[
			[
				9145,
				17824
			],
			[
				-19,
				-16
			],
			[
				-24,
				21
			],
			[
				43,
				-5
			]
		],
		[
			[
				9208,
				17959
			],
			[
				-30,
				16
			],
			[
				33,
				-7
			],
			[
				-3,
				-9
			]
		],
		[
			[
				9244,
				18000
			],
			[
				-14,
				0
			],
			[
				-4,
				9
			],
			[
				-3,
				14
			],
			[
				7,
				8
			],
			[
				23,
				-12
			],
			[
				-9,
				-19
			]
		],
		[
			[
				9265,
				17883
			],
			[
				-18,
				-1
			],
			[
				-8,
				12
			],
			[
				-6,
				12
			],
			[
				1,
				9
			],
			[
				6,
				5
			],
			[
				9,
				-2
			],
			[
				3,
				-15
			],
			[
				14,
				-14
			],
			[
				-1,
				-6
			]
		],
		[
			[
				9521,
				18410
			],
			[
				-23,
				1
			],
			[
				2,
				42
			],
			[
				40,
				-17
			],
			[
				-19,
				-26
			]
		],
		[
			[
				9659,
				17858
			],
			[
				-23,
				-47
			],
			[
				57,
				-1
			],
			[
				20,
				-53
			],
			[
				-72,
				-55
			],
			[
				-62,
				19
			],
			[
				-42,
				-34
			],
			[
				-267,
				-45
			],
			[
				-70,
				46
			],
			[
				-52,
				22
			],
			[
				28,
				79
			],
			[
				36,
				-2
			],
			[
				45,
				24
			],
			[
				77,
				-43
			],
			[
				0,
				-30
			],
			[
				77,
				81
			],
			[
				-81,
				-21
			],
			[
				-64,
				129
			],
			[
				121,
				-25
			],
			[
				174,
				0
			],
			[
				-119,
				30
			],
			[
				-81,
				2
			],
			[
				-12,
				96
			],
			[
				52,
				26
			],
			[
				12,
				-29
			],
			[
				50,
				5
			],
			[
				17,
				-59
			],
			[
				24,
				81
			],
			[
				84,
				9
			],
			[
				-10,
				-57
			],
			[
				8,
				-112
			],
			[
				67,
				0
			],
			[
				-48,
				26
			],
			[
				32,
				107
			],
			[
				37,
				40
			],
			[
				-58,
				23
			],
			[
				-36,
				72
			],
			[
				44,
				29
			],
			[
				36,
				-30
			],
			[
				0,
				34
			],
			[
				48,
				-43
			],
			[
				-20,
				-25
			],
			[
				45,
				5
			],
			[
				42,
				-27
			],
			[
				27,
				8
			],
			[
				56,
				-105
			],
			[
				-62,
				-49
			],
			[
				-67,
				-68
			],
			[
				-75,
				-17
			],
			[
				5,
				-16
			]
		],
		[
			[
				9257,
				17867
			],
			[
				-25,
				-37
			],
			[
				-45,
				8
			],
			[
				48,
				25
			],
			[
				-43,
				14
			],
			[
				65,
				-10
			]
		],
		[
			[
				9293,
				18010
			],
			[
				21,
				-53
			],
			[
				-30,
				-6
			],
			[
				-33,
				42
			],
			[
				42,
				17
			]
		],
		[
			[
				9906,
				18538
			],
			[
				-95,
				72
			],
			[
				127,
				61
			],
			[
				-52,
				70
			],
			[
				77,
				28
			],
			[
				30,
				-81
			],
			[
				-87,
				-150
			]
		],
		[
			[
				10341,
				18625
			],
			[
				55,
				70
			],
			[
				87,
				-130
			],
			[
				109,
				-28
			],
			[
				-106,
				-86
			],
			[
				-175,
				26
			],
			[
				-141,
				247
			],
			[
				96,
				78
			],
			[
				75,
				-177
			]
		],
		[
			[
				10657,
				18700
			],
			[
				1,
				129
			],
			[
				56,
				-55
			],
			[
				-57,
				-74
			]
		],
		[
			[
				10320,
				18148
			],
			[
				-215,
				-23
			],
			[
				252,
				257
			],
			[
				73,
				-52
			],
			[
				-110,
				-182
			]
		],
		[
			[
				10099,
				18626
			],
			[
				122,
				-91
			],
			[
				-151,
				8
			],
			[
				29,
				83
			]
		],
		[
			[
				9676,
				18604
			],
			[
				32,
				60
			],
			[
				40,
				-76
			],
			[
				-72,
				16
			]
		],
		[
			[
				10313,
				18745
			],
			[
				36,
				28
			],
			[
				-13,
				-58
			],
			[
				-23,
				30
			]
		],
		[
			[
				10088,
				18456
			],
			[
				-21,
				21
			],
			[
				12,
				19
			],
			[
				9,
				-40
			]
		],
		[
			[
				9814,
				18621
			],
			[
				-20,
				36
			],
			[
				26,
				0
			],
			[
				-6,
				-36
			]
		],
		[
			[
				9825,
				18562
			],
			[
				23,
				-46
			],
			[
				-37,
				-2
			],
			[
				-4,
				55
			],
			[
				18,
				-7
			]
		],
		[
			[
				10498,
				18382
			],
			[
				-48,
				-17
			],
			[
				-35,
				39
			],
			[
				83,
				-22
			]
		],
		[
			[
				9688,
				18572
			],
			[
				32,
				-2
			],
			[
				-18,
				-77
			],
			[
				-14,
				79
			]
		],
		[
			[
				10471,
				18628
			],
			[
				40,
				10
			],
			[
				44,
				-22
			],
			[
				-17,
				-26
			],
			[
				-67,
				38
			]
		],
		[
			[
				1229,
				6651
			],
			[
				-13,
				95
			],
			[
				90,
				-2
			],
			[
				25,
				-89
			],
			[
				-28,
				119
			],
			[
				113,
				62
			],
			[
				113,
				-39
			]
		],
		[
			[
				1529,
				6797
			],
			[
				9,
				-92
			]
		],
		[
			[
				1538,
				6705
			],
			[
				51,
				-116
			],
			[
				29,
				-14
			],
			[
				4,
				-160
			],
			[
				-101,
				-136
			],
			[
				49,
				29
			],
			[
				48,
				-33
			],
			[
				61,
				15
			],
			[
				29,
				31
			],
			[
				46,
				-21
			],
			[
				-61,
				34
			],
			[
				-33,
				-40
			],
			[
				-74,
				29
			],
			[
				56,
				106
			],
			[
				-3,
				41
			]
		],
		[
			[
				1639,
				6470
			],
			[
				5,
				101
			],
			[
				124,
				-40
			],
			[
				64,
				53
			],
			[
				75,
				-81
			],
			[
				-59,
				91
			],
			[
				-135,
				2
			]
		],
		[
			[
				1713,
				6596
			],
			[
				-131,
				72
			]
		],
		[
			[
				1582,
				6668
			],
			[
				-34,
				149
			]
		],
		[
			[
				1548,
				6817
			],
			[
				-141,
				64
			]
		],
		[
			[
				580,
				6164
			],
			[
				21,
				98
			],
			[
				69,
				-18
			],
			[
				-127,
				58
			],
			[
				17,
				135
			],
			[
				121,
				-26
			],
			[
				58,
				-134
			],
			[
				-37,
				135
			],
			[
				119,
				40
			]
		],
		[
			[
				821,
				6452
			],
			[
				73,
				-65
			],
			[
				-64,
				-234
			],
			[
				87,
				209
			],
			[
				73,
				-78
			],
			[
				-39,
				-69
			],
			[
				100,
				60
			],
			[
				92,
				-42
			],
			[
				-118,
				55
			],
			[
				-129,
				204
			]
		],
		[
			[
				896,
				6492
			],
			[
				114,
				-59
			],
			[
				-91,
				126
			],
			[
				248,
				156
			],
			[
				142,
				-407
			],
			[
				0,
				133
			],
			[
				66,
				2
			],
			[
				-84,
				17
			],
			[
				-62,
				191
			]
		],
		[
			[
				810,
				6582
			],
			[
				-34,
				-117
			]
		],
		[
			[
				776,
				6465
			],
			[
				-139,
				-25
			],
			[
				-24,
				63
			],
			[
				74,
				-17
			],
			[
				-80,
				38
			],
			[
				15,
				61
			]
		],
		[
			[
				622,
				6585
			],
			[
				90,
				23
			],
			[
				46,
				1
			],
			[
				-12,
				-34
			],
			[
				57,
				11
			]
		],
		[
			[
				803,
				6586
			],
			[
				0,
				0
			],
			[
				7,
				-1
			],
			[
				0,
				-3
			],
			[
				0,
				0
			]
		],
		[
			[
				601,
				6678
			],
			[
				25,
				40
			],
			[
				32,
				-44
			],
			[
				-57,
				4
			]
		],
		[
			[
				776,
				6598
			],
			[
				-4,
				0
			],
			[
				1,
				1
			]
		],
		[
			[
				773,
				6599
			],
			[
				8,
				39
			],
			[
				-3,
				9
			],
			[
				33,
				7
			],
			[
				7,
				-28
			],
			[
				-42,
				-28
			]
		],
		[
			[
				595,
				6645
			],
			[
				-22,
				-1
			],
			[
				10,
				23
			],
			[
				12,
				-22
			]
		],
		[
			[
				676,
				6725
			],
			[
				29,
				-22
			],
			[
				-41,
				8
			],
			[
				12,
				14
			]
		],
		[
			[
				693,
				6633
			],
			[
				-36,
				26
			],
			[
				44,
				16
			],
			[
				-8,
				-42
			]
		],
		[
			[
				663,
				6745
			],
			[
				-20,
				33
			],
			[
				53,
				-24
			],
			[
				-33,
				-9
			]
		],
		[
			[
				752,
				6706
			],
			[
				-3,
				-65
			],
			[
				-48,
				6
			],
			[
				8,
				51
			],
			[
				43,
				8
			]
		],
		[
			[
				573,
				6550
			],
			[
				-17,
				-43
			],
			[
				-45,
				32
			],
			[
				62,
				11
			]
		],
		[
			[
				477,
				6466
			],
			[
				30,
				22
			],
			[
				25,
				-39
			],
			[
				-55,
				17
			]
		],
		[
			[
				898,
				6794
			],
			[
				107,
				-111
			],
			[
				-113,
				-112
			]
		],
		[
			[
				892,
				6571
			],
			[
				-36,
				-43
			],
			[
				-56,
				-1
			],
			[
				39,
				36
			],
			[
				-13,
				46
			],
			[
				-6,
				61
			],
			[
				-13,
				-6
			],
			[
				1,
				63
			],
			[
				48,
				61
			],
			[
				42,
				6
			]
		],
		[
			[
				845,
				6500
			],
			[
				-15,
				4
			],
			[
				38,
				21
			],
			[
				-23,
				-25
			]
		],
		[
			[
				2438,
				8243
			],
			[
				-54,
				-68
			],
			[
				-227,
				55
			],
			[
				62,
				117
			],
			[
				176,
				10
			],
			[
				43,
				-114
			]
		],
		[
			[
				2348,
				8112
			],
			[
				-32,
				-9
			],
			[
				-1,
				5
			],
			[
				10,
				14
			],
			[
				11,
				8
			],
			[
				19,
				3
			],
			[
				4,
				4
			],
			[
				4,
				1
			],
			[
				10,
				2
			],
			[
				-5,
				-6
			],
			[
				-14,
				-18
			],
			[
				-6,
				-4
			]
		],
		[
			[
				2209,
				8177
			],
			[
				-17,
				33
			],
			[
				46,
				-14
			],
			[
				-29,
				-19
			]
		],
		[
			[
				2333,
				8163
			],
			[
				1,
				-14
			],
			[
				0,
				-1
			],
			[
				-8,
				1
			],
			[
				-9,
				-3
			],
			[
				-16,
				-10
			],
			[
				-14,
				4
			],
			[
				-2,
				14
			],
			[
				9,
				-2
			],
			[
				5,
				-3
			],
			[
				4,
				3
			],
			[
				4,
				6
			],
			[
				3,
				4
			],
			[
				0,
				1
			],
			[
				8,
				3
			],
			[
				10,
				-2
			],
			[
				5,
				-1
			]
		],
		[
			[
				2407,
				8144
			],
			[
				40,
				19
			],
			[
				-41,
				-44
			],
			[
				-35,
				-9
			],
			[
				36,
				34
			]
		],
		[
			[
				2511,
				7341
			],
			[
				162,
				-165
			],
			[
				-4,
				82
			],
			[
				-141,
				96
			]
		],
		[
			[
				2528,
				7354
			],
			[
				-99,
				56
			],
			[
				6,
				132
			],
			[
				-140,
				181
			],
			[
				-72,
				-66
			],
			[
				59,
				152
			],
			[
				89,
				25
			],
			[
				-20,
				-91
			],
			[
				175,
				-126
			],
			[
				-24,
				-152
			],
			[
				75,
				13
			]
		],
		[
			[
				2577,
				7478
			],
			[
				74,
				-54
			],
			[
				-70,
				100
			],
			[
				139,
				-98
			]
		],
		[
			[
				2720,
				7426
			],
			[
				54,
				-32
			],
			[
				-191,
				210
			],
			[
				166,
				25
			],
			[
				-134,
				-1
			],
			[
				89,
				76
			],
			[
				-155,
				-79
			],
			[
				-15,
				60
			],
			[
				100,
				20
			],
			[
				-160,
				-2
			]
		],
		[
			[
				2474,
				7703
			],
			[
				-61,
				168
			],
			[
				81,
				-86
			],
			[
				-9,
				115
			],
			[
				181,
				-19
			],
			[
				49,
				-63
			],
			[
				-42,
				98
			],
			[
				147,
				39
			]
		],
		[
			[
				2665,
				7892
			],
			[
				-19,
				-4
			],
			[
				-7,
				7
			],
			[
				0,
				1
			],
			[
				15,
				10
			],
			[
				8,
				3
			],
			[
				4,
				4
			],
			[
				3,
				-2
			],
			[
				2,
				-5
			],
			[
				-2,
				-5
			],
			[
				-2,
				-9
			],
			[
				-2,
				0
			]
		],
		[
			[
				2868,
				7980
			],
			[
				-145,
				-18
			],
			[
				-88,
				135
			],
			[
				237,
				104
			],
			[
				-132,
				69
			],
			[
				75,
				53
			]
		],
		[
			[
				2680,
				8155
			],
			[
				-76,
				39
			],
			[
				80,
				76
			],
			[
				83,
				-61
			],
			[
				-87,
				-54
			]
		],
		[
			[
				2454,
				8023
			],
			[
				65,
				-97
			],
			[
				-81,
				-14
			],
			[
				-31,
				88
			],
			[
				47,
				23
			]
		],
		[
			[
				2266,
				7977
			],
			[
				116,
				59
			],
			[
				44,
				-124
			],
			[
				-161,
				-4
			],
			[
				1,
				69
			]
		],
		[
			[
				2437,
				8024
			],
			[
				-36,
				13
			],
			[
				29,
				17
			],
			[
				7,
				-30
			]
		],
		[
			[
				2257,
				7907
			],
			[
				-9,
				-2
			],
			[
				-16,
				0
			],
			[
				-15,
				7
			],
			[
				-6,
				7
			],
			[
				1,
				5
			],
			[
				5,
				3
			],
			[
				4,
				2
			],
			[
				16,
				1
			],
			[
				8,
				-4
			],
			[
				12,
				-14
			],
			[
				0,
				-4
			],
			[
				0,
				-1
			]
		],
		[
			[
				2659,
				8030
			],
			[
				-28,
				29
			],
			[
				16,
				15
			],
			[
				12,
				-44
			]
		],
		[
			[
				2533,
				8069
			],
			[
				15,
				19
			],
			[
				18,
				-100
			],
			[
				4,
				73
			],
			[
				-10,
				24
			],
			[
				44,
				23
			],
			[
				38,
				-92
			],
			[
				29,
				-1
			],
			[
				22,
				-64
			],
			[
				-71,
				-36
			],
			[
				-77,
				7
			],
			[
				-69,
				82
			],
			[
				14,
				44
			],
			[
				-28,
				30
			],
			[
				43,
				1
			],
			[
				28,
				-10
			]
		],
		[
			[
				2626,
				8159
			],
			[
				-50,
				-25
			],
			[
				-35,
				12
			],
			[
				64,
				37
			],
			[
				21,
				-24
			]
		],
		[
			[
				2091,
				7726
			],
			[
				10,
				75
			],
			[
				127,
				25
			],
			[
				-26,
				-83
			],
			[
				-111,
				-17
			]
		],
		[
			[
				2107,
				7837
			],
			[
				-17,
				33
			],
			[
				31,
				10
			],
			[
				-8,
				-40
			],
			[
				-6,
				-3
			]
		],
		[
			[
				2194,
				7839
			],
			[
				-72,
				6
			],
			[
				65,
				40
			],
			[
				22,
				-41
			],
			[
				-15,
				-5
			]
		],
		[
			[
				1780,
				7677
			],
			[
				34,
				6
			],
			[
				-33,
				-25
			]
		],
		[
			[
				1800,
				7647
			],
			[
				96,
				-39
			],
			[
				12,
				-88
			],
			[
				112,
				45
			]
		],
		[
			[
				2020,
				7565
			],
			[
				135,
				48
			],
			[
				-71,
				-98
			],
			[
				237,
				107
			],
			[
				58,
				-181
			]
		],
		[
			[
				2048,
				7756
			],
			[
				63,
				-73
			],
			[
				-162,
				-108
			],
			[
				-95,
				74
			],
			[
				102,
				118
			],
			[
				58,
				-70
			],
			[
				21,
				127
			],
			[
				34,
				25
			],
			[
				-21,
				-93
			]
		],
		[
			[
				2017,
				7769
			],
			[
				-23,
				7
			],
			[
				22,
				28
			],
			[
				1,
				-35
			]
		],
		[
			[
				2194,
				7631
			],
			[
				-45,
				4
			],
			[
				38,
				33
			],
			[
				23,
				-24
			],
			[
				-16,
				-13
			]
		],
		[
			[
				1396,
				7120
			],
			[
				79,
				23
			],
			[
				77,
				-119
			],
			[
				-2,
				109
			],
			[
				120,
				13
			],
			[
				-42,
				-61
			],
			[
				47,
				11
			],
			[
				33,
				-153
			],
			[
				-8,
				128
			],
			[
				60,
				14
			]
		],
		[
			[
				1760,
				7085
			],
			[
				99,
				-11
			],
			[
				141,
				-168
			],
			[
				-4,
				53
			],
			[
				151,
				68
			],
			[
				-158,
				-35
			],
			[
				-105,
				116
			],
			[
				69,
				7
			],
			[
				27,
				-93
			],
			[
				-25,
				136
			],
			[
				164,
				78
			]
		],
		[
			[
				2119,
				7236
			],
			[
				147,
				48
			],
			[
				131,
				-87
			],
			[
				-87,
				96
			],
			[
				35,
				39
			],
			[
				-274,
				-84
			]
		],
		[
			[
				2071,
				7248
			],
			[
				-220,
				-33
			],
			[
				48,
				12
			],
			[
				-38,
				46
			],
			[
				245,
				83
			],
			[
				-481,
				-105
			],
			[
				-18,
				44
			]
		],
		[
			[
				1607,
				7295
			],
			[
				-4,
				50
			]
		],
		[
			[
				1603,
				7345
			],
			[
				56,
				69
			],
			[
				118,
				-29
			],
			[
				-45,
				59
			],
			[
				-123,
				-25
			],
			[
				-66,
				117
			],
			[
				237,
				141
			]
		],
		[
			[
				1781,
				7658
			],
			[
				19,
				-11
			]
		],
		[
			[
				2379,
				7441
			],
			[
				132,
				-100
			]
		],
		[
			[
				1874,
				7148
			],
			[
				-111,
				11
			],
			[
				53,
				22
			],
			[
				58,
				-33
			]
		],
		[
			[
				1828,
				7254
			],
			[
				-36,
				7
			],
			[
				49,
				7
			],
			[
				-13,
				-14
			]
		],
		[
			[
				1772,
				7231
			],
			[
				-23,
				4
			],
			[
				31,
				16
			],
			[
				12,
				-13
			],
			[
				-20,
				-7
			]
		],
		[
			[
				1555,
				7328
			],
			[
				-100,
				44
			],
			[
				4,
				60
			],
			[
				116,
				24
			],
			[
				-38,
				-71
			],
			[
				18,
				-57
			]
		],
		[
			[
				1429,
				7222
			],
			[
				128,
				70
			],
			[
				13,
				-63
			],
			[
				-173,
				-72
			],
			[
				2,
				111
			],
			[
				30,
				-46
			]
		],
		[
			[
				1537,
				7167
			],
			[
				-8,
				-2
			],
			[
				-6,
				0
			],
			[
				0,
				7
			],
			[
				7,
				6
			],
			[
				6,
				4
			],
			[
				7,
				3
			],
			[
				9,
				3
			],
			[
				6,
				0
			],
			[
				4,
				-1
			],
			[
				3,
				-4
			],
			[
				-8,
				-8
			],
			[
				-6,
				-2
			],
			[
				-7,
				-1
			],
			[
				-7,
				-5
			]
		],
		[
			[
				1287,
				7123
			],
			[
				-5,
				-1
			],
			[
				-3,
				5
			],
			[
				5,
				8
			],
			[
				9,
				9
			],
			[
				6,
				2
			],
			[
				4,
				-1
			],
			[
				5,
				-4
			],
			[
				0,
				-4
			],
			[
				-4,
				-4
			],
			[
				0,
				0
			],
			[
				-2,
				-3
			],
			[
				-7,
				-4
			],
			[
				-7,
				-2
			],
			[
				-1,
				-1
			]
		],
		[
			[
				1383,
				7157
			],
			[
				-67,
				-17
			],
			[
				51,
				75
			],
			[
				16,
				-58
			]
		],
		[
			[
				1705,
				7406
			],
			[
				0,
				14
			],
			[
				5,
				-12
			],
			[
				-5,
				-2
			]
		],
		[
			[
				656,
				4742
			],
			[
				55,
				-34
			],
			[
				-29,
				61
			],
			[
				111,
				43
			],
			[
				4,
				-118
			],
			[
				57,
				121
			],
			[
				193,
				-20
			]
		],
		[
			[
				1047,
				4795
			],
			[
				103,
				-56
			],
			[
				-26,
				-71
			],
			[
				85,
				56
			],
			[
				-4,
				-98
			],
			[
				165,
				261
			],
			[
				141,
				-47
			],
			[
				114,
				-180
			]
		],
		[
			[
				1625,
				4660
			],
			[
				-122,
				-231
			],
			[
				142,
				169
			],
			[
				68,
				-73
			],
			[
				-18,
				-122
			],
			[
				51,
				119
			],
			[
				-100,
				187
			]
		],
		[
			[
				1646,
				4709
			],
			[
				-5,
				67
			],
			[
				137,
				66
			],
			[
				157,
				-73
			],
			[
				-67,
				72
			],
			[
				76,
				54
			]
		],
		[
			[
				1944,
				4895
			],
			[
				153,
				79
			],
			[
				-212,
				-43
			]
		],
		[
			[
				1885,
				4931
			],
			[
				-59,
				145
			],
			[
				186,
				303
			],
			[
				-153,
				-179
			],
			[
				-52,
				36
			],
			[
				44,
				-92
			],
			[
				-70,
				-66
			],
			[
				98,
				-182
			]
		],
		[
			[
				1879,
				4896
			],
			[
				-304,
				-106
			],
			[
				70,
				115
			],
			[
				83,
				15
			],
			[
				-2,
				108
			],
			[
				-121,
				-167
			],
			[
				-70,
				22
			]
		],
		[
			[
				1535,
				4883
			],
			[
				-202,
				72
			]
		],
		[
			[
				1333,
				4955
			],
			[
				25,
				47
			]
		],
		[
			[
				1358,
				5002
			],
			[
				24,
				31
			]
		],
		[
			[
				1382,
				5033
			],
			[
				64,
				227
			],
			[
				-85,
				-220
			]
		],
		[
			[
				1361,
				5040
			],
			[
				-91,
				-3
			],
			[
				45,
				-96
			],
			[
				-50,
				20
			],
			[
				36,
				-133
			],
			[
				-47,
				-35
			],
			[
				-139,
				26
			],
			[
				-30,
				85
			],
			[
				-67,
				-51
			]
		],
		[
			[
				1018,
				4853
			],
			[
				-82,
				8
			],
			[
				46,
				85
			],
			[
				-140,
				-85
			],
			[
				-38,
				75
			],
			[
				-11,
				-75
			],
			[
				-127,
				-12
			],
			[
				-146,
				-124
			]
		],
		[
			[
				628,
				5170
			],
			[
				77,
				9
			],
			[
				-176,
				25
			]
		],
		[
			[
				612,
				5289
			],
			[
				119,
				81
			],
			[
				98,
				-52
			],
			[
				-56,
				63
			]
		],
		[
			[
				773,
				5381
			],
			[
				-40,
				11
			],
			[
				-82,
				-63
			],
			[
				-41,
				-10
			],
			[
				-60,
				7
			],
			[
				16,
				4
			],
			[
				10,
				25
			],
			[
				12,
				18
			],
			[
				-57,
				-6
			],
			[
				-72,
				3
			],
			[
				-24,
				6
			],
			[
				-13,
				0
			]
		],
		[
			[
				422,
				5376
			],
			[
				-35,
				22
			],
			[
				-22,
				19
			],
			[
				-1,
				47
			],
			[
				83,
				-13
			],
			[
				-11,
				9
			],
			[
				81,
				1
			],
			[
				-94,
				33
			],
			[
				-42,
				14
			],
			[
				-14,
				18
			],
			[
				86,
				17
			],
			[
				63,
				-20
			],
			[
				-32,
				-15
			],
			[
				-27,
				14
			],
			[
				34,
				-22
			],
			[
				64,
				2
			],
			[
				1,
				21
			],
			[
				-95,
				27
			],
			[
				-187,
				-31
			],
			[
				-30,
				-15
			],
			[
				9,
				28
			],
			[
				127,
				27
			],
			[
				134,
				28
			],
			[
				16,
				13
			],
			[
				-134,
				-25
			],
			[
				11,
				12
			],
			[
				-87,
				3
			],
			[
				-83,
				-16
			],
			[
				8,
				45
			],
			[
				-22,
				42
			],
			[
				10,
				24
			]
		],
		[
			[
				97,
				5510
			],
			[
				28,
				33
			],
			[
				44,
				-22
			],
			[
				-72,
				-11
			]
		],
		[
			[
				284,
				5484
			],
			[
				42,
				0
			],
			[
				30,
				-37
			],
			[
				-72,
				37
			]
		],
		[
			[
				117,
				5593
			],
			[
				-28,
				11
			],
			[
				26,
				10
			],
			[
				2,
				-21
			]
		],
		[
			[
				322,
				5574
			],
			[
				-14,
				-7
			],
			[
				-9,
				3
			],
			[
				-3,
				8
			],
			[
				1,
				4
			],
			[
				6,
				2
			],
			[
				14,
				-5
			],
			[
				5,
				-5
			]
		],
		[
			[
				87,
				5463
			],
			[
				-25,
				11
			],
			[
				26,
				7
			],
			[
				-1,
				-18
			]
		],
		[
			[
				347,
				5507
			],
			[
				4,
				-11
			],
			[
				-9,
				-1
			],
			[
				-20,
				3
			],
			[
				0,
				6
			],
			[
				4,
				3
			],
			[
				21,
				0
			]
		],
		[
			[
				154,
				5690
			],
			[
				15,
				-63
			],
			[
				-28,
				0
			],
			[
				-16,
				36
			],
			[
				32,
				50
			],
			[
				-3,
				-23
			]
		],
		[
			[
				102,
				5485
			],
			[
				68,
				-1
			],
			[
				-72,
				-8
			],
			[
				4,
				9
			]
		],
		[
			[
				221,
				5382
			],
			[
				-35,
				44
			],
			[
				11,
				11
			],
			[
				43,
				-42
			],
			[
				-19,
				-13
			]
		],
		[
			[
				345,
				5376
			],
			[
				-32,
				-35
			],
			[
				-29,
				13
			],
			[
				9,
				37
			],
			[
				18,
				-4
			],
			[
				34,
				-11
			]
		],
		[
			[
				553,
				5318
			],
			[
				0,
				0
			],
			[
				1,
				0
			],
			[
				2,
				-2
			],
			[
				0,
				0
			]
		],
		[
			[
				233,
				5685
			],
			[
				34,
				91
			],
			[
				50,
				-82
			],
			[
				7,
				58
			],
			[
				32,
				-64
			],
			[
				37,
				33
			],
			[
				-46,
				50
			],
			[
				97,
				30
			],
			[
				-134,
				2
			],
			[
				199,
				103
			],
			[
				-59,
				22
			],
			[
				91,
				92
			],
			[
				235,
				-100
			],
			[
				-97,
				-61
			],
			[
				135,
				52
			]
		],
		[
			[
				814,
				5911
			],
			[
				101,
				5
			],
			[
				-41,
				-180
			],
			[
				63,
				170
			],
			[
				114,
				-121
			],
			[
				-70,
				121
			],
			[
				131,
				4
			]
		],
		[
			[
				1112,
				5910
			],
			[
				145,
				-66
			],
			[
				67,
				47
			],
			[
				24,
				32
			],
			[
				-18,
				22
			],
			[
				116,
				-9
			],
			[
				38,
				-35
			],
			[
				17,
				54
			],
			[
				-85,
				7
			],
			[
				-10,
				32
			],
			[
				-34,
				-21
			],
			[
				-72,
				-26
			],
			[
				-14,
				-57
			],
			[
				-105,
				14
			],
			[
				-37,
				33
			],
			[
				-35,
				-6
			]
		],
		[
			[
				1109,
				5931
			],
			[
				-87,
				-19
			],
			[
				-61,
				45
			],
			[
				-134,
				-4
			],
			[
				-30,
				-15
			],
			[
				-52,
				45
			],
			[
				172,
				13
			],
			[
				-1,
				15
			],
			[
				-127,
				12
			],
			[
				-80,
				-14
			],
			[
				-89,
				18
			],
			[
				-37,
				12
			],
			[
				-16,
				-5
			]
		],
		[
			[
				567,
				6034
			],
			[
				-202,
				-49
			],
			[
				-3,
				139
			],
			[
				37,
				-81
			],
			[
				-12,
				41
			]
		],
		[
			[
				387,
				6084
			],
			[
				24,
				36
			],
			[
				30,
				-52
			],
			[
				39,
				115
			],
			[
				56,
				-9
			],
			[
				-128,
				127
			],
			[
				-84,
				-1
			],
			[
				-13,
				141
			],
			[
				57,
				32
			],
			[
				101,
				-72
			],
			[
				111,
				-237
			]
		],
		[
			[
				341,
				5937
			],
			[
				-147,
				-146
			],
			[
				-17,
				71
			],
			[
				66,
				33
			],
			[
				-123,
				30
			],
			[
				91,
				81
			],
			[
				207,
				-69
			],
			[
				-33,
				-44
			],
			[
				-50,
				-16
			],
			[
				6,
				60
			]
		],
		[
			[
				448,
				5945
			],
			[
				-75,
				18
			],
			[
				99,
				10
			],
			[
				-24,
				-28
			]
		],
		[
			[
				137,
				5797
			],
			[
				-32,
				28
			],
			[
				32,
				29
			],
			[
				37,
				-56
			],
			[
				-33,
				-30
			],
			[
				-4,
				29
			]
		],
		[
			[
				305,
				6026
			],
			[
				-76,
				171
			],
			[
				102,
				-35
			],
			[
				-26,
				-136
			]
		],
		[
			[
				250,
				6015
			],
			[
				46,
				-2
			],
			[
				30,
				-27
			],
			[
				-76,
				29
			]
		],
		[
			[
				463,
				6209
			],
			[
				-4,
				-2
			],
			[
				-9,
				6
			],
			[
				-4,
				1
			],
			[
				-2,
				2
			],
			[
				-2,
				9
			],
			[
				10,
				4
			],
			[
				7,
				-1
			],
			[
				4,
				-3
			],
			[
				0,
				-16
			]
		],
		[
			[
				455,
				6146
			],
			[
				-34,
				-1
			],
			[
				4,
				44
			],
			[
				37,
				-19
			],
			[
				-7,
				-24
			]
		],
		[
			[
				1071,
				1331
			],
			[
				-41,
				15
			],
			[
				-42,
				62
			],
			[
				24,
				64
			],
			[
				42,
				35
			],
			[
				80,
				50
			],
			[
				235,
				81
			],
			[
				-218,
				-53
			],
			[
				-83,
				-41
			],
			[
				-85,
				-107
			],
			[
				-12,
				-14
			],
			[
				-44,
				81
			]
		],
		[
			[
				927,
				1504
			],
			[
				55,
				51
			],
			[
				-130,
				135
			],
			[
				175,
				81
			]
		],
		[
			[
				1027,
				1771
			],
			[
				-83,
				9
			],
			[
				57,
				117
			],
			[
				281,
				146
			],
			[
				-249,
				-84
			],
			[
				-27,
				63
			],
			[
				85,
				16
			]
		],
		[
			[
				1091,
				2038
			],
			[
				16,
				-8
			]
		],
		[
			[
				1107,
				2030
			],
			[
				8,
				0
			]
		],
		[
			[
				1115,
				2030
			],
			[
				-34,
				75
			],
			[
				-34,
				-63
			],
			[
				-50,
				11
			],
			[
				14,
				73
			],
			[
				-28,
				-62
			],
			[
				-42,
				24
			],
			[
				133,
				152
			],
			[
				-3,
				-43
			],
			[
				42,
				135
			],
			[
				202,
				77
			],
			[
				-203,
				-55
			],
			[
				31,
				75
			]
		],
		[
			[
				972,
				2004
			],
			[
				25,
				-55
			],
			[
				-70,
				-32
			]
		],
		[
			[
				927,
				1917
			],
			[
				-46,
				-10
			],
			[
				-6,
				69
			],
			[
				97,
				28
			]
		],
		[
			[
				998,
				1909
			],
			[
				-47,
				-62
			],
			[
				-21,
				3
			],
			[
				-1,
				41
			],
			[
				56,
				25
			],
			[
				13,
				-7
			]
		],
		[
			[
				922,
				1519
			],
			[
				-3,
				-7
			],
			[
				-4,
				8
			],
			[
				-5,
				1
			],
			[
				0,
				8
			],
			[
				-1,
				6
			],
			[
				0,
				6
			],
			[
				5,
				8
			],
			[
				6,
				0
			],
			[
				4,
				-2
			],
			[
				6,
				-12
			],
			[
				-8,
				-16
			]
		],
		[
			[
				904,
				1523
			],
			[
				-42,
				28
			],
			[
				42,
				-19
			],
			[
				0,
				-9
			]
		],
		[
			[
				1121,
				2425
			],
			[
				-45,
				-89
			],
			[
				1,
				-52
			],
			[
				-73,
				-105
			],
			[
				-30,
				1
			],
			[
				-27,
				-8
			],
			[
				-2,
				17
			],
			[
				-5,
				-13
			],
			[
				-10,
				-39
			],
			[
				-31,
				-42
			],
			[
				-20,
				69
			],
			[
				-10,
				82
			],
			[
				95,
				11
			],
			[
				98,
				40
			],
			[
				-13,
				5
			]
		],
		[
			[
				907,
				2064
			],
			[
				-10,
				18
			],
			[
				19,
				-15
			],
			[
				-9,
				-3
			]
		],
		[
			[
				844,
				1811
			],
			[
				-55,
				-39
			],
			[
				-17,
				53
			],
			[
				39,
				44
			],
			[
				33,
				-58
			]
		],
		[
			[
				853,
				1732
			],
			[
				5,
				49
			],
			[
				34,
				40
			],
			[
				-39,
				-89
			]
		],
		[
			[
				819,
				1900
			],
			[
				-23,
				18
			],
			[
				30,
				-13
			],
			[
				-7,
				-5
			]
		],
		[
			[
				887,
				1854
			],
			[
				-4,
				26
			],
			[
				28,
				-49
			],
			[
				-24,
				23
			]
		],
		[
			[
				818,
				1965
			],
			[
				-25,
				-35
			],
			[
				-4,
				30
			],
			[
				29,
				5
			]
		],
		[
			[
				847,
				1947
			],
			[
				-20,
				-4
			],
			[
				7,
				45
			],
			[
				13,
				-41
			]
		],
		[
			[
				830,
				1718
			],
			[
				-9,
				-4
			],
			[
				-4,
				-1
			],
			[
				-3,
				2
			],
			[
				-22,
				11
			],
			[
				-1,
				3
			],
			[
				-3,
				7
			],
			[
				0,
				1
			],
			[
				1,
				2
			],
			[
				3,
				3
			],
			[
				1,
				1
			],
			[
				32,
				-10
			],
			[
				7,
				-3
			],
			[
				1,
				-8
			],
			[
				-3,
				-4
			]
		],
		[
			[
				825,
				766
			],
			[
				-134,
				116
			],
			[
				-72,
				209
			]
		],
		[
			[
				619,
				1091
			],
			[
				-40,
				91
			],
			[
				42,
				119
			]
		],
		[
			[
				621,
				1301
			],
			[
				15,
				193
			],
			[
				42,
				-92
			],
			[
				31,
				59
			]
		],
		[
			[
				709,
				1461
			],
			[
				-28,
				-3
			]
		],
		[
			[
				681,
				1458
			],
			[
				-2,
				1
			],
			[
				0,
				4
			]
		],
		[
			[
				679,
				1463
			],
			[
				-17,
				62
			]
		],
		[
			[
				662,
				1525
			],
			[
				-19,
				91
			],
			[
				53,
				-56
			]
		],
		[
			[
				696,
				1560
			],
			[
				74,
				-53
			],
			[
				-13,
				-121
			]
		],
		[
			[
				757,
				1386
			],
			[
				2,
				-46
			],
			[
				24,
				127
			],
			[
				21,
				-21
			],
			[
				20,
				30
			],
			[
				31,
				35
			],
			[
				62,
				-60
			],
			[
				-12,
				-38
			],
			[
				59,
				-12
			],
			[
				32,
				-45
			]
		],
		[
			[
				996,
				1356
			],
			[
				56,
				-46
			],
			[
				68,
				17
			],
			[
				-49,
				4
			]
		],
		[
			[
				595,
				1421
			],
			[
				-6,
				24
			],
			[
				10,
				-18
			],
			[
				-4,
				-6
			]
		],
		[
			[
				739,
				1615
			],
			[
				-6,
				-3
			],
			[
				-8,
				-4
			],
			[
				-8,
				7
			],
			[
				-6,
				12
			],
			[
				4,
				6
			],
			[
				8,
				-3
			],
			[
				1,
				-7
			],
			[
				13,
				1
			]
		],
		[
			[
				737,
				1624
			],
			[
				37,
				13
			],
			[
				-35,
				-22
			]
		],
		[
			[
				762,
				1665
			],
			[
				-131,
				85
			],
			[
				147,
				-33
			],
			[
				-16,
				-52
			]
		],
		[
			[
				659,
				1721
			],
			[
				-19,
				-34
			],
			[
				-5,
				34
			],
			[
				24,
				0
			]
		],
		[
			[
				700,
				1621
			],
			[
				-26,
				1
			],
			[
				12,
				12
			],
			[
				14,
				-13
			]
		],
		[
			[
				704,
				1656
			],
			[
				-4,
				21
			],
			[
				-32,
				-1
			],
			[
				-7,
				35
			],
			[
				61,
				-39
			],
			[
				-3,
				-23
			],
			[
				-15,
				7
			]
		],
		[
			[
				516,
				1667
			],
			[
				17,
				3
			],
			[
				-12,
				-17
			],
			[
				-5,
				14
			]
		],
		[
			[
				813,
				1466
			],
			[
				-1,
				-1
			],
			[
				-4,
				0
			],
			[
				-5,
				4
			],
			[
				-2,
				4
			],
			[
				-3,
				5
			],
			[
				0,
				15
			],
			[
				4,
				7
			],
			[
				4,
				2
			],
			[
				3,
				0
			],
			[
				4,
				-2
			],
			[
				4,
				-12
			],
			[
				1,
				-11
			],
			[
				-2,
				-8
			],
			[
				-3,
				-3
			]
		],
		[
			[
				946,
				1415
			],
			[
				0,
				0
			],
			[
				-5,
				1
			],
			[
				-16,
				7
			],
			[
				-6,
				17
			],
			[
				3,
				6
			],
			[
				9,
				-2
			],
			[
				4,
				-2
			],
			[
				4,
				-2
			],
			[
				4,
				-4
			],
			[
				2,
				-5
			],
			[
				1,
				-7
			],
			[
				0,
				-9
			]
		],
		[
			[
				755,
				1565
			],
			[
				-12,
				-32
			],
			[
				-6,
				41
			],
			[
				23,
				4
			],
			[
				-5,
				-13
			]
		],
		[
			[
				4509,
				1767
			],
			[
				-33,
				-26
			],
			[
				1,
				120
			],
			[
				-44,
				-77
			],
			[
				-20,
				59
			]
		],
		[
			[
				4413,
				1843
			],
			[
				-13,
				-96
			],
			[
				-43,
				101
			],
			[
				-54,
				-80
			],
			[
				-31,
				83
			],
			[
				-41,
				-57
			],
			[
				-55,
				209
			]
		],
		[
			[
				4322,
				1763
			],
			[
				-12,
				6
			],
			[
				11,
				19
			],
			[
				1,
				-25
			]
		],
		[
			[
				4150,
				1892
			],
			[
				-15,
				39
			],
			[
				10,
				11
			],
			[
				5,
				-50
			]
		],
		[
			[
				4205,
				1867
			],
			[
				-16,
				2
			],
			[
				-2,
				40
			],
			[
				18,
				-42
			]
		],
		[
			[
				4252,
				1667
			],
			[
				-3,
				83
			],
			[
				46,
				-18
			],
			[
				-43,
				-65
			]
		],
		[
			[
				4373,
				1707
			],
			[
				11,
				-74
			],
			[
				-42,
				-28
			],
			[
				31,
				102
			]
		],
		[
			[
				4327,
				1617
			],
			[
				-28,
				28
			],
			[
				31,
				54
			],
			[
				-3,
				-82
			]
		],
		[
			[
				4445,
				1717
			],
			[
				-13,
				18
			],
			[
				16,
				6
			],
			[
				-3,
				-24
			]
		],
		[
			[
				4423,
				1606
			],
			[
				-20,
				-4
			],
			[
				25,
				31
			],
			[
				-5,
				-27
			]
		],
		[
			[
				4410,
				1567
			],
			[
				-8,
				-14
			],
			[
				-2,
				39
			],
			[
				24,
				-7
			],
			[
				-14,
				-18
			]
		],
		[
			[
				4393,
				1546
			],
			[
				-20,
				6
			],
			[
				16,
				14
			],
			[
				4,
				-20
			]
		],
		[
			[
				4323,
				1705
			],
			[
				-4,
				0
			],
			[
				0,
				15
			],
			[
				-2,
				3
			],
			[
				2,
				6
			],
			[
				5,
				5
			],
			[
				4,
				-7
			],
			[
				1,
				-7
			],
			[
				0,
				-11
			],
			[
				-6,
				-4
			]
		],
		[
			[
				4302,
				1718
			],
			[
				12,
				-6
			],
			[
				-28,
				-58
			],
			[
				-2,
				29
			],
			[
				18,
				35
			]
		],
		[
			[
				2072,
				81
			],
			[
				-3,
				-29
			],
			[
				-30,
				23
			],
			[
				10,
				25
			],
			[
				-19,
				-1
			],
			[
				9,
				-54
			],
			[
				-71,
				-4
			],
			[
				-28,
				22
			],
			[
				-33,
				-1
			],
			[
				3,
				29
			],
			[
				-16,
				9
			],
			[
				2,
				-52
			],
			[
				-64,
				51
			],
			[
				0,
				0
			]
		],
		[
			[
				1832,
				99
			],
			[
				-2,
				-27
			],
			[
				-28,
				3
			],
			[
				1,
				45
			],
			[
				-47,
				-41
			],
			[
				-21,
				42
			],
			[
				-24,
				-29
			],
			[
				-19,
				-14
			],
			[
				-25,
				-63
			],
			[
				-30,
				-2
			],
			[
				20,
				85
			],
			[
				57,
				35
			],
			[
				1,
				-23
			],
			[
				27,
				105
			],
			[
				0,
				0
			]
		],
		[
			[
				1989,
				19
			],
			[
				-21,
				-19
			],
			[
				-11,
				34
			],
			[
				32,
				-15
			]
		],
		[
			[
				1836,
				31
			],
			[
				18,
				31
			],
			[
				24,
				-43
			],
			[
				-42,
				12
			]
		],
		[
			[
				1630,
				57
			],
			[
				0,
				0
			],
			[
				0,
				-1
			],
			[
				0,
				-4
			],
			[
				-1,
				0
			],
			[
				0,
				0
			]
		],
		[
			[
				1714,
				147
			],
			[
				0,
				0
			],
			[
				0,
				-2
			],
			[
				-6,
				-4
			],
			[
				-6,
				1
			],
			[
				0,
				0
			]
		],
		[
			[
				1795,
				100
			],
			[
				1,
				-28
			],
			[
				-8,
				4
			],
			[
				-3,
				14
			],
			[
				10,
				10
			]
		],
		[
			[
				5209,
				6651
			],
			[
				-80,
				-928
			],
			[
				94,
				-128
			]
		],
		[
			[
				5223,
				5595
			],
			[
				99,
				-118
			],
			[
				102,
				9
			],
			[
				207,
				-324
			],
			[
				-130,
				-454
			],
			[
				-313,
				-71
			]
		],
		[
			[
				5188,
				4637
			],
			[
				78,
				-259
			]
		],
		[
			[
				5266,
				4378
			],
			[
				178,
				-486
			]
		],
		[
			[
				5444,
				3892
			],
			[
				-63,
				-380
			]
		],
		[
			[
				5381,
				3512
			],
			[
				-4,
				-272
			],
			[
				-97,
				-179
			]
		],
		[
			[
				5280,
				3061
			],
			[
				-126,
				-141
			],
			[
				-129,
				17
			],
			[
				-100,
				-92
			]
		],
		[
			[
				4925,
				2845
			],
			[
				60,
				-77
			]
		],
		[
			[
				1742,
				215
			],
			[
				-28,
				-68
			]
		],
		[
			[
				1702,
				142
			],
			[
				-101,
				-67
			],
			[
				47,
				144
			],
			[
				-44,
				-79
			]
		],
		[
			[
				1604,
				140
			],
			[
				-115,
				31
			],
			[
				81,
				50
			]
		],
		[
			[
				1570,
				221
			],
			[
				76,
				24
			],
			[
				-125,
				16
			]
		],
		[
			[
				1521,
				261
			],
			[
				-3,
				64
			],
			[
				-47,
				-13
			],
			[
				51,
				-76
			],
			[
				-62,
				-49
			],
			[
				-29,
				125
			],
			[
				41,
				-195
			],
			[
				-163,
				87
			],
			[
				141,
				174
			]
		],
		[
			[
				1450,
				378
			],
			[
				76,
				70
			],
			[
				-101,
				-76
			]
		],
		[
			[
				1425,
				372
			],
			[
				-43,
				110
			],
			[
				-9,
				-87
			],
			[
				-182,
				56
			],
			[
				29,
				23
			]
		],
		[
			[
				1395,
				363
			],
			[
				-22,
				-19
			],
			[
				16,
				45
			],
			[
				6,
				-26
			]
		],
		[
			[
				1310,
				398
			],
			[
				47,
				-16
			],
			[
				-6,
				-42
			],
			[
				-24,
				4
			],
			[
				-19,
				40
			],
			[
				1,
				-27
			],
			[
				-24,
				35
			],
			[
				25,
				6
			]
		],
		[
			[
				1559,
				119
			],
			[
				-7,
				-1
			],
			[
				-8,
				4
			],
			[
				-1,
				6
			],
			[
				4,
				4
			],
			[
				7,
				3
			],
			[
				9,
				-5
			],
			[
				-1,
				-8
			],
			[
				-3,
				-3
			]
		],
		[
			[
				1532,
				124
			],
			[
				-24,
				30
			],
			[
				26,
				-7
			],
			[
				-2,
				-23
			]
		],
		[
			[
				1629,
				52
			],
			[
				-15,
				19
			],
			[
				16,
				-14
			]
		],
		[
			[
				4135,
				2307
			],
			[
				-22,
				191
			]
		],
		[
			[
				4113,
				2498
			],
			[
				-44,
				176
			]
		],
		[
			[
				4069,
				2674
			],
			[
				46,
				219
			],
			[
				36,
				-148
			]
		],
		[
			[
				4151,
				2745
			],
			[
				14,
				-80
			]
		],
		[
			[
				4165,
				2665
			],
			[
				-4,
				45
			]
		],
		[
			[
				4161,
				2710
			],
			[
				0,
				5
			],
			[
				0,
				1
			]
		],
		[
			[
				4161,
				2716
			],
			[
				3,
				9
			]
		],
		[
			[
				4164,
				2725
			],
			[
				24,
				102
			]
		],
		[
			[
				4073,
				2580
			],
			[
				0,
				0
			],
			[
				1,
				1
			],
			[
				2,
				-3
			],
			[
				0,
				0
			]
		],
		[
			[
				4052,
				2635
			],
			[
				14,
				-11
			],
			[
				6,
				-9
			],
			[
				4,
				-22
			],
			[
				0,
				-2
			],
			[
				-21,
				11
			],
			[
				-1,
				1
			],
			[
				-7,
				19
			],
			[
				-2,
				7
			],
			[
				-2,
				25
			],
			[
				0,
				2
			],
			[
				5,
				7
			],
			[
				6,
				-1
			],
			[
				2,
				-6
			],
			[
				-3,
				-7
			],
			[
				-1,
				-14
			]
		],
		[
			[
				2599,
				481
			],
			[
				-14,
				-40
			],
			[
				-3,
				-38
			],
			[
				-21,
				9
			],
			[
				-44,
				-56
			],
			[
				-50,
				-18
			],
			[
				40,
				-11
			],
			[
				-44,
				-53
			],
			[
				-6,
				37
			],
			[
				-25,
				3
			],
			[
				42,
				-77
			],
			[
				-37,
				-24
			],
			[
				-9,
				72
			],
			[
				-6,
				-36
			]
		],
		[
			[
				2422,
				249
			],
			[
				-31,
				-58
			],
			[
				-54,
				28
			],
			[
				-17,
				175
			],
			[
				11,
				-113
			],
			[
				-85,
				-118
			]
		],
		[
			[
				2246,
				163
			],
			[
				-163,
				-25
			],
			[
				-11,
				-57
			]
		],
		[
			[
				2120,
				63
			],
			[
				-1,
				-15
			],
			[
				-15,
				4
			],
			[
				1,
				11
			],
			[
				7,
				4
			],
			[
				8,
				-4
			]
		],
		[
			[
				2381,
				192
			],
			[
				-9,
				-26
			],
			[
				-5,
				32
			],
			[
				14,
				-6
			]
		],
		[
			[
				2304,
				194
			],
			[
				-8,
				-1
			],
			[
				-5,
				5
			],
			[
				-4,
				9
			],
			[
				0,
				6
			],
			[
				2,
				5
			],
			[
				3,
				0
			],
			[
				14,
				-6
			],
			[
				3,
				-7
			],
			[
				1,
				-3
			],
			[
				-1,
				-4
			],
			[
				-5,
				-4
			]
		],
		[
			[
				2289,
				145
			],
			[
				4,
				30
			],
			[
				18,
				-24
			],
			[
				-34,
				-27
			],
			[
				7,
				32
			],
			[
				5,
				-11
			]
		],
		[
			[
				2606,
				413
			],
			[
				-4,
				2
			],
			[
				-2,
				5
			]
		],
		[
			[
				2558,
				373
			],
			[
				-3,
				-36
			],
			[
				-35,
				11
			],
			[
				38,
				25
			]
		],
		[
			[
				7850,
				16136
			],
			[
				-159,
				-240
			],
			[
				-10,
				203
			],
			[
				-137,
				-307
			],
			[
				-228,
				55
			],
			[
				190,
				216
			],
			[
				-44,
				51
			],
			[
				-60,
				-130
			],
			[
				-189,
				-98
			],
			[
				44,
				-30
			]
		],
		[
			[
				7113,
				15831
			],
			[
				123,
				198
			],
			[
				124,
				-4
			],
			[
				-152,
				104
			],
			[
				21,
				65
			],
			[
				83,
				-4
			]
		],
		[
			[
				7312,
				16190
			],
			[
				4,
				37
			],
			[
				63,
				33
			],
			[
				33,
				-21
			],
			[
				-29,
				32
			],
			[
				93,
				11
			],
			[
				6,
				-32
			],
			[
				35,
				14
			],
			[
				-99,
				56
			],
			[
				-30,
				75
			],
			[
				11,
				34
			],
			[
				48,
				-11
			],
			[
				69,
				21
			],
			[
				55,
				-51
			],
			[
				-56,
				68
			],
			[
				-69,
				-27
			],
			[
				-44,
				59
			],
			[
				20,
				25
			],
			[
				-13,
				53
			],
			[
				47,
				-22
			],
			[
				16,
				33
			],
			[
				75,
				-14
			]
		],
		[
			[
				7547,
				16563
			],
			[
				-83,
				71
			],
			[
				47,
				135
			],
			[
				154,
				21
			]
		],
		[
			[
				7665,
				16790
			],
			[
				45,
				-4
			],
			[
				25,
				-139
			],
			[
				-69,
				-152
			],
			[
				-43,
				-57
			],
			[
				102,
				64
			],
			[
				31,
				24
			],
			[
				17,
				-60
			]
		],
		[
			[
				7047,
				16443
			],
			[
				-2,
				-37
			],
			[
				-13,
				-46
			],
			[
				-32,
				-6
			],
			[
				-12,
				25
			],
			[
				-27,
				-49
			],
			[
				6,
				70
			]
		],
		[
			[
				6967,
				16400
			],
			[
				-70,
				-78
			],
			[
				-31,
				80
			],
			[
				-42,
				-140
			],
			[
				-126,
				-22
			],
			[
				25,
				123
			],
			[
				-67,
				1
			],
			[
				146,
				75
			],
			[
				-90,
				67
			],
			[
				72,
				60
			],
			[
				59,
				-128
			],
			[
				-1,
				153
			],
			[
				38,
				-132
			],
			[
				41,
				40
			]
		],
		[
			[
				6921,
				16499
			],
			[
				0,
				0
			],
			[
				4,
				8
			],
			[
				27,
				4
			],
			[
				9,
				1
			],
			[
				9,
				7
			],
			[
				30,
				7
			],
			[
				2,
				1
			],
			[
				2,
				-2
			],
			[
				9,
				-6
			],
			[
				4,
				-3
			],
			[
				-1,
				-1
			],
			[
				-24,
				-28
			],
			[
				15,
				1
			],
			[
				8,
				-45
			],
			[
				9,
				7
			],
			[
				0,
				6
			],
			[
				3,
				33
			],
			[
				2,
				15
			],
			[
				13,
				9
			],
			[
				1,
				0
			],
			[
				38,
				-11
			],
			[
				-45,
				34
			],
			[
				0,
				1
			],
			[
				-1,
				8
			],
			[
				7,
				10
			],
			[
				14,
				0
			],
			[
				7,
				0
			],
			[
				9,
				5
			],
			[
				-12,
				5
			],
			[
				-19,
				13
			],
			[
				-22,
				28
			],
			[
				3,
				11
			],
			[
				11,
				3
			],
			[
				33,
				18
			],
			[
				0,
				0
			],
			[
				9,
				-3
			],
			[
				7,
				-3
			],
			[
				0,
				-5
			],
			[
				-1,
				-6
			],
			[
				10,
				-12
			],
			[
				8,
				-5
			],
			[
				1,
				-65
			],
			[
				14,
				-8
			],
			[
				0,
				1
			],
			[
				0,
				10
			],
			[
				1,
				6
			],
			[
				1,
				25
			],
			[
				1,
				11
			],
			[
				-3,
				42
			],
			[
				27,
				-2
			],
			[
				11,
				-8
			],
			[
				10,
				-14
			],
			[
				9,
				-12
			],
			[
				2,
				-23
			],
			[
				14,
				-8
			],
			[
				1,
				-1
			],
			[
				5,
				-2
			],
			[
				1,
				13
			],
			[
				-4,
				3
			],
			[
				-3,
				2
			],
			[
				0,
				11
			],
			[
				0,
				30
			],
			[
				-3,
				1
			],
			[
				-20,
				5
			],
			[
				0,
				2
			],
			[
				-2,
				7
			],
			[
				-10,
				8
			],
			[
				-1,
				0
			],
			[
				-21,
				7
			],
			[
				13,
				6
			],
			[
				8,
				30
			],
			[
				-7,
				5
			],
			[
				-25,
				-18
			],
			[
				-8,
				9
			],
			[
				15,
				12
			],
			[
				-12,
				12
			],
			[
				15,
				5
			],
			[
				17,
				-11
			],
			[
				4,
				7
			],
			[
				-33,
				24
			],
			[
				2,
				15
			],
			[
				-16,
				8
			],
			[
				-8,
				0
			],
			[
				-4,
				12
			],
			[
				12,
				5
			],
			[
				-7,
				22
			],
			[
				13,
				38
			],
			[
				-16,
				9
			],
			[
				10,
				11
			],
			[
				28,
				-3
			],
			[
				22,
				18
			],
			[
				3,
				11
			],
			[
				36,
				3
			],
			[
				22,
				-12
			],
			[
				3,
				-14
			],
			[
				-5,
				-32
			],
			[
				8,
				-7
			],
			[
				-13,
				-9
			],
			[
				-6,
				5
			],
			[
				-2,
				-1
			],
			[
				-29,
				-27
			],
			[
				7,
				-9
			],
			[
				8,
				-1
			],
			[
				2,
				-1
			],
			[
				1,
				5
			],
			[
				1,
				5
			],
			[
				5,
				3
			],
			[
				17,
				9
			],
			[
				8,
				-7
			],
			[
				-3,
				-2
			],
			[
				-9,
				-8
			],
			[
				12,
				-15
			],
			[
				12,
				-4
			],
			[
				4,
				-11
			],
			[
				-28,
				4
			],
			[
				4,
				-18
			],
			[
				15,
				4
			],
			[
				12,
				-7
			],
			[
				26,
				-16
			],
			[
				3,
				14
			],
			[
				20,
				-3
			],
			[
				10,
				5
			],
			[
				10,
				-8
			],
			[
				-27,
				-17
			],
			[
				2,
				-10
			],
			[
				0,
				-2
			],
			[
				2,
				0
			],
			[
				10,
				2
			],
			[
				-2,
				-20
			],
			[
				-1,
				-19
			],
			[
				-4,
				-14
			],
			[
				-14,
				-15
			],
			[
				-2,
				-19
			],
			[
				0,
				-1
			],
			[
				-9,
				-16
			],
			[
				-6,
				-12
			],
			[
				8,
				0
			],
			[
				2,
				3
			]
		],
		[
			[
				7266,
				16577
			],
			[
				89,
				46
			],
			[
				-87,
				-154
			],
			[
				105,
				-99
			],
			[
				-148,
				-98
			]
		],
		[
			[
				7225,
				16272
			],
			[
				-116,
				-74
			],
			[
				-122,
				14
			],
			[
				-45,
				82
			],
			[
				175,
				54
			]
		],
		[
			[
				7117,
				16348
			],
			[
				94,
				36
			],
			[
				-109,
				104
			]
		],
		[
			[
				7102,
				16488
			],
			[
				-3,
				-3
			]
		],
		[
			[
				7099,
				16485
			],
			[
				48,
				-41
			],
			[
				-65,
				-62
			],
			[
				-28,
				64
			]
		],
		[
			[
				7054,
				16446
			],
			[
				-7,
				-3
			]
		],
		[
			[
				7866,
				17337
			],
			[
				-37,
				-263
			],
			[
				-144,
				-191
			],
			[
				-168,
				-92
			],
			[
				-57,
				64
			],
			[
				-40,
				-208
			],
			[
				-20,
				223
			],
			[
				334,
				391
			],
			[
				132,
				76
			]
		],
		[
			[
				6795,
				15896
			],
			[
				23,
				82
			],
			[
				64,
				-67
			],
			[
				7,
				73
			],
			[
				86,
				-11
			],
			[
				-13,
				-81
			],
			[
				46,
				128
			],
			[
				72,
				-38
			],
			[
				137,
				58
			],
			[
				-181,
				-226
			]
		],
		[
			[
				6862,
				16211
			],
			[
				228,
				-52
			],
			[
				-80,
				-84
			],
			[
				-121,
				7
			],
			[
				-67,
				75
			],
			[
				40,
				54
			]
		],
		[
			[
				7225,
				16048
			],
			[
				-48,
				8
			],
			[
				50,
				-2
			],
			[
				-2,
				-6
			]
		],
		[
			[
				6994,
				16742
			],
			[
				76,
				-8
			],
			[
				-31,
				-81
			],
			[
				-66,
				15
			],
			[
				21,
				74
			]
		],
		[
			[
				6927,
				16520
			],
			[
				-31,
				-9
			],
			[
				43,
				46
			],
			[
				13,
				-23
			],
			[
				-25,
				-14
			]
		],
		[
			[
				6986,
				16544
			],
			[
				-42,
				21
			],
			[
				22,
				26
			],
			[
				24,
				-30
			],
			[
				-4,
				-17
			]
		],
		[
			[
				7290,
				16781
			],
			[
				-27,
				-42
			],
			[
				-17,
				35
			],
			[
				44,
				7
			]
		],
		[
			[
				6942,
				16596
			],
			[
				-23,
				-41
			],
			[
				-7,
				52
			],
			[
				19,
				14
			],
			[
				11,
				-25
			]
		],
		[
			[
				7273,
				15783
			],
			[
				17,
				33
			],
			[
				13,
				-19
			],
			[
				-30,
				-14
			]
		],
		[
			[
				4837,
				1612
			],
			[
				-40,
				-195
			],
			[
				-134,
				-27
			],
			[
				-48,
				349
			],
			[
				-125,
				-39
			],
			[
				19,
				67
			]
		],
		[
			[
				5246,
				12302
			],
			[
				5,
				11
			]
		],
		[
			[
				5251,
				12313
			],
			[
				-4,
				3
			],
			[
				7,
				5
			]
		],
		[
			[
				5254,
				12321
			],
			[
				102,
				71
			],
			[
				-93,
				-18
			],
			[
				101,
				64
			],
			[
				62,
				66
			],
			[
				-59,
				20
			],
			[
				-42,
				-27
			],
			[
				39,
				45
			],
			[
				-11,
				15
			],
			[
				61,
				12
			],
			[
				23,
				38
			],
			[
				30,
				-58
			],
			[
				-5,
				-61
			],
			[
				-42,
				-44
			],
			[
				42,
				35
			],
			[
				9,
				-28
			],
			[
				-15,
				-16
			],
			[
				29,
				2
			],
			[
				-14,
				-41
			],
			[
				-126,
				-85
			],
			[
				-106,
				-25
			]
		],
		[
			[
				5239,
				12286
			],
			[
				-1,
				1
			],
			[
				4,
				11
			],
			[
				1,
				3
			],
			[
				3,
				1
			]
		],
		[
			[
				5586,
				12487
			],
			[
				-84,
				-8
			],
			[
				4,
				65
			],
			[
				80,
				-57
			]
		],
		[
			[
				5233,
				12634
			],
			[
				-28,
				-13
			],
			[
				13,
				28
			],
			[
				15,
				-15
			]
		],
		[
			[
				5170,
				12606
			],
			[
				-15,
				-16
			],
			[
				-5,
				12
			],
			[
				10,
				11
			],
			[
				4,
				4
			],
			[
				10,
				-1
			],
			[
				-4,
				-10
			]
		],
		[
			[
				5311,
				12479
			],
			[
				-45,
				-27
			],
			[
				8,
				22
			],
			[
				12,
				13
			],
			[
				16,
				9
			],
			[
				8,
				0
			],
			[
				1,
				-17
			]
		],
		[
			[
				5434,
				12334
			],
			[
				-45,
				-24
			],
			[
				37,
				29
			],
			[
				8,
				-5
			]
		],
		[
			[
				5241,
				12487
			],
			[
				32,
				56
			],
			[
				-35,
				-96
			],
			[
				3,
				40
			]
		],
		[
			[
				5509,
				12198
			],
			[
				-209,
				-124
			],
			[
				117,
				190
			],
			[
				99,
				36
			],
			[
				-63,
				-73
			],
			[
				103,
				56
			]
		],
		[
			[
				5556,
				12283
			],
			[
				105,
				33
			],
			[
				10,
				-50
			],
			[
				-162,
				-68
			]
		],
		[
			[
				5454,
				12040
			],
			[
				-22,
				8
			],
			[
				29,
				24
			],
			[
				-7,
				-32
			]
		],
		[
			[
				5201,
				11964
			],
			[
				-4,
				-38
			],
			[
				-11,
				34
			],
			[
				15,
				4
			]
		],
		[
			[
				5427,
				11950
			],
			[
				-8,
				-9
			],
			[
				-3,
				1
			],
			[
				4,
				24
			],
			[
				8,
				11
			],
			[
				6,
				-3
			],
			[
				-3,
				-11
			],
			[
				-4,
				-13
			]
		],
		[
			[
				5228,
				12121
			],
			[
				-13,
				3
			],
			[
				27,
				28
			],
			[
				-14,
				-31
			]
		],
		[
			[
				5228,
				12086
			],
			[
				25,
				44
			],
			[
				-4,
				23
			],
			[
				42,
				4
			],
			[
				-82,
				-122
			],
			[
				-13,
				-25
			],
			[
				32,
				76
			]
		],
		[
			[
				5353,
				12048
			],
			[
				-22,
				2
			],
			[
				74,
				46
			],
			[
				-52,
				-48
			]
		],
		[
			[
				5301,
				12027
			],
			[
				83,
				15
			],
			[
				-75,
				-66
			],
			[
				-8,
				51
			]
		],
		[
			[
				5389,
				11935
			],
			[
				27,
				64
			],
			[
				15,
				13
			],
			[
				-20,
				-65
			],
			[
				-22,
				-12
			]
		],
		[
			[
				5370,
				11920
			],
			[
				-72,
				-60
			],
			[
				13,
				59
			],
			[
				62,
				45
			],
			[
				-3,
				-44
			]
		],
		[
			[
				5261,
				12008
			],
			[
				5,
				31
			],
			[
				9,
				16
			],
			[
				5,
				-1
			],
			[
				-8,
				-53
			],
			[
				-16,
				-35
			],
			[
				-5,
				8
			],
			[
				4,
				26
			],
			[
				6,
				8
			]
		],
		[
			[
				5654,
				12214
			],
			[
				26,
				64
			],
			[
				5,
				53
			],
			[
				58,
				44
			],
			[
				-128,
				-33
			],
			[
				-132,
				-30
			],
			[
				122,
				51
			],
			[
				-91,
				-11
			],
			[
				-18,
				11
			],
			[
				104,
				91
			],
			[
				108,
				35
			],
			[
				59,
				3
			],
			[
				4,
				-19
			],
			[
				15,
				35
			],
			[
				99,
				42
			],
			[
				54,
				54
			],
			[
				73,
				1
			],
			[
				38,
				5
			]
		],
		[
			[
				5053,
				12330
			],
			[
				-24,
				-16
			],
			[
				7,
				21
			],
			[
				9,
				16
			],
			[
				9,
				11
			],
			[
				6,
				0
			],
			[
				5,
				-5
			],
			[
				-5,
				-14
			],
			[
				-7,
				-13
			]
		],
		[
			[
				5236,
				12299
			],
			[
				-2,
				-7
			],
			[
				-5,
				-6
			],
			[
				-3,
				-9
			],
			[
				-10,
				-6
			],
			[
				0,
				1
			],
			[
				-7,
				3
			],
			[
				4,
				6
			],
			[
				6,
				6
			],
			[
				6,
				11
			],
			[
				-7,
				-1
			],
			[
				-6,
				-5
			],
			[
				-6,
				3
			],
			[
				5,
				6
			],
			[
				6,
				4
			],
			[
				0,
				6
			],
			[
				4,
				8
			],
			[
				18,
				4
			],
			[
				4,
				-3
			],
			[
				-1,
				-10
			],
			[
				-3,
				-3
			],
			[
				-3,
				-8
			]
		],
		[
			[
				5149,
				12116
			],
			[
				-15,
				-21
			],
			[
				1,
				20
			],
			[
				2,
				14
			],
			[
				4,
				9
			],
			[
				17,
				2
			],
			[
				4,
				-5
			],
			[
				-2,
				-16
			],
			[
				-11,
				-3
			]
		],
		[
			[
				5120,
				12120
			],
			[
				-37,
				-15
			],
			[
				40,
				42
			],
			[
				-3,
				-27
			]
		],
		[
			[
				4829,
				12292
			],
			[
				-8,
				-14
			],
			[
				-10,
				10
			],
			[
				18,
				4
			]
		],
		[
			[
				5183,
				12379
			],
			[
				-12,
				-10
			],
			[
				-19,
				1
			],
			[
				13,
				12
			],
			[
				18,
				-3
			]
		],
		[
			[
				5060,
				12428
			],
			[
				-11,
				10
			],
			[
				30,
				3
			],
			[
				-19,
				-13
			]
		],
		[
			[
				5226,
				12204
			],
			[
				-44,
				-5
			],
			[
				46,
				51
			],
			[
				-2,
				-46
			]
		],
		[
			[
				5187,
				12234
			],
			[
				-16,
				1
			],
			[
				16,
				44
			],
			[
				11,
				-41
			],
			[
				-11,
				-4
			]
		],
		[
			[
				5234,
				12254
			],
			[
				59,
				20
			],
			[
				-57,
				-64
			],
			[
				-2,
				44
			]
		],
		[
			[
				5220,
				12176
			],
			[
				6,
				9
			],
			[
				-7,
				5
			],
			[
				-22,
				-19
			],
			[
				-6,
				-8
			],
			[
				-19,
				-25
			],
			[
				6,
				39
			],
			[
				24,
				15
			],
			[
				24,
				8
			],
			[
				14,
				-8
			],
			[
				-5,
				-16
			],
			[
				-21,
				-13
			],
			[
				-5,
				1
			],
			[
				11,
				12
			]
		],
		[
			[
				1220,
				474
			],
			[
				-215,
				104
			]
		],
		[
			[
				1005,
				578
			],
			[
				-82,
				183
			],
			[
				-98,
				5
			]
		],
		[
			[
				905,
				745
			],
			[
				6,
				-88
			],
			[
				-29,
				57
			],
			[
				-38,
				-32
			],
			[
				61,
				63
			]
		],
		[
			[
				834,
				4055
			],
			[
				-6,
				-11
			],
			[
				-7,
				-4
			],
			[
				-2,
				0
			],
			[
				-10,
				20
			],
			[
				-3,
				14
			],
			[
				-3,
				0
			],
			[
				-8,
				20
			],
			[
				-2,
				4
			],
			[
				-13,
				3
			],
			[
				-9,
				9
			],
			[
				-8,
				-1
			],
			[
				-5,
				-5
			],
			[
				-6,
				4
			],
			[
				-1,
				25
			],
			[
				12,
				11
			],
			[
				13,
				21
			],
			[
				13,
				37
			],
			[
				3,
				8
			],
			[
				-6,
				2
			],
			[
				-14,
				-22
			],
			[
				-13,
				-30
			],
			[
				-13,
				3
			],
			[
				-19,
				0
			],
			[
				-12,
				2
			],
			[
				-3,
				-7
			],
			[
				-5,
				2
			],
			[
				-6,
				18
			],
			[
				0,
				11
			],
			[
				17,
				27
			]
		],
		[
			[
				718,
				4216
			],
			[
				74,
				120
			],
			[
				-87,
				-120
			]
		],
		[
			[
				719,
				3902
			],
			[
				1,
				-87
			],
			[
				-33,
				-10
			],
			[
				-29,
				-47
			],
			[
				-52,
				-13
			],
			[
				-84,
				124
			],
			[
				-43,
				51
			],
			[
				59,
				26
			],
			[
				43,
				-59
			],
			[
				-35,
				69
			],
			[
				23,
				35
			],
			[
				11,
				17
			],
			[
				18,
				-14
			],
			[
				-9,
				28
			],
			[
				30,
				8
			],
			[
				7,
				-19
			],
			[
				49,
				130
			],
			[
				-14,
				0
			],
			[
				28,
				29
			],
			[
				13,
				-18
			]
		],
		[
			[
				702,
				4152
			],
			[
				42,
				-37
			],
			[
				-25,
				-213
			]
		],
		[
			[
				849,
				4051
			],
			[
				16,
				-1
			]
		],
		[
			[
				672,
				3755
			],
			[
				27,
				40
			],
			[
				47,
				-9
			],
			[
				-2,
				140
			],
			[
				8,
				158
			],
			[
				37,
				5
			],
			[
				33,
				-59
			],
			[
				21,
				19
			]
		],
		[
			[
				4981,
				10834
			],
			[
				-118,
				-88
			],
			[
				1,
				44
			]
		],
		[
			[
				4864,
				10790
			],
			[
				133,
				169
			]
		],
		[
			[
				4703,
				10811
			],
			[
				41,
				85
			],
			[
				146,
				14
			],
			[
				-37,
				-45
			],
			[
				-150,
				-54
			]
		],
		[
			[
				4686,
				11038
			],
			[
				-22,
				-2
			],
			[
				-8,
				4
			],
			[
				11,
				13
			],
			[
				11,
				0
			],
			[
				6,
				-8
			],
			[
				2,
				-7
			]
		],
		[
			[
				4358,
				11034
			],
			[
				-30,
				3
			],
			[
				24,
				12
			],
			[
				6,
				-15
			]
		],
		[
			[
				4815,
				10794
			],
			[
				-21,
				-3
			],
			[
				19,
				40
			],
			[
				26,
				-6
			],
			[
				-24,
				-31
			]
		],
		[
			[
				4716,
				10334
			],
			[
				0,
				0
			],
			[
				-2,
				7
			],
			[
				-2,
				8
			],
			[
				13,
				7
			],
			[
				13,
				-10
			],
			[
				10,
				-8
			],
			[
				14,
				-1
			],
			[
				23,
				18
			],
			[
				-7,
				12
			],
			[
				-29,
				-10
			],
			[
				-3,
				2
			],
			[
				-9,
				6
			],
			[
				5,
				10
			],
			[
				19,
				7
			],
			[
				16,
				-5
			],
			[
				4,
				-2
			],
			[
				16,
				12
			],
			[
				8,
				-9
			],
			[
				30,
				7
			],
			[
				0,
				15
			],
			[
				10,
				1
			],
			[
				12,
				-19
			],
			[
				37,
				2
			],
			[
				38,
				35
			],
			[
				-46,
				13
			],
			[
				-1,
				-15
			],
			[
				-27,
				-2
			],
			[
				-4,
				8
			],
			[
				13,
				9
			],
			[
				-7,
				6
			],
			[
				-29,
				-7
			],
			[
				-17,
				23
			],
			[
				-24,
				-9
			],
			[
				-9,
				4
			],
			[
				0,
				0
			],
			[
				0,
				4
			],
			[
				9,
				4
			],
			[
				32,
				9
			],
			[
				75,
				17
			],
			[
				-17,
				5
			],
			[
				24,
				26
			],
			[
				-6,
				10
			],
			[
				-29,
				-32
			],
			[
				-25,
				-9
			],
			[
				-37,
				-3
			],
			[
				-8,
				0
			],
			[
				1,
				3
			],
			[
				11,
				34
			],
			[
				11,
				6
			],
			[
				14,
				0
			],
			[
				-13,
				10
			],
			[
				52,
				24
			],
			[
				7,
				4
			],
			[
				13,
				6
			],
			[
				70,
				33
			],
			[
				7,
				3
			],
			[
				30,
				26
			],
			[
				40,
				-7
			],
			[
				8,
				-2
			],
			[
				12,
				16
			],
			[
				0,
				5
			],
			[
				-1,
				4
			],
			[
				18,
				5
			],
			[
				6,
				13
			],
			[
				16,
				-3
			],
			[
				7,
				11
			],
			[
				22,
				1
			],
			[
				4,
				1
			],
			[
				22,
				-12
			],
			[
				7,
				-14
			],
			[
				3,
				-5
			],
			[
				-16,
				-14
			],
			[
				22,
				0
			],
			[
				15,
				7
			],
			[
				14,
				1
			],
			[
				3,
				-7
			],
			[
				28,
				0
			],
			[
				3,
				-7
			],
			[
				1,
				-2
			],
			[
				20,
				-5
			]
		],
		[
			[
				5323,
				10590
			],
			[
				-21,
				25
			],
			[
				-50,
				22
			],
			[
				-10,
				12
			],
			[
				-34,
				5
			],
			[
				-3,
				-6
			],
			[
				-23,
				0
			],
			[
				-11,
				5
			],
			[
				-5,
				8
			],
			[
				-3,
				4
			],
			[
				-22,
				16
			],
			[
				-26,
				4
			],
			[
				-19,
				-6
			],
			[
				-16,
				-1
			],
			[
				-2,
				3
			],
			[
				-4,
				4
			],
			[
				-22,
				-13
			],
			[
				0,
				-1
			],
			[
				2,
				-3
			],
			[
				1,
				-4
			],
			[
				-10,
				-11
			],
			[
				-2,
				-3
			],
			[
				-3,
				-2
			],
			[
				-1,
				1
			],
			[
				-3,
				3
			],
			[
				-20,
				-3
			],
			[
				-9,
				-6
			],
			[
				-3,
				11
			],
			[
				-1,
				2
			],
			[
				-1,
				-2
			],
			[
				-14,
				-21
			],
			[
				-14,
				-11
			],
			[
				-32,
				-15
			],
			[
				-44,
				-22
			],
			[
				-46,
				-26
			],
			[
				-30,
				-16
			],
			[
				-51,
				-18
			],
			[
				5,
				-10
			],
			[
				24,
				3
			],
			[
				-9,
				-30
			],
			[
				-1,
				-5
			],
			[
				-13,
				-12
			],
			[
				-7,
				-7
			],
			[
				0,
				0
			],
			[
				-25,
				-4
			],
			[
				-7,
				-1
			],
			[
				-10,
				-15
			],
			[
				-21,
				5
			],
			[
				-1,
				0
			],
			[
				-2,
				-3
			],
			[
				-5,
				-9
			],
			[
				-34,
				0
			],
			[
				2,
				-6
			],
			[
				4,
				-18
			],
			[
				-4,
				-10
			],
			[
				-19,
				-13
			],
			[
				-29,
				-39
			],
			[
				-26,
				-10
			],
			[
				-16,
				-1
			],
			[
				-29,
				-14
			],
			[
				-26,
				-12
			],
			[
				-22,
				-1
			],
			[
				7,
				11
			],
			[
				-3,
				3
			],
			[
				-10,
				-8
			],
			[
				-5,
				6
			],
			[
				-1,
				3
			],
			[
				-7,
				11
			],
			[
				9,
				4
			],
			[
				14,
				4
			],
			[
				15,
				5
			],
			[
				8,
				3
			],
			[
				7,
				-4
			],
			[
				10,
				-6
			],
			[
				8,
				9
			],
			[
				9,
				10
			],
			[
				23,
				2
			],
			[
				2,
				0
			],
			[
				15,
				17
			],
			[
				6,
				9
			],
			[
				27,
				35
			],
			[
				11,
				3
			],
			[
				4,
				1
			],
			[
				7,
				7
			],
			[
				-2,
				8
			],
			[
				-17,
				-7
			],
			[
				-5,
				-5
			],
			[
				-26,
				-4
			],
			[
				-22,
				1
			],
			[
				-21,
				11
			],
			[
				11,
				14
			],
			[
				1,
				2
			],
			[
				-2,
				-1
			],
			[
				-20,
				-7
			],
			[
				-3,
				-13
			],
			[
				-33,
				-1
			],
			[
				15,
				25
			],
			[
				-8,
				4
			],
			[
				5,
				10
			],
			[
				32,
				9
			],
			[
				-25,
				3
			],
			[
				3,
				5
			],
			[
				2,
				2
			],
			[
				38,
				13
			],
			[
				38,
				13
			],
			[
				13,
				4
			],
			[
				23,
				0
			],
			[
				57,
				-1
			],
			[
				4,
				7
			],
			[
				25,
				5
			],
			[
				4,
				-6
			],
			[
				20,
				16
			],
			[
				2,
				1
			],
			[
				12,
				7
			],
			[
				14,
				3
			],
			[
				15,
				4
			],
			[
				27,
				23
			],
			[
				-13,
				3
			],
			[
				0,
				1
			],
			[
				-1,
				0
			],
			[
				0,
				0
			],
			[
				-32,
				-17
			],
			[
				-33,
				-16
			],
			[
				-20,
				-9
			],
			[
				-20,
				-2
			],
			[
				-15,
				-1
			],
			[
				-16,
				-4
			],
			[
				-21,
				-4
			],
			[
				-7,
				2
			],
			[
				-22,
				0
			],
			[
				-88,
				-29
			],
			[
				-1,
				7
			],
			[
				-3,
				13
			],
			[
				16,
				17
			],
			[
				18,
				19
			],
			[
				18,
				6
			],
			[
				1,
				12
			],
			[
				43,
				32
			],
			[
				28,
				21
			],
			[
				5,
				-14
			],
			[
				10,
				-3
			],
			[
				10,
				-15
			],
			[
				7,
				-11
			],
			[
				24,
				-33
			],
			[
				20,
				9
			],
			[
				-8,
				10
			],
			[
				18,
				20
			],
			[
				7,
				18
			],
			[
				-18,
				-10
			],
			[
				-20,
				-25
			],
			[
				-15,
				15
			],
			[
				1,
				7
			],
			[
				-5,
				10
			],
			[
				-4,
				-2
			],
			[
				-22,
				22
			],
			[
				22,
				20
			],
			[
				3,
				2
			],
			[
				37,
				12
			],
			[
				5,
				-17
			],
			[
				1,
				-6
			],
			[
				3,
				6
			],
			[
				8,
				21
			],
			[
				10,
				2
			],
			[
				17,
				-23
			],
			[
				0,
				-3
			],
			[
				-1,
				-17
			],
			[
				19,
				1
			],
			[
				-4,
				16
			],
			[
				-24,
				32
			],
			[
				27,
				5
			],
			[
				13,
				-10
			],
			[
				-12,
				-15
			],
			[
				8,
				-5
			],
			[
				13,
				8
			],
			[
				28,
				-1
			],
			[
				4,
				21
			],
			[
				17,
				7
			],
			[
				10,
				9
			],
			[
				9,
				8
			],
			[
				-15,
				2
			],
			[
				-11,
				1
			],
			[
				-19,
				1
			],
			[
				1,
				-16
			],
			[
				-10,
				-3
			],
			[
				-4,
				13
			],
			[
				-11,
				3
			],
			[
				-29,
				-3
			],
			[
				-15,
				-7
			],
			[
				-1,
				-1
			],
			[
				-19,
				2
			],
			[
				15,
				27
			],
			[
				18,
				15
			],
			[
				5,
				1
			],
			[
				19,
				6
			],
			[
				-4,
				-16
			],
			[
				11,
				3
			],
			[
				10,
				22
			],
			[
				9,
				1
			],
			[
				1,
				1
			],
			[
				10,
				-15
			],
			[
				0,
				-3
			],
			[
				2,
				-7
			],
			[
				12,
				-6
			],
			[
				10,
				10
			],
			[
				8,
				0
			],
			[
				-2,
				-15
			],
			[
				16,
				2
			],
			[
				-3,
				22
			],
			[
				13,
				16
			],
			[
				18,
				2
			],
			[
				63,
				57
			],
			[
				16,
				2
			],
			[
				-2,
				17
			],
			[
				0,
				0
			]
		],
		[
			[
				5018,
				10839
			],
			[
				49,
				-13
			]
		],
		[
			[
				5161,
				10731
			],
			[
				3,
				-18
			]
		],
		[
			[
				4710,
				10417
			],
			[
				-4,
				-1
			],
			[
				-8,
				1
			],
			[
				-7,
				2
			],
			[
				-4,
				1
			],
			[
				-1,
				5
			],
			[
				13,
				7
			],
			[
				20,
				1
			],
			[
				2,
				-8
			],
			[
				-11,
				-8
			]
		],
		[
			[
				4887,
				10392
			],
			[
				-10,
				-1
			],
			[
				-16,
				4
			],
			[
				-5,
				8
			],
			[
				0,
				4
			],
			[
				6,
				2
			],
			[
				5,
				1
			],
			[
				7,
				-2
			],
			[
				4,
				-1
			],
			[
				17,
				-12
			],
			[
				-8,
				-3
			]
		],
		[
			[
				4472,
				10303
			],
			[
				-21,
				24
			],
			[
				30,
				-4
			],
			[
				-9,
				-20
			]
		],
		[
			[
				4437,
				10328
			],
			[
				6,
				22
			],
			[
				26,
				-6
			],
			[
				-32,
				-16
			]
		],
		[
			[
				4550,
				10425
			],
			[
				19,
				-1
			],
			[
				-46,
				-25
			],
			[
				-2,
				23
			],
			[
				29,
				3
			]
		],
		[
			[
				4503,
				10484
			],
			[
				-11,
				-3
			],
			[
				-5,
				3
			],
			[
				13,
				11
			],
			[
				3,
				2
			],
			[
				5,
				5
			],
			[
				5,
				4
			],
			[
				13,
				1
			],
			[
				7,
				-9
			],
			[
				-6,
				-5
			],
			[
				-5,
				-4
			],
			[
				-11,
				-3
			],
			[
				-8,
				-2
			]
		],
		[
			[
				4519,
				10478
			],
			[
				-48,
				-39
			],
			[
				-15,
				6
			],
			[
				33,
				30
			],
			[
				30,
				3
			]
		],
		[
			[
				4668,
				10664
			],
			[
				-46,
				-29
			],
			[
				29,
				37
			],
			[
				17,
				-8
			]
		],
		[
			[
				4071,
				10507
			],
			[
				-4,
				-26
			],
			[
				-21,
				6
			],
			[
				25,
				20
			]
		],
		[
			[
				4390,
				10716
			],
			[
				69,
				-18
			],
			[
				-280,
				-198
			],
			[
				26,
				84
			],
			[
				185,
				132
			]
		],
		[
			[
				4502,
				10644
			],
			[
				-267,
				-157
			],
			[
				149,
				136
			],
			[
				118,
				21
			]
		],
		[
			[
				4556,
				10578
			],
			[
				-149,
				-110
			],
			[
				76,
				151
			],
			[
				73,
				-41
			]
		],
		[
			[
				4122,
				10518
			],
			[
				-1,
				1
			],
			[
				-4,
				5
			],
			[
				-1,
				6
			],
			[
				7,
				4
			],
			[
				4,
				1
			],
			[
				7,
				0
			],
			[
				5,
				0
			],
			[
				2,
				-3
			],
			[
				0,
				-2
			],
			[
				0,
				-4
			],
			[
				-2,
				-4
			],
			[
				-2,
				-4
			],
			[
				-1,
				-1
			],
			[
				-5,
				-3
			],
			[
				-2,
				0
			],
			[
				-6,
				2
			],
			[
				-1,
				2
			]
		],
		[
			[
				4338,
				10531
			],
			[
				19,
				-5
			],
			[
				-21,
				-12
			],
			[
				2,
				17
			]
		],
		[
			[
				4370,
				10533
			],
			[
				19,
				1
			],
			[
				-19,
				-14
			],
			[
				0,
				13
			]
		],
		[
			[
				4289,
				10371
			],
			[
				-27,
				-2
			],
			[
				-6,
				12
			],
			[
				17,
				3
			],
			[
				11,
				1
			],
			[
				5,
				-14
			]
		],
		[
			[
				4448,
				10730
			],
			[
				-37,
				8
			],
			[
				14,
				27
			],
			[
				23,
				-35
			]
		],
		[
			[
				4214,
				10687
			],
			[
				70,
				35
			],
			[
				-56,
				-72
			],
			[
				-14,
				37
			]
		],
		[
			[
				4260,
				10671
			],
			[
				58,
				44
			],
			[
				4,
				-31
			],
			[
				-62,
				-13
			]
		],
		[
			[
				4574,
				10642
			],
			[
				29,
				4
			],
			[
				-36,
				-47
			],
			[
				-24,
				0
			],
			[
				31,
				43
			]
		],
		[
			[
				3734,
				2805
			],
			[
				20,
				-101
			],
			[
				-85,
				-129
			]
		],
		[
			[
				3665,
				2575
			],
			[
				-38,
				146
			],
			[
				86,
				152
			]
		],
		[
			[
				4321,
				5008
			],
			[
				133,
				-4
			],
			[
				29,
				-81
			],
			[
				102,
				29
			],
			[
				-41,
				296
			]
		],
		[
			[
				4878,
				5392
			],
			[
				99,
				-364
			],
			[
				-122,
				-99
			]
		],
		[
			[
				4855,
				4929
			],
			[
				-72,
				-156
			],
			[
				-228,
				-133
			]
		],
		[
			[
				1410,
				6483
			],
			[
				100,
				231
			]
		],
		[
			[
				1510,
				6714
			],
			[
				28,
				-9
			]
		],
		[
			[
				1639,
				6470
			],
			[
				257,
				-184
			]
		],
		[
			[
				1582,
				6668
			],
			[
				143,
				-36
			]
		],
		[
			[
				1725,
				6632
			],
			[
				-12,
				-36
			]
		],
		[
			[
				10882,
				18164
			],
			[
				120,
				-66
			]
		],
		[
			[
				11386,
				17320
			],
			[
				-175,
				173
			],
			[
				84,
				136
			],
			[
				-152,
				-14
			],
			[
				-62,
				195
			],
			[
				-254,
				191
			]
		],
		[
			[
				11340,
				18342
			],
			[
				149,
				-23
			],
			[
				92,
				-190
			],
			[
				137,
				-46
			],
			[
				-113,
				-244
			],
			[
				27,
				-115
			],
			[
				188,
				-74
			],
			[
				207,
				34
			],
			[
				43,
				-104
			]
		],
		[
			[
				11217,
				17201
			],
			[
				-127,
				114
			],
			[
				-202,
				46
			],
			[
				-53,
				162
			],
			[
				-103,
				24
			]
		],
		[
			[
				2900,
				2097
			],
			[
				151,
				51
			]
		],
		[
			[
				3051,
				2148
			],
			[
				25,
				-66
			],
			[
				84,
				-10
			]
		],
		[
			[
				1267,
				6203
			],
			[
				-52,
				107
			],
			[
				-134,
				15
			],
			[
				-185,
				167
			]
		],
		[
			[
				3301,
				1468
			],
			[
				-113,
				94
			]
		],
		[
			[
				3188,
				1562
			],
			[
				66,
				77
			]
		],
		[
			[
				3254,
				1639
			],
			[
				84,
				109
			]
		],
		[
			[
				3342,
				1451
			],
			[
				-13,
				5
			]
		],
		[
			[
				3091,
				1384
			],
			[
				97,
				178
			]
		],
		[
			[
				3137,
				1781
			],
			[
				117,
				-142
			]
		],
		[
			[
				485,
				2193
			],
			[
				12,
				-4
			]
		],
		[
			[
				448,
				2147
			],
			[
				37,
				46
			]
		],
		[
			[
				3695,
				2144
			],
			[
				77,
				10
			],
			[
				38,
				-88
			]
		],
		[
			[
				3810,
				2066
			],
			[
				-21,
				-195
			]
		],
		[
			[
				3922,
				2245
			],
			[
				11,
				-150
			]
		],
		[
			[
				3933,
				2095
			],
			[
				-77,
				-70
			]
		],
		[
			[
				3856,
				2025
			],
			[
				-46,
				41
			]
		],
		[
			[
				3709,
				2255
			],
			[
				54,
				13
			]
		],
		[
			[
				3763,
				2268
			],
			[
				131,
				13
			]
		],
		[
			[
				3763,
				2439
			],
			[
				0,
				-171
			]
		],
		[
			[
				3691,
				2539
			],
			[
				182,
				42
			]
		],
		[
			[
				3873,
				2581
			],
			[
				58,
				-202
			]
		],
		[
			[
				3873,
				2581
			],
			[
				10,
				36
			]
		],
		[
			[
				4913,
				3168
			],
			[
				65,
				56
			]
		],
		[
			[
				4978,
				3224
			],
			[
				219,
				74
			],
			[
				83,
				-237
			]
		],
		[
			[
				5293,
				9136
			],
			[
				-584,
				-147
			]
		],
		[
			[
				4709,
				8989
			],
			[
				-102,
				38
			]
		],
		[
			[
				4607,
				9124
			],
			[
				-2,
				27
			]
		],
		[
			[
				4561,
				9373
			],
			[
				-98,
				36
			]
		],
		[
			[
				4721,
				9558
			],
			[
				-180,
				189
			]
		],
		[
			[
				4679,
				10100
			],
			[
				53,
				82
			],
			[
				222,
				-9
			]
		],
		[
			[
				4954,
				10173
			],
			[
				5,
				-104
			],
			[
				-196,
				-98
			],
			[
				35,
				-280
			],
			[
				72,
				-56
			]
		],
		[
			[
				4611,
				10112
			],
			[
				62,
				-21
			]
		],
		[
			[
				4560,
				9793
			],
			[
				-47,
				24
			],
			[
				65,
				33
			]
		],
		[
			[
				5444,
				3892
			],
			[
				-366,
				36
			],
			[
				-9,
				-63
			],
			[
				-172,
				-33
			]
		],
		[
			[
				4897,
				3832
			],
			[
				-99,
				120
			]
		],
		[
			[
				4793,
				3975
			],
			[
				89,
				-20
			],
			[
				88,
				65
			],
			[
				1,
				135
			],
			[
				202,
				221
			],
			[
				-22,
				74
			],
			[
				115,
				-72
			]
		],
		[
			[
				5128,
				7288
			],
			[
				-224,
				124
			]
		],
		[
			[
				4904,
				7412
			],
			[
				-19,
				101
			],
			[
				-137,
				-23
			],
			[
				-80,
				145
			],
			[
				-132,
				44
			]
		],
		[
			[
				4349,
				7769
			],
			[
				-193,
				124
			]
		],
		[
			[
				4156,
				7893
			],
			[
				-15,
				25
			]
		],
		[
			[
				4141,
				7918
			],
			[
				-50,
				189
			],
			[
				71,
				35
			]
		],
		[
			[
				4162,
				8142
			],
			[
				164,
				35
			]
		],
		[
			[
				4162,
				8142
			],
			[
				-96,
				200
			]
		],
		[
			[
				4141,
				7918
			],
			[
				-231,
				156
			],
			[
				29,
				62
			]
		],
		[
			[
				3939,
				8136
			],
			[
				55,
				57
			],
			[
				168,
				-51
			]
		],
		[
			[
				927,
				1504
			],
			[
				84,
				-3
			],
			[
				69,
				111
			]
		],
		[
			[
				1080,
				1612
			],
			[
				223,
				98
			],
			[
				76,
				133
			],
			[
				122,
				12
			]
		],
		[
			[
				748,
				1252
			],
			[
				-81,
				-148
			]
		],
		[
			[
				667,
				1104
			],
			[
				-48,
				-13
			]
		],
		[
			[
				621,
				1301
			],
			[
				40,
				-4
			]
		],
		[
			[
				661,
				1297
			],
			[
				87,
				-45
			]
		],
		[
			[
				748,
				1252
			],
			[
				58,
				-32
			]
		],
		[
			[
				806,
				1220
			],
			[
				74,
				-144
			]
		],
		[
			[
				856,
				987
			],
			[
				-61,
				-19
			],
			[
				-48,
				109
			],
			[
				-80,
				27
			]
		],
		[
			[
				806,
				1220
			],
			[
				190,
				136
			]
		],
		[
			[
				720,
				1399
			],
			[
				-59,
				-102
			]
		],
		[
			[
				709,
				1461
			],
			[
				6,
				4
			],
			[
				5,
				-66
			]
		],
		[
			[
				679,
				1463
			],
			[
				2,
				-5
			]
		],
		[
			[
				696,
				1560
			],
			[
				-34,
				-35
			]
		],
		[
			[
				2225,
				197
			],
			[
				21,
				-34
			]
		],
		[
			[
				2098,
				288
			],
			[
				127,
				-91
			]
		],
		[
			[
				4175,
				4978
			],
			[
				-222,
				-82
			],
			[
				17,
				68
			],
			[
				-53,
				32
			]
		],
		[
			[
				3917,
				4996
			],
			[
				-90,
				52
			],
			[
				-38,
				123
			]
		],
		[
			[
				3917,
				4996
			],
			[
				-112,
				-89
			],
			[
				-13,
				-121
			],
			[
				-96,
				11
			]
		],
		[
			[
				2164,
				735
			],
			[
				-12,
				-72
			],
			[
				122,
				-159
			],
			[
				56,
				97
			]
		],
		[
			[
				2330,
				601
			],
			[
				-4,
				-138
			]
		],
		[
			[
				2326,
				463
			],
			[
				-47,
				-100
			],
			[
				-78,
				35
			]
		],
		[
			[
				2201,
				398
			],
			[
				-73,
				-31
			],
			[
				-19,
				181
			],
			[
				-54,
				-26
			],
			[
				-10,
				74
			]
		],
		[
			[
				743,
				6116
			],
			[
				90,
				111
			],
			[
				-12,
				225
			]
		],
		[
			[
				734,
				5512
			],
			[
				12,
				-32
			],
			[
				-98,
				-35
			],
			[
				-8,
				-41
			],
			[
				-141,
				-2
			],
			[
				-76,
				-25
			],
			[
				-1,
				-1
			]
		],
		[
			[
				2201,
				398
			],
			[
				24,
				-201
			]
		],
		[
			[
				4154,
				3890
			],
			[
				-26,
				149
			],
			[
				59,
				131
			],
			[
				-39,
				67
			]
		],
		[
			[
				4148,
				4237
			],
			[
				28,
				36
			]
		],
		[
			[
				4014,
				3952
			],
			[
				3,
				218
			]
		],
		[
			[
				4017,
				4170
			],
			[
				131,
				67
			]
		],
		[
			[
				1500,
				4047
			],
			[
				-58,
				-217
			]
		],
		[
			[
				1442,
				3830
			],
			[
				-76,
				-26
			]
		],
		[
			[
				1269,
				3771
			],
			[
				1,
				45
			]
		],
		[
			[
				1303,
				3353
			],
			[
				-57,
				39
			]
		],
		[
			[
				1252,
				3408
			],
			[
				-39,
				133
			],
			[
				60,
				-2
			],
			[
				18,
				81
			],
			[
				-100,
				30
			]
		],
		[
			[
				1870,
				3089
			],
			[
				-180,
				37
			],
			[
				-36,
				107
			],
			[
				-222,
				131
			],
			[
				-111,
				-26
			]
		],
		[
			[
				1510,
				3813
			],
			[
				44,
				-90
			],
			[
				84,
				-9
			],
			[
				-38,
				-93
			],
			[
				92,
				7
			],
			[
				14,
				-92
			],
			[
				73,
				-38
			],
			[
				-53,
				-13
			],
			[
				39,
				-192
			],
			[
				182,
				-53
			]
		],
		[
			[
				1442,
				3830
			],
			[
				32,
				-14
			]
		],
		[
			[
				1563,
				3839
			],
			[
				194,
				70
			],
			[
				48,
				84
			],
			[
				309,
				-108
			]
		],
		[
			[
				4827,
				6417
			],
			[
				-240,
				234
			],
			[
				-19,
				124
			],
			[
				-132,
				11
			],
			[
				-279,
				274
			]
		],
		[
			[
				4157,
				7060
			],
			[
				16,
				71
			]
		],
		[
			[
				4315,
				2050
			],
			[
				122,
				-115
			],
			[
				-24,
				-92
			]
		],
		[
			[
				4194,
				2200
			],
			[
				-81,
				-1
			]
		],
		[
			[
				4198,
				2317
			],
			[
				-4,
				-117
			]
		],
		[
			[
				8052,
				14603
			],
			[
				-178,
				166
			],
			[
				-28,
				132
			],
			[
				-80,
				-25
			],
			[
				-84,
				97
			]
		],
		[
			[
				7682,
				14973
			],
			[
				30,
				44
			],
			[
				-141,
				144
			],
			[
				22,
				106
			]
		],
		[
			[
				3065,
				1030
			],
			[
				-107,
				82
			]
		],
		[
			[
				2958,
				1112
			],
			[
				33,
				120
			]
		],
		[
			[
				2991,
				1232
			],
			[
				121,
				68
			]
		],
		[
			[
				3095,
				1038
			],
			[
				0,
				1
			]
		],
		[
			[
				2937,
				916
			],
			[
				23,
				10
			]
		],
		[
			[
				2782,
				648
			],
			[
				-103,
				5
			],
			[
				-40,
				128
			]
		],
		[
			[
				2639,
				781
			],
			[
				76,
				-57
			],
			[
				102,
				212
			]
		],
		[
			[
				2817,
				936
			],
			[
				39,
				18
			],
			[
				44,
				-90
			],
			[
				36,
				52
			]
		],
		[
			[
				2578,
				758
			],
			[
				61,
				23
			]
		],
		[
			[
				7129,
				14275
			],
			[
				74,
				138
			]
		],
		[
			[
				7203,
				14413
			],
			[
				176,
				53
			],
			[
				117,
				-289
			],
			[
				128,
				90
			],
			[
				374,
				-80
			]
		],
		[
			[
				7982,
				13815
			],
			[
				-214,
				47
			],
			[
				-277,
				227
			],
			[
				-84,
				-6
			]
		],
		[
			[
				7075,
				13441
			],
			[
				29,
				233
			]
		],
		[
			[
				7104,
				13674
			],
			[
				232,
				403
			]
		],
		[
			[
				7580,
				14936
			],
			[
				102,
				37
			]
		],
		[
			[
				7203,
				14413
			],
			[
				-55,
				20
			],
			[
				-8,
				99
			],
			[
				68,
				66
			]
		],
		[
			[
				7205,
				14749
			],
			[
				89,
				41
			],
			[
				31,
				-30
			],
			[
				32,
				45
			],
			[
				58,
				-41
			],
			[
				42,
				17
			],
			[
				19,
				-5
			],
			[
				55,
				39
			],
			[
				52,
				-9
			],
			[
				4,
				57
			],
			[
				-72,
				12
			],
			[
				-6,
				75
			]
		],
		[
			[
				691,
				3571
			],
			[
				59,
				58
			],
			[
				121,
				-37
			]
		],
		[
			[
				1760,
				7085
			],
			[
				57,
				-115
			],
			[
				-45,
				-85
			]
		],
		[
			[
				1503,
				7002
			],
			[
				-134,
				-27
			],
			[
				-18,
				-20
			],
			[
				-66,
				-5
			]
		],
		[
			[
				285,
				3486
			],
			[
				5,
				4
			],
			[
				3,
				3
			],
			[
				0,
				19
			],
			[
				0,
				11
			],
			[
				1,
				-1
			],
			[
				1,
				0
			]
		],
		[
			[
				313,
				3510
			],
			[
				6,
				-4
			]
		],
		[
			[
				329,
				3505
			],
			[
				5,
				31
			]
		],
		[
			[
				3733,
				6799
			],
			[
				168,
				-226
			]
		],
		[
			[
				3901,
				6573
			],
			[
				33,
				-128
			],
			[
				-155,
				-236
			],
			[
				-6,
				-144
			]
		],
		[
			[
				4699,
				6364
			],
			[
				-200,
				87
			]
		],
		[
			[
				4499,
				6451
			],
			[
				-134,
				29
			],
			[
				-32,
				192
			],
			[
				-75,
				-16
			],
			[
				-268,
				253
			],
			[
				167,
				151
			]
		],
		[
			[
				4499,
				6451
			],
			[
				-154,
				-101
			],
			[
				-14,
				-154
			],
			[
				-61,
				-16
			]
		],
		[
			[
				4270,
				6180
			],
			[
				-93,
				130
			],
			[
				-20,
				170
			],
			[
				-256,
				93
			]
		],
		[
			[
				5223,
				5595
			],
			[
				-199,
				-57
			],
			[
				-58,
				147
			],
			[
				-39,
				-190
			]
		],
		[
			[
				3973,
				6090
			],
			[
				67,
				0
			],
			[
				26,
				-78
			],
			[
				210,
				97
			],
			[
				5,
				-52
			],
			[
				-11,
				123
			]
		],
		[
			[
				2119,
				7236
			],
			[
				76,
				-152
			],
			[
				157,
				-48
			],
			[
				-37,
				-200
			],
			[
				123,
				-184
			]
		],
		[
			[
				9600,
				18478
			],
			[
				92,
				-57
			]
		],
		[
			[
				10265,
				17274
			],
			[
				-44,
				116
			],
			[
				-170,
				78
			],
			[
				23,
				71
			],
			[
				-123,
				-79
			],
			[
				-129,
				138
			]
		],
		[
			[
				9760,
				17553
			],
			[
				-146,
				-26
			],
			[
				-133,
				106
			]
		],
		[
			[
				9694,
				18360
			],
			[
				165,
				-44
			],
			[
				-23,
				-84
			],
			[
				219,
				-134
			]
		],
		[
			[
				7956,
				16279
			],
			[
				106,
				62
			],
			[
				-124,
				293
			]
		],
		[
			[
				1692,
				6832
			],
			[
				-34,
				-55
			],
			[
				-110,
				40
			]
		],
		[
			[
				1529,
				6797
			],
			[
				-19,
				-83
			]
		],
		[
			[
				3580,
				1867
			],
			[
				-65,
				1
			]
		],
		[
			[
				3515,
				1868
			],
			[
				-131,
				169
			],
			[
				25,
				173
			]
		],
		[
			[
				3366,
				8528
			],
			[
				-4,
				8
			]
		],
		[
			[
				3482,
				8314
			],
			[
				-146,
				156
			],
			[
				32,
				43
			]
		],
		[
			[
				3627,
				8363
			],
			[
				-64,
				-81
			],
			[
				-74,
				-19
			],
			[
				-7,
				51
			]
		],
		[
			[
				3452,
				8818
			],
			[
				84,
				-54
			]
		],
		[
			[
				3811,
				8975
			],
			[
				-63,
				-106
			]
		],
		[
			[
				3650,
				9032
			],
			[
				161,
				-57
			]
		],
		[
			[
				3969,
				8804
			],
			[
				-156,
				-140
			],
			[
				-31,
				-186
			]
		],
		[
			[
				3811,
				8975
			],
			[
				87,
				21
			],
			[
				66,
				-116
			]
		],
		[
			[
				4305,
				3618
			],
			[
				107,
				-25
			]
		],
		[
			[
				4412,
				3593
			],
			[
				27,
				-127
			]
		],
		[
			[
				4439,
				3466
			],
			[
				-59,
				-88
			],
			[
				26,
				-101
			]
		],
		[
			[
				4406,
				3277
			],
			[
				-116,
				5
			]
		],
		[
			[
				4400,
				3881
			],
			[
				45,
				-179
			],
			[
				-33,
				-109
			]
		],
		[
			[
				4406,
				3277
			],
			[
				10,
				-104
			]
		],
		[
			[
				4439,
				3466
			],
			[
				94,
				-17
			]
		],
		[
			[
				4533,
				3449
			],
			[
				14,
				-267
			]
		],
		[
			[
				4533,
				3449
			],
			[
				106,
				178
			]
		],
		[
			[
				4317,
				3011
			],
			[
				42,
				-14
			]
		],
		[
			[
				4359,
				2997
			],
			[
				7,
				-155
			]
		],
		[
			[
				4389,
				3134
			],
			[
				83,
				-63
			]
		],
		[
			[
				4472,
				3071
			],
			[
				-72,
				-78
			]
		],
		[
			[
				4400,
				2993
			],
			[
				-41,
				4
			]
		],
		[
			[
				4305,
				3049
			],
			[
				27,
				106
			]
		],
		[
			[
				4117,
				8886
			],
			[
				-13,
				29
			]
		],
		[
			[
				4709,
				8989
			],
			[
				-73,
				-39
			]
		],
		[
			[
				4953,
				10835
			],
			[
				-89,
				-45
			]
		],
		[
			[
				2926,
				4408
			],
			[
				-63,
				12
			],
			[
				-74,
				-163
			]
		],
		[
			[
				2789,
				4257
			],
			[
				-172,
				30
			],
			[
				-91,
				127
			],
			[
				-201,
				40
			]
		],
		[
			[
				2789,
				4257
			],
			[
				85,
				-204
			]
		],
		[
			[
				2874,
				4053
			],
			[
				-111,
				-182
			]
		],
		[
			[
				2619,
				3831
			],
			[
				-86,
				19
			],
			[
				48,
				182
			],
			[
				-438,
				381
			]
		],
		[
			[
				3742,
				3149
			],
			[
				30,
				87
			],
			[
				100,
				46
			],
			[
				121,
				-144
			]
		],
		[
			[
				2874,
				4053
			],
			[
				110,
				66
			],
			[
				55,
				-58
			],
			[
				160,
				96
			]
		],
		[
			[
				3262,
				3963
			],
			[
				-119,
				-217
			],
			[
				-97,
				-56
			]
		],
		[
			[
				1344,
				890
			],
			[
				66,
				-3
			],
			[
				-17,
				-87
			],
			[
				101,
				17
			]
		],
		[
			[
				1494,
				817
			],
			[
				68,
				-259
			],
			[
				-97,
				-2
			],
			[
				-40,
				-184
			]
		],
		[
			[
				2992,
				6172
			],
			[
				206,
				-196
			]
		],
		[
			[
				3198,
				5976
			],
			[
				-17,
				-65
			],
			[
				95,
				-48
			],
			[
				-210,
				-92
			],
			[
				-6,
				-250
			],
			[
				66,
				-48
			]
		],
		[
			[
				2647,
				5232
			],
			[
				-15,
				75
			],
			[
				99,
				60
			],
			[
				-69,
				143
			],
			[
				155,
				29
			],
			[
				77,
				167
			],
			[
				82,
				39
			],
			[
				-84,
				133
			],
			[
				2,
				280
			]
		],
		[
			[
				2894,
				6158
			],
			[
				98,
				14
			]
		],
		[
			[
				2174,
				1710
			],
			[
				-448,
				-240
			]
		],
		[
			[
				1610,
				1850
			],
			[
				129,
				159
			],
			[
				158,
				-12
			],
			[
				85,
				173
			]
		],
		[
			[
				1832,
				99
			],
			[
				105,
				161
			]
		],
		[
			[
				1937,
				260
			],
			[
				69,
				-20
			]
		],
		[
			[
				2326,
				463
			],
			[
				115,
				-61
			]
		],
		[
			[
				2441,
				402
			],
			[
				-36,
				-116
			],
			[
				17,
				-37
			]
		],
		[
			[
				2849,
				7867
			],
			[
				-105,
				-96
			],
			[
				-103,
				-23
			],
			[
				-15,
				47
			],
			[
				-152,
				-92
			]
		],
		[
			[
				3487,
				2932
			],
			[
				-17,
				56
			],
			[
				98,
				54
			],
			[
				-68,
				155
			]
		],
		[
			[
				3500,
				3197
			],
			[
				82,
				141
			]
		],
		[
			[
				4333,
				2164
			],
			[
				-105,
				2
			]
		],
		[
			[
				4228,
				2166
			],
			[
				-34,
				34
			]
		],
		[
			[
				4228,
				2166
			],
			[
				-48,
				-79
			]
		],
		[
			[
				659,
				2887
			],
			[
				-9,
				12
			]
		],
		[
			[
				4399,
				2630
			],
			[
				-57,
				-244
			]
		],
		[
			[
				579,
				2963
			],
			[
				-92,
				-132
			]
		],
		[
			[
				427,
				2863
			],
			[
				-4,
				3
			]
		],
		[
			[
				6320,
				12610
			],
			[
				38,
				-57
			],
			[
				164,
				11
			],
			[
				69,
				-128
			],
			[
				175,
				-32
			]
		],
		[
			[
				5937,
				12641
			],
			[
				-19,
				62
			]
		],
		[
			[
				5888,
				12865
			],
			[
				-70,
				193
			],
			[
				-115,
				0
			]
		],
		[
			[
				5640,
				13076
			],
			[
				-54,
				-12
			]
		],
		[
			[
				5503,
				13145
			],
			[
				-49,
				-6
			]
		],
		[
			[
				6146,
				13713
			],
			[
				209,
				-40
			],
			[
				164,
				-233
			],
			[
				127,
				33
			]
		],
		[
			[
				6646,
				13473
			],
			[
				9,
				-155
			]
		],
		[
			[
				6651,
				13905
			],
			[
				-5,
				-432
			]
		],
		[
			[
				6666,
				13997
			],
			[
				-19,
				-82
			]
		],
		[
			[
				6624,
				14024
			],
			[
				42,
				-27
			]
		],
		[
			[
				6666,
				13997
			],
			[
				112,
				-55
			],
			[
				78,
				39
			],
			[
				248,
				-307
			]
		],
		[
			[
				2267,
				1072
			],
			[
				-97,
				-51
			],
			[
				-116,
				129
			]
		],
		[
			[
				14148,
				19525
			],
			[
				60,
				104
			],
			[
				-21,
				53
			],
			[
				54,
				33
			],
			[
				29,
				86
			]
		],
		[
			[
				13917,
				19316
			],
			[
				-218,
				60
			]
		],
		[
			[
				12221,
				18815
			],
			[
				-102,
				80
			]
		],
		[
			[
				12351,
				18967
			],
			[
				-22,
				-144
			],
			[
				-108,
				-8
			]
		],
		[
			[
				12374,
				19216
			],
			[
				0,
				0
			],
			[
				-12,
				-9
			],
			[
				-4,
				-66
			]
		],
		[
			[
				12402,
				19538
			],
			[
				93,
				-240
			],
			[
				-119,
				-81
			]
		],
		[
			[
				12221,
				18815
			],
			[
				-12,
				-10
			]
		],
		[
			[
				12162,
				18763
			],
			[
				130,
				-241
			],
			[
				-222,
				-10
			],
			[
				-42,
				-82
			]
		],
		[
			[
				12746,
				19022
			],
			[
				225,
				123
			]
		],
		[
			[
				12858,
				18974
			],
			[
				-112,
				48
			]
		],
		[
			[
				13222,
				18519
			],
			[
				-159,
				355
			],
			[
				-136,
				59
			]
		],
		[
			[
				13037,
				19238
			],
			[
				255,
				126
			]
		],
		[
			[
				2251,
				884
			],
			[
				121,
				-180
			],
			[
				-42,
				-103
			]
		],
		[
			[
				12443,
				18996
			],
			[
				33,
				-22
			],
			[
				81,
				-1
			],
			[
				72,
				80
			],
			[
				117,
				-31
			]
		],
		[
			[
				2702,
				1931
			],
			[
				-164,
				28
			]
		],
		[
			[
				2538,
				1959
			],
			[
				-144,
				140
			]
		],
		[
			[
				2394,
				2099
			],
			[
				126,
				82
			],
			[
				-17,
				252
			]
		],
		[
			[
				2503,
				2433
			],
			[
				214,
				-180
			],
			[
				15,
				-123
			],
			[
				77,
				36
			],
			[
				91,
				-69
			]
		],
		[
			[
				2503,
				2433
			],
			[
				-27,
				-19
			],
			[
				-8,
				23
			]
		],
		[
			[
				2468,
				2437
			],
			[
				-26,
				221
			],
			[
				61,
				93
			]
		],
		[
			[
				2551,
				2775
			],
			[
				112,
				91
			],
			[
				185,
				-9
			]
		],
		[
			[
				2848,
				2857
			],
			[
				65,
				-139
			],
			[
				-13,
				-144
			],
			[
				95,
				-82
			],
			[
				-162,
				-125
			]
		],
		[
			[
				3109,
				2824
			],
			[
				-100,
				-97
			],
			[
				-88,
				206
			],
			[
				-73,
				-76
			]
		],
		[
			[
				3104,
				2303
			],
			[
				-53,
				-155
			]
		],
		[
			[
				3570,
				1951
			],
			[
				29,
				110
			],
			[
				77,
				-4
			]
		],
		[
			[
				3755,
				1844
			],
			[
				55,
				-172
			]
		],
		[
			[
				3933,
				2095
			],
			[
				58,
				-4
			]
		],
		[
			[
				3922,
				1959
			],
			[
				-66,
				66
			]
		],
		[
			[
				3954,
				1953
			],
			[
				0,
				0
			],
			[
				-4,
				-1
			],
			[
				-4,
				0
			],
			[
				-6,
				11
			],
			[
				0,
				0
			]
		],
		[
			[
				3986,
				1919
			],
			[
				-6,
				10
			]
		],
		[
			[
				4661,
				8172
			],
			[
				51,
				213
			],
			[
				137,
				195
			]
		],
		[
			[
				4646,
				8861
			],
			[
				203,
				-281
			]
		],
		[
			[
				3610,
				7942
			],
			[
				157,
				53
			],
			[
				42,
				173
			]
		],
		[
			[
				3829,
				8195
			],
			[
				110,
				-59
			]
		],
		[
			[
				4156,
				7893
			],
			[
				-101,
				-83
			],
			[
				-381,
				-107
			]
		],
		[
			[
				6357,
				10458
			],
			[
				-380,
				-146
			],
			[
				-196,
				-342
			]
		],
		[
			[
				5781,
				9970
			],
			[
				-35,
				381
			],
			[
				97,
				-3
			],
			[
				169,
				448
			],
			[
				138,
				95
			]
		],
		[
			[
				1080,
				1612
			],
			[
				-75,
				79
			],
			[
				22,
				80
			]
		],
		[
			[
				1091,
				2038
			],
			[
				0,
				0
			],
			[
				11,
				-17
			],
			[
				5,
				9
			],
			[
				0,
				0
			]
		],
		[
			[
				1115,
				2030
			],
			[
				73,
				97
			],
			[
				332,
				-4
			]
		],
		[
			[
				927,
				1917
			],
			[
				45,
				87
			]
		],
		[
			[
				2958,
				1112
			],
			[
				-141,
				-80
			]
		],
		[
			[
				2817,
				1032
			],
			[
				-95,
				135
			],
			[
				84,
				136
			]
		],
		[
			[
				2839,
				1353
			],
			[
				152,
				-121
			]
		],
		[
			[
				773,
				5381
			],
			[
				288,
				130
			]
		],
		[
			[
				1061,
				5511
			],
			[
				-19,
				-57
			],
			[
				-98,
				-57
			],
			[
				-35,
				-82
			],
			[
				21,
				-19
			],
			[
				64,
				21
			],
			[
				48,
				-33
			],
			[
				38,
				26
			],
			[
				78,
				15
			],
			[
				77,
				36
			],
			[
				81,
				-5
			],
			[
				28,
				30
			],
			[
				23,
				-25
			],
			[
				0,
				-41
			]
		],
		[
			[
				1211,
				5136
			],
			[
				-94,
				97
			],
			[
				-248,
				-70
			],
			[
				-62,
				99
			],
			[
				-186,
				7
			]
		],
		[
			[
				1109,
				5593
			],
			[
				-48,
				-82
			]
		],
		[
			[
				814,
				5911
			],
			[
				-1,
				-136
			],
			[
				-134,
				-25
			]
		],
		[
			[
				612,
				6092
			],
			[
				-45,
				-58
			]
		],
		[
			[
				387,
				6084
			],
			[
				51,
				-45
			],
			[
				58,
				87
			],
			[
				50,
				-21
			]
		],
		[
			[
				3112,
				5159
			],
			[
				137,
				50
			],
			[
				0,
				142
			],
			[
				209,
				10
			],
			[
				125,
				200
			],
			[
				78,
				380
			]
		],
		[
			[
				3702,
				5766
			],
			[
				-60,
				-72
			],
			[
				67,
				-228
			],
			[
				-85,
				-253
			]
		],
		[
			[
				2992,
				6172
			],
			[
				54,
				166
			],
			[
				132,
				107
			],
			[
				22,
				87
			],
			[
				-73,
				137
			]
		],
		[
			[
				3562,
				5998
			],
			[
				-185,
				82
			],
			[
				-179,
				-104
			]
		],
		[
			[
				2286,
				6416
			],
			[
				67,
				-197
			],
			[
				93,
				-70
			],
			[
				256,
				8
			]
		],
		[
			[
				2702,
				6157
			],
			[
				-107,
				-108
			],
			[
				61,
				-64
			],
			[
				-39,
				-66
			],
			[
				-386,
				-264
			]
		],
		[
			[
				2894,
				6158
			],
			[
				-192,
				-1
			]
		],
		[
			[
				1542,
				368
			],
			[
				-21,
				-107
			]
		],
		[
			[
				1450,
				378
			],
			[
				92,
				-10
			]
		],
		[
			[
				1570,
				221
			],
			[
				34,
				-81
			]
		],
		[
			[
				3500,
				3197
			],
			[
				-182,
				143
			],
			[
				-23,
				202
			]
		],
		[
			[
				1155,
				3116
			],
			[
				-48,
				-158
			],
			[
				-96,
				-90
			],
			[
				25,
				-90
			]
		],
		[
			[
				4025,
				2610
			],
			[
				-66,
				-11
			]
		],
		[
			[
				3876,
				2663
			],
			[
				24,
				111
			]
		],
		[
			[
				5718,
				15381
			],
			[
				118,
				-116
			]
		],
		[
			[
				7375,
				16128
			],
			[
				-63,
				62
			]
		],
		[
			[
				7547,
				16563
			],
			[
				12,
				-5
			],
			[
				21,
				-74
			],
			[
				53,
				40
			],
			[
				-25,
				27
			],
			[
				45,
				16
			],
			[
				8,
				37
			],
			[
				4,
				186
			]
		],
		[
			[
				7510,
				16145
			],
			[
				-135,
				-17
			]
		],
		[
			[
				6992,
				16422
			],
			[
				55,
				21
			]
		],
		[
			[
				6967,
				16400
			],
			[
				25,
				22
			]
		],
		[
			[
				7054,
				16446
			],
			[
				45,
				39
			]
		],
		[
			[
				7225,
				16272
			],
			[
				-118,
				5
			],
			[
				10,
				71
			]
		],
		[
			[
				7102,
				16488
			],
			[
				69,
				31
			],
			[
				60,
				3
			],
			[
				35,
				55
			]
		],
		[
			[
				1645,
				7296
			],
			[
				262,
				115
			]
		],
		[
			[
				2171,
				7409
			],
			[
				-100,
				-161
			]
		],
		[
			[
				1607,
				7295
			],
			[
				38,
				1
			]
		],
		[
			[
				1228,
				6899
			],
			[
				78,
				-80
			]
		],
		[
			[
				8832,
				16227
			],
			[
				-247,
				190
			]
		],
		[
			[
				8772,
				16566
			],
			[
				96,
				-167
			],
			[
				166,
				-26
			],
			[
				-31,
				-142
			]
		],
		[
			[
				17189,
				19489
			],
			[
				-364,
				-388
			]
		],
		[
			[
				14458,
				18223
			],
			[
				129,
				117
			]
		],
		[
			[
				14587,
				18340
			],
			[
				212,
				28
			],
			[
				-14,
				123
			],
			[
				524,
				119
			],
			[
				-1,
				89
			],
			[
				245,
				119
			],
			[
				41,
				164
			]
		],
		[
			[
				14795,
				18095
			],
			[
				-305,
				66
			],
			[
				-32,
				62
			]
		],
		[
			[
				16657,
				18993
			],
			[
				202,
				-52
			],
			[
				-56,
				-394
			]
		],
		[
			[
				16885,
				18402
			],
			[
				10,
				-82
			],
			[
				-413,
				-52
			],
			[
				-270,
				-127
			]
		],
		[
			[
				14693,
				19374
			],
			[
				-106,
				-1034
			]
		],
		[
			[
				14458,
				18223
			],
			[
				-186,
				-236
			],
			[
				-168,
				-27
			],
			[
				-456,
				134
			],
			[
				-250,
				-18
			]
		],
		[
			[
				14205,
				16674
			],
			[
				-229,
				4
			],
			[
				-237,
				198
			],
			[
				-43,
				179
			],
			[
				-198,
				143
			],
			[
				-110,
				210
			],
			[
				133,
				294
			],
			[
				-129,
				163
			]
		],
		[
			[
				17862,
				19085
			],
			[
				-456,
				-261
			]
		],
		[
			[
				17406,
				18824
			],
			[
				-328,
				66
			],
			[
				50,
				37
			],
			[
				-303,
				174
			]
		],
		[
			[
				2817,
				1032
			],
			[
				-5,
				-28
			]
		],
		[
			[
				2812,
				1004
			],
			[
				-33,
				-33
			],
			[
				-139,
				95
			],
			[
				-45,
				-82
			],
			[
				-52,
				112
			],
			[
				-255,
				17
			]
		],
		[
			[
				3133,
				8188
			],
			[
				49,
				-67
			],
			[
				55,
				2
			],
			[
				34,
				-23
			]
		],
		[
			[
				3271,
				8100
			],
			[
				-55,
				-23
			],
			[
				13,
				-80
			]
		],
		[
			[
				3482,
				8314
			],
			[
				-211,
				-214
			]
		],
		[
			[
				1635,
				1287
			],
			[
				-79,
				-46
			],
			[
				-62,
				-424
			]
		],
		[
			[
				737,
				1624
			],
			[
				2,
				-9
			]
		],
		[
			[
				667,
				2258
			],
			[
				58,
				-73
			]
		],
		[
			[
				485,
				2193
			],
			[
				30,
				106
			]
		],
		[
			[
				565,
				2311
			],
			[
				14,
				-57
			]
		],
		[
			[
				260,
				4291
			],
			[
				-5,
				41
			]
		],
		[
			[
				556,
				4180
			],
			[
				32,
				122
			],
			[
				138,
				89
			]
		],
		[
			[
				311,
				4109
			],
			[
				-14,
				15
			]
		],
		[
			[
				263,
				4261
			],
			[
				-20,
				28
			]
		],
		[
			[
				244,
				4295
			],
			[
				5,
				-3
			]
		],
		[
			[
				369,
				3984
			],
			[
				14,
				15
			]
		],
		[
			[
				1603,
				7345
			],
			[
				42,
				-49
			]
		],
		[
			[
				2906,
				4459
			],
			[
				192,
				236
			]
		],
		[
			[
				3098,
				4695
			],
			[
				152,
				83
			],
			[
				50,
				207
			]
		],
		[
			[
				3454,
				4812
			],
			[
				-213,
				-113
			],
			[
				100,
				-87
			],
			[
				21,
				-205
			]
		],
		[
			[
				3362,
				4407
			],
			[
				-109,
				8
			],
			[
				-95,
				-154
			]
		],
		[
			[
				2747,
				4524
			],
			[
				55,
				100
			],
			[
				-40,
				78
			],
			[
				124,
				116
			],
			[
				20,
				119
			]
		],
		[
			[
				2906,
				4937
			],
			[
				192,
				-242
			]
		],
		[
			[
				3362,
				4407
			],
			[
				178,
				-97
			]
		],
		[
			[
				2906,
				4937
			],
			[
				-88,
				66
			],
			[
				45,
				128
			],
			[
				-72,
				95
			]
		],
		[
			[
				4842,
				2514
			],
			[
				-46,
				74
			]
		],
		[
			[
				4678,
				2476
			],
			[
				-117,
				-43
			],
			[
				-41,
				45
			]
		],
		[
			[
				4520,
				2478
			],
			[
				-43,
				85
			]
		],
		[
			[
				4477,
				2563
			],
			[
				31,
				41
			]
		],
		[
			[
				4477,
				2563
			],
			[
				-65,
				-92
			],
			[
				31,
				-73
			]
		],
		[
			[
				4443,
				2398
			],
			[
				-54,
				-67
			]
		],
		[
			[
				4520,
				2478
			],
			[
				-42,
				-93
			]
		],
		[
			[
				4478,
				2385
			],
			[
				-35,
				13
			]
		],
		[
			[
				4688,
				2467
			],
			[
				39,
				-190
			]
		],
		[
			[
				4727,
				2277
			],
			[
				-219,
				7
			]
		],
		[
			[
				4508,
				2284
			],
			[
				-30,
				101
			]
		],
		[
			[
				4508,
				2284
			],
			[
				-29,
				-104
			]
		],
		[
			[
				4746,
				2052
			],
			[
				-14,
				-95
			]
		],
		[
			[
				4727,
				2277
			],
			[
				19,
				-225
			]
		],
		[
			[
				5735,
				11439
			],
			[
				181,
				85
			],
			[
				-60,
				264
			],
			[
				97,
				-43
			],
			[
				131,
				186
			],
			[
				74,
				-72
			]
		],
		[
			[
				6158,
				11859
			],
			[
				53,
				-331
			],
			[
				105,
				-37
			],
			[
				-77,
				-279
			],
			[
				78,
				-89
			],
			[
				-145,
				-228
			]
		],
		[
			[
				6235,
				11916
			],
			[
				-77,
				-57
			]
		],
		[
			[
				5251,
				12313
			],
			[
				3,
				8
			]
		],
		[
			[
				5239,
				12286
			],
			[
				7,
				16
			]
		],
		[
			[
				5556,
				12283
			],
			[
				-47,
				-85
			]
		],
		[
			[
				2550,
				535
			],
			[
				-45,
				6
			],
			[
				-64,
				-139
			]
		],
		[
			[
				4773,
				4121
			],
			[
				-257,
				171
			]
		],
		[
			[
				4516,
				4292
			],
			[
				-3,
				409
			]
		],
		[
			[
				4380,
				4121
			],
			[
				-11,
				152
			]
		],
		[
			[
				4369,
				4273
			],
			[
				147,
				19
			]
		],
		[
			[
				4339,
				4977
			],
			[
				91,
				-322
			],
			[
				1,
				-232
			],
			[
				-39,
				-88
			],
			[
				-55,
				4
			],
			[
				32,
				-66
			]
		],
		[
			[
				4897,
				3832
			],
			[
				10,
				-196
			]
		],
		[
			[
				4907,
				3636
			],
			[
				-139,
				19
			],
			[
				9,
				-91
			],
			[
				-71,
				-24
			]
		],
		[
			[
				4907,
				3636
			],
			[
				12,
				-6
			]
		],
		[
			[
				4919,
				3630
			],
			[
				69,
				-129
			],
			[
				-10,
				-277
			]
		],
		[
			[
				8870,
				16548
			],
			[
				164,
				37
			],
			[
				115,
				-141
			]
		],
		[
			[
				9297,
				16836
			],
			[
				102,
				78
			]
		],
		[
			[
				9399,
				16914
			],
			[
				142,
				-5
			],
			[
				8,
				-219
			],
			[
				173,
				-146
			],
			[
				106,
				-6
			],
			[
				38,
				-75
			],
			[
				99,
				33
			],
			[
				266,
				-272
			],
			[
				237,
				-57
			]
		],
		[
			[
				9399,
				16914
			],
			[
				48,
				129
			],
			[
				-184,
				76
			],
			[
				109,
				9
			],
			[
				-41,
				47
			]
		],
		[
			[
				9331,
				17175
			],
			[
				147,
				122
			]
		],
		[
			[
				9176,
				16812
			],
			[
				-104,
				239
			]
		],
		[
			[
				9186,
				17159
			],
			[
				145,
				16
			]
		],
		[
			[
				8736,
				17300
			],
			[
				110,
				77
			]
		],
		[
			[
				8846,
				17377
			],
			[
				184,
				-290
			]
		],
		[
			[
				8598,
				17145
			],
			[
				44,
				133
			],
			[
				94,
				22
			]
		],
		[
			[
				8547,
				17460
			],
			[
				189,
				-160
			]
		],
		[
			[
				8788,
				17761
			],
			[
				7,
				-5
			],
			[
				5,
				-21
			],
			[
				-5,
				-24
			],
			[
				40,
				-44
			],
			[
				7,
				-14
			],
			[
				6,
				-10
			],
			[
				22,
				-35
			],
			[
				38,
				-30
			],
			[
				11,
				-5
			],
			[
				2,
				-1
			],
			[
				6,
				2
			],
			[
				2,
				1
			],
			[
				18,
				6
			],
			[
				-8,
				12
			],
			[
				-3,
				5
			],
			[
				16,
				2
			],
			[
				19,
				-9
			],
			[
				1,
				0
			],
			[
				10,
				-5
			],
			[
				2,
				-7
			],
			[
				1,
				-6
			],
			[
				1,
				-3
			],
			[
				-8,
				-4
			],
			[
				-19,
				-11
			],
			[
				-66,
				-35
			],
			[
				-5,
				-10
			],
			[
				-11,
				-20
			],
			[
				-23,
				-44
			],
			[
				-9,
				-16
			],
			[
				21,
				-21
			],
			[
				13,
				-13
			],
			[
				-33,
				-19
			]
		],
		[
			[
				1990,
				2457
			],
			[
				201,
				13
			],
			[
				-4,
				-78
			],
			[
				87,
				-87
			],
			[
				24,
				116
			],
			[
				170,
				16
			]
		],
		[
			[
				2394,
				2099
			],
			[
				-305,
				-39
			]
		],
		[
			[
				2506,
				1451
			],
			[
				69,
				146
			],
			[
				-71,
				144
			],
			[
				-11,
				174
			],
			[
				45,
				44
			]
		],
		[
			[
				3960,
				1811
			],
			[
				-2,
				1
			]
		],
		[
			[
				3916,
				1878
			],
			[
				2,
				7
			]
		],
		[
			[
				3934,
				1816
			],
			[
				-5,
				-9
			],
			[
				-2,
				0
			]
		],
		[
			[
				1072,
				4485
			],
			[
				-354,
				-269
			]
		],
		[
			[
				4904,
				7412
			],
			[
				-93,
				-89
			],
			[
				-252,
				-40
			],
			[
				-123,
				-127
			]
		],
		[
			[
				1420,
				5689
			],
			[
				14,
				145
			],
			[
				-274,
				-6
			],
			[
				-48,
				82
			]
		],
		[
			[
				1109,
				5931
			],
			[
				-2,
				63
			],
			[
				127,
				-4
			],
			[
				20,
				54
			]
		],
		[
			[
				1254,
				6044
			],
			[
				217,
				55
			]
		],
		[
			[
				4301,
				9630
			],
			[
				118,
				130
			],
			[
				-51,
				72
			],
			[
				30,
				209
			]
		],
		[
			[
				1646,
				4709
			],
			[
				200,
				-27
			],
			[
				8,
				-94
			],
			[
				272,
				-213
			]
		],
		[
			[
				1441,
				4516
			],
			[
				34,
				100
			],
			[
				150,
				44
			]
		],
		[
			[
				1482,
				5488
			],
			[
				44,
				-239
			],
			[
				353,
				-353
			]
		],
		[
			[
				1535,
				4883
			],
			[
				19,
				21
			],
			[
				2,
				63
			],
			[
				20,
				37
			],
			[
				-12,
				28
			],
			[
				-19,
				-3
			],
			[
				-11,
				54
			],
			[
				-58,
				-15
			],
			[
				-5,
				25
			],
			[
				-53,
				-14
			],
			[
				0,
				-56
			],
			[
				-36,
				10
			]
		],
		[
			[
				1361,
				5040
			],
			[
				3,
				203
			],
			[
				-52,
				28
			]
		],
		[
			[
				1944,
				4895
			],
			[
				-8,
				-53
			],
			[
				126,
				-56
			],
			[
				107,
				15
			],
			[
				-20,
				47
			],
			[
				153,
				128
			]
		],
		[
			[
				1885,
				4931
			],
			[
				75,
				188
			],
			[
				77,
				-10
			],
			[
				17,
				182
			],
			[
				346,
				-22
			]
		],
		[
			[
				549,
				4933
			],
			[
				-124,
				115
			],
			[
				-176,
				-53
			]
		],
		[
			[
				1542,
				368
			],
			[
				165,
				95
			]
		],
		[
			[
				1707,
				463
			],
			[
				73,
				31
			]
		],
		[
			[
				4017,
				4170
			],
			[
				-99,
				115
			],
			[
				10,
				96
			],
			[
				-88,
				40
			]
		],
		[
			[
				3840,
				4421
			],
			[
				-59,
				108
			],
			[
				44,
				123
			]
		],
		[
			[
				1722,
				1057
			],
			[
				-54,
				-32
			],
			[
				-9,
				-175
			],
			[
				48,
				-387
			]
		],
		[
			[
				3423,
				2678
			],
			[
				-110,
				-3
			],
			[
				-80,
				79
			]
		],
		[
			[
				3108,
				2904
			],
			[
				135,
				61
			],
			[
				45,
				116
			]
		],
		[
			[
				2961,
				3208
			],
			[
				80,
				-8
			],
			[
				89,
				121
			]
		],
		[
			[
				4919,
				3630
			],
			[
				156,
				29
			],
			[
				123,
				-99
			],
			[
				51,
				137
			],
			[
				82,
				-45
			],
			[
				50,
				-140
			]
		],
		[
			[
				6921,
				16499
			],
			[
				71,
				-77
			]
		],
		[
			[
				7375,
				16128
			],
			[
				-9,
				-59
			],
			[
				22,
				-42
			],
			[
				-7,
				-28
			],
			[
				-84,
				-10
			],
			[
				-53,
				-71
			],
			[
				-24,
				7
			],
			[
				-38,
				-57
			],
			[
				6,
				-15
			]
		],
		[
			[
				720,
				1399
			],
			[
				37,
				-13
			]
		],
		[
			[
				1269,
				964
			],
			[
				-160,
				-77
			],
			[
				9,
				-134
			]
		],
		[
			[
				1118,
				753
			],
			[
				-113,
				-175
			]
		],
		[
			[
				883,
				850
			],
			[
				61,
				-32
			],
			[
				282,
				206
			]
		],
		[
			[
				776,
				6465
			],
			[
				-154,
				120
			]
		],
		[
			[
				803,
				6586
			],
			[
				7,
				-4
			]
		],
		[
			[
				773,
				6599
			],
			[
				3,
				-1
			]
		],
		[
			[
				892,
				6571
			],
			[
				6,
				223
			]
		],
		[
			[
				5744,
				11554
			],
			[
				-223,
				-33
			],
			[
				-10,
				118
			],
			[
				-104,
				44
			],
			[
				-106,
				-116
			]
		],
		[
			[
				5602,
				11116
			],
			[
				73,
				-55
			],
			[
				84,
				42
			]
		],
		[
			[
				5264,
				11173
			],
			[
				71,
				21
			]
		],
		[
			[
				5335,
				11194
			],
			[
				170,
				-74
			],
			[
				17,
				-69
			]
		],
		[
			[
				5346,
				11225
			],
			[
				-11,
				-31
			]
		],
		[
			[
				5337,
				11270
			],
			[
				7,
				-32
			]
		],
		[
			[
				5214,
				11327
			],
			[
				60,
				73
			],
			[
				71,
				-109
			]
		],
		[
			[
				638,
				3592
			],
			[
				26,
				-65
			]
		],
		[
			[
				3515,
				1868
			],
			[
				-116,
				-124
			]
		],
		[
			[
				4151,
				2745
			],
			[
				-82,
				-71
			]
		],
		[
			[
				4236,
				2809
			],
			[
				-18,
				-85
			]
		],
		[
			[
				4218,
				2724
			],
			[
				-54,
				1
			]
		],
		[
			[
				4161,
				2710
			],
			[
				0,
				6
			]
		],
		[
			[
				4218,
				2724
			],
			[
				50,
				-218
			]
		],
		[
			[
				4253,
				2465
			],
			[
				-119,
				85
			]
		],
		[
			[
				4134,
				2550
			],
			[
				31,
				115
			]
		],
		[
			[
				4134,
				2550
			],
			[
				-21,
				-52
			]
		],
		[
			[
				4307,
				2831
			],
			[
				36,
				-193
			]
		],
		[
			[
				4021,
				2909
			],
			[
				-107,
				36
			]
		],
		[
			[
				1250,
				490
			],
			[
				36,
				128
			],
			[
				-37,
				117
			],
			[
				-114,
				-66
			],
			[
				-17,
				84
			]
		],
		[
			[
				2577,
				7478
			],
			[
				22,
				-139
			],
			[
				-71,
				15
			]
		],
		[
			[
				2020,
				7565
			],
			[
				-5,
				-77
			],
			[
				-125,
				-41
			]
		],
		[
			[
				1018,
				4853
			],
			[
				87,
				119
			],
			[
				89,
				10
			],
			[
				-36,
				89
			]
		],
		[
			[
				1358,
				5002
			],
			[
				49,
				8
			],
			[
				-74,
				-55
			]
		],
		[
			[
				4258,
				3568
			],
			[
				-279,
				5
			]
		],
		[
			[
				3979,
				3573
			],
			[
				-62,
				6
			],
			[
				15,
				83
			],
			[
				-133,
				38
			]
		],
		[
			[
				4050,
				3341
			],
			[
				-71,
				232
			]
		],
		[
			[
				1047,
				4795
			],
			[
				-17,
				-203
			]
		],
		[
			[
				4912,
				2016
			],
			[
				-43,
				54
			],
			[
				-123,
				-18
			]
		],
		[
			[
				3650,
				4215
			],
			[
				161,
				85
			],
			[
				-62,
				31
			],
			[
				69,
				2
			],
			[
				22,
				88
			]
		],
		[
			[
				7870,
				15761
			],
			[
				110,
				-12
			],
			[
				81,
				-53
			],
			[
				34,
				8
			],
			[
				43,
				-35
			],
			[
				7,
				-39
			],
			[
				52,
				-25
			],
			[
				35,
				-72
			],
			[
				79,
				-38
			],
			[
				10,
				24
			],
			[
				113,
				-16
			],
			[
				147,
				-111
			]
		],
		[
			[
				8167,
				16084
			],
			[
				-9,
				-80
			]
		],
		[
			[
				8688,
				16174
			],
			[
				-14,
				-121
			]
		],
		[
			[
				8502,
				15902
			],
			[
				148,
				-406
			]
		],
		[
			[
				1725,
				6632
			],
			[
				76,
				30
			],
			[
				41,
				121
			]
		],
		[
			[
				5145,
				4711
			],
			[
				-53,
				44
			],
			[
				-91,
				-54
			],
			[
				-146,
				228
			]
		],
		[
			[
				2812,
				1004
			],
			[
				5,
				-68
			]
		],
		[
			[
				702,
				4152
			],
			[
				3,
				-148
			],
			[
				-60,
				-32
			],
			[
				74,
				-70
			]
		],
		[
			[
				10435,
				17456
			],
			[
				181,
				18
			]
		],
		[
			[
				3788,
				9332
			],
			[
				61,
				-48
			],
			[
				155,
				109
			],
			[
				200,
				-17
			]
		],
		[
			[
				5767,
				9865
			],
			[
				14,
				105
			]
		],
		[
			[
				5864,
				9347
			],
			[
				25,
				241
			],
			[
				-122,
				277
			]
		],
		[
			[
				3938,
				9603
			],
			[
				0,
				0
			],
			[
				139,
				-106
			],
			[
				-7,
				-35
			],
			[
				103,
				11
			]
		],
		[
			[
				3270,
				7392
			],
			[
				208,
				-156
			],
			[
				114,
				15
			],
			[
				78,
				-254
			]
		],
		[
			[
				3302,
				7945
			],
			[
				281,
				-49
			]
		],
		[
			[
				5121,
				9710
			],
			[
				202,
				96
			],
			[
				444,
				59
			]
		],
		[
			[
				4400,
				2993
			],
			[
				69,
				-125
			]
		],
		[
			[
				4472,
				3071
			],
			[
				98,
				-168
			]
		],
		[
			[
				4570,
				2903
			],
			[
				-31,
				-91
			],
			[
				46,
				-99
			]
		],
		[
			[
				4651,
				3071
			],
			[
				-81,
				-168
			]
		],
		[
			[
				1886,
				381
			],
			[
				-94,
				11
			]
		],
		[
			[
				1872,
				818
			],
			[
				96,
				2
			]
		],
		[
			[
				1977,
				755
			],
			[
				-78,
				-142
			],
			[
				-13,
				-232
			]
		],
		[
			[
				1937,
				260
			],
			[
				-51,
				121
			]
		],
		[
			[
				5051,
				10237
			],
			[
				-97,
				-64
			]
		],
		[
			[
				5781,
				9970
			],
			[
				-206,
				292
			],
			[
				-187,
				44
			]
		],
		[
			[
				5388,
				10306
			],
			[
				48,
				158
			],
			[
				-46,
				40
			],
			[
				138,
				43
			],
			[
				-4,
				110
			]
		],
		[
			[
				5191,
				10008
			],
			[
				186,
				158
			],
			[
				11,
				140
			]
		],
		[
			[
				1254,
				6044
			],
			[
				-49,
				79
			]
		],
		[
			[
				2720,
				7426
			],
			[
				1,
				-92
			],
			[
				206,
				-101
			]
		],
		[
			[
				2971,
				7850
			],
			[
				-9,
				-66
			],
			[
				77,
				27
			],
			[
				64,
				-148
			],
			[
				-36,
				-93
			],
			[
				125,
				-41
			],
			[
				39,
				-170
			]
		],
		[
			[
				17670,
				18686
			],
			[
				-264,
				138
			]
		]
	],
	"transform": {
		"scale": [
			0.0014610176165283282,
			0.0006543309677210168
		],
		"translate": [
			4.644156880854525,
			57.97911300012772
		]
	},
	"objects": {
		"region_grense": {
			"type": "GeometryCollection",
			"geometries": [
				{
					"type": "LineString",
					"arcs": [
						0,
						1,
						2,
						3,
						4,
						5,
						6
					],
					"properties": {
						"Nr": 1
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							7
						],
						[
							8
						],
						[
							9
						]
					],
					"properties": {
						"Nr": 2
					}
				},
				{
					"type": "LineString",
					"arcs": [
						10
					],
					"properties": {
						"Nr": 3
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							11,
							12
						],
						[
							13,
							14
						]
					],
					"properties": {
						"Nr": 4
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							15
						],
						[
							16,
							17,
							18
						]
					],
					"properties": {
						"Nr": 5
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							19,
							20
						],
						[
							21,
							22,
							23,
							24,
							25,
							26,
							27
						],
						[
							28,
							-6,
							-5,
							29
						]
					],
					"properties": {
						"Nr": 6
					}
				},
				{
					"type": "LineString",
					"arcs": [
						30,
						31,
						32,
						33,
						34,
						35,
						36,
						37,
						38,
						39,
						40,
						41,
						42,
						43,
						44,
						45,
						46,
						47,
						48,
						49,
						50
					],
					"properties": {
						"Nr": 7
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							51,
							52,
							53,
							54,
							55,
							56,
							57,
							58
						],
						[
							59,
							60,
							61,
							62,
							63,
							64,
							65,
							66,
							67,
							68
						]
					],
					"properties": {
						"Nr": 8
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							69
						],
						[
							70,
							71,
							72,
							73,
							74,
							75,
							76,
							77
						]
					],
					"properties": {
						"Nr": 9
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							78,
							79,
							80
						],
						[
							81,
							82
						],
						[
							83
						]
					],
					"properties": {
						"Nr": 10
					}
				},
				{
					"type": "LineString",
					"arcs": [
						84
					],
					"properties": {
						"Nr": 11
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							85,
							86,
							87,
							88,
							-84
						],
						[
							89,
							90
						]
					],
					"properties": {
						"Nr": 12
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							91,
							92,
							93
						],
						[
							-81,
							-80,
							-79,
							-89,
							-88,
							-87,
							94,
							95,
							96,
							97
						]
					],
					"properties": {
						"Nr": 13
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-94,
							-93,
							-92,
							-98,
							98,
							99,
							100,
							101,
							102,
							103
						],
						[
							104
						]
					],
					"properties": {
						"Nr": 14
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							105,
							106,
							107,
							-74,
							-73,
							-72,
							-71
						],
						[
							108,
							-27,
							-26,
							-25,
							-24,
							109
						]
					],
					"properties": {
						"Nr": 15
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-70
					],
					"properties": {
						"Nr": 16
					}
				},
				{
					"type": "LineString",
					"arcs": [
						110,
						111,
						112,
						113,
						114,
						115,
						-46,
						-45,
						-44,
						-43,
						116,
						117,
						118
					],
					"properties": {
						"Nr": 17
					}
				},
				{
					"type": "LineString",
					"arcs": [
						119
					],
					"properties": {
						"Nr": 18
					}
				},
				{
					"type": "LineString",
					"arcs": [
						120,
						121,
						-66,
						-65,
						-64,
						122,
						123,
						124
					],
					"properties": {
						"Nr": 19
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-107,
							-106,
							-110,
							-23,
							-22
						],
						[
							-83,
							-82
						],
						[
							-85
						],
						[
							-78,
							-77,
							-76,
							-75,
							-108
						]
					],
					"properties": {
						"Nr": 20
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							125,
							126
						],
						[
							127,
							128,
							129,
							130
						]
					],
					"properties": {
						"Nr": 21
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-128
						],
						[
							131,
							-129
						]
					],
					"properties": {
						"Nr": 22
					}
				},
				{
					"type": "LineString",
					"arcs": [
						132
					],
					"properties": {
						"Nr": 23
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							133,
							134,
							135,
							136
						],
						[
							137,
							138,
							139
						]
					],
					"properties": {
						"Nr": 24
					}
				},
				{
					"type": "LineString",
					"arcs": [
						140
					],
					"properties": {
						"Nr": 25
					}
				},
				{
					"type": "LineString",
					"arcs": [
						141,
						-126,
						-131,
						142,
						-136,
						-135,
						-134,
						143,
						144,
						145,
						146,
						-33,
						-32,
						147,
						-19,
						148,
						149,
						150,
						151
					],
					"properties": {
						"Nr": 26
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							152
						],
						[
							153,
							154,
							155
						]
					],
					"properties": {
						"Nr": 27
					}
				},
				{
					"type": "LineString",
					"arcs": [
						156,
						157,
						158,
						159,
						160,
						161,
						162,
						163,
						164,
						165,
						166,
						167,
						168,
						169,
						170,
						171,
						172,
						173
					],
					"properties": {
						"Nr": 28
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-133
					],
					"properties": {
						"Nr": 29
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-142
						],
						[
							-127
						]
					],
					"properties": {
						"Nr": 30
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-152,
						-151,
						-150,
						-149,
						-18,
						174,
						-14
					],
					"properties": {
						"Nr": 31
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-12
						],
						[
							-13
						]
					],
					"properties": {
						"Nr": 32
					}
				},
				{
					"type": "LineString",
					"arcs": [
						175,
						176,
						177,
						178,
						179,
						180,
						181,
						182,
						183,
						184,
						185
					],
					"properties": {
						"Nr": 33
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							186,
							187,
							188,
							189,
							190
						],
						[
							191,
							192
						]
					],
					"properties": {
						"Nr": 34
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-99,
						-97,
						193,
						194,
						195,
						196,
						197,
						198,
						199,
						200,
						201
					],
					"properties": {
						"Nr": 35
					}
				},
				{
					"type": "LineString",
					"arcs": [
						202,
						203,
						204,
						205,
						206,
						207,
						208,
						-38,
						-37,
						-36,
						-35
					],
					"properties": {
						"Nr": 36
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-40,
						-39,
						-209,
						-208,
						209,
						210,
						211,
						212
					],
					"properties": {
						"Nr": 37
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-119,
							-118,
							-117,
							-42,
							-41,
							-213,
							-212,
							-211,
							213,
							214,
							215,
							216,
							217
						],
						[
							218
						]
					],
					"properties": {
						"Nr": 38
					}
				},
				{
					"type": "LineString",
					"arcs": [
						219
					],
					"properties": {
						"Nr": 39
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-218,
						-217,
						-216,
						220,
						221,
						222,
						223,
						224,
						225,
						226
					],
					"properties": {
						"Nr": 40
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-220
					],
					"properties": {
						"Nr": 41
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-219
					],
					"properties": {
						"Nr": 42
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-224,
							-223,
							-222,
							227,
							228,
							229,
							230,
							231,
							232
						],
						[
							-227,
							-226,
							-225
						]
					],
					"properties": {
						"Nr": 43
					}
				},
				{
					"type": "LineString",
					"arcs": [
						233,
						234,
						235,
						236,
						237,
						238,
						239,
						240,
						241,
						242,
						243,
						244,
						245
					],
					"properties": {
						"Nr": 44
					}
				},
				{
					"type": "LineString",
					"arcs": [
						246,
						247,
						248,
						249,
						250,
						251,
						252,
						253,
						-238,
						-237,
						-236
					],
					"properties": {
						"Nr": 45
					}
				},
				{
					"type": "LineString",
					"arcs": [
						254,
						255,
						-228,
						-221,
						-215,
						-214,
						-210,
						-207,
						-206,
						-205,
						-204,
						-203,
						-34,
						-147,
						256,
						257,
						258,
						259,
						-252,
						-251,
						-250
					],
					"properties": {
						"Nr": 46
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-239,
						-254,
						-253,
						-260,
						-259,
						-258,
						-257,
						-146,
						-145,
						260,
						261,
						262,
						263,
						264,
						265,
						266,
						267,
						268,
						269,
						270
					],
					"properties": {
						"Nr": 47
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							271,
							272
						],
						[
							-233,
							-232,
							-231,
							-230,
							-229,
							-256,
							-255,
							-249,
							-248,
							273
						]
					],
					"properties": {
						"Nr": 48
					}
				},
				{
					"type": "LineString",
					"arcs": [
						274,
						275,
						276
					],
					"properties": {
						"Nr": 49
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							277
						],
						[
							278
						],
						[
							279
						]
					],
					"properties": {
						"Nr": 50
					}
				},
				{
					"type": "LineString",
					"arcs": [
						280,
						-154
					],
					"properties": {
						"Nr": 51
					}
				},
				{
					"type": "LineString",
					"arcs": [
						281,
						-245,
						282,
						283,
						284,
						285,
						286,
						287,
						288
					],
					"properties": {
						"Nr": 52
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							289
						],
						[
							290
						],
						[
							-273,
							-272,
							-274,
							-247,
							-235,
							291,
							292
						]
					],
					"properties": {
						"Nr": 53
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							293
						],
						[
							294
						]
					],
					"properties": {
						"Nr": 54
					}
				},
				{
					"type": "LineString",
					"arcs": [
						295,
						296,
						297,
						298,
						299,
						300,
						301,
						302
					],
					"properties": {
						"Nr": 55
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							303
						],
						[
							-193,
							304,
							305,
							306
						],
						[
							-303,
							-302,
							307
						]
					],
					"properties": {
						"Nr": 56
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							308
						],
						[
							309,
							310
						]
					],
					"properties": {
						"Nr": 57
					}
				},
				{
					"type": "LineString",
					"arcs": [
						311,
						312
					],
					"properties": {
						"Nr": 58
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-312
						],
						[
							-309,
							-311,
							-310
						],
						[
							-304,
							-308,
							-301,
							-300,
							-299,
							-298,
							-297,
							-296
						],
						[
							-294,
							-295
						],
						[
							-313
						]
					],
					"properties": {
						"Nr": 59
					}
				},
				{
					"type": "LineString",
					"arcs": [
						313,
						314,
						-159,
						-158,
						-157,
						315,
						-283,
						-244,
						-243,
						-242
					],
					"properties": {
						"Nr": 60
					}
				},
				{
					"type": "LineString",
					"arcs": [
						316,
						317,
						318,
						-51,
						-50,
						-49,
						-48,
						-47,
						-116,
						-115,
						-114,
						319,
						320,
						321,
						322,
						323,
						324,
						325,
						326,
						327,
						328,
						329
					],
					"properties": {
						"Nr": 61
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-246,
							-282
						],
						[
							-290,
							-293,
							-292,
							-234
						]
					],
					"properties": {
						"Nr": 62
					}
				},
				{
					"type": "LineString",
					"arcs": [
						330,
						331,
						332
					],
					"properties": {
						"Nr": 63
					}
				},
				{
					"type": "LineString",
					"arcs": [
						333
					],
					"properties": {
						"Nr": 64
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-20,
							-30,
							-4,
							-3,
							-2,
							-1
						],
						[
							334,
							335
						],
						[
							336,
							337
						],
						[
							-21
						]
					],
					"properties": {
						"Nr": 65
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-338,
							-337
						],
						[
							-333,
							-332,
							338,
							339,
							340
						]
					],
					"properties": {
						"Nr": 66
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-336,
						341
					],
					"properties": {
						"Nr": 67
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-341,
							-340,
							-339,
							-331
						],
						[
							342
						]
					],
					"properties": {
						"Nr": 68
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-334
					],
					"properties": {
						"Nr": 69
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-343
						],
						[
							343,
							344,
							345,
							346,
							347,
							-187
						]
					],
					"properties": {
						"Nr": 70
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							348,
							349
						],
						[
							350
						]
					],
					"properties": {
						"Nr": 71
					}
				},
				{
					"type": "LineString",
					"arcs": [
						351
					],
					"properties": {
						"Nr": 72
					}
				},
				{
					"type": "LineString",
					"arcs": [
						352,
						353
					],
					"properties": {
						"Nr": 73
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-350,
						-349,
						354,
						355
					],
					"properties": {
						"Nr": 74
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-347,
							-346,
							-345,
							-344
						],
						[
							-191,
							-190,
							-189,
							-188,
							-348
						]
					],
					"properties": {
						"Nr": 75
					}
				},
				{
					"type": "LineString",
					"arcs": [
						356,
						357,
						358
					],
					"properties": {
						"Nr": 76
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-306,
							-305,
							-192
						],
						[
							-307
						]
					],
					"properties": {
						"Nr": 77
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-359,
						359,
						360,
						361,
						362,
						363,
						364,
						365,
						366,
						367,
						368
					],
					"properties": {
						"Nr": 78
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-369,
						-368,
						369,
						370,
						371,
						372,
						373,
						374
					],
					"properties": {
						"Nr": 79
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-104,
						-103,
						-102,
						-101,
						-100,
						-202,
						-201,
						-200,
						-199,
						375,
						376
					],
					"properties": {
						"Nr": 80
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-105
					],
					"properties": {
						"Nr": 81
					}
				},
				{
					"type": "LineString",
					"arcs": [
						377
					],
					"properties": {
						"Nr": 82
					}
				},
				{
					"type": "LineString",
					"arcs": [
						378,
						379,
						380,
						381
					],
					"properties": {
						"Nr": 83
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-357
						],
						[
							-378
						],
						[
							-382,
							-381,
							-380,
							-379
						],
						[
							-377,
							382,
							383,
							384,
							-363,
							-362,
							-361,
							-360,
							-358
						]
					],
					"properties": {
						"Nr": 84
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-277,
						-276,
						385,
						386,
						387,
						388,
						389,
						390,
						391,
						392,
						393,
						394,
						395,
						396,
						-264,
						-263,
						-262,
						-261,
						-144,
						-140,
						-139,
						397,
						398,
						399,
						-155,
						-281
					],
					"properties": {
						"Nr": 85
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							400,
							401,
							402,
							403,
							-391,
							-390,
							-389,
							-388,
							-387,
							-386,
							-275
						],
						[
							-278,
							-280
						],
						[
							404
						]
					],
					"properties": {
						"Nr": 86
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-279
					],
					"properties": {
						"Nr": 87
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-405
						],
						[
							-375,
							-374,
							-373,
							-372,
							-371,
							-370,
							-367,
							-366,
							405,
							-392,
							-404,
							-403,
							-402,
							-401
						]
					],
					"properties": {
						"Nr": 88
					}
				},
				{
					"type": "LineString",
					"arcs": [
						406,
						407,
						408,
						-394,
						-393,
						-406,
						-365,
						-364,
						-385,
						-384,
						-383,
						-376,
						-198,
						-197,
						409,
						410,
						-180,
						-179,
						-178
					],
					"properties": {
						"Nr": 89
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-397,
						-396,
						-395,
						-409,
						-408,
						-407,
						-177,
						-176,
						411,
						412,
						413,
						414,
						415,
						416,
						-240,
						-271,
						-270,
						-269,
						-268,
						-267,
						-266,
						-265
					],
					"properties": {
						"Nr": 90
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							417
						],
						[
							-16,
							-148,
							-31,
							-319,
							-318,
							-317,
							418
						]
					],
					"properties": {
						"Nr": 91
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-15,
						-175,
						-17
					],
					"properties": {
						"Nr": 92
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-418,
						419,
						420,
						421,
						422,
						423
					],
					"properties": {
						"Nr": 93
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-125,
						-124,
						-123,
						-63,
						-62,
						424
					],
					"properties": {
						"Nr": 94
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							425,
							426,
							427,
							428,
							-326,
							-325,
							-324,
							-323,
							429,
							430,
							431,
							432
						],
						[
							433
						]
					],
					"properties": {
						"Nr": 95
					}
				},
				{
					"type": "LineString",
					"arcs": [
						434
					],
					"properties": {
						"Nr": 96
					}
				},
				{
					"type": "LineString",
					"arcs": [
						435
					],
					"properties": {
						"Nr": 97
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							436,
							437,
							438,
							-183,
							-182,
							439,
							440,
							441,
							442,
							443,
							444,
							445,
							446,
							-90
						],
						[
							447,
							448,
							449,
							450,
							451
						]
					],
					"properties": {
						"Nr": 98
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-86,
						-91,
						-447,
						-446,
						-445,
						-444,
						-443,
						-442,
						-441,
						-440,
						-181,
						-411,
						-410,
						-196,
						-195,
						-194,
						-96,
						-95
					],
					"properties": {
						"Nr": 99
					}
				},
				{
					"type": "LineString",
					"arcs": [
						452,
						-167,
						-166,
						-165,
						-164,
						453,
						454,
						455,
						456,
						-449,
						-448
					],
					"properties": {
						"Nr": 100
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-439,
						457,
						458,
						459,
						460,
						461,
						-413,
						-412,
						-186,
						-185,
						-184
					],
					"properties": {
						"Nr": 101
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-286,
							-285,
							-284,
							-316,
							-174,
							-173,
							-172,
							-171,
							-170,
							-169,
							-168,
							-453
						],
						[
							-59,
							-58,
							-57,
							-56,
							-55,
							462,
							463,
							464
						]
					],
					"properties": {
						"Nr": 102
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-162,
						-161,
						-160,
						-315,
						-314,
						-241,
						-417,
						-416,
						-415,
						-414,
						-462,
						-461,
						-460,
						465,
						466,
						467
					],
					"properties": {
						"Nr": 103
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							468,
							469,
							470,
							471,
							472,
							-420,
							-419,
							-330,
							-329,
							-328,
							-327,
							-429,
							-428,
							-427,
							-426,
							-434
						],
						[
							-436
						]
					],
					"properties": {
						"Nr": 104
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-435
					],
					"properties": {
						"Nr": 105
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-457,
						-456,
						-455,
						-454,
						-163,
						-468,
						-467,
						-466,
						-459,
						-458,
						-438,
						-437,
						-452,
						-451,
						-450
					],
					"properties": {
						"Nr": 106
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-289,
						-288,
						-287,
						-465,
						-464,
						-463,
						-54,
						-53,
						-52,
						-69,
						-68,
						-67,
						-122,
						-121
					],
					"properties": {
						"Nr": 107
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-291
					],
					"properties": {
						"Nr": 108
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-433,
						-432,
						-431,
						-430,
						-322,
						-321,
						-320,
						-113,
						-112,
						-111
					],
					"properties": {
						"Nr": 109
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-120
					],
					"properties": {
						"Nr": 110
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-356,
							-355,
							-351
						],
						[
							-354,
							-353
						]
					],
					"properties": {
						"Nr": 111
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-352
					],
					"properties": {
						"Nr": 112
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-60
						],
						[
							-425,
							-61
						]
					],
					"properties": {
						"Nr": 113
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-342,
						-335
					],
					"properties": {
						"Nr": 114
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-472,
							-471,
							-470,
							-469
						],
						[
							-424,
							-423,
							-422,
							-421,
							-473
						]
					],
					"properties": {
						"Nr": 115
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-153,
						-156,
						-400,
						-399,
						-398,
						-138
					],
					"properties": {
						"Nr": 116
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-137,
							-143,
							-130,
							-132
						],
						[
							-141
						]
					],
					"properties": {
						"Nr": 117
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-8,
						-10
					],
					"properties": {
						"Nr": 118
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-28,
						-109
					],
					"properties": {
						"Nr": 119
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-29
						],
						[
							-9
						],
						[
							-11
						],
						[
							-7
						]
					],
					"properties": {
						"Nr": 120
					}
				}
			]
		},
		"region": {
			"type": "GeometryCollection",
			"geometries": [
				{
					"arcs": [
						[
							[
								473
							]
						],
						[
							[
								474
							]
						],
						[
							[
								475
							]
						],
						[
							[
								476
							]
						],
						[
							[
								477
							]
						],
						[
							[
								478
							]
						],
						[
							[
								479
							]
						],
						[
							[
								480
							]
						],
						[
							[
								481
							]
						],
						[
							[
								482
							]
						],
						[
							[
								483
							]
						],
						[
							[
								484
							]
						],
						[
							[
								0,
								1,
								2,
								3,
								4,
								5,
								6,
								485,
								486,
								487,
								488,
								489,
								490,
								491,
								492,
								493,
								494
							]
						],
						[
							[
								495
							]
						],
						[
							[
								496,
								8,
								497,
								9,
								7
							]
						],
						[
							[
								10,
								498
							]
						],
						[
							[
								499
							]
						],
						[
							[
								500
							]
						],
						[
							[
								501
							]
						],
						[
							[
								502
							]
						],
						[
							[
								503
							]
						],
						[
							[
								504
							]
						],
						[
							[
								505
							]
						],
						[
							[
								506
							]
						],
						[
							[
								507
							]
						],
						[
							[
								508
							]
						],
						[
							[
								509
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Sør-Helgeland",
						"ID": "3068 Sør-Helgeland",
						"Nr": 3068
					}
				},
				{
					"arcs": [
						[
							[
								11,
								12,
								510,
								511,
								13,
								14,
								512,
								513,
								514,
								515,
								516,
								517
							]
						],
						[
							[
								518
							]
						],
						[
							[
								519
							]
						],
						[
							[
								520
							]
						],
						[
							[
								521
							]
						],
						[
							[
								15,
								522,
								16,
								17,
								18
							]
						],
						[
							[
								523
							]
						],
						[
							[
								524
							]
						],
						[
							[
								525
							]
						],
						[
							[
								526
							]
						],
						[
							[
								527
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Haugesundregionen",
						"ID": "3037 Haugesundregionen",
						"Nr": 3037
					}
				},
				{
					"arcs": [
						[
							528,
							529,
							530,
							21,
							22,
							23,
							24,
							25,
							26,
							27,
							531,
							28,
							-6,
							-5,
							29,
							19,
							20
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Indre Namdal",
						"ID": "3065 Indre Namdal",
						"Nr": 3065
					}
				},
				{
					"arcs": [
						[
							30,
							31,
							32,
							33,
							34,
							35,
							36,
							37,
							38,
							39,
							40,
							41,
							42,
							43,
							44,
							45,
							46,
							47,
							48,
							49,
							50
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Vest-Telemark",
						"ID": "3030 Vest-Telemark",
						"Nr": 3030
					}
				},
				{
					"arcs": [
						[
							54,
							55,
							56,
							57,
							58,
							532,
							533,
							534,
							59,
							60,
							61,
							62,
							63,
							64,
							65,
							66,
							67,
							68,
							51,
							52,
							53
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Indre Østfold",
						"ID": "3002 Indre Østfold",
						"Nr": 3002
					}
				},
				{
					"arcs": [
						[
							[
								69,
								535,
								70,
								71,
								72,
								73,
								74,
								75,
								76,
								77,
								536,
								537,
								538,
								539,
								540,
								541,
								542,
								543
							]
						],
						[
							[
								544
							]
						],
						[
							[
								545
							]
						],
						[
							[
								546
							]
						],
						[
							[
								547
							]
						],
						[
							[
								548
							]
						],
						[
							[
								549
							]
						],
						[
							[
								550
							]
						],
						[
							[
								551
							]
						],
						[
							[
								552
							]
						],
						[
							[
								553
							]
						],
						[
							[
								554
							]
						],
						[
							[
								555
							]
						],
						[
							[
								556
							]
						],
						[
							[
								557
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Fosen",
						"ID": "3057 Fosen",
						"Nr": 3057
					}
				},
				{
					"arcs": [
						[
							[
								78,
								79,
								80,
								558,
								81,
								82,
								559,
								83
							]
						],
						[
							[
								84,
								560
							]
						],
						[
							[
								561
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Stjørdalsregionen",
						"ID": "3063 Stjørdalsregionen",
						"Nr": 3063
					}
				},
				{
					"arcs": [
						[
							86,
							87,
							88,
							-84,
							562,
							563,
							89,
							90,
							85
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Rørosregionen",
						"ID": "3062 Rørosregionen",
						"Nr": 3062
					}
				},
				{
					"arcs": [
						[
							564,
							565,
							566,
							567,
							-81,
							-80,
							-79,
							-89,
							-88,
							-87,
							94,
							95,
							96,
							97,
							91,
							92,
							93
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Trondheimsregionen",
						"ID": "3061 Trondheimsregionen",
						"Nr": 3061
					}
				},
				{
					"arcs": [
						[
							[
								-94,
								-93,
								-92,
								-98,
								98,
								99,
								100,
								101,
								102,
								103,
								568,
								104,
								569,
								570,
								571,
								572,
								573,
								574
							]
						],
						[
							[
								575
							]
						],
						[
							[
								576
							]
						],
						[
							[
								577
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Orkdalregionen",
						"ID": "3060 Orkdalregionen",
						"Nr": 3060
					}
				},
				{
					"arcs": [
						[
							[
								-74,
								-73,
								-72,
								-71,
								578,
								579,
								580,
								581,
								582,
								583,
								108,
								-27,
								-26,
								-25,
								-24,
								109,
								105,
								106,
								107
							]
						],
						[
							[
								584,
								585
							]
						],
						[
							[
								586
							]
						],
						[
							[
								587
							]
						],
						[
							[
								588
							]
						],
						[
							[
								-70,
								589
							]
						],
						[
							[
								590
							]
						],
						[
							[
								591
							]
						],
						[
							[
								592
							]
						],
						[
							[
								593
							]
						],
						[
							[
								594
							]
						],
						[
							[
								595
							]
						],
						[
							[
								596
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Midtre Namdal",
						"ID": "3067 Midtre Namdal",
						"Nr": 3067
					}
				},
				{
					"arcs": [
						[
							[
								110,
								111,
								112,
								113,
								114,
								115,
								-46,
								-45,
								-44,
								-43,
								116,
								117,
								118,
								597,
								598,
								599,
								600,
								601,
								602,
								603,
								604
							]
						],
						[
							[
								605
							]
						],
						[
							[
								606
							]
						],
						[
							[
								607
							]
						],
						[
							[
								608
							]
						],
						[
							[
								119,
								609
							]
						],
						[
							[
								610
							]
						],
						[
							[
								611
							]
						],
						[
							[
								612
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Arendalregionen",
						"ID": "3032 Arendalregionen",
						"Nr": 3032
					}
				},
				{
					"arcs": [
						[
							[
								120,
								121,
								-66,
								-65,
								-64,
								122,
								123,
								124,
								613,
								614,
								615
							]
						],
						[
							[
								616
							]
						],
						[
							[
								617
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Mosseregionen",
						"ID": "3003 Mosseregionen",
						"Nr": 3003
					}
				},
				{
					"arcs": [
						[
							[
								-23,
								-22,
								618,
								-83,
								-82,
								619,
								-85,
								620,
								621,
								622,
								623,
								624,
								625,
								626,
								627,
								-78,
								-77,
								-76,
								-75,
								-108,
								-107,
								-106,
								-110
							]
						],
						[
							[
								628
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Innherred",
						"ID": "3064 Innherred",
						"Nr": 3064
					}
				},
				{
					"arcs": [
						[
							[
								126,
								629,
								630,
								631,
								127,
								128,
								129,
								130,
								125
							]
						],
						[
							[
								632
							]
						],
						[
							[
								633
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Bjørnefjorden",
						"ID": "3041 Bjørnefjorden",
						"Nr": 3041
					}
				},
				{
					"arcs": [
						[
							[
								634,
								131,
								-129,
								-128
							]
						],
						[
							[
								132,
								635
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Bergen",
						"ID": "3040 Bergen (Region)",
						"Nr": 3040
					}
				},
				{
					"arcs": [
						[
							[
								133,
								134,
								135,
								136,
								636,
								137,
								138,
								139
							]
						],
						[
							[
								140,
								637
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Voss",
						"ID": "3043 Voss",
						"Nr": 3043
					}
				},
				{
					"arcs": [
						[
							141,
							-126,
							-131,
							142,
							-136,
							-135,
							-134,
							143,
							144,
							145,
							146,
							-33,
							-32,
							147,
							-19,
							148,
							149,
							150,
							151,
							638,
							639,
							640,
							641,
							642,
							643,
							644,
							645,
							646
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Hardanger",
						"ID": "3042 Hardanger",
						"Nr": 3042
					}
				},
				{
					"arcs": [
						[
							[
								647,
								648,
								649,
								650,
								153,
								154,
								155,
								152
							]
						],
						[
							[
								651,
								652
							]
						],
						[
							[
								653,
								654,
								655,
								656
							]
						],
						[
							[
								657,
								658
							]
						],
						[
							[
								659
							]
						],
						[
							[
								660
							]
						],
						[
							[
								661
							]
						],
						[
							[
								662
							]
						],
						[
							[
								663
							]
						],
						[
							[
								664
							]
						],
						[
							[
								665
							]
						],
						[
							[
								666
							]
						],
						[
							[
								667
							]
						],
						[
							[
								668
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Nordhordland",
						"ID": "3044 Nordhordland",
						"Nr": 3044
					}
				},
				{
					"arcs": [
						[
							156,
							157,
							158,
							159,
							160,
							161,
							162,
							163,
							164,
							165,
							166,
							167,
							168,
							169,
							170,
							171,
							172,
							173
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Øvre Romerike",
						"ID": "3008 Øvre Romerike",
						"Nr": 3008
					}
				},
				{
					"arcs": [
						[
							[
								669,
								670,
								671,
								672,
								673,
								674
							]
						],
						[
							[
								675
							]
						],
						[
							[
								676
							]
						],
						[
							[
								677
							]
						],
						[
							[
								678
							]
						],
						[
							[
								-133,
								679
							]
						],
						[
							[
								680
							]
						],
						[
							[
								681
							]
						],
						[
							[
								682
							]
						],
						[
							[
								683
							]
						],
						[
							[
								684
							]
						],
						[
							[
								685
							]
						],
						[
							[
								686
							]
						],
						[
							[
								687
							]
						],
						[
							[
								688
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Hordaland Vest",
						"ID": "3047 Hordaland Vest",
						"Nr": 3047
					}
				},
				{
					"arcs": [
						[
							[
								689
							]
						],
						[
							[
								690
							]
						],
						[
							[
								691
							]
						],
						[
							[
								692
							]
						],
						[
							[
								693
							]
						],
						[
							[
								694,
								695
							]
						],
						[
							[
								696
							]
						],
						[
							[
								697
							]
						],
						[
							[
								698
							]
						],
						[
							[
								699
							]
						],
						[
							[
								700,
								701
							]
						],
						[
							[
								702,
								703
							]
						],
						[
							[
								704
							]
						],
						[
							[
								705
							]
						],
						[
							[
								706
							]
						],
						[
							[
								707
							]
						],
						[
							[
								708
							]
						],
						[
							[
								-142,
								709,
								-127
							]
						],
						[
							[
								-152,
								-151,
								-150,
								-149,
								-18,
								174,
								-14,
								710,
								711
							]
						],
						[
							[
								712
							]
						],
						[
							[
								713
							]
						],
						[
							[
								714
							]
						],
						[
							[
								715
							]
						],
						[
							[
								716
							]
						],
						[
							[
								717
							]
						],
						[
							[
								718,
								-13,
								-12
							]
						],
						[
							[
								719
							]
						],
						[
							[
								720
							]
						],
						[
							[
								721
							]
						],
						[
							[
								722
							]
						],
						[
							[
								723
							]
						],
						[
							[
								724
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Sunnhordland",
						"ID": "3046 Sunnhordland",
						"Nr": 3046
					}
				},
				{
					"arcs": [
						[
							175,
							176,
							177,
							178,
							179,
							180,
							181,
							182,
							183,
							184,
							185
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Midt-Gudbrandsdal",
						"ID": "3017 Midt-Gudbrandsdal",
						"Nr": 3017
					}
				},
				{
					"arcs": [
						[
							[
								186,
								187,
								188,
								189,
								190,
								725,
								726,
								727,
								728,
								191,
								192,
								729,
								730
							]
						],
						[
							[
								731
							]
						],
						[
							[
								732,
								733,
								734,
								735
							]
						],
						[
							[
								736
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Midt-Troms",
						"ID": "3078 Midt-Troms",
						"Nr": 3078
					}
				},
				{
					"arcs": [
						[
							-99,
							-97,
							193,
							194,
							195,
							196,
							197,
							198,
							199,
							200,
							201
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Oppdal/Rennebu",
						"ID": "3059 Oppdal/Rennebu",
						"Nr": 3059
					}
				},
				{
					"arcs": [
						[
							202,
							203,
							204,
							205,
							206,
							207,
							208,
							-38,
							-37,
							-36,
							-35
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Øst-Telemark",
						"ID": "3029 Øst-Telemark",
						"Nr": 3029
					}
				},
				{
					"arcs": [
						[
							-40,
							-39,
							-209,
							-208,
							209,
							210,
							211,
							212
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Midt-Telemark",
						"ID": "3028 Midt-Telemark",
						"Nr": 3028
					}
				},
				{
					"arcs": [
						[
							[
								-119,
								-118,
								-117,
								-42,
								-41,
								-213,
								-212,
								-211,
								213,
								214,
								215,
								216,
								217,
								737,
								218,
								738,
								739,
								740,
								741,
								742,
								743
							]
						],
						[
							[
								744
							]
						],
						[
							[
								745
							]
						],
						[
							[
								746
							]
						],
						[
							[
								747
							]
						],
						[
							[
								748
							]
						],
						[
							[
								749
							]
						],
						[
							[
								219,
								750
							]
						],
						[
							[
								751
							]
						],
						[
							[
								752
							]
						],
						[
							[
								753
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Grenland",
						"ID": "3027 Grenland",
						"Nr": 3027
					}
				},
				{
					"arcs": [
						[
							[
								-218,
								-217,
								-216,
								220,
								221,
								222,
								223,
								224,
								225,
								226,
								754,
								755
							]
						],
						[
							[
								-220,
								756
							]
						],
						[
							[
								757,
								-219
							]
						],
						[
							[
								758
							]
						],
						[
							[
								759
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Sandefjord/Larvik",
						"ID": "3026 Sandefjord/Larvik",
						"Nr": 3026
					}
				},
				{
					"arcs": [
						[
							[
								227,
								228,
								229,
								230,
								231,
								232,
								760,
								761,
								762,
								763,
								764,
								765,
								-227,
								-226,
								-225,
								-224,
								-223,
								-222
							]
						],
						[
							[
								766
							]
						],
						[
							[
								767,
								768,
								769,
								770,
								771,
								772
							]
						],
						[
							[
								773,
								774
							]
						],
						[
							[
								775
							]
						],
						[
							[
								776,
								777
							]
						],
						[
							[
								778
							]
						],
						[
							[
								779
							]
						],
						[
							[
								780
							]
						],
						[
							[
								781
							]
						],
						[
							[
								782
							]
						],
						[
							[
								783
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Tønsbergregionen",
						"ID": "3025 Tønsbergregionen",
						"Nr": 3025
					}
				},
				{
					"arcs": [
						[
							234,
							235,
							236,
							237,
							238,
							239,
							240,
							241,
							242,
							243,
							244,
							245,
							233
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Ringerike/Hole",
						"ID": "3024 Ringerike/Hole",
						"Nr": 3024
					}
				},
				{
					"arcs": [
						[
							246,
							247,
							248,
							249,
							250,
							251,
							252,
							253,
							-238,
							-237,
							-236
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Midt-Buskerud",
						"ID": "3023 Midt-Buskerud",
						"Nr": 3023
					}
				},
				{
					"arcs": [
						[
							254,
							255,
							-228,
							-221,
							-215,
							-214,
							-210,
							-207,
							-206,
							-205,
							-204,
							-203,
							-34,
							-147,
							256,
							257,
							258,
							259,
							-252,
							-251,
							-250
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Kongsberg/Numedal",
						"ID": "3022 Kongsberg/Numedal",
						"Nr": 3022
					}
				},
				{
					"arcs": [
						[
							-239,
							-254,
							-253,
							-260,
							-259,
							-258,
							-257,
							-146,
							-145,
							260,
							261,
							262,
							263,
							264,
							265,
							266,
							267,
							268,
							269,
							270
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Hallingdal",
						"ID": "3021 Hallingdal",
						"Nr": 3021
					}
				},
				{
					"arcs": [
						[
							[
								784,
								785,
								786,
								-233,
								-232,
								-231,
								-230,
								-229,
								-256,
								-255,
								-249,
								-248,
								273,
								271,
								272
							]
						],
						[
							[
								787
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Drammensregionen",
						"ID": "3020 Drammensregionen",
						"Nr": 3020
					}
				},
				{
					"arcs": [
						[
							[
								274,
								275,
								276,
								788,
								789
							]
						],
						[
							[
								790
							]
						],
						[
							[
								791,
								278,
								792,
								279,
								277
							]
						],
						[
							[
								793
							]
						],
						[
							[
								794
							]
						],
						[
							[
								795
							]
						],
						[
							[
								796
							]
						],
						[
							[
								280,
								-154,
								797
							]
						],
						[
							[
								798
							]
						],
						[
							[
								799
							]
						],
						[
							[
								800
							]
						],
						[
							[
								801
							]
						],
						[
							[
								802
							]
						],
						[
							[
								803
							]
						],
						[
							[
								804
							]
						],
						[
							[
								805
							]
						],
						[
							[
								806
							]
						],
						[
							[
								807
							]
						],
						[
							[
								808
							]
						],
						[
							[
								809
							]
						],
						[
							[
								810
							]
						],
						[
							[
								811
							]
						],
						[
							[
								812
							]
						],
						[
							[
								813
							]
						],
						[
							[
								814
							]
						],
						[
							[
								815
							]
						],
						[
							[
								816
							]
						],
						[
							[
								817
							]
						],
						[
							[
								818
							]
						],
						[
							[
								819
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "HAFS",
						"ID": "3048 HAFS",
						"Nr": 3048
					}
				},
				{
					"arcs": [
						[
							281,
							-245,
							282,
							283,
							284,
							285,
							286,
							287,
							288,
							820
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Oslo",
						"ID": "3009 Oslo",
						"Nr": 3009
					}
				},
				{
					"arcs": [
						[
							[
								821,
								822,
								290,
								823,
								824,
								825,
								-273,
								-272,
								-274,
								-247,
								-235,
								291,
								292,
								289
							]
						],
						[
							[
								826
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Vestviken",
						"ID": "3086 Vestviken",
						"Nr": 3086
					}
				},
				{
					"arcs": [
						[
							[
								827,
								294,
								293
							]
						],
						[
							[
								295,
								296,
								297,
								298,
								299,
								300,
								301,
								302,
								828,
								829,
								830,
								831,
								832
							]
						],
						[
							[
								833
							]
						],
						[
							[
								834
							]
						],
						[
							[
								835
							]
						],
						[
							[
								836
							]
						],
						[
							[
								837
							]
						],
						[
							[
								838
							]
						],
						[
							[
								839
							]
						],
						[
							[
								840
							]
						],
						[
							[
								841
							]
						],
						[
							[
								842
							]
						],
						[
							[
								843,
								844,
								845
							]
						],
						[
							[
								846,
								847,
								848,
								849
							]
						],
						[
							[
								850
							]
						],
						[
							[
								851
							]
						],
						[
							[
								852
							]
						],
						[
							[
								853,
								854,
								855
							]
						],
						[
							[
								856,
								857
							]
						],
						[
							[
								858
							]
						],
						[
							[
								859
							]
						],
						[
							[
								860
							]
						],
						[
							[
								861
							]
						],
						[
							[
								862
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Vest-Finnmark",
						"ID": "3081 Vest-Finnmark",
						"Nr": 3081
					}
				},
				{
					"arcs": [
						[
							[
								863,
								864
							]
						],
						[
							[
								865,
								866,
								867,
								-193,
								304,
								305,
								306,
								868,
								869,
								870,
								871,
								872,
								-303,
								-302,
								307,
								303
							]
						],
						[
							[
								873
							]
						],
						[
							[
								874
							]
						],
						[
							[
								875
							]
						],
						[
							[
								876
							]
						],
						[
							[
								877
							]
						],
						[
							[
								878
							]
						],
						[
							[
								879
							]
						],
						[
							[
								880
							]
						],
						[
							[
								881
							]
						],
						[
							[
								882
							]
						],
						[
							[
								883
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Nord-Troms",
						"ID": "3080 Nord-Troms",
						"Nr": 3080
					}
				},
				{
					"arcs": [
						[
							[
								884,
								885,
								886,
								887,
								888,
								889,
								890,
								309,
								310,
								308
							]
						],
						[
							[
								891
							]
						],
						[
							[
								311,
								312,
								892
							]
						],
						[
							[
								893
							]
						],
						[
							[
								894
							]
						],
						[
							[
								895
							]
						],
						[
							[
								896
							]
						],
						[
							[
								897
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Øst-Finnmark",
						"ID": "3083 Øst-Finnmark",
						"Nr": 3083
					}
				},
				{
					"arcs": [
						[
							[
								898,
								-309,
								-311,
								-310,
								899,
								900,
								901,
								-304,
								-308,
								-301,
								-300,
								-299,
								-298,
								-297,
								-296,
								902,
								-294,
								-295,
								903,
								-313,
								-312
							]
						],
						[
							[
								904
							]
						],
						[
							[
								905
							]
						],
						[
							[
								906
							]
						],
						[
							[
								907
							]
						],
						[
							[
								908
							]
						],
						[
							[
								909
							]
						],
						[
							[
								910
							]
						],
						[
							[
								911
							]
						],
						[
							[
								912
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Midt-Finnmark",
						"ID": "3082 Midt-Finnmark",
						"Nr": 3082
					}
				},
				{
					"arcs": [
						[
							313,
							314,
							-159,
							-158,
							-157,
							315,
							-283,
							-244,
							-243,
							-242
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Hadeland",
						"ID": "3015 Hadeland",
						"Nr": 3015
					}
				},
				{
					"arcs": [
						[
							316,
							317,
							318,
							-51,
							-50,
							-49,
							-48,
							-47,
							-116,
							-115,
							-114,
							319,
							320,
							321,
							322,
							323,
							324,
							325,
							326,
							327,
							328,
							329
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Setesdal",
						"ID": "3031 Setesdal",
						"Nr": 3031
					}
				},
				{
					"arcs": [
						[
							[
								-282,
								913,
								914,
								-290,
								-293,
								-292,
								-234,
								-246
							]
						],
						[
							[
								915
							]
						],
						[
							[
								916
							]
						],
						[
							[
								917
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Akershus Vest",
						"ID": "3005 Akershus Vest",
						"Nr": 3005
					}
				},
				{
					"arcs": [
						[
							[
								918
							]
						],
						[
							[
								330,
								331,
								332,
								919,
								920
							]
						],
						[
							[
								921
							]
						],
						[
							[
								922,
								923
							]
						],
						[
							[
								924,
								925
							]
						],
						[
							[
								333,
								926
							]
						],
						[
							[
								927
							]
						],
						[
							[
								928
							]
						],
						[
							[
								929
							]
						],
						[
							[
								930
							]
						],
						[
							[
								931
							]
						],
						[
							[
								932
							]
						],
						[
							[
								933
							]
						],
						[
							[
								934
							]
						],
						[
							[
								935
							]
						],
						[
							[
								936
							]
						],
						[
							[
								937
							]
						],
						[
							[
								938
							]
						],
						[
							[
								939
							]
						],
						[
							[
								940
							]
						],
						[
							[
								941
							]
						],
						[
							[
								942
							]
						],
						[
							[
								943
							]
						],
						[
							[
								944
							]
						],
						[
							[
								945
							]
						],
						[
							[
								946
							]
						],
						[
							[
								947
							]
						],
						[
							[
								948
							]
						],
						[
							[
								949
							]
						],
						[
							[
								950
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Ytre Helgeland",
						"ID": "3070 Ytre Helgeland",
						"Nr": 3070
					}
				},
				{
					"arcs": [
						[
							-4,
							-3,
							-2,
							-1,
							951,
							334,
							335,
							952,
							336,
							337,
							953,
							-21,
							-20,
							-30
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Mosjøregionen",
						"ID": "3071 Mosjøregionen",
						"Nr": 3071
					}
				},
				{
					"arcs": [
						[
							[
								-338,
								-337,
								954,
								955,
								956,
								957,
								-333,
								-332,
								338,
								339,
								340,
								958,
								959
							]
						],
						[
							[
								-336,
								341,
								960
							]
						],
						[
							[
								961
							]
						],
						[
							[
								962
							]
						],
						[
							[
								963
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Ranaregionen",
						"ID": "3072 Ranaregionen",
						"Nr": 3072
					}
				},
				{
					"arcs": [
						[
							[
								964,
								965,
								966,
								967,
								-341,
								-340,
								-339,
								-331,
								968,
								969,
								970,
								971,
								972,
								973,
								974,
								975,
								976,
								977,
								978,
								979,
								980,
								342
							]
						],
						[
							[
								981
							]
						],
						[
							[
								982
							]
						],
						[
							[
								983
							]
						],
						[
							[
								984
							]
						],
						[
							[
								-334,
								985
							]
						],
						[
							[
								986
							]
						],
						[
							[
								987
							]
						],
						[
							[
								988
							]
						],
						[
							[
								989
							]
						],
						[
							[
								990
							]
						],
						[
							[
								991
							]
						],
						[
							[
								992
							]
						],
						[
							[
								993
							]
						],
						[
							[
								994
							]
						],
						[
							[
								995
							]
						],
						[
							[
								996
							]
						],
						[
							[
								997
							]
						],
						[
							[
								998
							]
						],
						[
							[
								999
							]
						],
						[
							[
								1000
							]
						],
						[
							[
								1001
							]
						],
						[
							[
								1002
							]
						],
						[
							[
								1003
							]
						],
						[
							[
								1004
							]
						],
						[
							[
								1005
							]
						],
						[
							[
								1006
							]
						],
						[
							[
								1007
							]
						],
						[
							[
								1008
							]
						],
						[
							[
								1009
							]
						],
						[
							[
								1010
							]
						],
						[
							[
								1011
							]
						],
						[
							[
								1012
							]
						],
						[
							[
								1013
							]
						],
						[
							[
								1014
							]
						],
						[
							[
								1015
							]
						],
						[
							[
								1016
							]
						],
						[
							[
								1017
							]
						],
						[
							[
								1018
							]
						],
						[
							[
								1019
							]
						],
						[
							[
								1020
							]
						],
						[
							[
								1021
							]
						],
						[
							[
								1022
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Salten",
						"ID": "3073 Salten",
						"Nr": 3073
					}
				},
				{
					"arcs": [
						[
							[
								-343,
								1023,
								1024,
								1025,
								1026,
								1027,
								343,
								344,
								345,
								346,
								347,
								-187,
								1028,
								1029,
								1030
							]
						],
						[
							[
								1031
							]
						],
						[
							[
								1032
							]
						],
						[
							[
								348,
								349,
								1033,
								350
							]
						],
						[
							[
								1034
							]
						],
						[
							[
								1035
							]
						],
						[
							[
								1036
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Ofoten",
						"ID": "3074 Ofoten",
						"Nr": 3074
					}
				},
				{
					"arcs": [
						[
							[
								1037,
								1038
							]
						],
						[
							[
								1039
							]
						],
						[
							[
								1040
							]
						],
						[
							[
								351,
								1041
							]
						],
						[
							[
								1042
							]
						],
						[
							[
								352,
								353,
								1043
							]
						],
						[
							[
								1044
							]
						],
						[
							[
								1045
							]
						],
						[
							[
								1046
							]
						],
						[
							[
								1047
							]
						],
						[
							[
								1048
							]
						],
						[
							[
								1049
							]
						],
						[
							[
								1050
							]
						],
						[
							[
								1051
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Lofoten",
						"ID": "3075 Lofoten",
						"Nr": 3075
					}
				},
				{
					"arcs": [
						[
							[
								1052
							]
						],
						[
							[
								1053
							]
						],
						[
							[
								1054
							]
						],
						[
							[
								1055
							]
						],
						[
							[
								1056
							]
						],
						[
							[
								1057
							]
						],
						[
							[
								1058
							]
						],
						[
							[
								1059
							]
						],
						[
							[
								1060
							]
						],
						[
							[
								1061
							]
						],
						[
							[
								1062
							]
						],
						[
							[
								1063
							]
						],
						[
							[
								1064
							]
						],
						[
							[
								1065
							]
						],
						[
							[
								1066
							]
						],
						[
							[
								1067
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Hitra/Frøya",
						"ID": "3058 Hitra/Frøya",
						"Nr": 3058
					}
				},
				{
					"arcs": [
						[
							[
								-350,
								-349,
								354,
								355,
								1068,
								1069
							]
						],
						[
							[
								1070
							]
						],
						[
							[
								1071
							]
						],
						[
							[
								1072
							]
						],
						[
							[
								1073
							]
						],
						[
							[
								1074
							]
						],
						[
							[
								1075
							]
						],
						[
							[
								1076,
								1077,
								1078,
								1079,
								-191,
								-190,
								-189,
								-188,
								-348,
								-347,
								-346,
								-345,
								-344
							]
						],
						[
							[
								1080
							]
						],
						[
							[
								1081
							]
						],
						[
							[
								1082
							]
						],
						[
							[
								1083
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Sør-Troms",
						"ID": "3077 Sør-Troms",
						"Nr": 3077
					}
				},
				{
					"arcs": [
						[
							[
								356,
								357,
								358,
								1084,
								1085,
								1086,
								1087
							]
						],
						[
							[
								1088
							]
						],
						[
							[
								1089
							]
						],
						[
							[
								1090
							]
						],
						[
							[
								1091
							]
						],
						[
							[
								1092
							]
						],
						[
							[
								1093
							]
						],
						[
							[
								1094
							]
						],
						[
							[
								1095
							]
						],
						[
							[
								1096
							]
						],
						[
							[
								1097
							]
						],
						[
							[
								1098
							]
						],
						[
							[
								1099
							]
						],
						[
							[
								1100
							]
						],
						[
							[
								1101
							]
						],
						[
							[
								1102
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Ålesundregionen",
						"ID": "3056 Ålesundregionen",
						"Nr": 3056
					}
				},
				{
					"arcs": [
						[
							[
								1103,
								1104
							]
						],
						[
							[
								-192,
								1105,
								1106,
								1107,
								1108,
								-307,
								-306,
								-305
							]
						],
						[
							[
								1109
							]
						],
						[
							[
								1110
							]
						],
						[
							[
								1111,
								1112
							]
						],
						[
							[
								1113
							]
						],
						[
							[
								1114
							]
						],
						[
							[
								1115
							]
						],
						[
							[
								1116
							]
						],
						[
							[
								1117
							]
						],
						[
							[
								1118
							]
						],
						[
							[
								1119
							]
						],
						[
							[
								1120
							]
						],
						[
							[
								1121
							]
						],
						[
							[
								1122
							]
						],
						[
							[
								1123
							]
						],
						[
							[
								1124
							]
						],
						[
							[
								1125
							]
						],
						[
							[
								1126
							]
						],
						[
							[
								1127
							]
						],
						[
							[
								1128
							]
						],
						[
							[
								1129
							]
						],
						[
							[
								1130
							]
						],
						[
							[
								1131
							]
						],
						[
							[
								1132
							]
						],
						[
							[
								1133
							]
						],
						[
							[
								1134
							]
						],
						[
							[
								1135
							]
						],
						[
							[
								1136
							]
						],
						[
							[
								1137
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Tromsøregionen",
						"ID": "3079 Tromsøregionen",
						"Nr": 3079
					}
				},
				{
					"arcs": [
						[
							-359,
							359,
							360,
							361,
							362,
							363,
							364,
							365,
							366,
							367,
							368,
							1138,
							1139,
							1140,
							1141,
							1142,
							1143,
							1144
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Storfjord",
						"ID": "3054 Storfjord",
						"Nr": 3054
					}
				},
				{
					"arcs": [
						[
							[
								-369,
								-368,
								369,
								370,
								371,
								372,
								373,
								374,
								1145,
								1146,
								1147
							]
						],
						[
							[
								1148,
								1149,
								1150,
								1151
							]
						],
						[
							[
								1152
							]
						],
						[
							[
								1153,
								1154
							]
						],
						[
							[
								1155
							]
						],
						[
							[
								1156
							]
						],
						[
							[
								1157
							]
						],
						[
							[
								1158
							]
						],
						[
							[
								1159
							]
						],
						[
							[
								1160
							]
						],
						[
							[
								1161
							]
						],
						[
							[
								1162,
								1163
							]
						],
						[
							[
								1164
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Søre Sunnmøre",
						"ID": "3055 Søre Sunnmøre",
						"Nr": 3055
					}
				},
				{
					"arcs": [
						[
							[
								1165
							]
						],
						[
							[
								1166
							]
						],
						[
							[
								1167
							]
						],
						[
							[
								1168
							]
						],
						[
							[
								1169
							]
						],
						[
							[
								-104,
								-103,
								-102,
								-101,
								-100,
								-202,
								-201,
								-200,
								-199,
								375,
								376,
								1170,
								1171,
								1172,
								1173,
								1174
							]
						],
						[
							[
								1175
							]
						],
						[
							[
								1176,
								-105
							]
						],
						[
							[
								1177
							]
						],
						[
							[
								1178
							]
						],
						[
							[
								1179
							]
						],
						[
							[
								1180
							]
						],
						[
							[
								1181
							]
						],
						[
							[
								1182
							]
						],
						[
							[
								1183
							]
						],
						[
							[
								1184
							]
						],
						[
							[
								1185
							]
						],
						[
							[
								1186
							]
						],
						[
							[
								1187
							]
						],
						[
							[
								377,
								1188
							]
						],
						[
							[
								1189,
								1190,
								378,
								379,
								380,
								381
							]
						],
						[
							[
								1191
							]
						],
						[
							[
								1192
							]
						],
						[
							[
								1193
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Nordmøre",
						"ID": "3052 Nordmøre",
						"Nr": 3052
					}
				},
				{
					"arcs": [
						[
							[
								1194,
								1195,
								1196,
								1197,
								1198,
								1199,
								-378,
								1200,
								-382,
								-381,
								-380,
								-379,
								1201,
								-377,
								382,
								383,
								384,
								-363,
								-362,
								-361,
								-360,
								-358,
								-357
							]
						],
						[
							[
								1202
							]
						],
						[
							[
								1203
							]
						],
						[
							[
								1204
							]
						],
						[
							[
								1205
							]
						],
						[
							[
								1206
							]
						],
						[
							[
								1207
							]
						],
						[
							[
								1208
							]
						],
						[
							[
								1209
							]
						],
						[
							[
								1210
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Romsdal",
						"ID": "3053 Romsdal",
						"Nr": 3053
					}
				},
				{
					"arcs": [
						[
							-277,
							-276,
							385,
							386,
							387,
							388,
							389,
							390,
							391,
							392,
							393,
							394,
							395,
							396,
							-264,
							-263,
							-262,
							-261,
							-144,
							-140,
							-139,
							397,
							398,
							399,
							-155,
							-281,
							1211,
							1212,
							1213,
							1214,
							1215,
							1216,
							1217,
							1218,
							1219,
							1220,
							1221,
							1222,
							1223
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Sogn",
						"ID": "3050 Sogn",
						"Nr": 3050
					}
				},
				{
					"arcs": [
						[
							[
								-391,
								-390,
								-389,
								-388,
								-387,
								-386,
								-275,
								1224,
								-278,
								-280,
								1225,
								1226,
								1227,
								404,
								400,
								401,
								402,
								403
							]
						],
						[
							[
								1228
							]
						],
						[
							[
								1229
							]
						],
						[
							[
								1230
							]
						],
						[
							[
								1231
							]
						],
						[
							[
								1232
							]
						],
						[
							[
								1233
							]
						],
						[
							[
								1234
							]
						],
						[
							[
								1235
							]
						],
						[
							[
								1236
							]
						],
						[
							[
								1237
							]
						],
						[
							[
								-279,
								1238
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Sunnfjord",
						"ID": "3051 Sunnfjord",
						"Nr": 3051
					}
				},
				{
					"arcs": [
						[
							[
								1239,
								1240,
								1241,
								1242,
								1243,
								1244,
								-375,
								-374,
								-373,
								-372,
								-371,
								-370,
								-367,
								-366,
								405,
								-392,
								-404,
								-403,
								-402,
								-401,
								-405
							]
						],
						[
							[
								1245
							]
						],
						[
							[
								1246
							]
						],
						[
							[
								1247
							]
						],
						[
							[
								1248
							]
						],
						[
							[
								1249
							]
						],
						[
							[
								1250
							]
						],
						[
							[
								1251
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Nordfjord",
						"ID": "3049 Nordfjord",
						"Nr": 3049
					}
				},
				{
					"arcs": [
						[
							406,
							407,
							408,
							-394,
							-393,
							-406,
							-365,
							-364,
							-385,
							-384,
							-383,
							-376,
							-198,
							-197,
							409,
							410,
							-180,
							-179,
							-178
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Nord-Gudbrandsdal",
						"ID": "3018 Nord-Gudbrandsdal",
						"Nr": 3018
					}
				},
				{
					"arcs": [
						[
							-397,
							-396,
							-395,
							-409,
							-408,
							-407,
							-177,
							-176,
							411,
							412,
							413,
							414,
							415,
							416,
							-240,
							-271,
							-270,
							-269,
							-268,
							-267,
							-266,
							-265
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Valdres",
						"ID": "3019 Valdres",
						"Nr": 3019
					}
				},
				{
					"arcs": [
						[
							[
								417,
								1252,
								1253,
								1254,
								1255,
								1256,
								1257,
								-16,
								-148,
								-31,
								-319,
								-318,
								-317,
								418
							]
						],
						[
							[
								1258,
								1259
							]
						],
						[
							[
								1260
							]
						],
						[
							[
								1261
							]
						],
						[
							[
								1262
							]
						],
						[
							[
								-15,
								-175,
								-17,
								1263
							]
						],
						[
							[
								1264
							]
						],
						[
							[
								1265
							]
						],
						[
							[
								1266
							]
						],
						[
							[
								1267
							]
						],
						[
							[
								1268
							]
						],
						[
							[
								1269
							]
						],
						[
							[
								1270
							]
						],
						[
							[
								1271
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Ryfylke",
						"ID": "3038 Ryfylke",
						"Nr": 3038
					}
				},
				{
					"arcs": [
						[
							[
								-418,
								419,
								420,
								421,
								422,
								423,
								1272,
								1273,
								1274,
								1275,
								1276,
								1277,
								1278,
								1279,
								1280,
								1281
							]
						],
						[
							[
								1282
							]
						],
						[
							[
								1283,
								1284
							]
						],
						[
							[
								1285
							]
						],
						[
							[
								1286
							]
						],
						[
							[
								1287
							]
						],
						[
							[
								1288
							]
						],
						[
							[
								1289
							]
						],
						[
							[
								1290
							]
						],
						[
							[
								1291
							]
						],
						[
							[
								1292
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Stavangerregionen",
						"ID": "3039 Stavangerregionen",
						"Nr": 3039
					}
				},
				{
					"arcs": [
						[
							[
								-125,
								-124,
								-123,
								-63,
								-62,
								424,
								1293,
								1294
							]
						],
						[
							[
								1295
							]
						],
						[
							[
								1296
							]
						],
						[
							[
								1297
							]
						],
						[
							[
								1298
							]
						],
						[
							[
								1299
							]
						],
						[
							[
								1300
							]
						],
						[
							[
								1301
							]
						],
						[
							[
								1302
							]
						],
						[
							[
								1303
							]
						],
						[
							[
								1304
							]
						],
						[
							[
								1305
							]
						],
						[
							[
								1306
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Nedre Glomma",
						"ID": "3004 Nedre Glomma",
						"Nr": 3004
					}
				},
				{
					"arcs": [
						[
							[
								-326,
								-325,
								-324,
								-323,
								429,
								430,
								431,
								432,
								1307,
								1308,
								433,
								425,
								426,
								427,
								428
							]
						],
						[
							[
								1309
							]
						],
						[
							[
								1310
							]
						],
						[
							[
								434,
								1311
							]
						],
						[
							[
								435,
								1312
							]
						],
						[
							[
								1313
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Mandalsregionen",
						"ID": "3034 Mandalsregionen",
						"Nr": 3034
					}
				},
				{
					"arcs": [
						[
							438,
							-183,
							-182,
							439,
							440,
							441,
							442,
							443,
							444,
							445,
							446,
							-90,
							1314,
							1315,
							447,
							448,
							449,
							450,
							451,
							436,
							437
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Sør Østerdal",
						"ID": "3013 Sør Østerdal",
						"Nr": 3013
					}
				},
				{
					"arcs": [
						[
							-86,
							-91,
							-447,
							-446,
							-445,
							-444,
							-443,
							-442,
							-441,
							-440,
							-181,
							-411,
							-410,
							-196,
							-195,
							-194,
							-96,
							-95
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Fjellregionen",
						"ID": "3010 Fjellregionen",
						"Nr": 3010
					}
				},
				{
					"arcs": [
						[
							452,
							-167,
							-166,
							-165,
							-164,
							453,
							454,
							455,
							456,
							-449,
							-448,
							1316,
							1317,
							1318,
							1319,
							1320
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Glåmdal",
						"ID": "3011 Glåmdal",
						"Nr": 3011
					}
				},
				{
					"arcs": [
						[
							-439,
							457,
							458,
							459,
							460,
							461,
							-413,
							-412,
							-186,
							-185,
							-184
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Lillehammerregionen",
						"ID": "3016 Lillehammerregionen",
						"Nr": 3016
					}
				},
				{
					"arcs": [
						[
							-286,
							-285,
							-284,
							-316,
							-174,
							-173,
							-172,
							-171,
							-170,
							-169,
							-168,
							-453,
							1321,
							-59,
							-58,
							-57,
							-56,
							-55,
							462,
							463,
							464
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Nedre Romerike",
						"ID": "3007 Nedre Romerike",
						"Nr": 3007
					}
				},
				{
					"arcs": [
						[
							-162,
							-161,
							-160,
							-315,
							-314,
							-241,
							-417,
							-416,
							-415,
							-414,
							-462,
							-461,
							-460,
							465,
							466,
							467
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Gjøvikregionen",
						"ID": "3014 Gjøvikregionen",
						"Nr": 3014
					}
				},
				{
					"arcs": [
						[
							[
								468,
								469,
								470,
								471,
								472,
								-420,
								-419,
								-330,
								-329,
								-328,
								-327,
								-429,
								-428,
								-427,
								-426,
								-434,
								1322,
								-436,
								1323,
								1324,
								1325,
								1326,
								1327,
								1328
							]
						],
						[
							[
								1329
							]
						],
						[
							[
								1330
							]
						],
						[
							[
								1331
							]
						],
						[
							[
								1332
							]
						],
						[
							[
								-435,
								1333
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Lister",
						"ID": "3033 Lister",
						"Nr": 3033
					}
				},
				{
					"arcs": [
						[
							-457,
							-456,
							-455,
							-454,
							-163,
							-468,
							-467,
							-466,
							-459,
							-458,
							-438,
							-437,
							-452,
							-451,
							-450
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Hamarregionen",
						"ID": "3012 Hamarregionen",
						"Nr": 3012
					}
				},
				{
					"arcs": [
						[
							[
								-289,
								-288,
								-287,
								-465,
								-464,
								-463,
								-54,
								-53,
								-52,
								-69,
								-68,
								-67,
								-122,
								-121,
								1334,
								1335,
								1336,
								1337,
								1338,
								1339,
								1340,
								1341
							]
						],
						[
							[
								-291,
								1342
							]
						],
						[
							[
								1343
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Follo",
						"ID": "3006 Follo",
						"Nr": 3006
					}
				},
				{
					"arcs": [
						[
							[
								-433,
								-432,
								-431,
								-430,
								-322,
								-321,
								-320,
								-113,
								-112,
								-111,
								1344,
								1345,
								1346
							]
						],
						[
							[
								1347
							]
						],
						[
							[
								1348
							]
						],
						[
							[
								1349
							]
						],
						[
							[
								1350
							]
						],
						[
							[
								-120,
								1351
							]
						],
						[
							[
								1352
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Kristiansandregionen",
						"ID": "3035 Kristiansandregionen",
						"Nr": 3035
					}
				},
				{
					"arcs": [
						[
							[
								-356,
								-355,
								-351,
								1353,
								-354,
								-353,
								1354,
								1355,
								1356,
								1357
							]
						],
						[
							[
								1358,
								1359,
								1360,
								1361,
								1362,
								1363,
								1364,
								1365,
								1366
							]
						],
						[
							[
								1367
							]
						],
						[
							[
								-352,
								1368
							]
						],
						[
							[
								1369
							]
						],
						[
							[
								1370
							]
						],
						[
							[
								1371
							]
						],
						[
							[
								1372
							]
						],
						[
							[
								1373
							]
						],
						[
							[
								1374
							]
						],
						[
							[
								1375
							]
						],
						[
							[
								1376
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Vesterålen",
						"ID": "3076 Vesterålen",
						"Nr": 3076
					}
				},
				{
					"arcs": [
						[
							1377,
							-425,
							-61,
							-60
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Halden",
						"ID": "3001 Halden",
						"Nr": 3001
					}
				},
				{
					"arcs": [
						[
							[
								1378,
								1379,
								1380,
								1381
							]
						],
						[
							[
								1382
							]
						],
						[
							[
								1383
							]
						],
						[
							[
								1384
							]
						],
						[
							[
								1385
							]
						],
						[
							[
								1386
							]
						],
						[
							[
								1387
							]
						],
						[
							[
								1388,
								1389
							]
						],
						[
							[
								1390
							]
						],
						[
							[
								1391
							]
						],
						[
							[
								1392
							]
						],
						[
							[
								1393
							]
						],
						[
							[
								1394
							]
						],
						[
							[
								1395
							]
						],
						[
							[
								1396
							]
						],
						[
							[
								1397
							]
						],
						[
							[
								1398
							]
						],
						[
							[
								1399
							]
						],
						[
							[
								-342,
								-335,
								1400
							]
						],
						[
							[
								1401
							]
						],
						[
							[
								1402
							]
						],
						[
							[
								1403
							]
						],
						[
							[
								1404
							]
						],
						[
							[
								1405
							]
						],
						[
							[
								1406
							]
						],
						[
							[
								1407
							]
						],
						[
							[
								1408
							]
						],
						[
							[
								1409
							]
						],
						[
							[
								1410
							]
						],
						[
							[
								1411
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "HALD",
						"ID": "3069 HALD",
						"Nr": 3069
					}
				},
				{
					"arcs": [
						[
							[
								1412,
								1413,
								-424,
								-423,
								-422,
								-421,
								-473,
								-472,
								-471,
								-470,
								-469
							]
						],
						[
							[
								1414
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Dalane",
						"ID": "3036 Dalane",
						"Nr": 3036
					}
				},
				{
					"arcs": [
						[
							[
								-153,
								-156,
								-400,
								-399,
								-398,
								-138,
								1415,
								1416
							]
						],
						[
							[
								1417,
								1418
							]
						],
						[
							[
								1419,
								-137,
								-143,
								-130,
								-132,
								1420,
								-141
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Osterfjorden",
						"ID": "3045 Osterfjorden",
						"Nr": 3045
					}
				},
				{
					"arcs": [
						[
							[
								-8,
								-10,
								1421,
								1422
							]
						],
						[
							[
								1423
							]
						],
						[
							[
								1424
							]
						],
						[
							[
								1425
							]
						],
						[
							[
								1426
							]
						],
						[
							[
								-28,
								-109,
								1427
							]
						],
						[
							[
								-29,
								1428,
								-9,
								1429,
								-11,
								1430,
								-7
							]
						],
						[
							[
								1431
							]
						],
						[
							[
								1432
							]
						],
						[
							[
								1433
							]
						],
						[
							[
								1434
							]
						],
						[
							[
								1435
							]
						],
						[
							[
								1436
							]
						],
						[
							[
								1437
							]
						],
						[
							[
								1438
							]
						],
						[
							[
								1439
							]
						],
						[
							[
								1440
							]
						],
						[
							[
								1441
							]
						],
						[
							[
								1442
							]
						],
						[
							[
								1443
							]
						],
						[
							[
								1444
							]
						],
						[
							[
								1445
							]
						],
						[
							[
								1446
							]
						],
						[
							[
								1447
							]
						],
						[
							[
								1448
							]
						],
						[
							[
								1449
							]
						],
						[
							[
								1450
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Kystgruppen",
						"ID": "3066 Kystgruppen",
						"Nr": 3066
					}
				}
			]
		},
		"kommune": {
			"type": "GeometryCollection",
			"geometries": [
				{
					"arcs": [
						[
							271,
							1451,
							-230,
							1452
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 55109.0489373,
						"Shape_Area": 120563989.851,
						"Sted": "Nedre Eiker",
						"ID": "0625 Nedre Eiker",
						"Rnr": 3020,
						"Region": "Drammensregionen",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 625
					}
				},
				{
					"arcs": [
						[
							436,
							1453,
							442,
							1454,
							1455,
							450,
							451
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 191851.323596,
						"Shape_Area": 1339350823.01,
						"Sted": "Åmot",
						"ID": "0429 Åmot",
						"Rnr": 3013,
						"Region": "Sør Østerdal",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 429
					}
				},
				{
					"arcs": [
						[
							[
								1456,
								1457,
								1140,
								1458,
								364,
								365,
								366,
								367
							]
						],
						[
							[
								1142,
								1459,
								1460
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 180474.770058,
						"Shape_Area": 950448622.058,
						"Sted": "Stranda",
						"ID": "1525 Stranda",
						"Rnr": 3054,
						"Region": "Storfjord",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1525
					}
				},
				{
					"arcs": [
						[
							[
								1461,
								863
							]
						],
						[
							[
								303,
								865,
								1462,
								871,
								1463
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 347531.243557,
						"Shape_Area": 3688706896.68,
						"Sted": "Nordreisa",
						"ID": "1942 Nordreisa",
						"Rnr": 3080,
						"Region": "Nord-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1942
					}
				},
				{
					"arcs": [
						[
							[
								-302,
								307,
								-1464,
								872,
								-303
							]
						],
						[
							[
								873
							]
						],
						[
							[
								874
							]
						],
						[
							[
								875
							]
						],
						[
							[
								876
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 326875.898455,
						"Shape_Area": 2685920518.39,
						"Sted": "Kvænangen",
						"ID": "1943 Kvænangen",
						"Rnr": 3080,
						"Region": "Nord-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1943
					}
				},
				{
					"arcs": [
						[
							866,
							1464,
							870,
							-1463
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 178034.781444,
						"Shape_Area": 1114962760.28,
						"Sted": "Kåfjord",
						"ID": "1940 Kåfjord",
						"Rnr": 3080,
						"Region": "Nord-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1940
					}
				},
				{
					"arcs": [
						[
							[
								-1462,
								864
							]
						],
						[
							[
								877
							]
						],
						[
							[
								878
							]
						],
						[
							[
								879
							]
						],
						[
							[
								880
							]
						],
						[
							[
								881
							]
						],
						[
							[
								882
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 212617.263305,
						"Shape_Area": 1561036209.06,
						"Sted": "Skjervøy",
						"ID": "1941 Skjervøy",
						"Rnr": 3080,
						"Region": "Nord-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1941
					}
				},
				{
					"arcs": [
						[
							-40,
							1465,
							1466,
							211,
							212
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 119499.059504,
						"Shape_Area": 430314779.798,
						"Sted": "Nome",
						"ID": "0819 Nome",
						"Rnr": 3028,
						"Region": "Midt-Telemark",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 819
					}
				},
				{
					"arcs": [
						[
							-369,
							-368,
							369,
							1467,
							1147
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 145942.497886,
						"Shape_Area": 945681986.272,
						"Sted": "Ørsta",
						"ID": "1520 Ørsta",
						"Rnr": 3055,
						"Region": "Søre Sunnmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1520
					}
				},
				{
					"arcs": [
						[
							1468,
							1469,
							1470,
							740,
							1471,
							742
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 85727.4061404,
						"Shape_Area": 372330282.486,
						"Sted": "Bamble",
						"ID": "0814 Bamble",
						"Rnr": 3027,
						"Region": "Grenland",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 814
					}
				},
				{
					"arcs": [
						[
							[
								-1469,
								743,
								-119,
								-118,
								1472
							]
						],
						[
							[
								-1472,
								741
							]
						],
						[
							[
								744
							]
						],
						[
							[
								745
							]
						],
						[
							[
								746
							]
						],
						[
							[
								747
							]
						],
						[
							[
								748
							]
						],
						[
							[
								749
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 148310.464748,
						"Shape_Area": 1061227357.09,
						"Sted": "Kragerø",
						"ID": "0815 Kragerø",
						"Rnr": 3027,
						"Region": "Grenland",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 815
					}
				},
				{
					"arcs": [
						[
							-1470,
							-1473,
							-117,
							-42,
							-41,
							-213,
							1473
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 161759.599968,
						"Shape_Area": 1065611596.3,
						"Sted": "Drangedal",
						"ID": "0817 Drangedal",
						"Rnr": 3027,
						"Region": "Grenland",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 817
					}
				},
				{
					"arcs": [
						[
							[
								1474,
								516,
								1475
							]
						],
						[
							[
								518
							]
						],
						[
							[
								519
							]
						],
						[
							[
								520
							]
						],
						[
							[
								521
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 212029.737579,
						"Shape_Area": 1353841594.8,
						"Sted": "Karmøy",
						"ID": "1149 Karmøy",
						"Rnr": 3037,
						"Region": "Haugesundregionen",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1149
					}
				},
				{
					"arcs": [
						[
							-224,
							1476,
							1477,
							-226,
							-225
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 65691.4742015,
						"Shape_Area": 188177084.873,
						"Sted": "Andebu",
						"ID": "0719 Andebu",
						"Rnr": 3025,
						"Region": "Tønsbergregionen",
						"Fnr": 7,
						"Fylke": "Vestfold",
						"Nr": 719
					}
				},
				{
					"arcs": [
						[
							[
								761,
								1478,
								1479,
								1480,
								-1477,
								-223,
								1481,
								1482
							]
						],
						[
							[
								766
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 106458.334241,
						"Shape_Area": 250005020.524,
						"Sted": "Re",
						"ID": "0716 Re",
						"Rnr": 3025,
						"Region": "Tønsbergregionen",
						"Fnr": 7,
						"Fylke": "Vestfold",
						"Nr": 716
					}
				},
				{
					"arcs": [
						[
							231,
							1483,
							-1482,
							-222,
							227,
							228,
							229,
							230
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 63360.6081394,
						"Shape_Area": 163323999.912,
						"Sted": "Hof",
						"ID": "0714 Hof",
						"Rnr": 3025,
						"Region": "Tønsbergregionen",
						"Fnr": 7,
						"Fylke": "Vestfold",
						"Nr": 714
					}
				},
				{
					"arcs": [
						[
							[
								-232,
								1484,
								1485,
								786,
								-233
							]
						],
						[
							[
								787
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 67050.0607122,
						"Shape_Area": 200048721.356,
						"Sted": "Sande",
						"ID": "0713 Sande",
						"Rnr": 3020,
						"Region": "Drammensregionen",
						"Fnr": 7,
						"Fylke": "Vestfold",
						"Nr": 713
					}
				},
				{
					"arcs": [
						[
							-1486,
							1486,
							785
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 43137.6313625,
						"Shape_Area": 76873522.2089,
						"Sted": "Svelvik",
						"ID": "0711 Svelvik",
						"Rnr": 3020,
						"Region": "Drammensregionen",
						"Fnr": 7,
						"Fylke": "Vestfold",
						"Nr": 711
					}
				},
				{
					"arcs": [
						[
							452,
							-167,
							1487,
							1488,
							1320
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 116928.548198,
						"Shape_Area": 640422620.348,
						"Sted": "Eidskog",
						"ID": "0420 Eidskog",
						"Rnr": 3011,
						"Region": "Glåmdal",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 420
					}
				},
				{
					"arcs": [
						[
							-107,
							-106,
							-110,
							-23,
							1489,
							1490,
							623,
							1491,
							625,
							1492
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 205124.885244,
						"Shape_Area": 1615974015.66,
						"Sted": "Steinkjer",
						"ID": "1702 Steinkjer",
						"Rnr": 3064,
						"Region": "Innherred",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1702
					}
				},
				{
					"arcs": [
						[
							[
								105,
								1493,
								582,
								1494,
								1495
							]
						],
						[
							[
								1496,
								584
							]
						],
						[
							[
								580,
								1497
							]
						],
						[
							[
								586
							]
						],
						[
							[
								587
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 222623.917764,
						"Shape_Area": 1036844999.64,
						"Sted": "Namsos",
						"ID": "1703 Namsos",
						"Rnr": 3067,
						"Region": "Midtre Namdal",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1703
					}
				},
				{
					"arcs": [
						[
							1317,
							1498,
							1499,
							454,
							1500
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 182368.614907,
						"Shape_Area": 1039484717.64,
						"Sted": "Åsnes",
						"ID": "0425 Åsnes",
						"Rnr": 3011,
						"Region": "Glåmdal",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 425
					}
				},
				{
					"arcs": [
						[
							1501,
							1502,
							88,
							-84,
							562
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 165947.774067,
						"Shape_Area": 1326774553.31,
						"Sted": "Tydal",
						"ID": "1665 Tydal",
						"Rnr": 3062,
						"Region": "Rørosregionen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1665
					}
				},
				{
					"arcs": [
						[
							1503,
							1504,
							1505,
							1506,
							-80,
							-79,
							-89,
							-88
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 149193.186135,
						"Shape_Area": 1230614796.3,
						"Sted": "Selbu",
						"ID": "1664 Selbu",
						"Rnr": 3061,
						"Region": "Trondheimsregionen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1664
					}
				},
				{
					"arcs": [
						[
							567,
							-81,
							-1507,
							1507
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 77708.1872948,
						"Shape_Area": 232134483.458,
						"Sted": "Malvik",
						"ID": "1663 Malvik",
						"Rnr": 3061,
						"Region": "Trondheimsregionen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1663
					}
				},
				{
					"arcs": [
						[
							1508,
							1509,
							-1506
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 68817.4311047,
						"Shape_Area": 186934995.267,
						"Sted": "Klæbu",
						"ID": "1662 Klæbu",
						"Rnr": 3061,
						"Region": "Trondheimsregionen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1662
					}
				},
				{
					"arcs": [
						[
							417,
							1252,
							1510,
							1511,
							-317,
							418
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 156968.868654,
						"Shape_Area": 855041479.905,
						"Sted": "Forsand",
						"ID": "1129 Forsand",
						"Rnr": 3038,
						"Region": "Ryfylke",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1129
					}
				},
				{
					"arcs": [
						[
							1512,
							1513,
							1273,
							1514,
							1515
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 105865.476061,
						"Shape_Area": 547653099.496,
						"Sted": "Klepp",
						"ID": "1120 Klepp",
						"Rnr": 3039,
						"Region": "Stavangerregionen",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1120
					}
				},
				{
					"arcs": [
						[
							1516,
							1517,
							421,
							1518,
							-1513
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 75570.7755901,
						"Shape_Area": 186434226.675,
						"Sted": "Time",
						"ID": "1121 Time",
						"Rnr": 3039,
						"Region": "Stavangerregionen",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1121
					}
				},
				{
					"arcs": [
						[
							-418,
							419,
							420,
							-1518,
							1519,
							1281
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 163741.268516,
						"Shape_Area": 624969921.646,
						"Sted": "Gjesdal",
						"ID": "1122 Gjesdal",
						"Rnr": 3039,
						"Region": "Stavangerregionen",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1122
					}
				},
				{
					"arcs": [
						[
							[
								1520,
								-1515,
								1274,
								1521
							]
						],
						[
							[
								1522,
								1276
							]
						],
						[
							[
								1282
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 108269.7639,
						"Shape_Area": 569786015.611,
						"Sted": "Sola",
						"ID": "1124 Sola",
						"Rnr": 3039,
						"Region": "Stavangerregionen",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1124
					}
				},
				{
					"arcs": [
						[
							1523,
							1278
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 40961.3225986,
						"Shape_Area": 90481276.929,
						"Sted": "Randaberg",
						"ID": "1127 Randaberg",
						"Rnr": 3039,
						"Region": "Stavangerregionen",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1127
					}
				},
				{
					"arcs": [
						[
							[
								1524,
								1346,
								-433,
								-432,
								1525
							]
						],
						[
							[
								1347
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 117489.254039,
						"Shape_Area": 547775495.787,
						"Sted": "Søgne",
						"ID": "1018 Søgne",
						"Rnr": 3035,
						"Region": "Kristiansandregionen",
						"Fnr": 10,
						"Fylke": "Vest-Agder",
						"Nr": 1018
					}
				},
				{
					"arcs": [
						[
							-184,
							-439,
							457,
							1526,
							1527
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 111300.1552,
						"Shape_Area": 640388304.48,
						"Sted": "Øyer",
						"ID": "0521 Øyer",
						"Rnr": 3016,
						"Region": "Lillehammerregionen",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 521
					}
				},
				{
					"arcs": [
						[
							461,
							-413,
							-412,
							-186,
							-185,
							-1528,
							1528
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 161809.565805,
						"Shape_Area": 1191320906.36,
						"Sted": "Gausdal",
						"ID": "0522 Gausdal",
						"Rnr": 3016,
						"Region": "Lillehammerregionen",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 522
					}
				},
				{
					"arcs": [
						[
							-430,
							-322,
							1529,
							1530,
							1531,
							1532
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 122574.227536,
						"Shape_Area": 381648951.397,
						"Sted": "Vennesla",
						"ID": "1014 Vennesla",
						"Rnr": 3035,
						"Region": "Kristiansandregionen",
						"Fnr": 10,
						"Fylke": "Vest-Agder",
						"Nr": 1014
					}
				},
				{
					"arcs": [
						[
							371,
							1533,
							1146,
							-1468,
							370
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 146096.125311,
						"Shape_Area": 662512238.689,
						"Sted": "Volda",
						"ID": "1519 Volda",
						"Rnr": 3055,
						"Region": "Søre Sunnmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1519
					}
				},
				{
					"arcs": [
						[
							[
								400,
								1534,
								1227,
								404
							]
						],
						[
							[
								1228
							]
						],
						[
							[
								1229
							]
						],
						[
							[
								1230
							]
						],
						[
							[
								1231
							]
						],
						[
							[
								1232
							]
						],
						[
							[
								1233
							]
						],
						[
							[
								1234
							]
						],
						[
							[
								1235
							]
						],
						[
							[
								1236
							]
						],
						[
							[
								1237
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 248170.673328,
						"Shape_Area": 2153237965.21,
						"Sted": "Flora",
						"ID": "1401 Flora",
						"Rnr": 3051,
						"Region": "Sunnfjord",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1401
					}
				},
				{
					"arcs": [
						[
							1535,
							-1526,
							-431,
							-1533
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 105612.713417,
						"Shape_Area": 218901708.624,
						"Sted": "Songdalen",
						"ID": "1017 Songdalen",
						"Rnr": 3035,
						"Region": "Kristiansandregionen",
						"Fnr": 10,
						"Fylke": "Vest-Agder",
						"Nr": 1017
					}
				},
				{
					"arcs": [
						[
							467,
							-162,
							-161,
							1536,
							1537,
							466
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 102595.745303,
						"Shape_Area": 566821724.856,
						"Sted": "Østre Toten",
						"ID": "0528 Østre Toten",
						"Rnr": 3014,
						"Region": "Gjøvikregionen",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 528
					}
				},
				{
					"arcs": [
						[
							1538,
							1539,
							-1537,
							-160,
							-315
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 87518.8405072,
						"Shape_Area": 248059700.289,
						"Sted": "Vestre Toten",
						"ID": "0529 Vestre Toten",
						"Rnr": 3014,
						"Region": "Gjøvikregionen",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 529
					}
				},
				{
					"arcs": [
						[
							1540,
							1541,
							645,
							1542,
							-135
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 77490.0585031,
						"Shape_Area": 232050248.025,
						"Sted": "Granvin",
						"ID": "1234 Granvin",
						"Rnr": 3042,
						"Region": "Hardanger",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1234
					}
				},
				{
					"arcs": [
						[
							[
								133,
								134,
								135,
								136,
								636,
								137,
								138,
								139
							]
						],
						[
							[
								140,
								637
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 260484.286731,
						"Shape_Area": 1818669672.55,
						"Sted": "Voss",
						"ID": "1235 Voss",
						"Rnr": 3043,
						"Region": "Voss",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1235
					}
				},
				{
					"arcs": [
						[
							[
								1543,
								150,
								1544,
								639
							]
						],
						[
							[
								-33,
								1545,
								641,
								1546
							]
						],
						[
							[
								-1542,
								1547,
								644
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 236526.993128,
						"Shape_Area": 1541632811.16,
						"Sted": "Ullensvang",
						"ID": "1231 Ullensvang",
						"Rnr": 3042,
						"Region": "Hardanger",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1231
					}
				},
				{
					"arcs": [
						[
							145,
							146,
							-1547,
							642,
							1548
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 192055.58572,
						"Shape_Area": 1522868126.17,
						"Sted": "Eidfjord",
						"ID": "1232 Eidfjord",
						"Rnr": 3042,
						"Region": "Hardanger",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1232
					}
				},
				{
					"arcs": [
						[
							-1541,
							-134,
							143,
							144,
							-1549,
							643,
							-1548
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 164254.233069,
						"Shape_Area": 749980211.988,
						"Sted": "Ulvik",
						"ID": "1233 Ulvik",
						"Rnr": 3042,
						"Region": "Hardanger",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1233
					}
				},
				{
					"arcs": [
						[
							-95,
							-86,
							-91,
							-447,
							1549,
							1550
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 210222.715237,
						"Shape_Area": 1038665150.97,
						"Sted": "Os",
						"ID": "0441 Os",
						"Rnr": 3010,
						"Region": "Fjellregionen",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 441
					}
				},
				{
					"arcs": [
						[
							141,
							-126,
							-131,
							142,
							-136,
							-1543,
							646
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 150747.827526,
						"Shape_Area": 765459959.766,
						"Sted": "Kvam",
						"ID": "1238 Kvam",
						"Rnr": 3042,
						"Region": "Hardanger",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1238
					}
				},
				{
					"arcs": [
						[
							-60,
							1377,
							-425,
							-61
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 138259.147847,
						"Shape_Area": 662091874.925,
						"Sted": "Halden",
						"ID": "0101 Halden",
						"Rnr": 3001,
						"Region": "Halden (Region)",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 101
					}
				},
				{
					"arcs": [
						[
							[
								1294,
								-125,
								1551
							]
						],
						[
							[
								1295
							]
						],
						[
							[
								1296
							]
						],
						[
							[
								1297
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 124450.37217,
						"Shape_Area": 561428767.097,
						"Sted": "Fredrikstad",
						"ID": "0106 Fredrikstad",
						"Rnr": 3004,
						"Region": "Nedre Glomma",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 106
					}
				},
				{
					"arcs": [
						[
							[
								1552,
								615,
								120,
								1553
							]
						],
						[
							[
								616
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 60147.2295252,
						"Shape_Area": 124788248.953,
						"Sted": "Moss",
						"ID": "0104 Moss",
						"Rnr": 3003,
						"Region": "Mosseregionen",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 104
					}
				},
				{
					"arcs": [
						[
							-123,
							-63,
							-62,
							424,
							1293,
							-1552,
							-124
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 104939.155314,
						"Shape_Area": 424271421.457,
						"Sted": "Sarpsborg",
						"ID": "0105 Sarpsborg",
						"Rnr": 3004,
						"Region": "Nedre Glomma",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 105
					}
				},
				{
					"arcs": [
						[
							[
								964,
								1554,
								1555,
								980,
								342
							]
						],
						[
							[
								981
							]
						],
						[
							[
								982
							]
						],
						[
							[
								983
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 275785.514898,
						"Shape_Area": 1562585495.12,
						"Sted": "Hamarøy",
						"ID": "1849 Hamarøy",
						"Rnr": 3073,
						"Region": "Salten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1849
					}
				},
				{
					"arcs": [
						[
							1556,
							1557,
							1558,
							118,
							597,
							1559,
							599
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 122253.845631,
						"Shape_Area": 585098467.212,
						"Sted": "Risør",
						"ID": "0901 Risør",
						"Rnr": 3032,
						"Region": "Arendalregionen",
						"Fnr": 9,
						"Fylke": "Aust-Agder",
						"Nr": 901
					}
				},
				{
					"arcs": [
						[
							[
								601,
								1560,
								603,
								1561,
								1562,
								1563
							]
						],
						[
							[
								605
							]
						],
						[
							[
								606
							]
						],
						[
							[
								607
							]
						],
						[
							[
								608
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 159562.464993,
						"Shape_Area": 920770834.15,
						"Sted": "Arendal",
						"ID": "0906 Arendal",
						"Rnr": 3032,
						"Region": "Arendalregionen",
						"Fnr": 9,
						"Fylke": "Aust-Agder",
						"Nr": 906
					}
				},
				{
					"arcs": [
						[
							[
								1564,
								-1562,
								604,
								110,
								111
							]
						],
						[
							[
								119,
								609
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 143379.928685,
						"Shape_Area": 944814052.191,
						"Sted": "Grimstad",
						"ID": "0904 Grimstad",
						"Rnr": 3032,
						"Region": "Arendalregionen",
						"Fnr": 9,
						"Fylke": "Aust-Agder",
						"Nr": 904
					}
				},
				{
					"arcs": [
						[
							1565,
							1566,
							966,
							1567,
							974
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 203705.797227,
						"Shape_Area": 1287630480.11,
						"Sted": "Fauske",
						"ID": "1841 Fauske",
						"Rnr": 3073,
						"Region": "Salten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1841
					}
				},
				{
					"arcs": [
						[
							1568,
							1569,
							973,
							-1568,
							967,
							-341
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 217417.784474,
						"Shape_Area": 2242275028.87,
						"Sted": "Saltdal",
						"ID": "1840 Saltdal",
						"Rnr": 3073,
						"Region": "Salten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1840
					}
				},
				{
					"arcs": [
						[
							[
								1570,
								-1555,
								965,
								-1567,
								1571,
								976,
								1572,
								978
							]
						],
						[
							[
								984
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 272215.897051,
						"Shape_Area": 1828776297.47,
						"Sted": "Sørfold",
						"ID": "1845 Sørfold",
						"Rnr": 3073,
						"Region": "Salten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1845
					}
				},
				{
					"arcs": [
						[
							125,
							126,
							629,
							1573
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 106607.863819,
						"Shape_Area": 514354948.883,
						"Sted": "Fusa",
						"ID": "1241 Fusa",
						"Rnr": 3041,
						"Region": "Bjørnefjorden",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1241
					}
				},
				{
					"arcs": [
						[
							-357,
							1194,
							1574,
							-361,
							-360,
							-358
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 100847.621363,
						"Shape_Area": 471375113.271,
						"Sted": "Vestnes",
						"ID": "1535 Vestnes",
						"Rnr": 3053,
						"Region": "Romsdal",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1535
					}
				},
				{
					"arcs": [
						[
							[
								356,
								1575,
								1087
							]
						],
						[
							[
								1088
							]
						],
						[
							[
								1089
							]
						],
						[
							[
								1090
							]
						],
						[
							[
								1091
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 179289.653337,
						"Shape_Area": 1066872385.46,
						"Sted": "Haram",
						"ID": "1534 Haram",
						"Rnr": 3056,
						"Region": "Ålesundregionen",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1534
					}
				},
				{
					"arcs": [
						[
							[
								1576,
								669
							]
						],
						[
							[
								1577,
								673
							]
						],
						[
							[
								1578,
								671
							]
						],
						[
							[
								675
							]
						],
						[
							[
								676
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 123421.566379,
						"Shape_Area": 570262412.315,
						"Sted": "Sund",
						"ID": "1245 Sund",
						"Rnr": 3047,
						"Region": "Hordaland Vest",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1245
					}
				},
				{
					"arcs": [
						[
							[
								689
							]
						],
						[
							[
								690
							]
						],
						[
							[
								691
							]
						],
						[
							[
								692
							]
						],
						[
							[
								693
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 126272.502433,
						"Shape_Area": 956663053.82,
						"Sted": "Austevoll",
						"ID": "1244 Austevoll",
						"Rnr": 3046,
						"Region": "Sunnhordland",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1244
					}
				},
				{
					"arcs": [
						[
							[
								677
							]
						],
						[
							[
								678
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 78531.8804423,
						"Shape_Area": 220220970.245,
						"Sted": "Askøy",
						"ID": "1247 Askøy",
						"Rnr": 3047,
						"Region": "Hordaland Vest",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1247
					}
				},
				{
					"arcs": [
						[
							-411,
							-410,
							-196,
							1579,
							1580,
							-440,
							-181
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 184020.720777,
						"Shape_Area": 1281728042.45,
						"Sted": "Folldal",
						"ID": "0439 Folldal",
						"Rnr": 3010,
						"Region": "Fjellregionen",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 439
					}
				},
				{
					"arcs": [
						[
							-446,
							1581,
							1582,
							-1550
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 192677.842208,
						"Shape_Area": 1126937560.27,
						"Sted": "Tolga",
						"ID": "0436 Tolga",
						"Rnr": 3010,
						"Region": "Fjellregionen",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 436
					}
				},
				{
					"arcs": [
						[
							-1551,
							-1583,
							1583,
							1584,
							-1580,
							-195,
							-194,
							-96
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 266253.48762,
						"Shape_Area": 1880172521.02,
						"Sted": "Tynset",
						"ID": "0437 Tynset",
						"Rnr": 3010,
						"Region": "Fjellregionen",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 437
					}
				},
				{
					"arcs": [
						[
							445,
							446,
							-90,
							1314,
							1585,
							444
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 271175.283885,
						"Shape_Area": 2196440603.24,
						"Sted": "Engerdal",
						"ID": "0434 Engerdal",
						"Rnr": 3013,
						"Region": "Sør Østerdal",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 434
					}
				},
				{
					"arcs": [
						[
							-1582,
							-445,
							-444,
							-443,
							-442,
							1586,
							-1584
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 293792.22065,
						"Shape_Area": 3169619051.04,
						"Sted": "Rendalen",
						"ID": "0432 Rendalen",
						"Rnr": 3010,
						"Region": "Fjellregionen",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 432
					}
				},
				{
					"arcs": [
						[
							384,
							-363,
							-362,
							-1575,
							1195,
							1587,
							383
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 228144.425293,
						"Shape_Area": 1640692678.22,
						"Sted": "Rauma",
						"ID": "1539 Rauma",
						"Rnr": 3053,
						"Region": "Romsdal",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1539
					}
				},
				{
					"arcs": [
						[
							[
								1588,
								1103
							]
						],
						[
							[
								-306,
								1589,
								1108,
								-307
							]
						],
						[
							[
								1109
							]
						],
						[
							[
								1110
							]
						],
						[
							[
								1590,
								1106
							]
						],
						[
							[
								1591,
								1111
							]
						],
						[
							[
								1113
							]
						],
						[
							[
								1114
							]
						],
						[
							[
								1115
							]
						],
						[
							[
								1116
							]
						],
						[
							[
								1117
							]
						],
						[
							[
								1118
							]
						],
						[
							[
								1119
							]
						],
						[
							[
								1120
							]
						],
						[
							[
								1121
							]
						],
						[
							[
								1122
							]
						],
						[
							[
								1123
							]
						],
						[
							[
								1124
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 390517.473004,
						"Shape_Area": 5292576958.4,
						"Sted": "Tromsø",
						"ID": "1902 Tromsø",
						"Rnr": 3079,
						"Region": "Tromsøregionen",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1902
					}
				},
				{
					"arcs": [
						[
							[
								-350,
								1592,
								1069
							]
						],
						[
							[
								1070
							]
						],
						[
							[
								1071
							]
						],
						[
							[
								1072
							]
						],
						[
							[
								1073
							]
						],
						[
							[
								1074
							]
						],
						[
							[
								1075
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 161682.223942,
						"Shape_Area": 784667047.701,
						"Sted": "Harstad",
						"ID": "1903 Harstad",
						"Rnr": 3077,
						"Region": "Sør-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1903
					}
				},
				{
					"arcs": [
						[
							1144,
							-359,
							359,
							1593
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 61484.702788,
						"Shape_Area": 151170524.121,
						"Sted": "Ørskog",
						"ID": "1523 Ørskog",
						"Rnr": 3054,
						"Region": "Storfjord",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1523
					}
				},
				{
					"arcs": [
						[
							-1457,
							368,
							1138,
							1594
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 94505.219377,
						"Shape_Area": 401308361.216,
						"Sted": "Sykkylven",
						"ID": "1528 Sykkylven",
						"Rnr": 3054,
						"Region": "Storfjord",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1528
					}
				},
				{
					"arcs": [
						[
							214,
							215,
							216,
							1595,
							1596
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 76703.3666881,
						"Shape_Area": 211088205.581,
						"Sted": "Siljan",
						"ID": "0811 Siljan",
						"Rnr": 3027,
						"Region": "Grenland",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 811
					}
				},
				{
					"arcs": [
						[
							[
								1597,
								571
							]
						],
						[
							[
								1598,
								573,
								1599
							]
						],
						[
							[
								575
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 116988.843254,
						"Shape_Area": 461432703.521,
						"Sted": "Agdenes",
						"ID": "1622 Agdenes",
						"Rnr": 3060,
						"Region": "Orkdalregionen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1622
					}
				},
				{
					"arcs": [
						[
							[
								1600,
								539
							]
						],
						[
							[
								544
							]
						],
						[
							[
								545
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 78687.4176491,
						"Shape_Area": 336226687.324,
						"Sted": "Ørland",
						"ID": "1621 Ørland",
						"Rnr": 3057,
						"Region": "Fosen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1621
					}
				},
				{
					"arcs": [
						[
							[
								1052
							]
						],
						[
							[
								1053
							]
						],
						[
							[
								1054
							]
						],
						[
							[
								1055
							]
						],
						[
							[
								1056
							]
						],
						[
							[
								1057
							]
						],
						[
							[
								1058
							]
						],
						[
							[
								1059
							]
						],
						[
							[
								1060
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 310127.255105,
						"Shape_Area": 5293378816.93,
						"Sted": "Frøya",
						"ID": "1620 Frøya",
						"Rnr": 3058,
						"Region": "Hitra/Frøya",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1620
					}
				},
				{
					"arcs": [
						[
							[
								1601,
								538,
								-1601,
								540,
								1602
							]
						],
						[
							[
								546
							]
						],
						[
							[
								547
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 153759.718782,
						"Shape_Area": 1171239805.54,
						"Sted": "Bjugn",
						"ID": "1627 Bjugn",
						"Rnr": 3057,
						"Region": "Fosen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1627
					}
				},
				{
					"arcs": [
						[
							75,
							1603,
							537,
							-1602,
							1604
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 132844.402907,
						"Shape_Area": 765742214.366,
						"Sted": "Rissa",
						"ID": "1624 Rissa",
						"Rnr": 3057,
						"Region": "Fosen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1624
					}
				},
				{
					"arcs": [
						[
							156,
							157,
							1605,
							1606,
							1607,
							1608,
							173
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 84849.3223767,
						"Shape_Area": 342569233.496,
						"Sted": "Nannestad",
						"ID": "0238 Nannestad",
						"Rnr": 3008,
						"Region": "Øvre Romerike",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 238
					}
				},
				{
					"arcs": [
						[
							-1606,
							158,
							159,
							160,
							1609
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 86959.4472606,
						"Shape_Area": 281773879.631,
						"Sted": "Hurdal",
						"ID": "0239 Hurdal",
						"Rnr": 3008,
						"Region": "Øvre Romerike",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 239
					}
				},
				{
					"arcs": [
						[
							171,
							172,
							-1609,
							1610,
							170
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 42367.6460639,
						"Shape_Area": 82256405.7495,
						"Sted": "Gjerdrum",
						"ID": "0234 Gjerdrum",
						"Rnr": 3008,
						"Region": "Øvre Romerike",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 234
					}
				},
				{
					"arcs": [
						[
							1611,
							1612,
							169,
							-1611,
							-1608
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 80224.7971277,
						"Shape_Area": 251521248.566,
						"Sted": "Ullensaker",
						"ID": "0235 Ullensaker",
						"Rnr": 3008,
						"Region": "Øvre Romerike",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 235
					}
				},
				{
					"arcs": [
						[
							167,
							168,
							-1613,
							1613,
							164,
							165,
							166
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 133448.797467,
						"Shape_Area": 638173038.438,
						"Sted": "Nes",
						"ID": "0236 Nes",
						"Rnr": 3008,
						"Region": "Øvre Romerike",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 236
					}
				},
				{
					"arcs": [
						[
							163,
							-1614,
							-1612,
							-1607,
							-1610,
							161,
							162
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 111183.289191,
						"Shape_Area": 452616370.154,
						"Sted": "Eidsvoll",
						"ID": "0237 Eidsvoll",
						"Rnr": 3008,
						"Region": "Øvre Romerike",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 237
					}
				},
				{
					"arcs": [
						[
							-286,
							1614,
							1615,
							464
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 35965.6025477,
						"Shape_Area": 66938364.7293,
						"Sted": "Lørenskog",
						"ID": "0230 Lørenskog",
						"Rnr": 3007,
						"Region": "Nedre Romerike",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 230
					}
				},
				{
					"arcs": [
						[
							-172,
							1616,
							1617,
							1618,
							-1615,
							-285,
							1619
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 54185.2186661,
						"Shape_Area": 74967286.1294,
						"Sted": "Skedsmo",
						"ID": "0231 Skedsmo",
						"Rnr": 3007,
						"Region": "Nedre Romerike",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 231
					}
				},
				{
					"arcs": [
						[
							-316,
							-174,
							-173,
							-1620,
							-284
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 77000.659697,
						"Shape_Area": 187163014.405,
						"Sted": "Nittedal",
						"ID": "0233 Nittedal",
						"Rnr": 3007,
						"Region": "Nedre Romerike",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 233
					}
				},
				{
					"arcs": [
						[
							[
								1620,
								627,
								-78
							]
						],
						[
							[
								622,
								-1491,
								1621
							]
						],
						[
							[
								-1492,
								624
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 136115.585562,
						"Shape_Area": 563959267.735,
						"Sted": "Inderøy",
						"ID": "1756 Inderøy",
						"Rnr": 3064,
						"Region": "Innherred",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1756
					}
				},
				{
					"arcs": [
						[
							[
								1422,
								-8,
								1622
							]
						],
						[
							[
								1423
							]
						],
						[
							[
								1424
							]
						],
						[
							[
								1425
							]
						],
						[
							[
								1426
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 195452.515158,
						"Shape_Area": 1703756179.16,
						"Sted": "Leka",
						"ID": "1755 Leka",
						"Rnr": 3066,
						"Region": "Kystgruppen",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1755
					}
				},
				{
					"arcs": [
						[
							[
								-28,
								-109,
								1427
							]
						],
						[
							[
								-29,
								1428,
								-9,
								1429,
								-11,
								1430,
								-7
							]
						],
						[
							[
								-1623,
								-10,
								1421
							]
						],
						[
							[
								1431
							]
						],
						[
							[
								1432
							]
						],
						[
							[
								1433
							]
						],
						[
							[
								1434
							]
						],
						[
							[
								1435
							]
						],
						[
							[
								1436
							]
						],
						[
							[
								1437
							]
						],
						[
							[
								1438
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 217614.791771,
						"Shape_Area": 1553634523.82,
						"Sted": "Nærøy",
						"ID": "1751 Nærøy",
						"Rnr": 3066,
						"Region": "Kystgruppen",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1751
					}
				},
				{
					"arcs": [
						[
							[
								1439
							]
						],
						[
							[
								1440
							]
						],
						[
							[
								1441
							]
						],
						[
							[
								1442
							]
						],
						[
							[
								1443
							]
						],
						[
							[
								1444
							]
						],
						[
							[
								1445
							]
						],
						[
							[
								1446
							]
						],
						[
							[
								1447
							]
						],
						[
							[
								1448
							]
						],
						[
							[
								1449
							]
						],
						[
							[
								1450
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 225952.823937,
						"Shape_Area": 3293926322.42,
						"Sted": "Vikna",
						"ID": "1750 Vikna",
						"Rnr": 3066,
						"Region": "Kystgruppen",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1750
					}
				},
				{
					"arcs": [
						[
							265,
							266,
							1623,
							1624,
							263,
							264
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 147821.330637,
						"Shape_Area": 756297937.65,
						"Sted": "Hemsedal",
						"ID": "0618 Hemsedal",
						"Rnr": 3021,
						"Region": "Hallingdal",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 618
					}
				},
				{
					"arcs": [
						[
							1625,
							1626,
							-258,
							1627,
							262,
							-1625
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 200239.044743,
						"Shape_Area": 1172546212.42,
						"Sted": "Ål",
						"ID": "0619 Ål",
						"Rnr": 3021,
						"Region": "Hallingdal",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 619
					}
				},
				{
					"arcs": [
						[
							233,
							234,
							235,
							1628
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 67239.0026349,
						"Shape_Area": 198639003.055,
						"Sted": "Hole",
						"ID": "0612 Hole",
						"Rnr": 3024,
						"Region": "Ringerike/Hole",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 612
					}
				},
				{
					"arcs": [
						[
							-259,
							-1627,
							1629,
							269,
							1630
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 125513.057774,
						"Shape_Area": 812073287.12,
						"Sted": "Nes",
						"ID": "0616 Nes",
						"Rnr": 3021,
						"Region": "Hallingdal",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 616
					}
				},
				{
					"arcs": [
						[
							267,
							268,
							-1630,
							-1626,
							-1624
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 101500.603663,
						"Shape_Area": 534810969.477,
						"Sted": "Gol",
						"ID": "0617 Gol",
						"Rnr": 3021,
						"Region": "Hallingdal",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 617
					}
				},
				{
					"arcs": [
						[
							-253,
							-260,
							-1631,
							270,
							-239,
							-254
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 127567.335398,
						"Shape_Area": 705163900.151,
						"Sted": "Flå",
						"ID": "0615 Flå",
						"Rnr": 3021,
						"Region": "Hallingdal",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 615
					}
				},
				{
					"arcs": [
						[
							[
								468,
								469,
								1631,
								1632,
								1328
							]
						],
						[
							[
								1329
							]
						],
						[
							[
								1330
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 185662.151314,
						"Shape_Area": 860179201.085,
						"Sted": "Flekkefjord",
						"ID": "1004 Flekkefjord",
						"Rnr": 3033,
						"Region": "Lister",
						"Fnr": 10,
						"Fylke": "Vest-Agder",
						"Nr": 1004
					}
				},
				{
					"arcs": [
						[
							1633,
							1634,
							-178,
							406,
							407,
							1635,
							1636
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 275060.891985,
						"Shape_Area": 1340140634.24,
						"Sted": "Vågå",
						"ID": "0515 Vågå",
						"Rnr": 3018,
						"Region": "Nord-Gudbrandsdal",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 515
					}
				},
				{
					"arcs": [
						[
							1637,
							328,
							1638,
							-49,
							-48
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 183060.332045,
						"Shape_Area": 1265032924.26,
						"Sted": "Valle",
						"ID": "0940 Valle",
						"Rnr": 3031,
						"Region": "Setesdal",
						"Fnr": 9,
						"Fylke": "Aust-Agder",
						"Nr": 940
					}
				},
				{
					"arcs": [
						[
							[
								1639,
								1640,
								432,
								1307
							]
						],
						[
							[
								1309
							]
						],
						[
							[
								1310
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 146840.676849,
						"Shape_Area": 1100512017.38,
						"Sted": "Mandal",
						"ID": "1002 Mandal",
						"Rnr": 3034,
						"Region": "Mandalsregionen",
						"Fnr": 10,
						"Fylke": "Vest-Agder",
						"Nr": 1002
					}
				},
				{
					"arcs": [
						[
							[
								-1525,
								-1536,
								-1532,
								1641,
								1642,
								1345
							]
						],
						[
							[
								1348
							]
						],
						[
							[
								1349
							]
						],
						[
							[
								1350
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 145368.079309,
						"Shape_Area": 781425055.58,
						"Sted": "Kristiansand",
						"ID": "1001 Kristiansand",
						"Rnr": 3035,
						"Region": "Kristiansandregionen",
						"Fnr": 10,
						"Fylke": "Vest-Agder",
						"Nr": 1001
					}
				},
				{
					"arcs": [
						[
							[
								1165
							]
						],
						[
							[
								1166
							]
						],
						[
							[
								1167
							]
						],
						[
							[
								1168
							]
						],
						[
							[
								1169
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 182097.28373,
						"Shape_Area": 2156977466.45,
						"Sted": "Smøla",
						"ID": "1573 Smøla",
						"Rnr": 3052,
						"Region": "Nordmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1573
					}
				},
				{
					"arcs": [
						[
							[
								-104,
								1643,
								1174
							]
						],
						[
							[
								1175
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 100384.815654,
						"Shape_Area": 383794168.394,
						"Sted": "Halsa",
						"ID": "1571 Halsa",
						"Rnr": 3052,
						"Region": "Nordmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1571
					}
				},
				{
					"arcs": [
						[
							[
								1176,
								-105
							]
						],
						[
							[
								1177
							]
						],
						[
							[
								1178
							]
						],
						[
							[
								1179
							]
						],
						[
							[
								1180
							]
						],
						[
							[
								1181
							]
						],
						[
							[
								1182
							]
						],
						[
							[
								1183
							]
						],
						[
							[
								1184
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 156083.68671,
						"Shape_Area": 1055173428.11,
						"Sted": "Aure",
						"ID": "1576 Aure",
						"Rnr": 3052,
						"Region": "Nordmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1576
					}
				},
				{
					"arcs": [
						[
							-236,
							246,
							247,
							1644,
							1645,
							-237
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 129284.172876,
						"Shape_Area": 511392299.904,
						"Sted": "Modum",
						"ID": "0623 Modum",
						"Rnr": 3023,
						"Region": "Midt-Buskerud",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 623
					}
				},
				{
					"arcs": [
						[
							261,
							-1628,
							-257,
							-146,
							-145,
							260
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 235725.598724,
						"Shape_Area": 1857532595.35,
						"Sted": "Hol",
						"ID": "0620 Hol",
						"Rnr": 3021,
						"Region": "Hallingdal",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 620
					}
				},
				{
					"arcs": [
						[
							-66,
							-65,
							-64,
							122,
							1646,
							1647,
							-1554,
							121
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 72409.0402856,
						"Shape_Area": 252720674.113,
						"Sted": "Våler",
						"ID": "0137 Våler",
						"Rnr": 3003,
						"Region": "Mosseregionen",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 137
					}
				},
				{
					"arcs": [
						[
							-1553,
							-1648,
							1648,
							614
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 54273.5187553,
						"Shape_Area": 128967672.888,
						"Sted": "Rygge",
						"ID": "0136 Rygge",
						"Rnr": 3003,
						"Region": "Mosseregionen",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 136
					}
				},
				{
					"arcs": [
						[
							[
								613,
								-1649,
								-1647,
								123,
								124
							]
						],
						[
							[
								617
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 78173.9684092,
						"Shape_Area": 158249578.831,
						"Sted": "Råde",
						"ID": "0135 Råde",
						"Rnr": 3003,
						"Region": "Mosseregionen",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 135
					}
				},
				{
					"arcs": [
						[
							[
								1649,
								694
							]
						],
						[
							[
								696
							]
						],
						[
							[
								697
							]
						],
						[
							[
								698
							]
						],
						[
							[
								699
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 91695.2620376,
						"Shape_Area": 481848356.349,
						"Sted": "Tysnes",
						"ID": "1223 Tysnes",
						"Rnr": 3046,
						"Region": "Sunnhordland",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1223
					}
				},
				{
					"arcs": [
						[
							51,
							1650,
							65,
							66,
							67,
							68
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 77853.7135113,
						"Shape_Area": 141532791.582,
						"Sted": "Hobøl",
						"ID": "0138 Hobøl",
						"Rnr": 3002,
						"Region": "Indre Østfold",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 138
					}
				},
				{
					"arcs": [
						[
							[
								1651,
								700
							]
						],
						[
							[
								1652,
								702
							]
						],
						[
							[
								704
							]
						],
						[
							[
								705
							]
						],
						[
							[
								706
							]
						],
						[
							[
								707
							]
						],
						[
							[
								708
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 67889.8506675,
						"Shape_Area": 243696925.957,
						"Sted": "Fitjar",
						"ID": "1222 Fitjar",
						"Rnr": 3046,
						"Region": "Sunnhordland",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1222
					}
				},
				{
					"arcs": [
						[
							[
								959,
								-338,
								-337,
								954,
								1653
							]
						],
						[
							[
								-336,
								341,
								960
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 230409.477086,
						"Shape_Area": 1651654896.19,
						"Sted": "Hemnes",
						"ID": "1832 Hemnes",
						"Rnr": 3072,
						"Region": "Ranaregionen",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1832
					}
				},
				{
					"arcs": [
						[
							-333,
							-332,
							338,
							339,
							340,
							958,
							-1654,
							955,
							1654,
							957
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 369955.94295,
						"Shape_Area": 4585922508.44,
						"Sted": "Rana",
						"ID": "1833 Rana",
						"Rnr": 3072,
						"Region": "Ranaregionen",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1833
					}
				},
				{
					"arcs": [
						[
							[
								918
							]
						],
						[
							[
								330,
								331,
								1655,
								920
							]
						],
						[
							[
								921
							]
						],
						[
							[
								1656,
								922
							]
						],
						[
							[
								1657,
								924
							]
						],
						[
							[
								333,
								926
							]
						],
						[
							[
								927
							]
						],
						[
							[
								928
							]
						],
						[
							[
								929
							]
						],
						[
							[
								930
							]
						],
						[
							[
								931
							]
						],
						[
							[
								932
							]
						],
						[
							[
								933
							]
						],
						[
							[
								934
							]
						],
						[
							[
								935
							]
						],
						[
							[
								936
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 308412.110381,
						"Shape_Area": 3102197876.09,
						"Sted": "Rødøy",
						"ID": "1836 Rødøy",
						"Rnr": 3070,
						"Region": "Ytre Helgeland",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1836
					}
				},
				{
					"arcs": [
						[
							[
								-331,
								968,
								1658,
								1659,
								-339
							]
						],
						[
							[
								-334,
								985
							]
						],
						[
							[
								986
							]
						],
						[
							[
								987
							]
						],
						[
							[
								988
							]
						],
						[
							[
								989
							]
						],
						[
							[
								990
							]
						],
						[
							[
								991
							]
						],
						[
							[
								992
							]
						],
						[
							[
								993
							]
						],
						[
							[
								994
							]
						],
						[
							[
								995
							]
						],
						[
							[
								996
							]
						],
						[
							[
								997
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 289476.226333,
						"Shape_Area": 2743048730.83,
						"Sted": "Meløy",
						"ID": "1837 Meløy",
						"Rnr": 3073,
						"Region": "Salten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1837
					}
				},
				{
					"arcs": [
						[
							[
								332,
								919,
								-1656
							]
						],
						[
							[
								-1657,
								923
							]
						],
						[
							[
								925,
								-1658
							]
						],
						[
							[
								937
							]
						],
						[
							[
								938
							]
						],
						[
							[
								939
							]
						],
						[
							[
								940
							]
						],
						[
							[
								941
							]
						],
						[
							[
								942
							]
						],
						[
							[
								943
							]
						],
						[
							[
								944
							]
						],
						[
							[
								945
							]
						],
						[
							[
								946
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 192010.063143,
						"Shape_Area": 1337268198.99,
						"Sted": "Lurøy",
						"ID": "1834 Lurøy",
						"Rnr": 3070,
						"Region": "Ytre Helgeland",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1834
					}
				},
				{
					"arcs": [
						[
							[
								947
							]
						],
						[
							[
								948
							]
						],
						[
							[
								949
							]
						],
						[
							[
								950
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 166009.432382,
						"Shape_Area": 1789662316.39,
						"Sted": "Træna",
						"ID": "1835 Træna",
						"Rnr": 3070,
						"Region": "Ytre Helgeland",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1835
					}
				},
				{
					"arcs": [
						[
							[
								1660,
								-1659,
								969
							]
						],
						[
							[
								1661,
								971,
								1662
							]
						],
						[
							[
								998
							]
						],
						[
							[
								999
							]
						],
						[
							[
								1000
							]
						],
						[
							[
								1001
							]
						],
						[
							[
								1002
							]
						],
						[
							[
								1003
							]
						],
						[
							[
								1004
							]
						],
						[
							[
								1005
							]
						],
						[
							[
								1006
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 190160.449378,
						"Shape_Area": 1503379712.29,
						"Sted": "Gildeskål",
						"ID": "1838 Gildeskål",
						"Rnr": 3073,
						"Region": "Salten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1838
					}
				},
				{
					"arcs": [
						[
							-1660,
							-1661,
							970,
							-1662,
							1663,
							-1569,
							-340
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 181687.786367,
						"Shape_Area": 1237880523.73,
						"Sted": "Beiarn",
						"ID": "1839 Beiarn",
						"Rnr": 3073,
						"Region": "Salten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1839
					}
				},
				{
					"arcs": [
						[
							-116,
							-115,
							1664,
							325,
							326,
							327,
							-1638,
							-47
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 199148.50608,
						"Shape_Area": 1317971172.9,
						"Sted": "Bygland",
						"ID": "0938 Bygland",
						"Rnr": 3031,
						"Region": "Setesdal",
						"Fnr": 9,
						"Fylke": "Aust-Agder",
						"Nr": 938
					}
				},
				{
					"arcs": [
						[
							[
								293,
								827,
								294
							]
						],
						[
							[
								295,
								1665,
								832
							]
						],
						[
							[
								833
							]
						],
						[
							[
								834
							]
						],
						[
							[
								835
							]
						],
						[
							[
								836
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 286370.792194,
						"Shape_Area": 4108104584.43,
						"Sted": "Nordkapp",
						"ID": "2019 Nordkapp",
						"Rnr": 3081,
						"Region": "Vest-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2019
					}
				},
				{
					"arcs": [
						[
							[
								296,
								1666,
								831,
								-1666
							]
						],
						[
							[
								837
							]
						],
						[
							[
								838
							]
						],
						[
							[
								839
							]
						],
						[
							[
								840
							]
						],
						[
							[
								841
							]
						],
						[
							[
								842
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 259956.061088,
						"Shape_Area": 3886119784.75,
						"Sted": "Måsøy",
						"ID": "2018 Måsøy",
						"Rnr": 3081,
						"Region": "Vest-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2018
					}
				},
				{
					"arcs": [
						[
							[
								1667,
								843,
								1668
							]
						],
						[
							[
								846,
								1669,
								848,
								1670
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 225926.212449,
						"Shape_Area": 2770716035.05,
						"Sted": "Hasvik",
						"ID": "2015 Hasvik",
						"Rnr": 3081,
						"Region": "Vest-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2015
					}
				},
				{
					"arcs": [
						[
							[
								-1668,
								1671,
								845
							]
						],
						[
							[
								1672,
								302,
								828
							]
						],
						[
							[
								850
							]
						],
						[
							[
								851
							]
						],
						[
							[
								852
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 283131.394282,
						"Shape_Area": 2810944854.96,
						"Sted": "Loppa",
						"ID": "2014 Loppa",
						"Rnr": 3081,
						"Region": "Vest-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2014
					}
				},
				{
					"arcs": [
						[
							[
								1673,
								853,
								1674
							]
						],
						[
							[
								-1667,
								297,
								1675,
								830
							]
						],
						[
							[
								1676,
								856
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 211740.673396,
						"Shape_Area": 2151285179.77,
						"Sted": "Kvalsund",
						"ID": "2017 Kvalsund",
						"Rnr": 3081,
						"Region": "Vest-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2017
					}
				},
				{
					"arcs": [
						[
							323,
							324,
							-1665,
							-114,
							319,
							320,
							321,
							322
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 121965.244998,
						"Shape_Area": 554768988.989,
						"Sted": "Evje og Hornnes",
						"ID": "0937 Evje og Hornnes",
						"Rnr": 3031,
						"Region": "Setesdal",
						"Fnr": 9,
						"Fylke": "Aust-Agder",
						"Nr": 937
					}
				},
				{
					"arcs": [
						[
							-1530,
							-321,
							1677
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 85942.9639426,
						"Shape_Area": 260283318.231,
						"Sted": "Iveland",
						"ID": "0935 Iveland",
						"Rnr": 3035,
						"Region": "Kristiansandregionen",
						"Fnr": 9,
						"Fylke": "Aust-Agder",
						"Nr": 935
					}
				},
				{
					"arcs": [
						[
							[
								299,
								300,
								301,
								-1673,
								829,
								-1676,
								298
							]
						],
						[
							[
								-1672,
								-1669,
								844
							]
						],
						[
							[
								-1675,
								854,
								1678
							]
						],
						[
							[
								858
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 324922.317698,
						"Shape_Area": 4565029940.62,
						"Sted": "Alta",
						"ID": "2012 Alta",
						"Rnr": 3081,
						"Region": "Vest-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2012
					}
				},
				{
					"arcs": [
						[
							1679,
							1680,
							1681,
							1682,
							39,
							40
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 158086.486938,
						"Shape_Area": 712812644.652,
						"Sted": "Kviteseid",
						"ID": "0829 Kviteseid",
						"Rnr": 3030,
						"Region": "Vest-Telemark",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 829
					}
				},
				{
					"arcs": [
						[
							37,
							38,
							-1683,
							1683,
							1684,
							35,
							36
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 172740.796306,
						"Shape_Area": 719487512.579,
						"Sted": "Seljord",
						"ID": "0828 Seljord",
						"Rnr": 3030,
						"Region": "Vest-Telemark",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 828
					}
				},
				{
					"arcs": [
						[
							1685,
							1686,
							-37
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 129322.368538,
						"Shape_Area": 793689685.475,
						"Sted": "Hjartdal",
						"ID": "0827 Hjartdal",
						"Rnr": 3029,
						"Region": "Øst-Telemark",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 827
					}
				},
				{
					"arcs": [
						[
							204,
							1687,
							-1686,
							-36,
							-35,
							202,
							203
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 246844.269719,
						"Shape_Area": 2053310488.77,
						"Sted": "Tinn",
						"ID": "0826 Tinn",
						"Rnr": 3029,
						"Region": "Øst-Telemark",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 826
					}
				},
				{
					"arcs": [
						[
							1688,
							-1466,
							-39,
							-209
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 76814.3135985,
						"Shape_Area": 261393468.436,
						"Sted": "Bø",
						"ID": "0821 Bø",
						"Rnr": 3028,
						"Region": "Midt-Telemark",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 821
					}
				},
				{
					"arcs": [
						[
							-208,
							209,
							210,
							-1467,
							-1689
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 90973.663215,
						"Shape_Area": 320235335.178,
						"Sted": "Sauherad",
						"ID": "0822 Sauherad",
						"Rnr": 3028,
						"Region": "Midt-Telemark",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 822
					}
				},
				{
					"arcs": [
						[
							[
								-218,
								-217,
								1689,
								224,
								1690,
								755
							]
						],
						[
							[
								-220,
								756
							]
						],
						[
							[
								757,
								-219
							]
						],
						[
							[
								758
							]
						],
						[
							[
								759
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 190455.065379,
						"Shape_Area": 1281467137.28,
						"Sted": "Larvik",
						"ID": "0709 Larvik",
						"Rnr": 3026,
						"Region": "Sandefjord/Larvik",
						"Fnr": 7,
						"Fylke": "Vestfold",
						"Nr": 709
					}
				},
				{
					"arcs": [
						[
							[
								-1480,
								1691,
								763,
								764,
								1692
							]
						],
						[
							[
								767,
								1693
							]
						],
						[
							[
								1694,
								773
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 64785.2191791,
						"Shape_Area": 161708480.285,
						"Sted": "Tønsberg",
						"ID": "0704 Tønsberg",
						"Rnr": 3025,
						"Region": "Tønsbergregionen",
						"Fnr": 7,
						"Fylke": "Vestfold",
						"Nr": 704
					}
				},
				{
					"arcs": [
						[
							-1691,
							225,
							226,
							754
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 118483.70225,
						"Shape_Area": 302268194.546,
						"Sted": "Sandefjord",
						"ID": "0706 Sandefjord",
						"Rnr": 3026,
						"Region": "Sandefjord/Larvik",
						"Fnr": 7,
						"Fylke": "Vestfold",
						"Nr": 706
					}
				},
				{
					"arcs": [
						[
							[
								-1479,
								762,
								-1692
							]
						],
						[
							[
								775
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 56066.5464144,
						"Shape_Area": 149251723.607,
						"Sted": "Horten",
						"ID": "0701 Horten",
						"Rnr": 3025,
						"Region": "Tønsbergregionen",
						"Fnr": 7,
						"Fylke": "Vestfold",
						"Nr": 701
					}
				},
				{
					"arcs": [
						[
							760,
							-1483,
							-1484,
							232
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 54383.1714537,
						"Shape_Area": 95684519.2794,
						"Sted": "Holmestrand",
						"ID": "0702 Holmestrand",
						"Rnr": 3025,
						"Region": "Tønsbergregionen",
						"Fnr": 7,
						"Fylke": "Vestfold",
						"Nr": 702
					}
				},
				{
					"arcs": [
						[
							78,
							1695,
							82,
							559,
							83
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 146803.343562,
						"Shape_Area": 1277377120.77,
						"Sted": "Meråker",
						"ID": "1711 Meråker",
						"Rnr": 3063,
						"Region": "Stjørdalsregionen",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1711
					}
				},
				{
					"arcs": [
						[
							[
								84,
								560
							]
						],
						[
							[
								561
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 67832.3737854,
						"Shape_Area": 247320989.232,
						"Sted": "Frosta",
						"ID": "1717 Frosta",
						"Rnr": 3063,
						"Region": "Stjørdalsregionen",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1717
					}
				},
				{
					"arcs": [
						[
							81,
							-1696,
							79,
							80,
							558
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 148312.220005,
						"Shape_Area": 1000642341.81,
						"Sted": "Stjørdal",
						"ID": "1714 Stjørdal",
						"Rnr": 3063,
						"Region": "Stjørdalsregionen",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1714
					}
				},
				{
					"arcs": [
						[
							[
								620,
								1696,
								-82,
								619,
								-85
							]
						],
						[
							[
								628
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 138064.038547,
						"Shape_Area": 835905447.841,
						"Sted": "Levanger",
						"ID": "1719 Levanger",
						"Rnr": 3064,
						"Region": "Innherred",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1719
					}
				},
				{
					"arcs": [
						[
							76,
							77,
							536,
							-1604
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 107815.213167,
						"Shape_Area": 617042679.114,
						"Sted": "Leksvik",
						"ID": "1718 Leksvik",
						"Rnr": 3057,
						"Region": "Fosen",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1718
					}
				},
				{
					"arcs": [
						[
							92,
							1697,
							565,
							1698,
							-1509,
							-1505,
							1699,
							91
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 138968.507595,
						"Shape_Area": 700593098.178,
						"Sted": "Melhus",
						"ID": "1653 Melhus",
						"Rnr": 3061,
						"Region": "Trondheimsregionen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1653
					}
				},
				{
					"arcs": [
						[
							564,
							-1698,
							93
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 70036.2597852,
						"Shape_Area": 250973216.6,
						"Sted": "Skaun",
						"ID": "1657 Skaun",
						"Rnr": 3061,
						"Region": "Trondheimsregionen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1657
					}
				},
				{
					"arcs": [
						[
							19,
							20,
							528,
							1700,
							1701
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 213753.994978,
						"Shape_Area": 1581216379.65,
						"Sted": "Røyrvik",
						"ID": "1739 Røyrvik",
						"Rnr": 3065,
						"Region": "Indre Namdal",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1739
					}
				},
				{
					"arcs": [
						[
							[
								-318,
								-1512,
								1702,
								1254,
								1703,
								1256,
								1704
							]
						],
						[
							[
								1705,
								1258
							]
						],
						[
							[
								1260
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 182210.756396,
						"Shape_Area": 1197782080.66,
						"Sted": "Hjelmeland",
						"ID": "1133 Hjelmeland",
						"Rnr": 3038,
						"Region": "Ryfylke",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1133
					}
				},
				{
					"arcs": [
						[
							[
								1253,
								-1703,
								-1511
							]
						],
						[
							[
								1261
							]
						],
						[
							[
								1262
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 79468.8118008,
						"Shape_Area": 335217539.067,
						"Sted": "Strand",
						"ID": "1130 Strand",
						"Rnr": 3038,
						"Region": "Ryfylke",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1130
					}
				},
				{
					"arcs": [
						[
							15,
							522,
							16,
							17,
							18
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 101795.617244,
						"Shape_Area": 573301092.152,
						"Sted": "Sauda",
						"ID": "1135 Sauda",
						"Rnr": 3037,
						"Region": "Haugesundregionen",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1135
					}
				},
				{
					"arcs": [
						[
							[
								-15,
								-175,
								-17,
								1263
							]
						],
						[
							[
								-16,
								-148,
								-31,
								-319,
								-1705,
								1257
							]
						],
						[
							[
								1255,
								-1704
							]
						],
						[
							[
								1264
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 248898.828466,
						"Shape_Area": 1913633936.38,
						"Sted": "Suldal",
						"ID": "1134 Suldal",
						"Rnr": 3038,
						"Region": "Ryfylke",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1134
					}
				},
				{
					"arcs": [
						[
							1706,
							1707,
							-44,
							1708,
							-1558
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 79754.4173367,
						"Shape_Area": 358789435.527,
						"Sted": "Vegårshei",
						"ID": "0912 Vegårshei",
						"Rnr": 3032,
						"Region": "Arendalregionen",
						"Fnr": 9,
						"Fylke": "Aust-Agder",
						"Nr": 912
					}
				},
				{
					"arcs": [
						[
							1709,
							1710,
							-389,
							-388,
							1711,
							-280,
							1225
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 192765.80903,
						"Shape_Area": 612712616.34,
						"Sted": "Førde",
						"ID": "1432 Førde",
						"Rnr": 3051,
						"Region": "Sunnfjord",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1432
					}
				},
				{
					"arcs": [
						[
							[
								-1710,
								1226,
								-1535,
								401,
								1712
							]
						],
						[
							[
								-279,
								1238
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 134597.847974,
						"Shape_Area": 397805758.637,
						"Sted": "Naustdal",
						"ID": "1433 Naustdal",
						"Rnr": 3051,
						"Region": "Sunnfjord",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1433
					}
				},
				{
					"arcs": [
						[
							-278,
							-1712,
							-387,
							-386,
							-275,
							1224
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 149184.239922,
						"Shape_Area": 593452473.813,
						"Sted": "Gaular",
						"ID": "1430 Gaular",
						"Rnr": 3051,
						"Region": "Sunnfjord",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1430
					}
				},
				{
					"arcs": [
						[
							-390,
							-1711,
							-1713,
							402,
							403,
							-391
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 144905.550354,
						"Shape_Area": 674603688.434,
						"Sted": "Jølster",
						"ID": "1431 Jølster",
						"Rnr": 3051,
						"Region": "Sunnfjord",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1431
					}
				},
				{
					"arcs": [
						[
							[
								-405,
								1239,
								1713
							]
						],
						[
							[
								1245
							]
						],
						[
							[
								1246
							]
						],
						[
							[
								1247
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 230592.772507,
						"Shape_Area": 1937619787.88,
						"Sted": "Bremanger",
						"ID": "1438 Bremanger",
						"Rnr": 3049,
						"Region": "Nordfjord",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1438
					}
				},
				{
					"arcs": [
						[
							[
								-374,
								1714,
								1243,
								1715
							]
						],
						[
							[
								1248
							]
						],
						[
							[
								1249
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 157368.598353,
						"Shape_Area": 827023144.571,
						"Sted": "Vågsøy",
						"ID": "1439 Vågsøy",
						"Rnr": 3049,
						"Region": "Nordfjord",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1439
					}
				},
				{
					"arcs": [
						[
							175,
							1716,
							179,
							180,
							181,
							1717,
							185
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 225217.009009,
						"Shape_Area": 746865816.075,
						"Sted": "Sør-Fron",
						"ID": "0519 Sør-Fron",
						"Rnr": 3017,
						"Region": "Midt-Gudbrandsdal",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 519
					}
				},
				{
					"arcs": [
						[
							-1634,
							1718,
							-197,
							409,
							1719
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 197107.671109,
						"Shape_Area": 1365799166.27,
						"Sted": "Dovre",
						"ID": "0511 Dovre",
						"Rnr": 3018,
						"Region": "Nord-Gudbrandsdal",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 511
					}
				},
				{
					"arcs": [
						[
							-406,
							-365,
							-364,
							-385,
							1720,
							1721,
							-393
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 220433.073194,
						"Shape_Area": 2082427810.33,
						"Sted": "Skjåk",
						"ID": "0513 Skjåk",
						"Rnr": 3018,
						"Region": "Nord-Gudbrandsdal",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 513
					}
				},
				{
					"arcs": [
						[
							-384,
							-383,
							-376,
							-198,
							-1719,
							-1637,
							1722,
							-1721
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 191655.070389,
						"Shape_Area": 2261947241.86,
						"Sted": "Lesja",
						"ID": "0512 Lesja",
						"Rnr": 3018,
						"Region": "Nord-Gudbrandsdal",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 512
					}
				},
				{
					"arcs": [
						[
							[
								1723,
								1326,
								1724
							]
						],
						[
							[
								1725,
								1324
							]
						],
						[
							[
								1331
							]
						],
						[
							[
								1332
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 153647.816015,
						"Shape_Area": 1258254154.51,
						"Sted": "Farsund",
						"ID": "1003 Farsund",
						"Rnr": 3033,
						"Region": "Lister",
						"Fnr": 10,
						"Fylke": "Vest-Agder",
						"Nr": 1003
					}
				},
				{
					"arcs": [
						[
							-1723,
							-1636,
							408,
							-394,
							-1722
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 229843.213852,
						"Shape_Area": 1968227927.47,
						"Sted": "Lom",
						"ID": "0514 Lom",
						"Rnr": 3018,
						"Region": "Nord-Gudbrandsdal",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 514
					}
				},
				{
					"arcs": [
						[
							410,
							-180,
							-179,
							-1635,
							-1720
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 165340.621541,
						"Shape_Area": 905040376.549,
						"Sted": "Sel",
						"ID": "0517 Sel",
						"Rnr": 3018,
						"Region": "Nord-Gudbrandsdal",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 517
					}
				},
				{
					"arcs": [
						[
							176,
							177,
							178,
							-1717
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 214914.001638,
						"Shape_Area": 1136802615.21,
						"Sted": "Nord-Fron",
						"ID": "0516 Nord-Fron",
						"Rnr": 3017,
						"Region": "Midt-Gudbrandsdal",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 516
					}
				},
				{
					"arcs": [
						[
							638,
							-1545,
							151
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 105665.383049,
						"Shape_Area": 277931775.691,
						"Sted": "Jondal",
						"ID": "1227 Jondal",
						"Rnr": 3042,
						"Region": "Hardanger",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1227
					}
				},
				{
					"arcs": [
						[
							-1646,
							1726,
							253,
							-238
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 83076.2196386,
						"Shape_Area": 373585576.065,
						"Sted": "Krødsherad",
						"ID": "0622 Krødsherad",
						"Rnr": 3023,
						"Region": "Midt-Buskerud",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 622
					}
				},
				{
					"arcs": [
						[
							248,
							249,
							250,
							251,
							252,
							-1727,
							-1645
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 152150.208449,
						"Shape_Area": 840104744.482,
						"Sted": "Sigdal",
						"ID": "0621 Sigdal",
						"Rnr": 3023,
						"Region": "Midt-Buskerud",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 621
					}
				},
				{
					"arcs": [
						[
							[
								-142,
								709,
								-127
							]
						],
						[
							[
								-152,
								-151,
								-150,
								1727,
								711
							]
						],
						[
							[
								712
							]
						],
						[
							[
								713
							]
						],
						[
							[
								714
							]
						],
						[
							[
								715
							]
						],
						[
							[
								716
							]
						],
						[
							[
								717
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 203213.458689,
						"Shape_Area": 1570347896.6,
						"Sted": "Kvinnherad",
						"ID": "1224 Kvinnherad",
						"Rnr": 3046,
						"Region": "Sunnhordland",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1224
					}
				},
				{
					"arcs": [
						[
							[
								289,
								821,
								1728,
								824,
								1729
							]
						],
						[
							[
								826
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 54401.8172459,
						"Shape_Area": 144154745.727,
						"Sted": "Røyken",
						"ID": "0627 Røyken",
						"Rnr": 3086,
						"Region": "Vestviken",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 627
					}
				},
				{
					"arcs": [
						[
							825,
							-273,
							-272,
							-274,
							-247,
							-235,
							291,
							292,
							-1730
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 80596.2912722,
						"Shape_Area": 309956167.534,
						"Sted": "Lier",
						"ID": "0626 Lier",
						"Rnr": 3086,
						"Region": "Vestviken",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 626
					}
				},
				{
					"arcs": [
						[
							[
								-1652,
								701
							]
						],
						[
							[
								-1650,
								695
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 66980.0555698,
						"Shape_Area": 225535384.934,
						"Sted": "Stord",
						"ID": "1221 Stord",
						"Rnr": 3046,
						"Region": "Sunnhordland",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1221
					}
				},
				{
					"arcs": [
						[
							-249,
							-248,
							273,
							-1453,
							-229,
							-256,
							-255
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 115826.690192,
						"Shape_Area": 457984141.72,
						"Sted": "Øvre Eiker",
						"ID": "0624 Øvre Eiker",
						"Rnr": 3020,
						"Region": "Drammensregionen",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 624
					}
				},
				{
					"arcs": [
						[
							-1729,
							822,
							290,
							823
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 67236.7194685,
						"Shape_Area": 259962997.206,
						"Sted": "Hurum",
						"ID": "0628 Hurum",
						"Rnr": 3086,
						"Region": "Vestviken",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 628
					}
				},
				{
					"arcs": [
						[
							-1544,
							640,
							-1546,
							-32,
							147,
							-19,
							148,
							149
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 197148.205105,
						"Shape_Area": 1628853603.73,
						"Sted": "Odda",
						"ID": "1228 Odda",
						"Rnr": 3042,
						"Region": "Hardanger",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1228
					}
				},
				{
					"arcs": [
						[
							1730,
							1037
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 180190.016144,
						"Shape_Area": 1582714962.51,
						"Sted": "Moskenes",
						"ID": "1874 Moskenes",
						"Rnr": 3075,
						"Region": "Lofoten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1874
					}
				},
				{
					"arcs": [
						[
							[
								1731,
								1355,
								1732,
								1357,
								-356,
								1733
							]
						],
						[
							[
								1734,
								1358,
								1735
							]
						],
						[
							[
								1736,
								1365
							]
						],
						[
							[
								1361,
								1737,
								1363,
								1738
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 233036.876169,
						"Shape_Area": 1090853380.75,
						"Sted": "Sortland",
						"ID": "1870 Sortland",
						"Rnr": 3076,
						"Region": "Vesterålen",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1870
					}
				},
				{
					"arcs": [
						[
							[
								1356,
								-1733
							]
						],
						[
							[
								1367
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 244954.712708,
						"Shape_Area": 2789258295.96,
						"Sted": "Andøy",
						"ID": "1871 Andøy",
						"Rnr": 3076,
						"Region": "Vesterålen",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1871
					}
				},
				{
					"arcs": [
						[
							[
								1739,
								-380,
								1740,
								1197,
								1741
							]
						],
						[
							[
								1202
							]
						],
						[
							[
								1203
							]
						],
						[
							[
								1204
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 119539.93661,
						"Shape_Area": 585164596.257,
						"Sted": "Molde",
						"ID": "1502 Molde",
						"Rnr": 3053,
						"Region": "Romsdal",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1502
					}
				},
				{
					"arcs": [
						[
							[
								1742,
								1085
							]
						],
						[
							[
								1092
							]
						],
						[
							[
								1093
							]
						],
						[
							[
								1094
							]
						],
						[
							[
								1095
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 75737.5219807,
						"Shape_Area": 191805093.671,
						"Sted": "Ålesund",
						"ID": "1504 Ålesund",
						"Rnr": 3056,
						"Region": "Ålesundregionen",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1504
					}
				},
				{
					"arcs": [
						[
							[
								1185
							]
						],
						[
							[
								1186
							]
						],
						[
							[
								1187
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 144713.62257,
						"Shape_Area": 669299373.139,
						"Sted": "Kristiansund",
						"ID": "1505 Kristiansund",
						"Rnr": 3052,
						"Region": "Nordmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1505
					}
				},
				{
					"arcs": [
						[
							-347,
							1743,
							1077,
							1744
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 96472.8305529,
						"Shape_Area": 374615015.659,
						"Sted": "Gratangen",
						"ID": "1919 Gratangen",
						"Rnr": 3077,
						"Region": "Sør-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1919
					}
				},
				{
					"arcs": [
						[
							[
								-349,
								354,
								355,
								1068,
								-1593
							]
						],
						[
							[
								1080
							]
						],
						[
							[
								1081
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 168500.618448,
						"Shape_Area": 699627131.275,
						"Sted": "Kvæfjord",
						"ID": "1911 Kvæfjord",
						"Rnr": 3077,
						"Region": "Sør-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1911
					}
				},
				{
					"arcs": [
						[
							-1744,
							-346,
							-345,
							-344,
							1076
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 118062.957015,
						"Shape_Area": 578255028.549,
						"Sted": "Skånland",
						"ID": "1913 Skånland",
						"Rnr": 3077,
						"Region": "Sør-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1913
					}
				},
				{
					"arcs": [
						[
							[
								1082
							]
						],
						[
							[
								1083
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 101308.637867,
						"Shape_Area": 592341199.961,
						"Sted": "Ibestad",
						"ID": "1917 Ibestad",
						"Rnr": 3077,
						"Region": "Sør-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1917
					}
				},
				{
					"arcs": [
						[
							1745,
							308,
							884
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 201112.384678,
						"Shape_Area": 2457433652.74,
						"Sted": "Berlevåg",
						"ID": "2024 Berlevåg",
						"Rnr": 3083,
						"Region": "Øst-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2024
					}
				},
				{
					"arcs": [
						[
							1746,
							1747,
							-312,
							898,
							-309,
							-311,
							-310,
							899,
							1748
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 444009.278597,
						"Shape_Area": 4380650417.67,
						"Sted": "Tana",
						"ID": "2025 Tana",
						"Rnr": 3082,
						"Region": "Midt-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2025
					}
				},
				{
					"arcs": [
						[
							[
								890,
								309,
								1749,
								888,
								1750
							]
						],
						[
							[
								891
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 186058.166844,
						"Shape_Area": 1643519926.83,
						"Sted": "Nesseby",
						"ID": "2027 Nesseby",
						"Rnr": 3083,
						"Region": "Øst-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2027
					}
				},
				{
					"arcs": [
						[
							[
								-294,
								1751,
								-1747,
								1752,
								-299,
								-298,
								-297,
								-296,
								902
							]
						],
						[
							[
								904
							]
						],
						[
							[
								905
							]
						],
						[
							[
								906
							]
						],
						[
							[
								907
							]
						],
						[
							[
								908
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 339689.437637,
						"Shape_Area": 6016882935.91,
						"Sted": "Porsanger",
						"ID": "2020 Porsanger",
						"Rnr": 3082,
						"Region": "Midt-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2020
					}
				},
				{
					"arcs": [
						[
							-300,
							-1753,
							-1749,
							900,
							1753
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 374307.156575,
						"Shape_Area": 5468331719.18,
						"Sted": "Karasjok",
						"ID": "2021 Karasjok",
						"Rnr": 3082,
						"Region": "Midt-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2021
					}
				},
				{
					"arcs": [
						[
							[
								-1752,
								-295,
								903,
								-313,
								-1748
							]
						],
						[
							[
								909
							]
						],
						[
							[
								910
							]
						],
						[
							[
								911
							]
						],
						[
							[
								912
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 389635.051352,
						"Shape_Area": 5752187627.33,
						"Sted": "Lebesby",
						"ID": "2022 Lebesby",
						"Rnr": 3082,
						"Region": "Midt-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2022
					}
				},
				{
					"arcs": [
						[
							311,
							312,
							892
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 272469.100372,
						"Shape_Area": 3119662150.4,
						"Sted": "Gamvik",
						"ID": "2023 Gamvik",
						"Rnr": 3083,
						"Region": "Øst-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2023
					}
				},
				{
					"arcs": [
						[
							1754,
							1755,
							-1746,
							885
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 218751.577097,
						"Shape_Area": 2828504177.47,
						"Sted": "Båtsfjord",
						"ID": "2028 Båtsfjord",
						"Rnr": 3083,
						"Region": "Øst-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2028
					}
				},
				{
					"arcs": [
						[
							317,
							318,
							-51,
							-50,
							-1639,
							329,
							316
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 190533.243993,
						"Shape_Area": 1469630938.74,
						"Sted": "Bykle",
						"ID": "0941 Bykle",
						"Rnr": 3031,
						"Region": "Setesdal",
						"Fnr": 9,
						"Fylke": "Aust-Agder",
						"Nr": 941
					}
				},
				{
					"arcs": [
						[
							115,
							-46,
							-45,
							-1708,
							1756,
							1757
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 191982.018335,
						"Shape_Area": 1133252204.74,
						"Sted": "Åmli",
						"ID": "0929 Åmli",
						"Rnr": 3032,
						"Region": "Arendalregionen",
						"Fnr": 9,
						"Fylke": "Aust-Agder",
						"Nr": 929
					}
				},
				{
					"arcs": [
						[
							[
								1061
							]
						],
						[
							[
								1062
							]
						],
						[
							[
								1063
							]
						],
						[
							[
								1064
							]
						],
						[
							[
								1065
							]
						],
						[
							[
								1066
							]
						],
						[
							[
								1067
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 166257.291412,
						"Shape_Area": 1402772702.49,
						"Sted": "Hitra",
						"ID": "1617 Hitra",
						"Rnr": 3058,
						"Region": "Hitra/Frøya",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1617
					}
				},
				{
					"arcs": [
						[
							[
								103,
								568,
								104,
								569,
								1758,
								1759,
								101,
								102
							]
						],
						[
							[
								576
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 149223.010688,
						"Shape_Area": 787478162.065,
						"Sted": "Hemne",
						"ID": "1612 Hemne",
						"Rnr": 3060,
						"Region": "Orkdalregionen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1612
					}
				},
				{
					"arcs": [
						[
							[
								1760,
								-1759,
								570,
								-1598,
								572,
								-1599
							]
						],
						[
							[
								577
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 108727.265137,
						"Shape_Area": 650954937.05,
						"Sted": "Snillfjord",
						"ID": "1613 Snillfjord",
						"Rnr": 3060,
						"Region": "Orkdalregionen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1613
					}
				},
				{
					"arcs": [
						[
							-420,
							-419,
							-330,
							-329,
							-328,
							1761,
							-1632,
							470,
							471,
							472
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 238236.330758,
						"Shape_Area": 1562598308.75,
						"Sted": "Sirdal",
						"ID": "1046 Sirdal",
						"Rnr": 3033,
						"Region": "Lister",
						"Fnr": 10,
						"Fylke": "Vest-Agder",
						"Nr": 1046
					}
				},
				{
					"arcs": [
						[
							[
								1762,
								1283
							]
						],
						[
							[
								1285
							]
						],
						[
							[
								1286
							]
						],
						[
							[
								1287
							]
						],
						[
							[
								1288
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 61753.3443632,
						"Shape_Area": 215380826.064,
						"Sted": "Rennesøy",
						"ID": "1142 Rennesøy",
						"Rnr": 3039,
						"Region": "Stavangerregionen",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1142
					}
				},
				{
					"arcs": [
						[
							[
								-1706,
								1259
							]
						],
						[
							[
								1265
							]
						],
						[
							[
								1266
							]
						],
						[
							[
								1267
							]
						],
						[
							[
								1268
							]
						],
						[
							[
								1269
							]
						],
						[
							[
								1270
							]
						],
						[
							[
								1271
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 93063.8247062,
						"Shape_Area": 392118581.77,
						"Sted": "Finnøy",
						"ID": "1141 Finnøy",
						"Rnr": 3038,
						"Region": "Ryfylke",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1141
					}
				},
				{
					"arcs": [
						[
							[
								1763,
								513
							]
						],
						[
							[
								1764,
								12,
								510,
								1765,
								515,
								-1475
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 126113.890387,
						"Shape_Area": 638105258.809,
						"Sted": "Tysvær",
						"ID": "1146 Tysvær",
						"Rnr": 3037,
						"Region": "Haugesundregionen",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1146
					}
				},
				{
					"arcs": [
						[
							1289
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 87118.9684772,
						"Shape_Area": 365311873.808,
						"Sted": "Kvitsøy",
						"ID": "1144 Kvitsøy",
						"Rnr": 3039,
						"Region": "Stavangerregionen",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1144
					}
				},
				{
					"arcs": [
						[
							[
								523
							]
						],
						[
							[
								524
							]
						],
						[
							[
								525
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 56531.0935424,
						"Shape_Area": 190288645.239,
						"Sted": "Bokn",
						"ID": "1145 Bokn",
						"Rnr": 3037,
						"Region": "Haugesundregionen",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1145
					}
				},
				{
					"arcs": [
						[
							[
								152,
								647,
								1766,
								649,
								1767
							]
						],
						[
							[
								1768,
								651
							]
						],
						[
							[
								1769,
								653,
								1770,
								655
							]
						],
						[
							[
								1771,
								657
							]
						],
						[
							[
								659
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 162418.706363,
						"Shape_Area": 635957075.033,
						"Sted": "Lindås",
						"ID": "1263 Lindås",
						"Rnr": 3044,
						"Region": "Nordhordland",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1263
					}
				},
				{
					"arcs": [
						[
							[
								-1769,
								652
							]
						],
						[
							[
								-1772,
								658
							]
						],
						[
							[
								660
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 72733.6849525,
						"Shape_Area": 210102760.062,
						"Sted": "Radøy",
						"ID": "1260 Radøy",
						"Rnr": 3044,
						"Region": "Nordhordland",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1260
					}
				},
				{
					"arcs": [
						[
							[
								155,
								-1768,
								650,
								153,
								154
							]
						],
						[
							[
								661
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 128831.254777,
						"Shape_Area": 650344404.004,
						"Sted": "Masfjorden",
						"ID": "1266 Masfjorden",
						"Rnr": 3044,
						"Region": "Nordhordland",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1266
					}
				},
				{
					"arcs": [
						[
							662
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 90730.6652039,
						"Shape_Area": 469437219.022,
						"Sted": "Fedje",
						"ID": "1265 Fedje",
						"Rnr": 3044,
						"Region": "Nordhordland",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1265
					}
				},
				{
					"arcs": [
						[
							[
								-1770,
								656
							]
						],
						[
							[
								-1771,
								654
							]
						],
						[
							[
								648,
								-1767
							]
						],
						[
							[
								663
							]
						],
						[
							[
								664
							]
						],
						[
							[
								665
							]
						],
						[
							[
								666
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 62539.4689289,
						"Shape_Area": 166290519.044,
						"Sted": "Austrheim",
						"ID": "1264 Austrheim",
						"Rnr": 3044,
						"Region": "Nordhordland",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1264
					}
				},
				{
					"arcs": [
						[
							1096
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 127197.415901,
						"Shape_Area": 1009237576.71,
						"Sted": "Sandøy",
						"ID": "1546 Sandøy",
						"Rnr": 3056,
						"Region": "Ålesundregionen",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1546
					}
				},
				{
					"arcs": [
						[
							[
								1198,
								1772,
								-1742
							]
						],
						[
							[
								1205
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 132406.877063,
						"Shape_Area": 466029810.404,
						"Sted": "Aukra",
						"ID": "1547 Aukra",
						"Rnr": 3053,
						"Region": "Romsdal",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1547
					}
				},
				{
					"arcs": [
						[
							[
								1206
							]
						],
						[
							[
								1207
							]
						],
						[
							[
								1208
							]
						],
						[
							[
								1209
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 72648.4086432,
						"Shape_Area": 277464858.371,
						"Sted": "Midsund",
						"ID": "1545 Midsund",
						"Rnr": 3053,
						"Region": "Romsdal",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1545
					}
				},
				{
					"arcs": [
						[
							-1741,
							-379,
							1201,
							-377,
							382,
							-1588,
							1196
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 217900.111585,
						"Shape_Area": 1135611970.71,
						"Sted": "Nesset",
						"ID": "1543 Nesset",
						"Rnr": 3053,
						"Region": "Romsdal",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1543
					}
				},
				{
					"arcs": [
						[
							[
								-1740,
								-1773,
								1199,
								-378,
								1200,
								-382,
								-381
							]
						],
						[
							[
								1210
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 168097.449503,
						"Shape_Area": 1125089086.11,
						"Sted": "Fræna",
						"ID": "1548 Fræna",
						"Rnr": 3053,
						"Region": "Romsdal",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1548
					}
				},
				{
					"arcs": [
						[
							-268,
							-267,
							1773,
							1774,
							412,
							413,
							1775,
							1776
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 176098.472285,
						"Shape_Area": 908892586.588,
						"Sted": "Nord-Aurdal",
						"ID": "0542 Nord-Aurdal",
						"Rnr": 3019,
						"Region": "Valdres",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 542
					}
				},
				{
					"arcs": [
						[
							-1774,
							-266,
							1777,
							1778
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 107134.174163,
						"Shape_Area": 460868546.6,
						"Sted": "Vestre Slidre",
						"ID": "0543 Vestre Slidre",
						"Rnr": 3019,
						"Region": "Valdres",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 543
					}
				},
				{
					"arcs": [
						[
							416,
							-240,
							-271,
							-270,
							-269,
							-1777,
							1779,
							415
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 168114.348799,
						"Shape_Area": 1106000942.05,
						"Sted": "Sør-Aurdal",
						"ID": "0540 Sør-Aurdal",
						"Rnr": 3019,
						"Region": "Valdres",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 540
					}
				},
				{
					"arcs": [
						[
							-1780,
							-1776,
							414
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 117161.786162,
						"Shape_Area": 462801004.485,
						"Sted": "Etnedal",
						"ID": "0541 Etnedal",
						"Rnr": 3019,
						"Region": "Valdres",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 541
					}
				},
				{
					"arcs": [
						[
							-177,
							-176,
							411,
							-1775,
							-1779,
							1780,
							-407
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 144822.451782,
						"Shape_Area": 960356043.317,
						"Sted": "Øystre Slidre",
						"ID": "0544 Øystre Slidre",
						"Rnr": 3019,
						"Region": "Valdres",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 544
					}
				},
				{
					"arcs": [
						[
							-397,
							-396,
							-395,
							-409,
							-408,
							-1781,
							-1778,
							-265
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 196523.695454,
						"Shape_Area": 1509830011.26,
						"Sted": "Vang",
						"ID": "0545 Vang",
						"Rnr": 3019,
						"Region": "Valdres",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 545
					}
				},
				{
					"arcs": [
						[
							183,
							184,
							-1718,
							182
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 159953.373747,
						"Shape_Area": 1249166469.49,
						"Sted": "Ringebu",
						"ID": "0520 Ringebu",
						"Rnr": 3017,
						"Region": "Midt-Gudbrandsdal",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 520
					}
				},
				{
					"arcs": [
						[
							1781,
							58,
							532
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 61758.1345487,
						"Shape_Area": 183879491.248,
						"Sted": "Rømskog",
						"ID": "0121 Rømskog",
						"Rnr": 3002,
						"Region": "Indre Østfold",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 121
					}
				},
				{
					"arcs": [
						[
							53,
							54,
							55,
							1782,
							1783,
							1784
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 74400.7853148,
						"Shape_Area": 204940151.814,
						"Sted": "Trøgstad",
						"ID": "0122 Trøgstad",
						"Rnr": 3002,
						"Region": "Indre Østfold",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 122
					}
				},
				{
					"arcs": [
						[
							-1785,
							1785,
							1786,
							64,
							-1651,
							52
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 72000.4165597,
						"Shape_Area": 143327002.393,
						"Sted": "Spydeberg",
						"ID": "0123 Spydeberg",
						"Rnr": 3002,
						"Region": "Indre Østfold",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 123
					}
				},
				{
					"arcs": [
						[
							-1784,
							1787,
							1788,
							-1786
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 34533.5531508,
						"Shape_Area": 67052996.5772,
						"Sted": "Askim",
						"ID": "0124 Askim",
						"Rnr": 3002,
						"Region": "Indre Østfold",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 124
					}
				},
				{
					"arcs": [
						[
							56,
							1789,
							1790,
							1791,
							-1788,
							-1783
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 82083.037543,
						"Shape_Area": 236566568.982,
						"Sted": "Eidsberg",
						"ID": "0125 Eidsberg",
						"Rnr": 3002,
						"Region": "Indre Østfold",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 125
					}
				},
				{
					"arcs": [
						[
							-1792,
							1792,
							62,
							63,
							-1787,
							-1789
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 42458.4876763,
						"Shape_Area": 101154844.497,
						"Sted": "Skiptvet",
						"ID": "0127 Skiptvet",
						"Rnr": 3002,
						"Region": "Indre Østfold",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 127
					}
				},
				{
					"arcs": [
						[
							1793,
							60,
							61,
							-1793,
							-1791,
							1794
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 95225.7840037,
						"Shape_Area": 438634442.096,
						"Sted": "Rakkestad",
						"ID": "0128 Rakkestad",
						"Rnr": 3002,
						"Region": "Indre Østfold",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 128
					}
				},
				{
					"arcs": [
						[
							[
								667
							]
						],
						[
							[
								668
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 54514.3300487,
						"Shape_Area": 131030596.096,
						"Sted": "Meland",
						"ID": "1256 Meland",
						"Rnr": 3044,
						"Region": "Nordhordland",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1256
					}
				},
				{
					"arcs": [
						[
							[
								-1655,
								956
							]
						],
						[
							[
								961
							]
						],
						[
							[
								962
							]
						],
						[
							[
								963
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 83893.8415374,
						"Shape_Area": 401701548.565,
						"Sted": "Nesna",
						"ID": "1828 Nesna",
						"Rnr": 3072,
						"Region": "Ranaregionen",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1828
					}
				},
				{
					"arcs": [
						[
							-20,
							-30,
							-4,
							-3,
							1795,
							1796
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 246862.469782,
						"Shape_Area": 2009476033.5,
						"Sted": "Grane",
						"ID": "1825 Grane",
						"Rnr": 3071,
						"Region": "Mosjøregionen",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1825
					}
				},
				{
					"arcs": [
						[
							-2,
							-1,
							951,
							334,
							335,
							952,
							336,
							1797,
							-1796
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 270884.063403,
						"Shape_Area": 2023686083.31,
						"Sted": "Vefsn",
						"ID": "1824 Vefsn",
						"Rnr": 3071,
						"Region": "Mosjøregionen",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1824
					}
				},
				{
					"arcs": [
						[
							[
								1378,
								1798,
								1380,
								1799
							]
						],
						[
							[
								1382
							]
						],
						[
							[
								1383
							]
						],
						[
							[
								1384
							]
						],
						[
							[
								1385
							]
						],
						[
							[
								1386
							]
						],
						[
							[
								1387
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 141797.914933,
						"Shape_Area": 757571618.612,
						"Sted": "Dønna",
						"ID": "1827 Dønna",
						"Rnr": 3069,
						"Region": "HALD",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1827
					}
				},
				{
					"arcs": [
						[
							-21,
							-1797,
							-1798,
							337,
							953
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 269371.517723,
						"Shape_Area": 2680541776.91,
						"Sted": "Hattfjelldal",
						"ID": "1826 Hattfjelldal",
						"Rnr": 3071,
						"Region": "Mosjøregionen",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1826
					}
				},
				{
					"arcs": [
						[
							[
								1800,
								1388
							]
						],
						[
							[
								1390
							]
						],
						[
							[
								1391
							]
						],
						[
							[
								1392
							]
						],
						[
							[
								1393
							]
						],
						[
							[
								1394
							]
						],
						[
							[
								1395
							]
						],
						[
							[
								1396
							]
						],
						[
							[
								1397
							]
						],
						[
							[
								1398
							]
						],
						[
							[
								1399
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 121465.687098,
						"Shape_Area": 587265012.364,
						"Sted": "Alstahaug",
						"ID": "1820 Alstahaug",
						"Rnr": 3069,
						"Region": "HALD",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1820
					}
				},
				{
					"arcs": [
						[
							[
								-1801,
								1389
							]
						],
						[
							[
								-342,
								-335,
								1400
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 131910.077667,
						"Shape_Area": 597002958.671,
						"Sted": "Leirfjord",
						"ID": "1822 Leirfjord",
						"Rnr": 3069,
						"Region": "HALD",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1822
					}
				},
				{
					"arcs": [
						[
							-1642,
							-1531,
							-1678,
							-320,
							-113,
							-112,
							1801
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 168247.519906,
						"Shape_Area": 677250794.129,
						"Sted": "Birkenes",
						"ID": "0928 Birkenes",
						"Rnr": 3035,
						"Region": "Kristiansandregionen",
						"Fnr": 9,
						"Fylke": "Aust-Agder",
						"Nr": 928
					}
				},
				{
					"arcs": [
						[
							-451,
							-450,
							-457,
							1802,
							1803
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 110337.14455,
						"Shape_Area": 370696043.325,
						"Sted": "Løten",
						"ID": "0415 Løten",
						"Rnr": 3012,
						"Region": "Hamarregionen",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 415
					}
				},
				{
					"arcs": [
						[
							1804,
							1805,
							-1803,
							-456,
							-455,
							-454,
							-163,
							-468
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 128781.781415,
						"Shape_Area": 729094150.342,
						"Sted": "Stange",
						"ID": "0417 Stange",
						"Rnr": 3012,
						"Region": "Hamarregionen",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 417
					}
				},
				{
					"arcs": [
						[
							-437,
							1806,
							-1805,
							-467,
							-466,
							-459,
							-458,
							-438
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 178278.261896,
						"Shape_Area": 1272923956.79,
						"Sted": "Ringsaker",
						"ID": "0412 Ringsaker",
						"Rnr": 3012,
						"Region": "Hamarregionen",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 412
					}
				},
				{
					"arcs": [
						[
							-1500,
							1807,
							1808,
							-165,
							-164,
							453
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 110951.312156,
						"Shape_Area": 507212137.203,
						"Sted": "Nord-Odal",
						"ID": "0418 Nord-Odal",
						"Rnr": 3011,
						"Region": "Glåmdal",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 418
					}
				},
				{
					"arcs": [
						[
							1809,
							1810,
							-1488,
							-166,
							-1809
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 110873.405425,
						"Shape_Area": 516266323.81,
						"Sted": "Sør-Odal",
						"ID": "0419 Sør-Odal",
						"Rnr": 3011,
						"Region": "Glåmdal",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 419
					}
				},
				{
					"arcs": [
						[
							[
								-120,
								1351
							]
						],
						[
							[
								-111,
								1344,
								-1643,
								-1802
							]
						],
						[
							[
								1352
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 131692.268452,
						"Shape_Area": 851378997.426,
						"Sted": "Lillesand",
						"ID": "0926 Lillesand",
						"Rnr": 3035,
						"Region": "Kristiansandregionen",
						"Fnr": 9,
						"Fylke": "Aust-Agder",
						"Nr": 926
					}
				},
				{
					"arcs": [
						[
							-348,
							-1745,
							1078,
							1811,
							-188
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 101047.604143,
						"Shape_Area": 323808706.46,
						"Sted": "Lavangen",
						"ID": "1920 Lavangen",
						"Rnr": 3077,
						"Region": "Sør-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1920
					}
				},
				{
					"arcs": [
						[
							186,
							187,
							188,
							1812,
							1813,
							730
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 297364.11396,
						"Shape_Area": 2704697913.85,
						"Sted": "Bardu",
						"ID": "1922 Bardu",
						"Rnr": 3078,
						"Region": "Midt-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1922
					}
				},
				{
					"arcs": [
						[
							-189,
							-1812,
							1079,
							-191,
							-190
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 128937.429798,
						"Shape_Area": 524089983.632,
						"Sted": "Salangen",
						"ID": "1923 Salangen",
						"Rnr": 3077,
						"Region": "Sør-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1923
					}
				},
				{
					"arcs": [
						[
							192,
							729,
							-1814,
							1814,
							1815,
							728,
							191
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 327486.092858,
						"Shape_Area": 3349081824.43,
						"Sted": "Målselv",
						"ID": "1924 Målselv",
						"Rnr": 3078,
						"Region": "Midt-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1924
					}
				},
				{
					"arcs": [
						[
							189,
							1816,
							726,
							1817,
							-1815,
							-1813
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 96373.7306808,
						"Shape_Area": 391451690.48,
						"Sted": "Sørreisa",
						"ID": "1925 Sørreisa",
						"Rnr": 3078,
						"Region": "Midt-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1925
					}
				},
				{
					"arcs": [
						[
							[
								-1817,
								190,
								725
							]
						],
						[
							[
								731
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 106665.629256,
						"Shape_Area": 472833539.939,
						"Sted": "Dyrøy",
						"ID": "1926 Dyrøy",
						"Rnr": 3078,
						"Region": "Midt-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1926
					}
				},
				{
					"arcs": [
						[
							[
								1818,
								1819,
								732,
								1820
							]
						],
						[
							[
								736
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 160720.446014,
						"Shape_Area": 935747860.204,
						"Sted": "Tranøy",
						"ID": "1927 Tranøy",
						"Rnr": 3078,
						"Region": "Midt-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1927
					}
				},
				{
					"arcs": [
						[
							1821,
							-1821,
							733
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 163146.701726,
						"Shape_Area": 1077179532.01,
						"Sted": "Torsken",
						"ID": "1928 Torsken",
						"Rnr": 3078,
						"Region": "Midt-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1928
					}
				},
				{
					"arcs": [
						[
							-1819,
							-1822,
							734,
							1822
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 152600.958088,
						"Shape_Area": 1130570797.43,
						"Sted": "Berg",
						"ID": "1929 Berg",
						"Rnr": 3078,
						"Region": "Midt-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1929
					}
				},
				{
					"arcs": [
						[
							48,
							49,
							1823,
							-1684,
							-1682,
							1824
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 180813.919483,
						"Shape_Area": 987628530.687,
						"Sted": "Tokke",
						"ID": "0833 Tokke",
						"Rnr": 3030,
						"Region": "Vest-Telemark",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 833
					}
				},
				{
					"arcs": [
						[
							43,
							44,
							1825,
							-1680,
							41,
							42
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 160259.486903,
						"Shape_Area": 908156925.663,
						"Sted": "Nissedal",
						"ID": "0830 Nissedal",
						"Rnr": 3030,
						"Region": "Vest-Telemark",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 830
					}
				},
				{
					"arcs": [
						[
							-1681,
							-1826,
							45,
							46,
							47,
							-1825
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 172270.64833,
						"Shape_Area": 1281562514.88,
						"Sted": "Fyresdal",
						"ID": "0831 Fyresdal",
						"Rnr": 3030,
						"Region": "Vest-Telemark",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 831
					}
				},
				{
					"arcs": [
						[
							32,
							33,
							34,
							-1685,
							-1824,
							50,
							30,
							31
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 272771.976329,
						"Shape_Area": 3120431008.44,
						"Sted": "Vinje",
						"ID": "0834 Vinje",
						"Rnr": 3030,
						"Region": "Vest-Telemark",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 834
					}
				},
				{
					"arcs": [
						[
							[
								768,
								1826,
								770,
								1827,
								772,
								-1694
							]
						],
						[
							[
								776,
								1828
							]
						],
						[
							[
								-1695,
								774
							]
						],
						[
							[
								778
							]
						],
						[
							[
								779
							]
						],
						[
							[
								780
							]
						],
						[
							[
								781
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 74506.8394198,
						"Shape_Area": 201260072.71,
						"Sted": "Nøtterøy",
						"ID": "0722 Nøtterøy",
						"Rnr": 3025,
						"Region": "Tønsbergregionen",
						"Fnr": 7,
						"Fylke": "Vestfold",
						"Nr": 722
					}
				},
				{
					"arcs": [
						[
							[
								-1827,
								769
							]
						],
						[
							[
								782
							]
						],
						[
							[
								-1829,
								777
							]
						],
						[
							[
								783
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 117074.323398,
						"Shape_Area": 657654137.017,
						"Sted": "Tjøme",
						"ID": "0723 Tjøme",
						"Rnr": 3025,
						"Region": "Tønsbergregionen",
						"Fnr": 7,
						"Fylke": "Vestfold",
						"Nr": 723
					}
				},
				{
					"arcs": [
						[
							-153,
							-156,
							-400,
							-399,
							1829,
							1416
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 107026.746125,
						"Shape_Area": 424504603.553,
						"Sted": "Modalen",
						"ID": "1252 Modalen",
						"Rnr": 3045,
						"Region": "Osterfjorden",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1252
					}
				},
				{
					"arcs": [
						[
							85,
							86,
							87,
							-1503,
							1830
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 171211.378422,
						"Shape_Area": 1211715528,
						"Sted": "Holtålen",
						"ID": "1644 Holtålen",
						"Rnr": 3062,
						"Region": "Rørosregionen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1644
					}
				},
				{
					"arcs": [
						[
							-1502,
							563,
							89,
							90,
							-1831
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 200567.558794,
						"Shape_Area": 1958200567.81,
						"Sted": "Røros",
						"ID": "1640 Røros",
						"Rnr": 3062,
						"Region": "Rørosregionen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1640
					}
				},
				{
					"arcs": [
						[
							-404,
							1831,
							1241,
							1832,
							1833,
							-366,
							405,
							-392
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 195093.425934,
						"Shape_Area": 1463001262.87,
						"Sted": "Stryn",
						"ID": "1449 Stryn",
						"Rnr": 3049,
						"Region": "Nordfjord",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1449
					}
				},
				{
					"arcs": [
						[
							-108,
							-1493,
							626,
							-1621,
							-77,
							-76,
							-75
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 148247.051164,
						"Shape_Area": 677419197.945,
						"Sted": "Verran",
						"ID": "1724 Verran",
						"Rnr": 3064,
						"Region": "Innherred",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1724
					}
				},
				{
					"arcs": [
						[
							-73,
							-72,
							1834,
							579,
							-1498,
							581,
							-1494,
							106,
							107,
							-74
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 177628.676178,
						"Shape_Area": 803513643.087,
						"Sted": "Namdalseid",
						"ID": "1725 Namdalseid",
						"Rnr": 3067,
						"Region": "Midtre Namdal",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1725
					}
				},
				{
					"arcs": [
						[
							94,
							95,
							96,
							97,
							-1700,
							-1504,
							-87
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 176684.770213,
						"Shape_Area": 1866037521.64,
						"Sted": "Midtre Gauldal",
						"ID": "1648 Midtre Gauldal",
						"Rnr": 3061,
						"Region": "Trondheimsregionen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1648
					}
				},
				{
					"arcs": [
						[
							618,
							-83,
							-1697,
							621,
							-1622,
							-1490,
							-22
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 179969.324425,
						"Shape_Area": 1562664962.04,
						"Sted": "Verdal",
						"ID": "1721 Verdal",
						"Rnr": 3064,
						"Region": "Innherred",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1721
					}
				},
				{
					"arcs": [
						[
							223,
							-1690,
							-216,
							220,
							221,
							222
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 77883.1940065,
						"Shape_Area": 277217475.522,
						"Sted": "Lardal",
						"ID": "0728 Lardal",
						"Rnr": 3026,
						"Region": "Sandefjord/Larvik",
						"Fnr": 7,
						"Fylke": "Vestfold",
						"Nr": 728
					}
				},
				{
					"arcs": [
						[
							1213,
							1835,
							-261,
							-144,
							-140,
							1836
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 193840.402403,
						"Shape_Area": 1517222237.42,
						"Sted": "Aurland",
						"ID": "1421 Aurland",
						"Rnr": 3050,
						"Region": "Sogn",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1421
					}
				},
				{
					"arcs": [
						[
							389,
							1837,
							1217,
							1838,
							1221,
							1839,
							388
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 195044.315622,
						"Shape_Area": 859001137.885,
						"Sted": "Sogndal",
						"ID": "1420 Sogndal",
						"Rnr": 3050,
						"Region": "Sogn",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1420
					}
				},
				{
					"arcs": [
						[
							-262,
							-1836,
							1214,
							1840,
							396,
							-264,
							-263
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 222790.739134,
						"Shape_Area": 1411752300.24,
						"Sted": "Lærdal",
						"ID": "1422 Lærdal",
						"Rnr": 3050,
						"Region": "Sogn",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1422
					}
				},
				{
					"arcs": [
						[
							1215,
							1841,
							395,
							-1841
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 160457.469832,
						"Shape_Area": 1011753764.77,
						"Sted": "Årdal",
						"ID": "1424 Årdal",
						"Rnr": 3050,
						"Region": "Sogn",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1424
					}
				},
				{
					"arcs": [
						[
							390,
							391,
							392,
							393,
							394,
							-1842,
							1216,
							-1838
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 285850.371919,
						"Shape_Area": 2815057092.35,
						"Sted": "Luster",
						"ID": "1426 Luster",
						"Rnr": 3050,
						"Region": "Sogn",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1426
					}
				},
				{
					"arcs": [
						[
							[
								274,
								275,
								1842,
								789
							]
						],
						[
							[
								790
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 132713.994081,
						"Shape_Area": 489260555.424,
						"Sted": "Fjaler",
						"ID": "1429 Fjaler",
						"Rnr": 3048,
						"Region": "HAFS",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1429
					}
				},
				{
					"arcs": [
						[
							[
								277,
								791,
								278,
								792,
								279
							]
						],
						[
							[
								793
							]
						],
						[
							[
								794
							]
						],
						[
							[
								795
							]
						],
						[
							[
								796
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 198389.741566,
						"Shape_Area": 1603245603.8,
						"Sted": "Askvoll",
						"ID": "1428 Askvoll",
						"Rnr": 3048,
						"Region": "HAFS",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1428
					}
				},
				{
					"arcs": [
						[
							[
								-426,
								-434,
								1322,
								-436,
								1323,
								-1726,
								1325,
								-1724,
								1843,
								1844
							]
						],
						[
							[
								-435,
								1333
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 164343.200643,
						"Shape_Area": 626098566.569,
						"Sted": "Lyngdal",
						"ID": "1032 Lyngdal",
						"Rnr": 3033,
						"Region": "Lister",
						"Fnr": 10,
						"Fylke": "Vest-Agder",
						"Nr": 1032
					}
				},
				{
					"arcs": [
						[
							-1804,
							-1806,
							-1807,
							-452
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 132054.322304,
						"Shape_Area": 355154595.498,
						"Sted": "Hamar",
						"ID": "0403 Hamar",
						"Rnr": 3012,
						"Region": "Hamarregionen",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 403
					}
				},
				{
					"arcs": [
						[
							-1540,
							1845,
							1846,
							-460,
							465,
							-1538
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 113398.204176,
						"Shape_Area": 672683434.903,
						"Sted": "Gjøvik",
						"ID": "0502 Gjøvik",
						"Rnr": 3014,
						"Region": "Gjøvikregionen",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 502
					}
				},
				{
					"arcs": [
						[
							-327,
							-429,
							1847,
							-1844,
							-1725,
							1327,
							-1633,
							-1762
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 203276.936507,
						"Shape_Area": 979395400.288,
						"Sted": "Kvinesdal",
						"ID": "1037 Kvinesdal",
						"Rnr": 3033,
						"Region": "Lister",
						"Fnr": 10,
						"Fylke": "Vest-Agder",
						"Nr": 1037
					}
				},
				{
					"arcs": [
						[
							-1845,
							-1848,
							-428,
							-427
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 117664.785714,
						"Shape_Area": 467614871.542,
						"Sted": "Hægebostad",
						"ID": "1034 Hægebostad",
						"Rnr": 3033,
						"Region": "Lister",
						"Fnr": 10,
						"Fylke": "Vest-Agder",
						"Nr": 1034
					}
				},
				{
					"arcs": [
						[
							458,
							459,
							460,
							-1529,
							-1527
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 122683.121884,
						"Shape_Area": 481676236.25,
						"Sted": "Lillehammer",
						"ID": "0501 Lillehammer",
						"Rnr": 3016,
						"Region": "Lillehammerregionen",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 501
					}
				},
				{
					"arcs": [
						[
							-250,
							254,
							1848,
							-206,
							-205,
							1849
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 106390.13537,
						"Shape_Area": 565464124.331,
						"Sted": "Flesberg",
						"ID": "0631 Flesberg",
						"Rnr": 3022,
						"Region": "Kongsberg/Numedal",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 631
					}
				},
				{
					"arcs": [
						[
							-251,
							-1850,
							-204,
							1850
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 94686.6443531,
						"Shape_Area": 450116919.038,
						"Sted": "Rollag",
						"ID": "0632 Rollag",
						"Rnr": 3022,
						"Region": "Kongsberg/Numedal",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 632
					}
				},
				{
					"arcs": [
						[
							257,
							258,
							259,
							-252,
							-1851,
							-203,
							-34,
							-147,
							256
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 295969.272055,
						"Shape_Area": 2512353651.77,
						"Sted": "Nore og Uvdal",
						"ID": "0633 Nore og Uvdal",
						"Rnr": 3022,
						"Region": "Kongsberg/Numedal",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 633
					}
				},
				{
					"arcs": [
						[
							-12,
							718,
							-13
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 89791.4065936,
						"Shape_Area": 375719226.4,
						"Sted": "Sveio",
						"ID": "1216 Sveio",
						"Rnr": 3046,
						"Region": "Sunnhordland",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1216
					}
				},
				{
					"arcs": [
						[
							[
								-1653,
								703
							]
						],
						[
							[
								719
							]
						],
						[
							[
								720
							]
						],
						[
							[
								721
							]
						],
						[
							[
								722
							]
						],
						[
							[
								723
							]
						],
						[
							[
								724
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 168668.843467,
						"Shape_Area": 1670293363.45,
						"Sted": "Bømlo",
						"ID": "1219 Bømlo",
						"Rnr": 3046,
						"Region": "Sunnhordland",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1219
					}
				},
				{
					"arcs": [
						[
							1319,
							-1489,
							-1811,
							1851
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 181307.450775,
						"Shape_Area": 1036715932.4,
						"Sted": "Kongsvinger",
						"ID": "0402 Kongsvinger",
						"Rnr": 3011,
						"Region": "Glåmdal",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 402
					}
				},
				{
					"arcs": [
						[
							[
								1039
							]
						],
						[
							[
								1040
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 213100.788706,
						"Shape_Area": 2107070728.75,
						"Sted": "Vestvågøy",
						"ID": "1860 Vestvågøy",
						"Rnr": 3075,
						"Region": "Lofoten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1860
					}
				},
				{
					"arcs": [
						[
							[
								-1571,
								979,
								-1556
							]
						],
						[
							[
								1007
							]
						],
						[
							[
								1008
							]
						],
						[
							[
								1009
							]
						],
						[
							[
								977,
								-1573
							]
						],
						[
							[
								1010
							]
						],
						[
							[
								1011
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 289673.770171,
						"Shape_Area": 3479678169.84,
						"Sted": "Steigen",
						"ID": "1848 Steigen",
						"Rnr": 3073,
						"Region": "Salten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1848
					}
				},
				{
					"arcs": [
						[
							[
								351,
								1041
							]
						],
						[
							[
								1042
							]
						],
						[
							[
								352,
								353,
								1043
							]
						],
						[
							[
								1044
							]
						],
						[
							[
								1045
							]
						],
						[
							[
								1046
							]
						],
						[
							[
								1047
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 261710.039942,
						"Shape_Area": 2088649606.25,
						"Sted": "Vågan",
						"ID": "1865 Vågan",
						"Rnr": 3075,
						"Region": "Lofoten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1865
					}
				},
				{
					"arcs": [
						[
							-1736,
							1359,
							1852
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 175028.004613,
						"Shape_Area": 1823984964.17,
						"Sted": "Bø",
						"ID": "1867 Bø",
						"Rnr": 3076,
						"Region": "Vesterålen",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1867
					}
				},
				{
					"arcs": [
						[
							[
								-1732,
								1853,
								-353,
								1354
							]
						],
						[
							[
								-352,
								1368
							]
						],
						[
							[
								1362,
								-1738
							]
						],
						[
							[
								1369
							]
						],
						[
							[
								1370
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 160069.935953,
						"Shape_Area": 1182392197.9,
						"Sted": "Hadsel",
						"ID": "1866 Hadsel",
						"Rnr": 3076,
						"Region": "Vesterålen",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1866
					}
				},
				{
					"arcs": [
						[
							[
								1364,
								-1737,
								1366,
								-1735,
								-1853,
								1360,
								-1739
							]
						],
						[
							[
								1371
							]
						],
						[
							[
								1372
							]
						],
						[
							[
								1373
							]
						],
						[
							[
								1374
							]
						],
						[
							[
								1375
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 181441.900815,
						"Shape_Area": 1808734795.46,
						"Sted": "Øksnes",
						"ID": "1868 Øksnes",
						"Rnr": 3076,
						"Region": "Vesterålen",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1868
					}
				},
				{
					"arcs": [
						[
							901,
							-304,
							-308,
							-301,
							-1754
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 515596.267746,
						"Shape_Area": 9719194411.19,
						"Sted": "Kautokeino",
						"ID": "2011 Kautokeino",
						"Rnr": 3082,
						"Region": "Midt-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2011
					}
				},
				{
					"arcs": [
						[
							[
								11,
								-1765,
								-1476,
								517
							]
						],
						[
							[
								526
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 116709.790794,
						"Shape_Area": 372254964.334,
						"Sted": "Haugesund",
						"ID": "1106 Haugesund",
						"Rnr": 3037,
						"Region": "Haugesundregionen",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1106
					}
				},
				{
					"arcs": [
						[
							[
								-1520,
								-1517,
								-1516,
								-1521,
								1854,
								1280
							]
						],
						[
							[
								1290
							]
						],
						[
							[
								1291
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 85564.7651018,
						"Shape_Area": 356042933.892,
						"Sted": "Sandnes",
						"ID": "1102 Sandnes",
						"Rnr": 3039,
						"Region": "Stavangerregionen",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1102
					}
				},
				{
					"arcs": [
						[
							[
								-1855,
								-1522,
								1275,
								-1523,
								1277,
								-1524,
								1279
							]
						],
						[
							[
								-1763,
								1284
							]
						],
						[
							[
								1292
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 64903.6174479,
						"Shape_Area": 140152301.535,
						"Sted": "Stavanger",
						"ID": "1103 Stavanger",
						"Rnr": 3039,
						"Region": "Stavangerregionen",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1103
					}
				},
				{
					"arcs": [
						[
							[
								-472,
								1855,
								1856,
								1413,
								-424,
								1857
							]
						],
						[
							[
								1414
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 181440.774772,
						"Shape_Area": 1067306628.8,
						"Sted": "Eigersund",
						"ID": "1101 Eigersund",
						"Rnr": 3036,
						"Region": "Dalane",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1101
					}
				},
				{
					"arcs": [
						[
							[
								1148,
								1858,
								1150,
								1859
							]
						],
						[
							[
								1152
							]
						],
						[
							[
								1860,
								1153
							]
						],
						[
							[
								1155
							]
						],
						[
							[
								1156
							]
						],
						[
							[
								1157
							]
						],
						[
							[
								1158
							]
						],
						[
							[
								1159
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 162852.358473,
						"Shape_Area": 1198290872.2,
						"Sted": "Herøy",
						"ID": "1515 Herøy",
						"Rnr": 3055,
						"Region": "Søre Sunnmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1515
					}
				},
				{
					"arcs": [
						[
							[
								-1859,
								1149
							]
						],
						[
							[
								1160
							]
						],
						[
							[
								1161
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 134043.886553,
						"Shape_Area": 462201882.606,
						"Sted": "Sande",
						"ID": "1514 Sande",
						"Rnr": 3055,
						"Region": "Søre Sunnmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1514
					}
				},
				{
					"arcs": [
						[
							1861,
							1162
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 53947.8937709,
						"Shape_Area": 136862144.668,
						"Sted": "Hareid",
						"ID": "1517 Hareid",
						"Rnr": 3055,
						"Region": "Søre Sunnmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1517
					}
				},
				{
					"arcs": [
						[
							[
								-1862,
								1163
							]
						],
						[
							[
								-1861,
								1154
							]
						],
						[
							[
								-1860,
								1151
							]
						],
						[
							[
								1164
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 90599.4070031,
						"Shape_Area": 257514761.349,
						"Sted": "Ulstein",
						"ID": "1516 Ulstein",
						"Rnr": 3055,
						"Region": "Søre Sunnmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1516
					}
				},
				{
					"arcs": [
						[
							372,
							373,
							374,
							1145,
							-1534
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 108909.573465,
						"Shape_Area": 481990711.991,
						"Sted": "Vanylven",
						"ID": "1511 Vanylven",
						"Rnr": 3055,
						"Region": "Søre Sunnmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1511
					}
				},
				{
					"arcs": [
						[
							[
								473
							]
						],
						[
							[
								474
							]
						],
						[
							[
								475
							]
						],
						[
							[
								476
							]
						],
						[
							[
								477
							]
						],
						[
							[
								478
							]
						],
						[
							[
								479
							]
						],
						[
							[
								480
							]
						],
						[
							[
								481
							]
						],
						[
							[
								482
							]
						],
						[
							[
								483
							]
						],
						[
							[
								484
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 246051.232999,
						"Shape_Area": 2920050477.47,
						"Sted": "Vega",
						"ID": "1815 Vega",
						"Rnr": 3068,
						"Region": "Sør-Helgeland",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1815
					}
				},
				{
					"arcs": [
						[
							[
								494,
								0,
								1862
							]
						],
						[
							[
								495
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 138474.479522,
						"Shape_Area": 658158236.664,
						"Sted": "Vevelstad",
						"ID": "1816 Vevelstad",
						"Rnr": 3068,
						"Region": "Sør-Helgeland",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1816
					}
				},
				{
					"arcs": [
						[
							[
								7,
								496,
								8,
								497,
								9
							]
						],
						[
							[
								5,
								6,
								485,
								1863,
								3,
								4
							]
						],
						[
							[
								1864,
								1865,
								487
							]
						],
						[
							[
								10,
								498
							]
						],
						[
							[
								499
							]
						],
						[
							[
								500
							]
						],
						[
							[
								501
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 360529.169385,
						"Shape_Area": 1908867049.68,
						"Sted": "Bindal",
						"ID": "1811 Bindal",
						"Rnr": 3068,
						"Region": "Sør-Helgeland",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1811
					}
				},
				{
					"arcs": [
						[
							[
								488,
								1866,
								-1865
							]
						],
						[
							[
								1867,
								490
							]
						],
						[
							[
								492,
								1868
							]
						],
						[
							[
								502
							]
						],
						[
							[
								503
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 223059.303436,
						"Shape_Area": 788878293.679,
						"Sted": "Sømna",
						"ID": "1812 Sømna",
						"Rnr": 3068,
						"Region": "Sør-Helgeland",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1812
					}
				},
				{
					"arcs": [
						[
							[
								1,
								2,
								-1864,
								486,
								-1866,
								-1867,
								489,
								-1868,
								491,
								-1869,
								493,
								-1863
							]
						],
						[
							[
								504
							]
						],
						[
							[
								505
							]
						],
						[
							[
								506
							]
						],
						[
							[
								507
							]
						],
						[
							[
								508
							]
						],
						[
							[
								509
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 358716.51297,
						"Shape_Area": 2092915054.88,
						"Sted": "Brønnøy",
						"ID": "1813 Brønnøy",
						"Rnr": 3068,
						"Region": "Sør-Helgeland",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1813
					}
				},
				{
					"arcs": [
						[
							[
								-1799,
								1379
							]
						],
						[
							[
								-1800,
								1381
							]
						],
						[
							[
								1401
							]
						],
						[
							[
								1402
							]
						],
						[
							[
								1403
							]
						],
						[
							[
								1404
							]
						],
						[
							[
								1405
							]
						],
						[
							[
								1406
							]
						],
						[
							[
								1407
							]
						],
						[
							[
								1408
							]
						],
						[
							[
								1409
							]
						],
						[
							[
								1410
							]
						],
						[
							[
								1411
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 247671.371715,
						"Shape_Area": 2263246649.2,
						"Sted": "Herøy",
						"ID": "1818 Herøy",
						"Rnr": 3069,
						"Region": "HALD",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1818
					}
				},
				{
					"arcs": [
						[
							[
								127,
								1869,
								631
							]
						],
						[
							[
								632
							]
						],
						[
							[
								633
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 76477.1581753,
						"Shape_Area": 246592715.115,
						"Sted": "Os",
						"ID": "1243 Os",
						"Rnr": 3041,
						"Region": "Bjørnefjorden",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1243
					}
				},
				{
					"arcs": [
						[
							-1870,
							128,
							129,
							130,
							-1574,
							630
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 92400.2417944,
						"Shape_Area": 291857910.086,
						"Sted": "Samnanger",
						"ID": "1242 Samnanger",
						"Rnr": 3041,
						"Region": "Bjørnefjorden",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1242
					}
				},
				{
					"arcs": [
						[
							[
								-1751,
								889
							]
						],
						[
							[
								893
							]
						],
						[
							[
								894
							]
						],
						[
							[
								895
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 457043.680006,
						"Shape_Area": 5147009631.09,
						"Sted": "Sør-Varanger",
						"ID": "2030 Sør-Varanger",
						"Rnr": 3083,
						"Region": "Øst-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2030
					}
				},
				{
					"arcs": [
						[
							[
								1097
							]
						],
						[
							[
								1098
							]
						],
						[
							[
								1099
							]
						],
						[
							[
								1100
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 126052.555517,
						"Shape_Area": 912084261.877,
						"Sted": "Giske",
						"ID": "1532 Giske",
						"Rnr": 3056,
						"Region": "Ålesundregionen",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1532
					}
				},
				{
					"arcs": [
						[
							1101
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 48162.8162521,
						"Shape_Area": 126850468.619,
						"Sted": "Sula",
						"ID": "1531 Sula",
						"Rnr": 3056,
						"Region": "Ålesundregionen",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1531
					}
				},
				{
					"arcs": [
						[
							[
								672,
								-1578,
								674,
								-1577,
								670,
								-1579
							]
						],
						[
							[
								-133,
								679
							]
						],
						[
							[
								680
							]
						],
						[
							[
								681
							]
						],
						[
							[
								682
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 135631.682393,
						"Shape_Area": 773220232.221,
						"Sted": "Fjell",
						"ID": "1246 Fjell",
						"Rnr": 3047,
						"Region": "Hordaland Vest",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1246
					}
				},
				{
					"arcs": [
						[
							-1508,
							-1510,
							-1699,
							566
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 112054.16448,
						"Shape_Area": 524756438.924,
						"Sted": "Trondheim",
						"ID": "1601 Trondheim",
						"Rnr": 3061,
						"Region": "Trondheimsregionen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1601
					}
				},
				{
					"arcs": [
						[
							438,
							-183,
							-182,
							439,
							440,
							441,
							-1454,
							437
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 286516.359653,
						"Shape_Area": 2168234442.93,
						"Sted": "Stor-Elvdal",
						"ID": "0430 Stor-Elvdal",
						"Rnr": 3013,
						"Region": "Sør Østerdal",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 430
					}
				},
				{
					"arcs": [
						[
							205,
							206,
							207,
							208,
							-38,
							-1687,
							-1688
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 189202.004272,
						"Shape_Area": 916832967.725,
						"Sted": "Notodden",
						"ID": "0807 Notodden",
						"Rnr": 3029,
						"Region": "Øst-Telemark",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 807
					}
				},
				{
					"arcs": [
						[
							1870,
							739,
							-1471,
							-1474,
							-212,
							-211,
							213,
							-1597
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 163719.003312,
						"Shape_Area": 790169038.481,
						"Sted": "Skien",
						"ID": "0806 Skien",
						"Rnr": 3027,
						"Region": "Grenland",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 806
					}
				},
				{
					"arcs": [
						[
							[
								217,
								737,
								218,
								738,
								-1871,
								-1596
							]
						],
						[
							[
								219,
								750
							]
						],
						[
							[
								751
							]
						],
						[
							[
								752
							]
						],
						[
							[
								753
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 75698.3935479,
						"Shape_Area": 196862742.111,
						"Sted": "Porsgrunn",
						"ID": "0805 Porsgrunn",
						"Rnr": 3027,
						"Region": "Grenland",
						"Fnr": 8,
						"Fylke": "Telemark",
						"Nr": 805
					}
				},
				{
					"arcs": [
						[
							1871,
							1336
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 48388.6219841,
						"Shape_Area": 117792628.463,
						"Sted": "Nesodden",
						"ID": "0216 Nesodden",
						"Rnr": 3006,
						"Region": "Follo",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 216
					}
				},
				{
					"arcs": [
						[
							1872,
							1873,
							1341,
							-289
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 27292.4622539,
						"Shape_Area": 44171913.9105,
						"Sted": "Oppegård",
						"ID": "0217 Oppegård",
						"Rnr": 3006,
						"Region": "Follo",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 217
					}
				},
				{
					"arcs": [
						[
							1338,
							1874,
							1340,
							-1874,
							1875,
							-68,
							1876,
							1877
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 61864.7639531,
						"Shape_Area": 104256976.019,
						"Sted": "Ås",
						"ID": "0214 Ås",
						"Rnr": 3006,
						"Region": "Follo",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 214
					}
				},
				{
					"arcs": [
						[
							[
								1878,
								1335,
								-1872,
								1337,
								-1878
							]
						],
						[
							[
								-291,
								1342
							]
						],
						[
							[
								1343
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 61387.0364575,
						"Shape_Area": 117089688.399,
						"Sted": "Frogn",
						"ID": "0215 Frogn",
						"Rnr": 3006,
						"Region": "Follo",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 215
					}
				},
				{
					"arcs": [
						[
							1879,
							-69,
							-1876,
							-1873,
							-288
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 69822.5527314,
						"Shape_Area": 164859269.745,
						"Sted": "Ski",
						"ID": "0213 Ski",
						"Rnr": 3006,
						"Region": "Follo",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 213
					}
				},
				{
					"arcs": [
						[
							-1877,
							-67,
							-122,
							-121,
							1334,
							-1879
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 59847.5173818,
						"Shape_Area": 151973719.673,
						"Sted": "Vestby",
						"ID": "0211 Vestby",
						"Rnr": 3006,
						"Region": "Follo",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 211
					}
				},
				{
					"arcs": [
						[
							[
								-246,
								-282,
								913,
								1880,
								-292,
								-234
							]
						],
						[
							[
								915
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 69524.3289992,
						"Shape_Area": 215648274.784,
						"Sted": "Bærum",
						"ID": "0219 Bærum",
						"Rnr": 3005,
						"Region": "Akershus Vest",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 219
					}
				},
				{
					"arcs": [
						[
							[
								683
							]
						],
						[
							[
								684
							]
						],
						[
							[
								685
							]
						],
						[
							[
								686
							]
						],
						[
							[
								687
							]
						],
						[
							[
								688
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 127808.781234,
						"Shape_Area": 995430305.27,
						"Sted": "Øygarden",
						"ID": "1259 Øygarden",
						"Rnr": 3047,
						"Region": "Hordaland Vest",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1259
					}
				},
				{
					"arcs": [
						[
							-1585,
							-1587,
							-441,
							-1581
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 159350.092737,
						"Shape_Area": 937613148.107,
						"Sted": "Alvdal",
						"ID": "0438 Alvdal",
						"Rnr": 3010,
						"Region": "Fjellregionen",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 438
					}
				},
				{
					"arcs": [
						[
							1881,
							-1856,
							-471,
							-470
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 117756.400624,
						"Shape_Area": 412180981.826,
						"Sted": "Lund",
						"ID": "1112 Lund",
						"Rnr": 3036,
						"Region": "Dalane",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1112
					}
				},
				{
					"arcs": [
						[
							527
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 113530.994802,
						"Shape_Area": 863803612.243,
						"Sted": "Utsira",
						"ID": "1151 Utsira",
						"Rnr": 3037,
						"Region": "Haugesundregionen",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1151
					}
				},
				{
					"arcs": [
						[
							1171,
							1882
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 117539.118151,
						"Shape_Area": 506480379.614,
						"Sted": "Tingvoll",
						"ID": "1560 Tingvoll",
						"Rnr": 3052,
						"Region": "Nordmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1560
					}
				},
				{
					"arcs": [
						[
							[
								377,
								1188
							]
						],
						[
							[
								1189,
								1883,
								381
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 145217.40935,
						"Shape_Area": 446484122.704,
						"Sted": "Eide",
						"ID": "1551 Eide",
						"Rnr": 3052,
						"Region": "Nordmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1551
					}
				},
				{
					"arcs": [
						[
							[
								1191
							]
						],
						[
							[
								1192
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 139016.039631,
						"Shape_Area": 721003637.108,
						"Sted": "Averøy",
						"ID": "1554 Averøy",
						"Rnr": 3052,
						"Region": "Nordmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1554
					}
				},
				{
					"arcs": [
						[
							[
								378,
								379,
								380,
								-1884,
								1190
							]
						],
						[
							[
								1193
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 113852.413791,
						"Shape_Area": 470867718.993,
						"Sted": "Gjemnes",
						"ID": "1557 Gjemnes",
						"Rnr": 3052,
						"Region": "Nordmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1557
					}
				},
				{
					"arcs": [
						[
							[
								386,
								387,
								-1840,
								1222,
								1884
							]
						],
						[
							[
								1219,
								1885
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 124207.416803,
						"Shape_Area": 537191945.728,
						"Sted": "Balestrand",
						"ID": "1418 Balestrand",
						"Rnr": 3050,
						"Region": "Sogn",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1418
					}
				},
				{
					"arcs": [
						[
							1218,
							-1886,
							1220,
							-1839
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 76794.6937739,
						"Shape_Area": 219628490.969,
						"Sted": "Leikanger",
						"ID": "1419 Leikanger",
						"Rnr": 3050,
						"Region": "Sogn",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1419
					}
				},
				{
					"arcs": [
						[
							-242,
							313,
							314,
							-159,
							-158,
							1886,
							1887
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 145858.490845,
						"Shape_Area": 763290036.907,
						"Sted": "Gran",
						"ID": "0534 Gran",
						"Rnr": 3015,
						"Region": "Hadeland",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 534
					}
				},
				{
					"arcs": [
						[
							1888,
							-1887,
							-157,
							315,
							-283,
							-244
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 84450.2617275,
						"Shape_Area": 292803583.238,
						"Sted": "Lunner",
						"ID": "0533 Lunner",
						"Rnr": 3015,
						"Region": "Hadeland",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 533
					}
				},
				{
					"arcs": [
						[
							-1889,
							-243,
							-1888
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 83626.1241205,
						"Shape_Area": 220440794.962,
						"Sted": "Jevnaker",
						"ID": "0532 Jevnaker",
						"Rnr": 3015,
						"Region": "Hadeland",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 532
					}
				},
				{
					"arcs": [
						[
							[
								280,
								-154,
								797
							]
						],
						[
							[
								798
							]
						],
						[
							[
								799
							]
						],
						[
							[
								800
							]
						],
						[
							[
								801
							]
						],
						[
							[
								802
							]
						],
						[
							[
								803
							]
						],
						[
							[
								804
							]
						],
						[
							[
								805
							]
						],
						[
							[
								806
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 159900.640973,
						"Shape_Area": 986550159.064,
						"Sted": "Gulen",
						"ID": "1411 Gulen",
						"Rnr": 3048,
						"Region": "HAFS",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1411
					}
				},
				{
					"arcs": [
						[
							[
								807
							]
						],
						[
							[
								808
							]
						],
						[
							[
								809
							]
						],
						[
							[
								810
							]
						],
						[
							[
								811
							]
						],
						[
							[
								812
							]
						],
						[
							[
								813
							]
						],
						[
							[
								814
							]
						],
						[
							[
								815
							]
						],
						[
							[
								816
							]
						],
						[
							[
								817
							]
						],
						[
							[
								818
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 174517.374372,
						"Shape_Area": 1756623679.69,
						"Sted": "Solund",
						"ID": "1412 Solund",
						"Rnr": 3048,
						"Region": "HAFS",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1412
					}
				},
				{
					"arcs": [
						[
							[
								276,
								788,
								-1843
							]
						],
						[
							[
								819
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 93637.3151426,
						"Shape_Area": 387737070.962,
						"Sted": "Hyllestad",
						"ID": "1413 Hyllestad",
						"Rnr": 3048,
						"Region": "HAFS",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1413
					}
				},
				{
					"arcs": [
						[
							[
								-277,
								-276,
								385,
								-1885,
								1223
							]
						],
						[
							[
								1889,
								399,
								-155,
								-281,
								1211
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 202036.835989,
						"Shape_Area": 1115414594.14,
						"Sted": "Høyanger",
						"ID": "1416 Høyanger",
						"Rnr": 3050,
						"Region": "Sogn",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1416
					}
				},
				{
					"arcs": [
						[
							397,
							398,
							-1890,
							1212,
							-1837,
							-139
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 161933.476108,
						"Shape_Area": 974013325.662,
						"Sted": "Vik",
						"ID": "1417 Vik",
						"Rnr": 3050,
						"Region": "Sogn",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1417
					}
				},
				{
					"arcs": [
						[
							[
								1298
							]
						],
						[
							[
								1299
							]
						],
						[
							[
								1300
							]
						],
						[
							[
								1301
							]
						],
						[
							[
								1302
							]
						],
						[
							[
								1303
							]
						],
						[
							[
								1304
							]
						],
						[
							[
								1305
							]
						],
						[
							[
								1306
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 131539.11079,
						"Shape_Area": 516704551.916,
						"Sted": "Hvaler",
						"ID": "0111 Hvaler",
						"Rnr": 3004,
						"Region": "Nedre Glomma",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 111
					}
				},
				{
					"arcs": [
						[
							-1782,
							533,
							1890,
							-1795,
							-1790,
							57
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 113134.488171,
						"Shape_Area": 412091087.053,
						"Sted": "Marker",
						"ID": "0119 Marker",
						"Rnr": 3002,
						"Region": "Indre Østfold",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 119
					}
				},
				{
					"arcs": [
						[
							534,
							59,
							-1794,
							-1891
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 84996.8081571,
						"Shape_Area": 318324305.956,
						"Sted": "Aremark",
						"ID": "0118 Aremark",
						"Rnr": 3002,
						"Region": "Indre Østfold",
						"Fnr": 1,
						"Fylke": "Østfold",
						"Nr": 118
					}
				},
				{
					"arcs": [
						[
							[
								-1731,
								1038
							]
						],
						[
							[
								1048
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 165683.469361,
						"Shape_Area": 1178172893.43,
						"Sted": "Flakstad",
						"ID": "1859 Flakstad",
						"Rnr": 3075,
						"Region": "Lofoten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1859
					}
				},
				{
					"arcs": [
						[
							-241,
							-417,
							1891,
							-1846,
							-1539,
							-314
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 130262.052497,
						"Shape_Area": 732579332.592,
						"Sted": "Søndre Land",
						"ID": "0536 Søndre Land",
						"Rnr": 3014,
						"Region": "Gjøvikregionen",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 536
					}
				},
				{
					"arcs": [
						[
							[
								1030,
								-343,
								1023,
								1892
							]
						],
						[
							[
								1031
							]
						],
						[
							[
								1032
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 239909.334265,
						"Shape_Area": 1932396873.35,
						"Sted": "Tysfjord",
						"ID": "1850 Tysfjord",
						"Rnr": 3074,
						"Region": "Ofoten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1850
					}
				},
				{
					"arcs": [
						[
							[
								-1734,
								-355,
								-351,
								1353,
								-354,
								-1854
							]
						],
						[
							[
								1376
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 188733.62148,
						"Shape_Area": 1042108758.14,
						"Sted": "Lødingen",
						"ID": "1851 Lødingen",
						"Rnr": 3076,
						"Region": "Vesterålen",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1851
					}
				},
				{
					"arcs": [
						[
							[
								348,
								349,
								1033,
								350
							]
						],
						[
							[
								343,
								1893,
								1027
							]
						],
						[
							[
								1034
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 103297.894759,
						"Shape_Area": 447154566.867,
						"Sted": "Tjeldsund",
						"ID": "1852 Tjeldsund",
						"Rnr": 3074,
						"Region": "Ofoten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1852
					}
				},
				{
					"arcs": [
						[
							[
								1894,
								1026,
								-1894,
								344
							]
						],
						[
							[
								1035
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 93481.9545767,
						"Shape_Area": 392099621.831,
						"Sted": "Evenes",
						"ID": "1853 Evenes",
						"Rnr": 3074,
						"Region": "Ofoten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1853
					}
				},
				{
					"arcs": [
						[
							[
								1895,
								1029,
								-1893,
								1024
							]
						],
						[
							[
								1036
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 172305.854561,
						"Shape_Area": 1187596720.93,
						"Sted": "Ballangen",
						"ID": "1854 Ballangen",
						"Rnr": 3074,
						"Region": "Ofoten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1854
					}
				},
				{
					"arcs": [
						[
							[
								1049
							]
						],
						[
							[
								1050
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 225561.027894,
						"Shape_Area": 3399817325.86,
						"Sted": "Røst",
						"ID": "1856 Røst",
						"Rnr": 3075,
						"Region": "Lofoten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1856
					}
				},
				{
					"arcs": [
						[
							1051
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 176799.563224,
						"Shape_Area": 1785235325.06,
						"Sted": "Værøy",
						"ID": "1857 Værøy",
						"Rnr": 3075,
						"Region": "Lofoten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1857
					}
				},
				{
					"arcs": [
						[
							-1459,
							1141,
							-1461,
							1896,
							362,
							363
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 165166.88204,
						"Shape_Area": 987693205.288,
						"Sted": "Norddal",
						"ID": "1524 Norddal",
						"Rnr": 3054,
						"Region": "Storfjord",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1524
					}
				},
				{
					"arcs": [
						[
							443,
							-1586,
							1315,
							447,
							1897,
							-1455
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 242483.763391,
						"Shape_Area": 3017040311.04,
						"Sted": "Trysil",
						"ID": "0428 Trysil",
						"Rnr": 3013,
						"Region": "Sør Østerdal",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 428
					}
				},
				{
					"arcs": [
						[
							[
								1139,
								-1458,
								-1595
							]
						],
						[
							[
								1143,
								-1594,
								360,
								361,
								-1897,
								-1460
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 85134.0039106,
						"Shape_Area": 274041540.126,
						"Sted": "Stordal",
						"ID": "1526 Stordal",
						"Rnr": 3054,
						"Region": "Storfjord",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1526
					}
				},
				{
					"arcs": [
						[
							114,
							-1758,
							1898,
							-1563,
							-1565,
							112,
							113
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 178638.301579,
						"Shape_Area": 645672461.81,
						"Sted": "Froland",
						"ID": "0919 Froland",
						"Rnr": 3032,
						"Region": "Arendalregionen",
						"Fnr": 9,
						"Fylke": "Aust-Agder",
						"Nr": 919
					}
				},
				{
					"arcs": [
						[
							1899,
							1417
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 98626.3616052,
						"Shape_Area": 311194393.353,
						"Sted": "Osterøy",
						"ID": "1253 Osterøy",
						"Rnr": 3045,
						"Region": "Osterfjorden",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1253
					}
				},
				{
					"arcs": [
						[
							[
								-398,
								-138,
								1415,
								-1830
							]
						],
						[
							[
								1419,
								-137,
								-143,
								-130,
								-132,
								1420,
								-141
							]
						],
						[
							[
								1418,
								-1900
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 212223.475139,
						"Shape_Area": 757594655.484,
						"Sted": "Vaksdal",
						"ID": "1251 Vaksdal",
						"Rnr": 3045,
						"Region": "Osterfjorden",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1251
					}
				},
				{
					"arcs": [
						[
							[
								-1707,
								-1557,
								600,
								-1564,
								-1899,
								-1757
							]
						],
						[
							[
								-1561,
								602
							]
						],
						[
							[
								-1560,
								598
							]
						],
						[
							[
								610
							]
						],
						[
							[
								611
							]
						],
						[
							[
								612
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 133469.081691,
						"Shape_Area": 610946535.905,
						"Sted": "Tvedestrand",
						"ID": "0914 Tvedestrand",
						"Rnr": 3032,
						"Region": "Arendalregionen",
						"Fnr": 9,
						"Fylke": "Aust-Agder",
						"Nr": 914
					}
				},
				{
					"arcs": [
						[
							1318,
							-1852,
							-1810,
							-1808,
							-1499
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 165693.589476,
						"Shape_Area": 835573876.279,
						"Sted": "Grue",
						"ID": "0423 Grue",
						"Rnr": 3011,
						"Region": "Glåmdal",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 423
					}
				},
				{
					"arcs": [
						[
							117,
							-1559,
							-1709,
							-43,
							116
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 85925.9172178,
						"Shape_Area": 322518447.816,
						"Sted": "Gjerstad",
						"ID": "0911 Gjerstad",
						"Rnr": 3032,
						"Region": "Arendalregionen",
						"Fnr": 9,
						"Fylke": "Aust-Agder",
						"Nr": 911
					}
				},
				{
					"arcs": [
						[
							[
								1084,
								-1743,
								1086,
								-1576,
								357,
								358
							]
						],
						[
							[
								1102
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 64168.6174829,
						"Shape_Area": 158819229.555,
						"Sted": "Skodje",
						"ID": "1529 Skodje",
						"Rnr": 3056,
						"Region": "Ålesundregionen",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1529
					}
				},
				{
					"arcs": [
						[
							449,
							-1456,
							-1898,
							448
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 179217.418889,
						"Shape_Area": 1232703915.85,
						"Sted": "Elverum",
						"ID": "0427 Elverum",
						"Rnr": 3013,
						"Region": "Sør Østerdal",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 427
					}
				},
				{
					"arcs": [
						[
							1316,
							-1501,
							455,
							456,
							-449,
							-448
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 186010.953178,
						"Shape_Area": 703926920.581,
						"Sted": "Våler",
						"ID": "0426 Våler",
						"Rnr": 3011,
						"Region": "Glåmdal",
						"Fnr": 4,
						"Fylke": "Hedmark",
						"Nr": 426
					}
				},
				{
					"arcs": [
						[
							281,
							-245,
							282,
							283,
							284,
							285,
							286,
							287,
							288,
							820
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 108180.695084,
						"Shape_Area": 485782944.357,
						"Sted": "Oslo",
						"ID": "0301 Oslo",
						"Rnr": 3009,
						"Region": "Oslo",
						"Fnr": 3,
						"Fylke": "Oslo",
						"Nr": 301
					}
				},
				{
					"arcs": [
						[
							1105,
							-1591,
							1107,
							-1590,
							-305,
							-192
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 224307.503907,
						"Shape_Area": 1743519975.59,
						"Sted": "Balsfjord",
						"ID": "1933 Balsfjord",
						"Rnr": 3079,
						"Region": "Tromsøregionen",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1933
					}
				},
				{
					"arcs": [
						[
							[
								-1820,
								-1823,
								735
							]
						],
						[
							[
								-1816,
								-1818,
								727
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 232531.54227,
						"Shape_Area": 1586404629,
						"Sted": "Lenvik",
						"ID": "1931 Lenvik",
						"Rnr": 3078,
						"Region": "Midt-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1931
					}
				},
				{
					"arcs": [
						[
							[
								-1589,
								1104
							]
						],
						[
							[
								1112,
								-1592
							]
						],
						[
							[
								1125
							]
						],
						[
							[
								1126
							]
						],
						[
							[
								1127
							]
						],
						[
							[
								1128
							]
						],
						[
							[
								1129
							]
						],
						[
							[
								1130
							]
						],
						[
							[
								1131
							]
						],
						[
							[
								1132
							]
						],
						[
							[
								1133
							]
						],
						[
							[
								1134
							]
						],
						[
							[
								1135
							]
						],
						[
							[
								1136
							]
						],
						[
							[
								1137
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 338862.777255,
						"Shape_Area": 5881307712.39,
						"Sted": "Karlsøy",
						"ID": "1936 Karlsøy",
						"Rnr": 3079,
						"Region": "Tromsøregionen",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1936
					}
				},
				{
					"arcs": [
						[
							-193,
							304,
							305,
							1900,
							869,
							-1465,
							867
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 190264.079845,
						"Shape_Area": 1601842114.24,
						"Sted": "Storfjord",
						"ID": "1939 Storfjord",
						"Rnr": 3080,
						"Region": "Nord-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1939
					}
				},
				{
					"arcs": [
						[
							[
								-1901,
								306,
								868
							]
						],
						[
							[
								883
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 177813.47896,
						"Shape_Area": 1300314847.9,
						"Sted": "Lyngen",
						"ID": "1938 Lyngen",
						"Rnr": 3080,
						"Region": "Nord-Troms",
						"Fnr": 19,
						"Fylke": "Troms",
						"Nr": 1938
					}
				},
				{
					"arcs": [
						[
							-461,
							-1847,
							-1892,
							-416,
							-415,
							-414,
							-462
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 170728.817605,
						"Shape_Area": 956000456.007,
						"Sted": "Nordre Land",
						"ID": "0538 Nordre Land",
						"Rnr": 3014,
						"Region": "Gjøvikregionen",
						"Fnr": 5,
						"Fylke": "Oppland",
						"Nr": 538
					}
				},
				{
					"arcs": [
						[
							[
								73,
								74,
								-1605,
								-1603,
								541,
								1901
							]
						],
						[
							[
								548
							]
						],
						[
							[
								549
							]
						],
						[
							[
								550
							]
						],
						[
							[
								551
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 195542.142151,
						"Shape_Area": 1413083353.93,
						"Sted": "Åfjord",
						"ID": "1630 Åfjord",
						"Rnr": 3057,
						"Region": "Fosen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1630
					}
				},
				{
					"arcs": [
						[
							1902,
							-1701,
							529,
							1903
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 253147.006792,
						"Shape_Area": 2960054590.23,
						"Sted": "Lierne",
						"ID": "1738 Lierne",
						"Rnr": 3065,
						"Region": "Indre Namdal",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1738
					}
				},
				{
					"arcs": [
						[
							[
								72,
								-1902,
								542,
								1904
							]
						],
						[
							[
								552
							]
						],
						[
							[
								553
							]
						],
						[
							[
								554
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 162906.867857,
						"Shape_Area": 976341061.561,
						"Sted": "Roan",
						"ID": "1632 Roan",
						"Rnr": 3057,
						"Region": "Fosen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1632
					}
				},
				{
					"arcs": [
						[
							[
								70,
								71,
								-1905,
								543,
								69,
								535
							]
						],
						[
							[
								555
							]
						],
						[
							[
								556
							]
						],
						[
							[
								557
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 217690.587761,
						"Shape_Area": 1756394771.31,
						"Sted": "Osen",
						"ID": "1633 Osen",
						"Rnr": 3057,
						"Region": "Fosen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1633
					}
				},
				{
					"arcs": [
						[
							200,
							1905,
							194,
							195,
							196,
							197,
							198,
							199
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 220838.21582,
						"Shape_Area": 2281939493.45,
						"Sted": "Oppdal",
						"ID": "1634 Oppdal",
						"Rnr": 3059,
						"Region": "Oppdal/Rennebu",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1634
					}
				},
				{
					"arcs": [
						[
							-97,
							193,
							-1906,
							201,
							-99
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 160186.713485,
						"Shape_Area": 948841372.18,
						"Sted": "Rennebu",
						"ID": "1635 Rennebu",
						"Rnr": 3059,
						"Region": "Oppdal/Rennebu",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1635
					}
				},
				{
					"arcs": [
						[
							1906,
							-92,
							-98,
							98,
							99
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 124509.857191,
						"Shape_Area": 611816344.241,
						"Sted": "Meldal",
						"ID": "1636 Meldal",
						"Rnr": 3060,
						"Region": "Orkdalregionen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1636
					}
				},
				{
					"arcs": [
						[
							-1761,
							-1600,
							574,
							-94,
							-93,
							-1907,
							100,
							-1760
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 127020.582834,
						"Shape_Area": 642589850.259,
						"Sted": "Orkdal",
						"ID": "1638 Orkdal",
						"Rnr": 3060,
						"Region": "Orkdalregionen",
						"Fnr": 16,
						"Fylke": "Sør-Trøndelag",
						"Nr": 1638
					}
				},
				{
					"arcs": [
						[
							530,
							21,
							22,
							23,
							1907,
							-1904
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 195568.255361,
						"Shape_Area": 2343003875.56,
						"Sted": "Snåsa",
						"ID": "1736 Snåsa",
						"Rnr": 3065,
						"Region": "Indre Namdal",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1736
					}
				},
				{
					"arcs": [
						[
							-54,
							-53,
							-52,
							-1880,
							-287,
							-465,
							-464,
							-463
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 71976.4772467,
						"Shape_Area": 231790390.519,
						"Sted": "Enebakk",
						"ID": "0229 Enebakk",
						"Rnr": 3006,
						"Region": "Follo",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 229
					}
				},
				{
					"arcs": [
						[
							1908,
							463,
							-1616,
							-1619
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 40635.4039822,
						"Shape_Area": 72265706.2566,
						"Sted": "Rælingen",
						"ID": "0228 Rælingen",
						"Rnr": 3007,
						"Region": "Nedre Romerike",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 228
					}
				},
				{
					"arcs": [
						[
							-55,
							462,
							-1909,
							-1618,
							1909,
							1910
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 79066.8287322,
						"Shape_Area": 179026469.682,
						"Sted": "Fet",
						"ID": "0227 Fet",
						"Rnr": 3007,
						"Region": "Nedre Romerike",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 227
					}
				},
				{
					"arcs": [
						[
							-169,
							1911,
							-1910,
							-1617,
							-171,
							-170
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 72854.5683895,
						"Shape_Area": 206090107.486,
						"Sted": "Sørum",
						"ID": "0226 Sørum",
						"Rnr": 3007,
						"Region": "Nedre Romerike",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 226
					}
				},
				{
					"arcs": [
						[
							-57,
							-56,
							-1911,
							-1912,
							-168,
							-453,
							1321,
							-59,
							-58
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 154539.072757,
						"Shape_Area": 961459468.432,
						"Sted": "Aurskog Høland",
						"ID": "0221 Aurskog Høland",
						"Rnr": 3007,
						"Region": "Nedre Romerike",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 221
					}
				},
				{
					"arcs": [
						[
							[
								-293,
								-1881,
								914,
								-290
							]
						],
						[
							[
								916
							]
						],
						[
							[
								917
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 50690.8565915,
						"Shape_Area": 130006828.319,
						"Sted": "Asker",
						"ID": "0220 Asker",
						"Rnr": 3005,
						"Region": "Akershus Vest",
						"Fnr": 2,
						"Fylke": "Akershus",
						"Nr": 220
					}
				},
				{
					"arcs": [
						[
							1912,
							425,
							426,
							1913,
							-324,
							1914
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 104054.502804,
						"Shape_Area": 253572918.793,
						"Sted": "Audnedal",
						"ID": "1027 Audnedal",
						"Rnr": 3034,
						"Region": "Mandalsregionen",
						"Fnr": 10,
						"Fylke": "Vest-Agder",
						"Nr": 1027
					}
				},
				{
					"arcs": [
						[
							-1914,
							427,
							428,
							-326,
							-325
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 133571.193688,
						"Shape_Area": 887362452.86,
						"Sted": "Åseral",
						"ID": "1026 Åseral",
						"Rnr": 3034,
						"Region": "Mandalsregionen",
						"Fnr": 10,
						"Fylke": "Vest-Agder",
						"Nr": 1026
					}
				},
				{
					"arcs": [
						[
							429,
							430,
							431,
							-1641,
							1915,
							-1915,
							-323
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 126209.042041,
						"Shape_Area": 394166872.943,
						"Sted": "Marnardal",
						"ID": "1021 Marnardal",
						"Rnr": 3034,
						"Region": "Mandalsregionen",
						"Fnr": 10,
						"Fylke": "Vest-Agder",
						"Nr": 1021
					}
				},
				{
					"arcs": [
						[
							[
								-1640,
								1308,
								433,
								-1913,
								-1916
							]
						],
						[
							[
								434,
								1311
							]
						],
						[
							[
								435,
								1312
							]
						],
						[
							[
								1313
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 152903.069631,
						"Shape_Area": 807422040.616,
						"Sted": "Lindesnes",
						"ID": "1029 Lindesnes",
						"Rnr": 3034,
						"Region": "Mandalsregionen",
						"Fnr": 10,
						"Fylke": "Vest-Agder",
						"Nr": 1029
					}
				},
				{
					"arcs": [
						[
							[
								1916,
								-1495,
								583,
								108,
								-27
							]
						],
						[
							[
								-1497,
								585
							]
						],
						[
							[
								588
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 157340.448503,
						"Shape_Area": 683929370.019,
						"Sted": "Fosnes",
						"ID": "1748 Fosnes",
						"Rnr": 3067,
						"Region": "Midtre Namdal",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1748
					}
				},
				{
					"arcs": [
						[
							[
								-71,
								578,
								-1835
							]
						],
						[
							[
								-70,
								589
							]
						],
						[
							[
								590
							]
						],
						[
							[
								591
							]
						],
						[
							[
								592
							]
						],
						[
							[
								593
							]
						],
						[
							[
								594
							]
						],
						[
							[
								595
							]
						],
						[
							[
								596
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 210332.568837,
						"Shape_Area": 1285751499.8,
						"Sted": "Flatanger",
						"ID": "1749 Flatanger",
						"Rnr": 3067,
						"Region": "Midtre Namdal",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1749
					}
				},
				{
					"arcs": [
						[
							-1693,
							765,
							-227,
							-1478,
							-1481
						],
						[
							-1828,
							771
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 62727.0137231,
						"Shape_Area": 124617496.587,
						"Sted": "Stokke",
						"ID": "0720 Stokke",
						"Rnr": 3025,
						"Region": "Tønsbergregionen",
						"Fnr": 7,
						"Fylke": "Vestfold",
						"Nr": 720
					}
				},
				{
					"arcs": [
						[
							-1917,
							-26,
							-25,
							-24,
							109,
							-1496
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 139461.484825,
						"Shape_Area": 728581741.184,
						"Sted": "Overhalla",
						"ID": "1744 Overhalla",
						"Rnr": 3067,
						"Region": "Midtre Namdal",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1744
					}
				},
				{
					"arcs": [
						[
							29,
							-1702,
							1917,
							1918,
							-5
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 225423.702291,
						"Shape_Area": 1418799126.05,
						"Sted": "Namsskogan",
						"ID": "1740 Namsskogan",
						"Rnr": 3065,
						"Region": "Indre Namdal",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1740
					}
				},
				{
					"arcs": [
						[
							-1903,
							-1908,
							24,
							1919,
							-1918
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 166850.855843,
						"Shape_Area": 1133191710.58,
						"Sted": "Grong",
						"ID": "1742 Grong",
						"Rnr": 3065,
						"Region": "Indre Namdal",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1742
					}
				},
				{
					"arcs": [
						[
							27,
							531,
							28,
							-6,
							-1919,
							-1920,
							25,
							26
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 157983.59584,
						"Shape_Area": 760353285.474,
						"Sted": "Høylandet",
						"ID": "1743 Høylandet",
						"Rnr": 3065,
						"Region": "Indre Namdal",
						"Fnr": 17,
						"Fylke": "Nord-Trøndelag",
						"Nr": 1743
					}
				},
				{
					"arcs": [
						[
							245,
							-1629,
							236,
							237,
							238,
							239,
							240,
							241,
							242,
							243,
							244
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 237441.456071,
						"Shape_Area": 1557437880.2,
						"Sted": "Ringerike",
						"ID": "0605 Ringerike",
						"Rnr": 3024,
						"Region": "Ringerike/Hole",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 605
					}
				},
				{
					"arcs": [
						[
							255,
							-228,
							-221,
							-215,
							-214,
							-210,
							-207,
							-1849
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 146154.28659,
						"Shape_Area": 793264581.525,
						"Sted": "Kongsberg",
						"ID": "0604 Kongsberg",
						"Rnr": 3022,
						"Region": "Kongsberg/Numedal",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 604
					}
				},
				{
					"arcs": [
						[
							14,
							512,
							-1764,
							514,
							-1766,
							511,
							13
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 154124.103501,
						"Shape_Area": 772500506.099,
						"Sted": "Vindafjord",
						"ID": "1160 Vindafjord",
						"Rnr": 3037,
						"Region": "Haugesundregionen",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1160
					}
				},
				{
					"arcs": [
						[
							-231,
							-1452,
							272,
							784,
							-1487,
							-1485
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 66410.0151143,
						"Shape_Area": 147346792.642,
						"Sted": "Drammen",
						"ID": "0602 Drammen",
						"Rnr": 3020,
						"Region": "Drammensregionen",
						"Fnr": 6,
						"Fylke": "Buskerud",
						"Nr": 602
					}
				},
				{
					"arcs": [
						[
							[
								-128,
								634,
								131,
								-129
							]
						],
						[
							[
								132,
								635
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 126376.260211,
						"Shape_Area": 573915148.999,
						"Sted": "Bergen",
						"ID": "1201 Bergen",
						"Rnr": 3040,
						"Region": "Bergen",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1201
					}
				},
				{
					"arcs": [
						[
							174,
							-14,
							710,
							-1728,
							-149,
							-18
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 161682.542873,
						"Shape_Area": 816059399.648,
						"Sted": "Etne",
						"ID": "1211 Etne",
						"Rnr": 3046,
						"Region": "Sunnhordland",
						"Fnr": 12,
						"Fylke": "Hordaland",
						"Nr": 1211
					}
				},
				{
					"arcs": [
						[
							1412,
							-1857,
							-1882,
							-469
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 146367.052472,
						"Shape_Area": 872534202.26,
						"Sted": "Sokndal",
						"ID": "1111 Sokndal",
						"Rnr": 3036,
						"Region": "Dalane",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1111
					}
				},
				{
					"arcs": [
						[
							-401,
							-1714,
							1240,
							-1832,
							-403,
							-402
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 180389.463957,
						"Shape_Area": 1092704935.29,
						"Sted": "Gloppen",
						"ID": "1445 Gloppen",
						"Rnr": 3049,
						"Region": "Nordfjord",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1445
					}
				},
				{
					"arcs": [
						[
							-1834,
							1920,
							-371,
							-370,
							-367
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 63264.0922354,
						"Shape_Area": 189910767.094,
						"Sted": "Hornindal",
						"ID": "1444 Hornindal",
						"Rnr": 3049,
						"Region": "Nordfjord",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1444
					}
				},
				{
					"arcs": [
						[
							-373,
							-372,
							-1921,
							-1833,
							1242,
							-1715
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 140776.850167,
						"Shape_Area": 555401074.273,
						"Sted": "Eid",
						"ID": "1443 Eid",
						"Rnr": 3049,
						"Region": "Nordfjord",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1443
					}
				},
				{
					"arcs": [
						[
							-423,
							-422,
							-421,
							-473,
							-1858
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 137795.600649,
						"Shape_Area": 653956444.137,
						"Sted": "Bjerkreim",
						"ID": "1114 Bjerkreim",
						"Rnr": 3036,
						"Region": "Dalane",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1114
					}
				},
				{
					"arcs": [
						[
							[
								-375,
								-1716,
								1244
							]
						],
						[
							[
								1250
							]
						],
						[
							[
								1251
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 155982.396152,
						"Shape_Area": 1046476945.48,
						"Sted": "Selje",
						"ID": "1441 Selje",
						"Rnr": 3049,
						"Region": "Nordfjord",
						"Fnr": 14,
						"Fylke": "Sogn og Fjordane",
						"Nr": 1441
					}
				},
				{
					"arcs": [
						[
							423,
							1272,
							-1514,
							-1519,
							422
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 141802.930551,
						"Shape_Area": 1067816160.03,
						"Sted": "Hå",
						"ID": "1119 Hå",
						"Rnr": 3039,
						"Region": "Stavangerregionen",
						"Fnr": 11,
						"Fylke": "Rogaland",
						"Nr": 1119
					}
				},
				{
					"arcs": [
						[
							375,
							376,
							1170,
							-1883,
							1172,
							1921,
							-199
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 213518.004677,
						"Shape_Area": 1798172160.99,
						"Sted": "Sunndal",
						"ID": "1563 Sunndal",
						"Rnr": 3052,
						"Region": "Nordmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1563
					}
				},
				{
					"arcs": [
						[
							-103,
							1922,
							-200,
							-1922,
							1173,
							-1644
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 199717.698379,
						"Shape_Area": 1453820258.85,
						"Sted": "Surnadal",
						"ID": "1566 Surnadal",
						"Rnr": 3052,
						"Region": "Nordmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1566
					}
				},
				{
					"arcs": [
						[
							-201,
							-1923,
							-102,
							-101,
							-100,
							-202
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 158229.096648,
						"Shape_Area": 632263911.413,
						"Sted": "Rindal",
						"ID": "1567 Rindal",
						"Rnr": 3052,
						"Region": "Nordmøre",
						"Fnr": 15,
						"Fylke": "Møre og Romsdal",
						"Nr": 1567
					}
				},
				{
					"arcs": [
						[
							-187,
							1028,
							-1896,
							1025,
							-1895,
							345,
							346,
							347
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 208421.688501,
						"Shape_Area": 2222963806.02,
						"Sted": "Narvik",
						"ID": "1805 Narvik",
						"Rnr": 3074,
						"Region": "Ofoten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1805
					}
				},
				{
					"arcs": [
						[
							[
								-1566,
								975,
								-1572
							]
						],
						[
							[
								-1570,
								-1664,
								-1663,
								972
							]
						],
						[
							[
								1012
							]
						],
						[
							[
								1013
							]
						],
						[
							[
								1014
							]
						],
						[
							[
								1015
							]
						],
						[
							[
								1016
							]
						],
						[
							[
								1017
							]
						],
						[
							[
								1018
							]
						],
						[
							[
								1019
							]
						],
						[
							[
								1020
							]
						],
						[
							[
								1021
							]
						],
						[
							[
								1022
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 374523.40515,
						"Shape_Area": 4834642126.67,
						"Sted": "Bodø",
						"ID": "1804 Bodø",
						"Rnr": 3073,
						"Region": "Salten",
						"Fnr": 18,
						"Fylke": "Nordland",
						"Nr": 1804
					}
				},
				{
					"arcs": [
						[
							[
								1923,
								-1755,
								886
							]
						],
						[
							[
								896
							]
						],
						[
							[
								897
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 199364.742155,
						"Shape_Area": 2503809905.89,
						"Sted": "Vardø",
						"ID": "2002 Vardø",
						"Rnr": 3083,
						"Region": "Øst-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2002
					}
				},
				{
					"arcs": [
						[
							310,
							-1756,
							-1924,
							887,
							-1750
						]
					],
					"type": "Polygon",
					"properties": {
						"Shape_Leng": 222083.957923,
						"Shape_Area": 1977607133.38,
						"Sted": "Vadsø",
						"ID": "2003 Vadsø",
						"Rnr": 3083,
						"Region": "Øst-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2003
					}
				},
				{
					"arcs": [
						[
							[
								-1674,
								-1679,
								855
							]
						],
						[
							[
								-1677,
								857
							]
						],
						[
							[
								847,
								-1670
							]
						],
						[
							[
								-1671,
								849
							]
						],
						[
							[
								859
							]
						],
						[
							[
								860
							]
						],
						[
							[
								861
							]
						],
						[
							[
								862
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Shape_Leng": 260453.871021,
						"Shape_Area": 3232394455.9,
						"Sted": "Hammerfest",
						"ID": "2004 Hammerfest",
						"Rnr": 3081,
						"Region": "Vest-Finnmark",
						"Fnr": 20,
						"Fylke": "Finnmark",
						"Nr": 2004
					}
				}
			]
		},
		"fylke_grense": {
			"type": "GeometryCollection",
			"geometries": [
				{
					"type": "MultiLineString",
					"arcs": [
						[
							11,
							12
						],
						[
							13,
							-175,
							17,
							18,
							-148,
							-31,
							-319,
							-318,
							-317,
							418,
							419,
							-473,
							-472,
							-471,
							-470,
							-469
						]
					],
					"properties": {
						"Nr": 1
					}
				},
				{
					"type": "LineString",
					"arcs": [
						468,
						469,
						470,
						471,
						472,
						-420,
						-419,
						-330,
						-329,
						-328,
						-327,
						-326,
						-325,
						-324,
						-323,
						-322,
						1529,
						1530,
						1641,
						1642
					],
					"properties": {
						"Nr": 2
					}
				},
				{
					"type": "LineString",
					"arcs": [
						153,
						154,
						-400,
						-399,
						-398,
						138,
						139,
						143,
						144,
						145,
						146,
						-33,
						-32,
						147,
						-19,
						-18,
						174,
						-14
					],
					"properties": {
						"Nr": 3
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-12
						],
						[
							-13
						]
					],
					"properties": {
						"Nr": 4
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-104,
						-103,
						-102,
						-101,
						-100,
						-202,
						-201,
						-200,
						-199,
						375,
						382,
						383,
						384,
						363,
						364,
						365,
						366,
						369,
						370,
						371,
						372,
						373,
						374
					],
					"properties": {
						"Nr": 5
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-105
					],
					"properties": {
						"Nr": 6
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-375,
						-374,
						-373,
						-372,
						-371,
						-370,
						-367,
						-366,
						405,
						392,
						393,
						394,
						395,
						396,
						-264,
						-263,
						-262,
						-261,
						-144,
						-140,
						-139,
						397,
						398,
						399,
						-155,
						-154
					],
					"properties": {
						"Nr": 7
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-9
						],
						[
							-11
						],
						[
							-7,
							-6,
							-5,
							29,
							19,
							20
						],
						[
							83,
							78,
							79,
							80
						],
						[
							-1604,
							-76,
							-75,
							-74,
							-73,
							-72,
							-71
						]
					],
					"properties": {
						"Nr": 8
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-8,
						-10
					],
					"properties": {
						"Nr": 9
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-70
					],
					"properties": {
						"Nr": 10
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							85,
							94,
							95,
							193,
							194,
							195,
							196,
							197,
							198,
							199,
							200,
							201,
							99,
							100,
							101,
							102,
							103
						],
						[
							104
						],
						[
							-81,
							-80,
							-79,
							-84
						],
						[
							89,
							90
						]
					],
					"properties": {
						"Nr": 11
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							69
						],
						[
							70,
							71,
							72,
							73,
							74,
							75,
							1603
						]
					],
					"properties": {
						"Nr": 12
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							303
						],
						[
							186,
							-348,
							-347,
							-346,
							-345,
							-344
						],
						[
							-303,
							-302,
							307
						]
					],
					"properties": {
						"Nr": 13
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-350,
						-349,
						354,
						355
					],
					"properties": {
						"Nr": 14
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-21,
							-20,
							-30,
							4,
							5,
							6
						],
						[
							343,
							344,
							345,
							346,
							347,
							-187
						]
					],
					"properties": {
						"Nr": 15
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-356,
						-355,
						348,
						349
					],
					"properties": {
						"Nr": 16
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							7
						],
						[
							8
						],
						[
							9
						]
					],
					"properties": {
						"Nr": 17
					}
				},
				{
					"type": "LineString",
					"arcs": [
						10
					],
					"properties": {
						"Nr": 18
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-304,
						-308,
						301,
						302
					],
					"properties": {
						"Nr": 19
					}
				},
				{
					"type": "LineString",
					"arcs": [
						120,
						121,
						66,
						67,
						68,
						51,
						52,
						53,
						54,
						55,
						56,
						57,
						58
					],
					"properties": {
						"Nr": 20
					}
				},
				{
					"type": "LineString",
					"arcs": [
						281,
						-245,
						282,
						283,
						284,
						285,
						286,
						287,
						288
					],
					"properties": {
						"Nr": 21
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							156,
							157,
							158,
							159,
							160,
							161,
							162,
							163,
							164,
							165,
							166,
							-453
						],
						[
							-59,
							-58,
							-57,
							-56,
							-55,
							-54,
							-53,
							-52,
							-69,
							-68,
							-67,
							-122,
							-121
						],
						[
							-289,
							-288,
							-287,
							-286,
							-285,
							-284,
							-316
						]
					],
					"properties": {
						"Nr": 22
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-291
					],
					"properties": {
						"Nr": 23
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-246,
							-282
						],
						[
							-290,
							-293,
							-292,
							-234
						]
					],
					"properties": {
						"Nr": 24
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-162,
						-161,
						-160,
						-159,
						-158,
						-157,
						315,
						-283,
						-244,
						-243,
						-242,
						-241,
						-240,
						-271,
						-270,
						-269,
						-268,
						-267,
						-266,
						-265,
						-397,
						-396,
						-395,
						-394,
						-393,
						-406,
						-365,
						-364,
						-385,
						-384,
						-383,
						-376,
						-198,
						-197,
						409,
						410,
						180,
						181,
						182,
						-439,
						457,
						458,
						465,
						466,
						467
					],
					"properties": {
						"Nr": 25
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-181,
							-411,
							-410,
							-196,
							-195,
							-194,
							-96,
							-95,
							-86,
							-91,
							-90
						],
						[
							452,
							-167,
							-166,
							-165,
							-164,
							-163,
							-468,
							-467,
							-466,
							-459,
							-458,
							438,
							-183,
							-182
						]
					],
					"properties": {
						"Nr": 26
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							227,
							228,
							229,
							230,
							1484,
							1486
						],
						[
							-218,
							-217,
							-216,
							220
						]
					],
					"properties": {
						"Nr": 27
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-220
					],
					"properties": {
						"Nr": 28
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-219
					],
					"properties": {
						"Nr": 29
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-230,
							-229,
							-228,
							-221,
							-215,
							-214,
							-210,
							-207,
							-206,
							-205,
							-204,
							-203,
							-34,
							-147,
							-146,
							-145,
							260,
							261,
							262,
							263,
							264,
							265,
							266,
							267,
							268,
							269,
							270,
							239,
							240,
							241,
							242,
							243,
							244,
							245,
							233,
							291,
							292,
							289
						],
						[
							290
						],
						[
							-1487,
							-1485,
							-231
						]
					],
					"properties": {
						"Nr": 30
					}
				},
				{
					"type": "LineString",
					"arcs": [
						-1643,
						-1642,
						-1531,
						-1530,
						321,
						322,
						323,
						324,
						325,
						326,
						327,
						328,
						329,
						316,
						317,
						318,
						-51,
						-50,
						-49,
						-48,
						-47,
						-46,
						-45,
						-44,
						-43,
						116,
						117,
						118
					],
					"properties": {
						"Nr": 31
					}
				},
				{
					"type": "MultiLineString",
					"arcs": [
						[
							-119,
							-118,
							-117,
							42,
							43,
							44,
							45,
							46,
							47,
							48,
							49,
							50,
							30,
							31,
							32,
							33,
							202,
							203,
							204,
							205,
							206,
							209,
							213,
							214,
							215,
							216,
							217
						],
						[
							218
						]
					],
					"properties": {
						"Nr": 32
					}
				},
				{
					"type": "LineString",
					"arcs": [
						219
					],
					"properties": {
						"Nr": 33
					}
				}
			]
		},
		"fylke": {
			"type": "GeometryCollection",
			"geometries": [
				{
					"arcs": [
						[
							[
								11,
								12,
								510,
								511,
								13,
								-175,
								17,
								18,
								-148,
								-31,
								-319,
								-318,
								-317,
								418,
								419,
								-473,
								-472,
								-471,
								-470,
								-469,
								1412,
								1413,
								1272,
								1273,
								1274,
								1275,
								1276,
								1277,
								1278,
								1279,
								1280,
								1281,
								1252,
								1253,
								1254,
								1255,
								1256,
								1257,
								522,
								1263,
								512,
								513,
								514,
								515,
								516,
								517
							]
						],
						[
							[
								518
							]
						],
						[
							[
								519
							]
						],
						[
							[
								520
							]
						],
						[
							[
								521
							]
						],
						[
							[
								1282
							]
						],
						[
							[
								1258,
								1259
							]
						],
						[
							[
								1260
							]
						],
						[
							[
								1261
							]
						],
						[
							[
								1262
							]
						],
						[
							[
								1264
							]
						],
						[
							[
								1283,
								1284
							]
						],
						[
							[
								1285
							]
						],
						[
							[
								1286
							]
						],
						[
							[
								1287
							]
						],
						[
							[
								1288
							]
						],
						[
							[
								1265
							]
						],
						[
							[
								1266
							]
						],
						[
							[
								1267
							]
						],
						[
							[
								1268
							]
						],
						[
							[
								1269
							]
						],
						[
							[
								1270
							]
						],
						[
							[
								1271
							]
						],
						[
							[
								1289
							]
						],
						[
							[
								523
							]
						],
						[
							[
								524
							]
						],
						[
							[
								525
							]
						],
						[
							[
								526
							]
						],
						[
							[
								1290
							]
						],
						[
							[
								1291
							]
						],
						[
							[
								1292
							]
						],
						[
							[
								1414
							]
						],
						[
							[
								527
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Rogaland",
						"ID": "0011 Rogaland",
						"Nr": 11
					}
				},
				{
					"arcs": [
						[
							[
								468,
								469,
								470,
								471,
								472,
								-420,
								-419,
								-330,
								-329,
								-328,
								-327,
								-326,
								-325,
								-324,
								-323,
								-322,
								1529,
								1530,
								1641,
								1642,
								1345,
								1346,
								1307,
								1308,
								1322,
								1312,
								1323,
								1324,
								1325,
								1326,
								1327,
								1328
							]
						],
						[
							[
								1347
							]
						],
						[
							[
								1329
							]
						],
						[
							[
								1330
							]
						],
						[
							[
								1309
							]
						],
						[
							[
								1310
							]
						],
						[
							[
								1348
							]
						],
						[
							[
								1349
							]
						],
						[
							[
								1350
							]
						],
						[
							[
								1331
							]
						],
						[
							[
								1332
							]
						],
						[
							[
								1333,
								1311
							]
						],
						[
							[
								1313
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Vest-Agder",
						"ID": "0010 Vest-Agder",
						"Nr": 10
					}
				},
				{
					"arcs": [
						[
							[
								153,
								154,
								-400,
								-399,
								-398,
								138,
								139,
								143,
								144,
								145,
								146,
								-33,
								-32,
								147,
								-19,
								-18,
								174,
								-14,
								710,
								711,
								638,
								639,
								640,
								641,
								642,
								643,
								644,
								645,
								646,
								709,
								629,
								630,
								631,
								634,
								1420,
								637,
								1419,
								636,
								1415,
								1416,
								647,
								648,
								649,
								650
							]
						],
						[
							[
								669,
								670,
								671,
								672,
								673,
								674
							]
						],
						[
							[
								675
							]
						],
						[
							[
								676
							]
						],
						[
							[
								689
							]
						],
						[
							[
								690
							]
						],
						[
							[
								691
							]
						],
						[
							[
								692
							]
						],
						[
							[
								693
							]
						],
						[
							[
								677
							]
						],
						[
							[
								678
							]
						],
						[
							[
								694,
								695
							]
						],
						[
							[
								696
							]
						],
						[
							[
								697
							]
						],
						[
							[
								698
							]
						],
						[
							[
								699
							]
						],
						[
							[
								700,
								701
							]
						],
						[
							[
								702,
								703
							]
						],
						[
							[
								704
							]
						],
						[
							[
								705
							]
						],
						[
							[
								706
							]
						],
						[
							[
								707
							]
						],
						[
							[
								708
							]
						],
						[
							[
								712
							]
						],
						[
							[
								713
							]
						],
						[
							[
								714
							]
						],
						[
							[
								715
							]
						],
						[
							[
								716
							]
						],
						[
							[
								717
							]
						],
						[
							[
								651,
								652
							]
						],
						[
							[
								653,
								654,
								655,
								656
							]
						],
						[
							[
								657,
								658
							]
						],
						[
							[
								659
							]
						],
						[
							[
								660
							]
						],
						[
							[
								661
							]
						],
						[
							[
								662
							]
						],
						[
							[
								663
							]
						],
						[
							[
								664
							]
						],
						[
							[
								665
							]
						],
						[
							[
								666
							]
						],
						[
							[
								667
							]
						],
						[
							[
								668
							]
						],
						[
							[
								718,
								-13,
								-12
							]
						],
						[
							[
								719
							]
						],
						[
							[
								720
							]
						],
						[
							[
								721
							]
						],
						[
							[
								722
							]
						],
						[
							[
								723
							]
						],
						[
							[
								724
							]
						],
						[
							[
								632
							]
						],
						[
							[
								633
							]
						],
						[
							[
								679,
								635
							]
						],
						[
							[
								680
							]
						],
						[
							[
								681
							]
						],
						[
							[
								682
							]
						],
						[
							[
								683
							]
						],
						[
							[
								684
							]
						],
						[
							[
								685
							]
						],
						[
							[
								686
							]
						],
						[
							[
								687
							]
						],
						[
							[
								688
							]
						],
						[
							[
								1417,
								1418
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Hordaland",
						"ID": "0012 Hordaland",
						"Nr": 12
					}
				},
				{
					"arcs": [
						[
							[
								-104,
								-103,
								-102,
								-101,
								-100,
								-202,
								-201,
								-200,
								-199,
								375,
								382,
								383,
								384,
								363,
								364,
								365,
								366,
								369,
								370,
								371,
								372,
								373,
								374,
								1145,
								1146,
								1147,
								1138,
								1139,
								1140,
								1141,
								1142,
								1143,
								1144,
								1084,
								1085,
								1086,
								1087,
								1194,
								1195,
								1196,
								1197,
								1198,
								1199,
								1188,
								1200,
								1189,
								1190,
								1201,
								1170,
								1171,
								1172,
								1173,
								1174
							]
						],
						[
							[
								1088
							]
						],
						[
							[
								1089
							]
						],
						[
							[
								1090
							]
						],
						[
							[
								1091
							]
						],
						[
							[
								1165
							]
						],
						[
							[
								1166
							]
						],
						[
							[
								1167
							]
						],
						[
							[
								1168
							]
						],
						[
							[
								1169
							]
						],
						[
							[
								1175
							]
						],
						[
							[
								1176,
								-105
							]
						],
						[
							[
								1177
							]
						],
						[
							[
								1178
							]
						],
						[
							[
								1179
							]
						],
						[
							[
								1180
							]
						],
						[
							[
								1181
							]
						],
						[
							[
								1182
							]
						],
						[
							[
								1183
							]
						],
						[
							[
								1184
							]
						],
						[
							[
								1202
							]
						],
						[
							[
								1203
							]
						],
						[
							[
								1204
							]
						],
						[
							[
								1092
							]
						],
						[
							[
								1093
							]
						],
						[
							[
								1094
							]
						],
						[
							[
								1095
							]
						],
						[
							[
								1185
							]
						],
						[
							[
								1186
							]
						],
						[
							[
								1187
							]
						],
						[
							[
								1096
							]
						],
						[
							[
								1205
							]
						],
						[
							[
								1206
							]
						],
						[
							[
								1207
							]
						],
						[
							[
								1208
							]
						],
						[
							[
								1209
							]
						],
						[
							[
								1210
							]
						],
						[
							[
								1148,
								1149,
								1150,
								1151
							]
						],
						[
							[
								1152
							]
						],
						[
							[
								1153,
								1154
							]
						],
						[
							[
								1155
							]
						],
						[
							[
								1156
							]
						],
						[
							[
								1157
							]
						],
						[
							[
								1158
							]
						],
						[
							[
								1159
							]
						],
						[
							[
								1160
							]
						],
						[
							[
								1161
							]
						],
						[
							[
								1162,
								1163
							]
						],
						[
							[
								1164
							]
						],
						[
							[
								1097
							]
						],
						[
							[
								1098
							]
						],
						[
							[
								1099
							]
						],
						[
							[
								1100
							]
						],
						[
							[
								1101
							]
						],
						[
							[
								1191
							]
						],
						[
							[
								1192
							]
						],
						[
							[
								1193
							]
						],
						[
							[
								1102
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Møre og Romsdal",
						"ID": "0015 Møre og Romsdal",
						"Nr": 15
					}
				},
				{
					"arcs": [
						[
							[
								-375,
								-374,
								-373,
								-372,
								-371,
								-370,
								-367,
								-366,
								405,
								392,
								393,
								394,
								395,
								396,
								-264,
								-263,
								-262,
								-261,
								-144,
								-140,
								-139,
								397,
								398,
								399,
								-155,
								-154,
								797,
								1211,
								1212,
								1213,
								1214,
								1215,
								1216,
								1217,
								1218,
								1219,
								1220,
								1221,
								1222,
								1223,
								788,
								789,
								1224,
								791,
								1238,
								792,
								1225,
								1226,
								1227,
								1239,
								1240,
								1241,
								1242,
								1243,
								1244
							]
						],
						[
							[
								1228
							]
						],
						[
							[
								1229
							]
						],
						[
							[
								1230
							]
						],
						[
							[
								1231
							]
						],
						[
							[
								1232
							]
						],
						[
							[
								1233
							]
						],
						[
							[
								1234
							]
						],
						[
							[
								1235
							]
						],
						[
							[
								1236
							]
						],
						[
							[
								1237
							]
						],
						[
							[
								1245
							]
						],
						[
							[
								1246
							]
						],
						[
							[
								1247
							]
						],
						[
							[
								1248
							]
						],
						[
							[
								1249
							]
						],
						[
							[
								790
							]
						],
						[
							[
								793
							]
						],
						[
							[
								794
							]
						],
						[
							[
								795
							]
						],
						[
							[
								796
							]
						],
						[
							[
								798
							]
						],
						[
							[
								799
							]
						],
						[
							[
								800
							]
						],
						[
							[
								801
							]
						],
						[
							[
								802
							]
						],
						[
							[
								803
							]
						],
						[
							[
								804
							]
						],
						[
							[
								805
							]
						],
						[
							[
								806
							]
						],
						[
							[
								807
							]
						],
						[
							[
								808
							]
						],
						[
							[
								809
							]
						],
						[
							[
								810
							]
						],
						[
							[
								811
							]
						],
						[
							[
								812
							]
						],
						[
							[
								813
							]
						],
						[
							[
								814
							]
						],
						[
							[
								815
							]
						],
						[
							[
								816
							]
						],
						[
							[
								817
							]
						],
						[
							[
								818
							]
						],
						[
							[
								819
							]
						],
						[
							[
								1250
							]
						],
						[
							[
								1251
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Sogn og Fjordane",
						"ID": "0014 Sogn og Fjordane",
						"Nr": 14
					}
				},
				{
					"arcs": [
						[
							[
								-9,
								1429,
								-11,
								1430,
								-7,
								-6,
								-5,
								29,
								19,
								20,
								528,
								529,
								530,
								618,
								559,
								83,
								78,
								79,
								80,
								558,
								619,
								560,
								620,
								621,
								622,
								623,
								624,
								625,
								626,
								627,
								536,
								-1604,
								-76,
								-75,
								-74,
								-73,
								-72,
								-71,
								578,
								579,
								580,
								581,
								582,
								583,
								1427,
								531,
								1428
							]
						],
						[
							[
								584,
								585
							]
						],
						[
							[
								586
							]
						],
						[
							[
								587
							]
						],
						[
							[
								-8,
								-10,
								1421,
								1422
							]
						],
						[
							[
								1423
							]
						],
						[
							[
								1424
							]
						],
						[
							[
								1425
							]
						],
						[
							[
								1426
							]
						],
						[
							[
								1431
							]
						],
						[
							[
								1432
							]
						],
						[
							[
								1433
							]
						],
						[
							[
								1434
							]
						],
						[
							[
								1435
							]
						],
						[
							[
								1436
							]
						],
						[
							[
								1437
							]
						],
						[
							[
								1438
							]
						],
						[
							[
								1439
							]
						],
						[
							[
								1440
							]
						],
						[
							[
								1441
							]
						],
						[
							[
								1442
							]
						],
						[
							[
								1443
							]
						],
						[
							[
								1444
							]
						],
						[
							[
								1445
							]
						],
						[
							[
								1446
							]
						],
						[
							[
								1447
							]
						],
						[
							[
								1448
							]
						],
						[
							[
								1449
							]
						],
						[
							[
								1450
							]
						],
						[
							[
								561
							]
						],
						[
							[
								628
							]
						],
						[
							[
								588
							]
						],
						[
							[
								-70,
								589
							]
						],
						[
							[
								590
							]
						],
						[
							[
								591
							]
						],
						[
							[
								592
							]
						],
						[
							[
								593
							]
						],
						[
							[
								594
							]
						],
						[
							[
								595
							]
						],
						[
							[
								596
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Nord-Trøndelag",
						"ID": "0017 Nord-Trøndelag",
						"Nr": 17
					}
				},
				{
					"arcs": [
						[
							[
								196,
								197,
								198,
								199,
								200,
								201,
								99,
								100,
								101,
								102,
								103,
								568,
								104,
								569,
								570,
								571,
								572,
								573,
								574,
								564,
								565,
								566,
								567,
								-81,
								-80,
								-79,
								-84,
								562,
								563,
								89,
								90,
								85,
								94,
								95,
								193,
								194,
								195
							]
						],
						[
							[
								575
							]
						],
						[
							[
								69,
								535,
								70,
								71,
								72,
								73,
								74,
								75,
								1603,
								537,
								538,
								539,
								540,
								541,
								542,
								543
							]
						],
						[
							[
								544
							]
						],
						[
							[
								545
							]
						],
						[
							[
								1052
							]
						],
						[
							[
								1053
							]
						],
						[
							[
								1054
							]
						],
						[
							[
								1055
							]
						],
						[
							[
								1056
							]
						],
						[
							[
								1057
							]
						],
						[
							[
								1058
							]
						],
						[
							[
								1059
							]
						],
						[
							[
								1060
							]
						],
						[
							[
								546
							]
						],
						[
							[
								547
							]
						],
						[
							[
								1061
							]
						],
						[
							[
								1062
							]
						],
						[
							[
								1063
							]
						],
						[
							[
								1064
							]
						],
						[
							[
								1065
							]
						],
						[
							[
								1066
							]
						],
						[
							[
								1067
							]
						],
						[
							[
								576
							]
						],
						[
							[
								577
							]
						],
						[
							[
								548
							]
						],
						[
							[
								549
							]
						],
						[
							[
								550
							]
						],
						[
							[
								551
							]
						],
						[
							[
								552
							]
						],
						[
							[
								553
							]
						],
						[
							[
								554
							]
						],
						[
							[
								555
							]
						],
						[
							[
								556
							]
						],
						[
							[
								557
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Sør-Trøndelag",
						"ID": "0016 Sør-Trøndelag",
						"Nr": 16
					}
				},
				{
					"arcs": [
						[
							[
								863,
								864
							]
						],
						[
							[
								865,
								866,
								867,
								729,
								730,
								186,
								-348,
								-347,
								-346,
								-345,
								-344,
								1076,
								1077,
								1078,
								1079,
								725,
								726,
								727,
								728,
								1105,
								1106,
								1107,
								1108,
								868,
								869,
								870,
								871,
								872,
								-303,
								-302,
								307,
								303
							]
						],
						[
							[
								873
							]
						],
						[
							[
								874
							]
						],
						[
							[
								875
							]
						],
						[
							[
								876
							]
						],
						[
							[
								877
							]
						],
						[
							[
								878
							]
						],
						[
							[
								879
							]
						],
						[
							[
								880
							]
						],
						[
							[
								881
							]
						],
						[
							[
								882
							]
						],
						[
							[
								1103,
								1104
							]
						],
						[
							[
								1109
							]
						],
						[
							[
								1110
							]
						],
						[
							[
								1111,
								1112
							]
						],
						[
							[
								1113
							]
						],
						[
							[
								1114
							]
						],
						[
							[
								1115
							]
						],
						[
							[
								1116
							]
						],
						[
							[
								1117
							]
						],
						[
							[
								1118
							]
						],
						[
							[
								1119
							]
						],
						[
							[
								1120
							]
						],
						[
							[
								1121
							]
						],
						[
							[
								1122
							]
						],
						[
							[
								1123
							]
						],
						[
							[
								1124
							]
						],
						[
							[
								-350,
								-349,
								354,
								355,
								1068,
								1069
							]
						],
						[
							[
								1070
							]
						],
						[
							[
								1071
							]
						],
						[
							[
								1072
							]
						],
						[
							[
								1073
							]
						],
						[
							[
								1074
							]
						],
						[
							[
								1075
							]
						],
						[
							[
								1080
							]
						],
						[
							[
								1081
							]
						],
						[
							[
								1082
							]
						],
						[
							[
								1083
							]
						],
						[
							[
								731
							]
						],
						[
							[
								732,
								733,
								734,
								735
							]
						],
						[
							[
								736
							]
						],
						[
							[
								1125
							]
						],
						[
							[
								1126
							]
						],
						[
							[
								1127
							]
						],
						[
							[
								1128
							]
						],
						[
							[
								1129
							]
						],
						[
							[
								1130
							]
						],
						[
							[
								1131
							]
						],
						[
							[
								1132
							]
						],
						[
							[
								1133
							]
						],
						[
							[
								1134
							]
						],
						[
							[
								1135
							]
						],
						[
							[
								1136
							]
						],
						[
							[
								1137
							]
						],
						[
							[
								883
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Troms",
						"ID": "0019 Troms",
						"Nr": 19
					}
				},
				{
					"arcs": [
						[
							[
								-21,
								-20,
								-30,
								4,
								5,
								6,
								485,
								486,
								487,
								488,
								489,
								490,
								491,
								492,
								493,
								494,
								951,
								1400,
								960,
								952,
								954,
								955,
								956,
								957,
								919,
								920,
								968,
								969,
								970,
								971,
								972,
								973,
								974,
								975,
								976,
								977,
								978,
								979,
								980,
								1023,
								1024,
								1025,
								1026,
								1027,
								343,
								344,
								345,
								346,
								347,
								-187,
								1028,
								1029,
								1030,
								964,
								965,
								966,
								967,
								958,
								959,
								953
							]
						],
						[
							[
								981
							]
						],
						[
							[
								982
							]
						],
						[
							[
								983
							]
						],
						[
							[
								984
							]
						],
						[
							[
								918
							]
						],
						[
							[
								921
							]
						],
						[
							[
								922,
								923
							]
						],
						[
							[
								924,
								925
							]
						],
						[
							[
								926,
								985
							]
						],
						[
							[
								927
							]
						],
						[
							[
								928
							]
						],
						[
							[
								929
							]
						],
						[
							[
								930
							]
						],
						[
							[
								931
							]
						],
						[
							[
								932
							]
						],
						[
							[
								933
							]
						],
						[
							[
								934
							]
						],
						[
							[
								935
							]
						],
						[
							[
								936
							]
						],
						[
							[
								986
							]
						],
						[
							[
								987
							]
						],
						[
							[
								988
							]
						],
						[
							[
								989
							]
						],
						[
							[
								990
							]
						],
						[
							[
								991
							]
						],
						[
							[
								992
							]
						],
						[
							[
								993
							]
						],
						[
							[
								994
							]
						],
						[
							[
								995
							]
						],
						[
							[
								996
							]
						],
						[
							[
								997
							]
						],
						[
							[
								937
							]
						],
						[
							[
								938
							]
						],
						[
							[
								939
							]
						],
						[
							[
								940
							]
						],
						[
							[
								941
							]
						],
						[
							[
								942
							]
						],
						[
							[
								943
							]
						],
						[
							[
								944
							]
						],
						[
							[
								945
							]
						],
						[
							[
								946
							]
						],
						[
							[
								947
							]
						],
						[
							[
								948
							]
						],
						[
							[
								949
							]
						],
						[
							[
								950
							]
						],
						[
							[
								998
							]
						],
						[
							[
								999
							]
						],
						[
							[
								1000
							]
						],
						[
							[
								1001
							]
						],
						[
							[
								1002
							]
						],
						[
							[
								1003
							]
						],
						[
							[
								1004
							]
						],
						[
							[
								1005
							]
						],
						[
							[
								1006
							]
						],
						[
							[
								1037,
								1038
							]
						],
						[
							[
								-356,
								-355,
								348,
								349,
								1033,
								1353,
								1043,
								1354,
								1355,
								1356,
								1357
							]
						],
						[
							[
								1358,
								1359,
								1360,
								1361,
								1362,
								1363,
								1364,
								1365,
								1366
							]
						],
						[
							[
								1367
							]
						],
						[
							[
								961
							]
						],
						[
							[
								962
							]
						],
						[
							[
								963
							]
						],
						[
							[
								1378,
								1379,
								1380,
								1381
							]
						],
						[
							[
								1382
							]
						],
						[
							[
								1383
							]
						],
						[
							[
								1384
							]
						],
						[
							[
								1385
							]
						],
						[
							[
								1386
							]
						],
						[
							[
								1387
							]
						],
						[
							[
								1388,
								1389
							]
						],
						[
							[
								1390
							]
						],
						[
							[
								1391
							]
						],
						[
							[
								1392
							]
						],
						[
							[
								1393
							]
						],
						[
							[
								1394
							]
						],
						[
							[
								1395
							]
						],
						[
							[
								1396
							]
						],
						[
							[
								1397
							]
						],
						[
							[
								1398
							]
						],
						[
							[
								1399
							]
						],
						[
							[
								1039
							]
						],
						[
							[
								1040
							]
						],
						[
							[
								1007
							]
						],
						[
							[
								1008
							]
						],
						[
							[
								1009
							]
						],
						[
							[
								1010
							]
						],
						[
							[
								1011
							]
						],
						[
							[
								1041,
								1368
							]
						],
						[
							[
								1042
							]
						],
						[
							[
								1044
							]
						],
						[
							[
								1045
							]
						],
						[
							[
								1046
							]
						],
						[
							[
								1047
							]
						],
						[
							[
								1369
							]
						],
						[
							[
								1370
							]
						],
						[
							[
								1371
							]
						],
						[
							[
								1372
							]
						],
						[
							[
								1373
							]
						],
						[
							[
								1374
							]
						],
						[
							[
								1375
							]
						],
						[
							[
								473
							]
						],
						[
							[
								474
							]
						],
						[
							[
								475
							]
						],
						[
							[
								476
							]
						],
						[
							[
								477
							]
						],
						[
							[
								478
							]
						],
						[
							[
								479
							]
						],
						[
							[
								480
							]
						],
						[
							[
								481
							]
						],
						[
							[
								482
							]
						],
						[
							[
								483
							]
						],
						[
							[
								484
							]
						],
						[
							[
								495
							]
						],
						[
							[
								496,
								8,
								497,
								9,
								7
							]
						],
						[
							[
								10,
								498
							]
						],
						[
							[
								499
							]
						],
						[
							[
								500
							]
						],
						[
							[
								501
							]
						],
						[
							[
								502
							]
						],
						[
							[
								503
							]
						],
						[
							[
								504
							]
						],
						[
							[
								505
							]
						],
						[
							[
								506
							]
						],
						[
							[
								507
							]
						],
						[
							[
								508
							]
						],
						[
							[
								509
							]
						],
						[
							[
								1401
							]
						],
						[
							[
								1402
							]
						],
						[
							[
								1403
							]
						],
						[
							[
								1404
							]
						],
						[
							[
								1405
							]
						],
						[
							[
								1406
							]
						],
						[
							[
								1407
							]
						],
						[
							[
								1408
							]
						],
						[
							[
								1409
							]
						],
						[
							[
								1410
							]
						],
						[
							[
								1411
							]
						],
						[
							[
								1048
							]
						],
						[
							[
								1031
							]
						],
						[
							[
								1032
							]
						],
						[
							[
								1376
							]
						],
						[
							[
								1034
							]
						],
						[
							[
								1035
							]
						],
						[
							[
								1036
							]
						],
						[
							[
								1049
							]
						],
						[
							[
								1050
							]
						],
						[
							[
								1051
							]
						],
						[
							[
								1012
							]
						],
						[
							[
								1013
							]
						],
						[
							[
								1014
							]
						],
						[
							[
								1015
							]
						],
						[
							[
								1016
							]
						],
						[
							[
								1017
							]
						],
						[
							[
								1018
							]
						],
						[
							[
								1019
							]
						],
						[
							[
								1020
							]
						],
						[
							[
								1021
							]
						],
						[
							[
								1022
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Nordland",
						"ID": "0018 Nordland",
						"Nr": 18
					}
				},
				{
					"arcs": [
						[
							[
								-304,
								-308,
								301,
								302,
								828,
								829,
								830,
								831,
								832,
								902,
								827,
								903,
								892,
								898,
								884,
								885,
								886,
								887,
								888,
								889,
								890,
								899,
								900,
								901
							]
						],
						[
							[
								833
							]
						],
						[
							[
								834
							]
						],
						[
							[
								835
							]
						],
						[
							[
								836
							]
						],
						[
							[
								837
							]
						],
						[
							[
								838
							]
						],
						[
							[
								839
							]
						],
						[
							[
								840
							]
						],
						[
							[
								841
							]
						],
						[
							[
								842
							]
						],
						[
							[
								843,
								844,
								845
							]
						],
						[
							[
								846,
								847,
								848,
								849
							]
						],
						[
							[
								850
							]
						],
						[
							[
								851
							]
						],
						[
							[
								852
							]
						],
						[
							[
								853,
								854,
								855
							]
						],
						[
							[
								856,
								857
							]
						],
						[
							[
								858
							]
						],
						[
							[
								891
							]
						],
						[
							[
								904
							]
						],
						[
							[
								905
							]
						],
						[
							[
								906
							]
						],
						[
							[
								907
							]
						],
						[
							[
								908
							]
						],
						[
							[
								909
							]
						],
						[
							[
								910
							]
						],
						[
							[
								911
							]
						],
						[
							[
								912
							]
						],
						[
							[
								893
							]
						],
						[
							[
								894
							]
						],
						[
							[
								895
							]
						],
						[
							[
								896
							]
						],
						[
							[
								897
							]
						],
						[
							[
								859
							]
						],
						[
							[
								860
							]
						],
						[
							[
								861
							]
						],
						[
							[
								862
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Finnmark",
						"ID": "0020 Finnmark",
						"Nr": 20
					}
				},
				{
					"arcs": [
						[
							[
								120,
								121,
								66,
								67,
								68,
								51,
								52,
								53,
								54,
								55,
								56,
								57,
								58,
								532,
								533,
								534,
								1377,
								1293,
								1294,
								613,
								614,
								615
							]
						],
						[
							[
								1295
							]
						],
						[
							[
								1296
							]
						],
						[
							[
								1297
							]
						],
						[
							[
								616
							]
						],
						[
							[
								617
							]
						],
						[
							[
								1298
							]
						],
						[
							[
								1299
							]
						],
						[
							[
								1300
							]
						],
						[
							[
								1301
							]
						],
						[
							[
								1302
							]
						],
						[
							[
								1303
							]
						],
						[
							[
								1304
							]
						],
						[
							[
								1305
							]
						],
						[
							[
								1306
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Østfold",
						"ID": "0001 Østfold",
						"Nr": 1
					}
				},
				{
					"arcs": [
						[
							281,
							-245,
							282,
							283,
							284,
							285,
							286,
							287,
							288,
							820
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Oslo",
						"ID": "0003 Oslo",
						"Nr": 3
					}
				},
				{
					"arcs": [
						[
							[
								162,
								163,
								164,
								165,
								166,
								-453,
								1321,
								-59,
								-58,
								-57,
								-56,
								-55,
								-54,
								-53,
								-52,
								-69,
								-68,
								-67,
								-122,
								-121,
								1334,
								1335,
								1336,
								1337,
								1338,
								1339,
								1340,
								1341,
								-289,
								-288,
								-287,
								-286,
								-285,
								-284,
								-316,
								156,
								157,
								158,
								159,
								160,
								161
							]
						],
						[
							[
								-291,
								1342
							]
						],
						[
							[
								1343
							]
						],
						[
							[
								-282,
								913,
								914,
								-290,
								-293,
								-292,
								-234,
								-246
							]
						],
						[
							[
								915
							]
						],
						[
							[
								916
							]
						],
						[
							[
								917
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Akershus",
						"ID": "0002 Akershus",
						"Nr": 2
					}
				},
				{
					"arcs": [
						[
							-162,
							-161,
							-160,
							-159,
							-158,
							-157,
							315,
							-283,
							-244,
							-243,
							-242,
							-241,
							-240,
							-271,
							-270,
							-269,
							-268,
							-267,
							-266,
							-265,
							-397,
							-396,
							-395,
							-394,
							-393,
							-406,
							-365,
							-364,
							-385,
							-384,
							-383,
							-376,
							-198,
							-197,
							409,
							410,
							180,
							181,
							182,
							-439,
							457,
							458,
							465,
							466,
							467
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Oppland",
						"ID": "0005 Oppland",
						"Nr": 5
					}
				},
				{
					"arcs": [
						[
							-196,
							-195,
							-194,
							-96,
							-95,
							-86,
							-91,
							-90,
							1314,
							1315,
							1316,
							1317,
							1318,
							1319,
							1320,
							452,
							-167,
							-166,
							-165,
							-164,
							-163,
							-468,
							-467,
							-466,
							-459,
							-458,
							438,
							-183,
							-182,
							-181,
							-411,
							-410
						]
					],
					"type": "Polygon",
					"properties": {
						"Sted": "Hedmark",
						"ID": "0004 Hedmark",
						"Nr": 4
					}
				},
				{
					"arcs": [
						[
							[
								785,
								786,
								760,
								761,
								762,
								763,
								764,
								765,
								754,
								755,
								-218,
								-217,
								-216,
								220,
								227,
								228,
								229,
								230,
								1484,
								1486
							]
						],
						[
							[
								766
							]
						],
						[
							[
								787
							]
						],
						[
							[
								-220,
								756
							]
						],
						[
							[
								757,
								-219
							]
						],
						[
							[
								758
							]
						],
						[
							[
								759
							]
						],
						[
							[
								767,
								768,
								769,
								770,
								771,
								772
							]
						],
						[
							[
								773,
								774
							]
						],
						[
							[
								775
							]
						],
						[
							[
								776,
								777
							]
						],
						[
							[
								778
							]
						],
						[
							[
								779
							]
						],
						[
							[
								780
							]
						],
						[
							[
								781
							]
						],
						[
							[
								782
							]
						],
						[
							[
								783
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Vestfold",
						"ID": "0007 Vestfold",
						"Nr": 7
					}
				},
				{
					"arcs": [
						[
							[
								-215,
								-214,
								-210,
								-207,
								-206,
								-205,
								-204,
								-203,
								-34,
								-147,
								-146,
								-145,
								260,
								261,
								262,
								263,
								264,
								265,
								266,
								267,
								268,
								269,
								270,
								239,
								240,
								241,
								242,
								243,
								244,
								245,
								233,
								291,
								292,
								289,
								821,
								822,
								290,
								823,
								824,
								825,
								784,
								-1487,
								-1485,
								-231,
								-230,
								-229,
								-228,
								-221
							]
						],
						[
							[
								826
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Buskerud",
						"ID": "0006 Buskerud",
						"Nr": 6
					}
				},
				{
					"arcs": [
						[
							[
								-1643,
								-1642,
								-1531,
								-1530,
								321,
								322,
								323,
								324,
								325,
								326,
								327,
								328,
								329,
								316,
								317,
								318,
								-51,
								-50,
								-49,
								-48,
								-47,
								-46,
								-45,
								-44,
								-43,
								116,
								117,
								118,
								597,
								598,
								599,
								600,
								601,
								602,
								603,
								604,
								1344
							]
						],
						[
							[
								605
							]
						],
						[
							[
								606
							]
						],
						[
							[
								607
							]
						],
						[
							[
								608
							]
						],
						[
							[
								609,
								1351
							]
						],
						[
							[
								1352
							]
						],
						[
							[
								610
							]
						],
						[
							[
								611
							]
						],
						[
							[
								612
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Aust-Agder",
						"ID": "0009 Aust-Agder",
						"Nr": 9
					}
				},
				{
					"arcs": [
						[
							[
								-119,
								-118,
								-117,
								42,
								43,
								44,
								45,
								46,
								47,
								48,
								49,
								50,
								30,
								31,
								32,
								33,
								202,
								203,
								204,
								205,
								206,
								209,
								213,
								214,
								215,
								216,
								217,
								737,
								218,
								738,
								739,
								740,
								741,
								742,
								743
							]
						],
						[
							[
								744
							]
						],
						[
							[
								745
							]
						],
						[
							[
								746
							]
						],
						[
							[
								747
							]
						],
						[
							[
								748
							]
						],
						[
							[
								749
							]
						],
						[
							[
								219,
								750
							]
						],
						[
							[
								751
							]
						],
						[
							[
								752
							]
						],
						[
							[
								753
							]
						]
					],
					"type": "MultiPolygon",
					"properties": {
						"Sted": "Telemark",
						"ID": "0008 Telemark",
						"Nr": 8
					}
				}
			]
		}
	}
};

/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _react = __webpack_require__(17);

var _react2 = _interopRequireDefault(_react);

var _reactDom = __webpack_require__(103);

var _reactDom2 = _interopRequireDefault(_reactDom);

var _reactRedux = __webpack_require__(59);

var _NorwayMap = __webpack_require__(101);

var _NorwayMap2 = _interopRequireDefault(_NorwayMap);

var _nodata = __webpack_require__(104);

var _nodata2 = _interopRequireDefault(_nodata);

var _actions = __webpack_require__(58);

var _actions2 = _interopRequireDefault(_actions);

var _store = __webpack_require__(102);

var _store2 = _interopRequireDefault(_store);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var app = document.getElementById("app");
//import Chart from "./components/Chart.js"

function mapStateToProps(state) {
	return { selected: state.selected };
}

function Container(props) {
	function renderSub(selected) {
		console.log(selected);
		if (selected) {
			return _react2.default.createElement(_NorwayMap2.default, { type: "original", object: "kommune", data: _nodata2.default, fylke: selected });
		}
	}
	return _react2.default.createElement(
		"div",
		null,
		_react2.default.createElement(_NorwayMap2.default, { type: "simple", object: "fylke", data: _nodata2.default }),
		renderSub(props.selected)
	);
}

var Container2 = (0, _reactRedux.connect)(mapStateToProps)(Container);

_reactDom2.default.render(_react2.default.createElement(
	_reactRedux.Provider,
	{ store: _store2.default },
	_react2.default.createElement(Container2, null)
), app);

/***/ })
/******/ ]);